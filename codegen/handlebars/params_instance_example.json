{
    "sensors":  [
        {
            "ism330dhcx_acc": {
                "fs": "16.0f",
                "odr": "1666.0f"
            }
        }
    ],
    "pre_processing": {
        "input_buffer_size": "512",
        "functions": [
            {
                "name": "axis_selection",
                "code_init": "// axis_selection.\n    pre_processing_data->axis = SELECTED_AXIS;\n\n    ",
                "code_process": "// axis_selection.\n    float32_t data_1[data_in_size];\n    axis_selection(data_in, data_in_size, data_1, data_in_size, pre_processing_data->axis);\n\n    ",
                "parameters": {
                    "selected_axes": ["X"]
                }
            },
            {
                "name": "mean_removal",
                "code_init": "",
                "code_process": "// mean_removal.\n    float32_t data_2[data_in_size];\n    mean_removal(data_1, data_in_size, data_2, data_in_size);\n\n    ",
                "parameters": {}
            },
            {
                "name": "mfcc",
                "code_init": "// mfcc.\n    arm_status status;\n    arm_rfft_fast_init_f32(&((*pre_processing_data).fft_handler), INPUT_BUFFER_SIZE);\n    status = arm_dct4_init_f32(&((*pre_processing_data).dct4f32), &((*pre_processing_data).rfftf32), &((*pre_processing_data).cfftradix4f32), TRIANGULAR_FILTERS_BANK_SIZE, TRIANGULAR_FILTERS_BANK_SIZE/2, 0.125);\n    if (status != ARM_MATH_SUCCESS) {\n        sys_error_handler();\n    }\n    pre_processing_data->triangular_filters_scale = TRIANGULAR_FILTERS_SCALE;\n    pre_processing_data->signal_windowing = SIGNAL_WINDOWING;\n    triangular_filters_bank(INPUT_BUFFER_SIZE, ISM330DHCX_ODR, pre_processing_data->triangular_filters_scale, (*pre_processing_data).bin);\n    (*pre_processing_data).multipliers = (float32_t*) calloc(INPUT_BUFFER_SIZE, sizeof(float32_t));\n    multipliers_init((*pre_processing_data).multipliers, INPUT_BUFFER_SIZE, (*pre_processing_data).signal_windowing);\n\n    ",
                "code_process": "// mfcc.\n    mfcc(data_2, data_in_size, data_out, data_out_size, ((*pre_processing_data).bin), &((*pre_processing_data).dct4f32), &((*pre_processing_data).fft_handler), (*pre_processing_data).signal_windowing, (*pre_processing_data).multipliers);\n\n    ",
                "parameters": {
                    "triangular_filters_scale": "TRIANGULAR_FILTERS_SCALE_HZ",
                    "signal_windowing": "HANNING"
                }
            }
        ],
    },
    "ai_processing": {
        "network_name": "network"
    },
    "post_processing": {
        "functions": []
    }
}
