
AiDpuDemo_stwin_box_prj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000234  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000257fc  08000238  08000238  00010238  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001057c  08025a40  08025a40  00035a40  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08035fbc  08035fbc  00045fbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08035fc4  08035fc4  00045fc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08035fc8  08035fc8  00045fc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000006bc  20000000  08035fcc  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0003a654  200006c0  08036688  000506c0  2**5
                  ALLOC
  8 ._user_heap_stack 00000604  2003ad14  08036688  0005ad14  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  000506bc  2**0
                  CONTENTS, READONLY
 10 .debug_info   000769e6  00000000  00000000  000506f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000f4c8  00000000  00000000  000c70d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000042a8  00000000  00000000  000d65a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000039e0  00000000  00000000  000da848  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0004bd02  00000000  00000000  000de228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00073df7  00000000  00000000  00129f2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017eb05  00000000  00000000  0019dd21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      000000cb  00000000  00000000  0031c826  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00010c90  00000000  00000000  0031c8f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	; (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	; (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	; (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	e000      	b.n	800024a <__do_global_dtors_aux+0x12>
 8000248:	bf00      	nop
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	200006c0 	.word	0x200006c0
 8000254:	00000000 	.word	0x00000000
 8000258:	08025a1c 	.word	0x08025a1c

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	; (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	; (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	; (8000274 <frame_dummy+0x18>)
 8000266:	e000      	b.n	800026a <frame_dummy+0xe>
 8000268:	bf00      	nop
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	200006c4 	.word	0x200006c4
 8000274:	08025a1c 	.word	0x08025a1c

08000278 <_tx_thread_interrupt_control>:
    .thumb_func
.type _tx_thread_interrupt_control, function
_tx_thread_interrupt_control:

    /* Pickup current interrupt lockout posture.  */
    MRS     r1, PRIMASK
 8000278:	f3ef 8110 	mrs	r1, PRIMASK
    MSR     PRIMASK, r0
 800027c:	f380 8810 	msr	PRIMASK, r0
    MOV     r0, r1
 8000280:	1c08      	adds	r0, r1, #0
    BX      lr
 8000282:	4770      	bx	lr

08000284 <_tx_thread_schedule>:
    /* This function should only ever be called on Cortex-M
       from the first schedule request. Subsequent scheduling occurs
       from the PendSV handling routine below. */

    /* Clear the preempt-disable flag to enable rescheduling after initialization on Cortex-M targets.  */
    MOV     r0, #0                                  // Build value for TX_FALSE
 8000284:	f04f 0000 	mov.w	r0, #0
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000288:	4a2e      	ldr	r2, [pc, #184]	; (8000344 <_tx_vfp_access+0x8>)
    STR     r0, [r2, #0]                            // Clear preempt disable flag
 800028a:	6010      	str	r0, [r2, #0]

#ifdef __ARM_PCS_VFP
    /* Clear CONTROL.FPCA bit so VFP registers aren't unnecessarily stacked.  */
    MRS     r0, CONTROL                             // Pickup current CONTROL register
 800028c:	f3ef 8014 	mrs	r0, CONTROL
    BIC     r0, r0, #4                              // Clear the FPCA bit
 8000290:	f020 0004 	bic.w	r0, r0, #4
    MSR     CONTROL, r0                             // Setup new CONTROL register
 8000294:	f380 8814 	msr	CONTROL, r0
#endif

    /* Enable interrupts */
    CPSIE   i
 8000298:	b662      	cpsie	i

    /* Enter the scheduler for the first time.  */

    MOV     r0, #0x10000000                         // Load PENDSVSET bit
 800029a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    MOV     r1, #0xE000E000                         // Load NVIC base
 800029e:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    STR     r0, [r1, #0xD04]                        // Set PENDSVBIT in ICSR
 80002a2:	f8c1 0d04 	str.w	r0, [r1, #3332]	; 0xd04
    DSB                                             // Complete all memory accesses
 80002a6:	f3bf 8f4f 	dsb	sy
    ISB                                             // Flush pipeline
 80002aa:	f3bf 8f6f 	isb	sy

080002ae <__tx_wait_here>:

    /* Wait here for the PendSV to take place.  */

__tx_wait_here:
    B       __tx_wait_here                          // Wait for the PendSV to happen
 80002ae:	e7fe      	b.n	80002ae <__tx_wait_here>

080002b0 <PendSV_Handler>:
    PUSH    {r0, lr}                                // Save LR (and r0 just for alignment)
    BL      _tx_execution_thread_exit               // Call the thread exit function
    POP     {r0, lr}                                // Recover LR
    CPSIE   i                                       // Enable interrupts
#endif
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80002b0:	4825      	ldr	r0, [pc, #148]	; (8000348 <_tx_vfp_access+0xc>)
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80002b2:	4a26      	ldr	r2, [pc, #152]	; (800034c <_tx_vfp_access+0x10>)
    MOV     r3, #0                                  // Build NULL value
 80002b4:	f04f 0300 	mov.w	r3, #0
    LDR     r1, [r0]                                // Pickup current thread pointer
 80002b8:	6801      	ldr	r1, [r0, #0]

    /* Determine if there is a current thread to finish preserving.  */

    CBZ     r1, __tx_ts_new                         // If NULL, skip preservation
 80002ba:	b191      	cbz	r1, 80002e2 <__tx_ts_new>

    /* Recover PSP and preserve current thread context.  */

    STR     r3, [r0]                                // Set _tx_thread_current_ptr to NULL
 80002bc:	6003      	str	r3, [r0, #0]
    MRS     r12, PSP                                // Pickup PSP pointer (thread's stack pointer)
 80002be:	f3ef 8c09 	mrs	ip, PSP
    STMDB   r12!, {r4-r11}                          // Save its remaining registers
 80002c2:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#ifdef __ARM_PCS_VFP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 80002c6:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_save
 80002ca:	d101      	bne.n	80002d0 <_skip_vfp_save>
    VSTMDB  r12!,{s16-s31}                          // Yes, save additional VFP registers
 80002cc:	ed2c 8a10 	vstmdb	ip!, {s16-s31}

080002d0 <_skip_vfp_save>:
_skip_vfp_save:
#endif
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80002d0:	4c1f      	ldr	r4, [pc, #124]	; (8000350 <_tx_vfp_access+0x14>)
    STMDB   r12!, {LR}                              // Save LR on the stack
 80002d2:	f84c ed04 	str.w	lr, [ip, #-4]!
    STR     r12, [r1, #8]                           // Save the thread stack pointer
 80002d6:	f8c1 c008 	str.w	ip, [r1, #8]
_skip_secure_save:
#endif

    /* Determine if time-slice is active. If it isn't, skip time handling processing.  */

    LDR     r5, [r4]                                // Pickup current time-slice
 80002da:	6825      	ldr	r5, [r4, #0]
    CBZ     r5, __tx_ts_new                         // If not active, skip processing
 80002dc:	b10d      	cbz	r5, 80002e2 <__tx_ts_new>

    /* Time-slice is active, save the current thread's time-slice and clear the global time-slice variable.  */

    STR     r5, [r1, #24]                           // Save current time-slice
 80002de:	618d      	str	r5, [r1, #24]

    /* Clear the global time-slice.  */

    STR     r3, [r4]                                // Clear time-slice
 80002e0:	6023      	str	r3, [r4, #0]

080002e2 <__tx_ts_new>:

__tx_ts_new:

    /* Now we are looking for a new thread to execute!  */

    CPSID   i                                       // Disable interrupts
 80002e2:	b672      	cpsid	i
    LDR     r1, [r2]                                // Is there another thread ready to execute?
 80002e4:	6811      	ldr	r1, [r2, #0]
    CBZ     r1, __tx_ts_wait                        // No, skip to the wait processing
 80002e6:	b1d1      	cbz	r1, 800031e <__tx_ts_wait>

    /* Yes, another thread is ready for else, make the current thread the new thread.  */

    STR     r1, [r0]                                // Setup the current thread pointer to the new thread
 80002e8:	6001      	str	r1, [r0, #0]
    CPSIE   i                                       // Enable interrupts
 80002ea:	b662      	cpsie	i

080002ec <__tx_ts_restore>:

    /* Increment the thread run count.  */

__tx_ts_restore:
    LDR     r7, [r1, #4]                            // Pickup the current thread run count
 80002ec:	684f      	ldr	r7, [r1, #4]
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80002ee:	4c18      	ldr	r4, [pc, #96]	; (8000350 <_tx_vfp_access+0x14>)
    LDR     r5, [r1, #24]                           // Pickup thread's current time-slice
 80002f0:	698d      	ldr	r5, [r1, #24]
    ADD     r7, r7, #1                              // Increment the thread run count
 80002f2:	f107 0701 	add.w	r7, r7, #1
    STR     r7, [r1, #4]                            // Store the new run count
 80002f6:	604f      	str	r7, [r1, #4]

    /* Setup global time-slice with thread's current time-slice.  */

    STR     r5, [r4]                                // Setup global time-slice
 80002f8:	6025      	str	r5, [r4, #0]
    POP     {r0,r1}                                 // Restore r1 (and dummy r0)
_skip_secure_restore:
#endif

    /* Restore the thread context and PSP.  */
    LDR     r12, [r1, #12]                          // Get stack start
 80002fa:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    MSR     PSPLIM, r12                             // Set stack limit
 80002fe:	f38c 880b 	msr	PSPLIM, ip
    LDR     r12, [r1, #8]                           // Pickup thread's stack pointer
 8000302:	f8d1 c008 	ldr.w	ip, [r1, #8]
    LDMIA   r12!, {LR}                              // Pickup LR
 8000306:	f85c eb04 	ldr.w	lr, [ip], #4
#ifdef __ARM_PCS_VFP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 800030a:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_restore                       // If not, skip VFP restore
 800030e:	d101      	bne.n	8000314 <_skip_vfp_restore>
    VLDMIA  r12!, {s16-s31}                         // Yes, restore additional VFP registers
 8000310:	ecbc 8a10 	vldmia	ip!, {s16-s31}

08000314 <_skip_vfp_restore>:
_skip_vfp_restore:
#endif
    LDMIA   r12!, {r4-r11}                          // Recover thread's registers
 8000314:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
    MSR     PSP, r12                                // Setup the thread's stack pointer
 8000318:	f38c 8809 	msr	PSP, ip

    /* Return to thread.  */
    BX      lr                                      // Return to thread!
 800031c:	4770      	bx	lr

0800031e <__tx_ts_wait>:
    /* The following is the idle wait processing... in this case, no threads are ready for execution and the
       system will simply be idle until an interrupt occurs that makes a thread ready. Note that interrupts
       are disabled to allow use of WFI for waiting for a thread to arrive.  */

__tx_ts_wait:
    CPSID   i                                       // Disable interrupts
 800031e:	b672      	cpsid	i
    LDR     r1, [r2]                                // Pickup the next thread to execute pointer
 8000320:	6811      	ldr	r1, [r2, #0]
    STR     r1, [r0]                                // Store it in the current pointer
 8000322:	6001      	str	r1, [r0, #0]
    CBNZ    r1, __tx_ts_ready                       // If non-NULL, a new thread is ready!
 8000324:	b909      	cbnz	r1, 800032a <__tx_ts_ready>
    PUSH    {r0-r3}
    BL      tx_low_power_exit                       // Exit low power mode
    POP     {r0-r3}
#endif

    CPSIE   i                                       // Enable interrupts
 8000326:	b662      	cpsie	i
    B       __tx_ts_wait                            // Loop to continue waiting
 8000328:	e7f9      	b.n	800031e <__tx_ts_wait>

0800032a <__tx_ts_ready>:

    /* At this point, we have a new thread ready to go. Clear any newly pended PendSV - since we are
       already in the handler!  */
__tx_ts_ready:
    MOV     r7, #0x08000000                         // Build clear PendSV value
 800032a:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    MOV     r8, #0xE000E000                         // Build base NVIC address
 800032e:	f04f 28e0 	mov.w	r8, #3758153728	; 0xe000e000
    STR     r7, [r8, #0xD04]                        // Clear any PendSV
 8000332:	f8c8 7d04 	str.w	r7, [r8, #3332]	; 0xd04

    /* Re-enable interrupts and restore new thread.  */
    CPSIE   i                                       // Enable interrupts
 8000336:	b662      	cpsie	i
    B       __tx_ts_restore                         // Restore the thread
 8000338:	e7d8      	b.n	80002ec <__tx_ts_restore>
 800033a:	bf00      	nop

0800033c <_tx_vfp_access>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  _tx_vfp_access
    .thumb_func
.type _tx_vfp_access, function
_tx_vfp_access:
    VMOV.F32 s0, s0                                 // Simply access the VFP
 800033c:	eeb0 0a40 	vmov.f32	s0, s0
    BX       lr                                     // Return to caller
 8000340:	4770      	bx	lr
 8000342:	0000      	.short	0x0000
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000344:	200260fc 	.word	0x200260fc
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 8000348:	20026064 	.word	0x20026064
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 800034c:	20026068 	.word	0x20026068
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 8000350:	20026668 	.word	0x20026668

08000354 <_tx_thread_stack_build>:
                       pc          Initial value for pc
                       xPSR        Initial value for xPSR

    Stack Bottom: (higher memory address)  */

    LDR     r2, [r0, #16]                           // Pickup end of stack area
 8000354:	6902      	ldr	r2, [r0, #16]
    BIC     r2, r2, #0x7                            // Align frame for 8-byte alignment
 8000356:	f022 0207 	bic.w	r2, r2, #7
    SUB     r2, r2, #68                             // Subtract frame size
 800035a:	f1a2 0244 	sub.w	r2, r2, #68	; 0x44
#ifdef TX_SINGLE_MODE_SECURE
    LDR     r3, =0xFFFFFFFD                         // Build initial LR value for secure mode
#else
    LDR     r3, =0xFFFFFFBC                         // Build initial LR value to return to non-secure PSP
 800035e:	f06f 0343 	mvn.w	r3, #67	; 0x43
#endif
    STR     r3, [r2, #0]                            // Save on the stack
 8000362:	6013      	str	r3, [r2, #0]

    /* Actually build the stack frame.  */

    MOV     r3, #0                                  // Build initial register value
 8000364:	f04f 0300 	mov.w	r3, #0
    STR     r3, [r2, #4]                            // Store initial r4
 8000368:	6053      	str	r3, [r2, #4]
    STR     r3, [r2, #8]                            // Store initial r5
 800036a:	6093      	str	r3, [r2, #8]
    STR     r3, [r2, #12]                           // Store initial r6
 800036c:	60d3      	str	r3, [r2, #12]
    STR     r3, [r2, #16]                           // Store initial r7
 800036e:	6113      	str	r3, [r2, #16]
    STR     r3, [r2, #20]                           // Store initial r8
 8000370:	6153      	str	r3, [r2, #20]
    STR     r3, [r2, #24]                           // Store initial r9
 8000372:	6193      	str	r3, [r2, #24]
    STR     r3, [r2, #28]                           // Store initial r10
 8000374:	61d3      	str	r3, [r2, #28]
    STR     r3, [r2, #32]                           // Store initial r11
 8000376:	6213      	str	r3, [r2, #32]

    /* Hardware stack follows.  */

    STR     r3, [r2, #36]                           // Store initial r0
 8000378:	6253      	str	r3, [r2, #36]	; 0x24
    STR     r3, [r2, #40]                           // Store initial r1
 800037a:	6293      	str	r3, [r2, #40]	; 0x28
    STR     r3, [r2, #44]                           // Store initial r2
 800037c:	62d3      	str	r3, [r2, #44]	; 0x2c
    STR     r3, [r2, #48]                           // Store initial r3
 800037e:	6313      	str	r3, [r2, #48]	; 0x30
    STR     r3, [r2, #52]                           // Store initial r12
 8000380:	6353      	str	r3, [r2, #52]	; 0x34
    MOV     r3, #0xFFFFFFFF                         // Poison EXC_RETURN value
 8000382:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    STR     r3, [r2, #56]                           // Store initial lr
 8000386:	6393      	str	r3, [r2, #56]	; 0x38
    STR     r1, [r2, #60]                           // Store initial pc
 8000388:	63d1      	str	r1, [r2, #60]	; 0x3c
    MOV     r3, #0x01000000                         // Only T-bit need be set
 800038a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    STR     r3, [r2, #64]                           // Store initial xPSR
 800038e:	6413      	str	r3, [r2, #64]	; 0x40

    /* Setup stack pointer.  */
    // thread_ptr -> tx_thread_stack_ptr =  r2;

    STR     r2, [r0, #8]                            // Save stack pointer in thread's
 8000390:	6082      	str	r2, [r0, #8]
                                                    //   control block
    BX      lr                                      // Return to caller
 8000392:	4770      	bx	lr

08000394 <_tx_timer_interrupt>:
       for use.  */

    /* Increment the system clock.  */
    // _tx_timer_system_clock++;

    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 8000394:	4922      	ldr	r1, [pc, #136]	; (8000420 <__tx_timer_nothing_expired+0x6>)
    LDR     r0, [r1, #0]                            // Pickup system clock
 8000396:	6808      	ldr	r0, [r1, #0]
    ADD     r0, r0, #1                              // Increment system clock
 8000398:	f100 0001 	add.w	r0, r0, #1
    STR     r0, [r1, #0]                            // Store new system clock
 800039c:	6008      	str	r0, [r1, #0]

    /* Test for time-slice expiration.  */
    // if (_tx_timer_time_slice)
    // {

    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 800039e:	4b21      	ldr	r3, [pc, #132]	; (8000424 <__tx_timer_nothing_expired+0xa>)
    LDR     r2, [r3, #0]                            // Pickup time-slice
 80003a0:	681a      	ldr	r2, [r3, #0]
    CBZ     r2,  __tx_timer_no_time_slice           // Is it non-active?
 80003a2:	b13a      	cbz	r2, 80003b4 <__tx_timer_no_time_slice>
                                                    // Yes, skip time-slice processing

   /* Decrement the time_slice.  */
   // _tx_timer_time_slice--;

    SUB     r2, r2, #1                              // Decrement the time-slice
 80003a4:	f1a2 0201 	sub.w	r2, r2, #1
    STR     r2, [r3, #0]                            // Store new time-slice value
 80003a8:	601a      	str	r2, [r3, #0]

   /* Check for expiration.  */
   // if (__tx_timer_time_slice == 0)

    CBNZ    r2, __tx_timer_no_time_slice            // Has it expired?
 80003aa:	b91a      	cbnz	r2, 80003b4 <__tx_timer_no_time_slice>

   /* Set the time-slice expired flag.  */
   // _tx_timer_expired_time_slice =  TX_TRUE;

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 80003ac:	4b1e      	ldr	r3, [pc, #120]	; (8000428 <__tx_timer_nothing_expired+0xe>)
    MOV     r0, #1                                  // Build expired value
 80003ae:	f04f 0001 	mov.w	r0, #1
    STR     r0, [r3, #0]                            // Set time-slice expiration flag
 80003b2:	6018      	str	r0, [r3, #0]

080003b4 <__tx_timer_no_time_slice>:

    /* Test for timer expiration.  */
    // if (*_tx_timer_current_ptr)
    // {

    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 80003b4:	491d      	ldr	r1, [pc, #116]	; (800042c <__tx_timer_nothing_expired+0x12>)
    LDR     r0, [r1, #0]                            // Pickup current timer
 80003b6:	6808      	ldr	r0, [r1, #0]
    LDR     r2, [r0, #0]                            // Pickup timer list entry
 80003b8:	6802      	ldr	r2, [r0, #0]
    CBZ     r2, __tx_timer_no_timer                 // Is there anything in the list?
 80003ba:	b122      	cbz	r2, 80003c6 <__tx_timer_no_timer>
                                                    // No, just increment the timer

    /* Set expiration flag.  */
    // _tx_timer_expired =  TX_TRUE;

    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 80003bc:	4b1c      	ldr	r3, [pc, #112]	; (8000430 <__tx_timer_nothing_expired+0x16>)
    MOV     r2, #1                                  // Build expired value
 80003be:	f04f 0201 	mov.w	r2, #1
    STR     r2, [r3, #0]                            // Set expired flag
 80003c2:	601a      	str	r2, [r3, #0]
    B       __tx_timer_done                         // Finished timer processing
 80003c4:	e008      	b.n	80003d8 <__tx_timer_done>

080003c6 <__tx_timer_no_timer>:
__tx_timer_no_timer:

    /* No timer expired, increment the timer pointer.  */
    // _tx_timer_current_ptr++;

    ADD     r0, r0, #4                              // Move to next timer
 80003c6:	f100 0004 	add.w	r0, r0, #4

    /* Check for wrap-around.  */
    // if (_tx_timer_current_ptr == _tx_timer_list_end)

    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 80003ca:	4b1a      	ldr	r3, [pc, #104]	; (8000434 <__tx_timer_nothing_expired+0x1a>)
    LDR     r2, [r3, #0]                            // Pickup list end
 80003cc:	681a      	ldr	r2, [r3, #0]
    CMP     r0, r2                                  // Are we at list end?
 80003ce:	4290      	cmp	r0, r2
    BNE     __tx_timer_skip_wrap                    // No, skip wrap-around logic
 80003d0:	d101      	bne.n	80003d6 <__tx_timer_skip_wrap>

        /* Wrap to beginning of list.  */
        // _tx_timer_current_ptr =  _tx_timer_list_start;

    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 80003d2:	4b19      	ldr	r3, [pc, #100]	; (8000438 <__tx_timer_nothing_expired+0x1e>)
    LDR     r0, [r3, #0]                            // Set current pointer to list start
 80003d4:	6818      	ldr	r0, [r3, #0]

080003d6 <__tx_timer_skip_wrap>:

__tx_timer_skip_wrap:

    STR     r0, [r1, #0]                            // Store new current timer pointer
 80003d6:	6008      	str	r0, [r1, #0]

080003d8 <__tx_timer_done>:

    /* See if anything has expired.  */
    // if ((_tx_timer_expired_time_slice) || (_tx_timer_expired))
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of expired flag
 80003d8:	4b13      	ldr	r3, [pc, #76]	; (8000428 <__tx_timer_nothing_expired+0xe>)
    LDR     r2, [r3, #0]                            // Pickup time-slice expired flag
 80003da:	681a      	ldr	r2, [r3, #0]
    CBNZ    r2, __tx_something_expired              // Did a time-slice expire?
 80003dc:	b912      	cbnz	r2, 80003e4 <__tx_something_expired>
                                                    // If non-zero, time-slice expired
    LDR     r1, =_tx_timer_expired                  // Pickup addr of other expired flag
 80003de:	4914      	ldr	r1, [pc, #80]	; (8000430 <__tx_timer_nothing_expired+0x16>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 80003e0:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_nothing_expired          // Did a timer expire?
 80003e2:	b1d0      	cbz	r0, 800041a <__tx_timer_nothing_expired>

080003e4 <__tx_something_expired>:
                                                    // No, nothing expired

__tx_something_expired:

    STMDB   sp!, {r0, lr}                           // Save the lr register on the stack
 80003e4:	e92d 4001 	stmdb	sp!, {r0, lr}

    /* Did a timer expire?  */
    // if (_tx_timer_expired)
    // {

    LDR     r1, =_tx_timer_expired                  // Pickup addr of expired flag
 80003e8:	4911      	ldr	r1, [pc, #68]	; (8000430 <__tx_timer_nothing_expired+0x16>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 80003ea:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_dont_activate            // Check for timer expiration
 80003ec:	b108      	cbz	r0, 80003f2 <__tx_timer_dont_activate>
                                                    // If not set, skip timer activation

    /* Process timer expiration.  */
    // _tx_timer_expiration_process();

    BL      _tx_timer_expiration_process            // Call the timer expiration handling routine
 80003ee:	f011 fffb 	bl	80123e8 <_tx_timer_expiration_process>

080003f2 <__tx_timer_dont_activate>:

    /* Did time slice expire?  */
    // if (_tx_timer_expired_time_slice)
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of time-slice expired
 80003f2:	4b0d      	ldr	r3, [pc, #52]	; (8000428 <__tx_timer_nothing_expired+0xe>)
    LDR     r2, [r3, #0]                            // Pickup the actual flag
 80003f4:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_not_ts_expiration        // See if the flag is set
 80003f6:	b172      	cbz	r2, 8000416 <__tx_timer_not_ts_expiration>
                                                    // No, skip time-slice processing

    /* Time slice interrupted thread.  */
    // _tx_thread_time_slice();

    BL      _tx_thread_time_slice                   // Call time-slice processing
 80003f8:	f011 fe14 	bl	8012024 <_tx_thread_time_slice>
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80003fc:	480f      	ldr	r0, [pc, #60]	; (800043c <__tx_timer_nothing_expired+0x22>)
    LDR     r1, [r0]                                // Is the preempt disable flag set?
 80003fe:	6801      	ldr	r1, [r0, #0]
    CBNZ    r1, __tx_timer_skip_time_slice          // Yes, skip the PendSV logic
 8000400:	b949      	cbnz	r1, 8000416 <__tx_timer_not_ts_expiration>
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 8000402:	480f      	ldr	r0, [pc, #60]	; (8000440 <__tx_timer_nothing_expired+0x26>)
    LDR     r1, [r0]                                // Pickup the current thread pointer
 8000404:	6801      	ldr	r1, [r0, #0]
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000406:	4a0f      	ldr	r2, [pc, #60]	; (8000444 <__tx_timer_nothing_expired+0x2a>)
    LDR     r3, [r2]                                // Pickup the execute thread pointer
 8000408:	6813      	ldr	r3, [r2, #0]
    LDR     r0, =0xE000ED04                         // Build address of control register
 800040a:	480f      	ldr	r0, [pc, #60]	; (8000448 <__tx_timer_nothing_expired+0x2e>)
    MOV     r2, 0x10000000                          // Build value for PendSV bit
 800040c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    CMP     r1, r3                                  // Are they the same?
 8000410:	4299      	cmp	r1, r3
    BEQ     __tx_timer_skip_time_slice              // If the same, there was no time-slice performed
 8000412:	d000      	beq.n	8000416 <__tx_timer_not_ts_expiration>
    STR     r2, [r0]                                // Not the same, issue the PendSV for preemption
 8000414:	6002      	str	r2, [r0, #0]

08000416 <__tx_timer_not_ts_expiration>:

    // }

__tx_timer_not_ts_expiration:

    LDMIA   sp!, {r0, lr}                           // Recover lr register (r0 is just there for
 8000416:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

0800041a <__tx_timer_nothing_expired>:

    // }

__tx_timer_nothing_expired:

    DSB                                             // Complete all memory access
 800041a:	f3bf 8f4f 	dsb	sy
    BX      lr                                      // Return to caller
 800041e:	4770      	bx	lr
    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 8000420:	20026108 	.word	0x20026108
    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 8000424:	20026668 	.word	0x20026668
    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 8000428:	2002610c 	.word	0x2002610c
    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 800042c:	20026198 	.word	0x20026198
    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 8000430:	2002619c 	.word	0x2002619c
    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 8000434:	20026194 	.word	0x20026194
    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 8000438:	20026190 	.word	0x20026190
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 800043c:	200260fc 	.word	0x200260fc
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 8000440:	20026064 	.word	0x20026064
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000444:	20026068 	.word	0x20026068
    LDR     r0, =0xE000ED04                         // Build address of control register
 8000448:	e000ed04 	.word	0xe000ed04

0800044c <_tx_initialize_low_level>:
    .thumb_func
.type _tx_initialize_low_level, function
_tx_initialize_low_level:

    /* Disable interrupts during ThreadX initialization.  */
    CPSID   i
 800044c:	b672      	cpsid	i

    /* Set base of available memory to end of non-initialised RAM area.  */
#ifdef USE_DYNAMIC_MEMORY_ALLOCATION
    LDR     r0, =_tx_initialize_unused_memory       // Build address of unused memory pointer
 800044e:	481b      	ldr	r0, [pc, #108]	; (80004bc <__tx_DBGHandler+0x4>)
    LDR     r1, =__RAM_segment_used_end__           // Build first free address
 8000450:	491b      	ldr	r1, [pc, #108]	; (80004c0 <__tx_DBGHandler+0x8>)
    ADD     r1, r1, #4                              //
 8000452:	f101 0104 	add.w	r1, r1, #4
    STR     r1, [r0]                                // Setup first unused memory pointer
 8000456:	6001      	str	r1, [r0, #0]
#endif
    /* Setup Vector Table Offset Register.  */
    MOV     r0, #0xE000E000                         // Build address of NVIC registers
 8000458:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 800045c:	4919      	ldr	r1, [pc, #100]	; (80004c4 <__tx_DBGHandler+0xc>)
    STR     r1, [r0, #0xD08]                        // Set vector table address
 800045e:	f8c0 1d08 	str.w	r1, [r0, #3336]	; 0xd08

    /* Enable the cycle count register.  */
    LDR     r0, =0xE0001000                         // Build address of DWT register
 8000462:	4819      	ldr	r0, [pc, #100]	; (80004c8 <__tx_DBGHandler+0x10>)
    LDR     r1, [r0]                                // Pickup the current value
 8000464:	6801      	ldr	r1, [r0, #0]
    ORR     r1, r1, #1                              // Set the CYCCNTENA bit
 8000466:	f041 0101 	orr.w	r1, r1, #1
    STR     r1, [r0]                                // Enable the cycle count register
 800046a:	6001      	str	r1, [r0, #0]

    /* Set system stack pointer from vector value.  */
    LDR     r0, =_tx_thread_system_stack_ptr        // Build address of system stack pointer
 800046c:	4817      	ldr	r0, [pc, #92]	; (80004cc <__tx_DBGHandler+0x14>)
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 800046e:	4915      	ldr	r1, [pc, #84]	; (80004c4 <__tx_DBGHandler+0xc>)
    LDR     r1, [r1]                                // Pickup reset stack pointer
 8000470:	6809      	ldr	r1, [r1, #0]
    STR     r1, [r0]                                // Save system stack pointer
 8000472:	6001      	str	r1, [r0, #0]

    /* Configure SysTick.  */
    MOV     r0, #0xE000E000                         // Build address of NVIC registers
 8000474:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =SYSTICK_CYCLES
 8000478:	4915      	ldr	r1, [pc, #84]	; (80004d0 <__tx_DBGHandler+0x18>)
    STR     r1, [r0, #0x14]                         // Setup SysTick Reload Value
 800047a:	6141      	str	r1, [r0, #20]
    MOV     r1, #0x7                                // Build SysTick Control Enable Value
 800047c:	f04f 0107 	mov.w	r1, #7
    STR     r1, [r0, #0x10]                         // Setup SysTick Control
 8000480:	6101      	str	r1, [r0, #16]

    /* Configure handler priorities.  */
    LDR     r1, =0x00000000                         // Rsrv, UsgF, BusF, MemM
 8000482:	f04f 0100 	mov.w	r1, #0
    STR     r1, [r0, #0xD18]                        // Setup System Handlers 4-7 Priority Registers
 8000486:	f8c0 1d18 	str.w	r1, [r0, #3352]	; 0xd18

    LDR     r1, =0xFF000000                         // SVCl, Rsrv, Rsrv, Rsrv
 800048a:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
    STR     r1, [r0, #0xD1C]                        // Setup System Handlers 8-11 Priority Registers
 800048e:	f8c0 1d1c 	str.w	r1, [r0, #3356]	; 0xd1c
                                                    // Note: SVC must be lowest priority, which is 0xFF

    LDR     r1, =0x40FF0000                         // SysT, PnSV, Rsrv, DbgM
 8000492:	4910      	ldr	r1, [pc, #64]	; (80004d4 <__tx_DBGHandler+0x1c>)
    STR     r1, [r0, #0xD20]                        // Setup System Handlers 12-15 Priority Registers
 8000494:	f8c0 1d20 	str.w	r1, [r0, #3360]	; 0xd20
                                                    // Note: PnSV must be lowest priority, which is 0xFF

    /* Return to caller.  */
    BX      lr
 8000498:	4770      	bx	lr
 800049a:	bf00      	nop

0800049c <__tx_BadHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_BadHandler
    .thumb_func
.type __tx_BadHandler, function
__tx_BadHandler:
    B       __tx_BadHandler
 800049c:	f7ff bffe 	b.w	800049c <__tx_BadHandler>

080004a0 <__tx_IntHandler>:
    .thumb_func
.type __tx_IntHandler, function
__tx_IntHandler:
// VOID InterruptHandler (VOID)
// {
    PUSH    {r0,lr}     // Save LR (and dummy r0 to maintain stack alignment)
 80004a0:	b501      	push	{r0, lr}

    /* Do interrupt handler work here */
    /* .... */

    POP     {r0,lr}
 80004a2:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 80004a6:	4770      	bx	lr

080004a8 <SysTick_Handler>:
    .thumb_func
.type SysTick_Handler, function
SysTick_Handler:
// VOID TimerInterruptHandler (VOID)
// {
    PUSH    {r0,lr}     // Save LR (and dummy r0 to maintain stack alignment)
 80004a8:	b501      	push	{r0, lr}
    BL      _tx_timer_interrupt
 80004aa:	f7ff ff73 	bl	8000394 <_tx_timer_interrupt>
    POP     {r0,lr}
 80004ae:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 80004b2:	4770      	bx	lr

080004b4 <__tx_NMIHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_NMIHandler
    .thumb_func
.type __tx_NMIHandler, function
__tx_NMIHandler:
    B       __tx_NMIHandler
 80004b4:	f7ff bffe 	b.w	80004b4 <__tx_NMIHandler>

080004b8 <__tx_DBGHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_DBGHandler
    .thumb_func
.type __tx_DBGHandler, function
__tx_DBGHandler:
    B       __tx_DBGHandler
 80004b8:	f7ff bffe 	b.w	80004b8 <__tx_DBGHandler>
    LDR     r0, =_tx_initialize_unused_memory       // Build address of unused memory pointer
 80004bc:	2002605c 	.word	0x2002605c
    LDR     r1, =__RAM_segment_used_end__           // Build first free address
 80004c0:	2003b318 	.word	0x2003b318
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 80004c4:	08000000 	.word	0x08000000
    LDR     r0, =0xE0001000                         // Build address of DWT register
 80004c8:	e0001000 	.word	0xe0001000
    LDR     r0, =_tx_thread_system_stack_ptr        // Build address of system stack pointer
 80004cc:	20026060 	.word	0x20026060
    LDR     r1, =SYSTICK_CYCLES
 80004d0:	000270ff 	.word	0x000270ff
    LDR     r1, =0x40FF0000                         // SysT, PnSV, Rsrv, DbgM
 80004d4:	40ff0000 	.word	0x40ff0000

080004d8 <strlen>:
 80004d8:	4603      	mov	r3, r0
 80004da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80004de:	2a00      	cmp	r2, #0
 80004e0:	d1fb      	bne.n	80004da <strlen+0x2>
 80004e2:	1a18      	subs	r0, r3, r0
 80004e4:	3801      	subs	r0, #1
 80004e6:	4770      	bx	lr

080004e8 <__aeabi_drsub>:
 80004e8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004ec:	e002      	b.n	80004f4 <__adddf3>
 80004ee:	bf00      	nop

080004f0 <__aeabi_dsub>:
 80004f0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004f4 <__adddf3>:
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004fa:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004fe:	ea94 0f05 	teq	r4, r5
 8000502:	bf08      	it	eq
 8000504:	ea90 0f02 	teqeq	r0, r2
 8000508:	bf1f      	itttt	ne
 800050a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800050e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000512:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000516:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800051a:	f000 80e2 	beq.w	80006e2 <__adddf3+0x1ee>
 800051e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000522:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000526:	bfb8      	it	lt
 8000528:	426d      	neglt	r5, r5
 800052a:	dd0c      	ble.n	8000546 <__adddf3+0x52>
 800052c:	442c      	add	r4, r5
 800052e:	ea80 0202 	eor.w	r2, r0, r2
 8000532:	ea81 0303 	eor.w	r3, r1, r3
 8000536:	ea82 0000 	eor.w	r0, r2, r0
 800053a:	ea83 0101 	eor.w	r1, r3, r1
 800053e:	ea80 0202 	eor.w	r2, r0, r2
 8000542:	ea81 0303 	eor.w	r3, r1, r3
 8000546:	2d36      	cmp	r5, #54	; 0x36
 8000548:	bf88      	it	hi
 800054a:	bd30      	pophi	{r4, r5, pc}
 800054c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000550:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000554:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000558:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800055c:	d002      	beq.n	8000564 <__adddf3+0x70>
 800055e:	4240      	negs	r0, r0
 8000560:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000564:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000568:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800056c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000570:	d002      	beq.n	8000578 <__adddf3+0x84>
 8000572:	4252      	negs	r2, r2
 8000574:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000578:	ea94 0f05 	teq	r4, r5
 800057c:	f000 80a7 	beq.w	80006ce <__adddf3+0x1da>
 8000580:	f1a4 0401 	sub.w	r4, r4, #1
 8000584:	f1d5 0e20 	rsbs	lr, r5, #32
 8000588:	db0d      	blt.n	80005a6 <__adddf3+0xb2>
 800058a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800058e:	fa22 f205 	lsr.w	r2, r2, r5
 8000592:	1880      	adds	r0, r0, r2
 8000594:	f141 0100 	adc.w	r1, r1, #0
 8000598:	fa03 f20e 	lsl.w	r2, r3, lr
 800059c:	1880      	adds	r0, r0, r2
 800059e:	fa43 f305 	asr.w	r3, r3, r5
 80005a2:	4159      	adcs	r1, r3
 80005a4:	e00e      	b.n	80005c4 <__adddf3+0xd0>
 80005a6:	f1a5 0520 	sub.w	r5, r5, #32
 80005aa:	f10e 0e20 	add.w	lr, lr, #32
 80005ae:	2a01      	cmp	r2, #1
 80005b0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005b4:	bf28      	it	cs
 80005b6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005ba:	fa43 f305 	asr.w	r3, r3, r5
 80005be:	18c0      	adds	r0, r0, r3
 80005c0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c8:	d507      	bpl.n	80005da <__adddf3+0xe6>
 80005ca:	f04f 0e00 	mov.w	lr, #0
 80005ce:	f1dc 0c00 	rsbs	ip, ip, #0
 80005d2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005d6:	eb6e 0101 	sbc.w	r1, lr, r1
 80005da:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005de:	d31b      	bcc.n	8000618 <__adddf3+0x124>
 80005e0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005e4:	d30c      	bcc.n	8000600 <__adddf3+0x10c>
 80005e6:	0849      	lsrs	r1, r1, #1
 80005e8:	ea5f 0030 	movs.w	r0, r0, rrx
 80005ec:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005f0:	f104 0401 	add.w	r4, r4, #1
 80005f4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005f8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005fc:	f080 809a 	bcs.w	8000734 <__adddf3+0x240>
 8000600:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000604:	bf08      	it	eq
 8000606:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800060a:	f150 0000 	adcs.w	r0, r0, #0
 800060e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000612:	ea41 0105 	orr.w	r1, r1, r5
 8000616:	bd30      	pop	{r4, r5, pc}
 8000618:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800061c:	4140      	adcs	r0, r0
 800061e:	eb41 0101 	adc.w	r1, r1, r1
 8000622:	3c01      	subs	r4, #1
 8000624:	bf28      	it	cs
 8000626:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800062a:	d2e9      	bcs.n	8000600 <__adddf3+0x10c>
 800062c:	f091 0f00 	teq	r1, #0
 8000630:	bf04      	itt	eq
 8000632:	4601      	moveq	r1, r0
 8000634:	2000      	moveq	r0, #0
 8000636:	fab1 f381 	clz	r3, r1
 800063a:	bf08      	it	eq
 800063c:	3320      	addeq	r3, #32
 800063e:	f1a3 030b 	sub.w	r3, r3, #11
 8000642:	f1b3 0220 	subs.w	r2, r3, #32
 8000646:	da0c      	bge.n	8000662 <__adddf3+0x16e>
 8000648:	320c      	adds	r2, #12
 800064a:	dd08      	ble.n	800065e <__adddf3+0x16a>
 800064c:	f102 0c14 	add.w	ip, r2, #20
 8000650:	f1c2 020c 	rsb	r2, r2, #12
 8000654:	fa01 f00c 	lsl.w	r0, r1, ip
 8000658:	fa21 f102 	lsr.w	r1, r1, r2
 800065c:	e00c      	b.n	8000678 <__adddf3+0x184>
 800065e:	f102 0214 	add.w	r2, r2, #20
 8000662:	bfd8      	it	le
 8000664:	f1c2 0c20 	rsble	ip, r2, #32
 8000668:	fa01 f102 	lsl.w	r1, r1, r2
 800066c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000670:	bfdc      	itt	le
 8000672:	ea41 010c 	orrle.w	r1, r1, ip
 8000676:	4090      	lslle	r0, r2
 8000678:	1ae4      	subs	r4, r4, r3
 800067a:	bfa2      	ittt	ge
 800067c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000680:	4329      	orrge	r1, r5
 8000682:	bd30      	popge	{r4, r5, pc}
 8000684:	ea6f 0404 	mvn.w	r4, r4
 8000688:	3c1f      	subs	r4, #31
 800068a:	da1c      	bge.n	80006c6 <__adddf3+0x1d2>
 800068c:	340c      	adds	r4, #12
 800068e:	dc0e      	bgt.n	80006ae <__adddf3+0x1ba>
 8000690:	f104 0414 	add.w	r4, r4, #20
 8000694:	f1c4 0220 	rsb	r2, r4, #32
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f302 	lsl.w	r3, r1, r2
 80006a0:	ea40 0003 	orr.w	r0, r0, r3
 80006a4:	fa21 f304 	lsr.w	r3, r1, r4
 80006a8:	ea45 0103 	orr.w	r1, r5, r3
 80006ac:	bd30      	pop	{r4, r5, pc}
 80006ae:	f1c4 040c 	rsb	r4, r4, #12
 80006b2:	f1c4 0220 	rsb	r2, r4, #32
 80006b6:	fa20 f002 	lsr.w	r0, r0, r2
 80006ba:	fa01 f304 	lsl.w	r3, r1, r4
 80006be:	ea40 0003 	orr.w	r0, r0, r3
 80006c2:	4629      	mov	r1, r5
 80006c4:	bd30      	pop	{r4, r5, pc}
 80006c6:	fa21 f004 	lsr.w	r0, r1, r4
 80006ca:	4629      	mov	r1, r5
 80006cc:	bd30      	pop	{r4, r5, pc}
 80006ce:	f094 0f00 	teq	r4, #0
 80006d2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006d6:	bf06      	itte	eq
 80006d8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006dc:	3401      	addeq	r4, #1
 80006de:	3d01      	subne	r5, #1
 80006e0:	e74e      	b.n	8000580 <__adddf3+0x8c>
 80006e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006e6:	bf18      	it	ne
 80006e8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006ec:	d029      	beq.n	8000742 <__adddf3+0x24e>
 80006ee:	ea94 0f05 	teq	r4, r5
 80006f2:	bf08      	it	eq
 80006f4:	ea90 0f02 	teqeq	r0, r2
 80006f8:	d005      	beq.n	8000706 <__adddf3+0x212>
 80006fa:	ea54 0c00 	orrs.w	ip, r4, r0
 80006fe:	bf04      	itt	eq
 8000700:	4619      	moveq	r1, r3
 8000702:	4610      	moveq	r0, r2
 8000704:	bd30      	pop	{r4, r5, pc}
 8000706:	ea91 0f03 	teq	r1, r3
 800070a:	bf1e      	ittt	ne
 800070c:	2100      	movne	r1, #0
 800070e:	2000      	movne	r0, #0
 8000710:	bd30      	popne	{r4, r5, pc}
 8000712:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000716:	d105      	bne.n	8000724 <__adddf3+0x230>
 8000718:	0040      	lsls	r0, r0, #1
 800071a:	4149      	adcs	r1, r1
 800071c:	bf28      	it	cs
 800071e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000722:	bd30      	pop	{r4, r5, pc}
 8000724:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000728:	bf3c      	itt	cc
 800072a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800072e:	bd30      	popcc	{r4, r5, pc}
 8000730:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000734:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000738:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800073c:	f04f 0000 	mov.w	r0, #0
 8000740:	bd30      	pop	{r4, r5, pc}
 8000742:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000746:	bf1a      	itte	ne
 8000748:	4619      	movne	r1, r3
 800074a:	4610      	movne	r0, r2
 800074c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000750:	bf1c      	itt	ne
 8000752:	460b      	movne	r3, r1
 8000754:	4602      	movne	r2, r0
 8000756:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800075a:	bf06      	itte	eq
 800075c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000760:	ea91 0f03 	teqeq	r1, r3
 8000764:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000768:	bd30      	pop	{r4, r5, pc}
 800076a:	bf00      	nop

0800076c <__aeabi_ui2d>:
 800076c:	f090 0f00 	teq	r0, #0
 8000770:	bf04      	itt	eq
 8000772:	2100      	moveq	r1, #0
 8000774:	4770      	bxeq	lr
 8000776:	b530      	push	{r4, r5, lr}
 8000778:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800077c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000780:	f04f 0500 	mov.w	r5, #0
 8000784:	f04f 0100 	mov.w	r1, #0
 8000788:	e750      	b.n	800062c <__adddf3+0x138>
 800078a:	bf00      	nop

0800078c <__aeabi_i2d>:
 800078c:	f090 0f00 	teq	r0, #0
 8000790:	bf04      	itt	eq
 8000792:	2100      	moveq	r1, #0
 8000794:	4770      	bxeq	lr
 8000796:	b530      	push	{r4, r5, lr}
 8000798:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800079c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007a0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007a4:	bf48      	it	mi
 80007a6:	4240      	negmi	r0, r0
 80007a8:	f04f 0100 	mov.w	r1, #0
 80007ac:	e73e      	b.n	800062c <__adddf3+0x138>
 80007ae:	bf00      	nop

080007b0 <__aeabi_f2d>:
 80007b0:	0042      	lsls	r2, r0, #1
 80007b2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007b6:	ea4f 0131 	mov.w	r1, r1, rrx
 80007ba:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007be:	bf1f      	itttt	ne
 80007c0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007c4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007c8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007cc:	4770      	bxne	lr
 80007ce:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007d2:	bf08      	it	eq
 80007d4:	4770      	bxeq	lr
 80007d6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007da:	bf04      	itt	eq
 80007dc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007e0:	4770      	bxeq	lr
 80007e2:	b530      	push	{r4, r5, lr}
 80007e4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007f0:	e71c      	b.n	800062c <__adddf3+0x138>
 80007f2:	bf00      	nop

080007f4 <__aeabi_ul2d>:
 80007f4:	ea50 0201 	orrs.w	r2, r0, r1
 80007f8:	bf08      	it	eq
 80007fa:	4770      	bxeq	lr
 80007fc:	b530      	push	{r4, r5, lr}
 80007fe:	f04f 0500 	mov.w	r5, #0
 8000802:	e00a      	b.n	800081a <__aeabi_l2d+0x16>

08000804 <__aeabi_l2d>:
 8000804:	ea50 0201 	orrs.w	r2, r0, r1
 8000808:	bf08      	it	eq
 800080a:	4770      	bxeq	lr
 800080c:	b530      	push	{r4, r5, lr}
 800080e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000812:	d502      	bpl.n	800081a <__aeabi_l2d+0x16>
 8000814:	4240      	negs	r0, r0
 8000816:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800081a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800081e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000822:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000826:	f43f aed8 	beq.w	80005da <__adddf3+0xe6>
 800082a:	f04f 0203 	mov.w	r2, #3
 800082e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000832:	bf18      	it	ne
 8000834:	3203      	addne	r2, #3
 8000836:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800083a:	bf18      	it	ne
 800083c:	3203      	addne	r2, #3
 800083e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000842:	f1c2 0320 	rsb	r3, r2, #32
 8000846:	fa00 fc03 	lsl.w	ip, r0, r3
 800084a:	fa20 f002 	lsr.w	r0, r0, r2
 800084e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000852:	ea40 000e 	orr.w	r0, r0, lr
 8000856:	fa21 f102 	lsr.w	r1, r1, r2
 800085a:	4414      	add	r4, r2
 800085c:	e6bd      	b.n	80005da <__adddf3+0xe6>
 800085e:	bf00      	nop

08000860 <__aeabi_dmul>:
 8000860:	b570      	push	{r4, r5, r6, lr}
 8000862:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000866:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800086a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086e:	bf1d      	ittte	ne
 8000870:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000874:	ea94 0f0c 	teqne	r4, ip
 8000878:	ea95 0f0c 	teqne	r5, ip
 800087c:	f000 f8de 	bleq	8000a3c <__aeabi_dmul+0x1dc>
 8000880:	442c      	add	r4, r5
 8000882:	ea81 0603 	eor.w	r6, r1, r3
 8000886:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800088a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800088e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000892:	bf18      	it	ne
 8000894:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000898:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800089c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80008a0:	d038      	beq.n	8000914 <__aeabi_dmul+0xb4>
 80008a2:	fba0 ce02 	umull	ip, lr, r0, r2
 80008a6:	f04f 0500 	mov.w	r5, #0
 80008aa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80008ae:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80008b2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80008b6:	f04f 0600 	mov.w	r6, #0
 80008ba:	fbe1 5603 	umlal	r5, r6, r1, r3
 80008be:	f09c 0f00 	teq	ip, #0
 80008c2:	bf18      	it	ne
 80008c4:	f04e 0e01 	orrne.w	lr, lr, #1
 80008c8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80008cc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80008d0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80008d4:	d204      	bcs.n	80008e0 <__aeabi_dmul+0x80>
 80008d6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80008da:	416d      	adcs	r5, r5
 80008dc:	eb46 0606 	adc.w	r6, r6, r6
 80008e0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80008e4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80008e8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80008ec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80008f0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80008f4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f8:	bf88      	it	hi
 80008fa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fe:	d81e      	bhi.n	800093e <__aeabi_dmul+0xde>
 8000900:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000904:	bf08      	it	eq
 8000906:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800090a:	f150 0000 	adcs.w	r0, r0, #0
 800090e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000912:	bd70      	pop	{r4, r5, r6, pc}
 8000914:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000918:	ea46 0101 	orr.w	r1, r6, r1
 800091c:	ea40 0002 	orr.w	r0, r0, r2
 8000920:	ea81 0103 	eor.w	r1, r1, r3
 8000924:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000928:	bfc2      	ittt	gt
 800092a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000932:	bd70      	popgt	{r4, r5, r6, pc}
 8000934:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000938:	f04f 0e00 	mov.w	lr, #0
 800093c:	3c01      	subs	r4, #1
 800093e:	f300 80ab 	bgt.w	8000a98 <__aeabi_dmul+0x238>
 8000942:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000946:	bfde      	ittt	le
 8000948:	2000      	movle	r0, #0
 800094a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800094e:	bd70      	pople	{r4, r5, r6, pc}
 8000950:	f1c4 0400 	rsb	r4, r4, #0
 8000954:	3c20      	subs	r4, #32
 8000956:	da35      	bge.n	80009c4 <__aeabi_dmul+0x164>
 8000958:	340c      	adds	r4, #12
 800095a:	dc1b      	bgt.n	8000994 <__aeabi_dmul+0x134>
 800095c:	f104 0414 	add.w	r4, r4, #20
 8000960:	f1c4 0520 	rsb	r5, r4, #32
 8000964:	fa00 f305 	lsl.w	r3, r0, r5
 8000968:	fa20 f004 	lsr.w	r0, r0, r4
 800096c:	fa01 f205 	lsl.w	r2, r1, r5
 8000970:	ea40 0002 	orr.w	r0, r0, r2
 8000974:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000978:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800097c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000980:	fa21 f604 	lsr.w	r6, r1, r4
 8000984:	eb42 0106 	adc.w	r1, r2, r6
 8000988:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800098c:	bf08      	it	eq
 800098e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000992:	bd70      	pop	{r4, r5, r6, pc}
 8000994:	f1c4 040c 	rsb	r4, r4, #12
 8000998:	f1c4 0520 	rsb	r5, r4, #32
 800099c:	fa00 f304 	lsl.w	r3, r0, r4
 80009a0:	fa20 f005 	lsr.w	r0, r0, r5
 80009a4:	fa01 f204 	lsl.w	r2, r1, r4
 80009a8:	ea40 0002 	orr.w	r0, r0, r2
 80009ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80009b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80009b4:	f141 0100 	adc.w	r1, r1, #0
 80009b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80009bc:	bf08      	it	eq
 80009be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80009c2:	bd70      	pop	{r4, r5, r6, pc}
 80009c4:	f1c4 0520 	rsb	r5, r4, #32
 80009c8:	fa00 f205 	lsl.w	r2, r0, r5
 80009cc:	ea4e 0e02 	orr.w	lr, lr, r2
 80009d0:	fa20 f304 	lsr.w	r3, r0, r4
 80009d4:	fa01 f205 	lsl.w	r2, r1, r5
 80009d8:	ea43 0302 	orr.w	r3, r3, r2
 80009dc:	fa21 f004 	lsr.w	r0, r1, r4
 80009e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80009e4:	fa21 f204 	lsr.w	r2, r1, r4
 80009e8:	ea20 0002 	bic.w	r0, r0, r2
 80009ec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80009f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80009f4:	bf08      	it	eq
 80009f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80009fa:	bd70      	pop	{r4, r5, r6, pc}
 80009fc:	f094 0f00 	teq	r4, #0
 8000a00:	d10f      	bne.n	8000a22 <__aeabi_dmul+0x1c2>
 8000a02:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000a06:	0040      	lsls	r0, r0, #1
 8000a08:	eb41 0101 	adc.w	r1, r1, r1
 8000a0c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a10:	bf08      	it	eq
 8000a12:	3c01      	subeq	r4, #1
 8000a14:	d0f7      	beq.n	8000a06 <__aeabi_dmul+0x1a6>
 8000a16:	ea41 0106 	orr.w	r1, r1, r6
 8000a1a:	f095 0f00 	teq	r5, #0
 8000a1e:	bf18      	it	ne
 8000a20:	4770      	bxne	lr
 8000a22:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000a26:	0052      	lsls	r2, r2, #1
 8000a28:	eb43 0303 	adc.w	r3, r3, r3
 8000a2c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000a30:	bf08      	it	eq
 8000a32:	3d01      	subeq	r5, #1
 8000a34:	d0f7      	beq.n	8000a26 <__aeabi_dmul+0x1c6>
 8000a36:	ea43 0306 	orr.w	r3, r3, r6
 8000a3a:	4770      	bx	lr
 8000a3c:	ea94 0f0c 	teq	r4, ip
 8000a40:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a44:	bf18      	it	ne
 8000a46:	ea95 0f0c 	teqne	r5, ip
 8000a4a:	d00c      	beq.n	8000a66 <__aeabi_dmul+0x206>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	d1d1      	bne.n	80009fc <__aeabi_dmul+0x19c>
 8000a58:	ea81 0103 	eor.w	r1, r1, r3
 8000a5c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000a60:	f04f 0000 	mov.w	r0, #0
 8000a64:	bd70      	pop	{r4, r5, r6, pc}
 8000a66:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a6a:	bf06      	itte	eq
 8000a6c:	4610      	moveq	r0, r2
 8000a6e:	4619      	moveq	r1, r3
 8000a70:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a74:	d019      	beq.n	8000aaa <__aeabi_dmul+0x24a>
 8000a76:	ea94 0f0c 	teq	r4, ip
 8000a7a:	d102      	bne.n	8000a82 <__aeabi_dmul+0x222>
 8000a7c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000a80:	d113      	bne.n	8000aaa <__aeabi_dmul+0x24a>
 8000a82:	ea95 0f0c 	teq	r5, ip
 8000a86:	d105      	bne.n	8000a94 <__aeabi_dmul+0x234>
 8000a88:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000a8c:	bf1c      	itt	ne
 8000a8e:	4610      	movne	r0, r2
 8000a90:	4619      	movne	r1, r3
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dmul+0x24a>
 8000a94:	ea81 0103 	eor.w	r1, r1, r3
 8000a98:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000a9c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000aa0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	bd70      	pop	{r4, r5, r6, pc}
 8000aaa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000aae:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000ab2:	bd70      	pop	{r4, r5, r6, pc}

08000ab4 <__aeabi_ddiv>:
 8000ab4:	b570      	push	{r4, r5, r6, lr}
 8000ab6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000aba:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000abe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000ac2:	bf1d      	ittte	ne
 8000ac4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000ac8:	ea94 0f0c 	teqne	r4, ip
 8000acc:	ea95 0f0c 	teqne	r5, ip
 8000ad0:	f000 f8a7 	bleq	8000c22 <__aeabi_ddiv+0x16e>
 8000ad4:	eba4 0405 	sub.w	r4, r4, r5
 8000ad8:	ea81 0e03 	eor.w	lr, r1, r3
 8000adc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000ae0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000ae4:	f000 8088 	beq.w	8000bf8 <__aeabi_ddiv+0x144>
 8000ae8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000aec:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000af0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000af4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000af8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000afc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000b00:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000b04:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000b08:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000b0c:	429d      	cmp	r5, r3
 8000b0e:	bf08      	it	eq
 8000b10:	4296      	cmpeq	r6, r2
 8000b12:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000b16:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000b1a:	d202      	bcs.n	8000b22 <__aeabi_ddiv+0x6e>
 8000b1c:	085b      	lsrs	r3, r3, #1
 8000b1e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000b22:	1ab6      	subs	r6, r6, r2
 8000b24:	eb65 0503 	sbc.w	r5, r5, r3
 8000b28:	085b      	lsrs	r3, r3, #1
 8000b2a:	ea4f 0232 	mov.w	r2, r2, rrx
 8000b2e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000b32:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000b36:	ebb6 0e02 	subs.w	lr, r6, r2
 8000b3a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000b3e:	bf22      	ittt	cs
 8000b40:	1ab6      	subcs	r6, r6, r2
 8000b42:	4675      	movcs	r5, lr
 8000b44:	ea40 000c 	orrcs.w	r0, r0, ip
 8000b48:	085b      	lsrs	r3, r3, #1
 8000b4a:	ea4f 0232 	mov.w	r2, r2, rrx
 8000b4e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000b52:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000b56:	bf22      	ittt	cs
 8000b58:	1ab6      	subcs	r6, r6, r2
 8000b5a:	4675      	movcs	r5, lr
 8000b5c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000b60:	085b      	lsrs	r3, r3, #1
 8000b62:	ea4f 0232 	mov.w	r2, r2, rrx
 8000b66:	ebb6 0e02 	subs.w	lr, r6, r2
 8000b6a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000b6e:	bf22      	ittt	cs
 8000b70:	1ab6      	subcs	r6, r6, r2
 8000b72:	4675      	movcs	r5, lr
 8000b74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000b78:	085b      	lsrs	r3, r3, #1
 8000b7a:	ea4f 0232 	mov.w	r2, r2, rrx
 8000b7e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000b82:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000b86:	bf22      	ittt	cs
 8000b88:	1ab6      	subcs	r6, r6, r2
 8000b8a:	4675      	movcs	r5, lr
 8000b8c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000b90:	ea55 0e06 	orrs.w	lr, r5, r6
 8000b94:	d018      	beq.n	8000bc8 <__aeabi_ddiv+0x114>
 8000b96:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000b9a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000b9e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000ba2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000ba6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000baa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000bae:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000bb2:	d1c0      	bne.n	8000b36 <__aeabi_ddiv+0x82>
 8000bb4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000bb8:	d10b      	bne.n	8000bd2 <__aeabi_ddiv+0x11e>
 8000bba:	ea41 0100 	orr.w	r1, r1, r0
 8000bbe:	f04f 0000 	mov.w	r0, #0
 8000bc2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000bc6:	e7b6      	b.n	8000b36 <__aeabi_ddiv+0x82>
 8000bc8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000bcc:	bf04      	itt	eq
 8000bce:	4301      	orreq	r1, r0
 8000bd0:	2000      	moveq	r0, #0
 8000bd2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000bd6:	bf88      	it	hi
 8000bd8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000bdc:	f63f aeaf 	bhi.w	800093e <__aeabi_dmul+0xde>
 8000be0:	ebb5 0c03 	subs.w	ip, r5, r3
 8000be4:	bf04      	itt	eq
 8000be6:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000bea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000bee:	f150 0000 	adcs.w	r0, r0, #0
 8000bf2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000bf6:	bd70      	pop	{r4, r5, r6, pc}
 8000bf8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000bfc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000c00:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000c04:	bfc2      	ittt	gt
 8000c06:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000c0a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000c0e:	bd70      	popgt	{r4, r5, r6, pc}
 8000c10:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c14:	f04f 0e00 	mov.w	lr, #0
 8000c18:	3c01      	subs	r4, #1
 8000c1a:	e690      	b.n	800093e <__aeabi_dmul+0xde>
 8000c1c:	ea45 0e06 	orr.w	lr, r5, r6
 8000c20:	e68d      	b.n	800093e <__aeabi_dmul+0xde>
 8000c22:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000c26:	ea94 0f0c 	teq	r4, ip
 8000c2a:	bf08      	it	eq
 8000c2c:	ea95 0f0c 	teqeq	r5, ip
 8000c30:	f43f af3b 	beq.w	8000aaa <__aeabi_dmul+0x24a>
 8000c34:	ea94 0f0c 	teq	r4, ip
 8000c38:	d10a      	bne.n	8000c50 <__aeabi_ddiv+0x19c>
 8000c3a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000c3e:	f47f af34 	bne.w	8000aaa <__aeabi_dmul+0x24a>
 8000c42:	ea95 0f0c 	teq	r5, ip
 8000c46:	f47f af25 	bne.w	8000a94 <__aeabi_dmul+0x234>
 8000c4a:	4610      	mov	r0, r2
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	e72c      	b.n	8000aaa <__aeabi_dmul+0x24a>
 8000c50:	ea95 0f0c 	teq	r5, ip
 8000c54:	d106      	bne.n	8000c64 <__aeabi_ddiv+0x1b0>
 8000c56:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000c5a:	f43f aefd 	beq.w	8000a58 <__aeabi_dmul+0x1f8>
 8000c5e:	4610      	mov	r0, r2
 8000c60:	4619      	mov	r1, r3
 8000c62:	e722      	b.n	8000aaa <__aeabi_dmul+0x24a>
 8000c64:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000c68:	bf18      	it	ne
 8000c6a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000c6e:	f47f aec5 	bne.w	80009fc <__aeabi_dmul+0x19c>
 8000c72:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000c76:	f47f af0d 	bne.w	8000a94 <__aeabi_dmul+0x234>
 8000c7a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000c7e:	f47f aeeb 	bne.w	8000a58 <__aeabi_dmul+0x1f8>
 8000c82:	e712      	b.n	8000aaa <__aeabi_dmul+0x24a>

08000c84 <__aeabi_d2f>:
 8000c84:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c88:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c8c:	bf24      	itt	cs
 8000c8e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c92:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c96:	d90d      	bls.n	8000cb4 <__aeabi_d2f+0x30>
 8000c98:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c9c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ca0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ca4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ca8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000cac:	bf08      	it	eq
 8000cae:	f020 0001 	biceq.w	r0, r0, #1
 8000cb2:	4770      	bx	lr
 8000cb4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000cb8:	d121      	bne.n	8000cfe <__aeabi_d2f+0x7a>
 8000cba:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000cbe:	bfbc      	itt	lt
 8000cc0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000cc4:	4770      	bxlt	lr
 8000cc6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000cca:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000cce:	f1c2 0218 	rsb	r2, r2, #24
 8000cd2:	f1c2 0c20 	rsb	ip, r2, #32
 8000cd6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000cda:	fa20 f002 	lsr.w	r0, r0, r2
 8000cde:	bf18      	it	ne
 8000ce0:	f040 0001 	orrne.w	r0, r0, #1
 8000ce4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ce8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cec:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cf0:	ea40 000c 	orr.w	r0, r0, ip
 8000cf4:	fa23 f302 	lsr.w	r3, r3, r2
 8000cf8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cfc:	e7cc      	b.n	8000c98 <__aeabi_d2f+0x14>
 8000cfe:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000d02:	d107      	bne.n	8000d14 <__aeabi_d2f+0x90>
 8000d04:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000d08:	bf1e      	ittt	ne
 8000d0a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000d0e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000d12:	4770      	bxne	lr
 8000d14:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000d18:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d1c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop

08000d24 <__aeabi_uldivmod>:
 8000d24:	b953      	cbnz	r3, 8000d3c <__aeabi_uldivmod+0x18>
 8000d26:	b94a      	cbnz	r2, 8000d3c <__aeabi_uldivmod+0x18>
 8000d28:	2900      	cmp	r1, #0
 8000d2a:	bf08      	it	eq
 8000d2c:	2800      	cmpeq	r0, #0
 8000d2e:	bf1c      	itt	ne
 8000d30:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000d34:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000d38:	f000 b982 	b.w	8001040 <__aeabi_idiv0>
 8000d3c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d40:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d44:	f000 f806 	bl	8000d54 <__udivmoddi4>
 8000d48:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d4c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d50:	b004      	add	sp, #16
 8000d52:	4770      	bx	lr

08000d54 <__udivmoddi4>:
 8000d54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d58:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	460f      	mov	r7, r1
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d148      	bne.n	8000df4 <__udivmoddi4+0xa0>
 8000d62:	428a      	cmp	r2, r1
 8000d64:	4694      	mov	ip, r2
 8000d66:	d961      	bls.n	8000e2c <__udivmoddi4+0xd8>
 8000d68:	fab2 f382 	clz	r3, r2
 8000d6c:	b143      	cbz	r3, 8000d80 <__udivmoddi4+0x2c>
 8000d6e:	f1c3 0120 	rsb	r1, r3, #32
 8000d72:	409f      	lsls	r7, r3
 8000d74:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d78:	409c      	lsls	r4, r3
 8000d7a:	fa20 f101 	lsr.w	r1, r0, r1
 8000d7e:	430f      	orrs	r7, r1
 8000d80:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000d84:	fa1f fe8c 	uxth.w	lr, ip
 8000d88:	0c22      	lsrs	r2, r4, #16
 8000d8a:	fbb7 f6f1 	udiv	r6, r7, r1
 8000d8e:	fb01 7716 	mls	r7, r1, r6, r7
 8000d92:	fb06 f00e 	mul.w	r0, r6, lr
 8000d96:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d9a:	4290      	cmp	r0, r2
 8000d9c:	d908      	bls.n	8000db0 <__udivmoddi4+0x5c>
 8000d9e:	eb1c 0202 	adds.w	r2, ip, r2
 8000da2:	f106 37ff 	add.w	r7, r6, #4294967295	; 0xffffffff
 8000da6:	d202      	bcs.n	8000dae <__udivmoddi4+0x5a>
 8000da8:	4290      	cmp	r0, r2
 8000daa:	f200 8137 	bhi.w	800101c <__udivmoddi4+0x2c8>
 8000dae:	463e      	mov	r6, r7
 8000db0:	1a12      	subs	r2, r2, r0
 8000db2:	b2a4      	uxth	r4, r4
 8000db4:	fbb2 f0f1 	udiv	r0, r2, r1
 8000db8:	fb01 2210 	mls	r2, r1, r0, r2
 8000dbc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dc0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dc4:	45a6      	cmp	lr, r4
 8000dc6:	d908      	bls.n	8000dda <__udivmoddi4+0x86>
 8000dc8:	eb1c 0404 	adds.w	r4, ip, r4
 8000dcc:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000dd0:	d202      	bcs.n	8000dd8 <__udivmoddi4+0x84>
 8000dd2:	45a6      	cmp	lr, r4
 8000dd4:	f200 811c 	bhi.w	8001010 <__udivmoddi4+0x2bc>
 8000dd8:	4610      	mov	r0, r2
 8000dda:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dde:	eba4 040e 	sub.w	r4, r4, lr
 8000de2:	2600      	movs	r6, #0
 8000de4:	b11d      	cbz	r5, 8000dee <__udivmoddi4+0x9a>
 8000de6:	40dc      	lsrs	r4, r3
 8000de8:	2300      	movs	r3, #0
 8000dea:	e9c5 4300 	strd	r4, r3, [r5]
 8000dee:	4631      	mov	r1, r6
 8000df0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d909      	bls.n	8000e0c <__udivmoddi4+0xb8>
 8000df8:	2d00      	cmp	r5, #0
 8000dfa:	f000 80fd 	beq.w	8000ff8 <__udivmoddi4+0x2a4>
 8000dfe:	2600      	movs	r6, #0
 8000e00:	e9c5 0100 	strd	r0, r1, [r5]
 8000e04:	4630      	mov	r0, r6
 8000e06:	4631      	mov	r1, r6
 8000e08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000e0c:	fab3 f683 	clz	r6, r3
 8000e10:	2e00      	cmp	r6, #0
 8000e12:	d14b      	bne.n	8000eac <__udivmoddi4+0x158>
 8000e14:	428b      	cmp	r3, r1
 8000e16:	f0c0 80f2 	bcc.w	8000ffe <__udivmoddi4+0x2aa>
 8000e1a:	4282      	cmp	r2, r0
 8000e1c:	f240 80ef 	bls.w	8000ffe <__udivmoddi4+0x2aa>
 8000e20:	4630      	mov	r0, r6
 8000e22:	2d00      	cmp	r5, #0
 8000e24:	d0e3      	beq.n	8000dee <__udivmoddi4+0x9a>
 8000e26:	e9c5 4700 	strd	r4, r7, [r5]
 8000e2a:	e7e0      	b.n	8000dee <__udivmoddi4+0x9a>
 8000e2c:	b902      	cbnz	r2, 8000e30 <__udivmoddi4+0xdc>
 8000e2e:	deff      	udf	#255	; 0xff
 8000e30:	fab2 f382 	clz	r3, r2
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	f040 809d 	bne.w	8000f74 <__udivmoddi4+0x220>
 8000e3a:	1a89      	subs	r1, r1, r2
 8000e3c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000e40:	b297      	uxth	r7, r2
 8000e42:	2601      	movs	r6, #1
 8000e44:	0c20      	lsrs	r0, r4, #16
 8000e46:	fbb1 f2fe 	udiv	r2, r1, lr
 8000e4a:	fb0e 1112 	mls	r1, lr, r2, r1
 8000e4e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e52:	fb07 f002 	mul.w	r0, r7, r2
 8000e56:	4288      	cmp	r0, r1
 8000e58:	d90f      	bls.n	8000e7a <__udivmoddi4+0x126>
 8000e5a:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5e:	f102 38ff 	add.w	r8, r2, #4294967295	; 0xffffffff
 8000e62:	bf2c      	ite	cs
 8000e64:	f04f 0901 	movcs.w	r9, #1
 8000e68:	f04f 0900 	movcc.w	r9, #0
 8000e6c:	4288      	cmp	r0, r1
 8000e6e:	d903      	bls.n	8000e78 <__udivmoddi4+0x124>
 8000e70:	f1b9 0f00 	cmp.w	r9, #0
 8000e74:	f000 80cf 	beq.w	8001016 <__udivmoddi4+0x2c2>
 8000e78:	4642      	mov	r2, r8
 8000e7a:	1a09      	subs	r1, r1, r0
 8000e7c:	b2a4      	uxth	r4, r4
 8000e7e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e82:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e86:	fb00 f707 	mul.w	r7, r0, r7
 8000e8a:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e8e:	42a7      	cmp	r7, r4
 8000e90:	d908      	bls.n	8000ea4 <__udivmoddi4+0x150>
 8000e92:	eb1c 0404 	adds.w	r4, ip, r4
 8000e96:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e9a:	d202      	bcs.n	8000ea2 <__udivmoddi4+0x14e>
 8000e9c:	42a7      	cmp	r7, r4
 8000e9e:	f200 80b4 	bhi.w	800100a <__udivmoddi4+0x2b6>
 8000ea2:	4608      	mov	r0, r1
 8000ea4:	1be4      	subs	r4, r4, r7
 8000ea6:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8000eaa:	e79b      	b.n	8000de4 <__udivmoddi4+0x90>
 8000eac:	f1c6 0720 	rsb	r7, r6, #32
 8000eb0:	40b3      	lsls	r3, r6
 8000eb2:	fa01 f406 	lsl.w	r4, r1, r6
 8000eb6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000eba:	40f9      	lsrs	r1, r7
 8000ebc:	40b2      	lsls	r2, r6
 8000ebe:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ec2:	fa20 f307 	lsr.w	r3, r0, r7
 8000ec6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000eca:	431c      	orrs	r4, r3
 8000ecc:	fa1f fe8c 	uxth.w	lr, ip
 8000ed0:	fa00 f306 	lsl.w	r3, r0, r6
 8000ed4:	0c20      	lsrs	r0, r4, #16
 8000ed6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eda:	fb09 1118 	mls	r1, r9, r8, r1
 8000ede:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ee2:	fb08 f00e 	mul.w	r0, r8, lr
 8000ee6:	4288      	cmp	r0, r1
 8000ee8:	d90f      	bls.n	8000f0a <__udivmoddi4+0x1b6>
 8000eea:	eb1c 0101 	adds.w	r1, ip, r1
 8000eee:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000ef2:	bf2c      	ite	cs
 8000ef4:	f04f 0b01 	movcs.w	fp, #1
 8000ef8:	f04f 0b00 	movcc.w	fp, #0
 8000efc:	4288      	cmp	r0, r1
 8000efe:	d903      	bls.n	8000f08 <__udivmoddi4+0x1b4>
 8000f00:	f1bb 0f00 	cmp.w	fp, #0
 8000f04:	f000 808d 	beq.w	8001022 <__udivmoddi4+0x2ce>
 8000f08:	46d0      	mov	r8, sl
 8000f0a:	1a09      	subs	r1, r1, r0
 8000f0c:	b2a4      	uxth	r4, r4
 8000f0e:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f12:	fb09 1110 	mls	r1, r9, r0, r1
 8000f16:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f1a:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f1e:	458e      	cmp	lr, r1
 8000f20:	d907      	bls.n	8000f32 <__udivmoddi4+0x1de>
 8000f22:	eb1c 0101 	adds.w	r1, ip, r1
 8000f26:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000f2a:	d201      	bcs.n	8000f30 <__udivmoddi4+0x1dc>
 8000f2c:	458e      	cmp	lr, r1
 8000f2e:	d87f      	bhi.n	8001030 <__udivmoddi4+0x2dc>
 8000f30:	4620      	mov	r0, r4
 8000f32:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f36:	eba1 010e 	sub.w	r1, r1, lr
 8000f3a:	fba0 9802 	umull	r9, r8, r0, r2
 8000f3e:	4541      	cmp	r1, r8
 8000f40:	464c      	mov	r4, r9
 8000f42:	46c6      	mov	lr, r8
 8000f44:	d302      	bcc.n	8000f4c <__udivmoddi4+0x1f8>
 8000f46:	d106      	bne.n	8000f56 <__udivmoddi4+0x202>
 8000f48:	454b      	cmp	r3, r9
 8000f4a:	d204      	bcs.n	8000f56 <__udivmoddi4+0x202>
 8000f4c:	3801      	subs	r0, #1
 8000f4e:	ebb9 0402 	subs.w	r4, r9, r2
 8000f52:	eb68 0e0c 	sbc.w	lr, r8, ip
 8000f56:	2d00      	cmp	r5, #0
 8000f58:	d070      	beq.n	800103c <__udivmoddi4+0x2e8>
 8000f5a:	1b1a      	subs	r2, r3, r4
 8000f5c:	eb61 010e 	sbc.w	r1, r1, lr
 8000f60:	fa22 f306 	lsr.w	r3, r2, r6
 8000f64:	fa01 f707 	lsl.w	r7, r1, r7
 8000f68:	40f1      	lsrs	r1, r6
 8000f6a:	2600      	movs	r6, #0
 8000f6c:	431f      	orrs	r7, r3
 8000f6e:	e9c5 7100 	strd	r7, r1, [r5]
 8000f72:	e73c      	b.n	8000dee <__udivmoddi4+0x9a>
 8000f74:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f78:	f1c3 0020 	rsb	r0, r3, #32
 8000f7c:	fa01 f203 	lsl.w	r2, r1, r3
 8000f80:	fa21 f600 	lsr.w	r6, r1, r0
 8000f84:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000f88:	fa24 f100 	lsr.w	r1, r4, r0
 8000f8c:	fa1f f78c 	uxth.w	r7, ip
 8000f90:	409c      	lsls	r4, r3
 8000f92:	4311      	orrs	r1, r2
 8000f94:	fbb6 f0fe 	udiv	r0, r6, lr
 8000f98:	0c0a      	lsrs	r2, r1, #16
 8000f9a:	fb0e 6610 	mls	r6, lr, r0, r6
 8000f9e:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 8000fa2:	fb00 f607 	mul.w	r6, r0, r7
 8000fa6:	4296      	cmp	r6, r2
 8000fa8:	d90e      	bls.n	8000fc8 <__udivmoddi4+0x274>
 8000faa:	eb1c 0202 	adds.w	r2, ip, r2
 8000fae:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000fb2:	bf2c      	ite	cs
 8000fb4:	f04f 0901 	movcs.w	r9, #1
 8000fb8:	f04f 0900 	movcc.w	r9, #0
 8000fbc:	4296      	cmp	r6, r2
 8000fbe:	d902      	bls.n	8000fc6 <__udivmoddi4+0x272>
 8000fc0:	f1b9 0f00 	cmp.w	r9, #0
 8000fc4:	d031      	beq.n	800102a <__udivmoddi4+0x2d6>
 8000fc6:	4640      	mov	r0, r8
 8000fc8:	1b92      	subs	r2, r2, r6
 8000fca:	b289      	uxth	r1, r1
 8000fcc:	fbb2 f6fe 	udiv	r6, r2, lr
 8000fd0:	fb0e 2216 	mls	r2, lr, r6, r2
 8000fd4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8000fd8:	fb06 f207 	mul.w	r2, r6, r7
 8000fdc:	428a      	cmp	r2, r1
 8000fde:	d907      	bls.n	8000ff0 <__udivmoddi4+0x29c>
 8000fe0:	eb1c 0101 	adds.w	r1, ip, r1
 8000fe4:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000fe8:	d201      	bcs.n	8000fee <__udivmoddi4+0x29a>
 8000fea:	428a      	cmp	r2, r1
 8000fec:	d823      	bhi.n	8001036 <__udivmoddi4+0x2e2>
 8000fee:	4646      	mov	r6, r8
 8000ff0:	1a89      	subs	r1, r1, r2
 8000ff2:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ff6:	e725      	b.n	8000e44 <__udivmoddi4+0xf0>
 8000ff8:	462e      	mov	r6, r5
 8000ffa:	4628      	mov	r0, r5
 8000ffc:	e6f7      	b.n	8000dee <__udivmoddi4+0x9a>
 8000ffe:	1a84      	subs	r4, r0, r2
 8001000:	eb61 0303 	sbc.w	r3, r1, r3
 8001004:	2001      	movs	r0, #1
 8001006:	461f      	mov	r7, r3
 8001008:	e70b      	b.n	8000e22 <__udivmoddi4+0xce>
 800100a:	4464      	add	r4, ip
 800100c:	3802      	subs	r0, #2
 800100e:	e749      	b.n	8000ea4 <__udivmoddi4+0x150>
 8001010:	4464      	add	r4, ip
 8001012:	3802      	subs	r0, #2
 8001014:	e6e1      	b.n	8000dda <__udivmoddi4+0x86>
 8001016:	3a02      	subs	r2, #2
 8001018:	4461      	add	r1, ip
 800101a:	e72e      	b.n	8000e7a <__udivmoddi4+0x126>
 800101c:	3e02      	subs	r6, #2
 800101e:	4462      	add	r2, ip
 8001020:	e6c6      	b.n	8000db0 <__udivmoddi4+0x5c>
 8001022:	f1a8 0802 	sub.w	r8, r8, #2
 8001026:	4461      	add	r1, ip
 8001028:	e76f      	b.n	8000f0a <__udivmoddi4+0x1b6>
 800102a:	3802      	subs	r0, #2
 800102c:	4462      	add	r2, ip
 800102e:	e7cb      	b.n	8000fc8 <__udivmoddi4+0x274>
 8001030:	3802      	subs	r0, #2
 8001032:	4461      	add	r1, ip
 8001034:	e77d      	b.n	8000f32 <__udivmoddi4+0x1de>
 8001036:	3e02      	subs	r6, #2
 8001038:	4461      	add	r1, ip
 800103a:	e7d9      	b.n	8000ff0 <__udivmoddi4+0x29c>
 800103c:	462e      	mov	r6, r5
 800103e:	e6d6      	b.n	8000dee <__udivmoddi4+0x9a>

08001040 <__aeabi_idiv0>:
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop

08001044 <iis3dwb_read_reg>:
  *
  */
int32_t iis3dwb_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8001044:	b590      	push	{r4, r7, lr}
 8001046:	b087      	sub	sp, #28
 8001048:	af00      	add	r7, sp, #0
 800104a:	60f8      	str	r0, [r7, #12]
 800104c:	607a      	str	r2, [r7, #4]
 800104e:	461a      	mov	r2, r3
 8001050:	460b      	mov	r3, r1
 8001052:	72fb      	strb	r3, [r7, #11]
 8001054:	4613      	mov	r3, r2
 8001056:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	685c      	ldr	r4, [r3, #4]
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	6898      	ldr	r0, [r3, #8]
 8001060:	893b      	ldrh	r3, [r7, #8]
 8001062:	7af9      	ldrb	r1, [r7, #11]
 8001064:	687a      	ldr	r2, [r7, #4]
 8001066:	47a0      	blx	r4
 8001068:	6178      	str	r0, [r7, #20]

  return ret;
 800106a:	697b      	ldr	r3, [r7, #20]
}
 800106c:	4618      	mov	r0, r3
 800106e:	371c      	adds	r7, #28
 8001070:	46bd      	mov	sp, r7
 8001072:	bd90      	pop	{r4, r7, pc}

08001074 <iis3dwb_write_reg>:
  *
  */
int32_t iis3dwb_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8001074:	b590      	push	{r4, r7, lr}
 8001076:	b087      	sub	sp, #28
 8001078:	af00      	add	r7, sp, #0
 800107a:	60f8      	str	r0, [r7, #12]
 800107c:	607a      	str	r2, [r7, #4]
 800107e:	461a      	mov	r2, r3
 8001080:	460b      	mov	r3, r1
 8001082:	72fb      	strb	r3, [r7, #11]
 8001084:	4613      	mov	r3, r2
 8001086:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	681c      	ldr	r4, [r3, #0]
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	6898      	ldr	r0, [r3, #8]
 8001090:	893b      	ldrh	r3, [r7, #8]
 8001092:	7af9      	ldrb	r1, [r7, #11]
 8001094:	687a      	ldr	r2, [r7, #4]
 8001096:	47a0      	blx	r4
 8001098:	6178      	str	r0, [r7, #20]

  return ret;
 800109a:	697b      	ldr	r3, [r7, #20]
}
 800109c:	4618      	mov	r0, r3
 800109e:	371c      	adds	r7, #28
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd90      	pop	{r4, r7, pc}

080010a4 <iis3dwb_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  iis3dwb_fs_xl_t val)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b084      	sub	sp, #16
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
 80010ac:	460b      	mov	r3, r1
 80010ae:	70fb      	strb	r3, [r7, #3]
  iis3dwb_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = iis3dwb_read_reg(ctx, IIS3DWB_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 80010b0:	f107 0208 	add.w	r2, r7, #8
 80010b4:	2301      	movs	r3, #1
 80010b6:	2110      	movs	r1, #16
 80010b8:	6878      	ldr	r0, [r7, #4]
 80010ba:	f7ff ffc3 	bl	8001044 <iis3dwb_read_reg>
 80010be:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d10f      	bne.n	80010e6 <iis3dwb_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = (uint8_t)val;
 80010c6:	78fb      	ldrb	r3, [r7, #3]
 80010c8:	f003 0303 	and.w	r3, r3, #3
 80010cc:	b2da      	uxtb	r2, r3
 80010ce:	7a3b      	ldrb	r3, [r7, #8]
 80010d0:	f362 0383 	bfi	r3, r2, #2, #2
 80010d4:	723b      	strb	r3, [r7, #8]
    ret = iis3dwb_write_reg(ctx, IIS3DWB_CTRL1_XL,
 80010d6:	f107 0208 	add.w	r2, r7, #8
 80010da:	2301      	movs	r3, #1
 80010dc:	2110      	movs	r1, #16
 80010de:	6878      	ldr	r0, [r7, #4]
 80010e0:	f7ff ffc8 	bl	8001074 <iis3dwb_write_reg>
 80010e4:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 80010e6:	68fb      	ldr	r3, [r7, #12]
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	3710      	adds	r7, #16
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}

080010f0 <iis3dwb_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 iis3dwb_odr_xl_t val)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b084      	sub	sp, #16
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
 80010f8:	460b      	mov	r3, r1
 80010fa:	70fb      	strb	r3, [r7, #3]
  iis3dwb_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = iis3dwb_read_reg(ctx, IIS3DWB_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 80010fc:	f107 0208 	add.w	r2, r7, #8
 8001100:	2301      	movs	r3, #1
 8001102:	2110      	movs	r1, #16
 8001104:	6878      	ldr	r0, [r7, #4]
 8001106:	f7ff ff9d 	bl	8001044 <iis3dwb_read_reg>
 800110a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d10f      	bne.n	8001132 <iis3dwb_xl_data_rate_set+0x42>
  {
    ctrl1_xl.xl_en = (uint8_t)val;
 8001112:	78fb      	ldrb	r3, [r7, #3]
 8001114:	f003 0307 	and.w	r3, r3, #7
 8001118:	b2da      	uxtb	r2, r3
 800111a:	7a3b      	ldrb	r3, [r7, #8]
 800111c:	f362 1347 	bfi	r3, r2, #5, #3
 8001120:	723b      	strb	r3, [r7, #8]
    ret = iis3dwb_write_reg(ctx, IIS3DWB_CTRL1_XL,
 8001122:	f107 0208 	add.w	r2, r7, #8
 8001126:	2301      	movs	r3, #1
 8001128:	2110      	movs	r1, #16
 800112a:	6878      	ldr	r0, [r7, #4]
 800112c:	f7ff ffa2 	bl	8001074 <iis3dwb_write_reg>
 8001130:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 8001132:	68fb      	ldr	r3, [r7, #12]
}
 8001134:	4618      	mov	r0, r3
 8001136:	3710      	adds	r7, #16
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}

0800113c <iis3dwb_data_ready_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_data_ready_mode_set(stmdev_ctx_t *ctx,
                                    iis3dwb_dataready_pulsed_t val)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b084      	sub	sp, #16
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	460b      	mov	r3, r1
 8001146:	70fb      	strb	r3, [r7, #3]
  iis3dwb_counter_bdr_reg1_t counter_bdr_reg1;
  int32_t ret;

  ret = iis3dwb_read_reg(ctx, IIS3DWB_COUNTER_BDR_REG1,
 8001148:	f107 0208 	add.w	r2, r7, #8
 800114c:	2301      	movs	r3, #1
 800114e:	210b      	movs	r1, #11
 8001150:	6878      	ldr	r0, [r7, #4]
 8001152:	f7ff ff77 	bl	8001044 <iis3dwb_read_reg>
 8001156:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&counter_bdr_reg1, 1);

  if (ret == 0)
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d10f      	bne.n	800117e <iis3dwb_data_ready_mode_set+0x42>
  {
    counter_bdr_reg1.dataready_pulsed = (uint8_t)val;
 800115e:	78fb      	ldrb	r3, [r7, #3]
 8001160:	f003 0301 	and.w	r3, r3, #1
 8001164:	b2da      	uxtb	r2, r3
 8001166:	7a3b      	ldrb	r3, [r7, #8]
 8001168:	f362 13c7 	bfi	r3, r2, #7, #1
 800116c:	723b      	strb	r3, [r7, #8]
    ret = iis3dwb_write_reg(ctx, IIS3DWB_COUNTER_BDR_REG1,
 800116e:	f107 0208 	add.w	r2, r7, #8
 8001172:	2301      	movs	r3, #1
 8001174:	210b      	movs	r1, #11
 8001176:	6878      	ldr	r0, [r7, #4]
 8001178:	f7ff ff7c 	bl	8001074 <iis3dwb_write_reg>
 800117c:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&counter_bdr_reg1, 1);
  }

  return ret;
 800117e:	68fb      	ldr	r3, [r7, #12]
}
 8001180:	4618      	mov	r0, r3
 8001182:	3710      	adds	r7, #16
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}

08001188 <iis3dwb_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b084      	sub	sp, #16
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = iis3dwb_read_reg(ctx, IIS3DWB_WHO_AM_I, buff, 1);
 8001192:	2301      	movs	r3, #1
 8001194:	683a      	ldr	r2, [r7, #0]
 8001196:	210f      	movs	r1, #15
 8001198:	6878      	ldr	r0, [r7, #4]
 800119a:	f7ff ff53 	bl	8001044 <iis3dwb_read_reg>
 800119e:	60f8      	str	r0, [r7, #12]

  return ret;
 80011a0:	68fb      	ldr	r3, [r7, #12]
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	3710      	adds	r7, #16
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}

080011aa <iis3dwb_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80011aa:	b580      	push	{r7, lr}
 80011ac:	b084      	sub	sp, #16
 80011ae:	af00      	add	r7, sp, #0
 80011b0:	6078      	str	r0, [r7, #4]
 80011b2:	460b      	mov	r3, r1
 80011b4:	70fb      	strb	r3, [r7, #3]
  iis3dwb_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = iis3dwb_read_reg(ctx, IIS3DWB_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80011b6:	f107 0208 	add.w	r2, r7, #8
 80011ba:	2301      	movs	r3, #1
 80011bc:	2112      	movs	r1, #18
 80011be:	6878      	ldr	r0, [r7, #4]
 80011c0:	f7ff ff40 	bl	8001044 <iis3dwb_read_reg>
 80011c4:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d10f      	bne.n	80011ec <iis3dwb_reset_set+0x42>
  {
    ctrl3_c.sw_reset = (uint8_t)val;
 80011cc:	78fb      	ldrb	r3, [r7, #3]
 80011ce:	f003 0301 	and.w	r3, r3, #1
 80011d2:	b2da      	uxtb	r2, r3
 80011d4:	7a3b      	ldrb	r3, [r7, #8]
 80011d6:	f362 0300 	bfi	r3, r2, #0, #1
 80011da:	723b      	strb	r3, [r7, #8]
    ret = iis3dwb_write_reg(ctx, IIS3DWB_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80011dc:	f107 0208 	add.w	r2, r7, #8
 80011e0:	2301      	movs	r3, #1
 80011e2:	2112      	movs	r1, #18
 80011e4:	6878      	ldr	r0, [r7, #4]
 80011e6:	f7ff ff45 	bl	8001074 <iis3dwb_write_reg>
 80011ea:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80011ec:	68fb      	ldr	r3, [r7, #12]
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	3710      	adds	r7, #16
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}

080011f6 <iis3dwb_reset_get>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 80011f6:	b580      	push	{r7, lr}
 80011f8:	b084      	sub	sp, #16
 80011fa:	af00      	add	r7, sp, #0
 80011fc:	6078      	str	r0, [r7, #4]
 80011fe:	6039      	str	r1, [r7, #0]
  iis3dwb_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = iis3dwb_read_reg(ctx, IIS3DWB_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8001200:	f107 0208 	add.w	r2, r7, #8
 8001204:	2301      	movs	r3, #1
 8001206:	2112      	movs	r1, #18
 8001208:	6878      	ldr	r0, [r7, #4]
 800120a:	f7ff ff1b 	bl	8001044 <iis3dwb_read_reg>
 800120e:	60f8      	str	r0, [r7, #12]
  *val = ctrl3_c.sw_reset;
 8001210:	7a3b      	ldrb	r3, [r7, #8]
 8001212:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001216:	b2db      	uxtb	r3, r3
 8001218:	461a      	mov	r2, r3
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	701a      	strb	r2, [r3, #0]

  return ret;
 800121e:	68fb      	ldr	r3, [r7, #12]
}
 8001220:	4618      	mov	r0, r3
 8001222:	3710      	adds	r7, #16
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}

08001228 <iis3dwb_xl_filt_path_on_out_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_xl_filt_path_on_out_set(stmdev_ctx_t *ctx,
                                        iis3dwb_filt_xl_en_t val)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b086      	sub	sp, #24
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
 8001230:	460b      	mov	r3, r1
 8001232:	70fb      	strb	r3, [r7, #3]
  iis3dwb_ctrl1_xl_t ctrl1_xl;
  iis3dwb_ctrl8_xl_t ctrl8_xl;
  int32_t ret;

  ret = iis3dwb_read_reg(ctx, IIS3DWB_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8001234:	f107 0210 	add.w	r2, r7, #16
 8001238:	2301      	movs	r3, #1
 800123a:	2110      	movs	r1, #16
 800123c:	6878      	ldr	r0, [r7, #4]
 800123e:	f7ff ff01 	bl	8001044 <iis3dwb_read_reg>
 8001242:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d111      	bne.n	800126e <iis3dwb_xl_filt_path_on_out_set+0x46>
  {
    ctrl1_xl.lpf2_xl_en = ((uint8_t)val & 0x80U) >> 7;
 800124a:	78fb      	ldrb	r3, [r7, #3]
 800124c:	09db      	lsrs	r3, r3, #7
 800124e:	b2db      	uxtb	r3, r3
 8001250:	f003 0301 	and.w	r3, r3, #1
 8001254:	b2da      	uxtb	r2, r3
 8001256:	7c3b      	ldrb	r3, [r7, #16]
 8001258:	f362 0341 	bfi	r3, r2, #1, #1
 800125c:	743b      	strb	r3, [r7, #16]
    ret = iis3dwb_write_reg(ctx, IIS3DWB_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 800125e:	f107 0210 	add.w	r2, r7, #16
 8001262:	2301      	movs	r3, #1
 8001264:	2110      	movs	r1, #16
 8001266:	6878      	ldr	r0, [r7, #4]
 8001268:	f7ff ff04 	bl	8001074 <iis3dwb_write_reg>
 800126c:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 800126e:	697b      	ldr	r3, [r7, #20]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d107      	bne.n	8001284 <iis3dwb_xl_filt_path_on_out_set+0x5c>
  {
    ret = iis3dwb_read_reg(ctx, IIS3DWB_CTRL8_XL, (uint8_t *)&ctrl8_xl, 1);
 8001274:	f107 020c 	add.w	r2, r7, #12
 8001278:	2301      	movs	r3, #1
 800127a:	2117      	movs	r1, #23
 800127c:	6878      	ldr	r0, [r7, #4]
 800127e:	f7ff fee1 	bl	8001044 <iis3dwb_read_reg>
 8001282:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d121      	bne.n	80012ce <iis3dwb_xl_filt_path_on_out_set+0xa6>
  {
    ctrl8_xl.fds = ((uint8_t)val & 0x10U) >> 4;
 800128a:	78fb      	ldrb	r3, [r7, #3]
 800128c:	091b      	lsrs	r3, r3, #4
 800128e:	f003 0301 	and.w	r3, r3, #1
 8001292:	b2da      	uxtb	r2, r3
 8001294:	7b3b      	ldrb	r3, [r7, #12]
 8001296:	f362 0382 	bfi	r3, r2, #2, #1
 800129a:	733b      	strb	r3, [r7, #12]
    ctrl8_xl.hp_ref_mode_xl = ((uint8_t)val & 0x20U) >> 5;
 800129c:	78fb      	ldrb	r3, [r7, #3]
 800129e:	095b      	lsrs	r3, r3, #5
 80012a0:	f003 0301 	and.w	r3, r3, #1
 80012a4:	b2da      	uxtb	r2, r3
 80012a6:	7b3b      	ldrb	r3, [r7, #12]
 80012a8:	f362 1304 	bfi	r3, r2, #4, #1
 80012ac:	733b      	strb	r3, [r7, #12]
    ctrl8_xl.hpcf_xl = (uint8_t)val & 0x07U;
 80012ae:	78fb      	ldrb	r3, [r7, #3]
 80012b0:	f003 0307 	and.w	r3, r3, #7
 80012b4:	b2da      	uxtb	r2, r3
 80012b6:	7b3b      	ldrb	r3, [r7, #12]
 80012b8:	f362 1347 	bfi	r3, r2, #5, #3
 80012bc:	733b      	strb	r3, [r7, #12]
    ret = iis3dwb_write_reg(ctx, IIS3DWB_CTRL8_XL, (uint8_t *)&ctrl8_xl, 1);
 80012be:	f107 020c 	add.w	r2, r7, #12
 80012c2:	2301      	movs	r3, #1
 80012c4:	2117      	movs	r1, #23
 80012c6:	6878      	ldr	r0, [r7, #4]
 80012c8:	f7ff fed4 	bl	8001074 <iis3dwb_write_reg>
 80012cc:	6178      	str	r0, [r7, #20]
  }

  return ret;
 80012ce:	697b      	ldr	r3, [r7, #20]
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	3718      	adds	r7, #24
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}

080012d8 <iis3dwb_i2c_interface_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_i2c_interface_set(stmdev_ctx_t *ctx,
                                  iis3dwb_i2c_disable_t val)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b084      	sub	sp, #16
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
 80012e0:	460b      	mov	r3, r1
 80012e2:	70fb      	strb	r3, [r7, #3]
  iis3dwb_ctrl4_c_t ctrl4_c;
  int32_t ret;

  ret = iis3dwb_read_reg(ctx, IIS3DWB_CTRL4_C, (uint8_t *)&ctrl4_c, 1);
 80012e4:	f107 0208 	add.w	r2, r7, #8
 80012e8:	2301      	movs	r3, #1
 80012ea:	2113      	movs	r1, #19
 80012ec:	6878      	ldr	r0, [r7, #4]
 80012ee:	f7ff fea9 	bl	8001044 <iis3dwb_read_reg>
 80012f2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d10f      	bne.n	800131a <iis3dwb_i2c_interface_set+0x42>
  {
    ctrl4_c.i2c_disable = (uint8_t)val;
 80012fa:	78fb      	ldrb	r3, [r7, #3]
 80012fc:	f003 0301 	and.w	r3, r3, #1
 8001300:	b2da      	uxtb	r2, r3
 8001302:	7a3b      	ldrb	r3, [r7, #8]
 8001304:	f362 0382 	bfi	r3, r2, #2, #1
 8001308:	723b      	strb	r3, [r7, #8]
    ret = iis3dwb_write_reg(ctx, IIS3DWB_CTRL4_C, (uint8_t *)&ctrl4_c, 1);
 800130a:	f107 0208 	add.w	r2, r7, #8
 800130e:	2301      	movs	r3, #1
 8001310:	2113      	movs	r1, #19
 8001312:	6878      	ldr	r0, [r7, #4]
 8001314:	f7ff feae 	bl	8001074 <iis3dwb_write_reg>
 8001318:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800131a:	68fb      	ldr	r3, [r7, #12]
}
 800131c:	4618      	mov	r0, r3
 800131e:	3710      	adds	r7, #16
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}

08001324 <iis3dwb_pin_int1_route_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_pin_int1_route_set(stmdev_ctx_t *ctx,
                                   iis3dwb_pin_int1_route_t *val)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b086      	sub	sp, #24
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
 800132c:	6039      	str	r1, [r7, #0]
  iis3dwb_int1_ctrl_t          int1_ctrl;
  iis3dwb_slope_en_t           slope_en;
  iis3dwb_md1_cfg_t            md1_cfg;
  int32_t ret;

  ret = iis3dwb_read_reg(ctx, IIS3DWB_INT1_CTRL, (uint8_t *)&int1_ctrl, 1);
 800132e:	f107 0210 	add.w	r2, r7, #16
 8001332:	2301      	movs	r3, #1
 8001334:	210d      	movs	r1, #13
 8001336:	6878      	ldr	r0, [r7, #4]
 8001338:	f7ff fe84 	bl	8001044 <iis3dwb_read_reg>
 800133c:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 800133e:	697b      	ldr	r3, [r7, #20]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d107      	bne.n	8001354 <iis3dwb_pin_int1_route_set+0x30>
  {
    ret = iis3dwb_read_reg(ctx, IIS3DWB_MD1_CFG, (uint8_t *)&md1_cfg, 1);
 8001344:	f107 0208 	add.w	r2, r7, #8
 8001348:	2301      	movs	r3, #1
 800134a:	215e      	movs	r1, #94	; 0x5e
 800134c:	6878      	ldr	r0, [r7, #4]
 800134e:	f7ff fe79 	bl	8001044 <iis3dwb_read_reg>
 8001352:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d107      	bne.n	800136a <iis3dwb_pin_int1_route_set+0x46>
  {
    ret = iis3dwb_read_reg(ctx, IIS3DWB_SLOPE_EN, (uint8_t *)&slope_en, 1);
 800135a:	f107 020c 	add.w	r2, r7, #12
 800135e:	2301      	movs	r3, #1
 8001360:	2156      	movs	r1, #86	; 0x56
 8001362:	6878      	ldr	r0, [r7, #4]
 8001364:	f7ff fe6e 	bl	8001044 <iis3dwb_read_reg>
 8001368:	6178      	str	r0, [r7, #20]
  }

  int1_ctrl.int1_drdy_xl       = val->drdy_xl;
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001372:	b2da      	uxtb	r2, r3
 8001374:	7c3b      	ldrb	r3, [r7, #16]
 8001376:	f362 0300 	bfi	r3, r2, #0, #1
 800137a:	743b      	strb	r3, [r7, #16]
  int1_ctrl.int1_boot          = val->boot;
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001384:	b2da      	uxtb	r2, r3
 8001386:	7c3b      	ldrb	r3, [r7, #16]
 8001388:	f362 0382 	bfi	r3, r2, #2, #1
 800138c:	743b      	strb	r3, [r7, #16]
  int1_ctrl.int1_fifo_th       = val->fifo_th;
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001396:	b2da      	uxtb	r2, r3
 8001398:	7c3b      	ldrb	r3, [r7, #16]
 800139a:	f362 03c3 	bfi	r3, r2, #3, #1
 800139e:	743b      	strb	r3, [r7, #16]
  int1_ctrl.int1_fifo_ovr      = val->fifo_ovr;
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80013a8:	b2da      	uxtb	r2, r3
 80013aa:	7c3b      	ldrb	r3, [r7, #16]
 80013ac:	f362 1304 	bfi	r3, r2, #4, #1
 80013b0:	743b      	strb	r3, [r7, #16]
  int1_ctrl.int1_fifo_full     = val->fifo_full;
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80013ba:	b2da      	uxtb	r2, r3
 80013bc:	7c3b      	ldrb	r3, [r7, #16]
 80013be:	f362 1345 	bfi	r3, r2, #5, #1
 80013c2:	743b      	strb	r3, [r7, #16]
  int1_ctrl.int1_cnt_bdr       = val->fifo_bdr;
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80013cc:	b2da      	uxtb	r2, r3
 80013ce:	7c3b      	ldrb	r3, [r7, #16]
 80013d0:	f362 1386 	bfi	r3, r2, #6, #1
 80013d4:	743b      	strb	r3, [r7, #16]
  md1_cfg.int1_wu              = val->wake_up;
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80013de:	b2da      	uxtb	r2, r3
 80013e0:	7a3b      	ldrb	r3, [r7, #8]
 80013e2:	f362 1345 	bfi	r3, r2, #5, #1
 80013e6:	723b      	strb	r3, [r7, #8]
  md1_cfg.int1_sleep_change    = val->sleep_change | val->sleep_status;
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80013f0:	b2da      	uxtb	r2, r3
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	785b      	ldrb	r3, [r3, #1]
 80013f6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80013fa:	b2db      	uxtb	r3, r3
 80013fc:	4313      	orrs	r3, r2
 80013fe:	b2da      	uxtb	r2, r3
 8001400:	7a3b      	ldrb	r3, [r7, #8]
 8001402:	f362 13c7 	bfi	r3, r2, #7, #1
 8001406:	723b      	strb	r3, [r7, #8]
  slope_en.sleep_status_on_int = val->sleep_status;
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	785b      	ldrb	r3, [r3, #1]
 800140c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001410:	b2da      	uxtb	r2, r3
 8001412:	7b3b      	ldrb	r3, [r7, #12]
 8001414:	f362 1345 	bfi	r3, r2, #5, #1
 8001418:	733b      	strb	r3, [r7, #12]

  if (ret == 0)
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d107      	bne.n	8001430 <iis3dwb_pin_int1_route_set+0x10c>
  {
    ret = iis3dwb_write_reg(ctx, IIS3DWB_INT1_CTRL, (uint8_t *)&int1_ctrl, 1);
 8001420:	f107 0210 	add.w	r2, r7, #16
 8001424:	2301      	movs	r3, #1
 8001426:	210d      	movs	r1, #13
 8001428:	6878      	ldr	r0, [r7, #4]
 800142a:	f7ff fe23 	bl	8001074 <iis3dwb_write_reg>
 800142e:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d107      	bne.n	8001446 <iis3dwb_pin_int1_route_set+0x122>
  {
    ret = iis3dwb_write_reg(ctx, IIS3DWB_MD1_CFG, (uint8_t *)&md1_cfg, 1);
 8001436:	f107 0208 	add.w	r2, r7, #8
 800143a:	2301      	movs	r3, #1
 800143c:	215e      	movs	r1, #94	; 0x5e
 800143e:	6878      	ldr	r0, [r7, #4]
 8001440:	f7ff fe18 	bl	8001074 <iis3dwb_write_reg>
 8001444:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d107      	bne.n	800145c <iis3dwb_pin_int1_route_set+0x138>
  {
    ret = iis3dwb_write_reg(ctx, IIS3DWB_SLOPE_EN, (uint8_t *)&slope_en, 1);
 800144c:	f107 020c 	add.w	r2, r7, #12
 8001450:	2301      	movs	r3, #1
 8001452:	2156      	movs	r1, #86	; 0x56
 8001454:	6878      	ldr	r0, [r7, #4]
 8001456:	f7ff fe0d 	bl	8001074 <iis3dwb_write_reg>
 800145a:	6178      	str	r0, [r7, #20]
  }

  return ret;
 800145c:	697b      	ldr	r3, [r7, #20]
}
 800145e:	4618      	mov	r0, r3
 8001460:	3718      	adds	r7, #24
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}

08001466 <iis3dwb_pin_int1_route_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_pin_int1_route_get(stmdev_ctx_t *ctx,
                                   iis3dwb_pin_int1_route_t *val)
{
 8001466:	b580      	push	{r7, lr}
 8001468:	b086      	sub	sp, #24
 800146a:	af00      	add	r7, sp, #0
 800146c:	6078      	str	r0, [r7, #4]
 800146e:	6039      	str	r1, [r7, #0]
  iis3dwb_int1_ctrl_t          int1_ctrl;
  iis3dwb_slope_en_t           slope_en;
  iis3dwb_md1_cfg_t            md1_cfg;
  int32_t ret;

  ret = iis3dwb_read_reg(ctx, IIS3DWB_INT1_CTRL, (uint8_t *)&int1_ctrl, 1);
 8001470:	f107 0210 	add.w	r2, r7, #16
 8001474:	2301      	movs	r3, #1
 8001476:	210d      	movs	r1, #13
 8001478:	6878      	ldr	r0, [r7, #4]
 800147a:	f7ff fde3 	bl	8001044 <iis3dwb_read_reg>
 800147e:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d107      	bne.n	8001496 <iis3dwb_pin_int1_route_get+0x30>
  {
    ret = iis3dwb_read_reg(ctx, IIS3DWB_MD1_CFG, (uint8_t *)&md1_cfg, 1);
 8001486:	f107 0208 	add.w	r2, r7, #8
 800148a:	2301      	movs	r3, #1
 800148c:	215e      	movs	r1, #94	; 0x5e
 800148e:	6878      	ldr	r0, [r7, #4]
 8001490:	f7ff fdd8 	bl	8001044 <iis3dwb_read_reg>
 8001494:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d107      	bne.n	80014ac <iis3dwb_pin_int1_route_get+0x46>
  {
    ret = iis3dwb_read_reg(ctx, IIS3DWB_SLOPE_EN, (uint8_t *)&slope_en, 1);
 800149c:	f107 020c 	add.w	r2, r7, #12
 80014a0:	2301      	movs	r3, #1
 80014a2:	2156      	movs	r1, #86	; 0x56
 80014a4:	6878      	ldr	r0, [r7, #4]
 80014a6:	f7ff fdcd 	bl	8001044 <iis3dwb_read_reg>
 80014aa:	6178      	str	r0, [r7, #20]
  }

  val->drdy_xl   = int1_ctrl.int1_drdy_xl;
 80014ac:	7c3b      	ldrb	r3, [r7, #16]
 80014ae:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80014b2:	b2d9      	uxtb	r1, r3
 80014b4:	683a      	ldr	r2, [r7, #0]
 80014b6:	7813      	ldrb	r3, [r2, #0]
 80014b8:	f361 0300 	bfi	r3, r1, #0, #1
 80014bc:	7013      	strb	r3, [r2, #0]
  val->boot      = int1_ctrl.int1_boot;
 80014be:	7c3b      	ldrb	r3, [r7, #16]
 80014c0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80014c4:	b2d9      	uxtb	r1, r3
 80014c6:	683a      	ldr	r2, [r7, #0]
 80014c8:	7813      	ldrb	r3, [r2, #0]
 80014ca:	f361 0341 	bfi	r3, r1, #1, #1
 80014ce:	7013      	strb	r3, [r2, #0]
  val->fifo_th   = int1_ctrl.int1_fifo_th;
 80014d0:	7c3b      	ldrb	r3, [r7, #16]
 80014d2:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80014d6:	b2d9      	uxtb	r1, r3
 80014d8:	683a      	ldr	r2, [r7, #0]
 80014da:	7813      	ldrb	r3, [r2, #0]
 80014dc:	f361 0382 	bfi	r3, r1, #2, #1
 80014e0:	7013      	strb	r3, [r2, #0]
  val->fifo_ovr  = int1_ctrl.int1_fifo_ovr;
 80014e2:	7c3b      	ldrb	r3, [r7, #16]
 80014e4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80014e8:	b2d9      	uxtb	r1, r3
 80014ea:	683a      	ldr	r2, [r7, #0]
 80014ec:	7813      	ldrb	r3, [r2, #0]
 80014ee:	f361 03c3 	bfi	r3, r1, #3, #1
 80014f2:	7013      	strb	r3, [r2, #0]
  val->fifo_full = int1_ctrl.int1_fifo_full;
 80014f4:	7c3b      	ldrb	r3, [r7, #16]
 80014f6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80014fa:	b2d9      	uxtb	r1, r3
 80014fc:	683a      	ldr	r2, [r7, #0]
 80014fe:	7813      	ldrb	r3, [r2, #0]
 8001500:	f361 1304 	bfi	r3, r1, #4, #1
 8001504:	7013      	strb	r3, [r2, #0]
  val->fifo_bdr  = int1_ctrl.int1_cnt_bdr;
 8001506:	7c3b      	ldrb	r3, [r7, #16]
 8001508:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800150c:	b2d9      	uxtb	r1, r3
 800150e:	683a      	ldr	r2, [r7, #0]
 8001510:	7813      	ldrb	r3, [r2, #0]
 8001512:	f361 1345 	bfi	r3, r1, #5, #1
 8001516:	7013      	strb	r3, [r2, #0]
  val->wake_up      = md1_cfg.int1_wu;
 8001518:	7a3b      	ldrb	r3, [r7, #8]
 800151a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800151e:	b2d9      	uxtb	r1, r3
 8001520:	683a      	ldr	r2, [r7, #0]
 8001522:	7813      	ldrb	r3, [r2, #0]
 8001524:	f361 1386 	bfi	r3, r1, #6, #1
 8001528:	7013      	strb	r3, [r2, #0]

  if (slope_en.sleep_status_on_int == PROPERTY_ENABLE)
 800152a:	7b3b      	ldrb	r3, [r7, #12]
 800152c:	f003 0320 	and.w	r3, r3, #32
 8001530:	b2db      	uxtb	r3, r3
 8001532:	2b00      	cmp	r3, #0
 8001534:	d00a      	beq.n	800154c <iis3dwb_pin_int1_route_get+0xe6>
  {
    val->sleep_status = PROPERTY_ENABLE;
 8001536:	683a      	ldr	r2, [r7, #0]
 8001538:	7853      	ldrb	r3, [r2, #1]
 800153a:	f043 0301 	orr.w	r3, r3, #1
 800153e:	7053      	strb	r3, [r2, #1]
    val->sleep_change = PROPERTY_DISABLE;
 8001540:	683a      	ldr	r2, [r7, #0]
 8001542:	7813      	ldrb	r3, [r2, #0]
 8001544:	f36f 13c7 	bfc	r3, #7, #1
 8001548:	7013      	strb	r3, [r2, #0]
 800154a:	e008      	b.n	800155e <iis3dwb_pin_int1_route_get+0xf8>
  }

  else
  {
    val->sleep_change = md1_cfg.int1_sleep_change;
 800154c:	7a3b      	ldrb	r3, [r7, #8]
 800154e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8001552:	b2d9      	uxtb	r1, r3
 8001554:	683a      	ldr	r2, [r7, #0]
 8001556:	7813      	ldrb	r3, [r2, #0]
 8001558:	f361 13c7 	bfi	r3, r1, #7, #1
 800155c:	7013      	strb	r3, [r2, #0]
  }

  return ret;
 800155e:	697b      	ldr	r3, [r7, #20]
}
 8001560:	4618      	mov	r0, r3
 8001562:	3718      	adds	r7, #24
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}

08001568 <iis3dwb_fifo_watermark_set>:
  * @param  val    Change the values of wtm in reg FIFO_CTRL1
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_fifo_watermark_set(stmdev_ctx_t *ctx, uint16_t val)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b086      	sub	sp, #24
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
 8001570:	460b      	mov	r3, r1
 8001572:	807b      	strh	r3, [r7, #2]
  iis3dwb_fifo_ctrl1_t fifo_ctrl1;
  iis3dwb_fifo_ctrl2_t fifo_ctrl2;
  int32_t ret;

  ret = iis3dwb_read_reg(ctx, IIS3DWB_FIFO_CTRL2,
 8001574:	f107 020c 	add.w	r2, r7, #12
 8001578:	2301      	movs	r3, #1
 800157a:	2108      	movs	r1, #8
 800157c:	6878      	ldr	r0, [r7, #4]
 800157e:	f7ff fd61 	bl	8001044 <iis3dwb_read_reg>
 8001582:	6178      	str	r0, [r7, #20]
                         (uint8_t *)&fifo_ctrl2, 1);

  if (ret == 0)
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d10a      	bne.n	80015a0 <iis3dwb_fifo_watermark_set+0x38>
  {
    fifo_ctrl1.wtm = (uint8_t)(0x00FFU & val);
 800158a:	887b      	ldrh	r3, [r7, #2]
 800158c:	b2db      	uxtb	r3, r3
 800158e:	743b      	strb	r3, [r7, #16]
    ret = iis3dwb_write_reg(ctx, IIS3DWB_FIFO_CTRL1,
 8001590:	f107 0210 	add.w	r2, r7, #16
 8001594:	2301      	movs	r3, #1
 8001596:	2107      	movs	r1, #7
 8001598:	6878      	ldr	r0, [r7, #4]
 800159a:	f7ff fd6b 	bl	8001074 <iis3dwb_write_reg>
 800159e:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&fifo_ctrl1, 1);
  }

  if (ret == 0)
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d111      	bne.n	80015ca <iis3dwb_fifo_watermark_set+0x62>
  {
    fifo_ctrl2.wtm = (uint8_t)((0x0100U & val) >> 8);
 80015a6:	887b      	ldrh	r3, [r7, #2]
 80015a8:	0a1b      	lsrs	r3, r3, #8
 80015aa:	b29b      	uxth	r3, r3
 80015ac:	f003 0301 	and.w	r3, r3, #1
 80015b0:	b2da      	uxtb	r2, r3
 80015b2:	7b3b      	ldrb	r3, [r7, #12]
 80015b4:	f362 0300 	bfi	r3, r2, #0, #1
 80015b8:	733b      	strb	r3, [r7, #12]
    ret = iis3dwb_write_reg(ctx, IIS3DWB_FIFO_CTRL2,
 80015ba:	f107 020c 	add.w	r2, r7, #12
 80015be:	2301      	movs	r3, #1
 80015c0:	2108      	movs	r1, #8
 80015c2:	6878      	ldr	r0, [r7, #4]
 80015c4:	f7ff fd56 	bl	8001074 <iis3dwb_write_reg>
 80015c8:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&fifo_ctrl2, 1);
  }

  return ret;
 80015ca:	697b      	ldr	r3, [r7, #20]
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	3718      	adds	r7, #24
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}

080015d4 <iis3dwb_fifo_xl_batch_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_fifo_xl_batch_set(stmdev_ctx_t *ctx,
                                  iis3dwb_bdr_xl_t val)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b084      	sub	sp, #16
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
 80015dc:	460b      	mov	r3, r1
 80015de:	70fb      	strb	r3, [r7, #3]
  iis3dwb_fifo_ctrl3_t fifo_ctrl3;
  int32_t ret;

  ret = iis3dwb_read_reg(ctx, IIS3DWB_FIFO_CTRL3,
 80015e0:	f107 0208 	add.w	r2, r7, #8
 80015e4:	2301      	movs	r3, #1
 80015e6:	2109      	movs	r1, #9
 80015e8:	6878      	ldr	r0, [r7, #4]
 80015ea:	f7ff fd2b 	bl	8001044 <iis3dwb_read_reg>
 80015ee:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&fifo_ctrl3, 1);

  if (ret == 0)
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d10f      	bne.n	8001616 <iis3dwb_fifo_xl_batch_set+0x42>
  {
    fifo_ctrl3.bdr_xl = (uint8_t)val;
 80015f6:	78fb      	ldrb	r3, [r7, #3]
 80015f8:	f003 030f 	and.w	r3, r3, #15
 80015fc:	b2da      	uxtb	r2, r3
 80015fe:	7a3b      	ldrb	r3, [r7, #8]
 8001600:	f362 0303 	bfi	r3, r2, #0, #4
 8001604:	723b      	strb	r3, [r7, #8]
    ret = iis3dwb_write_reg(ctx, IIS3DWB_FIFO_CTRL3,
 8001606:	f107 0208 	add.w	r2, r7, #8
 800160a:	2301      	movs	r3, #1
 800160c:	2109      	movs	r1, #9
 800160e:	6878      	ldr	r0, [r7, #4]
 8001610:	f7ff fd30 	bl	8001074 <iis3dwb_write_reg>
 8001614:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&fifo_ctrl3, 1);
  }

  return ret;
 8001616:	68fb      	ldr	r3, [r7, #12]
}
 8001618:	4618      	mov	r0, r3
 800161a:	3710      	adds	r7, #16
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}

08001620 <iis3dwb_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_fifo_mode_set(stmdev_ctx_t *ctx,
                              iis3dwb_fifo_mode_t val)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b084      	sub	sp, #16
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
 8001628:	460b      	mov	r3, r1
 800162a:	70fb      	strb	r3, [r7, #3]
  iis3dwb_fifo_ctrl4_t fifo_ctrl4;
  int32_t ret;

  ret = iis3dwb_read_reg(ctx, IIS3DWB_FIFO_CTRL4,
 800162c:	f107 0208 	add.w	r2, r7, #8
 8001630:	2301      	movs	r3, #1
 8001632:	210a      	movs	r1, #10
 8001634:	6878      	ldr	r0, [r7, #4]
 8001636:	f7ff fd05 	bl	8001044 <iis3dwb_read_reg>
 800163a:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&fifo_ctrl4, 1);

  if (ret == 0)
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d10f      	bne.n	8001662 <iis3dwb_fifo_mode_set+0x42>
  {
    fifo_ctrl4.fifo_mode = (uint8_t)val;
 8001642:	78fb      	ldrb	r3, [r7, #3]
 8001644:	f003 0307 	and.w	r3, r3, #7
 8001648:	b2da      	uxtb	r2, r3
 800164a:	7a3b      	ldrb	r3, [r7, #8]
 800164c:	f362 0302 	bfi	r3, r2, #0, #3
 8001650:	723b      	strb	r3, [r7, #8]
    ret = iis3dwb_write_reg(ctx, IIS3DWB_FIFO_CTRL4,
 8001652:	f107 0208 	add.w	r2, r7, #8
 8001656:	2301      	movs	r3, #1
 8001658:	210a      	movs	r1, #10
 800165a:	6878      	ldr	r0, [r7, #4]
 800165c:	f7ff fd0a 	bl	8001074 <iis3dwb_write_reg>
 8001660:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&fifo_ctrl4, 1);
  }

  return ret;
 8001662:	68fb      	ldr	r3, [r7, #12]
}
 8001664:	4618      	mov	r0, r3
 8001666:	3710      	adds	r7, #16
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}

0800166c <ism330dhcx_read_reg>:
  *
  */
int32_t ism330dhcx_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                            uint8_t *data,
                            uint16_t len)
{
 800166c:	b590      	push	{r4, r7, lr}
 800166e:	b087      	sub	sp, #28
 8001670:	af00      	add	r7, sp, #0
 8001672:	60f8      	str	r0, [r7, #12]
 8001674:	607a      	str	r2, [r7, #4]
 8001676:	461a      	mov	r2, r3
 8001678:	460b      	mov	r3, r1
 800167a:	72fb      	strb	r3, [r7, #11]
 800167c:	4613      	mov	r3, r2
 800167e:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	685c      	ldr	r4, [r3, #4]
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	6898      	ldr	r0, [r3, #8]
 8001688:	893b      	ldrh	r3, [r7, #8]
 800168a:	7af9      	ldrb	r1, [r7, #11]
 800168c:	687a      	ldr	r2, [r7, #4]
 800168e:	47a0      	blx	r4
 8001690:	6178      	str	r0, [r7, #20]

  return ret;
 8001692:	697b      	ldr	r3, [r7, #20]
}
 8001694:	4618      	mov	r0, r3
 8001696:	371c      	adds	r7, #28
 8001698:	46bd      	mov	sp, r7
 800169a:	bd90      	pop	{r4, r7, pc}

0800169c <ism330dhcx_write_reg>:
  *
  */
int32_t ism330dhcx_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                             uint8_t *data,
                             uint16_t len)
{
 800169c:	b590      	push	{r4, r7, lr}
 800169e:	b087      	sub	sp, #28
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	60f8      	str	r0, [r7, #12]
 80016a4:	607a      	str	r2, [r7, #4]
 80016a6:	461a      	mov	r2, r3
 80016a8:	460b      	mov	r3, r1
 80016aa:	72fb      	strb	r3, [r7, #11]
 80016ac:	4613      	mov	r3, r2
 80016ae:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	681c      	ldr	r4, [r3, #0]
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	6898      	ldr	r0, [r3, #8]
 80016b8:	893b      	ldrh	r3, [r7, #8]
 80016ba:	7af9      	ldrb	r1, [r7, #11]
 80016bc:	687a      	ldr	r2, [r7, #4]
 80016be:	47a0      	blx	r4
 80016c0:	6178      	str	r0, [r7, #20]

  return ret;
 80016c2:	697b      	ldr	r3, [r7, #20]
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	371c      	adds	r7, #28
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd90      	pop	{r4, r7, pc}

080016cc <ism330dhcx_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_xl_full_scale_set(stmdev_ctx_t *ctx,
                                     ism330dhcx_fs_xl_t val)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b084      	sub	sp, #16
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
 80016d4:	460b      	mov	r3, r1
 80016d6:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL1_XL,
 80016d8:	f107 0208 	add.w	r2, r7, #8
 80016dc:	2301      	movs	r3, #1
 80016de:	2110      	movs	r1, #16
 80016e0:	6878      	ldr	r0, [r7, #4]
 80016e2:	f7ff ffc3 	bl	800166c <ism330dhcx_read_reg>
 80016e6:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);

  if (ret == 0)
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d10f      	bne.n	800170e <ism330dhcx_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = (uint8_t)val;
 80016ee:	78fb      	ldrb	r3, [r7, #3]
 80016f0:	f003 0303 	and.w	r3, r3, #3
 80016f4:	b2da      	uxtb	r2, r3
 80016f6:	7a3b      	ldrb	r3, [r7, #8]
 80016f8:	f362 0383 	bfi	r3, r2, #2, #2
 80016fc:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL1_XL,
 80016fe:	f107 0208 	add.w	r2, r7, #8
 8001702:	2301      	movs	r3, #1
 8001704:	2110      	movs	r1, #16
 8001706:	6878      	ldr	r0, [r7, #4]
 8001708:	f7ff ffc8 	bl	800169c <ism330dhcx_write_reg>
 800170c:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 800170e:	68fb      	ldr	r3, [r7, #12]
}
 8001710:	4618      	mov	r0, r3
 8001712:	3710      	adds	r7, #16
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}

08001718 <ism330dhcx_xl_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_xl_full_scale_get(stmdev_ctx_t *ctx,
                                     ism330dhcx_fs_xl_t *val)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b084      	sub	sp, #16
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
 8001720:	6039      	str	r1, [r7, #0]
  ism330dhcx_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL1_XL,
 8001722:	f107 0208 	add.w	r2, r7, #8
 8001726:	2301      	movs	r3, #1
 8001728:	2110      	movs	r1, #16
 800172a:	6878      	ldr	r0, [r7, #4]
 800172c:	f7ff ff9e 	bl	800166c <ism330dhcx_read_reg>
 8001730:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);

  switch (ctrl1_xl.fs_xl)
 8001732:	7a3b      	ldrb	r3, [r7, #8]
 8001734:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8001738:	b2db      	uxtb	r3, r3
 800173a:	2b03      	cmp	r3, #3
 800173c:	d81a      	bhi.n	8001774 <ism330dhcx_xl_full_scale_get+0x5c>
 800173e:	a201      	add	r2, pc, #4	; (adr r2, 8001744 <ism330dhcx_xl_full_scale_get+0x2c>)
 8001740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001744:	08001755 	.word	0x08001755
 8001748:	0800175d 	.word	0x0800175d
 800174c:	08001765 	.word	0x08001765
 8001750:	0800176d 	.word	0x0800176d
  {
    case ISM330DHCX_2g:
      *val = ISM330DHCX_2g;
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	2200      	movs	r2, #0
 8001758:	701a      	strb	r2, [r3, #0]
      break;
 800175a:	e00f      	b.n	800177c <ism330dhcx_xl_full_scale_get+0x64>

    case ISM330DHCX_16g:
      *val = ISM330DHCX_16g;
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	2201      	movs	r2, #1
 8001760:	701a      	strb	r2, [r3, #0]
      break;
 8001762:	e00b      	b.n	800177c <ism330dhcx_xl_full_scale_get+0x64>

    case ISM330DHCX_4g:
      *val = ISM330DHCX_4g;
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	2202      	movs	r2, #2
 8001768:	701a      	strb	r2, [r3, #0]
      break;
 800176a:	e007      	b.n	800177c <ism330dhcx_xl_full_scale_get+0x64>

    case ISM330DHCX_8g:
      *val = ISM330DHCX_8g;
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	2203      	movs	r2, #3
 8001770:	701a      	strb	r2, [r3, #0]
      break;
 8001772:	e003      	b.n	800177c <ism330dhcx_xl_full_scale_get+0x64>

    default:
      *val = ISM330DHCX_2g;
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	2200      	movs	r2, #0
 8001778:	701a      	strb	r2, [r3, #0]
      break;
 800177a:	bf00      	nop
  }

  return ret;
 800177c:	68fb      	ldr	r3, [r7, #12]
}
 800177e:	4618      	mov	r0, r3
 8001780:	3710      	adds	r7, #16
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop

08001788 <ism330dhcx_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_xl_data_rate_set(stmdev_ctx_t *ctx,
                                    ism330dhcx_odr_xl_t val)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b086      	sub	sp, #24
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
 8001790:	460b      	mov	r3, r1
 8001792:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_odr_xl_t odr_xl =  val;
 8001794:	78fb      	ldrb	r3, [r7, #3]
 8001796:	75fb      	strb	r3, [r7, #23]
  uint8_t mlc_enable;
  ism330dhcx_mlc_odr_t mlc_odr;
  ism330dhcx_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  /* Check the Finite State Machine data rate constraints */
  ret =  ism330dhcx_fsm_enable_get(ctx, &fsm_enable);
 8001798:	f107 030c 	add.w	r3, r7, #12
 800179c:	4619      	mov	r1, r3
 800179e:	6878      	ldr	r0, [r7, #4]
 80017a0:	f001 f95a 	bl	8002a58 <ism330dhcx_fsm_enable_get>
 80017a4:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	f040 80c4 	bne.w	8001936 <ism330dhcx_xl_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80017ae:	7b3b      	ldrb	r3, [r7, #12]
 80017b0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80017b4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 80017b6:	7b3b      	ldrb	r3, [r7, #12]
 80017b8:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80017bc:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80017be:	4313      	orrs	r3, r2
 80017c0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 80017c2:	7b3b      	ldrb	r3, [r7, #12]
 80017c4:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80017c8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 80017ca:	4313      	orrs	r3, r2
 80017cc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 80017ce:	7b3b      	ldrb	r3, [r7, #12]
 80017d0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80017d4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 80017d6:	4313      	orrs	r3, r2
 80017d8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 80017da:	7b3b      	ldrb	r3, [r7, #12]
 80017dc:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80017e0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 80017e2:	4313      	orrs	r3, r2
 80017e4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 80017e6:	7b3b      	ldrb	r3, [r7, #12]
 80017e8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80017ec:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 80017ee:	4313      	orrs	r3, r2
 80017f0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 80017f2:	7b3b      	ldrb	r3, [r7, #12]
 80017f4:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80017f8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 80017fa:	4313      	orrs	r3, r2
 80017fc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 80017fe:	7b3b      	ldrb	r3, [r7, #12]
 8001800:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8001804:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8001806:	4313      	orrs	r3, r2
 8001808:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 800180a:	7b7b      	ldrb	r3, [r7, #13]
 800180c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001810:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8001812:	4313      	orrs	r3, r2
 8001814:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8001816:	7b7b      	ldrb	r3, [r7, #13]
 8001818:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800181c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 800181e:	4313      	orrs	r3, r2
 8001820:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8001822:	7b7b      	ldrb	r3, [r7, #13]
 8001824:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001828:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 800182a:	4313      	orrs	r3, r2
 800182c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 800182e:	7b7b      	ldrb	r3, [r7, #13]
 8001830:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001834:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8001836:	4313      	orrs	r3, r2
 8001838:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 800183a:	7b7b      	ldrb	r3, [r7, #13]
 800183c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001840:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8001842:	4313      	orrs	r3, r2
 8001844:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8001846:	7b7b      	ldrb	r3, [r7, #13]
 8001848:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800184c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 800184e:	4313      	orrs	r3, r2
 8001850:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8001852:	7b7b      	ldrb	r3, [r7, #13]
 8001854:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8001858:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 800185a:	4313      	orrs	r3, r2
 800185c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 800185e:	7b7b      	ldrb	r3, [r7, #13]
 8001860:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8001864:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8001866:	4313      	orrs	r3, r2
 8001868:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800186a:	2b01      	cmp	r3, #1
 800186c:	d163      	bne.n	8001936 <ism330dhcx_xl_data_rate_set+0x1ae>
    {
      ret =  ism330dhcx_fsm_data_rate_get(ctx, &fsm_odr);
 800186e:	f107 030b 	add.w	r3, r7, #11
 8001872:	4619      	mov	r1, r3
 8001874:	6878      	ldr	r0, [r7, #4]
 8001876:	f001 f91b 	bl	8002ab0 <ism330dhcx_fsm_data_rate_get>
 800187a:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 800187c:	693b      	ldr	r3, [r7, #16]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d159      	bne.n	8001936 <ism330dhcx_xl_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 8001882:	7afb      	ldrb	r3, [r7, #11]
 8001884:	2b03      	cmp	r3, #3
 8001886:	d853      	bhi.n	8001930 <ism330dhcx_xl_data_rate_set+0x1a8>
 8001888:	a201      	add	r2, pc, #4	; (adr r2, 8001890 <ism330dhcx_xl_data_rate_set+0x108>)
 800188a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800188e:	bf00      	nop
 8001890:	080018a1 	.word	0x080018a1
 8001894:	080018b3 	.word	0x080018b3
 8001898:	080018d1 	.word	0x080018d1
 800189c:	080018fb 	.word	0x080018fb
        {
          case ISM330DHCX_ODR_FSM_12Hz5:
            if (val == ISM330DHCX_XL_ODR_OFF)
 80018a0:	78fb      	ldrb	r3, [r7, #3]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d102      	bne.n	80018ac <ism330dhcx_xl_data_rate_set+0x124>
            {
              odr_xl = ISM330DHCX_XL_ODR_12Hz5;
 80018a6:	2301      	movs	r3, #1
 80018a8:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 80018aa:	e045      	b.n	8001938 <ism330dhcx_xl_data_rate_set+0x1b0>
              odr_xl = val;
 80018ac:	78fb      	ldrb	r3, [r7, #3]
 80018ae:	75fb      	strb	r3, [r7, #23]
            break;
 80018b0:	e042      	b.n	8001938 <ism330dhcx_xl_data_rate_set+0x1b0>

          case ISM330DHCX_ODR_FSM_26Hz:
            if (val == ISM330DHCX_XL_ODR_OFF)
 80018b2:	78fb      	ldrb	r3, [r7, #3]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d102      	bne.n	80018be <ism330dhcx_xl_data_rate_set+0x136>
            {
              odr_xl = ISM330DHCX_XL_ODR_26Hz;
 80018b8:	2302      	movs	r3, #2
 80018ba:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 80018bc:	e03c      	b.n	8001938 <ism330dhcx_xl_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_XL_ODR_12Hz5)
 80018be:	78fb      	ldrb	r3, [r7, #3]
 80018c0:	2b01      	cmp	r3, #1
 80018c2:	d102      	bne.n	80018ca <ism330dhcx_xl_data_rate_set+0x142>
              odr_xl = ISM330DHCX_XL_ODR_26Hz;
 80018c4:	2302      	movs	r3, #2
 80018c6:	75fb      	strb	r3, [r7, #23]
            break;
 80018c8:	e036      	b.n	8001938 <ism330dhcx_xl_data_rate_set+0x1b0>
              odr_xl = val;
 80018ca:	78fb      	ldrb	r3, [r7, #3]
 80018cc:	75fb      	strb	r3, [r7, #23]
            break;
 80018ce:	e033      	b.n	8001938 <ism330dhcx_xl_data_rate_set+0x1b0>

          case ISM330DHCX_ODR_FSM_52Hz:
            if (val == ISM330DHCX_XL_ODR_OFF)
 80018d0:	78fb      	ldrb	r3, [r7, #3]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d102      	bne.n	80018dc <ism330dhcx_xl_data_rate_set+0x154>
            {
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 80018d6:	2303      	movs	r3, #3
 80018d8:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 80018da:	e02d      	b.n	8001938 <ism330dhcx_xl_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_XL_ODR_12Hz5)
 80018dc:	78fb      	ldrb	r3, [r7, #3]
 80018de:	2b01      	cmp	r3, #1
 80018e0:	d102      	bne.n	80018e8 <ism330dhcx_xl_data_rate_set+0x160>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 80018e2:	2303      	movs	r3, #3
 80018e4:	75fb      	strb	r3, [r7, #23]
            break;
 80018e6:	e027      	b.n	8001938 <ism330dhcx_xl_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_XL_ODR_26Hz)
 80018e8:	78fb      	ldrb	r3, [r7, #3]
 80018ea:	2b02      	cmp	r3, #2
 80018ec:	d102      	bne.n	80018f4 <ism330dhcx_xl_data_rate_set+0x16c>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 80018ee:	2303      	movs	r3, #3
 80018f0:	75fb      	strb	r3, [r7, #23]
            break;
 80018f2:	e021      	b.n	8001938 <ism330dhcx_xl_data_rate_set+0x1b0>
              odr_xl = val;
 80018f4:	78fb      	ldrb	r3, [r7, #3]
 80018f6:	75fb      	strb	r3, [r7, #23]
            break;
 80018f8:	e01e      	b.n	8001938 <ism330dhcx_xl_data_rate_set+0x1b0>

          case ISM330DHCX_ODR_FSM_104Hz:
            if (val == ISM330DHCX_XL_ODR_OFF)
 80018fa:	78fb      	ldrb	r3, [r7, #3]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d102      	bne.n	8001906 <ism330dhcx_xl_data_rate_set+0x17e>
            {
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8001900:	2304      	movs	r3, #4
 8001902:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8001904:	e018      	b.n	8001938 <ism330dhcx_xl_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_XL_ODR_12Hz5)
 8001906:	78fb      	ldrb	r3, [r7, #3]
 8001908:	2b01      	cmp	r3, #1
 800190a:	d102      	bne.n	8001912 <ism330dhcx_xl_data_rate_set+0x18a>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 800190c:	2304      	movs	r3, #4
 800190e:	75fb      	strb	r3, [r7, #23]
            break;
 8001910:	e012      	b.n	8001938 <ism330dhcx_xl_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_XL_ODR_26Hz)
 8001912:	78fb      	ldrb	r3, [r7, #3]
 8001914:	2b02      	cmp	r3, #2
 8001916:	d102      	bne.n	800191e <ism330dhcx_xl_data_rate_set+0x196>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8001918:	2304      	movs	r3, #4
 800191a:	75fb      	strb	r3, [r7, #23]
            break;
 800191c:	e00c      	b.n	8001938 <ism330dhcx_xl_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_XL_ODR_52Hz)
 800191e:	78fb      	ldrb	r3, [r7, #3]
 8001920:	2b03      	cmp	r3, #3
 8001922:	d102      	bne.n	800192a <ism330dhcx_xl_data_rate_set+0x1a2>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8001924:	2304      	movs	r3, #4
 8001926:	75fb      	strb	r3, [r7, #23]
            break;
 8001928:	e006      	b.n	8001938 <ism330dhcx_xl_data_rate_set+0x1b0>
              odr_xl = val;
 800192a:	78fb      	ldrb	r3, [r7, #3]
 800192c:	75fb      	strb	r3, [r7, #23]
            break;
 800192e:	e003      	b.n	8001938 <ism330dhcx_xl_data_rate_set+0x1b0>

          default:
            odr_xl = val;
 8001930:	78fb      	ldrb	r3, [r7, #3]
 8001932:	75fb      	strb	r3, [r7, #23]
            break;
 8001934:	e000      	b.n	8001938 <ism330dhcx_xl_data_rate_set+0x1b0>
        }
      }
 8001936:	bf00      	nop
    }
  }

  /* Check the Machine Learning Core data rate constraints */
  mlc_enable = PROPERTY_DISABLE;
 8001938:	2300      	movs	r3, #0
 800193a:	72bb      	strb	r3, [r7, #10]

  if (ret == 0)
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d16d      	bne.n	8001a1e <ism330dhcx_xl_data_rate_set+0x296>
  {
    ret =  ism330dhcx_mlc_get(ctx, &mlc_enable);
 8001942:	f107 030a 	add.w	r3, r7, #10
 8001946:	4619      	mov	r1, r3
 8001948:	6878      	ldr	r0, [r7, #4]
 800194a:	f001 f8f9 	bl	8002b40 <ism330dhcx_mlc_get>
 800194e:	6138      	str	r0, [r7, #16]

    if (mlc_enable == PROPERTY_ENABLE)
 8001950:	7abb      	ldrb	r3, [r7, #10]
 8001952:	2b01      	cmp	r3, #1
 8001954:	d163      	bne.n	8001a1e <ism330dhcx_xl_data_rate_set+0x296>
    {
      ret =  ism330dhcx_mlc_data_rate_get(ctx, &mlc_odr);
 8001956:	f107 0309 	add.w	r3, r7, #9
 800195a:	4619      	mov	r1, r3
 800195c:	6878      	ldr	r0, [r7, #4]
 800195e:	f001 f929 	bl	8002bb4 <ism330dhcx_mlc_data_rate_get>
 8001962:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d159      	bne.n	8001a1e <ism330dhcx_xl_data_rate_set+0x296>
      {
        switch (mlc_odr)
 800196a:	7a7b      	ldrb	r3, [r7, #9]
 800196c:	2b03      	cmp	r3, #3
 800196e:	d853      	bhi.n	8001a18 <ism330dhcx_xl_data_rate_set+0x290>
 8001970:	a201      	add	r2, pc, #4	; (adr r2, 8001978 <ism330dhcx_xl_data_rate_set+0x1f0>)
 8001972:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001976:	bf00      	nop
 8001978:	08001989 	.word	0x08001989
 800197c:	0800199b 	.word	0x0800199b
 8001980:	080019b9 	.word	0x080019b9
 8001984:	080019e3 	.word	0x080019e3
        {
          case ISM330DHCX_ODR_PRGS_12Hz5:
            if (val == ISM330DHCX_XL_ODR_OFF)
 8001988:	78fb      	ldrb	r3, [r7, #3]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d102      	bne.n	8001994 <ism330dhcx_xl_data_rate_set+0x20c>
            {
              odr_xl = ISM330DHCX_XL_ODR_12Hz5;
 800198e:	2301      	movs	r3, #1
 8001990:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8001992:	e045      	b.n	8001a20 <ism330dhcx_xl_data_rate_set+0x298>
              odr_xl = val;
 8001994:	78fb      	ldrb	r3, [r7, #3]
 8001996:	75fb      	strb	r3, [r7, #23]
            break;
 8001998:	e042      	b.n	8001a20 <ism330dhcx_xl_data_rate_set+0x298>

          case ISM330DHCX_ODR_PRGS_26Hz:
            if (val == ISM330DHCX_XL_ODR_OFF)
 800199a:	78fb      	ldrb	r3, [r7, #3]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d102      	bne.n	80019a6 <ism330dhcx_xl_data_rate_set+0x21e>
            {
              odr_xl = ISM330DHCX_XL_ODR_26Hz;
 80019a0:	2302      	movs	r3, #2
 80019a2:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 80019a4:	e03c      	b.n	8001a20 <ism330dhcx_xl_data_rate_set+0x298>
            else if (val == ISM330DHCX_XL_ODR_12Hz5)
 80019a6:	78fb      	ldrb	r3, [r7, #3]
 80019a8:	2b01      	cmp	r3, #1
 80019aa:	d102      	bne.n	80019b2 <ism330dhcx_xl_data_rate_set+0x22a>
              odr_xl = ISM330DHCX_XL_ODR_26Hz;
 80019ac:	2302      	movs	r3, #2
 80019ae:	75fb      	strb	r3, [r7, #23]
            break;
 80019b0:	e036      	b.n	8001a20 <ism330dhcx_xl_data_rate_set+0x298>
              odr_xl = val;
 80019b2:	78fb      	ldrb	r3, [r7, #3]
 80019b4:	75fb      	strb	r3, [r7, #23]
            break;
 80019b6:	e033      	b.n	8001a20 <ism330dhcx_xl_data_rate_set+0x298>

          case ISM330DHCX_ODR_PRGS_52Hz:
            if (val == ISM330DHCX_XL_ODR_OFF)
 80019b8:	78fb      	ldrb	r3, [r7, #3]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d102      	bne.n	80019c4 <ism330dhcx_xl_data_rate_set+0x23c>
            {
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 80019be:	2303      	movs	r3, #3
 80019c0:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 80019c2:	e02d      	b.n	8001a20 <ism330dhcx_xl_data_rate_set+0x298>
            else if (val == ISM330DHCX_XL_ODR_12Hz5)
 80019c4:	78fb      	ldrb	r3, [r7, #3]
 80019c6:	2b01      	cmp	r3, #1
 80019c8:	d102      	bne.n	80019d0 <ism330dhcx_xl_data_rate_set+0x248>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 80019ca:	2303      	movs	r3, #3
 80019cc:	75fb      	strb	r3, [r7, #23]
            break;
 80019ce:	e027      	b.n	8001a20 <ism330dhcx_xl_data_rate_set+0x298>
            else if (val == ISM330DHCX_XL_ODR_26Hz)
 80019d0:	78fb      	ldrb	r3, [r7, #3]
 80019d2:	2b02      	cmp	r3, #2
 80019d4:	d102      	bne.n	80019dc <ism330dhcx_xl_data_rate_set+0x254>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 80019d6:	2303      	movs	r3, #3
 80019d8:	75fb      	strb	r3, [r7, #23]
            break;
 80019da:	e021      	b.n	8001a20 <ism330dhcx_xl_data_rate_set+0x298>
              odr_xl = val;
 80019dc:	78fb      	ldrb	r3, [r7, #3]
 80019de:	75fb      	strb	r3, [r7, #23]
            break;
 80019e0:	e01e      	b.n	8001a20 <ism330dhcx_xl_data_rate_set+0x298>

          case ISM330DHCX_ODR_PRGS_104Hz:
            if (val == ISM330DHCX_XL_ODR_OFF)
 80019e2:	78fb      	ldrb	r3, [r7, #3]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d102      	bne.n	80019ee <ism330dhcx_xl_data_rate_set+0x266>
            {
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 80019e8:	2304      	movs	r3, #4
 80019ea:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 80019ec:	e018      	b.n	8001a20 <ism330dhcx_xl_data_rate_set+0x298>
            else if (val == ISM330DHCX_XL_ODR_12Hz5)
 80019ee:	78fb      	ldrb	r3, [r7, #3]
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d102      	bne.n	80019fa <ism330dhcx_xl_data_rate_set+0x272>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 80019f4:	2304      	movs	r3, #4
 80019f6:	75fb      	strb	r3, [r7, #23]
            break;
 80019f8:	e012      	b.n	8001a20 <ism330dhcx_xl_data_rate_set+0x298>
            else if (val == ISM330DHCX_XL_ODR_26Hz)
 80019fa:	78fb      	ldrb	r3, [r7, #3]
 80019fc:	2b02      	cmp	r3, #2
 80019fe:	d102      	bne.n	8001a06 <ism330dhcx_xl_data_rate_set+0x27e>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8001a00:	2304      	movs	r3, #4
 8001a02:	75fb      	strb	r3, [r7, #23]
            break;
 8001a04:	e00c      	b.n	8001a20 <ism330dhcx_xl_data_rate_set+0x298>
            else if (val == ISM330DHCX_XL_ODR_52Hz)
 8001a06:	78fb      	ldrb	r3, [r7, #3]
 8001a08:	2b03      	cmp	r3, #3
 8001a0a:	d102      	bne.n	8001a12 <ism330dhcx_xl_data_rate_set+0x28a>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8001a0c:	2304      	movs	r3, #4
 8001a0e:	75fb      	strb	r3, [r7, #23]
            break;
 8001a10:	e006      	b.n	8001a20 <ism330dhcx_xl_data_rate_set+0x298>
              odr_xl = val;
 8001a12:	78fb      	ldrb	r3, [r7, #3]
 8001a14:	75fb      	strb	r3, [r7, #23]
            break;
 8001a16:	e003      	b.n	8001a20 <ism330dhcx_xl_data_rate_set+0x298>

          default:
            odr_xl = val;
 8001a18:	78fb      	ldrb	r3, [r7, #3]
 8001a1a:	75fb      	strb	r3, [r7, #23]
            break;
 8001a1c:	e000      	b.n	8001a20 <ism330dhcx_xl_data_rate_set+0x298>
        }
      }
 8001a1e:	bf00      	nop
    }
  }

  if (ret == 0)
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d107      	bne.n	8001a36 <ism330dhcx_xl_data_rate_set+0x2ae>
  {
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL1_XL,
 8001a26:	f107 0208 	add.w	r2, r7, #8
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	2110      	movs	r1, #16
 8001a2e:	6878      	ldr	r0, [r7, #4]
 8001a30:	f7ff fe1c 	bl	800166c <ism330dhcx_read_reg>
 8001a34:	6138      	str	r0, [r7, #16]
                              (uint8_t *)&ctrl1_xl, 1);
  }

  if (ret == 0)
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d10f      	bne.n	8001a5c <ism330dhcx_xl_data_rate_set+0x2d4>
  {
    ctrl1_xl.odr_xl = (uint8_t)odr_xl;
 8001a3c:	7dfb      	ldrb	r3, [r7, #23]
 8001a3e:	f003 030f 	and.w	r3, r3, #15
 8001a42:	b2da      	uxtb	r2, r3
 8001a44:	7a3b      	ldrb	r3, [r7, #8]
 8001a46:	f362 1307 	bfi	r3, r2, #4, #4
 8001a4a:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL1_XL,
 8001a4c:	f107 0208 	add.w	r2, r7, #8
 8001a50:	2301      	movs	r3, #1
 8001a52:	2110      	movs	r1, #16
 8001a54:	6878      	ldr	r0, [r7, #4]
 8001a56:	f7ff fe21 	bl	800169c <ism330dhcx_write_reg>
 8001a5a:	6138      	str	r0, [r7, #16]
                               (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 8001a5c:	693b      	ldr	r3, [r7, #16]
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	3718      	adds	r7, #24
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop

08001a68 <ism330dhcx_xl_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_xl_data_rate_get(stmdev_ctx_t *ctx,
                                    ism330dhcx_odr_xl_t *val)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b084      	sub	sp, #16
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
 8001a70:	6039      	str	r1, [r7, #0]
  ism330dhcx_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL1_XL,
 8001a72:	f107 0208 	add.w	r2, r7, #8
 8001a76:	2301      	movs	r3, #1
 8001a78:	2110      	movs	r1, #16
 8001a7a:	6878      	ldr	r0, [r7, #4]
 8001a7c:	f7ff fdf6 	bl	800166c <ism330dhcx_read_reg>
 8001a80:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);

  switch (ctrl1_xl.odr_xl)
 8001a82:	7a3b      	ldrb	r3, [r7, #8]
 8001a84:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	2b0b      	cmp	r3, #11
 8001a8c:	d84a      	bhi.n	8001b24 <ism330dhcx_xl_data_rate_get+0xbc>
 8001a8e:	a201      	add	r2, pc, #4	; (adr r2, 8001a94 <ism330dhcx_xl_data_rate_get+0x2c>)
 8001a90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a94:	08001ac5 	.word	0x08001ac5
 8001a98:	08001acd 	.word	0x08001acd
 8001a9c:	08001ad5 	.word	0x08001ad5
 8001aa0:	08001add 	.word	0x08001add
 8001aa4:	08001ae5 	.word	0x08001ae5
 8001aa8:	08001aed 	.word	0x08001aed
 8001aac:	08001af5 	.word	0x08001af5
 8001ab0:	08001afd 	.word	0x08001afd
 8001ab4:	08001b05 	.word	0x08001b05
 8001ab8:	08001b0d 	.word	0x08001b0d
 8001abc:	08001b15 	.word	0x08001b15
 8001ac0:	08001b1d 	.word	0x08001b1d
  {
    case ISM330DHCX_XL_ODR_OFF:
      *val = ISM330DHCX_XL_ODR_OFF;
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	701a      	strb	r2, [r3, #0]
      break;
 8001aca:	e02f      	b.n	8001b2c <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_12Hz5:
      *val = ISM330DHCX_XL_ODR_12Hz5;
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	2201      	movs	r2, #1
 8001ad0:	701a      	strb	r2, [r3, #0]
      break;
 8001ad2:	e02b      	b.n	8001b2c <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_26Hz:
      *val = ISM330DHCX_XL_ODR_26Hz;
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	2202      	movs	r2, #2
 8001ad8:	701a      	strb	r2, [r3, #0]
      break;
 8001ada:	e027      	b.n	8001b2c <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_52Hz:
      *val = ISM330DHCX_XL_ODR_52Hz;
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	2203      	movs	r2, #3
 8001ae0:	701a      	strb	r2, [r3, #0]
      break;
 8001ae2:	e023      	b.n	8001b2c <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_104Hz:
      *val = ISM330DHCX_XL_ODR_104Hz;
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	2204      	movs	r2, #4
 8001ae8:	701a      	strb	r2, [r3, #0]
      break;
 8001aea:	e01f      	b.n	8001b2c <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_208Hz:
      *val = ISM330DHCX_XL_ODR_208Hz;
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	2205      	movs	r2, #5
 8001af0:	701a      	strb	r2, [r3, #0]
      break;
 8001af2:	e01b      	b.n	8001b2c <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_416Hz:
      *val = ISM330DHCX_XL_ODR_416Hz;
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	2206      	movs	r2, #6
 8001af8:	701a      	strb	r2, [r3, #0]
      break;
 8001afa:	e017      	b.n	8001b2c <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_833Hz:
      *val = ISM330DHCX_XL_ODR_833Hz;
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	2207      	movs	r2, #7
 8001b00:	701a      	strb	r2, [r3, #0]
      break;
 8001b02:	e013      	b.n	8001b2c <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_1666Hz:
      *val = ISM330DHCX_XL_ODR_1666Hz;
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	2208      	movs	r2, #8
 8001b08:	701a      	strb	r2, [r3, #0]
      break;
 8001b0a:	e00f      	b.n	8001b2c <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_3332Hz:
      *val = ISM330DHCX_XL_ODR_3332Hz;
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	2209      	movs	r2, #9
 8001b10:	701a      	strb	r2, [r3, #0]
      break;
 8001b12:	e00b      	b.n	8001b2c <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_6667Hz:
      *val = ISM330DHCX_XL_ODR_6667Hz;
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	220a      	movs	r2, #10
 8001b18:	701a      	strb	r2, [r3, #0]
      break;
 8001b1a:	e007      	b.n	8001b2c <ism330dhcx_xl_data_rate_get+0xc4>

    case ISM330DHCX_XL_ODR_1Hz6:
      *val = ISM330DHCX_XL_ODR_1Hz6;
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	220b      	movs	r2, #11
 8001b20:	701a      	strb	r2, [r3, #0]
      break;
 8001b22:	e003      	b.n	8001b2c <ism330dhcx_xl_data_rate_get+0xc4>

    default:
      *val = ISM330DHCX_XL_ODR_OFF;
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	2200      	movs	r2, #0
 8001b28:	701a      	strb	r2, [r3, #0]
      break;
 8001b2a:	bf00      	nop
  }

  return ret;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3710      	adds	r7, #16
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop

08001b38 <ism330dhcx_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_gy_full_scale_set(stmdev_ctx_t *ctx,
                                     ism330dhcx_fs_g_t val)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b084      	sub	sp, #16
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
 8001b40:	460b      	mov	r3, r1
 8001b42:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL2_G,
 8001b44:	f107 0208 	add.w	r2, r7, #8
 8001b48:	2301      	movs	r3, #1
 8001b4a:	2111      	movs	r1, #17
 8001b4c:	6878      	ldr	r0, [r7, #4]
 8001b4e:	f7ff fd8d 	bl	800166c <ism330dhcx_read_reg>
 8001b52:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl2_g, 1);

  if (ret == 0)
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d10f      	bne.n	8001b7a <ism330dhcx_gy_full_scale_set+0x42>
  {
    ctrl2_g.fs_g = (uint8_t)val;
 8001b5a:	78fb      	ldrb	r3, [r7, #3]
 8001b5c:	f003 030f 	and.w	r3, r3, #15
 8001b60:	b2da      	uxtb	r2, r3
 8001b62:	7a3b      	ldrb	r3, [r7, #8]
 8001b64:	f362 0303 	bfi	r3, r2, #0, #4
 8001b68:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL2_G,
 8001b6a:	f107 0208 	add.w	r2, r7, #8
 8001b6e:	2301      	movs	r3, #1
 8001b70:	2111      	movs	r1, #17
 8001b72:	6878      	ldr	r0, [r7, #4]
 8001b74:	f7ff fd92 	bl	800169c <ism330dhcx_write_reg>
 8001b78:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl2_g, 1);
  }

  return ret;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3710      	adds	r7, #16
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}

08001b84 <ism330dhcx_gy_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_gy_full_scale_get(stmdev_ctx_t *ctx,
                                     ism330dhcx_fs_g_t *val)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b084      	sub	sp, #16
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
 8001b8c:	6039      	str	r1, [r7, #0]
  ism330dhcx_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL2_G,
 8001b8e:	f107 0208 	add.w	r2, r7, #8
 8001b92:	2301      	movs	r3, #1
 8001b94:	2111      	movs	r1, #17
 8001b96:	6878      	ldr	r0, [r7, #4]
 8001b98:	f7ff fd68 	bl	800166c <ism330dhcx_read_reg>
 8001b9c:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl2_g, 1);

  switch (ctrl2_g.fs_g)
 8001b9e:	7a3b      	ldrb	r3, [r7, #8]
 8001ba0:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	2b0c      	cmp	r3, #12
 8001ba8:	d834      	bhi.n	8001c14 <ism330dhcx_gy_full_scale_get+0x90>
 8001baa:	a201      	add	r2, pc, #4	; (adr r2, 8001bb0 <ism330dhcx_gy_full_scale_get+0x2c>)
 8001bac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bb0:	08001bed 	.word	0x08001bed
 8001bb4:	08001c0d 	.word	0x08001c0d
 8001bb8:	08001be5 	.word	0x08001be5
 8001bbc:	08001c15 	.word	0x08001c15
 8001bc0:	08001bf5 	.word	0x08001bf5
 8001bc4:	08001c15 	.word	0x08001c15
 8001bc8:	08001c15 	.word	0x08001c15
 8001bcc:	08001c15 	.word	0x08001c15
 8001bd0:	08001bfd 	.word	0x08001bfd
 8001bd4:	08001c15 	.word	0x08001c15
 8001bd8:	08001c15 	.word	0x08001c15
 8001bdc:	08001c15 	.word	0x08001c15
 8001be0:	08001c05 	.word	0x08001c05
  {
    case ISM330DHCX_125dps:
      *val = ISM330DHCX_125dps;
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	2202      	movs	r2, #2
 8001be8:	701a      	strb	r2, [r3, #0]
      break;
 8001bea:	e017      	b.n	8001c1c <ism330dhcx_gy_full_scale_get+0x98>

    case ISM330DHCX_250dps:
      *val = ISM330DHCX_250dps;
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	2200      	movs	r2, #0
 8001bf0:	701a      	strb	r2, [r3, #0]
      break;
 8001bf2:	e013      	b.n	8001c1c <ism330dhcx_gy_full_scale_get+0x98>

    case ISM330DHCX_500dps:
      *val = ISM330DHCX_500dps;
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	2204      	movs	r2, #4
 8001bf8:	701a      	strb	r2, [r3, #0]
      break;
 8001bfa:	e00f      	b.n	8001c1c <ism330dhcx_gy_full_scale_get+0x98>

    case ISM330DHCX_1000dps:
      *val = ISM330DHCX_1000dps;
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	2208      	movs	r2, #8
 8001c00:	701a      	strb	r2, [r3, #0]
      break;
 8001c02:	e00b      	b.n	8001c1c <ism330dhcx_gy_full_scale_get+0x98>

    case ISM330DHCX_2000dps:
      *val = ISM330DHCX_2000dps;
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	220c      	movs	r2, #12
 8001c08:	701a      	strb	r2, [r3, #0]
      break;
 8001c0a:	e007      	b.n	8001c1c <ism330dhcx_gy_full_scale_get+0x98>

    case ISM330DHCX_4000dps:
      *val = ISM330DHCX_4000dps;
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	2201      	movs	r2, #1
 8001c10:	701a      	strb	r2, [r3, #0]
      break;
 8001c12:	e003      	b.n	8001c1c <ism330dhcx_gy_full_scale_get+0x98>

    default:
      *val = ISM330DHCX_125dps;
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	2202      	movs	r2, #2
 8001c18:	701a      	strb	r2, [r3, #0]
      break;
 8001c1a:	bf00      	nop
  }

  return ret;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3710      	adds	r7, #16
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop

08001c28 <ism330dhcx_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_gy_data_rate_set(stmdev_ctx_t *ctx,
                                    ism330dhcx_odr_g_t val)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b086      	sub	sp, #24
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
 8001c30:	460b      	mov	r3, r1
 8001c32:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_odr_g_t odr_gy =  val;
 8001c34:	78fb      	ldrb	r3, [r7, #3]
 8001c36:	75fb      	strb	r3, [r7, #23]
  uint8_t mlc_enable;
  ism330dhcx_mlc_odr_t mlc_odr;
  ism330dhcx_ctrl2_g_t ctrl2_g;
  int32_t ret;
  /* Check the Finite State Machine data rate constraints */
  ret =  ism330dhcx_fsm_enable_get(ctx, &fsm_enable);
 8001c38:	f107 030c 	add.w	r3, r7, #12
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	f000 ff0a 	bl	8002a58 <ism330dhcx_fsm_enable_get>
 8001c44:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	f040 80c4 	bne.w	8001dd6 <ism330dhcx_gy_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8001c4e:	7b3b      	ldrb	r3, [r7, #12]
 8001c50:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001c54:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8001c56:	7b3b      	ldrb	r3, [r7, #12]
 8001c58:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001c5c:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8001c62:	7b3b      	ldrb	r3, [r7, #12]
 8001c64:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001c68:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8001c6e:	7b3b      	ldrb	r3, [r7, #12]
 8001c70:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001c74:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8001c76:	4313      	orrs	r3, r2
 8001c78:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8001c7a:	7b3b      	ldrb	r3, [r7, #12]
 8001c7c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001c80:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8001c82:	4313      	orrs	r3, r2
 8001c84:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8001c86:	7b3b      	ldrb	r3, [r7, #12]
 8001c88:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001c8c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8001c92:	7b3b      	ldrb	r3, [r7, #12]
 8001c94:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8001c98:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8001c9e:	7b3b      	ldrb	r3, [r7, #12]
 8001ca0:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8001ca4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8001caa:	7b7b      	ldrb	r3, [r7, #13]
 8001cac:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001cb0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8001cb6:	7b7b      	ldrb	r3, [r7, #13]
 8001cb8:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001cbc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8001cc2:	7b7b      	ldrb	r3, [r7, #13]
 8001cc4:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001cc8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8001cce:	7b7b      	ldrb	r3, [r7, #13]
 8001cd0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001cd4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8001cda:	7b7b      	ldrb	r3, [r7, #13]
 8001cdc:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001ce0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8001ce6:	7b7b      	ldrb	r3, [r7, #13]
 8001ce8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001cec:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8001cf2:	7b7b      	ldrb	r3, [r7, #13]
 8001cf4:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8001cf8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8001cfe:	7b7b      	ldrb	r3, [r7, #13]
 8001d00:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8001d04:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8001d06:	4313      	orrs	r3, r2
 8001d08:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8001d0a:	2b01      	cmp	r3, #1
 8001d0c:	d163      	bne.n	8001dd6 <ism330dhcx_gy_data_rate_set+0x1ae>
    {
      ret =  ism330dhcx_fsm_data_rate_get(ctx, &fsm_odr);
 8001d0e:	f107 030b 	add.w	r3, r7, #11
 8001d12:	4619      	mov	r1, r3
 8001d14:	6878      	ldr	r0, [r7, #4]
 8001d16:	f000 fecb 	bl	8002ab0 <ism330dhcx_fsm_data_rate_get>
 8001d1a:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d159      	bne.n	8001dd6 <ism330dhcx_gy_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 8001d22:	7afb      	ldrb	r3, [r7, #11]
 8001d24:	2b03      	cmp	r3, #3
 8001d26:	d853      	bhi.n	8001dd0 <ism330dhcx_gy_data_rate_set+0x1a8>
 8001d28:	a201      	add	r2, pc, #4	; (adr r2, 8001d30 <ism330dhcx_gy_data_rate_set+0x108>)
 8001d2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d2e:	bf00      	nop
 8001d30:	08001d41 	.word	0x08001d41
 8001d34:	08001d53 	.word	0x08001d53
 8001d38:	08001d71 	.word	0x08001d71
 8001d3c:	08001d9b 	.word	0x08001d9b
        {
          case ISM330DHCX_ODR_FSM_12Hz5:
            if (val == ISM330DHCX_GY_ODR_OFF)
 8001d40:	78fb      	ldrb	r3, [r7, #3]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d102      	bne.n	8001d4c <ism330dhcx_gy_data_rate_set+0x124>
            {
              odr_gy = ISM330DHCX_GY_ODR_12Hz5;
 8001d46:	2301      	movs	r3, #1
 8001d48:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8001d4a:	e045      	b.n	8001dd8 <ism330dhcx_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8001d4c:	78fb      	ldrb	r3, [r7, #3]
 8001d4e:	75fb      	strb	r3, [r7, #23]
            break;
 8001d50:	e042      	b.n	8001dd8 <ism330dhcx_gy_data_rate_set+0x1b0>

          case ISM330DHCX_ODR_FSM_26Hz:
            if (val == ISM330DHCX_GY_ODR_OFF)
 8001d52:	78fb      	ldrb	r3, [r7, #3]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d102      	bne.n	8001d5e <ism330dhcx_gy_data_rate_set+0x136>
            {
              odr_gy = ISM330DHCX_GY_ODR_26Hz;
 8001d58:	2302      	movs	r3, #2
 8001d5a:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8001d5c:	e03c      	b.n	8001dd8 <ism330dhcx_gy_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_GY_ODR_12Hz5)
 8001d5e:	78fb      	ldrb	r3, [r7, #3]
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d102      	bne.n	8001d6a <ism330dhcx_gy_data_rate_set+0x142>
              odr_gy = ISM330DHCX_GY_ODR_26Hz;
 8001d64:	2302      	movs	r3, #2
 8001d66:	75fb      	strb	r3, [r7, #23]
            break;
 8001d68:	e036      	b.n	8001dd8 <ism330dhcx_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8001d6a:	78fb      	ldrb	r3, [r7, #3]
 8001d6c:	75fb      	strb	r3, [r7, #23]
            break;
 8001d6e:	e033      	b.n	8001dd8 <ism330dhcx_gy_data_rate_set+0x1b0>

          case ISM330DHCX_ODR_FSM_52Hz:
            if (val == ISM330DHCX_GY_ODR_OFF)
 8001d70:	78fb      	ldrb	r3, [r7, #3]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d102      	bne.n	8001d7c <ism330dhcx_gy_data_rate_set+0x154>
            {
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 8001d76:	2303      	movs	r3, #3
 8001d78:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8001d7a:	e02d      	b.n	8001dd8 <ism330dhcx_gy_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_GY_ODR_12Hz5)
 8001d7c:	78fb      	ldrb	r3, [r7, #3]
 8001d7e:	2b01      	cmp	r3, #1
 8001d80:	d102      	bne.n	8001d88 <ism330dhcx_gy_data_rate_set+0x160>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 8001d82:	2303      	movs	r3, #3
 8001d84:	75fb      	strb	r3, [r7, #23]
            break;
 8001d86:	e027      	b.n	8001dd8 <ism330dhcx_gy_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_GY_ODR_26Hz)
 8001d88:	78fb      	ldrb	r3, [r7, #3]
 8001d8a:	2b02      	cmp	r3, #2
 8001d8c:	d102      	bne.n	8001d94 <ism330dhcx_gy_data_rate_set+0x16c>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 8001d8e:	2303      	movs	r3, #3
 8001d90:	75fb      	strb	r3, [r7, #23]
            break;
 8001d92:	e021      	b.n	8001dd8 <ism330dhcx_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8001d94:	78fb      	ldrb	r3, [r7, #3]
 8001d96:	75fb      	strb	r3, [r7, #23]
            break;
 8001d98:	e01e      	b.n	8001dd8 <ism330dhcx_gy_data_rate_set+0x1b0>

          case ISM330DHCX_ODR_FSM_104Hz:
            if (val == ISM330DHCX_GY_ODR_OFF)
 8001d9a:	78fb      	ldrb	r3, [r7, #3]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d102      	bne.n	8001da6 <ism330dhcx_gy_data_rate_set+0x17e>
            {
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8001da0:	2304      	movs	r3, #4
 8001da2:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8001da4:	e018      	b.n	8001dd8 <ism330dhcx_gy_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_GY_ODR_12Hz5)
 8001da6:	78fb      	ldrb	r3, [r7, #3]
 8001da8:	2b01      	cmp	r3, #1
 8001daa:	d102      	bne.n	8001db2 <ism330dhcx_gy_data_rate_set+0x18a>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8001dac:	2304      	movs	r3, #4
 8001dae:	75fb      	strb	r3, [r7, #23]
            break;
 8001db0:	e012      	b.n	8001dd8 <ism330dhcx_gy_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_GY_ODR_26Hz)
 8001db2:	78fb      	ldrb	r3, [r7, #3]
 8001db4:	2b02      	cmp	r3, #2
 8001db6:	d102      	bne.n	8001dbe <ism330dhcx_gy_data_rate_set+0x196>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8001db8:	2304      	movs	r3, #4
 8001dba:	75fb      	strb	r3, [r7, #23]
            break;
 8001dbc:	e00c      	b.n	8001dd8 <ism330dhcx_gy_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_GY_ODR_52Hz)
 8001dbe:	78fb      	ldrb	r3, [r7, #3]
 8001dc0:	2b03      	cmp	r3, #3
 8001dc2:	d102      	bne.n	8001dca <ism330dhcx_gy_data_rate_set+0x1a2>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8001dc4:	2304      	movs	r3, #4
 8001dc6:	75fb      	strb	r3, [r7, #23]
            break;
 8001dc8:	e006      	b.n	8001dd8 <ism330dhcx_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8001dca:	78fb      	ldrb	r3, [r7, #3]
 8001dcc:	75fb      	strb	r3, [r7, #23]
            break;
 8001dce:	e003      	b.n	8001dd8 <ism330dhcx_gy_data_rate_set+0x1b0>

          default:
            odr_gy = val;
 8001dd0:	78fb      	ldrb	r3, [r7, #3]
 8001dd2:	75fb      	strb	r3, [r7, #23]
            break;
 8001dd4:	e000      	b.n	8001dd8 <ism330dhcx_gy_data_rate_set+0x1b0>
        }
      }
 8001dd6:	bf00      	nop
    }
  }

  /* Check the Machine Learning Core data rate constraints */
  mlc_enable = PROPERTY_DISABLE;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	72bb      	strb	r3, [r7, #10]

  if (ret == 0)
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d16d      	bne.n	8001ebe <ism330dhcx_gy_data_rate_set+0x296>
  {
    ret =  ism330dhcx_mlc_get(ctx, &mlc_enable);
 8001de2:	f107 030a 	add.w	r3, r7, #10
 8001de6:	4619      	mov	r1, r3
 8001de8:	6878      	ldr	r0, [r7, #4]
 8001dea:	f000 fea9 	bl	8002b40 <ism330dhcx_mlc_get>
 8001dee:	6138      	str	r0, [r7, #16]

    if (mlc_enable == PROPERTY_ENABLE)
 8001df0:	7abb      	ldrb	r3, [r7, #10]
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	d163      	bne.n	8001ebe <ism330dhcx_gy_data_rate_set+0x296>
    {
      ret =  ism330dhcx_mlc_data_rate_get(ctx, &mlc_odr);
 8001df6:	f107 0309 	add.w	r3, r7, #9
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	6878      	ldr	r0, [r7, #4]
 8001dfe:	f000 fed9 	bl	8002bb4 <ism330dhcx_mlc_data_rate_get>
 8001e02:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d159      	bne.n	8001ebe <ism330dhcx_gy_data_rate_set+0x296>
      {
        switch (mlc_odr)
 8001e0a:	7a7b      	ldrb	r3, [r7, #9]
 8001e0c:	2b03      	cmp	r3, #3
 8001e0e:	d853      	bhi.n	8001eb8 <ism330dhcx_gy_data_rate_set+0x290>
 8001e10:	a201      	add	r2, pc, #4	; (adr r2, 8001e18 <ism330dhcx_gy_data_rate_set+0x1f0>)
 8001e12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e16:	bf00      	nop
 8001e18:	08001e29 	.word	0x08001e29
 8001e1c:	08001e3b 	.word	0x08001e3b
 8001e20:	08001e59 	.word	0x08001e59
 8001e24:	08001e83 	.word	0x08001e83
        {
          case ISM330DHCX_ODR_PRGS_12Hz5:
            if (val == ISM330DHCX_GY_ODR_OFF)
 8001e28:	78fb      	ldrb	r3, [r7, #3]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d102      	bne.n	8001e34 <ism330dhcx_gy_data_rate_set+0x20c>
            {
              odr_gy = ISM330DHCX_GY_ODR_12Hz5;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8001e32:	e045      	b.n	8001ec0 <ism330dhcx_gy_data_rate_set+0x298>
              odr_gy = val;
 8001e34:	78fb      	ldrb	r3, [r7, #3]
 8001e36:	75fb      	strb	r3, [r7, #23]
            break;
 8001e38:	e042      	b.n	8001ec0 <ism330dhcx_gy_data_rate_set+0x298>

          case ISM330DHCX_ODR_PRGS_26Hz:
            if (val == ISM330DHCX_GY_ODR_OFF)
 8001e3a:	78fb      	ldrb	r3, [r7, #3]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d102      	bne.n	8001e46 <ism330dhcx_gy_data_rate_set+0x21e>
            {
              odr_gy = ISM330DHCX_GY_ODR_26Hz;
 8001e40:	2302      	movs	r3, #2
 8001e42:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8001e44:	e03c      	b.n	8001ec0 <ism330dhcx_gy_data_rate_set+0x298>
            else if (val == ISM330DHCX_GY_ODR_12Hz5)
 8001e46:	78fb      	ldrb	r3, [r7, #3]
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	d102      	bne.n	8001e52 <ism330dhcx_gy_data_rate_set+0x22a>
              odr_gy = ISM330DHCX_GY_ODR_26Hz;
 8001e4c:	2302      	movs	r3, #2
 8001e4e:	75fb      	strb	r3, [r7, #23]
            break;
 8001e50:	e036      	b.n	8001ec0 <ism330dhcx_gy_data_rate_set+0x298>
              odr_gy = val;
 8001e52:	78fb      	ldrb	r3, [r7, #3]
 8001e54:	75fb      	strb	r3, [r7, #23]
            break;
 8001e56:	e033      	b.n	8001ec0 <ism330dhcx_gy_data_rate_set+0x298>

          case ISM330DHCX_ODR_PRGS_52Hz:
            if (val == ISM330DHCX_GY_ODR_OFF)
 8001e58:	78fb      	ldrb	r3, [r7, #3]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d102      	bne.n	8001e64 <ism330dhcx_gy_data_rate_set+0x23c>
            {
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 8001e5e:	2303      	movs	r3, #3
 8001e60:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8001e62:	e02d      	b.n	8001ec0 <ism330dhcx_gy_data_rate_set+0x298>
            else if (val == ISM330DHCX_GY_ODR_12Hz5)
 8001e64:	78fb      	ldrb	r3, [r7, #3]
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d102      	bne.n	8001e70 <ism330dhcx_gy_data_rate_set+0x248>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	75fb      	strb	r3, [r7, #23]
            break;
 8001e6e:	e027      	b.n	8001ec0 <ism330dhcx_gy_data_rate_set+0x298>
            else if (val == ISM330DHCX_GY_ODR_26Hz)
 8001e70:	78fb      	ldrb	r3, [r7, #3]
 8001e72:	2b02      	cmp	r3, #2
 8001e74:	d102      	bne.n	8001e7c <ism330dhcx_gy_data_rate_set+0x254>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 8001e76:	2303      	movs	r3, #3
 8001e78:	75fb      	strb	r3, [r7, #23]
            break;
 8001e7a:	e021      	b.n	8001ec0 <ism330dhcx_gy_data_rate_set+0x298>
              odr_gy = val;
 8001e7c:	78fb      	ldrb	r3, [r7, #3]
 8001e7e:	75fb      	strb	r3, [r7, #23]
            break;
 8001e80:	e01e      	b.n	8001ec0 <ism330dhcx_gy_data_rate_set+0x298>

          case ISM330DHCX_ODR_PRGS_104Hz:
            if (val == ISM330DHCX_GY_ODR_OFF)
 8001e82:	78fb      	ldrb	r3, [r7, #3]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d102      	bne.n	8001e8e <ism330dhcx_gy_data_rate_set+0x266>
            {
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8001e88:	2304      	movs	r3, #4
 8001e8a:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8001e8c:	e018      	b.n	8001ec0 <ism330dhcx_gy_data_rate_set+0x298>
            else if (val == ISM330DHCX_GY_ODR_12Hz5)
 8001e8e:	78fb      	ldrb	r3, [r7, #3]
 8001e90:	2b01      	cmp	r3, #1
 8001e92:	d102      	bne.n	8001e9a <ism330dhcx_gy_data_rate_set+0x272>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8001e94:	2304      	movs	r3, #4
 8001e96:	75fb      	strb	r3, [r7, #23]
            break;
 8001e98:	e012      	b.n	8001ec0 <ism330dhcx_gy_data_rate_set+0x298>
            else if (val == ISM330DHCX_GY_ODR_26Hz)
 8001e9a:	78fb      	ldrb	r3, [r7, #3]
 8001e9c:	2b02      	cmp	r3, #2
 8001e9e:	d102      	bne.n	8001ea6 <ism330dhcx_gy_data_rate_set+0x27e>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8001ea0:	2304      	movs	r3, #4
 8001ea2:	75fb      	strb	r3, [r7, #23]
            break;
 8001ea4:	e00c      	b.n	8001ec0 <ism330dhcx_gy_data_rate_set+0x298>
            else if (val == ISM330DHCX_GY_ODR_52Hz)
 8001ea6:	78fb      	ldrb	r3, [r7, #3]
 8001ea8:	2b03      	cmp	r3, #3
 8001eaa:	d102      	bne.n	8001eb2 <ism330dhcx_gy_data_rate_set+0x28a>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8001eac:	2304      	movs	r3, #4
 8001eae:	75fb      	strb	r3, [r7, #23]
            break;
 8001eb0:	e006      	b.n	8001ec0 <ism330dhcx_gy_data_rate_set+0x298>
              odr_gy = val;
 8001eb2:	78fb      	ldrb	r3, [r7, #3]
 8001eb4:	75fb      	strb	r3, [r7, #23]
            break;
 8001eb6:	e003      	b.n	8001ec0 <ism330dhcx_gy_data_rate_set+0x298>

          default:
            odr_gy = val;
 8001eb8:	78fb      	ldrb	r3, [r7, #3]
 8001eba:	75fb      	strb	r3, [r7, #23]
            break;
 8001ebc:	e000      	b.n	8001ec0 <ism330dhcx_gy_data_rate_set+0x298>
        }
      }
 8001ebe:	bf00      	nop
    }
  }

  if (ret == 0)
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d107      	bne.n	8001ed6 <ism330dhcx_gy_data_rate_set+0x2ae>
  {
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL2_G,
 8001ec6:	f107 0208 	add.w	r2, r7, #8
 8001eca:	2301      	movs	r3, #1
 8001ecc:	2111      	movs	r1, #17
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	f7ff fbcc 	bl	800166c <ism330dhcx_read_reg>
 8001ed4:	6138      	str	r0, [r7, #16]
                              (uint8_t *)&ctrl2_g, 1);
  }

  if (ret == 0)
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d10f      	bne.n	8001efc <ism330dhcx_gy_data_rate_set+0x2d4>
  {
    ctrl2_g.odr_g = (uint8_t)odr_gy;
 8001edc:	7dfb      	ldrb	r3, [r7, #23]
 8001ede:	f003 030f 	and.w	r3, r3, #15
 8001ee2:	b2da      	uxtb	r2, r3
 8001ee4:	7a3b      	ldrb	r3, [r7, #8]
 8001ee6:	f362 1307 	bfi	r3, r2, #4, #4
 8001eea:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL2_G,
 8001eec:	f107 0208 	add.w	r2, r7, #8
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	2111      	movs	r1, #17
 8001ef4:	6878      	ldr	r0, [r7, #4]
 8001ef6:	f7ff fbd1 	bl	800169c <ism330dhcx_write_reg>
 8001efa:	6138      	str	r0, [r7, #16]
                               (uint8_t *)&ctrl2_g, 1);
  }

  return ret;
 8001efc:	693b      	ldr	r3, [r7, #16]
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3718      	adds	r7, #24
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop

08001f08 <ism330dhcx_gy_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_gy_data_rate_get(stmdev_ctx_t *ctx,
                                    ism330dhcx_odr_g_t *val)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b084      	sub	sp, #16
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
 8001f10:	6039      	str	r1, [r7, #0]
  ism330dhcx_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL2_G,
 8001f12:	f107 0208 	add.w	r2, r7, #8
 8001f16:	2301      	movs	r3, #1
 8001f18:	2111      	movs	r1, #17
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f7ff fba6 	bl	800166c <ism330dhcx_read_reg>
 8001f20:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl2_g, 1);

  switch (ctrl2_g.odr_g)
 8001f22:	7a3b      	ldrb	r3, [r7, #8]
 8001f24:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	2b0a      	cmp	r3, #10
 8001f2c:	d844      	bhi.n	8001fb8 <ism330dhcx_gy_data_rate_get+0xb0>
 8001f2e:	a201      	add	r2, pc, #4	; (adr r2, 8001f34 <ism330dhcx_gy_data_rate_get+0x2c>)
 8001f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f34:	08001f61 	.word	0x08001f61
 8001f38:	08001f69 	.word	0x08001f69
 8001f3c:	08001f71 	.word	0x08001f71
 8001f40:	08001f79 	.word	0x08001f79
 8001f44:	08001f81 	.word	0x08001f81
 8001f48:	08001f89 	.word	0x08001f89
 8001f4c:	08001f91 	.word	0x08001f91
 8001f50:	08001f99 	.word	0x08001f99
 8001f54:	08001fa1 	.word	0x08001fa1
 8001f58:	08001fa9 	.word	0x08001fa9
 8001f5c:	08001fb1 	.word	0x08001fb1
  {
    case ISM330DHCX_GY_ODR_OFF:
      *val = ISM330DHCX_GY_ODR_OFF;
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	2200      	movs	r2, #0
 8001f64:	701a      	strb	r2, [r3, #0]
      break;
 8001f66:	e02b      	b.n	8001fc0 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_12Hz5:
      *val = ISM330DHCX_GY_ODR_12Hz5;
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	701a      	strb	r2, [r3, #0]
      break;
 8001f6e:	e027      	b.n	8001fc0 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_26Hz:
      *val = ISM330DHCX_GY_ODR_26Hz;
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	2202      	movs	r2, #2
 8001f74:	701a      	strb	r2, [r3, #0]
      break;
 8001f76:	e023      	b.n	8001fc0 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_52Hz:
      *val = ISM330DHCX_GY_ODR_52Hz;
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	2203      	movs	r2, #3
 8001f7c:	701a      	strb	r2, [r3, #0]
      break;
 8001f7e:	e01f      	b.n	8001fc0 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_104Hz:
      *val = ISM330DHCX_GY_ODR_104Hz;
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	2204      	movs	r2, #4
 8001f84:	701a      	strb	r2, [r3, #0]
      break;
 8001f86:	e01b      	b.n	8001fc0 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_208Hz:
      *val = ISM330DHCX_GY_ODR_208Hz;
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	2205      	movs	r2, #5
 8001f8c:	701a      	strb	r2, [r3, #0]
      break;
 8001f8e:	e017      	b.n	8001fc0 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_416Hz:
      *val = ISM330DHCX_GY_ODR_416Hz;
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	2206      	movs	r2, #6
 8001f94:	701a      	strb	r2, [r3, #0]
      break;
 8001f96:	e013      	b.n	8001fc0 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_833Hz:
      *val = ISM330DHCX_GY_ODR_833Hz;
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	2207      	movs	r2, #7
 8001f9c:	701a      	strb	r2, [r3, #0]
      break;
 8001f9e:	e00f      	b.n	8001fc0 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_1666Hz:
      *val = ISM330DHCX_GY_ODR_1666Hz;
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	2208      	movs	r2, #8
 8001fa4:	701a      	strb	r2, [r3, #0]
      break;
 8001fa6:	e00b      	b.n	8001fc0 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_3332Hz:
      *val = ISM330DHCX_GY_ODR_3332Hz;
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	2209      	movs	r2, #9
 8001fac:	701a      	strb	r2, [r3, #0]
      break;
 8001fae:	e007      	b.n	8001fc0 <ism330dhcx_gy_data_rate_get+0xb8>

    case ISM330DHCX_GY_ODR_6667Hz:
      *val = ISM330DHCX_GY_ODR_6667Hz;
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	220a      	movs	r2, #10
 8001fb4:	701a      	strb	r2, [r3, #0]
      break;
 8001fb6:	e003      	b.n	8001fc0 <ism330dhcx_gy_data_rate_get+0xb8>

    default:
      *val = ISM330DHCX_GY_ODR_OFF;
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	2200      	movs	r2, #0
 8001fbc:	701a      	strb	r2, [r3, #0]
      break;
 8001fbe:	bf00      	nop
  }

  return ret;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3710      	adds	r7, #16
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop

08001fcc <ism330dhcx_mem_bank_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_mem_bank_set(stmdev_ctx_t *ctx,
                                ism330dhcx_reg_access_t val)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b084      	sub	sp, #16
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
 8001fd4:	460b      	mov	r3, r1
 8001fd6:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_func_cfg_access_t func_cfg_access;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FUNC_CFG_ACCESS,
 8001fd8:	f107 0208 	add.w	r2, r7, #8
 8001fdc:	2301      	movs	r3, #1
 8001fde:	2101      	movs	r1, #1
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	f7ff fb43 	bl	800166c <ism330dhcx_read_reg>
 8001fe6:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&func_cfg_access, 1);

  if (ret == 0)
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d10f      	bne.n	800200e <ism330dhcx_mem_bank_set+0x42>
  {
    func_cfg_access.reg_access = (uint8_t)val;
 8001fee:	78fb      	ldrb	r3, [r7, #3]
 8001ff0:	f003 0303 	and.w	r3, r3, #3
 8001ff4:	b2da      	uxtb	r2, r3
 8001ff6:	7a3b      	ldrb	r3, [r7, #8]
 8001ff8:	f362 1387 	bfi	r3, r2, #6, #2
 8001ffc:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_FUNC_CFG_ACCESS,
 8001ffe:	f107 0208 	add.w	r2, r7, #8
 8002002:	2301      	movs	r3, #1
 8002004:	2101      	movs	r1, #1
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	f7ff fb48 	bl	800169c <ism330dhcx_write_reg>
 800200c:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&func_cfg_access, 1);
  }

  return ret;
 800200e:	68fb      	ldr	r3, [r7, #12]
}
 8002010:	4618      	mov	r0, r3
 8002012:	3710      	adds	r7, #16
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}

08002018 <ism330dhcx_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b084      	sub	sp, #16
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
 8002020:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_WHO_AM_I, buff, 1);
 8002022:	2301      	movs	r3, #1
 8002024:	683a      	ldr	r2, [r7, #0]
 8002026:	210f      	movs	r1, #15
 8002028:	6878      	ldr	r0, [r7, #4]
 800202a:	f7ff fb1f 	bl	800166c <ism330dhcx_read_reg>
 800202e:	60f8      	str	r0, [r7, #12]

  return ret;
 8002030:	68fb      	ldr	r3, [r7, #12]
}
 8002032:	4618      	mov	r0, r3
 8002034:	3710      	adds	r7, #16
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}

0800203a <ism330dhcx_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800203a:	b580      	push	{r7, lr}
 800203c:	b084      	sub	sp, #16
 800203e:	af00      	add	r7, sp, #0
 8002040:	6078      	str	r0, [r7, #4]
 8002042:	460b      	mov	r3, r1
 8002044:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL3_C,
 8002046:	f107 0208 	add.w	r2, r7, #8
 800204a:	2301      	movs	r3, #1
 800204c:	2112      	movs	r1, #18
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	f7ff fb0c 	bl	800166c <ism330dhcx_read_reg>
 8002054:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl3_c, 1);

  if (ret == 0)
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d10f      	bne.n	800207c <ism330dhcx_reset_set+0x42>
  {
    ctrl3_c.sw_reset = (uint8_t)val;
 800205c:	78fb      	ldrb	r3, [r7, #3]
 800205e:	f003 0301 	and.w	r3, r3, #1
 8002062:	b2da      	uxtb	r2, r3
 8002064:	7a3b      	ldrb	r3, [r7, #8]
 8002066:	f362 0300 	bfi	r3, r2, #0, #1
 800206a:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL3_C,
 800206c:	f107 0208 	add.w	r2, r7, #8
 8002070:	2301      	movs	r3, #1
 8002072:	2112      	movs	r1, #18
 8002074:	6878      	ldr	r0, [r7, #4]
 8002076:	f7ff fb11 	bl	800169c <ism330dhcx_write_reg>
 800207a:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl3_c, 1);
  }

  return ret;
 800207c:	68fb      	ldr	r3, [r7, #12]
}
 800207e:	4618      	mov	r0, r3
 8002080:	3710      	adds	r7, #16
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}

08002086 <ism330dhcx_reset_get>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8002086:	b580      	push	{r7, lr}
 8002088:	b084      	sub	sp, #16
 800208a:	af00      	add	r7, sp, #0
 800208c:	6078      	str	r0, [r7, #4]
 800208e:	6039      	str	r1, [r7, #0]
  ism330dhcx_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL3_C,
 8002090:	f107 0208 	add.w	r2, r7, #8
 8002094:	2301      	movs	r3, #1
 8002096:	2112      	movs	r1, #18
 8002098:	6878      	ldr	r0, [r7, #4]
 800209a:	f7ff fae7 	bl	800166c <ism330dhcx_read_reg>
 800209e:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl3_c, 1);
  *val = ctrl3_c.sw_reset;
 80020a0:	7a3b      	ldrb	r3, [r7, #8]
 80020a2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80020a6:	b2db      	uxtb	r3, r3
 80020a8:	461a      	mov	r2, r3
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	701a      	strb	r2, [r3, #0]

  return ret;
 80020ae:	68fb      	ldr	r3, [r7, #12]
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	3710      	adds	r7, #16
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}

080020b8 <ism330dhcx_i2c_interface_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_i2c_interface_set(stmdev_ctx_t *ctx,
                                     ism330dhcx_i2c_disable_t val)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b084      	sub	sp, #16
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
 80020c0:	460b      	mov	r3, r1
 80020c2:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl4_c_t ctrl4_c;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL4_C,
 80020c4:	f107 0208 	add.w	r2, r7, #8
 80020c8:	2301      	movs	r3, #1
 80020ca:	2113      	movs	r1, #19
 80020cc:	6878      	ldr	r0, [r7, #4]
 80020ce:	f7ff facd 	bl	800166c <ism330dhcx_read_reg>
 80020d2:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl4_c, 1);

  if (ret == 0)
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d10f      	bne.n	80020fa <ism330dhcx_i2c_interface_set+0x42>
  {
    ctrl4_c.i2c_disable = (uint8_t)val;
 80020da:	78fb      	ldrb	r3, [r7, #3]
 80020dc:	f003 0301 	and.w	r3, r3, #1
 80020e0:	b2da      	uxtb	r2, r3
 80020e2:	7a3b      	ldrb	r3, [r7, #8]
 80020e4:	f362 0382 	bfi	r3, r2, #2, #1
 80020e8:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL4_C,
 80020ea:	f107 0208 	add.w	r2, r7, #8
 80020ee:	2301      	movs	r3, #1
 80020f0:	2113      	movs	r1, #19
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	f7ff fad2 	bl	800169c <ism330dhcx_write_reg>
 80020f8:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl4_c, 1);
  }

  return ret;
 80020fa:	68fb      	ldr	r3, [r7, #12]
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	3710      	adds	r7, #16
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}

08002104 <ism330dhcx_pin_int1_route_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_pin_int1_route_set(stmdev_ctx_t *ctx,
                                      ism330dhcx_pin_int1_route_t *val)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b084      	sub	sp, #16
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
 800210c:	6039      	str	r1, [r7, #0]
  ism330dhcx_tap_cfg2_t tap_cfg2;
  int32_t ret;
  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
 800210e:	2102      	movs	r1, #2
 8002110:	6878      	ldr	r0, [r7, #4]
 8002112:	f7ff ff5b 	bl	8001fcc <ism330dhcx_mem_bank_set>
 8002116:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d107      	bne.n	800212e <ism330dhcx_pin_int1_route_set+0x2a>
  {
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_MLC_INT1,
                               (uint8_t *)&val->mlc_int1, 1);
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	1d5a      	adds	r2, r3, #5
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_MLC_INT1,
 8002122:	2301      	movs	r3, #1
 8002124:	210d      	movs	r1, #13
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f7ff fab8 	bl	800169c <ism330dhcx_write_reg>
 800212c:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d107      	bne.n	8002144 <ism330dhcx_pin_int1_route_set+0x40>
  {
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_EMB_FUNC_INT1,
                               (uint8_t *)&val->emb_func_int1, 1);
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	1c9a      	adds	r2, r3, #2
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_EMB_FUNC_INT1,
 8002138:	2301      	movs	r3, #1
 800213a:	210a      	movs	r1, #10
 800213c:	6878      	ldr	r0, [r7, #4]
 800213e:	f7ff faad 	bl	800169c <ism330dhcx_write_reg>
 8002142:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d107      	bne.n	800215a <ism330dhcx_pin_int1_route_set+0x56>
  {
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_FSM_INT1_A,
                               (uint8_t *)&val->fsm_int1_a, 1);
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	1cda      	adds	r2, r3, #3
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_FSM_INT1_A,
 800214e:	2301      	movs	r3, #1
 8002150:	210b      	movs	r1, #11
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	f7ff faa2 	bl	800169c <ism330dhcx_write_reg>
 8002158:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d107      	bne.n	8002170 <ism330dhcx_pin_int1_route_set+0x6c>
  {
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_FSM_INT1_B,
                               (uint8_t *)&val->fsm_int1_b, 1);
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	1d1a      	adds	r2, r3, #4
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_FSM_INT1_B,
 8002164:	2301      	movs	r3, #1
 8002166:	210c      	movs	r1, #12
 8002168:	6878      	ldr	r0, [r7, #4]
 800216a:	f7ff fa97 	bl	800169c <ism330dhcx_write_reg>
 800216e:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d104      	bne.n	8002180 <ism330dhcx_pin_int1_route_set+0x7c>
  {
    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
 8002176:	2100      	movs	r1, #0
 8002178:	6878      	ldr	r0, [r7, #4]
 800217a:	f7ff ff27 	bl	8001fcc <ism330dhcx_mem_bank_set>
 800217e:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	2b00      	cmp	r3, #0
 8002184:	f040 80d6 	bne.w	8002334 <ism330dhcx_pin_int1_route_set+0x230>
  {
    if ((val->emb_func_int1.int1_fsm_lc |
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	789b      	ldrb	r3, [r3, #2]
 800218c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8002190:	b2da      	uxtb	r2, r3
         val->emb_func_int1.int1_sig_mot |
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	789b      	ldrb	r3, [r3, #2]
 8002196:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800219a:	b2db      	uxtb	r3, r3
    if ((val->emb_func_int1.int1_fsm_lc |
 800219c:	4313      	orrs	r3, r2
 800219e:	b2da      	uxtb	r2, r3
         val->emb_func_int1.int1_step_detector |
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	789b      	ldrb	r3, [r3, #2]
 80021a4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80021a8:	b2db      	uxtb	r3, r3
         val->emb_func_int1.int1_sig_mot |
 80021aa:	4313      	orrs	r3, r2
 80021ac:	b2da      	uxtb	r2, r3
         val->emb_func_int1.int1_tilt |
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	789b      	ldrb	r3, [r3, #2]
 80021b2:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80021b6:	b2db      	uxtb	r3, r3
         val->emb_func_int1.int1_step_detector |
 80021b8:	4313      	orrs	r3, r2
 80021ba:	b2da      	uxtb	r2, r3
         val->fsm_int1_a.int1_fsm1 |
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	78db      	ldrb	r3, [r3, #3]
 80021c0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80021c4:	b2db      	uxtb	r3, r3
         val->emb_func_int1.int1_tilt |
 80021c6:	4313      	orrs	r3, r2
 80021c8:	b2da      	uxtb	r2, r3
         val->fsm_int1_a.int1_fsm2 |
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	78db      	ldrb	r3, [r3, #3]
 80021ce:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80021d2:	b2db      	uxtb	r3, r3
         val->fsm_int1_a.int1_fsm1 |
 80021d4:	4313      	orrs	r3, r2
 80021d6:	b2da      	uxtb	r2, r3
         val->fsm_int1_a.int1_fsm3 |
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	78db      	ldrb	r3, [r3, #3]
 80021dc:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80021e0:	b2db      	uxtb	r3, r3
         val->fsm_int1_a.int1_fsm2 |
 80021e2:	4313      	orrs	r3, r2
 80021e4:	b2da      	uxtb	r2, r3
         val->fsm_int1_a.int1_fsm4 |
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	78db      	ldrb	r3, [r3, #3]
 80021ea:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80021ee:	b2db      	uxtb	r3, r3
         val->fsm_int1_a.int1_fsm3 |
 80021f0:	4313      	orrs	r3, r2
 80021f2:	b2da      	uxtb	r2, r3
         val->fsm_int1_a.int1_fsm5 |
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	78db      	ldrb	r3, [r3, #3]
 80021f8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80021fc:	b2db      	uxtb	r3, r3
         val->fsm_int1_a.int1_fsm4 |
 80021fe:	4313      	orrs	r3, r2
 8002200:	b2da      	uxtb	r2, r3
         val->fsm_int1_a.int1_fsm6 |
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	78db      	ldrb	r3, [r3, #3]
 8002206:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800220a:	b2db      	uxtb	r3, r3
         val->fsm_int1_a.int1_fsm5 |
 800220c:	4313      	orrs	r3, r2
 800220e:	b2da      	uxtb	r2, r3
         val->fsm_int1_a.int1_fsm7 |
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	78db      	ldrb	r3, [r3, #3]
 8002214:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8002218:	b2db      	uxtb	r3, r3
         val->fsm_int1_a.int1_fsm6 |
 800221a:	4313      	orrs	r3, r2
 800221c:	b2da      	uxtb	r2, r3
         val->fsm_int1_a.int1_fsm8 |
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	78db      	ldrb	r3, [r3, #3]
 8002222:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8002226:	b2db      	uxtb	r3, r3
         val->fsm_int1_a.int1_fsm7 |
 8002228:	4313      	orrs	r3, r2
 800222a:	b2da      	uxtb	r2, r3
         val->fsm_int1_b.int1_fsm9 |
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	791b      	ldrb	r3, [r3, #4]
 8002230:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002234:	b2db      	uxtb	r3, r3
         val->fsm_int1_a.int1_fsm8 |
 8002236:	4313      	orrs	r3, r2
 8002238:	b2da      	uxtb	r2, r3
         val->fsm_int1_b.int1_fsm10 |
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	791b      	ldrb	r3, [r3, #4]
 800223e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002242:	b2db      	uxtb	r3, r3
         val->fsm_int1_b.int1_fsm9 |
 8002244:	4313      	orrs	r3, r2
 8002246:	b2da      	uxtb	r2, r3
         val->fsm_int1_b.int1_fsm11 |
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	791b      	ldrb	r3, [r3, #4]
 800224c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002250:	b2db      	uxtb	r3, r3
         val->fsm_int1_b.int1_fsm10 |
 8002252:	4313      	orrs	r3, r2
 8002254:	b2da      	uxtb	r2, r3
         val->fsm_int1_b.int1_fsm12 |
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	791b      	ldrb	r3, [r3, #4]
 800225a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800225e:	b2db      	uxtb	r3, r3
         val->fsm_int1_b.int1_fsm11 |
 8002260:	4313      	orrs	r3, r2
 8002262:	b2da      	uxtb	r2, r3
         val->fsm_int1_b.int1_fsm13 |
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	791b      	ldrb	r3, [r3, #4]
 8002268:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800226c:	b2db      	uxtb	r3, r3
         val->fsm_int1_b.int1_fsm12 |
 800226e:	4313      	orrs	r3, r2
 8002270:	b2da      	uxtb	r2, r3
         val->fsm_int1_b.int1_fsm14 |
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	791b      	ldrb	r3, [r3, #4]
 8002276:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800227a:	b2db      	uxtb	r3, r3
         val->fsm_int1_b.int1_fsm13 |
 800227c:	4313      	orrs	r3, r2
 800227e:	b2da      	uxtb	r2, r3
         val->fsm_int1_b.int1_fsm15 |
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	791b      	ldrb	r3, [r3, #4]
 8002284:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8002288:	b2db      	uxtb	r3, r3
         val->fsm_int1_b.int1_fsm14 |
 800228a:	4313      	orrs	r3, r2
 800228c:	b2da      	uxtb	r2, r3
         val->fsm_int1_b.int1_fsm16 |
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	791b      	ldrb	r3, [r3, #4]
 8002292:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8002296:	b2db      	uxtb	r3, r3
         val->fsm_int1_b.int1_fsm15 |
 8002298:	4313      	orrs	r3, r2
 800229a:	b2da      	uxtb	r2, r3
         val->mlc_int1.int1_mlc1 |
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	795b      	ldrb	r3, [r3, #5]
 80022a0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80022a4:	b2db      	uxtb	r3, r3
         val->fsm_int1_b.int1_fsm16 |
 80022a6:	4313      	orrs	r3, r2
 80022a8:	b2da      	uxtb	r2, r3
         val->mlc_int1.int1_mlc2 |
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	795b      	ldrb	r3, [r3, #5]
 80022ae:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80022b2:	b2db      	uxtb	r3, r3
         val->mlc_int1.int1_mlc1 |
 80022b4:	4313      	orrs	r3, r2
 80022b6:	b2da      	uxtb	r2, r3
         val->mlc_int1.int1_mlc3 |
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	795b      	ldrb	r3, [r3, #5]
 80022bc:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80022c0:	b2db      	uxtb	r3, r3
         val->mlc_int1.int1_mlc2 |
 80022c2:	4313      	orrs	r3, r2
 80022c4:	b2da      	uxtb	r2, r3
         val->mlc_int1.int1_mlc4 |
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	795b      	ldrb	r3, [r3, #5]
 80022ca:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80022ce:	b2db      	uxtb	r3, r3
         val->mlc_int1.int1_mlc3 |
 80022d0:	4313      	orrs	r3, r2
 80022d2:	b2da      	uxtb	r2, r3
         val->mlc_int1.int1_mlc5 |
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	795b      	ldrb	r3, [r3, #5]
 80022d8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80022dc:	b2db      	uxtb	r3, r3
         val->mlc_int1.int1_mlc4 |
 80022de:	4313      	orrs	r3, r2
 80022e0:	b2da      	uxtb	r2, r3
         val->mlc_int1.int1_mlc6 |
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	795b      	ldrb	r3, [r3, #5]
 80022e6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80022ea:	b2db      	uxtb	r3, r3
         val->mlc_int1.int1_mlc5 |
 80022ec:	4313      	orrs	r3, r2
 80022ee:	b2da      	uxtb	r2, r3
         val->mlc_int1.int1_mlc7 |
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	795b      	ldrb	r3, [r3, #5]
 80022f4:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80022f8:	b2db      	uxtb	r3, r3
         val->mlc_int1.int1_mlc6 |
 80022fa:	4313      	orrs	r3, r2
 80022fc:	b2da      	uxtb	r2, r3
         val->mlc_int1.int1_mlc8) != PROPERTY_DISABLE)
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	795b      	ldrb	r3, [r3, #5]
 8002302:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8002306:	b2db      	uxtb	r3, r3
         val->mlc_int1.int1_mlc7 |
 8002308:	4313      	orrs	r3, r2
 800230a:	b2db      	uxtb	r3, r3
    if ((val->emb_func_int1.int1_fsm_lc |
 800230c:	2b00      	cmp	r3, #0
 800230e:	d005      	beq.n	800231c <ism330dhcx_pin_int1_route_set+0x218>
    {
      val->md1_cfg.int1_emb_func = PROPERTY_ENABLE;
 8002310:	683a      	ldr	r2, [r7, #0]
 8002312:	7853      	ldrb	r3, [r2, #1]
 8002314:	f043 0302 	orr.w	r3, r3, #2
 8002318:	7053      	strb	r3, [r2, #1]
 800231a:	e004      	b.n	8002326 <ism330dhcx_pin_int1_route_set+0x222>
    }

    else
    {
      val->md1_cfg.int1_emb_func = PROPERTY_DISABLE;
 800231c:	683a      	ldr	r2, [r7, #0]
 800231e:	7853      	ldrb	r3, [r2, #1]
 8002320:	f36f 0341 	bfc	r3, #1, #1
 8002324:	7053      	strb	r3, [r2, #1]
    }

    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_INT1_CTRL,
                               (uint8_t *)&val->int1_ctrl, 1);
 8002326:	683a      	ldr	r2, [r7, #0]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_INT1_CTRL,
 8002328:	2301      	movs	r3, #1
 800232a:	210d      	movs	r1, #13
 800232c:	6878      	ldr	r0, [r7, #4]
 800232e:	f7ff f9b5 	bl	800169c <ism330dhcx_write_reg>
 8002332:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d107      	bne.n	800234a <ism330dhcx_pin_int1_route_set+0x246>
  {
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_MD1_CFG,
                               (uint8_t *)&val->md1_cfg, 1);
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	1c5a      	adds	r2, r3, #1
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_MD1_CFG,
 800233e:	2301      	movs	r3, #1
 8002340:	215e      	movs	r1, #94	; 0x5e
 8002342:	6878      	ldr	r0, [r7, #4]
 8002344:	f7ff f9aa 	bl	800169c <ism330dhcx_write_reg>
 8002348:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d179      	bne.n	8002444 <ism330dhcx_pin_int1_route_set+0x340>
  {
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_TAP_CFG2,
 8002350:	f107 0208 	add.w	r2, r7, #8
 8002354:	2301      	movs	r3, #1
 8002356:	2158      	movs	r1, #88	; 0x58
 8002358:	6878      	ldr	r0, [r7, #4]
 800235a:	f7ff f987 	bl	800166c <ism330dhcx_read_reg>
 800235e:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&tap_cfg2, 1);

    if ((val->int1_ctrl.den_drdy_flag |
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8002368:	b2da      	uxtb	r2, r3
         val->int1_ctrl.int1_boot |
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	781b      	ldrb	r3, [r3, #0]
 800236e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002372:	b2db      	uxtb	r3, r3
    if ((val->int1_ctrl.den_drdy_flag |
 8002374:	4313      	orrs	r3, r2
 8002376:	b2da      	uxtb	r2, r3
         val->int1_ctrl.int1_cnt_bdr |
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	781b      	ldrb	r3, [r3, #0]
 800237c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8002380:	b2db      	uxtb	r3, r3
         val->int1_ctrl.int1_boot |
 8002382:	4313      	orrs	r3, r2
 8002384:	b2da      	uxtb	r2, r3
         val->int1_ctrl.int1_drdy_g |
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	781b      	ldrb	r3, [r3, #0]
 800238a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800238e:	b2db      	uxtb	r3, r3
         val->int1_ctrl.int1_cnt_bdr |
 8002390:	4313      	orrs	r3, r2
 8002392:	b2da      	uxtb	r2, r3
         val->int1_ctrl.int1_drdy_xl |
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	781b      	ldrb	r3, [r3, #0]
 8002398:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800239c:	b2db      	uxtb	r3, r3
         val->int1_ctrl.int1_drdy_g |
 800239e:	4313      	orrs	r3, r2
 80023a0:	b2da      	uxtb	r2, r3
         val->int1_ctrl.int1_fifo_full |
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80023aa:	b2db      	uxtb	r3, r3
         val->int1_ctrl.int1_drdy_xl |
 80023ac:	4313      	orrs	r3, r2
 80023ae:	b2da      	uxtb	r2, r3
         val->int1_ctrl.int1_fifo_ovr |
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	781b      	ldrb	r3, [r3, #0]
 80023b4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80023b8:	b2db      	uxtb	r3, r3
         val->int1_ctrl.int1_fifo_full |
 80023ba:	4313      	orrs	r3, r2
 80023bc:	b2da      	uxtb	r2, r3
         val->int1_ctrl.int1_fifo_th |
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	781b      	ldrb	r3, [r3, #0]
 80023c2:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80023c6:	b2db      	uxtb	r3, r3
         val->int1_ctrl.int1_fifo_ovr |
 80023c8:	4313      	orrs	r3, r2
 80023ca:	b2da      	uxtb	r2, r3
         val->md1_cfg.int1_shub |
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	785b      	ldrb	r3, [r3, #1]
 80023d0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80023d4:	b2db      	uxtb	r3, r3
         val->int1_ctrl.int1_fifo_th |
 80023d6:	4313      	orrs	r3, r2
 80023d8:	b2da      	uxtb	r2, r3
         val->md1_cfg.int1_6d |
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	785b      	ldrb	r3, [r3, #1]
 80023de:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80023e2:	b2db      	uxtb	r3, r3
         val->md1_cfg.int1_shub |
 80023e4:	4313      	orrs	r3, r2
 80023e6:	b2da      	uxtb	r2, r3
         val->md1_cfg.int1_double_tap |
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	785b      	ldrb	r3, [r3, #1]
 80023ec:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80023f0:	b2db      	uxtb	r3, r3
         val->md1_cfg.int1_6d |
 80023f2:	4313      	orrs	r3, r2
 80023f4:	b2da      	uxtb	r2, r3
         val->md1_cfg.int1_ff |
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	785b      	ldrb	r3, [r3, #1]
 80023fa:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80023fe:	b2db      	uxtb	r3, r3
         val->md1_cfg.int1_double_tap |
 8002400:	4313      	orrs	r3, r2
 8002402:	b2da      	uxtb	r2, r3
         val->md1_cfg.int1_wu |
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	785b      	ldrb	r3, [r3, #1]
 8002408:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800240c:	b2db      	uxtb	r3, r3
         val->md1_cfg.int1_ff |
 800240e:	4313      	orrs	r3, r2
 8002410:	b2da      	uxtb	r2, r3
         val->md1_cfg.int1_single_tap |
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	785b      	ldrb	r3, [r3, #1]
 8002416:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800241a:	b2db      	uxtb	r3, r3
         val->md1_cfg.int1_wu |
 800241c:	4313      	orrs	r3, r2
 800241e:	b2da      	uxtb	r2, r3
         val->md1_cfg.int1_sleep_change) != PROPERTY_DISABLE)
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	785b      	ldrb	r3, [r3, #1]
 8002424:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8002428:	b2db      	uxtb	r3, r3
         val->md1_cfg.int1_single_tap |
 800242a:	4313      	orrs	r3, r2
 800242c:	b2db      	uxtb	r3, r3
    if ((val->int1_ctrl.den_drdy_flag |
 800242e:	2b00      	cmp	r3, #0
 8002430:	d004      	beq.n	800243c <ism330dhcx_pin_int1_route_set+0x338>
    {
      tap_cfg2.interrupts_enable = PROPERTY_ENABLE;
 8002432:	7a3b      	ldrb	r3, [r7, #8]
 8002434:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002438:	723b      	strb	r3, [r7, #8]
 800243a:	e003      	b.n	8002444 <ism330dhcx_pin_int1_route_set+0x340>
    }

    else
    {
      tap_cfg2.interrupts_enable = PROPERTY_DISABLE;
 800243c:	7a3b      	ldrb	r3, [r7, #8]
 800243e:	f36f 13c7 	bfc	r3, #7, #1
 8002442:	723b      	strb	r3, [r7, #8]
    }
  }

  if (ret == 0)
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d107      	bne.n	800245a <ism330dhcx_pin_int1_route_set+0x356>
  {
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_TAP_CFG2,
 800244a:	f107 0208 	add.w	r2, r7, #8
 800244e:	2301      	movs	r3, #1
 8002450:	2158      	movs	r1, #88	; 0x58
 8002452:	6878      	ldr	r0, [r7, #4]
 8002454:	f7ff f922 	bl	800169c <ism330dhcx_write_reg>
 8002458:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&tap_cfg2, 1);
  }

  return ret;
 800245a:	68fb      	ldr	r3, [r7, #12]
}
 800245c:	4618      	mov	r0, r3
 800245e:	3710      	adds	r7, #16
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}

08002464 <ism330dhcx_pin_int1_route_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_pin_int1_route_get(stmdev_ctx_t *ctx,
                                      ism330dhcx_pin_int1_route_t *val)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b084      	sub	sp, #16
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
 800246c:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
 800246e:	2102      	movs	r1, #2
 8002470:	6878      	ldr	r0, [r7, #4]
 8002472:	f7ff fdab 	bl	8001fcc <ism330dhcx_mem_bank_set>
 8002476:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d107      	bne.n	800248e <ism330dhcx_pin_int1_route_get+0x2a>
  {
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_MLC_INT1,
                              (uint8_t *)&val->mlc_int1, 1);
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	1d5a      	adds	r2, r3, #5
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_MLC_INT1,
 8002482:	2301      	movs	r3, #1
 8002484:	210d      	movs	r1, #13
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	f7ff f8f0 	bl	800166c <ism330dhcx_read_reg>
 800248c:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d107      	bne.n	80024a4 <ism330dhcx_pin_int1_route_get+0x40>
  {
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_EMB_FUNC_INT1,
                              (uint8_t *)&val->emb_func_int1, 1);
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	1c9a      	adds	r2, r3, #2
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_EMB_FUNC_INT1,
 8002498:	2301      	movs	r3, #1
 800249a:	210a      	movs	r1, #10
 800249c:	6878      	ldr	r0, [r7, #4]
 800249e:	f7ff f8e5 	bl	800166c <ism330dhcx_read_reg>
 80024a2:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d107      	bne.n	80024ba <ism330dhcx_pin_int1_route_get+0x56>
  {
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FSM_INT1_A,
                              (uint8_t *)&val->fsm_int1_a, 1);
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	1cda      	adds	r2, r3, #3
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FSM_INT1_A,
 80024ae:	2301      	movs	r3, #1
 80024b0:	210b      	movs	r1, #11
 80024b2:	6878      	ldr	r0, [r7, #4]
 80024b4:	f7ff f8da 	bl	800166c <ism330dhcx_read_reg>
 80024b8:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d107      	bne.n	80024d0 <ism330dhcx_pin_int1_route_get+0x6c>
  {
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FSM_INT1_B,
                              (uint8_t *)&val->fsm_int1_b, 1);
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	1d1a      	adds	r2, r3, #4
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FSM_INT1_B,
 80024c4:	2301      	movs	r3, #1
 80024c6:	210c      	movs	r1, #12
 80024c8:	6878      	ldr	r0, [r7, #4]
 80024ca:	f7ff f8cf 	bl	800166c <ism330dhcx_read_reg>
 80024ce:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d104      	bne.n	80024e0 <ism330dhcx_pin_int1_route_get+0x7c>
  {
    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
 80024d6:	2100      	movs	r1, #0
 80024d8:	6878      	ldr	r0, [r7, #4]
 80024da:	f7ff fd77 	bl	8001fcc <ism330dhcx_mem_bank_set>
 80024de:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d106      	bne.n	80024f4 <ism330dhcx_pin_int1_route_get+0x90>
  {
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_INT1_CTRL,
                              (uint8_t *)&val->int1_ctrl, 1);
 80024e6:	683a      	ldr	r2, [r7, #0]
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_INT1_CTRL,
 80024e8:	2301      	movs	r3, #1
 80024ea:	210d      	movs	r1, #13
 80024ec:	6878      	ldr	r0, [r7, #4]
 80024ee:	f7ff f8bd 	bl	800166c <ism330dhcx_read_reg>
 80024f2:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d107      	bne.n	800250a <ism330dhcx_pin_int1_route_get+0xa6>
  {
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_MD1_CFG,
                              (uint8_t *)&val->md1_cfg, 1);
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	1c5a      	adds	r2, r3, #1
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_MD1_CFG,
 80024fe:	2301      	movs	r3, #1
 8002500:	215e      	movs	r1, #94	; 0x5e
 8002502:	6878      	ldr	r0, [r7, #4]
 8002504:	f7ff f8b2 	bl	800166c <ism330dhcx_read_reg>
 8002508:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800250a:	68fb      	ldr	r3, [r7, #12]
}
 800250c:	4618      	mov	r0, r3
 800250e:	3710      	adds	r7, #16
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}

08002514 <ism330dhcx_pin_int2_route_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_pin_int2_route_set(stmdev_ctx_t *ctx,
                                      ism330dhcx_pin_int2_route_t *val)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b084      	sub	sp, #16
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
 800251c:	6039      	str	r1, [r7, #0]
  ism330dhcx_tap_cfg2_t tap_cfg2;
  int32_t ret;
  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
 800251e:	2102      	movs	r1, #2
 8002520:	6878      	ldr	r0, [r7, #4]
 8002522:	f7ff fd53 	bl	8001fcc <ism330dhcx_mem_bank_set>
 8002526:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d107      	bne.n	800253e <ism330dhcx_pin_int2_route_set+0x2a>
  {
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_MLC_INT2,
                               (uint8_t *)&val->mlc_int2, 1);
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	1d5a      	adds	r2, r3, #5
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_MLC_INT2,
 8002532:	2301      	movs	r3, #1
 8002534:	2111      	movs	r1, #17
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	f7ff f8b0 	bl	800169c <ism330dhcx_write_reg>
 800253c:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d107      	bne.n	8002554 <ism330dhcx_pin_int2_route_set+0x40>
  {
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_EMB_FUNC_INT2,
                               (uint8_t *)&val->emb_func_int2, 1);
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	1c9a      	adds	r2, r3, #2
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_EMB_FUNC_INT2,
 8002548:	2301      	movs	r3, #1
 800254a:	210e      	movs	r1, #14
 800254c:	6878      	ldr	r0, [r7, #4]
 800254e:	f7ff f8a5 	bl	800169c <ism330dhcx_write_reg>
 8002552:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d107      	bne.n	800256a <ism330dhcx_pin_int2_route_set+0x56>
  {
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_FSM_INT2_A,
                               (uint8_t *)&val->fsm_int2_a, 1);
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	1cda      	adds	r2, r3, #3
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_FSM_INT2_A,
 800255e:	2301      	movs	r3, #1
 8002560:	210f      	movs	r1, #15
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	f7ff f89a 	bl	800169c <ism330dhcx_write_reg>
 8002568:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d107      	bne.n	8002580 <ism330dhcx_pin_int2_route_set+0x6c>
  {
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_FSM_INT2_B,
                               (uint8_t *)&val->fsm_int2_b, 1);
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	1d1a      	adds	r2, r3, #4
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_FSM_INT2_B,
 8002574:	2301      	movs	r3, #1
 8002576:	2110      	movs	r1, #16
 8002578:	6878      	ldr	r0, [r7, #4]
 800257a:	f7ff f88f 	bl	800169c <ism330dhcx_write_reg>
 800257e:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d104      	bne.n	8002590 <ism330dhcx_pin_int2_route_set+0x7c>
  {
    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
 8002586:	2100      	movs	r1, #0
 8002588:	6878      	ldr	r0, [r7, #4]
 800258a:	f7ff fd1f 	bl	8001fcc <ism330dhcx_mem_bank_set>
 800258e:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	2b00      	cmp	r3, #0
 8002594:	f040 80d6 	bne.w	8002744 <ism330dhcx_pin_int2_route_set+0x230>
  {
    if ((val->emb_func_int2.int2_step_detector |
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	789b      	ldrb	r3, [r3, #2]
 800259c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80025a0:	b2da      	uxtb	r2, r3
         val->emb_func_int2.int2_tilt |
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	789b      	ldrb	r3, [r3, #2]
 80025a6:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80025aa:	b2db      	uxtb	r3, r3
    if ((val->emb_func_int2.int2_step_detector |
 80025ac:	4313      	orrs	r3, r2
 80025ae:	b2da      	uxtb	r2, r3
         val->emb_func_int2.int2_sig_mot |
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	789b      	ldrb	r3, [r3, #2]
 80025b4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80025b8:	b2db      	uxtb	r3, r3
         val->emb_func_int2.int2_tilt |
 80025ba:	4313      	orrs	r3, r2
 80025bc:	b2da      	uxtb	r2, r3
         val->emb_func_int2.int2_fsm_lc |
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	789b      	ldrb	r3, [r3, #2]
 80025c2:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80025c6:	b2db      	uxtb	r3, r3
         val->emb_func_int2.int2_sig_mot |
 80025c8:	4313      	orrs	r3, r2
 80025ca:	b2da      	uxtb	r2, r3
         val->fsm_int2_a.int2_fsm1 |
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	78db      	ldrb	r3, [r3, #3]
 80025d0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80025d4:	b2db      	uxtb	r3, r3
         val->emb_func_int2.int2_fsm_lc |
 80025d6:	4313      	orrs	r3, r2
 80025d8:	b2da      	uxtb	r2, r3
         val->fsm_int2_a.int2_fsm2 |
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	78db      	ldrb	r3, [r3, #3]
 80025de:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80025e2:	b2db      	uxtb	r3, r3
         val->fsm_int2_a.int2_fsm1 |
 80025e4:	4313      	orrs	r3, r2
 80025e6:	b2da      	uxtb	r2, r3
         val->fsm_int2_a.int2_fsm3 |
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	78db      	ldrb	r3, [r3, #3]
 80025ec:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80025f0:	b2db      	uxtb	r3, r3
         val->fsm_int2_a.int2_fsm2 |
 80025f2:	4313      	orrs	r3, r2
 80025f4:	b2da      	uxtb	r2, r3
         val->fsm_int2_a.int2_fsm4 |
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	78db      	ldrb	r3, [r3, #3]
 80025fa:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80025fe:	b2db      	uxtb	r3, r3
         val->fsm_int2_a.int2_fsm3 |
 8002600:	4313      	orrs	r3, r2
 8002602:	b2da      	uxtb	r2, r3
         val->fsm_int2_a.int2_fsm5 |
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	78db      	ldrb	r3, [r3, #3]
 8002608:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800260c:	b2db      	uxtb	r3, r3
         val->fsm_int2_a.int2_fsm4 |
 800260e:	4313      	orrs	r3, r2
 8002610:	b2da      	uxtb	r2, r3
         val->fsm_int2_a.int2_fsm6 |
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	78db      	ldrb	r3, [r3, #3]
 8002616:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800261a:	b2db      	uxtb	r3, r3
         val->fsm_int2_a.int2_fsm5 |
 800261c:	4313      	orrs	r3, r2
 800261e:	b2da      	uxtb	r2, r3
         val->fsm_int2_a.int2_fsm7 |
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	78db      	ldrb	r3, [r3, #3]
 8002624:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8002628:	b2db      	uxtb	r3, r3
         val->fsm_int2_a.int2_fsm6 |
 800262a:	4313      	orrs	r3, r2
 800262c:	b2da      	uxtb	r2, r3
         val->fsm_int2_a.int2_fsm8 |
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	78db      	ldrb	r3, [r3, #3]
 8002632:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8002636:	b2db      	uxtb	r3, r3
         val->fsm_int2_a.int2_fsm7 |
 8002638:	4313      	orrs	r3, r2
 800263a:	b2da      	uxtb	r2, r3
         val->fsm_int2_b.int2_fsm9 |
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	791b      	ldrb	r3, [r3, #4]
 8002640:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002644:	b2db      	uxtb	r3, r3
         val->fsm_int2_a.int2_fsm8 |
 8002646:	4313      	orrs	r3, r2
 8002648:	b2da      	uxtb	r2, r3
         val->fsm_int2_b.int2_fsm10 |
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	791b      	ldrb	r3, [r3, #4]
 800264e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002652:	b2db      	uxtb	r3, r3
         val->fsm_int2_b.int2_fsm9 |
 8002654:	4313      	orrs	r3, r2
 8002656:	b2da      	uxtb	r2, r3
         val->fsm_int2_b.int2_fsm11 |
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	791b      	ldrb	r3, [r3, #4]
 800265c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002660:	b2db      	uxtb	r3, r3
         val->fsm_int2_b.int2_fsm10 |
 8002662:	4313      	orrs	r3, r2
 8002664:	b2da      	uxtb	r2, r3
         val->fsm_int2_b.int2_fsm12 |
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	791b      	ldrb	r3, [r3, #4]
 800266a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800266e:	b2db      	uxtb	r3, r3
         val->fsm_int2_b.int2_fsm11 |
 8002670:	4313      	orrs	r3, r2
 8002672:	b2da      	uxtb	r2, r3
         val->fsm_int2_b.int2_fsm13 |
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	791b      	ldrb	r3, [r3, #4]
 8002678:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800267c:	b2db      	uxtb	r3, r3
         val->fsm_int2_b.int2_fsm12 |
 800267e:	4313      	orrs	r3, r2
 8002680:	b2da      	uxtb	r2, r3
         val->fsm_int2_b.int2_fsm14 |
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	791b      	ldrb	r3, [r3, #4]
 8002686:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800268a:	b2db      	uxtb	r3, r3
         val->fsm_int2_b.int2_fsm13 |
 800268c:	4313      	orrs	r3, r2
 800268e:	b2da      	uxtb	r2, r3
         val->fsm_int2_b.int2_fsm15 |
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	791b      	ldrb	r3, [r3, #4]
 8002694:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8002698:	b2db      	uxtb	r3, r3
         val->fsm_int2_b.int2_fsm14 |
 800269a:	4313      	orrs	r3, r2
 800269c:	b2da      	uxtb	r2, r3
         val->fsm_int2_b.int2_fsm16 |
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	791b      	ldrb	r3, [r3, #4]
 80026a2:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80026a6:	b2db      	uxtb	r3, r3
         val->fsm_int2_b.int2_fsm15 |
 80026a8:	4313      	orrs	r3, r2
 80026aa:	b2da      	uxtb	r2, r3
         val->mlc_int2.int2_mlc1 |
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	795b      	ldrb	r3, [r3, #5]
 80026b0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80026b4:	b2db      	uxtb	r3, r3
         val->fsm_int2_b.int2_fsm16 |
 80026b6:	4313      	orrs	r3, r2
 80026b8:	b2da      	uxtb	r2, r3
         val->mlc_int2.int2_mlc2 |
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	795b      	ldrb	r3, [r3, #5]
 80026be:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80026c2:	b2db      	uxtb	r3, r3
         val->mlc_int2.int2_mlc1 |
 80026c4:	4313      	orrs	r3, r2
 80026c6:	b2da      	uxtb	r2, r3
         val->mlc_int2.int2_mlc3 |
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	795b      	ldrb	r3, [r3, #5]
 80026cc:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80026d0:	b2db      	uxtb	r3, r3
         val->mlc_int2.int2_mlc2 |
 80026d2:	4313      	orrs	r3, r2
 80026d4:	b2da      	uxtb	r2, r3
         val->mlc_int2.int2_mlc4 |
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	795b      	ldrb	r3, [r3, #5]
 80026da:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80026de:	b2db      	uxtb	r3, r3
         val->mlc_int2.int2_mlc3 |
 80026e0:	4313      	orrs	r3, r2
 80026e2:	b2da      	uxtb	r2, r3
         val->mlc_int2.int2_mlc5 |
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	795b      	ldrb	r3, [r3, #5]
 80026e8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80026ec:	b2db      	uxtb	r3, r3
         val->mlc_int2.int2_mlc4 |
 80026ee:	4313      	orrs	r3, r2
 80026f0:	b2da      	uxtb	r2, r3
         val->mlc_int2.int2_mlc6 |
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	795b      	ldrb	r3, [r3, #5]
 80026f6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80026fa:	b2db      	uxtb	r3, r3
         val->mlc_int2.int2_mlc5 |
 80026fc:	4313      	orrs	r3, r2
 80026fe:	b2da      	uxtb	r2, r3
         val->mlc_int2.int2_mlc7 |
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	795b      	ldrb	r3, [r3, #5]
 8002704:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8002708:	b2db      	uxtb	r3, r3
         val->mlc_int2.int2_mlc6 |
 800270a:	4313      	orrs	r3, r2
 800270c:	b2da      	uxtb	r2, r3
         val->mlc_int2.int2_mlc8) != PROPERTY_DISABLE)
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	795b      	ldrb	r3, [r3, #5]
 8002712:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8002716:	b2db      	uxtb	r3, r3
         val->mlc_int2.int2_mlc7 |
 8002718:	4313      	orrs	r3, r2
 800271a:	b2db      	uxtb	r3, r3
    if ((val->emb_func_int2.int2_step_detector |
 800271c:	2b00      	cmp	r3, #0
 800271e:	d005      	beq.n	800272c <ism330dhcx_pin_int2_route_set+0x218>
    {
      val->md2_cfg.int2_emb_func = PROPERTY_ENABLE;
 8002720:	683a      	ldr	r2, [r7, #0]
 8002722:	7853      	ldrb	r3, [r2, #1]
 8002724:	f043 0302 	orr.w	r3, r3, #2
 8002728:	7053      	strb	r3, [r2, #1]
 800272a:	e004      	b.n	8002736 <ism330dhcx_pin_int2_route_set+0x222>
    }

    else
    {
      val->md2_cfg.int2_emb_func = PROPERTY_DISABLE;
 800272c:	683a      	ldr	r2, [r7, #0]
 800272e:	7853      	ldrb	r3, [r2, #1]
 8002730:	f36f 0341 	bfc	r3, #1, #1
 8002734:	7053      	strb	r3, [r2, #1]
    }

    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_INT2_CTRL,
                               (uint8_t *)&val->int2_ctrl, 1);
 8002736:	683a      	ldr	r2, [r7, #0]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_INT2_CTRL,
 8002738:	2301      	movs	r3, #1
 800273a:	210e      	movs	r1, #14
 800273c:	6878      	ldr	r0, [r7, #4]
 800273e:	f7fe ffad 	bl	800169c <ism330dhcx_write_reg>
 8002742:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d107      	bne.n	800275a <ism330dhcx_pin_int2_route_set+0x246>
  {
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_MD2_CFG,
                               (uint8_t *)&val->md2_cfg, 1);
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	1c5a      	adds	r2, r3, #1
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_MD2_CFG,
 800274e:	2301      	movs	r3, #1
 8002750:	215f      	movs	r1, #95	; 0x5f
 8002752:	6878      	ldr	r0, [r7, #4]
 8002754:	f7fe ffa2 	bl	800169c <ism330dhcx_write_reg>
 8002758:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d107      	bne.n	8002770 <ism330dhcx_pin_int2_route_set+0x25c>
  {
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_TAP_CFG2,
 8002760:	f107 0208 	add.w	r2, r7, #8
 8002764:	2301      	movs	r3, #1
 8002766:	2158      	movs	r1, #88	; 0x58
 8002768:	6878      	ldr	r0, [r7, #4]
 800276a:	f7fe ff7f 	bl	800166c <ism330dhcx_read_reg>
 800276e:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&tap_cfg2, 1);
  }

  if (ret == 0)
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d16b      	bne.n	800284e <ism330dhcx_pin_int2_route_set+0x33a>
  {
    if ((val->int2_ctrl.int2_drdy_xl |
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	781b      	ldrb	r3, [r3, #0]
 800277a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800277e:	b2da      	uxtb	r2, r3
         val->int2_ctrl.int2_drdy_g |
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	781b      	ldrb	r3, [r3, #0]
 8002784:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002788:	b2db      	uxtb	r3, r3
    if ((val->int2_ctrl.int2_drdy_xl |
 800278a:	4313      	orrs	r3, r2
 800278c:	b2da      	uxtb	r2, r3
         val->int2_ctrl.int2_drdy_temp |
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	781b      	ldrb	r3, [r3, #0]
 8002792:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002796:	b2db      	uxtb	r3, r3
         val->int2_ctrl.int2_drdy_g |
 8002798:	4313      	orrs	r3, r2
 800279a:	b2da      	uxtb	r2, r3
         val->int2_ctrl.int2_fifo_th |
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	781b      	ldrb	r3, [r3, #0]
 80027a0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80027a4:	b2db      	uxtb	r3, r3
         val->int2_ctrl.int2_drdy_temp |
 80027a6:	4313      	orrs	r3, r2
 80027a8:	b2da      	uxtb	r2, r3
         val->int2_ctrl.int2_fifo_ovr |
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	781b      	ldrb	r3, [r3, #0]
 80027ae:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80027b2:	b2db      	uxtb	r3, r3
         val->int2_ctrl.int2_fifo_th |
 80027b4:	4313      	orrs	r3, r2
 80027b6:	b2da      	uxtb	r2, r3
         val->int2_ctrl.int2_fifo_full |
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	781b      	ldrb	r3, [r3, #0]
 80027bc:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80027c0:	b2db      	uxtb	r3, r3
         val->int2_ctrl.int2_fifo_ovr |
 80027c2:	4313      	orrs	r3, r2
 80027c4:	b2da      	uxtb	r2, r3
         val->int2_ctrl.int2_cnt_bdr |
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	781b      	ldrb	r3, [r3, #0]
 80027ca:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80027ce:	b2db      	uxtb	r3, r3
         val->int2_ctrl.int2_fifo_full |
 80027d0:	4313      	orrs	r3, r2
 80027d2:	b2da      	uxtb	r2, r3
         val->md2_cfg.int2_6d |
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	785b      	ldrb	r3, [r3, #1]
 80027d8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80027dc:	b2db      	uxtb	r3, r3
         val->int2_ctrl.int2_cnt_bdr |
 80027de:	4313      	orrs	r3, r2
 80027e0:	b2da      	uxtb	r2, r3
         val->md2_cfg.int2_double_tap |
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	785b      	ldrb	r3, [r3, #1]
 80027e6:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80027ea:	b2db      	uxtb	r3, r3
         val->md2_cfg.int2_6d |
 80027ec:	4313      	orrs	r3, r2
 80027ee:	b2da      	uxtb	r2, r3
         val->md2_cfg.int2_ff |
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	785b      	ldrb	r3, [r3, #1]
 80027f4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80027f8:	b2db      	uxtb	r3, r3
         val->md2_cfg.int2_double_tap |
 80027fa:	4313      	orrs	r3, r2
 80027fc:	b2da      	uxtb	r2, r3
         val->md2_cfg.int2_wu |
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	785b      	ldrb	r3, [r3, #1]
 8002802:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8002806:	b2db      	uxtb	r3, r3
         val->md2_cfg.int2_ff |
 8002808:	4313      	orrs	r3, r2
 800280a:	b2da      	uxtb	r2, r3
         val->md2_cfg.int2_single_tap |
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	785b      	ldrb	r3, [r3, #1]
 8002810:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8002814:	b2db      	uxtb	r3, r3
         val->md2_cfg.int2_wu |
 8002816:	4313      	orrs	r3, r2
 8002818:	b2da      	uxtb	r2, r3
         val->md2_cfg.int2_sleep_change) != PROPERTY_DISABLE)
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	785b      	ldrb	r3, [r3, #1]
 800281e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8002822:	b2db      	uxtb	r3, r3
         val->md2_cfg.int2_single_tap |
 8002824:	4313      	orrs	r3, r2
 8002826:	b2db      	uxtb	r3, r3
    if ((val->int2_ctrl.int2_drdy_xl |
 8002828:	2b00      	cmp	r3, #0
 800282a:	d004      	beq.n	8002836 <ism330dhcx_pin_int2_route_set+0x322>
    {
      tap_cfg2.interrupts_enable = PROPERTY_ENABLE;
 800282c:	7a3b      	ldrb	r3, [r7, #8]
 800282e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002832:	723b      	strb	r3, [r7, #8]
 8002834:	e003      	b.n	800283e <ism330dhcx_pin_int2_route_set+0x32a>
    }

    else
    {
      tap_cfg2.interrupts_enable = PROPERTY_DISABLE;
 8002836:	7a3b      	ldrb	r3, [r7, #8]
 8002838:	f36f 13c7 	bfc	r3, #7, #1
 800283c:	723b      	strb	r3, [r7, #8]
    }

    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_TAP_CFG2,
 800283e:	f107 0208 	add.w	r2, r7, #8
 8002842:	2301      	movs	r3, #1
 8002844:	2158      	movs	r1, #88	; 0x58
 8002846:	6878      	ldr	r0, [r7, #4]
 8002848:	f7fe ff28 	bl	800169c <ism330dhcx_write_reg>
 800284c:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&tap_cfg2, 1);
  }

  return ret;
 800284e:	68fb      	ldr	r3, [r7, #12]
}
 8002850:	4618      	mov	r0, r3
 8002852:	3710      	adds	r7, #16
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}

08002858 <ism330dhcx_pin_int2_route_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_pin_int2_route_get(stmdev_ctx_t *ctx,
                                      ism330dhcx_pin_int2_route_t *val)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b084      	sub	sp, #16
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
 8002860:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
 8002862:	2102      	movs	r1, #2
 8002864:	6878      	ldr	r0, [r7, #4]
 8002866:	f7ff fbb1 	bl	8001fcc <ism330dhcx_mem_bank_set>
 800286a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d107      	bne.n	8002882 <ism330dhcx_pin_int2_route_get+0x2a>
  {
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_MLC_INT2,
                              (uint8_t *)&val->mlc_int2, 1);
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	1d5a      	adds	r2, r3, #5
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_MLC_INT2,
 8002876:	2301      	movs	r3, #1
 8002878:	2111      	movs	r1, #17
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	f7fe fef6 	bl	800166c <ism330dhcx_read_reg>
 8002880:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d107      	bne.n	8002898 <ism330dhcx_pin_int2_route_get+0x40>
  {
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_EMB_FUNC_INT2,
                              (uint8_t *)&val->emb_func_int2, 1);
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	1c9a      	adds	r2, r3, #2
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_EMB_FUNC_INT2,
 800288c:	2301      	movs	r3, #1
 800288e:	210e      	movs	r1, #14
 8002890:	6878      	ldr	r0, [r7, #4]
 8002892:	f7fe feeb 	bl	800166c <ism330dhcx_read_reg>
 8002896:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d107      	bne.n	80028ae <ism330dhcx_pin_int2_route_get+0x56>
  {
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FSM_INT2_A,
                              (uint8_t *)&val->fsm_int2_a, 1);
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	1cda      	adds	r2, r3, #3
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FSM_INT2_A,
 80028a2:	2301      	movs	r3, #1
 80028a4:	210f      	movs	r1, #15
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	f7fe fee0 	bl	800166c <ism330dhcx_read_reg>
 80028ac:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d107      	bne.n	80028c4 <ism330dhcx_pin_int2_route_get+0x6c>
  {
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FSM_INT2_B,
                              (uint8_t *)&val->fsm_int2_b, 1);
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	1d1a      	adds	r2, r3, #4
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FSM_INT2_B,
 80028b8:	2301      	movs	r3, #1
 80028ba:	2110      	movs	r1, #16
 80028bc:	6878      	ldr	r0, [r7, #4]
 80028be:	f7fe fed5 	bl	800166c <ism330dhcx_read_reg>
 80028c2:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d104      	bne.n	80028d4 <ism330dhcx_pin_int2_route_get+0x7c>
  {
    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
 80028ca:	2100      	movs	r1, #0
 80028cc:	6878      	ldr	r0, [r7, #4]
 80028ce:	f7ff fb7d 	bl	8001fcc <ism330dhcx_mem_bank_set>
 80028d2:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d106      	bne.n	80028e8 <ism330dhcx_pin_int2_route_get+0x90>
  {
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_INT2_CTRL,
                              (uint8_t *)&val->int2_ctrl, 1);
 80028da:	683a      	ldr	r2, [r7, #0]
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_INT2_CTRL,
 80028dc:	2301      	movs	r3, #1
 80028de:	210e      	movs	r1, #14
 80028e0:	6878      	ldr	r0, [r7, #4]
 80028e2:	f7fe fec3 	bl	800166c <ism330dhcx_read_reg>
 80028e6:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d107      	bne.n	80028fe <ism330dhcx_pin_int2_route_get+0xa6>
  {
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_MD2_CFG,
                              (uint8_t *)&val->md2_cfg, 1);
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	1c5a      	adds	r2, r3, #1
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_MD2_CFG,
 80028f2:	2301      	movs	r3, #1
 80028f4:	215f      	movs	r1, #95	; 0x5f
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	f7fe feb8 	bl	800166c <ism330dhcx_read_reg>
 80028fc:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80028fe:	68fb      	ldr	r3, [r7, #12]
}
 8002900:	4618      	mov	r0, r3
 8002902:	3710      	adds	r7, #16
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}

08002908 <ism330dhcx_fifo_watermark_set>:
  * @param  val    Change the values of wtm in reg FIFO_CTRL1
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fifo_watermark_set(stmdev_ctx_t *ctx, uint16_t val)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b086      	sub	sp, #24
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
 8002910:	460b      	mov	r3, r1
 8002912:	807b      	strh	r3, [r7, #2]
  ism330dhcx_fifo_ctrl1_t fifo_ctrl1;
  ism330dhcx_fifo_ctrl2_t fifo_ctrl2;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FIFO_CTRL2,
 8002914:	f107 020c 	add.w	r2, r7, #12
 8002918:	2301      	movs	r3, #1
 800291a:	2108      	movs	r1, #8
 800291c:	6878      	ldr	r0, [r7, #4]
 800291e:	f7fe fea5 	bl	800166c <ism330dhcx_read_reg>
 8002922:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&fifo_ctrl2, 1);

  if (ret == 0)
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d111      	bne.n	800294e <ism330dhcx_fifo_watermark_set+0x46>
  {
    fifo_ctrl2.wtm = (uint8_t)(val / 256U) & 0x01U;
 800292a:	887b      	ldrh	r3, [r7, #2]
 800292c:	0a1b      	lsrs	r3, r3, #8
 800292e:	b29b      	uxth	r3, r3
 8002930:	f003 0301 	and.w	r3, r3, #1
 8002934:	b2da      	uxtb	r2, r3
 8002936:	7b3b      	ldrb	r3, [r7, #12]
 8002938:	f362 0300 	bfi	r3, r2, #0, #1
 800293c:	733b      	strb	r3, [r7, #12]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_FIFO_CTRL2,
 800293e:	f107 020c 	add.w	r2, r7, #12
 8002942:	2301      	movs	r3, #1
 8002944:	2108      	movs	r1, #8
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	f7fe fea8 	bl	800169c <ism330dhcx_write_reg>
 800294c:	6178      	str	r0, [r7, #20]
                               (uint8_t *)&fifo_ctrl2, 1);
  }

  if (ret == 0)
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d10a      	bne.n	800296a <ism330dhcx_fifo_watermark_set+0x62>
  {
    fifo_ctrl1.wtm = (uint8_t)(val - (fifo_ctrl2.wtm * 256U));
 8002954:	887b      	ldrh	r3, [r7, #2]
 8002956:	b2db      	uxtb	r3, r3
 8002958:	743b      	strb	r3, [r7, #16]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_FIFO_CTRL1,
 800295a:	f107 0210 	add.w	r2, r7, #16
 800295e:	2301      	movs	r3, #1
 8002960:	2107      	movs	r1, #7
 8002962:	6878      	ldr	r0, [r7, #4]
 8002964:	f7fe fe9a 	bl	800169c <ism330dhcx_write_reg>
 8002968:	6178      	str	r0, [r7, #20]
                               (uint8_t *)&fifo_ctrl1, 1);
  }

  return ret;
 800296a:	697b      	ldr	r3, [r7, #20]
}
 800296c:	4618      	mov	r0, r3
 800296e:	3718      	adds	r7, #24
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}

08002974 <ism330dhcx_fifo_xl_batch_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fifo_xl_batch_set(stmdev_ctx_t *ctx,
                                     ism330dhcx_bdr_xl_t val)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b084      	sub	sp, #16
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
 800297c:	460b      	mov	r3, r1
 800297e:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_fifo_ctrl3_t fifo_ctrl3;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FIFO_CTRL3,
 8002980:	f107 0208 	add.w	r2, r7, #8
 8002984:	2301      	movs	r3, #1
 8002986:	2109      	movs	r1, #9
 8002988:	6878      	ldr	r0, [r7, #4]
 800298a:	f7fe fe6f 	bl	800166c <ism330dhcx_read_reg>
 800298e:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&fifo_ctrl3, 1);

  if (ret == 0)
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d10f      	bne.n	80029b6 <ism330dhcx_fifo_xl_batch_set+0x42>
  {
    fifo_ctrl3.bdr_xl = (uint8_t)val;
 8002996:	78fb      	ldrb	r3, [r7, #3]
 8002998:	f003 030f 	and.w	r3, r3, #15
 800299c:	b2da      	uxtb	r2, r3
 800299e:	7a3b      	ldrb	r3, [r7, #8]
 80029a0:	f362 0303 	bfi	r3, r2, #0, #4
 80029a4:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_FIFO_CTRL3,
 80029a6:	f107 0208 	add.w	r2, r7, #8
 80029aa:	2301      	movs	r3, #1
 80029ac:	2109      	movs	r1, #9
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f7fe fe74 	bl	800169c <ism330dhcx_write_reg>
 80029b4:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&fifo_ctrl3, 1);
  }

  return ret;
 80029b6:	68fb      	ldr	r3, [r7, #12]
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3710      	adds	r7, #16
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}

080029c0 <ism330dhcx_fifo_gy_batch_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fifo_gy_batch_set(stmdev_ctx_t *ctx,
                                     ism330dhcx_bdr_gy_t val)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b084      	sub	sp, #16
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
 80029c8:	460b      	mov	r3, r1
 80029ca:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_fifo_ctrl3_t fifo_ctrl3;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FIFO_CTRL3,
 80029cc:	f107 0208 	add.w	r2, r7, #8
 80029d0:	2301      	movs	r3, #1
 80029d2:	2109      	movs	r1, #9
 80029d4:	6878      	ldr	r0, [r7, #4]
 80029d6:	f7fe fe49 	bl	800166c <ism330dhcx_read_reg>
 80029da:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&fifo_ctrl3, 1);

  if (ret == 0)
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d10f      	bne.n	8002a02 <ism330dhcx_fifo_gy_batch_set+0x42>
  {
    fifo_ctrl3.bdr_gy = (uint8_t)val;
 80029e2:	78fb      	ldrb	r3, [r7, #3]
 80029e4:	f003 030f 	and.w	r3, r3, #15
 80029e8:	b2da      	uxtb	r2, r3
 80029ea:	7a3b      	ldrb	r3, [r7, #8]
 80029ec:	f362 1307 	bfi	r3, r2, #4, #4
 80029f0:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_FIFO_CTRL3,
 80029f2:	f107 0208 	add.w	r2, r7, #8
 80029f6:	2301      	movs	r3, #1
 80029f8:	2109      	movs	r1, #9
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	f7fe fe4e 	bl	800169c <ism330dhcx_write_reg>
 8002a00:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&fifo_ctrl3, 1);
  }

  return ret;
 8002a02:	68fb      	ldr	r3, [r7, #12]
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	3710      	adds	r7, #16
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}

08002a0c <ism330dhcx_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fifo_mode_set(stmdev_ctx_t *ctx,
                                 ism330dhcx_fifo_mode_t val)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b084      	sub	sp, #16
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
 8002a14:	460b      	mov	r3, r1
 8002a16:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_fifo_ctrl4_t fifo_ctrl4;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FIFO_CTRL4,
 8002a18:	f107 0208 	add.w	r2, r7, #8
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	210a      	movs	r1, #10
 8002a20:	6878      	ldr	r0, [r7, #4]
 8002a22:	f7fe fe23 	bl	800166c <ism330dhcx_read_reg>
 8002a26:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&fifo_ctrl4, 1);

  if (ret == 0)
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d10f      	bne.n	8002a4e <ism330dhcx_fifo_mode_set+0x42>
  {
    fifo_ctrl4.fifo_mode = (uint8_t)val;
 8002a2e:	78fb      	ldrb	r3, [r7, #3]
 8002a30:	f003 0307 	and.w	r3, r3, #7
 8002a34:	b2da      	uxtb	r2, r3
 8002a36:	7a3b      	ldrb	r3, [r7, #8]
 8002a38:	f362 0302 	bfi	r3, r2, #0, #3
 8002a3c:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_FIFO_CTRL4,
 8002a3e:	f107 0208 	add.w	r2, r7, #8
 8002a42:	2301      	movs	r3, #1
 8002a44:	210a      	movs	r1, #10
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	f7fe fe28 	bl	800169c <ism330dhcx_write_reg>
 8002a4c:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&fifo_ctrl4, 1);
  }

  return ret;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	3710      	adds	r7, #16
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}

08002a58 <ism330dhcx_fsm_enable_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fsm_enable_get(stmdev_ctx_t *ctx,
                                  ism330dhcx_emb_fsm_enable_t *val)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b084      	sub	sp, #16
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
 8002a60:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
 8002a62:	2102      	movs	r1, #2
 8002a64:	6878      	ldr	r0, [r7, #4]
 8002a66:	f7ff fab1 	bl	8001fcc <ism330dhcx_mem_bank_set>
 8002a6a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d106      	bne.n	8002a80 <ism330dhcx_fsm_enable_get+0x28>
  {
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FSM_ENABLE_A,
                              (uint8_t *)&val->fsm_enable_a, 1);
 8002a72:	683a      	ldr	r2, [r7, #0]
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FSM_ENABLE_A,
 8002a74:	2301      	movs	r3, #1
 8002a76:	2146      	movs	r1, #70	; 0x46
 8002a78:	6878      	ldr	r0, [r7, #4]
 8002a7a:	f7fe fdf7 	bl	800166c <ism330dhcx_read_reg>
 8002a7e:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d107      	bne.n	8002a96 <ism330dhcx_fsm_enable_get+0x3e>
  {
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FSM_ENABLE_B,
                              (uint8_t *)&val->fsm_enable_b, 1);
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	1c5a      	adds	r2, r3, #1
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FSM_ENABLE_B,
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	2147      	movs	r1, #71	; 0x47
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f7fe fdec 	bl	800166c <ism330dhcx_read_reg>
 8002a94:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d104      	bne.n	8002aa6 <ism330dhcx_fsm_enable_get+0x4e>
  {
    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
 8002a9c:	2100      	movs	r1, #0
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	f7ff fa94 	bl	8001fcc <ism330dhcx_mem_bank_set>
 8002aa4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	3710      	adds	r7, #16
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}

08002ab0 <ism330dhcx_fsm_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                     ism330dhcx_fsm_odr_t *val)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b084      	sub	sp, #16
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
 8002ab8:	6039      	str	r1, [r7, #0]
  ism330dhcx_emb_func_odr_cfg_b_t emb_func_odr_cfg_b;
  int32_t ret;
  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
 8002aba:	2102      	movs	r1, #2
 8002abc:	6878      	ldr	r0, [r7, #4]
 8002abe:	f7ff fa85 	bl	8001fcc <ism330dhcx_mem_bank_set>
 8002ac2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d107      	bne.n	8002ada <ism330dhcx_fsm_data_rate_get+0x2a>
  {
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_EMB_FUNC_ODR_CFG_B,
 8002aca:	f107 0208 	add.w	r2, r7, #8
 8002ace:	2301      	movs	r3, #1
 8002ad0:	215f      	movs	r1, #95	; 0x5f
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f7fe fdca 	bl	800166c <ism330dhcx_read_reg>
 8002ad8:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&emb_func_odr_cfg_b, 1);
  }

  if (ret == 0)
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d104      	bne.n	8002aea <ism330dhcx_fsm_data_rate_get+0x3a>
  {
    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
 8002ae0:	2100      	movs	r1, #0
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	f7ff fa72 	bl	8001fcc <ism330dhcx_mem_bank_set>
 8002ae8:	60f8      	str	r0, [r7, #12]
  }

  switch (emb_func_odr_cfg_b.fsm_odr)
 8002aea:	7a3b      	ldrb	r3, [r7, #8]
 8002aec:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	2b03      	cmp	r3, #3
 8002af4:	d81a      	bhi.n	8002b2c <ism330dhcx_fsm_data_rate_get+0x7c>
 8002af6:	a201      	add	r2, pc, #4	; (adr r2, 8002afc <ism330dhcx_fsm_data_rate_get+0x4c>)
 8002af8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002afc:	08002b0d 	.word	0x08002b0d
 8002b00:	08002b15 	.word	0x08002b15
 8002b04:	08002b1d 	.word	0x08002b1d
 8002b08:	08002b25 	.word	0x08002b25
  {
    case ISM330DHCX_ODR_FSM_12Hz5:
      *val = ISM330DHCX_ODR_FSM_12Hz5;
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	701a      	strb	r2, [r3, #0]
      break;
 8002b12:	e00f      	b.n	8002b34 <ism330dhcx_fsm_data_rate_get+0x84>

    case ISM330DHCX_ODR_FSM_26Hz:
      *val = ISM330DHCX_ODR_FSM_26Hz;
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	2201      	movs	r2, #1
 8002b18:	701a      	strb	r2, [r3, #0]
      break;
 8002b1a:	e00b      	b.n	8002b34 <ism330dhcx_fsm_data_rate_get+0x84>

    case ISM330DHCX_ODR_FSM_52Hz:
      *val = ISM330DHCX_ODR_FSM_52Hz;
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	2202      	movs	r2, #2
 8002b20:	701a      	strb	r2, [r3, #0]
      break;
 8002b22:	e007      	b.n	8002b34 <ism330dhcx_fsm_data_rate_get+0x84>

    case ISM330DHCX_ODR_FSM_104Hz:
      *val = ISM330DHCX_ODR_FSM_104Hz;
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	2203      	movs	r2, #3
 8002b28:	701a      	strb	r2, [r3, #0]
      break;
 8002b2a:	e003      	b.n	8002b34 <ism330dhcx_fsm_data_rate_get+0x84>

    default:
      *val = ISM330DHCX_ODR_FSM_12Hz5;
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	701a      	strb	r2, [r3, #0]
      break;
 8002b32:	bf00      	nop
  }

  return ret;
 8002b34:	68fb      	ldr	r3, [r7, #12]
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3710      	adds	r7, #16
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop

08002b40 <ism330dhcx_mlc_get>:
  * @param  val      Get the values of mlc_en in
  *                  reg EMB_FUNC_EN_B
  *
  */
int32_t ism330dhcx_mlc_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b084      	sub	sp, #16
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
 8002b48:	6039      	str	r1, [r7, #0]
  ism330dhcx_emb_func_en_b_t reg;
  int32_t ret;
  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
 8002b4a:	2102      	movs	r1, #2
 8002b4c:	6878      	ldr	r0, [r7, #4]
 8002b4e:	f7ff fa3d 	bl	8001fcc <ism330dhcx_mem_bank_set>
 8002b52:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d107      	bne.n	8002b6a <ism330dhcx_mlc_get+0x2a>
  {
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_EMB_FUNC_EN_B,
 8002b5a:	f107 0208 	add.w	r2, r7, #8
 8002b5e:	2301      	movs	r3, #1
 8002b60:	2105      	movs	r1, #5
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	f7fe fd82 	bl	800166c <ism330dhcx_read_reg>
 8002b68:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&reg, 1);
  }

  if (ret == 0)
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d10b      	bne.n	8002b88 <ism330dhcx_mlc_get+0x48>
  {
    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
 8002b70:	2100      	movs	r1, #0
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	f7ff fa2a 	bl	8001fcc <ism330dhcx_mem_bank_set>
 8002b78:	60f8      	str	r0, [r7, #12]
    *val  = reg.mlc_en;
 8002b7a:	7a3b      	ldrb	r3, [r7, #8]
 8002b7c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	461a      	mov	r2, r3
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8002b88:	68fb      	ldr	r3, [r7, #12]
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3710      	adds	r7, #16
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}

08002b92 <ism330dhcx_mlc_status_get>:
  * @param  val      register MLC_STATUS_MAINPAGE
  *
  */
int32_t ism330dhcx_mlc_status_get(stmdev_ctx_t *ctx,
                                  ism330dhcx_mlc_status_mainpage_t *val)
{
 8002b92:	b580      	push	{r7, lr}
 8002b94:	b082      	sub	sp, #8
 8002b96:	af00      	add	r7, sp, #0
 8002b98:	6078      	str	r0, [r7, #4]
 8002b9a:	6039      	str	r1, [r7, #0]
  return ism330dhcx_read_reg(ctx, ISM330DHCX_MLC_STATUS_MAINPAGE,
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	683a      	ldr	r2, [r7, #0]
 8002ba0:	2138      	movs	r1, #56	; 0x38
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f7fe fd62 	bl	800166c <ism330dhcx_read_reg>
 8002ba8:	4603      	mov	r3, r0
                             (uint8_t *) val, 1);
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	3708      	adds	r7, #8
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
	...

08002bb4 <ism330dhcx_mlc_data_rate_get>:
  *                  reg EMB_FUNC_ODR_CFG_C
  *
  */
int32_t ism330dhcx_mlc_data_rate_get(stmdev_ctx_t *ctx,
                                     ism330dhcx_mlc_odr_t *val)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b084      	sub	sp, #16
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
 8002bbc:	6039      	str	r1, [r7, #0]
  ism330dhcx_emb_func_odr_cfg_c_t reg;
  int32_t ret;
  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
 8002bbe:	2102      	movs	r1, #2
 8002bc0:	6878      	ldr	r0, [r7, #4]
 8002bc2:	f7ff fa03 	bl	8001fcc <ism330dhcx_mem_bank_set>
 8002bc6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d107      	bne.n	8002bde <ism330dhcx_mlc_data_rate_get+0x2a>
  {
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_EMB_FUNC_ODR_CFG_C,
 8002bce:	f107 0208 	add.w	r2, r7, #8
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	2160      	movs	r1, #96	; 0x60
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	f7fe fd48 	bl	800166c <ism330dhcx_read_reg>
 8002bdc:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&reg, 1);
  }

  if (ret == 0)
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d12a      	bne.n	8002c3a <ism330dhcx_mlc_data_rate_get+0x86>
  {
    switch (reg.mlc_odr)
 8002be4:	7a3b      	ldrb	r3, [r7, #8]
 8002be6:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8002bea:	b2db      	uxtb	r3, r3
 8002bec:	2b03      	cmp	r3, #3
 8002bee:	d81b      	bhi.n	8002c28 <ism330dhcx_mlc_data_rate_get+0x74>
 8002bf0:	a201      	add	r2, pc, #4	; (adr r2, 8002bf8 <ism330dhcx_mlc_data_rate_get+0x44>)
 8002bf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bf6:	bf00      	nop
 8002bf8:	08002c09 	.word	0x08002c09
 8002bfc:	08002c11 	.word	0x08002c11
 8002c00:	08002c19 	.word	0x08002c19
 8002c04:	08002c21 	.word	0x08002c21
    {
      case ISM330DHCX_ODR_PRGS_12Hz5:
        *val = ISM330DHCX_ODR_PRGS_12Hz5;
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	701a      	strb	r2, [r3, #0]
        break;
 8002c0e:	e00f      	b.n	8002c30 <ism330dhcx_mlc_data_rate_get+0x7c>

      case ISM330DHCX_ODR_PRGS_26Hz:
        *val = ISM330DHCX_ODR_PRGS_26Hz;
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	2201      	movs	r2, #1
 8002c14:	701a      	strb	r2, [r3, #0]
        break;
 8002c16:	e00b      	b.n	8002c30 <ism330dhcx_mlc_data_rate_get+0x7c>

      case ISM330DHCX_ODR_PRGS_52Hz:
        *val = ISM330DHCX_ODR_PRGS_52Hz;
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	2202      	movs	r2, #2
 8002c1c:	701a      	strb	r2, [r3, #0]
        break;
 8002c1e:	e007      	b.n	8002c30 <ism330dhcx_mlc_data_rate_get+0x7c>

      case ISM330DHCX_ODR_PRGS_104Hz:
        *val = ISM330DHCX_ODR_PRGS_104Hz;
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	2203      	movs	r2, #3
 8002c24:	701a      	strb	r2, [r3, #0]
        break;
 8002c26:	e003      	b.n	8002c30 <ism330dhcx_mlc_data_rate_get+0x7c>

      default:
        *val = ISM330DHCX_ODR_PRGS_12Hz5;
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	701a      	strb	r2, [r3, #0]
        break;
 8002c2e:	bf00      	nop
    }

    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
 8002c30:	2100      	movs	r1, #0
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	f7ff f9ca 	bl	8001fcc <ism330dhcx_mem_bank_set>
 8002c38:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	3710      	adds	r7, #16
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}

08002c44 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c48:	4b11      	ldr	r3, [pc, #68]	; (8002c90 <HAL_Init+0x4c>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a10      	ldr	r2, [pc, #64]	; (8002c90 <HAL_Init+0x4c>)
 8002c4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c52:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c54:	2003      	movs	r0, #3
 8002c56:	f000 f967 	bl	8002f28 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002c5a:	f003 fe31 	bl	80068c0 <HAL_RCC_GetSysClockFreq>
 8002c5e:	4602      	mov	r2, r0
 8002c60:	4b0c      	ldr	r3, [pc, #48]	; (8002c94 <HAL_Init+0x50>)
 8002c62:	6a1b      	ldr	r3, [r3, #32]
 8002c64:	f003 030f 	and.w	r3, r3, #15
 8002c68:	490b      	ldr	r1, [pc, #44]	; (8002c98 <HAL_Init+0x54>)
 8002c6a:	5ccb      	ldrb	r3, [r1, r3]
 8002c6c:	fa22 f303 	lsr.w	r3, r2, r3
 8002c70:	4a0a      	ldr	r2, [pc, #40]	; (8002c9c <HAL_Init+0x58>)
 8002c72:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002c74:	200f      	movs	r0, #15
 8002c76:	f012 fb23 	bl	80152c0 <HAL_InitTick>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d001      	beq.n	8002c84 <HAL_Init+0x40>
  {
    return HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	e002      	b.n	8002c8a <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002c84:	f012 feda 	bl	8015a3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c88:	2300      	movs	r3, #0
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	40022000 	.word	0x40022000
 8002c94:	46020c00 	.word	0x46020c00
 8002c98:	08027dc8 	.word	0x08027dc8
 8002c9c:	20000044 	.word	0x20000044

08002ca0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002ca4:	4b06      	ldr	r3, [pc, #24]	; (8002cc0 <HAL_IncTick+0x20>)
 8002ca6:	781b      	ldrb	r3, [r3, #0]
 8002ca8:	461a      	mov	r2, r3
 8002caa:	4b06      	ldr	r3, [pc, #24]	; (8002cc4 <HAL_IncTick+0x24>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4413      	add	r3, r2
 8002cb0:	4a04      	ldr	r2, [pc, #16]	; (8002cc4 <HAL_IncTick+0x24>)
 8002cb2:	6013      	str	r3, [r2, #0]
}
 8002cb4:	bf00      	nop
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbc:	4770      	bx	lr
 8002cbe:	bf00      	nop
 8002cc0:	20000004 	.word	0x20000004
 8002cc4:	200006dc 	.word	0x200006dc

08002cc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	af00      	add	r7, sp, #0
  return uwTick;
 8002ccc:	4b03      	ldr	r3, [pc, #12]	; (8002cdc <HAL_GetTick+0x14>)
 8002cce:	681b      	ldr	r3, [r3, #0]
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr
 8002cda:	bf00      	nop
 8002cdc:	200006dc 	.word	0x200006dc

08002ce0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b084      	sub	sp, #16
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ce8:	f7ff ffee 	bl	8002cc8 <HAL_GetTick>
 8002cec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002cf8:	d005      	beq.n	8002d06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002cfa:	4b0a      	ldr	r3, [pc, #40]	; (8002d24 <HAL_Delay+0x44>)
 8002cfc:	781b      	ldrb	r3, [r3, #0]
 8002cfe:	461a      	mov	r2, r3
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	4413      	add	r3, r2
 8002d04:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002d06:	bf00      	nop
 8002d08:	f7ff ffde 	bl	8002cc8 <HAL_GetTick>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	1ad3      	subs	r3, r2, r3
 8002d12:	68fa      	ldr	r2, [r7, #12]
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d8f7      	bhi.n	8002d08 <HAL_Delay+0x28>
  {
  }
}
 8002d18:	bf00      	nop
 8002d1a:	bf00      	nop
 8002d1c:	3710      	adds	r7, #16
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	bf00      	nop
 8002d24:	20000004 	.word	0x20000004

08002d28 <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during STOP0/STOP1/STOP2 modes.
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8002d2c:	4b05      	ldr	r3, [pc, #20]	; (8002d44 <HAL_DBGMCU_EnableDBGStopMode+0x1c>)
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	4a04      	ldr	r2, [pc, #16]	; (8002d44 <HAL_DBGMCU_EnableDBGStopMode+0x1c>)
 8002d32:	f043 0302 	orr.w	r3, r3, #2
 8002d36:	6053      	str	r3, [r2, #4]
}
 8002d38:	bf00      	nop
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr
 8002d42:	bf00      	nop
 8002d44:	e0044000 	.word	0xe0044000

08002d48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b085      	sub	sp, #20
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	f003 0307 	and.w	r3, r3, #7
 8002d56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d58:	4b0c      	ldr	r3, [pc, #48]	; (8002d8c <__NVIC_SetPriorityGrouping+0x44>)
 8002d5a:	68db      	ldr	r3, [r3, #12]
 8002d5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d5e:	68ba      	ldr	r2, [r7, #8]
 8002d60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d64:	4013      	ands	r3, r2
 8002d66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d7a:	4a04      	ldr	r2, [pc, #16]	; (8002d8c <__NVIC_SetPriorityGrouping+0x44>)
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	60d3      	str	r3, [r2, #12]
}
 8002d80:	bf00      	nop
 8002d82:	3714      	adds	r7, #20
 8002d84:	46bd      	mov	sp, r7
 8002d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8a:	4770      	bx	lr
 8002d8c:	e000ed00 	.word	0xe000ed00

08002d90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d90:	b480      	push	{r7}
 8002d92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d94:	4b04      	ldr	r3, [pc, #16]	; (8002da8 <__NVIC_GetPriorityGrouping+0x18>)
 8002d96:	68db      	ldr	r3, [r3, #12]
 8002d98:	0a1b      	lsrs	r3, r3, #8
 8002d9a:	f003 0307 	and.w	r3, r3, #7
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr
 8002da8:	e000ed00 	.word	0xe000ed00

08002dac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b083      	sub	sp, #12
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	4603      	mov	r3, r0
 8002db4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	db0b      	blt.n	8002dd6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002dbe:	79fb      	ldrb	r3, [r7, #7]
 8002dc0:	f003 021f 	and.w	r2, r3, #31
 8002dc4:	4907      	ldr	r1, [pc, #28]	; (8002de4 <__NVIC_EnableIRQ+0x38>)
 8002dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dca:	095b      	lsrs	r3, r3, #5
 8002dcc:	2001      	movs	r0, #1
 8002dce:	fa00 f202 	lsl.w	r2, r0, r2
 8002dd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002dd6:	bf00      	nop
 8002dd8:	370c      	adds	r7, #12
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de0:	4770      	bx	lr
 8002de2:	bf00      	nop
 8002de4:	e000e100 	.word	0xe000e100

08002de8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b083      	sub	sp, #12
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	4603      	mov	r3, r0
 8002df0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002df2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	db12      	blt.n	8002e20 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002dfa:	79fb      	ldrb	r3, [r7, #7]
 8002dfc:	f003 021f 	and.w	r2, r3, #31
 8002e00:	490a      	ldr	r1, [pc, #40]	; (8002e2c <__NVIC_DisableIRQ+0x44>)
 8002e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e06:	095b      	lsrs	r3, r3, #5
 8002e08:	2001      	movs	r0, #1
 8002e0a:	fa00 f202 	lsl.w	r2, r0, r2
 8002e0e:	3320      	adds	r3, #32
 8002e10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002e14:	f3bf 8f4f 	dsb	sy
}
 8002e18:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002e1a:	f3bf 8f6f 	isb	sy
}
 8002e1e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002e20:	bf00      	nop
 8002e22:	370c      	adds	r7, #12
 8002e24:	46bd      	mov	sp, r7
 8002e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2a:	4770      	bx	lr
 8002e2c:	e000e100 	.word	0xe000e100

08002e30 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b083      	sub	sp, #12
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	4603      	mov	r3, r0
 8002e38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	db0c      	blt.n	8002e5c <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e42:	79fb      	ldrb	r3, [r7, #7]
 8002e44:	f003 021f 	and.w	r2, r3, #31
 8002e48:	4907      	ldr	r1, [pc, #28]	; (8002e68 <__NVIC_ClearPendingIRQ+0x38>)
 8002e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e4e:	095b      	lsrs	r3, r3, #5
 8002e50:	2001      	movs	r0, #1
 8002e52:	fa00 f202 	lsl.w	r2, r0, r2
 8002e56:	3360      	adds	r3, #96	; 0x60
 8002e58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002e5c:	bf00      	nop
 8002e5e:	370c      	adds	r7, #12
 8002e60:	46bd      	mov	sp, r7
 8002e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e66:	4770      	bx	lr
 8002e68:	e000e100 	.word	0xe000e100

08002e6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b083      	sub	sp, #12
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	4603      	mov	r3, r0
 8002e74:	6039      	str	r1, [r7, #0]
 8002e76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	db0a      	blt.n	8002e96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	b2da      	uxtb	r2, r3
 8002e84:	490c      	ldr	r1, [pc, #48]	; (8002eb8 <__NVIC_SetPriority+0x4c>)
 8002e86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e8a:	0112      	lsls	r2, r2, #4
 8002e8c:	b2d2      	uxtb	r2, r2
 8002e8e:	440b      	add	r3, r1
 8002e90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e94:	e00a      	b.n	8002eac <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	b2da      	uxtb	r2, r3
 8002e9a:	4908      	ldr	r1, [pc, #32]	; (8002ebc <__NVIC_SetPriority+0x50>)
 8002e9c:	79fb      	ldrb	r3, [r7, #7]
 8002e9e:	f003 030f 	and.w	r3, r3, #15
 8002ea2:	3b04      	subs	r3, #4
 8002ea4:	0112      	lsls	r2, r2, #4
 8002ea6:	b2d2      	uxtb	r2, r2
 8002ea8:	440b      	add	r3, r1
 8002eaa:	761a      	strb	r2, [r3, #24]
}
 8002eac:	bf00      	nop
 8002eae:	370c      	adds	r7, #12
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb6:	4770      	bx	lr
 8002eb8:	e000e100 	.word	0xe000e100
 8002ebc:	e000ed00 	.word	0xe000ed00

08002ec0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b089      	sub	sp, #36	; 0x24
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	60f8      	str	r0, [r7, #12]
 8002ec8:	60b9      	str	r1, [r7, #8]
 8002eca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	f003 0307 	and.w	r3, r3, #7
 8002ed2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ed4:	69fb      	ldr	r3, [r7, #28]
 8002ed6:	f1c3 0307 	rsb	r3, r3, #7
 8002eda:	2b04      	cmp	r3, #4
 8002edc:	bf28      	it	cs
 8002ede:	2304      	movcs	r3, #4
 8002ee0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ee2:	69fb      	ldr	r3, [r7, #28]
 8002ee4:	3304      	adds	r3, #4
 8002ee6:	2b06      	cmp	r3, #6
 8002ee8:	d902      	bls.n	8002ef0 <NVIC_EncodePriority+0x30>
 8002eea:	69fb      	ldr	r3, [r7, #28]
 8002eec:	3b03      	subs	r3, #3
 8002eee:	e000      	b.n	8002ef2 <NVIC_EncodePriority+0x32>
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ef4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002ef8:	69bb      	ldr	r3, [r7, #24]
 8002efa:	fa02 f303 	lsl.w	r3, r2, r3
 8002efe:	43da      	mvns	r2, r3
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	401a      	ands	r2, r3
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f08:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	fa01 f303 	lsl.w	r3, r1, r3
 8002f12:	43d9      	mvns	r1, r3
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f18:	4313      	orrs	r3, r2
         );
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	3724      	adds	r7, #36	; 0x24
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr
	...

08002f28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b082      	sub	sp, #8
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2b07      	cmp	r3, #7
 8002f34:	d00f      	beq.n	8002f56 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2b06      	cmp	r3, #6
 8002f3a:	d00c      	beq.n	8002f56 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2b05      	cmp	r3, #5
 8002f40:	d009      	beq.n	8002f56 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2b04      	cmp	r3, #4
 8002f46:	d006      	beq.n	8002f56 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2b03      	cmp	r3, #3
 8002f4c:	d003      	beq.n	8002f56 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002f4e:	21bc      	movs	r1, #188	; 0xbc
 8002f50:	4804      	ldr	r0, [pc, #16]	; (8002f64 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8002f52:	f012 f9aa 	bl	80152aa <assert_failed>

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f7ff fef6 	bl	8002d48 <__NVIC_SetPriorityGrouping>
}
 8002f5c:	bf00      	nop
 8002f5e:	3708      	adds	r7, #8
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}
 8002f64:	08025a40 	.word	0x08025a40

08002f68 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b086      	sub	sp, #24
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	4603      	mov	r3, r0
 8002f70:	60b9      	str	r1, [r7, #8]
 8002f72:	607a      	str	r2, [r7, #4]
 8002f74:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup;

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2b0f      	cmp	r3, #15
 8002f7a:	d903      	bls.n	8002f84 <HAL_NVIC_SetPriority+0x1c>
 8002f7c:	21d5      	movs	r1, #213	; 0xd5
 8002f7e:	480e      	ldr	r0, [pc, #56]	; (8002fb8 <HAL_NVIC_SetPriority+0x50>)
 8002f80:	f012 f993 	bl	80152aa <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	2b0f      	cmp	r3, #15
 8002f88:	d903      	bls.n	8002f92 <HAL_NVIC_SetPriority+0x2a>
 8002f8a:	21d6      	movs	r1, #214	; 0xd6
 8002f8c:	480a      	ldr	r0, [pc, #40]	; (8002fb8 <HAL_NVIC_SetPriority+0x50>)
 8002f8e:	f012 f98c 	bl	80152aa <assert_failed>

  prioritygroup = NVIC_GetPriorityGrouping();
 8002f92:	f7ff fefd 	bl	8002d90 <__NVIC_GetPriorityGrouping>
 8002f96:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f98:	687a      	ldr	r2, [r7, #4]
 8002f9a:	68b9      	ldr	r1, [r7, #8]
 8002f9c:	6978      	ldr	r0, [r7, #20]
 8002f9e:	f7ff ff8f 	bl	8002ec0 <NVIC_EncodePriority>
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fa8:	4611      	mov	r1, r2
 8002faa:	4618      	mov	r0, r3
 8002fac:	f7ff ff5e 	bl	8002e6c <__NVIC_SetPriority>
}
 8002fb0:	bf00      	nop
 8002fb2:	3718      	adds	r7, #24
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}
 8002fb8:	08025a40 	.word	0x08025a40

08002fbc <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b082      	sub	sp, #8
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8002fc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	da03      	bge.n	8002fd6 <HAL_NVIC_EnableIRQ+0x1a>
 8002fce:	21ea      	movs	r1, #234	; 0xea
 8002fd0:	4805      	ldr	r0, [pc, #20]	; (8002fe8 <HAL_NVIC_EnableIRQ+0x2c>)
 8002fd2:	f012 f96a 	bl	80152aa <assert_failed>

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002fd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f7ff fee6 	bl	8002dac <__NVIC_EnableIRQ>
}
 8002fe0:	bf00      	nop
 8002fe2:	3708      	adds	r7, #8
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}
 8002fe8:	08025a40 	.word	0x08025a40

08002fec <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b082      	sub	sp, #8
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8002ff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	da03      	bge.n	8003006 <HAL_NVIC_DisableIRQ+0x1a>
 8002ffe:	21fb      	movs	r1, #251	; 0xfb
 8003000:	4805      	ldr	r0, [pc, #20]	; (8003018 <HAL_NVIC_DisableIRQ+0x2c>)
 8003002:	f012 f952 	bl	80152aa <assert_failed>

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003006:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800300a:	4618      	mov	r0, r3
 800300c:	f7ff feec 	bl	8002de8 <__NVIC_DisableIRQ>
}
 8003010:	bf00      	nop
 8003012:	3708      	adds	r7, #8
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}
 8003018:	08025a40 	.word	0x08025a40

0800301c <HAL_NVIC_ClearPendingIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b082      	sub	sp, #8
 8003020:	af00      	add	r7, sp, #0
 8003022:	4603      	mov	r3, r0
 8003024:	71fb      	strb	r3, [r7, #7]
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8003026:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800302a:	4618      	mov	r0, r3
 800302c:	f7ff ff00 	bl	8002e30 <__NVIC_ClearPendingIRQ>
}
 8003030:	bf00      	nop
 8003032:	3708      	adds	r7, #8
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}

08003038 <HAL_DMA_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *const hdma)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b084      	sub	sp, #16
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 8003040:	f7ff fe42 	bl	8002cc8 <HAL_GetTick>
 8003044:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d101      	bne.n	8003050 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	e326      	b.n	800369e <HAL_DMA_Init+0x666>
  }

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a88      	ldr	r2, [pc, #544]	; (8003278 <HAL_DMA_Init+0x240>)
 8003056:	4293      	cmp	r3, r2
 8003058:	f000 80d5 	beq.w	8003206 <HAL_DMA_Init+0x1ce>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a86      	ldr	r2, [pc, #536]	; (800327c <HAL_DMA_Init+0x244>)
 8003062:	4293      	cmp	r3, r2
 8003064:	f000 80cf 	beq.w	8003206 <HAL_DMA_Init+0x1ce>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a84      	ldr	r2, [pc, #528]	; (8003280 <HAL_DMA_Init+0x248>)
 800306e:	4293      	cmp	r3, r2
 8003070:	f000 80c9 	beq.w	8003206 <HAL_DMA_Init+0x1ce>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a82      	ldr	r2, [pc, #520]	; (8003284 <HAL_DMA_Init+0x24c>)
 800307a:	4293      	cmp	r3, r2
 800307c:	f000 80c3 	beq.w	8003206 <HAL_DMA_Init+0x1ce>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a80      	ldr	r2, [pc, #512]	; (8003288 <HAL_DMA_Init+0x250>)
 8003086:	4293      	cmp	r3, r2
 8003088:	f000 80bd 	beq.w	8003206 <HAL_DMA_Init+0x1ce>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a7e      	ldr	r2, [pc, #504]	; (800328c <HAL_DMA_Init+0x254>)
 8003092:	4293      	cmp	r3, r2
 8003094:	f000 80b7 	beq.w	8003206 <HAL_DMA_Init+0x1ce>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a7c      	ldr	r2, [pc, #496]	; (8003290 <HAL_DMA_Init+0x258>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	f000 80b1 	beq.w	8003206 <HAL_DMA_Init+0x1ce>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a7a      	ldr	r2, [pc, #488]	; (8003294 <HAL_DMA_Init+0x25c>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	f000 80ab 	beq.w	8003206 <HAL_DMA_Init+0x1ce>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a78      	ldr	r2, [pc, #480]	; (8003298 <HAL_DMA_Init+0x260>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	f000 80a5 	beq.w	8003206 <HAL_DMA_Init+0x1ce>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a76      	ldr	r2, [pc, #472]	; (800329c <HAL_DMA_Init+0x264>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	f000 809f 	beq.w	8003206 <HAL_DMA_Init+0x1ce>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a74      	ldr	r2, [pc, #464]	; (80032a0 <HAL_DMA_Init+0x268>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	f000 8099 	beq.w	8003206 <HAL_DMA_Init+0x1ce>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a72      	ldr	r2, [pc, #456]	; (80032a4 <HAL_DMA_Init+0x26c>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	f000 8093 	beq.w	8003206 <HAL_DMA_Init+0x1ce>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a70      	ldr	r2, [pc, #448]	; (80032a8 <HAL_DMA_Init+0x270>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	f000 808d 	beq.w	8003206 <HAL_DMA_Init+0x1ce>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a6e      	ldr	r2, [pc, #440]	; (80032ac <HAL_DMA_Init+0x274>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	f000 8087 	beq.w	8003206 <HAL_DMA_Init+0x1ce>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a6c      	ldr	r2, [pc, #432]	; (80032b0 <HAL_DMA_Init+0x278>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	f000 8081 	beq.w	8003206 <HAL_DMA_Init+0x1ce>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a6a      	ldr	r2, [pc, #424]	; (80032b4 <HAL_DMA_Init+0x27c>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d07b      	beq.n	8003206 <HAL_DMA_Init+0x1ce>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a69      	ldr	r2, [pc, #420]	; (80032b8 <HAL_DMA_Init+0x280>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d076      	beq.n	8003206 <HAL_DMA_Init+0x1ce>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a67      	ldr	r2, [pc, #412]	; (80032bc <HAL_DMA_Init+0x284>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d071      	beq.n	8003206 <HAL_DMA_Init+0x1ce>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a66      	ldr	r2, [pc, #408]	; (80032c0 <HAL_DMA_Init+0x288>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d06c      	beq.n	8003206 <HAL_DMA_Init+0x1ce>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a64      	ldr	r2, [pc, #400]	; (80032c4 <HAL_DMA_Init+0x28c>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d067      	beq.n	8003206 <HAL_DMA_Init+0x1ce>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a63      	ldr	r2, [pc, #396]	; (80032c8 <HAL_DMA_Init+0x290>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d062      	beq.n	8003206 <HAL_DMA_Init+0x1ce>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a61      	ldr	r2, [pc, #388]	; (80032cc <HAL_DMA_Init+0x294>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d05d      	beq.n	8003206 <HAL_DMA_Init+0x1ce>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a60      	ldr	r2, [pc, #384]	; (80032d0 <HAL_DMA_Init+0x298>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d058      	beq.n	8003206 <HAL_DMA_Init+0x1ce>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a5e      	ldr	r2, [pc, #376]	; (80032d4 <HAL_DMA_Init+0x29c>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d053      	beq.n	8003206 <HAL_DMA_Init+0x1ce>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a5d      	ldr	r2, [pc, #372]	; (80032d8 <HAL_DMA_Init+0x2a0>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d04e      	beq.n	8003206 <HAL_DMA_Init+0x1ce>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a5b      	ldr	r2, [pc, #364]	; (80032dc <HAL_DMA_Init+0x2a4>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d049      	beq.n	8003206 <HAL_DMA_Init+0x1ce>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a5a      	ldr	r2, [pc, #360]	; (80032e0 <HAL_DMA_Init+0x2a8>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d044      	beq.n	8003206 <HAL_DMA_Init+0x1ce>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a58      	ldr	r2, [pc, #352]	; (80032e4 <HAL_DMA_Init+0x2ac>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d03f      	beq.n	8003206 <HAL_DMA_Init+0x1ce>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a57      	ldr	r2, [pc, #348]	; (80032e8 <HAL_DMA_Init+0x2b0>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d03a      	beq.n	8003206 <HAL_DMA_Init+0x1ce>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a55      	ldr	r2, [pc, #340]	; (80032ec <HAL_DMA_Init+0x2b4>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d035      	beq.n	8003206 <HAL_DMA_Init+0x1ce>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a54      	ldr	r2, [pc, #336]	; (80032f0 <HAL_DMA_Init+0x2b8>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d030      	beq.n	8003206 <HAL_DMA_Init+0x1ce>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a52      	ldr	r2, [pc, #328]	; (80032f4 <HAL_DMA_Init+0x2bc>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d02b      	beq.n	8003206 <HAL_DMA_Init+0x1ce>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a51      	ldr	r2, [pc, #324]	; (80032f8 <HAL_DMA_Init+0x2c0>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d026      	beq.n	8003206 <HAL_DMA_Init+0x1ce>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a4f      	ldr	r2, [pc, #316]	; (80032fc <HAL_DMA_Init+0x2c4>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d021      	beq.n	8003206 <HAL_DMA_Init+0x1ce>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a4e      	ldr	r2, [pc, #312]	; (8003300 <HAL_DMA_Init+0x2c8>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d01c      	beq.n	8003206 <HAL_DMA_Init+0x1ce>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a4c      	ldr	r2, [pc, #304]	; (8003304 <HAL_DMA_Init+0x2cc>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d017      	beq.n	8003206 <HAL_DMA_Init+0x1ce>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a4b      	ldr	r2, [pc, #300]	; (8003308 <HAL_DMA_Init+0x2d0>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d012      	beq.n	8003206 <HAL_DMA_Init+0x1ce>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a49      	ldr	r2, [pc, #292]	; (800330c <HAL_DMA_Init+0x2d4>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d00d      	beq.n	8003206 <HAL_DMA_Init+0x1ce>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a48      	ldr	r2, [pc, #288]	; (8003310 <HAL_DMA_Init+0x2d8>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d008      	beq.n	8003206 <HAL_DMA_Init+0x1ce>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a46      	ldr	r2, [pc, #280]	; (8003314 <HAL_DMA_Init+0x2dc>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d003      	beq.n	8003206 <HAL_DMA_Init+0x1ce>
 80031fe:	21fa      	movs	r1, #250	; 0xfa
 8003200:	4845      	ldr	r0, [pc, #276]	; (8003318 <HAL_DMA_Init+0x2e0>)
 8003202:	f012 f852 	bl	80152aa <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	68db      	ldr	r3, [r3, #12]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d00d      	beq.n	800322a <HAL_DMA_Init+0x1f2>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	68db      	ldr	r3, [r3, #12]
 8003212:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003216:	d008      	beq.n	800322a <HAL_DMA_Init+0x1f2>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	68db      	ldr	r3, [r3, #12]
 800321c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003220:	d003      	beq.n	800322a <HAL_DMA_Init+0x1f2>
 8003222:	21fb      	movs	r1, #251	; 0xfb
 8003224:	483c      	ldr	r0, [pc, #240]	; (8003318 <HAL_DMA_Init+0x2e0>)
 8003226:	f012 f840 	bl	80152aa <assert_failed>
  if ((hdma->Init.Direction == DMA_MEMORY_TO_PERIPH) || (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY))
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	68db      	ldr	r3, [r3, #12]
 800322e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003232:	d004      	beq.n	800323e <HAL_DMA_Init+0x206>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	68db      	ldr	r3, [r3, #12]
 8003238:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800323c:	d10c      	bne.n	8003258 <HAL_DMA_Init+0x220>
  {
    assert_param(IS_DMA_REQUEST(hdma->Init.Request));
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003246:	d007      	beq.n	8003258 <HAL_DMA_Init+0x220>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	2b71      	cmp	r3, #113	; 0x71
 800324e:	d903      	bls.n	8003258 <HAL_DMA_Init+0x220>
 8003250:	21fe      	movs	r1, #254	; 0xfe
 8003252:	4831      	ldr	r0, [pc, #196]	; (8003318 <HAL_DMA_Init+0x2e0>)
 8003254:	f012 f829 	bl	80152aa <assert_failed>
  }
  assert_param(IS_DMA_BLOCK_HW_REQUEST(hdma->Init.BlkHWRequest));
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d05d      	beq.n	800331c <HAL_DMA_Init+0x2e4>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003268:	d058      	beq.n	800331c <HAL_DMA_Init+0x2e4>
 800326a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800326e:	482a      	ldr	r0, [pc, #168]	; (8003318 <HAL_DMA_Init+0x2e0>)
 8003270:	f012 f81b 	bl	80152aa <assert_failed>
 8003274:	e052      	b.n	800331c <HAL_DMA_Init+0x2e4>
 8003276:	bf00      	nop
 8003278:	40020050 	.word	0x40020050
 800327c:	50020050 	.word	0x50020050
 8003280:	400200d0 	.word	0x400200d0
 8003284:	500200d0 	.word	0x500200d0
 8003288:	40020150 	.word	0x40020150
 800328c:	50020150 	.word	0x50020150
 8003290:	400201d0 	.word	0x400201d0
 8003294:	500201d0 	.word	0x500201d0
 8003298:	40020250 	.word	0x40020250
 800329c:	50020250 	.word	0x50020250
 80032a0:	400202d0 	.word	0x400202d0
 80032a4:	500202d0 	.word	0x500202d0
 80032a8:	40020350 	.word	0x40020350
 80032ac:	50020350 	.word	0x50020350
 80032b0:	400203d0 	.word	0x400203d0
 80032b4:	500203d0 	.word	0x500203d0
 80032b8:	40020450 	.word	0x40020450
 80032bc:	50020450 	.word	0x50020450
 80032c0:	400204d0 	.word	0x400204d0
 80032c4:	500204d0 	.word	0x500204d0
 80032c8:	40020550 	.word	0x40020550
 80032cc:	50020550 	.word	0x50020550
 80032d0:	400205d0 	.word	0x400205d0
 80032d4:	500205d0 	.word	0x500205d0
 80032d8:	40020650 	.word	0x40020650
 80032dc:	50020650 	.word	0x50020650
 80032e0:	400206d0 	.word	0x400206d0
 80032e4:	500206d0 	.word	0x500206d0
 80032e8:	40020750 	.word	0x40020750
 80032ec:	50020750 	.word	0x50020750
 80032f0:	400207d0 	.word	0x400207d0
 80032f4:	500207d0 	.word	0x500207d0
 80032f8:	46025050 	.word	0x46025050
 80032fc:	56025050 	.word	0x56025050
 8003300:	460250d0 	.word	0x460250d0
 8003304:	560250d0 	.word	0x560250d0
 8003308:	46025150 	.word	0x46025150
 800330c:	56025150 	.word	0x56025150
 8003310:	460251d0 	.word	0x460251d0
 8003314:	560251d0 	.word	0x560251d0
 8003318:	08025aac 	.word	0x08025aac
  assert_param(IS_DMA_SOURCE_INC(hdma->Init.SrcInc));
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	691b      	ldr	r3, [r3, #16]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d008      	beq.n	8003336 <HAL_DMA_Init+0x2fe>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	691b      	ldr	r3, [r3, #16]
 8003328:	2b08      	cmp	r3, #8
 800332a:	d004      	beq.n	8003336 <HAL_DMA_Init+0x2fe>
 800332c:	f240 1101 	movw	r1, #257	; 0x101
 8003330:	488a      	ldr	r0, [pc, #552]	; (800355c <HAL_DMA_Init+0x524>)
 8003332:	f011 ffba 	bl	80152aa <assert_failed>
  assert_param(IS_DMA_DESTINATION_INC(hdma->Init.DestInc));
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	695b      	ldr	r3, [r3, #20]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d009      	beq.n	8003352 <HAL_DMA_Init+0x31a>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	695b      	ldr	r3, [r3, #20]
 8003342:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003346:	d004      	beq.n	8003352 <HAL_DMA_Init+0x31a>
 8003348:	f44f 7181 	mov.w	r1, #258	; 0x102
 800334c:	4883      	ldr	r0, [pc, #524]	; (800355c <HAL_DMA_Init+0x524>)
 800334e:	f011 ffac 	bl	80152aa <assert_failed>
  assert_param(IS_DMA_SOURCE_DATA_WIDTH(hdma->Init.SrcDataWidth));
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	699b      	ldr	r3, [r3, #24]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d00c      	beq.n	8003374 <HAL_DMA_Init+0x33c>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	699b      	ldr	r3, [r3, #24]
 800335e:	2b01      	cmp	r3, #1
 8003360:	d008      	beq.n	8003374 <HAL_DMA_Init+0x33c>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	699b      	ldr	r3, [r3, #24]
 8003366:	2b02      	cmp	r3, #2
 8003368:	d004      	beq.n	8003374 <HAL_DMA_Init+0x33c>
 800336a:	f240 1103 	movw	r1, #259	; 0x103
 800336e:	487b      	ldr	r0, [pc, #492]	; (800355c <HAL_DMA_Init+0x524>)
 8003370:	f011 ff9b 	bl	80152aa <assert_failed>
  assert_param(IS_DMA_DESTINATION_DATA_WIDTH(hdma->Init.DestDataWidth));
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	69db      	ldr	r3, [r3, #28]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d00e      	beq.n	800339a <HAL_DMA_Init+0x362>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	69db      	ldr	r3, [r3, #28]
 8003380:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003384:	d009      	beq.n	800339a <HAL_DMA_Init+0x362>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	69db      	ldr	r3, [r3, #28]
 800338a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800338e:	d004      	beq.n	800339a <HAL_DMA_Init+0x362>
 8003390:	f44f 7182 	mov.w	r1, #260	; 0x104
 8003394:	4871      	ldr	r0, [pc, #452]	; (800355c <HAL_DMA_Init+0x524>)
 8003396:	f011 ff88 	bl	80152aa <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6a1b      	ldr	r3, [r3, #32]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d013      	beq.n	80033ca <HAL_DMA_Init+0x392>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6a1b      	ldr	r3, [r3, #32]
 80033a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033aa:	d00e      	beq.n	80033ca <HAL_DMA_Init+0x392>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6a1b      	ldr	r3, [r3, #32]
 80033b0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80033b4:	d009      	beq.n	80033ca <HAL_DMA_Init+0x392>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6a1b      	ldr	r3, [r3, #32]
 80033ba:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80033be:	d004      	beq.n	80033ca <HAL_DMA_Init+0x392>
 80033c0:	f240 1105 	movw	r1, #261	; 0x105
 80033c4:	4865      	ldr	r0, [pc, #404]	; (800355c <HAL_DMA_Init+0x524>)
 80033c6:	f011 ff70 	bl	80152aa <assert_failed>
  assert_param(IS_DMA_TCEM_EVENT_MODE(hdma->Init.TransferEventMode));
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d013      	beq.n	80033fa <HAL_DMA_Init+0x3c2>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033da:	d00e      	beq.n	80033fa <HAL_DMA_Init+0x3c2>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80033e4:	d009      	beq.n	80033fa <HAL_DMA_Init+0x3c2>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ea:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80033ee:	d004      	beq.n	80033fa <HAL_DMA_Init+0x3c2>
 80033f0:	f44f 7183 	mov.w	r1, #262	; 0x106
 80033f4:	4859      	ldr	r0, [pc, #356]	; (800355c <HAL_DMA_Init+0x524>)
 80033f6:	f011 ff58 	bl	80152aa <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d004      	beq.n	800340c <HAL_DMA_Init+0x3d4>
 8003402:	f240 1107 	movw	r1, #263	; 0x107
 8003406:	4855      	ldr	r0, [pc, #340]	; (800355c <HAL_DMA_Init+0x524>)
 8003408:	f011 ff4f 	bl	80152aa <assert_failed>
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a53      	ldr	r2, [pc, #332]	; (8003560 <HAL_DMA_Init+0x528>)
 8003412:	4293      	cmp	r3, r2
 8003414:	f000 80a0 	beq.w	8003558 <HAL_DMA_Init+0x520>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a51      	ldr	r2, [pc, #324]	; (8003564 <HAL_DMA_Init+0x52c>)
 800341e:	4293      	cmp	r3, r2
 8003420:	f000 809a 	beq.w	8003558 <HAL_DMA_Init+0x520>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a4f      	ldr	r2, [pc, #316]	; (8003568 <HAL_DMA_Init+0x530>)
 800342a:	4293      	cmp	r3, r2
 800342c:	f000 8094 	beq.w	8003558 <HAL_DMA_Init+0x520>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a4d      	ldr	r2, [pc, #308]	; (800356c <HAL_DMA_Init+0x534>)
 8003436:	4293      	cmp	r3, r2
 8003438:	f000 808e 	beq.w	8003558 <HAL_DMA_Init+0x520>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a4b      	ldr	r2, [pc, #300]	; (8003570 <HAL_DMA_Init+0x538>)
 8003442:	4293      	cmp	r3, r2
 8003444:	f000 8088 	beq.w	8003558 <HAL_DMA_Init+0x520>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a49      	ldr	r2, [pc, #292]	; (8003574 <HAL_DMA_Init+0x53c>)
 800344e:	4293      	cmp	r3, r2
 8003450:	f000 8082 	beq.w	8003558 <HAL_DMA_Init+0x520>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a47      	ldr	r2, [pc, #284]	; (8003578 <HAL_DMA_Init+0x540>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d07c      	beq.n	8003558 <HAL_DMA_Init+0x520>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a46      	ldr	r2, [pc, #280]	; (800357c <HAL_DMA_Init+0x544>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d077      	beq.n	8003558 <HAL_DMA_Init+0x520>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a44      	ldr	r2, [pc, #272]	; (8003580 <HAL_DMA_Init+0x548>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d072      	beq.n	8003558 <HAL_DMA_Init+0x520>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a43      	ldr	r2, [pc, #268]	; (8003584 <HAL_DMA_Init+0x54c>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d06d      	beq.n	8003558 <HAL_DMA_Init+0x520>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a41      	ldr	r2, [pc, #260]	; (8003588 <HAL_DMA_Init+0x550>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d068      	beq.n	8003558 <HAL_DMA_Init+0x520>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a40      	ldr	r2, [pc, #256]	; (800358c <HAL_DMA_Init+0x554>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d063      	beq.n	8003558 <HAL_DMA_Init+0x520>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a3e      	ldr	r2, [pc, #248]	; (8003590 <HAL_DMA_Init+0x558>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d05e      	beq.n	8003558 <HAL_DMA_Init+0x520>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a3d      	ldr	r2, [pc, #244]	; (8003594 <HAL_DMA_Init+0x55c>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d059      	beq.n	8003558 <HAL_DMA_Init+0x520>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a3b      	ldr	r2, [pc, #236]	; (8003598 <HAL_DMA_Init+0x560>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d054      	beq.n	8003558 <HAL_DMA_Init+0x520>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a3a      	ldr	r2, [pc, #232]	; (800359c <HAL_DMA_Init+0x564>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d04f      	beq.n	8003558 <HAL_DMA_Init+0x520>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a38      	ldr	r2, [pc, #224]	; (80035a0 <HAL_DMA_Init+0x568>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d04a      	beq.n	8003558 <HAL_DMA_Init+0x520>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a37      	ldr	r2, [pc, #220]	; (80035a4 <HAL_DMA_Init+0x56c>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d045      	beq.n	8003558 <HAL_DMA_Init+0x520>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a35      	ldr	r2, [pc, #212]	; (80035a8 <HAL_DMA_Init+0x570>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d040      	beq.n	8003558 <HAL_DMA_Init+0x520>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a34      	ldr	r2, [pc, #208]	; (80035ac <HAL_DMA_Init+0x574>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d03b      	beq.n	8003558 <HAL_DMA_Init+0x520>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a32      	ldr	r2, [pc, #200]	; (80035b0 <HAL_DMA_Init+0x578>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d036      	beq.n	8003558 <HAL_DMA_Init+0x520>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a31      	ldr	r2, [pc, #196]	; (80035b4 <HAL_DMA_Init+0x57c>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d031      	beq.n	8003558 <HAL_DMA_Init+0x520>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a2f      	ldr	r2, [pc, #188]	; (80035b8 <HAL_DMA_Init+0x580>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d02c      	beq.n	8003558 <HAL_DMA_Init+0x520>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a2e      	ldr	r2, [pc, #184]	; (80035bc <HAL_DMA_Init+0x584>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d027      	beq.n	8003558 <HAL_DMA_Init+0x520>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a2c      	ldr	r2, [pc, #176]	; (80035c0 <HAL_DMA_Init+0x588>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d022      	beq.n	8003558 <HAL_DMA_Init+0x520>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a2b      	ldr	r2, [pc, #172]	; (80035c4 <HAL_DMA_Init+0x58c>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d01d      	beq.n	8003558 <HAL_DMA_Init+0x520>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a29      	ldr	r2, [pc, #164]	; (80035c8 <HAL_DMA_Init+0x590>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d018      	beq.n	8003558 <HAL_DMA_Init+0x520>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a28      	ldr	r2, [pc, #160]	; (80035cc <HAL_DMA_Init+0x594>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d013      	beq.n	8003558 <HAL_DMA_Init+0x520>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a26      	ldr	r2, [pc, #152]	; (80035d0 <HAL_DMA_Init+0x598>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d00e      	beq.n	8003558 <HAL_DMA_Init+0x520>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a25      	ldr	r2, [pc, #148]	; (80035d4 <HAL_DMA_Init+0x59c>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d009      	beq.n	8003558 <HAL_DMA_Init+0x520>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a23      	ldr	r2, [pc, #140]	; (80035d8 <HAL_DMA_Init+0x5a0>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d004      	beq.n	8003558 <HAL_DMA_Init+0x520>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a22      	ldr	r2, [pc, #136]	; (80035dc <HAL_DMA_Init+0x5a4>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d143      	bne.n	80035e0 <HAL_DMA_Init+0x5a8>
 8003558:	2301      	movs	r3, #1
 800355a:	e042      	b.n	80035e2 <HAL_DMA_Init+0x5aa>
 800355c:	08025aac 	.word	0x08025aac
 8003560:	40020050 	.word	0x40020050
 8003564:	50020050 	.word	0x50020050
 8003568:	400200d0 	.word	0x400200d0
 800356c:	500200d0 	.word	0x500200d0
 8003570:	40020150 	.word	0x40020150
 8003574:	50020150 	.word	0x50020150
 8003578:	400201d0 	.word	0x400201d0
 800357c:	500201d0 	.word	0x500201d0
 8003580:	40020250 	.word	0x40020250
 8003584:	50020250 	.word	0x50020250
 8003588:	400202d0 	.word	0x400202d0
 800358c:	500202d0 	.word	0x500202d0
 8003590:	40020350 	.word	0x40020350
 8003594:	50020350 	.word	0x50020350
 8003598:	400203d0 	.word	0x400203d0
 800359c:	500203d0 	.word	0x500203d0
 80035a0:	40020450 	.word	0x40020450
 80035a4:	50020450 	.word	0x50020450
 80035a8:	400204d0 	.word	0x400204d0
 80035ac:	500204d0 	.word	0x500204d0
 80035b0:	40020550 	.word	0x40020550
 80035b4:	50020550 	.word	0x50020550
 80035b8:	400205d0 	.word	0x400205d0
 80035bc:	500205d0 	.word	0x500205d0
 80035c0:	40020650 	.word	0x40020650
 80035c4:	50020650 	.word	0x50020650
 80035c8:	400206d0 	.word	0x400206d0
 80035cc:	500206d0 	.word	0x500206d0
 80035d0:	40020750 	.word	0x40020750
 80035d4:	50020750 	.word	0x50020750
 80035d8:	400207d0 	.word	0x400207d0
 80035dc:	500207d0 	.word	0x500207d0
 80035e0:	2300      	movs	r3, #0
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d024      	beq.n	8003630 <HAL_DMA_Init+0x5f8>
  {
    assert_param(IS_DMA_BURST_LENGTH(hdma->Init.SrcBurstLength));
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d003      	beq.n	80035f6 <HAL_DMA_Init+0x5be>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f2:	2b40      	cmp	r3, #64	; 0x40
 80035f4:	d904      	bls.n	8003600 <HAL_DMA_Init+0x5c8>
 80035f6:	f240 110b 	movw	r1, #267	; 0x10b
 80035fa:	482b      	ldr	r0, [pc, #172]	; (80036a8 <HAL_DMA_Init+0x670>)
 80035fc:	f011 fe55 	bl	80152aa <assert_failed>
    assert_param(IS_DMA_BURST_LENGTH(hdma->Init.DestBurstLength));
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003604:	2b00      	cmp	r3, #0
 8003606:	d003      	beq.n	8003610 <HAL_DMA_Init+0x5d8>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800360c:	2b40      	cmp	r3, #64	; 0x40
 800360e:	d904      	bls.n	800361a <HAL_DMA_Init+0x5e2>
 8003610:	f44f 7186 	mov.w	r1, #268	; 0x10c
 8003614:	4824      	ldr	r0, [pc, #144]	; (80036a8 <HAL_DMA_Init+0x670>)
 8003616:	f011 fe48 	bl	80152aa <assert_failed>
    assert_param(IS_DMA_TRANSFER_ALLOCATED_PORT(hdma->Init.TransferAllocatedPort));
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800361e:	f023 2340 	bic.w	r3, r3, #1073758208	; 0x40004000
 8003622:	2b00      	cmp	r3, #0
 8003624:	d004      	beq.n	8003630 <HAL_DMA_Init+0x5f8>
 8003626:	f240 110d 	movw	r1, #269	; 0x10d
 800362a:	481f      	ldr	r0, [pc, #124]	; (80036a8 <HAL_DMA_Init+0x670>)
 800362c:	f011 fe3d 	bl	80152aa <assert_failed>
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2200      	movs	r2, #0
 8003634:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2202      	movs	r2, #2
 800363c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	695a      	ldr	r2, [r3, #20]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f042 0206 	orr.w	r2, r2, #6
 800364e:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8003650:	e00f      	b.n	8003672 <HAL_DMA_Init+0x63a>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8003652:	f7ff fb39 	bl	8002cc8 <HAL_GetTick>
 8003656:	4602      	mov	r2, r0
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	1ad3      	subs	r3, r2, r3
 800365c:	2b05      	cmp	r3, #5
 800365e:	d908      	bls.n	8003672 <HAL_DMA_Init+0x63a>
    {
      /* Update the DMA channel error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2210      	movs	r2, #16
 8003664:	659a      	str	r2, [r3, #88]	; 0x58

      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2203      	movs	r2, #3
 800366a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

      return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e015      	b.n	800369e <HAL_DMA_Init+0x666>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	695b      	ldr	r3, [r3, #20]
 8003678:	f003 0301 	and.w	r3, r3, #1
 800367c:	2b00      	cmp	r3, #0
 800367e:	d1e8      	bne.n	8003652 <HAL_DMA_Init+0x61a>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_Init(hdma);
 8003680:	6878      	ldr	r0, [r7, #4]
 8003682:	f000 fa99 	bl	8003bb8 <DMA_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->Init.Mode;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2200      	movs	r2, #0
 8003692:	659a      	str	r2, [r3, #88]	; 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2201      	movs	r2, #1
 8003698:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800369c:	2300      	movs	r3, #0
}
 800369e:	4618      	mov	r0, r3
 80036a0:	3710      	adds	r7, #16
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}
 80036a6:	bf00      	nop
 80036a8:	08025aac 	.word	0x08025aac

080036ac <HAL_DMA_Start_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *const hdma,
                                   uint32_t SrcAddress,
                                   uint32_t DstAddress,
                                   uint32_t SrcDataSize)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b084      	sub	sp, #16
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	60f8      	str	r0, [r7, #12]
 80036b4:	60b9      	str	r1, [r7, #8]
 80036b6:	607a      	str	r2, [r7, #4]
 80036b8:	603b      	str	r3, [r7, #0]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d101      	bne.n	80036c4 <HAL_DMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 80036c0:	2301      	movs	r3, #1
 80036c2:	e05b      	b.n	800377c <HAL_DMA_Start_IT+0xd0>
  }

  /* Check the parameters */
  assert_param(IS_DMA_BLOCK_SIZE(SrcDataSize));
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d003      	beq.n	80036d2 <HAL_DMA_Start_IT+0x26>
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036d0:	d304      	bcc.n	80036dc <HAL_DMA_Start_IT+0x30>
 80036d2:	f240 210b 	movw	r1, #523	; 0x20b
 80036d6:	482b      	ldr	r0, [pc, #172]	; (8003784 <HAL_DMA_Start_IT+0xd8>)
 80036d8:	f011 fde7 	bl	80152aa <assert_failed>

  /* Process locked */
  __HAL_LOCK(hdma);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80036e2:	2b01      	cmp	r3, #1
 80036e4:	d101      	bne.n	80036ea <HAL_DMA_Start_IT+0x3e>
 80036e6:	2302      	movs	r3, #2
 80036e8:	e048      	b.n	800377c <HAL_DMA_Start_IT+0xd0>
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2201      	movs	r2, #1
 80036ee:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  /* Check DMA channel state */
  if (hdma->State == HAL_DMA_STATE_READY)
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80036f8:	b2db      	uxtb	r3, r3
 80036fa:	2b01      	cmp	r3, #1
 80036fc:	d136      	bne.n	800376c <HAL_DMA_Start_IT+0xc0>
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2202      	movs	r2, #2
 8003702:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	2200      	movs	r2, #0
 800370a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Configure the source address, destination address, the data size and clear flags */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, SrcDataSize);
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	687a      	ldr	r2, [r7, #4]
 8003710:	68b9      	ldr	r1, [r7, #8]
 8003712:	68f8      	ldr	r0, [r7, #12]
 8003714:	f000 fa2a 	bl	8003b6c <DMA_SetConfig>

    /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
    __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	695a      	ldr	r2, [r3, #20]
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f442 42ba 	orr.w	r2, r2, #23808	; 0x5d00
 8003726:	615a      	str	r2, [r3, #20]

    /* Check half transfer complete callback */
    if (hdma->XferHalfCpltCallback != NULL)
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800372c:	2b00      	cmp	r3, #0
 800372e:	d007      	beq.n	8003740 <HAL_DMA_Start_IT+0x94>
    {
      /* If Half Transfer complete callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	695a      	ldr	r2, [r3, #20]
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800373e:	615a      	str	r2, [r3, #20]
    }

    /* Check Half suspend callback */
    if (hdma->XferSuspendCallback != NULL)
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003744:	2b00      	cmp	r3, #0
 8003746:	d007      	beq.n	8003758 <HAL_DMA_Start_IT+0xac>
    {
      /* If Transfer suspend callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	695a      	ldr	r2, [r3, #20]
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003756:	615a      	str	r2, [r3, #20]
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	695a      	ldr	r2, [r3, #20]
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f042 0201 	orr.w	r2, r2, #1
 8003766:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8003768:	2300      	movs	r3, #0
 800376a:	e007      	b.n	800377c <HAL_DMA_Start_IT+0xd0>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	2240      	movs	r2, #64	; 0x40
 8003770:	659a      	str	r2, [r3, #88]	; 0x58
    __HAL_UNLOCK(hdma);
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2200      	movs	r2, #0
 8003776:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
}
 800377c:	4618      	mov	r0, r3
 800377e:	3710      	adds	r7, #16
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}
 8003784:	08025aac 	.word	0x08025aac

08003788 <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 8003788:	b480      	push	{r7}
 800378a:	b083      	sub	sp, #12
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d101      	bne.n	800379a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	e019      	b.n	80037ce <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	2b02      	cmp	r3, #2
 80037a4:	d004      	beq.n	80037b0 <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2220      	movs	r2, #32
 80037aa:	659a      	str	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	e00e      	b.n	80037ce <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2204      	movs	r2, #4
 80037b4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	695b      	ldr	r3, [r3, #20]
 80037be:	687a      	ldr	r2, [r7, #4]
 80037c0:	6812      	ldr	r2, [r2, #0]
 80037c2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80037c6:	f043 0304 	orr.w	r3, r3, #4
 80037ca:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 80037cc:	2300      	movs	r3, #0
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	370c      	adds	r7, #12
 80037d2:	46bd      	mov	sp, r7
 80037d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d8:	4770      	bx	lr

080037da <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 80037da:	b580      	push	{r7, lr}
 80037dc:	b084      	sub	sp, #16
 80037de:	af00      	add	r7, sp, #0
 80037e0:	6078      	str	r0, [r7, #4]
  DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80037ea:	f023 030f 	bic.w	r3, r3, #15
 80037ee:	60fb      	str	r3, [r7, #12]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037f8:	3b50      	subs	r3, #80	; 0x50
 80037fa:	09db      	lsrs	r3, r3, #7
 80037fc:	f003 031f 	and.w	r3, r3, #31
 8003800:	2201      	movs	r2, #1
 8003802:	fa02 f303 	lsl.w	r3, r2, r3
 8003806:	60bb      	str	r3, [r7, #8]

  /* Global Interrupt Flag management *********************************************************************************/
  if (IS_DMA_GLOBAL_ACTIVE_FLAG(p_dma_instance, global_it_flag) == 0U)
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	68da      	ldr	r2, [r3, #12]
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	4013      	ands	r3, r2
 8003810:	2b00      	cmp	r3, #0
 8003812:	f000 8150 	beq.w	8003ab6 <HAL_DMA_IRQHandler+0x2dc>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U))
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	691b      	ldr	r3, [r3, #16]
 800381c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003820:	2b00      	cmp	r3, #0
 8003822:	d011      	beq.n	8003848 <HAL_DMA_IRQHandler+0x6e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	695b      	ldr	r3, [r3, #20]
 800382a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800382e:	2b00      	cmp	r3, #0
 8003830:	d00a      	beq.n	8003848 <HAL_DMA_IRQHandler+0x6e>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800383a:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003840:	f043 0201 	orr.w	r2, r3, #1
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U))
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	691b      	ldr	r3, [r3, #16]
 800384e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003852:	2b00      	cmp	r3, #0
 8003854:	d011      	beq.n	800387a <HAL_DMA_IRQHandler+0xa0>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	695b      	ldr	r3, [r3, #20]
 800385c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003860:	2b00      	cmp	r3, #0
 8003862:	d00a      	beq.n	800387a <HAL_DMA_IRQHandler+0xa0>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800386c:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003872:	f043 0202 	orr.w	r2, r3, #2
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U))
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	691b      	ldr	r3, [r3, #16]
 8003880:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003884:	2b00      	cmp	r3, #0
 8003886:	d011      	beq.n	80038ac <HAL_DMA_IRQHandler+0xd2>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	695b      	ldr	r3, [r3, #20]
 800388e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003892:	2b00      	cmp	r3, #0
 8003894:	d00a      	beq.n	80038ac <HAL_DMA_IRQHandler+0xd2>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800389e:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038a4:	f043 0204 	orr.w	r2, r3, #4
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U))
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	691b      	ldr	r3, [r3, #16]
 80038b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d011      	beq.n	80038de <HAL_DMA_IRQHandler+0x104>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	695b      	ldr	r3, [r3, #20]
 80038c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d00a      	beq.n	80038de <HAL_DMA_IRQHandler+0x104>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80038d0:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038d6:	f043 0208 	orr.w	r2, r3, #8
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U))
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	691b      	ldr	r3, [r3, #16]
 80038e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d013      	beq.n	8003914 <HAL_DMA_IRQHandler+0x13a>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	695b      	ldr	r3, [r3, #20]
 80038f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d00c      	beq.n	8003914 <HAL_DMA_IRQHandler+0x13a>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003902:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003908:	2b00      	cmp	r3, #0
 800390a:	d003      	beq.n	8003914 <HAL_DMA_IRQHandler+0x13a>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003910:	6878      	ldr	r0, [r7, #4]
 8003912:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U))
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	691b      	ldr	r3, [r3, #16]
 800391a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800391e:	2b00      	cmp	r3, #0
 8003920:	d055      	beq.n	80039ce <HAL_DMA_IRQHandler+0x1f4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	695b      	ldr	r3, [r3, #20]
 8003928:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800392c:	2b00      	cmp	r3, #0
 800392e:	d04e      	beq.n	80039ce <HAL_DMA_IRQHandler+0x1f4>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003938:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003940:	b2db      	uxtb	r3, r3
 8003942:	2b04      	cmp	r3, #4
 8003944:	d137      	bne.n	80039b6 <HAL_DMA_IRQHandler+0x1dc>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	695a      	ldr	r2, [r3, #20]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003954:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	695a      	ldr	r2, [r3, #20]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f042 0202 	orr.w	r2, r2, #2
 8003964:	615a      	str	r2, [r3, #20]

        if ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	695b      	ldr	r3, [r3, #20]
 800396c:	f003 0301 	and.w	r3, r3, #1
 8003970:	2b00      	cmp	r3, #0
 8003972:	d004      	beq.n	800397e <HAL_DMA_IRQHandler+0x1a4>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2203      	movs	r2, #3
 8003978:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 800397c:	e003      	b.n	8003986 <HAL_DMA_IRQHandler+0x1ac>
        }
        else
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2201      	movs	r2, #1
 8003982:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
        }

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800398a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800398e:	2b00      	cmp	r3, #0
 8003990:	d003      	beq.n	800399a <HAL_DMA_IRQHandler+0x1c0>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003996:	2201      	movs	r2, #1
 8003998:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2200      	movs	r2, #0
 800399e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	f000 8087 	beq.w	8003aba <HAL_DMA_IRQHandler+0x2e0>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039b0:	6878      	ldr	r0, [r7, #4]
 80039b2:	4798      	blx	r3
        }

        return;
 80039b4:	e081      	b.n	8003aba <HAL_DMA_IRQHandler+0x2e0>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2205      	movs	r2, #5
 80039ba:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d003      	beq.n	80039ce <HAL_DMA_IRQHandler+0x1f4>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U))
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	691b      	ldr	r3, [r3, #16]
 80039d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d039      	beq.n	8003a50 <HAL_DMA_IRQHandler+0x276>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	695b      	ldr	r3, [r3, #20]
 80039e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d032      	beq.n	8003a50 <HAL_DMA_IRQHandler+0x276>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d012      	beq.n	8003a1c <HAL_DMA_IRQHandler+0x242>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d116      	bne.n	8003a2e <HAL_DMA_IRQHandler+0x254>
        {
          if (hdma->Instance->CBR1 == 0U)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d111      	bne.n	8003a2e <HAL_DMA_IRQHandler+0x254>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2201      	movs	r2, #1
 8003a0e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a16:	2201      	movs	r2, #1
 8003a18:	731a      	strb	r2, [r3, #12]
 8003a1a:	e008      	b.n	8003a2e <HAL_DMA_IRQHandler+0x254>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d103      	bne.n	8003a2e <HAL_DMA_IRQHandler+0x254>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2201      	movs	r2, #1
 8003a2a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f44f 7240 	mov.w	r2, #768	; 0x300
 8003a36:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d003      	beq.n	8003a50 <HAL_DMA_IRQHandler+0x276>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a4c:	6878      	ldr	r0, [r7, #4]
 8003a4e:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d031      	beq.n	8003abc <HAL_DMA_IRQHandler+0x2e2>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	695a      	ldr	r2, [r3, #20]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f042 0202 	orr.w	r2, r2, #2
 8003a66:	615a      	str	r2, [r3, #20]

    if ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	695b      	ldr	r3, [r3, #20]
 8003a6e:	f003 0301 	and.w	r3, r3, #1
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d004      	beq.n	8003a80 <HAL_DMA_IRQHandler+0x2a6>
    {
      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2203      	movs	r2, #3
 8003a7a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8003a7e:	e003      	b.n	8003a88 <HAL_DMA_IRQHandler+0x2ae>
    }
    else
    {
      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_READY;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2201      	movs	r2, #1
 8003a84:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
    }

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d003      	beq.n	8003a9c <HAL_DMA_IRQHandler+0x2c2>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a98:	2201      	movs	r2, #1
 8003a9a:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d007      	beq.n	8003abc <HAL_DMA_IRQHandler+0x2e2>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ab0:	6878      	ldr	r0, [r7, #4]
 8003ab2:	4798      	blx	r3
 8003ab4:	e002      	b.n	8003abc <HAL_DMA_IRQHandler+0x2e2>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 8003ab6:	bf00      	nop
 8003ab8:	e000      	b.n	8003abc <HAL_DMA_IRQHandler+0x2e2>
        return;
 8003aba:	bf00      	nop
    }
  }
}
 8003abc:	3710      	adds	r7, #16
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}

08003ac2 <HAL_DMA_GetError>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval DMA Error Code.
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef const *const hdma)
{
 8003ac2:	b480      	push	{r7}
 8003ac4:	b083      	sub	sp, #12
 8003ac6:	af00      	add	r7, sp, #0
 8003ac8:	6078      	str	r0, [r7, #4]
  /* Return the DMA channel error code */
  return hdma->ErrorCode;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003ace:	4618      	mov	r0, r3
 8003ad0:	370c      	adds	r7, #12
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad8:	4770      	bx	lr
	...

08003adc <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b084      	sub	sp, #16
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
 8003ae4:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d101      	bne.n	8003af0 <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 8003aec:	2301      	movs	r3, #1
 8003aee:	e036      	b.n	8003b5e <HAL_DMA_ConfigChannelAttributes+0x82>
  }

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	2b11      	cmp	r3, #17
 8003af4:	d007      	beq.n	8003b06 <HAL_DMA_ConfigChannelAttributes+0x2a>
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	2b10      	cmp	r3, #16
 8003afa:	d004      	beq.n	8003b06 <HAL_DMA_ConfigChannelAttributes+0x2a>
 8003afc:	f240 516b 	movw	r1, #1387	; 0x56b
 8003b00:	4819      	ldr	r0, [pc, #100]	; (8003b68 <HAL_DMA_ConfigChannelAttributes+0x8c>)
 8003b02:	f011 fbd2 	bl	80152aa <assert_failed>

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8003b0e:	f023 030f 	bic.w	r3, r3, #15
 8003b12:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b1c:	3b50      	subs	r3, #80	; 0x50
 8003b1e:	09db      	lsrs	r3, r3, #7
 8003b20:	f003 031f 	and.w	r3, r3, #31
 8003b24:	2201      	movs	r2, #1
 8003b26:	fa02 f303 	lsl.w	r3, r2, r3
 8003b2a:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	f003 0310 	and.w	r3, r3, #16
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d012      	beq.n	8003b5c <HAL_DMA_ConfigChannelAttributes+0x80>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	f003 0311 	and.w	r3, r3, #17
 8003b3c:	2b11      	cmp	r3, #17
 8003b3e:	d106      	bne.n	8003b4e <HAL_DMA_ConfigChannelAttributes+0x72>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	685a      	ldr	r2, [r3, #4]
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	431a      	orrs	r2, r3
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	605a      	str	r2, [r3, #4]
 8003b4c:	e006      	b.n	8003b5c <HAL_DMA_ConfigChannelAttributes+0x80>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	685a      	ldr	r2, [r3, #4]
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	43db      	mvns	r3, r3
 8003b56:	401a      	ands	r2, r3
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 8003b5c:	2300      	movs	r3, #0
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	3710      	adds	r7, #16
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}
 8003b66:	bf00      	nop
 8003b68:	08025aac 	.word	0x08025aac

08003b6c <DMA_SetConfig>:
  */
static void DMA_SetConfig(DMA_HandleTypeDef const *const hdma,
                          uint32_t SrcAddress,
                          uint32_t DstAddress,
                          uint32_t SrcDataSize)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b085      	sub	sp, #20
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	60f8      	str	r0, [r7, #12]
 8003b74:	60b9      	str	r1, [r7, #8]
 8003b76:	607a      	str	r2, [r7, #4]
 8003b78:	603b      	str	r3, [r7, #0]
  /* Configure the DMA channel data size */
  MODIFY_REG(hdma->Instance->CBR1, DMA_CBR1_BNDT, (SrcDataSize & DMA_CBR1_BNDT));
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b80:	0c1b      	lsrs	r3, r3, #16
 8003b82:	041b      	lsls	r3, r3, #16
 8003b84:	683a      	ldr	r2, [r7, #0]
 8003b86:	b291      	uxth	r1, r2
 8003b88:	68fa      	ldr	r2, [r7, #12]
 8003b8a:	6812      	ldr	r2, [r2, #0]
 8003b8c:	430b      	orrs	r3, r1
 8003b8e:	6493      	str	r3, [r2, #72]	; 0x48

  /* Clear all interrupt flags */
  __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 8003b98:	60da      	str	r2, [r3, #12]
                       DMA_FLAG_TO);

  /* Configure DMA channel source address */
  hdma->Instance->CSAR = SrcAddress;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	68ba      	ldr	r2, [r7, #8]
 8003ba0:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure DMA channel destination address */
  hdma->Instance->CDAR = DstAddress;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	687a      	ldr	r2, [r7, #4]
 8003ba8:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003baa:	bf00      	nop
 8003bac:	3714      	adds	r7, #20
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb4:	4770      	bx	lr
	...

08003bb8 <DMA_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_Init(DMA_HandleTypeDef const *const hdma)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b085      	sub	sp, #20
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value *****************************************************************/
  tmpreg = hdma->Init.Priority;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6a1b      	ldr	r3, [r3, #32]
 8003bc4:	60fb      	str	r3, [r7, #12]

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	695b      	ldr	r3, [r3, #20]
 8003bcc:	f423 0143 	bic.w	r1, r3, #12779520	; 0xc30000
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	68fa      	ldr	r2, [r7, #12]
 8003bd6:	430a      	orrs	r2, r1
 8003bd8:	615a      	str	r2, [r3, #20]


  /* Prepare DMA Channel Transfer Register (CTR1) value ***************************************************************/
  tmpreg = hdma->Init.DestInc | hdma->Init.DestDataWidth | hdma->Init.SrcInc | hdma->Init.SrcDataWidth;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	695a      	ldr	r2, [r3, #20]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	69db      	ldr	r3, [r3, #28]
 8003be2:	431a      	orrs	r2, r3
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	691b      	ldr	r3, [r3, #16]
 8003be8:	431a      	orrs	r2, r3
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	699b      	ldr	r3, [r3, #24]
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	60fb      	str	r3, [r7, #12]

  /* Add parameters specific to GPDMA */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a53      	ldr	r2, [pc, #332]	; (8003d44 <DMA_Init+0x18c>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	f000 80a0 	beq.w	8003d3e <DMA_Init+0x186>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a51      	ldr	r2, [pc, #324]	; (8003d48 <DMA_Init+0x190>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	f000 809a 	beq.w	8003d3e <DMA_Init+0x186>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a4f      	ldr	r2, [pc, #316]	; (8003d4c <DMA_Init+0x194>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	f000 8094 	beq.w	8003d3e <DMA_Init+0x186>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a4d      	ldr	r2, [pc, #308]	; (8003d50 <DMA_Init+0x198>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	f000 808e 	beq.w	8003d3e <DMA_Init+0x186>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a4b      	ldr	r2, [pc, #300]	; (8003d54 <DMA_Init+0x19c>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	f000 8088 	beq.w	8003d3e <DMA_Init+0x186>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a49      	ldr	r2, [pc, #292]	; (8003d58 <DMA_Init+0x1a0>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	f000 8082 	beq.w	8003d3e <DMA_Init+0x186>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a47      	ldr	r2, [pc, #284]	; (8003d5c <DMA_Init+0x1a4>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d07c      	beq.n	8003d3e <DMA_Init+0x186>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a45      	ldr	r2, [pc, #276]	; (8003d60 <DMA_Init+0x1a8>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d077      	beq.n	8003d3e <DMA_Init+0x186>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a44      	ldr	r2, [pc, #272]	; (8003d64 <DMA_Init+0x1ac>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d072      	beq.n	8003d3e <DMA_Init+0x186>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a42      	ldr	r2, [pc, #264]	; (8003d68 <DMA_Init+0x1b0>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d06d      	beq.n	8003d3e <DMA_Init+0x186>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a41      	ldr	r2, [pc, #260]	; (8003d6c <DMA_Init+0x1b4>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d068      	beq.n	8003d3e <DMA_Init+0x186>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a3f      	ldr	r2, [pc, #252]	; (8003d70 <DMA_Init+0x1b8>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d063      	beq.n	8003d3e <DMA_Init+0x186>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a3e      	ldr	r2, [pc, #248]	; (8003d74 <DMA_Init+0x1bc>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d05e      	beq.n	8003d3e <DMA_Init+0x186>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a3c      	ldr	r2, [pc, #240]	; (8003d78 <DMA_Init+0x1c0>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d059      	beq.n	8003d3e <DMA_Init+0x186>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a3b      	ldr	r2, [pc, #236]	; (8003d7c <DMA_Init+0x1c4>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d054      	beq.n	8003d3e <DMA_Init+0x186>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a39      	ldr	r2, [pc, #228]	; (8003d80 <DMA_Init+0x1c8>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d04f      	beq.n	8003d3e <DMA_Init+0x186>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a38      	ldr	r2, [pc, #224]	; (8003d84 <DMA_Init+0x1cc>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d04a      	beq.n	8003d3e <DMA_Init+0x186>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a36      	ldr	r2, [pc, #216]	; (8003d88 <DMA_Init+0x1d0>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d045      	beq.n	8003d3e <DMA_Init+0x186>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a35      	ldr	r2, [pc, #212]	; (8003d8c <DMA_Init+0x1d4>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d040      	beq.n	8003d3e <DMA_Init+0x186>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a33      	ldr	r2, [pc, #204]	; (8003d90 <DMA_Init+0x1d8>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d03b      	beq.n	8003d3e <DMA_Init+0x186>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a32      	ldr	r2, [pc, #200]	; (8003d94 <DMA_Init+0x1dc>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d036      	beq.n	8003d3e <DMA_Init+0x186>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a30      	ldr	r2, [pc, #192]	; (8003d98 <DMA_Init+0x1e0>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d031      	beq.n	8003d3e <DMA_Init+0x186>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a2f      	ldr	r2, [pc, #188]	; (8003d9c <DMA_Init+0x1e4>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d02c      	beq.n	8003d3e <DMA_Init+0x186>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a2d      	ldr	r2, [pc, #180]	; (8003da0 <DMA_Init+0x1e8>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d027      	beq.n	8003d3e <DMA_Init+0x186>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a2c      	ldr	r2, [pc, #176]	; (8003da4 <DMA_Init+0x1ec>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d022      	beq.n	8003d3e <DMA_Init+0x186>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a2a      	ldr	r2, [pc, #168]	; (8003da8 <DMA_Init+0x1f0>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d01d      	beq.n	8003d3e <DMA_Init+0x186>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a29      	ldr	r2, [pc, #164]	; (8003dac <DMA_Init+0x1f4>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d018      	beq.n	8003d3e <DMA_Init+0x186>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a27      	ldr	r2, [pc, #156]	; (8003db0 <DMA_Init+0x1f8>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d013      	beq.n	8003d3e <DMA_Init+0x186>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a26      	ldr	r2, [pc, #152]	; (8003db4 <DMA_Init+0x1fc>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d00e      	beq.n	8003d3e <DMA_Init+0x186>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a24      	ldr	r2, [pc, #144]	; (8003db8 <DMA_Init+0x200>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d009      	beq.n	8003d3e <DMA_Init+0x186>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a23      	ldr	r2, [pc, #140]	; (8003dbc <DMA_Init+0x204>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d004      	beq.n	8003d3e <DMA_Init+0x186>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a21      	ldr	r2, [pc, #132]	; (8003dc0 <DMA_Init+0x208>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d142      	bne.n	8003dc4 <DMA_Init+0x20c>
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e041      	b.n	8003dc6 <DMA_Init+0x20e>
 8003d42:	bf00      	nop
 8003d44:	40020050 	.word	0x40020050
 8003d48:	50020050 	.word	0x50020050
 8003d4c:	400200d0 	.word	0x400200d0
 8003d50:	500200d0 	.word	0x500200d0
 8003d54:	40020150 	.word	0x40020150
 8003d58:	50020150 	.word	0x50020150
 8003d5c:	400201d0 	.word	0x400201d0
 8003d60:	500201d0 	.word	0x500201d0
 8003d64:	40020250 	.word	0x40020250
 8003d68:	50020250 	.word	0x50020250
 8003d6c:	400202d0 	.word	0x400202d0
 8003d70:	500202d0 	.word	0x500202d0
 8003d74:	40020350 	.word	0x40020350
 8003d78:	50020350 	.word	0x50020350
 8003d7c:	400203d0 	.word	0x400203d0
 8003d80:	500203d0 	.word	0x500203d0
 8003d84:	40020450 	.word	0x40020450
 8003d88:	50020450 	.word	0x50020450
 8003d8c:	400204d0 	.word	0x400204d0
 8003d90:	500204d0 	.word	0x500204d0
 8003d94:	40020550 	.word	0x40020550
 8003d98:	50020550 	.word	0x50020550
 8003d9c:	400205d0 	.word	0x400205d0
 8003da0:	500205d0 	.word	0x500205d0
 8003da4:	40020650 	.word	0x40020650
 8003da8:	50020650 	.word	0x50020650
 8003dac:	400206d0 	.word	0x400206d0
 8003db0:	500206d0 	.word	0x500206d0
 8003db4:	40020750 	.word	0x40020750
 8003db8:	50020750 	.word	0x50020750
 8003dbc:	400207d0 	.word	0x400207d0
 8003dc0:	500207d0 	.word	0x500207d0
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d012      	beq.n	8003df0 <DMA_Init+0x238>
  {
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dd2:	3b01      	subs	r3, #1
 8003dd4:	051b      	lsls	r3, r3, #20
 8003dd6:	f003 737c 	and.w	r3, r3, #66060288	; 0x3f00000
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8003dda:	431a      	orrs	r2, r3
               (((hdma->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de0:	3b01      	subs	r3, #1
 8003de2:	011b      	lsls	r3, r3, #4
 8003de4:	f403 737c 	and.w	r3, r3, #1008	; 0x3f0
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8003de8:	4313      	orrs	r3, r2
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8003dea:	68fa      	ldr	r2, [r7, #12]
 8003dec:	4313      	orrs	r3, r2
 8003dee:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Transfer Register 1 (CTR1) */
  MODIFY_REG(hdma->Instance->CTR1, ~(DMA_CTR1_SSEC | DMA_CTR1_DSEC), tmpreg);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df6:	f003 2180 	and.w	r1, r3, #2147516416	; 0x80008000
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	68fa      	ldr	r2, [r7, #12]
 8003e00:	430a      	orrs	r2, r1
 8003e02:	641a      	str	r2, [r3, #64]	; 0x40

  /* Prepare DMA Channel Transfer Register 2 (CTR2) value *************************************************************/
  tmpreg = hdma->Init.BlkHWRequest | (hdma->Init.Request & DMA_CTR2_REQSEL) | hdma->Init.TransferEventMode;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	689a      	ldr	r2, [r3, #8]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e10:	431a      	orrs	r2, r3
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e16:	4313      	orrs	r3, r2
 8003e18:	60fb      	str	r3, [r7, #12]

  /* Memory to Peripheral Transfer */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	68db      	ldr	r3, [r3, #12]
 8003e1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e22:	f040 80b0 	bne.w	8003f86 <DMA_Init+0x3ce>
  {
    if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a82      	ldr	r2, [pc, #520]	; (8004034 <DMA_Init+0x47c>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	f000 80a0 	beq.w	8003f72 <DMA_Init+0x3ba>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a80      	ldr	r2, [pc, #512]	; (8004038 <DMA_Init+0x480>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	f000 809a 	beq.w	8003f72 <DMA_Init+0x3ba>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a7e      	ldr	r2, [pc, #504]	; (800403c <DMA_Init+0x484>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	f000 8094 	beq.w	8003f72 <DMA_Init+0x3ba>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a7c      	ldr	r2, [pc, #496]	; (8004040 <DMA_Init+0x488>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	f000 808e 	beq.w	8003f72 <DMA_Init+0x3ba>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a7a      	ldr	r2, [pc, #488]	; (8004044 <DMA_Init+0x48c>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	f000 8088 	beq.w	8003f72 <DMA_Init+0x3ba>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a78      	ldr	r2, [pc, #480]	; (8004048 <DMA_Init+0x490>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	f000 8082 	beq.w	8003f72 <DMA_Init+0x3ba>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a76      	ldr	r2, [pc, #472]	; (800404c <DMA_Init+0x494>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d07c      	beq.n	8003f72 <DMA_Init+0x3ba>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a74      	ldr	r2, [pc, #464]	; (8004050 <DMA_Init+0x498>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d077      	beq.n	8003f72 <DMA_Init+0x3ba>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a73      	ldr	r2, [pc, #460]	; (8004054 <DMA_Init+0x49c>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d072      	beq.n	8003f72 <DMA_Init+0x3ba>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a71      	ldr	r2, [pc, #452]	; (8004058 <DMA_Init+0x4a0>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d06d      	beq.n	8003f72 <DMA_Init+0x3ba>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a70      	ldr	r2, [pc, #448]	; (800405c <DMA_Init+0x4a4>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d068      	beq.n	8003f72 <DMA_Init+0x3ba>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a6e      	ldr	r2, [pc, #440]	; (8004060 <DMA_Init+0x4a8>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d063      	beq.n	8003f72 <DMA_Init+0x3ba>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a6d      	ldr	r2, [pc, #436]	; (8004064 <DMA_Init+0x4ac>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d05e      	beq.n	8003f72 <DMA_Init+0x3ba>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a6b      	ldr	r2, [pc, #428]	; (8004068 <DMA_Init+0x4b0>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d059      	beq.n	8003f72 <DMA_Init+0x3ba>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a6a      	ldr	r2, [pc, #424]	; (800406c <DMA_Init+0x4b4>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d054      	beq.n	8003f72 <DMA_Init+0x3ba>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a68      	ldr	r2, [pc, #416]	; (8004070 <DMA_Init+0x4b8>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d04f      	beq.n	8003f72 <DMA_Init+0x3ba>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a67      	ldr	r2, [pc, #412]	; (8004074 <DMA_Init+0x4bc>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d04a      	beq.n	8003f72 <DMA_Init+0x3ba>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a65      	ldr	r2, [pc, #404]	; (8004078 <DMA_Init+0x4c0>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d045      	beq.n	8003f72 <DMA_Init+0x3ba>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a64      	ldr	r2, [pc, #400]	; (800407c <DMA_Init+0x4c4>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d040      	beq.n	8003f72 <DMA_Init+0x3ba>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a62      	ldr	r2, [pc, #392]	; (8004080 <DMA_Init+0x4c8>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d03b      	beq.n	8003f72 <DMA_Init+0x3ba>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a61      	ldr	r2, [pc, #388]	; (8004084 <DMA_Init+0x4cc>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d036      	beq.n	8003f72 <DMA_Init+0x3ba>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a5f      	ldr	r2, [pc, #380]	; (8004088 <DMA_Init+0x4d0>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d031      	beq.n	8003f72 <DMA_Init+0x3ba>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a5e      	ldr	r2, [pc, #376]	; (800408c <DMA_Init+0x4d4>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d02c      	beq.n	8003f72 <DMA_Init+0x3ba>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a5c      	ldr	r2, [pc, #368]	; (8004090 <DMA_Init+0x4d8>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d027      	beq.n	8003f72 <DMA_Init+0x3ba>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a5b      	ldr	r2, [pc, #364]	; (8004094 <DMA_Init+0x4dc>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d022      	beq.n	8003f72 <DMA_Init+0x3ba>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a59      	ldr	r2, [pc, #356]	; (8004098 <DMA_Init+0x4e0>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d01d      	beq.n	8003f72 <DMA_Init+0x3ba>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a58      	ldr	r2, [pc, #352]	; (800409c <DMA_Init+0x4e4>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d018      	beq.n	8003f72 <DMA_Init+0x3ba>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a56      	ldr	r2, [pc, #344]	; (80040a0 <DMA_Init+0x4e8>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d013      	beq.n	8003f72 <DMA_Init+0x3ba>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a55      	ldr	r2, [pc, #340]	; (80040a4 <DMA_Init+0x4ec>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d00e      	beq.n	8003f72 <DMA_Init+0x3ba>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a53      	ldr	r2, [pc, #332]	; (80040a8 <DMA_Init+0x4f0>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d009      	beq.n	8003f72 <DMA_Init+0x3ba>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a52      	ldr	r2, [pc, #328]	; (80040ac <DMA_Init+0x4f4>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d004      	beq.n	8003f72 <DMA_Init+0x3ba>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a50      	ldr	r2, [pc, #320]	; (80040b0 <DMA_Init+0x4f8>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d101      	bne.n	8003f76 <DMA_Init+0x3be>
 8003f72:	2301      	movs	r3, #1
 8003f74:	e000      	b.n	8003f78 <DMA_Init+0x3c0>
 8003f76:	2300      	movs	r3, #0
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d00d      	beq.n	8003f98 <DMA_Init+0x3e0>
    {
      tmpreg |= DMA_CTR2_DREQ;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003f82:	60fb      	str	r3, [r7, #12]
 8003f84:	e008      	b.n	8003f98 <DMA_Init+0x3e0>
    }
  }
  /* Memory to Memory Transfer */
  else if ((hdma->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	68db      	ldr	r3, [r3, #12]
 8003f8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f8e:	d103      	bne.n	8003f98 <DMA_Init+0x3e0>
  {
    tmpreg |= DMA_CTR2_SWREQ;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003f96:	60fb      	str	r3, [r7, #12]
  {
    /* Nothing to do */
  }

  /* Write DMA Channel Transfer Register 2 (CTR2) */
  MODIFY_REG(hdma->Instance->CTR2, (DMA_CTR2_TCEM  | DMA_CTR2_TRIGPOL | DMA_CTR2_TRIGSEL | DMA_CTR2_TRIGM |
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f9e:	4b45      	ldr	r3, [pc, #276]	; (80040b4 <DMA_Init+0x4fc>)
 8003fa0:	4013      	ands	r3, r2
 8003fa2:	687a      	ldr	r2, [r7, #4]
 8003fa4:	6812      	ldr	r2, [r2, #0]
 8003fa6:	68f9      	ldr	r1, [r7, #12]
 8003fa8:	430b      	orrs	r3, r1
 8003faa:	6453      	str	r3, [r2, #68]	; 0x44
                                    DMA_CTR2_BREQ  | DMA_CTR2_DREQ    | DMA_CTR2_SWREQ   | DMA_CTR2_REQSEL), tmpreg);


  /* Write DMA Channel Block Register 1 (CBR1) ************************************************************************/
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	649a      	str	r2, [r3, #72]	; 0x48


  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a36      	ldr	r2, [pc, #216]	; (8004094 <DMA_Init+0x4dc>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d022      	beq.n	8004004 <DMA_Init+0x44c>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a35      	ldr	r2, [pc, #212]	; (8004098 <DMA_Init+0x4e0>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d01d      	beq.n	8004004 <DMA_Init+0x44c>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a33      	ldr	r2, [pc, #204]	; (800409c <DMA_Init+0x4e4>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d018      	beq.n	8004004 <DMA_Init+0x44c>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a32      	ldr	r2, [pc, #200]	; (80040a0 <DMA_Init+0x4e8>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d013      	beq.n	8004004 <DMA_Init+0x44c>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a30      	ldr	r2, [pc, #192]	; (80040a4 <DMA_Init+0x4ec>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d00e      	beq.n	8004004 <DMA_Init+0x44c>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a2f      	ldr	r2, [pc, #188]	; (80040a8 <DMA_Init+0x4f0>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d009      	beq.n	8004004 <DMA_Init+0x44c>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a2d      	ldr	r2, [pc, #180]	; (80040ac <DMA_Init+0x4f4>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d004      	beq.n	8004004 <DMA_Init+0x44c>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a2c      	ldr	r2, [pc, #176]	; (80040b0 <DMA_Init+0x4f8>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d101      	bne.n	8004008 <DMA_Init+0x450>
 8004004:	2301      	movs	r3, #1
 8004006:	e000      	b.n	800400a <DMA_Init+0x452>
 8004008:	2300      	movs	r3, #0
 800400a:	2b00      	cmp	r3, #0
 800400c:	d007      	beq.n	800401e <DMA_Init+0x466>
  {
    /* Write DMA Channel Transfer Register 3 (CTR3) *******************************************************************/
    WRITE_REG(hdma->Instance->CTR3, 0U);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	2200      	movs	r2, #0
 8004014:	655a      	str	r2, [r3, #84]	; 0x54


    /* Write DMA Channel Block Register 2 (CBR2) **********************************************************************/
    WRITE_REG(hdma->Instance->CBR2, 0U);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	2200      	movs	r2, #0
 800401c:	659a      	str	r2, [r3, #88]	; 0x58
  }


  /* Write DMA Channel linked-list address register (CLLR) ************************************************************/
  WRITE_REG(hdma->Instance->CLLR, 0U);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	2200      	movs	r2, #0
 8004024:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8004026:	bf00      	nop
 8004028:	3714      	adds	r7, #20
 800402a:	46bd      	mov	sp, r7
 800402c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004030:	4770      	bx	lr
 8004032:	bf00      	nop
 8004034:	40020050 	.word	0x40020050
 8004038:	50020050 	.word	0x50020050
 800403c:	400200d0 	.word	0x400200d0
 8004040:	500200d0 	.word	0x500200d0
 8004044:	40020150 	.word	0x40020150
 8004048:	50020150 	.word	0x50020150
 800404c:	400201d0 	.word	0x400201d0
 8004050:	500201d0 	.word	0x500201d0
 8004054:	40020250 	.word	0x40020250
 8004058:	50020250 	.word	0x50020250
 800405c:	400202d0 	.word	0x400202d0
 8004060:	500202d0 	.word	0x500202d0
 8004064:	40020350 	.word	0x40020350
 8004068:	50020350 	.word	0x50020350
 800406c:	400203d0 	.word	0x400203d0
 8004070:	500203d0 	.word	0x500203d0
 8004074:	40020450 	.word	0x40020450
 8004078:	50020450 	.word	0x50020450
 800407c:	400204d0 	.word	0x400204d0
 8004080:	500204d0 	.word	0x500204d0
 8004084:	40020550 	.word	0x40020550
 8004088:	50020550 	.word	0x50020550
 800408c:	400205d0 	.word	0x400205d0
 8004090:	500205d0 	.word	0x500205d0
 8004094:	40020650 	.word	0x40020650
 8004098:	50020650 	.word	0x50020650
 800409c:	400206d0 	.word	0x400206d0
 80040a0:	500206d0 	.word	0x500206d0
 80040a4:	40020750 	.word	0x40020750
 80040a8:	50020750 	.word	0x50020750
 80040ac:	400207d0 	.word	0x400207d0
 80040b0:	500207d0 	.word	0x500207d0
 80040b4:	3cc03180 	.word	0x3cc03180

080040b8 <HAL_DMAEx_List_Start_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Start_IT(DMA_HandleTypeDef *const hdma)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b086      	sub	sp, #24
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  HAL_DMA_StateTypeDef dma_state;
  uint32_t ccr_value;
  uint32_t cllr_mask;

  /* Check the DMA peripheral handle and the linked-list queue parameters */
  if ((hdma == NULL) || (hdma->LinkedListQueue == NULL))
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d003      	beq.n	80040ce <HAL_DMAEx_List_Start_IT+0x16>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d101      	bne.n	80040d2 <HAL_DMAEx_List_Start_IT+0x1a>
  {
    return HAL_ERROR;
 80040ce:	2301      	movs	r3, #1
 80040d0:	e082      	b.n	80041d8 <HAL_DMAEx_List_Start_IT+0x120>
  }

  /* Check DMA channel state */
  dma_state = hdma->State;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80040d8:	75fb      	strb	r3, [r7, #23]
  ccr_value = hdma->Instance->CCR & DMA_CCR_LSM;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	695b      	ldr	r3, [r3, #20]
 80040e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040e4:	613b      	str	r3, [r7, #16]
  if ((dma_state == HAL_DMA_STATE_READY) || ((dma_state == HAL_DMA_STATE_BUSY) && (ccr_value != 0U)))
 80040e6:	7dfb      	ldrb	r3, [r7, #23]
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	d005      	beq.n	80040f8 <HAL_DMAEx_List_Start_IT+0x40>
 80040ec:	7dfb      	ldrb	r3, [r7, #23]
 80040ee:	2b02      	cmp	r3, #2
 80040f0:	d16a      	bne.n	80041c8 <HAL_DMAEx_List_Start_IT+0x110>
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d067      	beq.n	80041c8 <HAL_DMAEx_List_Start_IT+0x110>
  {
    /* Check DMA channel state is ready */
    if (hdma->State == HAL_DMA_STATE_READY)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80040fe:	b2db      	uxtb	r3, r3
 8004100:	2b01      	cmp	r3, #1
 8004102:	d157      	bne.n	80041b4 <HAL_DMAEx_List_Start_IT+0xfc>
    {
      /* Process locked */
      __HAL_LOCK(hdma);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800410a:	2b01      	cmp	r3, #1
 800410c:	d101      	bne.n	8004112 <HAL_DMAEx_List_Start_IT+0x5a>
 800410e:	2302      	movs	r3, #2
 8004110:	e062      	b.n	80041d8 <HAL_DMAEx_List_Start_IT+0x120>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2201      	movs	r2, #1
 8004116:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      /* Update the DMA channel and the queue states */
      hdma->State                  = HAL_DMA_STATE_BUSY;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2202      	movs	r2, #2
 800411e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_BUSY;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004126:	2202      	movs	r2, #2
 8004128:	731a      	strb	r2, [r3, #12]

      /* Update the DMA channel and the queue error codes */
      hdma->ErrorCode                  = HAL_DMA_ERROR_NONE;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2200      	movs	r2, #0
 800412e:	659a      	str	r2, [r3, #88]	; 0x58
      hdma->LinkedListQueue->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004134:	2200      	movs	r2, #0
 8004136:	611a      	str	r2, [r3, #16]

      /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	695a      	ldr	r2, [r3, #20]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f442 42ba 	orr.w	r2, r2, #23808	; 0x5d00
 8004146:	615a      	str	r2, [r3, #20]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800414c:	2b00      	cmp	r3, #0
 800414e:	d007      	beq.n	8004160 <HAL_DMAEx_List_Start_IT+0xa8>
      {
        /* If half transfer complete callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	695a      	ldr	r2, [r3, #20]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800415e:	615a      	str	r2, [r3, #20]
      }

      /* Check suspend callback */
      if (hdma->XferSuspendCallback != NULL)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004164:	2b00      	cmp	r3, #0
 8004166:	d007      	beq.n	8004178 <HAL_DMAEx_List_Start_IT+0xc0>
      {
        /* If transfer suspend callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	695a      	ldr	r2, [r3, #20]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004176:	615a      	str	r2, [r3, #20]
      }

      /* Get CLLR register mask and offset */
      DMA_List_GetCLLRNodeInfo(hdma->LinkedListQueue->Head, &cllr_mask, NULL);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f107 010c 	add.w	r1, r7, #12
 8004182:	2200      	movs	r2, #0
 8004184:	4618      	mov	r0, r3
 8004186:	f000 f82b 	bl	80041e0 <DMA_List_GetCLLRNodeInfo>

      /* Update DMA registers for linked-list transfer */
      hdma->Instance->CLBAR = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLBAR_LBA);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4619      	mov	r1, r3
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681a      	ldr	r2, [r3, #0]
 8004196:	0c0b      	lsrs	r3, r1, #16
 8004198:	041b      	lsls	r3, r3, #16
 800419a:	6013      	str	r3, [r2, #0]
      hdma->Instance->CLLR  = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLLR_LA) | cllr_mask;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	461a      	mov	r2, r3
 80041a4:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 80041a8:	4013      	ands	r3, r2
 80041aa:	68f9      	ldr	r1, [r7, #12]
 80041ac:	687a      	ldr	r2, [r7, #4]
 80041ae:	6812      	ldr	r2, [r2, #0]
 80041b0:	430b      	orrs	r3, r1
 80041b2:	67d3      	str	r3, [r2, #124]	; 0x7c
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	695a      	ldr	r2, [r3, #20]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f042 0201 	orr.w	r2, r2, #1
 80041c2:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 80041c4:	2300      	movs	r3, #0
 80041c6:	e007      	b.n	80041d8 <HAL_DMAEx_List_Start_IT+0x120>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2240      	movs	r2, #64	; 0x40
 80041cc:	659a      	str	r2, [r3, #88]	; 0x58
    __HAL_UNLOCK(hdma);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2200      	movs	r2, #0
 80041d2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    return HAL_ERROR;
 80041d6:	2301      	movs	r3, #1
}
 80041d8:	4618      	mov	r0, r3
 80041da:	3718      	adds	r7, #24
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}

080041e0 <DMA_List_GetCLLRNodeInfo>:
  * @retval None.
  */
static void DMA_List_GetCLLRNodeInfo(DMA_NodeTypeDef const *const pNode,
                                     uint32_t *const cllr_mask,
                                     uint32_t *const cllr_offset)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b085      	sub	sp, #20
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	60f8      	str	r0, [r7, #12]
 80041e8:	60b9      	str	r1, [r7, #8]
 80041ea:	607a      	str	r2, [r7, #4]
  /* Check node type */
  if ((pNode->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	6a1b      	ldr	r3, [r3, #32]
 80041f0:	f003 0302 	and.w	r3, r3, #2
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d00c      	beq.n	8004212 <DMA_List_GetCLLRNodeInfo+0x32>
  {
    /* Update CLLR register mask value */
    if (cllr_mask != NULL)
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d002      	beq.n	8004204 <DMA_List_GetCLLRNodeInfo+0x24>
    {
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_UT3 |
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	4a0d      	ldr	r2, [pc, #52]	; (8004238 <DMA_List_GetCLLRNodeInfo+0x58>)
 8004202:	601a      	str	r2, [r3, #0]
                   DMA_CLLR_UB2 | DMA_CLLR_ULL;
    }

    /* Update CLLR register offset */
    if (cllr_offset != NULL)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d00f      	beq.n	800422a <DMA_List_GetCLLRNodeInfo+0x4a>
    {
      *cllr_offset = NODE_CLLR_2D_DEFAULT_OFFSET;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2207      	movs	r2, #7
 800420e:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
    {
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
    }
  }
}
 8004210:	e00b      	b.n	800422a <DMA_List_GetCLLRNodeInfo+0x4a>
    if (cllr_mask != NULL)
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d002      	beq.n	800421e <DMA_List_GetCLLRNodeInfo+0x3e>
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_ULL;
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	4a08      	ldr	r2, [pc, #32]	; (800423c <DMA_List_GetCLLRNodeInfo+0x5c>)
 800421c:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d002      	beq.n	800422a <DMA_List_GetCLLRNodeInfo+0x4a>
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2205      	movs	r2, #5
 8004228:	601a      	str	r2, [r3, #0]
}
 800422a:	bf00      	nop
 800422c:	3714      	adds	r7, #20
 800422e:	46bd      	mov	sp, r7
 8004230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004234:	4770      	bx	lr
 8004236:	bf00      	nop
 8004238:	fe010000 	.word	0xfe010000
 800423c:	f8010000 	.word	0xf8010000

08004240 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8004240:	b480      	push	{r7}
 8004242:	b083      	sub	sp, #12
 8004244:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->NSCR, FLASH_NSCR_LOCK);
 800424a:	4b09      	ldr	r3, [pc, #36]	; (8004270 <HAL_FLASH_Lock+0x30>)
 800424c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800424e:	4a08      	ldr	r2, [pc, #32]	; (8004270 <HAL_FLASH_Lock+0x30>)
 8004250:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004254:	6293      	str	r3, [r2, #40]	; 0x28

  /* verify Flash is locked */
  if (READ_BIT(FLASH->NSCR, FLASH_NSCR_LOCK) != 0U)
 8004256:	4b06      	ldr	r3, [pc, #24]	; (8004270 <HAL_FLASH_Lock+0x30>)
 8004258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800425a:	2b00      	cmp	r3, #0
 800425c:	da01      	bge.n	8004262 <HAL_FLASH_Lock+0x22>
  {
    status = HAL_OK;
 800425e:	2300      	movs	r3, #0
 8004260:	71fb      	strb	r3, [r7, #7]
      status = HAL_OK;
    }
  }
#endif /* __ARM_FEATURE_CMSE */

  return status;
 8004262:	79fb      	ldrb	r3, [r7, #7]
}
 8004264:	4618      	mov	r0, r3
 8004266:	370c      	adds	r7, #12
 8004268:	46bd      	mov	sp, r7
 800426a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426e:	4770      	bx	lr
 8004270:	40022000 	.word	0x40022000

08004274 <HAL_FLASH_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Bytes Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
{
 8004274:	b480      	push	{r7}
 8004276:	af00      	add	r7, sp, #0
  /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
  SET_BIT(FLASH->NSCR, FLASH_NSCR_OPTLOCK);
 8004278:	4b09      	ldr	r3, [pc, #36]	; (80042a0 <HAL_FLASH_OB_Lock+0x2c>)
 800427a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800427c:	4a08      	ldr	r2, [pc, #32]	; (80042a0 <HAL_FLASH_OB_Lock+0x2c>)
 800427e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004282:	6293      	str	r3, [r2, #40]	; 0x28

  /* Verify that the Option Bytes are locked */
  if (READ_BIT(FLASH->NSCR, FLASH_NSCR_OPTLOCK) != 0U)
 8004284:	4b06      	ldr	r3, [pc, #24]	; (80042a0 <HAL_FLASH_OB_Lock+0x2c>)
 8004286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004288:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800428c:	2b00      	cmp	r3, #0
 800428e:	d001      	beq.n	8004294 <HAL_FLASH_OB_Lock+0x20>
  {
    return HAL_OK;
 8004290:	2300      	movs	r3, #0
 8004292:	e000      	b.n	8004296 <HAL_FLASH_OB_Lock+0x22>
  }

  return HAL_ERROR;
 8004294:	2301      	movs	r3, #1
}
 8004296:	4618      	mov	r0, r3
 8004298:	46bd      	mov	sp, r7
 800429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429e:	4770      	bx	lr
 80042a0:	40022000 	.word	0x40022000

080042a4 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b088      	sub	sp, #32
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
 80042ac:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 80042ae:	2300      	movs	r3, #0
 80042b0:	617b      	str	r3, [r7, #20]
  GPIO_TypeDef  *p_gpio;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	4a87      	ldr	r2, [pc, #540]	; (80044d4 <HAL_GPIO_Init+0x230>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d04f      	beq.n	800435a <HAL_GPIO_Init+0xb6>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	4a86      	ldr	r2, [pc, #536]	; (80044d8 <HAL_GPIO_Init+0x234>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d04b      	beq.n	800435a <HAL_GPIO_Init+0xb6>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	4a85      	ldr	r2, [pc, #532]	; (80044dc <HAL_GPIO_Init+0x238>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d047      	beq.n	800435a <HAL_GPIO_Init+0xb6>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	4a84      	ldr	r2, [pc, #528]	; (80044e0 <HAL_GPIO_Init+0x23c>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d043      	beq.n	800435a <HAL_GPIO_Init+0xb6>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	4a83      	ldr	r2, [pc, #524]	; (80044e4 <HAL_GPIO_Init+0x240>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d03f      	beq.n	800435a <HAL_GPIO_Init+0xb6>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	4a82      	ldr	r2, [pc, #520]	; (80044e8 <HAL_GPIO_Init+0x244>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d03b      	beq.n	800435a <HAL_GPIO_Init+0xb6>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	4a81      	ldr	r2, [pc, #516]	; (80044ec <HAL_GPIO_Init+0x248>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d037      	beq.n	800435a <HAL_GPIO_Init+0xb6>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	4a80      	ldr	r2, [pc, #512]	; (80044f0 <HAL_GPIO_Init+0x24c>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d033      	beq.n	800435a <HAL_GPIO_Init+0xb6>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	4a7f      	ldr	r2, [pc, #508]	; (80044f4 <HAL_GPIO_Init+0x250>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d02f      	beq.n	800435a <HAL_GPIO_Init+0xb6>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	4a7e      	ldr	r2, [pc, #504]	; (80044f8 <HAL_GPIO_Init+0x254>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d02b      	beq.n	800435a <HAL_GPIO_Init+0xb6>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	4a7d      	ldr	r2, [pc, #500]	; (80044fc <HAL_GPIO_Init+0x258>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d027      	beq.n	800435a <HAL_GPIO_Init+0xb6>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	4a7c      	ldr	r2, [pc, #496]	; (8004500 <HAL_GPIO_Init+0x25c>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d023      	beq.n	800435a <HAL_GPIO_Init+0xb6>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	4a7b      	ldr	r2, [pc, #492]	; (8004504 <HAL_GPIO_Init+0x260>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d01f      	beq.n	800435a <HAL_GPIO_Init+0xb6>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	4a7a      	ldr	r2, [pc, #488]	; (8004508 <HAL_GPIO_Init+0x264>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d01b      	beq.n	800435a <HAL_GPIO_Init+0xb6>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	4a79      	ldr	r2, [pc, #484]	; (800450c <HAL_GPIO_Init+0x268>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d017      	beq.n	800435a <HAL_GPIO_Init+0xb6>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	4a78      	ldr	r2, [pc, #480]	; (8004510 <HAL_GPIO_Init+0x26c>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d013      	beq.n	800435a <HAL_GPIO_Init+0xb6>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	4a77      	ldr	r2, [pc, #476]	; (8004514 <HAL_GPIO_Init+0x270>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d00f      	beq.n	800435a <HAL_GPIO_Init+0xb6>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	4a76      	ldr	r2, [pc, #472]	; (8004518 <HAL_GPIO_Init+0x274>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d00b      	beq.n	800435a <HAL_GPIO_Init+0xb6>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	4a75      	ldr	r2, [pc, #468]	; (800451c <HAL_GPIO_Init+0x278>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d007      	beq.n	800435a <HAL_GPIO_Init+0xb6>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	4a74      	ldr	r2, [pc, #464]	; (8004520 <HAL_GPIO_Init+0x27c>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d003      	beq.n	800435a <HAL_GPIO_Init+0xb6>
 8004352:	21ce      	movs	r1, #206	; 0xce
 8004354:	4873      	ldr	r0, [pc, #460]	; (8004524 <HAL_GPIO_Init+0x280>)
 8004356:	f010 ffa8 	bl	80152aa <assert_failed>
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	b29b      	uxth	r3, r3
 8004360:	2b00      	cmp	r3, #0
 8004362:	d005      	beq.n	8004370 <HAL_GPIO_Init+0xcc>
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	0c1b      	lsrs	r3, r3, #16
 800436a:	041b      	lsls	r3, r3, #16
 800436c:	2b00      	cmp	r3, #0
 800436e:	d003      	beq.n	8004378 <HAL_GPIO_Init+0xd4>
 8004370:	21cf      	movs	r1, #207	; 0xcf
 8004372:	486c      	ldr	r0, [pc, #432]	; (8004524 <HAL_GPIO_Init+0x280>)
 8004374:	f010 ff99 	bl	80152aa <assert_failed>
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d035      	beq.n	80043ec <HAL_GPIO_Init+0x148>
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	2b01      	cmp	r3, #1
 8004386:	d031      	beq.n	80043ec <HAL_GPIO_Init+0x148>
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	2b11      	cmp	r3, #17
 800438e:	d02d      	beq.n	80043ec <HAL_GPIO_Init+0x148>
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	2b02      	cmp	r3, #2
 8004396:	d029      	beq.n	80043ec <HAL_GPIO_Init+0x148>
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	2b12      	cmp	r3, #18
 800439e:	d025      	beq.n	80043ec <HAL_GPIO_Init+0x148>
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	4a60      	ldr	r2, [pc, #384]	; (8004528 <HAL_GPIO_Init+0x284>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d020      	beq.n	80043ec <HAL_GPIO_Init+0x148>
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	4a5f      	ldr	r2, [pc, #380]	; (800452c <HAL_GPIO_Init+0x288>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d01b      	beq.n	80043ec <HAL_GPIO_Init+0x148>
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	4a5d      	ldr	r2, [pc, #372]	; (8004530 <HAL_GPIO_Init+0x28c>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d016      	beq.n	80043ec <HAL_GPIO_Init+0x148>
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	4a5c      	ldr	r2, [pc, #368]	; (8004534 <HAL_GPIO_Init+0x290>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d011      	beq.n	80043ec <HAL_GPIO_Init+0x148>
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	4a5a      	ldr	r2, [pc, #360]	; (8004538 <HAL_GPIO_Init+0x294>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d00c      	beq.n	80043ec <HAL_GPIO_Init+0x148>
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	4a59      	ldr	r2, [pc, #356]	; (800453c <HAL_GPIO_Init+0x298>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d007      	beq.n	80043ec <HAL_GPIO_Init+0x148>
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	2b03      	cmp	r3, #3
 80043e2:	d003      	beq.n	80043ec <HAL_GPIO_Init+0x148>
 80043e4:	21d0      	movs	r1, #208	; 0xd0
 80043e6:	484f      	ldr	r0, [pc, #316]	; (8004524 <HAL_GPIO_Init+0x280>)
 80043e8:	f010 ff5f 	bl	80152aa <assert_failed>

  /* Save GPIO port address */
  p_gpio = GPIOx;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80043f0:	e375      	b.n	8004ade <HAL_GPIO_Init+0x83a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	681a      	ldr	r2, [r3, #0]
 80043f6:	2101      	movs	r1, #1
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	fa01 f303 	lsl.w	r3, r1, r3
 80043fe:	4013      	ands	r3, r2
 8004400:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	2b00      	cmp	r3, #0
 800440a:	f000 8365 	beq.w	8004ad8 <HAL_GPIO_Init+0x834>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	4a42      	ldr	r2, [pc, #264]	; (800451c <HAL_GPIO_Init+0x278>)
 8004412:	4293      	cmp	r3, r2
 8004414:	f040 8096 	bne.w	8004544 <HAL_GPIO_Init+0x2a0>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 800441e:	2201      	movs	r2, #1
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	fa02 f303 	lsl.w	r3, r2, r3
 8004426:	43db      	mvns	r3, r3
 8004428:	69fa      	ldr	r2, [r7, #28]
 800442a:	4013      	ands	r3, r2
 800442c:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	f003 0201 	and.w	r2, r3, #1
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	fa02 f303 	lsl.w	r3, r2, r3
 800443c:	69fa      	ldr	r2, [r7, #28]
 800443e:	4313      	orrs	r3, r2
 8004440:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	69fa      	ldr	r2, [r7, #28]
 8004446:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8004448:	4a3d      	ldr	r2, [pc, #244]	; (8004540 <HAL_GPIO_Init+0x29c>)
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004450:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8004452:	4a3b      	ldr	r2, [pc, #236]	; (8004540 <HAL_GPIO_Init+0x29c>)
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	00db      	lsls	r3, r3, #3
 8004458:	4413      	add	r3, r2
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 800445e:	69bb      	ldr	r3, [r7, #24]
 8004460:	08da      	lsrs	r2, r3, #3
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	3208      	adds	r2, #8
 8004466:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800446a:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 800446c:	69bb      	ldr	r3, [r7, #24]
 800446e:	f003 0307 	and.w	r3, r3, #7
 8004472:	009b      	lsls	r3, r3, #2
 8004474:	220f      	movs	r2, #15
 8004476:	fa02 f303 	lsl.w	r3, r2, r3
 800447a:	43db      	mvns	r3, r3
 800447c:	69fa      	ldr	r2, [r7, #28]
 800447e:	4013      	ands	r3, r2
 8004480:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8004482:	69bb      	ldr	r3, [r7, #24]
 8004484:	f003 0307 	and.w	r3, r3, #7
 8004488:	009b      	lsls	r3, r3, #2
 800448a:	220b      	movs	r2, #11
 800448c:	fa02 f303 	lsl.w	r3, r2, r3
 8004490:	69fa      	ldr	r2, [r7, #28]
 8004492:	4313      	orrs	r3, r2
 8004494:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8004496:	69bb      	ldr	r3, [r7, #24]
 8004498:	08da      	lsrs	r2, r3, #3
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	3208      	adds	r2, #8
 800449e:	69f9      	ldr	r1, [r7, #28]
 80044a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 80044aa:	69bb      	ldr	r3, [r7, #24]
 80044ac:	005b      	lsls	r3, r3, #1
 80044ae:	2203      	movs	r2, #3
 80044b0:	fa02 f303 	lsl.w	r3, r2, r3
 80044b4:	43db      	mvns	r3, r3
 80044b6:	69fa      	ldr	r2, [r7, #28]
 80044b8:	4013      	ands	r3, r2
 80044ba:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 80044bc:	69bb      	ldr	r3, [r7, #24]
 80044be:	005b      	lsls	r3, r3, #1
 80044c0:	2202      	movs	r2, #2
 80044c2:	fa02 f303 	lsl.w	r3, r2, r3
 80044c6:	69fa      	ldr	r2, [r7, #28]
 80044c8:	4313      	orrs	r3, r2
 80044ca:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	69fa      	ldr	r2, [r7, #28]
 80044d0:	601a      	str	r2, [r3, #0]
 80044d2:	e1ca      	b.n	800486a <HAL_GPIO_Init+0x5c6>
 80044d4:	42020000 	.word	0x42020000
 80044d8:	52020000 	.word	0x52020000
 80044dc:	42020400 	.word	0x42020400
 80044e0:	52020400 	.word	0x52020400
 80044e4:	42020800 	.word	0x42020800
 80044e8:	52020800 	.word	0x52020800
 80044ec:	42020c00 	.word	0x42020c00
 80044f0:	52020c00 	.word	0x52020c00
 80044f4:	42021000 	.word	0x42021000
 80044f8:	52021000 	.word	0x52021000
 80044fc:	42021400 	.word	0x42021400
 8004500:	52021400 	.word	0x52021400
 8004504:	42021800 	.word	0x42021800
 8004508:	52021800 	.word	0x52021800
 800450c:	42021c00 	.word	0x42021c00
 8004510:	52021c00 	.word	0x52021c00
 8004514:	42022000 	.word	0x42022000
 8004518:	52022000 	.word	0x52022000
 800451c:	46020000 	.word	0x46020000
 8004520:	56020000 	.word	0x56020000
 8004524:	08025b14 	.word	0x08025b14
 8004528:	10110000 	.word	0x10110000
 800452c:	10210000 	.word	0x10210000
 8004530:	10310000 	.word	0x10310000
 8004534:	10120000 	.word	0x10120000
 8004538:	10220000 	.word	0x10220000
 800453c:	10320000 	.word	0x10320000
 8004540:	08027c48 	.word	0x08027c48
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	2b02      	cmp	r3, #2
 800454a:	d004      	beq.n	8004556 <HAL_GPIO_Init+0x2b2>
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	2b12      	cmp	r3, #18
 8004552:	f040 811b 	bne.w	800478c <HAL_GPIO_Init+0x4e8>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	4a77      	ldr	r2, [pc, #476]	; (8004738 <HAL_GPIO_Init+0x494>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d04f      	beq.n	80045fe <HAL_GPIO_Init+0x35a>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	4a76      	ldr	r2, [pc, #472]	; (800473c <HAL_GPIO_Init+0x498>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d04b      	beq.n	80045fe <HAL_GPIO_Init+0x35a>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	4a75      	ldr	r2, [pc, #468]	; (8004740 <HAL_GPIO_Init+0x49c>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d047      	beq.n	80045fe <HAL_GPIO_Init+0x35a>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	4a74      	ldr	r2, [pc, #464]	; (8004744 <HAL_GPIO_Init+0x4a0>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d043      	beq.n	80045fe <HAL_GPIO_Init+0x35a>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	4a73      	ldr	r2, [pc, #460]	; (8004748 <HAL_GPIO_Init+0x4a4>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d03f      	beq.n	80045fe <HAL_GPIO_Init+0x35a>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	4a72      	ldr	r2, [pc, #456]	; (800474c <HAL_GPIO_Init+0x4a8>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d03b      	beq.n	80045fe <HAL_GPIO_Init+0x35a>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	4a71      	ldr	r2, [pc, #452]	; (8004750 <HAL_GPIO_Init+0x4ac>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d037      	beq.n	80045fe <HAL_GPIO_Init+0x35a>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	4a70      	ldr	r2, [pc, #448]	; (8004754 <HAL_GPIO_Init+0x4b0>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d033      	beq.n	80045fe <HAL_GPIO_Init+0x35a>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	4a6f      	ldr	r2, [pc, #444]	; (8004758 <HAL_GPIO_Init+0x4b4>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d02f      	beq.n	80045fe <HAL_GPIO_Init+0x35a>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	4a6e      	ldr	r2, [pc, #440]	; (800475c <HAL_GPIO_Init+0x4b8>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d02b      	beq.n	80045fe <HAL_GPIO_Init+0x35a>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	4a6d      	ldr	r2, [pc, #436]	; (8004760 <HAL_GPIO_Init+0x4bc>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d027      	beq.n	80045fe <HAL_GPIO_Init+0x35a>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	4a6c      	ldr	r2, [pc, #432]	; (8004764 <HAL_GPIO_Init+0x4c0>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d023      	beq.n	80045fe <HAL_GPIO_Init+0x35a>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	4a6b      	ldr	r2, [pc, #428]	; (8004768 <HAL_GPIO_Init+0x4c4>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d01f      	beq.n	80045fe <HAL_GPIO_Init+0x35a>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	4a6a      	ldr	r2, [pc, #424]	; (800476c <HAL_GPIO_Init+0x4c8>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d01b      	beq.n	80045fe <HAL_GPIO_Init+0x35a>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	4a69      	ldr	r2, [pc, #420]	; (8004770 <HAL_GPIO_Init+0x4cc>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d017      	beq.n	80045fe <HAL_GPIO_Init+0x35a>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	4a68      	ldr	r2, [pc, #416]	; (8004774 <HAL_GPIO_Init+0x4d0>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d013      	beq.n	80045fe <HAL_GPIO_Init+0x35a>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	4a67      	ldr	r2, [pc, #412]	; (8004778 <HAL_GPIO_Init+0x4d4>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d00f      	beq.n	80045fe <HAL_GPIO_Init+0x35a>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	4a66      	ldr	r2, [pc, #408]	; (800477c <HAL_GPIO_Init+0x4d8>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d00b      	beq.n	80045fe <HAL_GPIO_Init+0x35a>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	4a65      	ldr	r2, [pc, #404]	; (8004780 <HAL_GPIO_Init+0x4dc>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d007      	beq.n	80045fe <HAL_GPIO_Init+0x35a>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	4a64      	ldr	r2, [pc, #400]	; (8004784 <HAL_GPIO_Init+0x4e0>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d003      	beq.n	80045fe <HAL_GPIO_Init+0x35a>
 80045f6:	21fd      	movs	r1, #253	; 0xfd
 80045f8:	4863      	ldr	r0, [pc, #396]	; (8004788 <HAL_GPIO_Init+0x4e4>)
 80045fa:	f010 fe56 	bl	80152aa <assert_failed>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	4a4d      	ldr	r2, [pc, #308]	; (8004738 <HAL_GPIO_Init+0x494>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d04f      	beq.n	80046a6 <HAL_GPIO_Init+0x402>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	4a4c      	ldr	r2, [pc, #304]	; (800473c <HAL_GPIO_Init+0x498>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d04b      	beq.n	80046a6 <HAL_GPIO_Init+0x402>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	4a4b      	ldr	r2, [pc, #300]	; (8004740 <HAL_GPIO_Init+0x49c>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d047      	beq.n	80046a6 <HAL_GPIO_Init+0x402>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	4a4a      	ldr	r2, [pc, #296]	; (8004744 <HAL_GPIO_Init+0x4a0>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d043      	beq.n	80046a6 <HAL_GPIO_Init+0x402>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	4a49      	ldr	r2, [pc, #292]	; (8004748 <HAL_GPIO_Init+0x4a4>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d03f      	beq.n	80046a6 <HAL_GPIO_Init+0x402>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	4a48      	ldr	r2, [pc, #288]	; (800474c <HAL_GPIO_Init+0x4a8>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d03b      	beq.n	80046a6 <HAL_GPIO_Init+0x402>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	4a47      	ldr	r2, [pc, #284]	; (8004750 <HAL_GPIO_Init+0x4ac>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d037      	beq.n	80046a6 <HAL_GPIO_Init+0x402>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	4a46      	ldr	r2, [pc, #280]	; (8004754 <HAL_GPIO_Init+0x4b0>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d033      	beq.n	80046a6 <HAL_GPIO_Init+0x402>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	4a45      	ldr	r2, [pc, #276]	; (8004758 <HAL_GPIO_Init+0x4b4>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d02f      	beq.n	80046a6 <HAL_GPIO_Init+0x402>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	4a44      	ldr	r2, [pc, #272]	; (800475c <HAL_GPIO_Init+0x4b8>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d02b      	beq.n	80046a6 <HAL_GPIO_Init+0x402>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	4a43      	ldr	r2, [pc, #268]	; (8004760 <HAL_GPIO_Init+0x4bc>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d027      	beq.n	80046a6 <HAL_GPIO_Init+0x402>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	4a42      	ldr	r2, [pc, #264]	; (8004764 <HAL_GPIO_Init+0x4c0>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d023      	beq.n	80046a6 <HAL_GPIO_Init+0x402>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	4a41      	ldr	r2, [pc, #260]	; (8004768 <HAL_GPIO_Init+0x4c4>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d01f      	beq.n	80046a6 <HAL_GPIO_Init+0x402>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	4a40      	ldr	r2, [pc, #256]	; (800476c <HAL_GPIO_Init+0x4c8>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d01b      	beq.n	80046a6 <HAL_GPIO_Init+0x402>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	4a3f      	ldr	r2, [pc, #252]	; (8004770 <HAL_GPIO_Init+0x4cc>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d017      	beq.n	80046a6 <HAL_GPIO_Init+0x402>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	4a3e      	ldr	r2, [pc, #248]	; (8004774 <HAL_GPIO_Init+0x4d0>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d013      	beq.n	80046a6 <HAL_GPIO_Init+0x402>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	4a3d      	ldr	r2, [pc, #244]	; (8004778 <HAL_GPIO_Init+0x4d4>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d00f      	beq.n	80046a6 <HAL_GPIO_Init+0x402>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	4a3c      	ldr	r2, [pc, #240]	; (800477c <HAL_GPIO_Init+0x4d8>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d00b      	beq.n	80046a6 <HAL_GPIO_Init+0x402>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	4a3b      	ldr	r2, [pc, #236]	; (8004780 <HAL_GPIO_Init+0x4dc>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d007      	beq.n	80046a6 <HAL_GPIO_Init+0x402>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	4a3a      	ldr	r2, [pc, #232]	; (8004784 <HAL_GPIO_Init+0x4e0>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d003      	beq.n	80046a6 <HAL_GPIO_Init+0x402>
 800469e:	21fe      	movs	r1, #254	; 0xfe
 80046a0:	4839      	ldr	r0, [pc, #228]	; (8004788 <HAL_GPIO_Init+0x4e4>)
 80046a2:	f010 fe02 	bl	80152aa <assert_failed>
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	691b      	ldr	r3, [r3, #16]
 80046aa:	2b0f      	cmp	r3, #15
 80046ac:	d903      	bls.n	80046b6 <HAL_GPIO_Init+0x412>
 80046ae:	21ff      	movs	r1, #255	; 0xff
 80046b0:	4835      	ldr	r0, [pc, #212]	; (8004788 <HAL_GPIO_Init+0x4e4>)
 80046b2:	f010 fdfa 	bl	80152aa <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	08da      	lsrs	r2, r3, #3
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	3208      	adds	r2, #8
 80046be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046c2:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	f003 0307 	and.w	r3, r3, #7
 80046ca:	009b      	lsls	r3, r3, #2
 80046cc:	220f      	movs	r2, #15
 80046ce:	fa02 f303 	lsl.w	r3, r2, r3
 80046d2:	43db      	mvns	r3, r3
 80046d4:	69fa      	ldr	r2, [r7, #28]
 80046d6:	4013      	ands	r3, r2
 80046d8:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	691b      	ldr	r3, [r3, #16]
 80046de:	f003 020f 	and.w	r2, r3, #15
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	f003 0307 	and.w	r3, r3, #7
 80046e8:	009b      	lsls	r3, r3, #2
 80046ea:	fa02 f303 	lsl.w	r3, r2, r3
 80046ee:	69fa      	ldr	r2, [r7, #28]
 80046f0:	4313      	orrs	r3, r2
 80046f2:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 80046f4:	697b      	ldr	r3, [r7, #20]
 80046f6:	08da      	lsrs	r2, r3, #3
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	3208      	adds	r2, #8
 80046fc:	69f9      	ldr	r1, [r7, #28]
 80046fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8004708:	69bb      	ldr	r3, [r7, #24]
 800470a:	005b      	lsls	r3, r3, #1
 800470c:	2203      	movs	r2, #3
 800470e:	fa02 f303 	lsl.w	r3, r2, r3
 8004712:	43db      	mvns	r3, r3
 8004714:	69fa      	ldr	r2, [r7, #28]
 8004716:	4013      	ands	r3, r2
 8004718:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	f003 0203 	and.w	r2, r3, #3
 8004722:	69bb      	ldr	r3, [r7, #24]
 8004724:	005b      	lsls	r3, r3, #1
 8004726:	fa02 f303 	lsl.w	r3, r2, r3
 800472a:	69fa      	ldr	r2, [r7, #28]
 800472c:	4313      	orrs	r3, r2
 800472e:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	69fa      	ldr	r2, [r7, #28]
 8004734:	601a      	str	r2, [r3, #0]
 8004736:	e098      	b.n	800486a <HAL_GPIO_Init+0x5c6>
 8004738:	42020000 	.word	0x42020000
 800473c:	52020000 	.word	0x52020000
 8004740:	42020400 	.word	0x42020400
 8004744:	52020400 	.word	0x52020400
 8004748:	42020800 	.word	0x42020800
 800474c:	52020800 	.word	0x52020800
 8004750:	42020c00 	.word	0x42020c00
 8004754:	52020c00 	.word	0x52020c00
 8004758:	42021000 	.word	0x42021000
 800475c:	52021000 	.word	0x52021000
 8004760:	42021400 	.word	0x42021400
 8004764:	52021400 	.word	0x52021400
 8004768:	42021800 	.word	0x42021800
 800476c:	52021800 	.word	0x52021800
 8004770:	42021c00 	.word	0x42021c00
 8004774:	52021c00 	.word	0x52021c00
 8004778:	42022000 	.word	0x42022000
 800477c:	52022000 	.word	0x52022000
 8004780:	46020000 	.word	0x46020000
 8004784:	56020000 	.word	0x56020000
 8004788:	08025b14 	.word	0x08025b14
      }
      else
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	4a95      	ldr	r2, [pc, #596]	; (80049e4 <HAL_GPIO_Init+0x740>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d050      	beq.n	8004836 <HAL_GPIO_Init+0x592>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	4a94      	ldr	r2, [pc, #592]	; (80049e8 <HAL_GPIO_Init+0x744>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d04c      	beq.n	8004836 <HAL_GPIO_Init+0x592>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	4a93      	ldr	r2, [pc, #588]	; (80049ec <HAL_GPIO_Init+0x748>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d048      	beq.n	8004836 <HAL_GPIO_Init+0x592>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	4a92      	ldr	r2, [pc, #584]	; (80049f0 <HAL_GPIO_Init+0x74c>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d044      	beq.n	8004836 <HAL_GPIO_Init+0x592>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	4a91      	ldr	r2, [pc, #580]	; (80049f4 <HAL_GPIO_Init+0x750>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d040      	beq.n	8004836 <HAL_GPIO_Init+0x592>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	4a90      	ldr	r2, [pc, #576]	; (80049f8 <HAL_GPIO_Init+0x754>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d03c      	beq.n	8004836 <HAL_GPIO_Init+0x592>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	4a8f      	ldr	r2, [pc, #572]	; (80049fc <HAL_GPIO_Init+0x758>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d038      	beq.n	8004836 <HAL_GPIO_Init+0x592>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	4a8e      	ldr	r2, [pc, #568]	; (8004a00 <HAL_GPIO_Init+0x75c>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d034      	beq.n	8004836 <HAL_GPIO_Init+0x592>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	4a8d      	ldr	r2, [pc, #564]	; (8004a04 <HAL_GPIO_Init+0x760>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d030      	beq.n	8004836 <HAL_GPIO_Init+0x592>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	4a8c      	ldr	r2, [pc, #560]	; (8004a08 <HAL_GPIO_Init+0x764>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d02c      	beq.n	8004836 <HAL_GPIO_Init+0x592>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	4a8b      	ldr	r2, [pc, #556]	; (8004a0c <HAL_GPIO_Init+0x768>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d028      	beq.n	8004836 <HAL_GPIO_Init+0x592>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	4a8a      	ldr	r2, [pc, #552]	; (8004a10 <HAL_GPIO_Init+0x76c>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d024      	beq.n	8004836 <HAL_GPIO_Init+0x592>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	4a89      	ldr	r2, [pc, #548]	; (8004a14 <HAL_GPIO_Init+0x770>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d020      	beq.n	8004836 <HAL_GPIO_Init+0x592>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	4a88      	ldr	r2, [pc, #544]	; (8004a18 <HAL_GPIO_Init+0x774>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d01c      	beq.n	8004836 <HAL_GPIO_Init+0x592>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	4a87      	ldr	r2, [pc, #540]	; (8004a1c <HAL_GPIO_Init+0x778>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d018      	beq.n	8004836 <HAL_GPIO_Init+0x592>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	4a86      	ldr	r2, [pc, #536]	; (8004a20 <HAL_GPIO_Init+0x77c>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d014      	beq.n	8004836 <HAL_GPIO_Init+0x592>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	4a85      	ldr	r2, [pc, #532]	; (8004a24 <HAL_GPIO_Init+0x780>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d010      	beq.n	8004836 <HAL_GPIO_Init+0x592>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	4a84      	ldr	r2, [pc, #528]	; (8004a28 <HAL_GPIO_Init+0x784>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d00c      	beq.n	8004836 <HAL_GPIO_Init+0x592>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	4a83      	ldr	r2, [pc, #524]	; (8004a2c <HAL_GPIO_Init+0x788>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d008      	beq.n	8004836 <HAL_GPIO_Init+0x592>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	4a82      	ldr	r2, [pc, #520]	; (8004a30 <HAL_GPIO_Init+0x78c>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d004      	beq.n	8004836 <HAL_GPIO_Init+0x592>
 800482c:	f44f 7188 	mov.w	r1, #272	; 0x110
 8004830:	4880      	ldr	r0, [pc, #512]	; (8004a34 <HAL_GPIO_Init+0x790>)
 8004832:	f010 fd3a 	bl	80152aa <assert_failed>

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 800483c:	69bb      	ldr	r3, [r7, #24]
 800483e:	005b      	lsls	r3, r3, #1
 8004840:	2203      	movs	r2, #3
 8004842:	fa02 f303 	lsl.w	r3, r2, r3
 8004846:	43db      	mvns	r3, r3
 8004848:	69fa      	ldr	r2, [r7, #28]
 800484a:	4013      	ands	r3, r2
 800484c:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	f003 0203 	and.w	r2, r3, #3
 8004856:	69bb      	ldr	r3, [r7, #24]
 8004858:	005b      	lsls	r3, r3, #1
 800485a:	fa02 f303 	lsl.w	r3, r2, r3
 800485e:	69fa      	ldr	r2, [r7, #28]
 8004860:	4313      	orrs	r3, r2
 8004862:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	69fa      	ldr	r2, [r7, #28]
 8004868:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	2b01      	cmp	r3, #1
 8004870:	d00b      	beq.n	800488a <HAL_GPIO_Init+0x5e6>
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	2b02      	cmp	r3, #2
 8004878:	d007      	beq.n	800488a <HAL_GPIO_Init+0x5e6>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800487e:	2b11      	cmp	r3, #17
 8004880:	d003      	beq.n	800488a <HAL_GPIO_Init+0x5e6>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	2b12      	cmp	r3, #18
 8004888:	d145      	bne.n	8004916 <HAL_GPIO_Init+0x672>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	68db      	ldr	r3, [r3, #12]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d010      	beq.n	80048b4 <HAL_GPIO_Init+0x610>
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	68db      	ldr	r3, [r3, #12]
 8004896:	2b01      	cmp	r3, #1
 8004898:	d00c      	beq.n	80048b4 <HAL_GPIO_Init+0x610>
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	68db      	ldr	r3, [r3, #12]
 800489e:	2b02      	cmp	r3, #2
 80048a0:	d008      	beq.n	80048b4 <HAL_GPIO_Init+0x610>
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	68db      	ldr	r3, [r3, #12]
 80048a6:	2b03      	cmp	r3, #3
 80048a8:	d004      	beq.n	80048b4 <HAL_GPIO_Init+0x610>
 80048aa:	f44f 718f 	mov.w	r1, #286	; 0x11e
 80048ae:	4861      	ldr	r0, [pc, #388]	; (8004a34 <HAL_GPIO_Init+0x790>)
 80048b0:	f010 fcfb 	bl	80152aa <assert_failed>

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 80048b4:	693b      	ldr	r3, [r7, #16]
 80048b6:	689b      	ldr	r3, [r3, #8]
 80048b8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 80048ba:	69bb      	ldr	r3, [r7, #24]
 80048bc:	005b      	lsls	r3, r3, #1
 80048be:	2203      	movs	r2, #3
 80048c0:	fa02 f303 	lsl.w	r3, r2, r3
 80048c4:	43db      	mvns	r3, r3
 80048c6:	69fa      	ldr	r2, [r7, #28]
 80048c8:	4013      	ands	r3, r2
 80048ca:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	68da      	ldr	r2, [r3, #12]
 80048d0:	69bb      	ldr	r3, [r7, #24]
 80048d2:	005b      	lsls	r3, r3, #1
 80048d4:	fa02 f303 	lsl.w	r3, r2, r3
 80048d8:	69fa      	ldr	r2, [r7, #28]
 80048da:	4313      	orrs	r3, r2
 80048dc:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	69fa      	ldr	r2, [r7, #28]
 80048e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 80048ea:	2201      	movs	r2, #1
 80048ec:	69bb      	ldr	r3, [r7, #24]
 80048ee:	fa02 f303 	lsl.w	r3, r2, r3
 80048f2:	43db      	mvns	r3, r3
 80048f4:	69fa      	ldr	r2, [r7, #28]
 80048f6:	4013      	ands	r3, r2
 80048f8:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	091b      	lsrs	r3, r3, #4
 8004900:	f003 0201 	and.w	r2, r3, #1
 8004904:	69bb      	ldr	r3, [r7, #24]
 8004906:	fa02 f303 	lsl.w	r3, r2, r3
 800490a:	69fa      	ldr	r2, [r7, #28]
 800490c:	4313      	orrs	r3, r2
 800490e:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8004910:	693b      	ldr	r3, [r7, #16]
 8004912:	69fa      	ldr	r2, [r7, #28]
 8004914:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	2b03      	cmp	r3, #3
 800491c:	d028      	beq.n	8004970 <HAL_GPIO_Init+0x6cc>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d00c      	beq.n	8004940 <HAL_GPIO_Init+0x69c>
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	2b01      	cmp	r3, #1
 800492c:	d008      	beq.n	8004940 <HAL_GPIO_Init+0x69c>
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	2b02      	cmp	r3, #2
 8004934:	d004      	beq.n	8004940 <HAL_GPIO_Init+0x69c>
 8004936:	f44f 7198 	mov.w	r1, #304	; 0x130
 800493a:	483e      	ldr	r0, [pc, #248]	; (8004a34 <HAL_GPIO_Init+0x790>)
 800493c:	f010 fcb5 	bl	80152aa <assert_failed>

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	68db      	ldr	r3, [r3, #12]
 8004944:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 8004946:	69bb      	ldr	r3, [r7, #24]
 8004948:	005b      	lsls	r3, r3, #1
 800494a:	2203      	movs	r2, #3
 800494c:	fa02 f303 	lsl.w	r3, r2, r3
 8004950:	43db      	mvns	r3, r3
 8004952:	69fa      	ldr	r2, [r7, #28]
 8004954:	4013      	ands	r3, r2
 8004956:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	689a      	ldr	r2, [r3, #8]
 800495c:	69bb      	ldr	r3, [r7, #24]
 800495e:	005b      	lsls	r3, r3, #1
 8004960:	fa02 f303 	lsl.w	r3, r2, r3
 8004964:	69fa      	ldr	r2, [r7, #28]
 8004966:	4313      	orrs	r3, r2
 8004968:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	69fa      	ldr	r2, [r7, #28]
 800496e:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004978:	2b00      	cmp	r3, #0
 800497a:	f000 80ad 	beq.w	8004ad8 <HAL_GPIO_Init+0x834>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 800497e:	4a2e      	ldr	r2, [pc, #184]	; (8004a38 <HAL_GPIO_Init+0x794>)
 8004980:	697b      	ldr	r3, [r7, #20]
 8004982:	089b      	lsrs	r3, r3, #2
 8004984:	3318      	adds	r3, #24
 8004986:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800498a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	f003 0303 	and.w	r3, r3, #3
 8004992:	00db      	lsls	r3, r3, #3
 8004994:	220f      	movs	r2, #15
 8004996:	fa02 f303 	lsl.w	r3, r2, r3
 800499a:	43db      	mvns	r3, r3
 800499c:	69fa      	ldr	r2, [r7, #28]
 800499e:	4013      	ands	r3, r2
 80049a0:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	0a9a      	lsrs	r2, r3, #10
 80049a6:	4b25      	ldr	r3, [pc, #148]	; (8004a3c <HAL_GPIO_Init+0x798>)
 80049a8:	4013      	ands	r3, r2
 80049aa:	697a      	ldr	r2, [r7, #20]
 80049ac:	f002 0203 	and.w	r2, r2, #3
 80049b0:	00d2      	lsls	r2, r2, #3
 80049b2:	4093      	lsls	r3, r2
 80049b4:	69fa      	ldr	r2, [r7, #28]
 80049b6:	4313      	orrs	r3, r2
 80049b8:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 80049ba:	491f      	ldr	r1, [pc, #124]	; (8004a38 <HAL_GPIO_Init+0x794>)
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	089b      	lsrs	r3, r3, #2
 80049c0:	3318      	adds	r3, #24
 80049c2:	69fa      	ldr	r2, [r7, #28]
 80049c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80049c8:	4b1b      	ldr	r3, [pc, #108]	; (8004a38 <HAL_GPIO_Init+0x794>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	43db      	mvns	r3, r3
 80049d2:	69fa      	ldr	r2, [r7, #28]
 80049d4:	4013      	ands	r3, r2
 80049d6:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80049e0:	e02e      	b.n	8004a40 <HAL_GPIO_Init+0x79c>
 80049e2:	bf00      	nop
 80049e4:	42020000 	.word	0x42020000
 80049e8:	52020000 	.word	0x52020000
 80049ec:	42020400 	.word	0x42020400
 80049f0:	52020400 	.word	0x52020400
 80049f4:	42020800 	.word	0x42020800
 80049f8:	52020800 	.word	0x52020800
 80049fc:	42020c00 	.word	0x42020c00
 8004a00:	52020c00 	.word	0x52020c00
 8004a04:	42021000 	.word	0x42021000
 8004a08:	52021000 	.word	0x52021000
 8004a0c:	42021400 	.word	0x42021400
 8004a10:	52021400 	.word	0x52021400
 8004a14:	42021800 	.word	0x42021800
 8004a18:	52021800 	.word	0x52021800
 8004a1c:	42021c00 	.word	0x42021c00
 8004a20:	52021c00 	.word	0x52021c00
 8004a24:	42022000 	.word	0x42022000
 8004a28:	52022000 	.word	0x52022000
 8004a2c:	46020000 	.word	0x46020000
 8004a30:	56020000 	.word	0x56020000
 8004a34:	08025b14 	.word	0x08025b14
 8004a38:	46022000 	.word	0x46022000
 8004a3c:	002f7f7f 	.word	0x002f7f7f
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d003      	beq.n	8004a4c <HAL_GPIO_Init+0x7a8>
        {
          tmp |= iocurrent;
 8004a44:	69fa      	ldr	r2, [r7, #28]
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8004a4c:	4a2a      	ldr	r2, [pc, #168]	; (8004af8 <HAL_GPIO_Init+0x854>)
 8004a4e:	69fb      	ldr	r3, [r7, #28]
 8004a50:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8004a52:	4b29      	ldr	r3, [pc, #164]	; (8004af8 <HAL_GPIO_Init+0x854>)
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	43db      	mvns	r3, r3
 8004a5c:	69fa      	ldr	r2, [r7, #28]
 8004a5e:	4013      	ands	r3, r2
 8004a60:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d003      	beq.n	8004a76 <HAL_GPIO_Init+0x7d2>
        {
          tmp |= iocurrent;
 8004a6e:	69fa      	ldr	r2, [r7, #28]
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	4313      	orrs	r3, r2
 8004a74:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8004a76:	4a20      	ldr	r2, [pc, #128]	; (8004af8 <HAL_GPIO_Init+0x854>)
 8004a78:	69fb      	ldr	r3, [r7, #28]
 8004a7a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8004a7c:	4b1e      	ldr	r3, [pc, #120]	; (8004af8 <HAL_GPIO_Init+0x854>)
 8004a7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a82:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	43db      	mvns	r3, r3
 8004a88:	69fa      	ldr	r2, [r7, #28]
 8004a8a:	4013      	ands	r3, r2
 8004a8c:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d003      	beq.n	8004aa2 <HAL_GPIO_Init+0x7fe>
        {
          tmp |= iocurrent;
 8004a9a:	69fa      	ldr	r2, [r7, #28]
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8004aa2:	4a15      	ldr	r2, [pc, #84]	; (8004af8 <HAL_GPIO_Init+0x854>)
 8004aa4:	69fb      	ldr	r3, [r7, #28]
 8004aa6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 8004aaa:	4b13      	ldr	r3, [pc, #76]	; (8004af8 <HAL_GPIO_Init+0x854>)
 8004aac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ab0:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	43db      	mvns	r3, r3
 8004ab6:	69fa      	ldr	r2, [r7, #28]
 8004ab8:	4013      	ands	r3, r2
 8004aba:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d003      	beq.n	8004ad0 <HAL_GPIO_Init+0x82c>
        {
          tmp |= iocurrent;
 8004ac8:	69fa      	ldr	r2, [r7, #28]
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	4313      	orrs	r3, r2
 8004ace:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8004ad0:	4a09      	ldr	r2, [pc, #36]	; (8004af8 <HAL_GPIO_Init+0x854>)
 8004ad2:	69fb      	ldr	r3, [r7, #28]
 8004ad4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }
    position++;
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	3301      	adds	r3, #1
 8004adc:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	681a      	ldr	r2, [r3, #0]
 8004ae2:	697b      	ldr	r3, [r7, #20]
 8004ae4:	fa22 f303 	lsr.w	r3, r2, r3
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	f47f ac82 	bne.w	80043f2 <HAL_GPIO_Init+0x14e>
  }
}
 8004aee:	bf00      	nop
 8004af0:	bf00      	nop
 8004af2:	3720      	adds	r7, #32
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bd80      	pop	{r7, pc}
 8004af8:	46022000 	.word	0x46022000

08004afc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b082      	sub	sp, #8
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
 8004b04:	460b      	mov	r3, r1
 8004b06:	807b      	strh	r3, [r7, #2]
 8004b08:	4613      	mov	r3, r2
 8004b0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8004b0c:	887b      	ldrh	r3, [r7, #2]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d004      	beq.n	8004b1c <HAL_GPIO_WritePin+0x20>
 8004b12:	887b      	ldrh	r3, [r7, #2]
 8004b14:	0c1b      	lsrs	r3, r3, #16
 8004b16:	041b      	lsls	r3, r3, #16
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d004      	beq.n	8004b26 <HAL_GPIO_WritePin+0x2a>
 8004b1c:	f44f 71fe 	mov.w	r1, #508	; 0x1fc
 8004b20:	480d      	ldr	r0, [pc, #52]	; (8004b58 <HAL_GPIO_WritePin+0x5c>)
 8004b22:	f010 fbc2 	bl	80152aa <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8004b26:	787b      	ldrb	r3, [r7, #1]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d007      	beq.n	8004b3c <HAL_GPIO_WritePin+0x40>
 8004b2c:	787b      	ldrb	r3, [r7, #1]
 8004b2e:	2b01      	cmp	r3, #1
 8004b30:	d004      	beq.n	8004b3c <HAL_GPIO_WritePin+0x40>
 8004b32:	f240 11fd 	movw	r1, #509	; 0x1fd
 8004b36:	4808      	ldr	r0, [pc, #32]	; (8004b58 <HAL_GPIO_WritePin+0x5c>)
 8004b38:	f010 fbb7 	bl	80152aa <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 8004b3c:	787b      	ldrb	r3, [r7, #1]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d003      	beq.n	8004b4a <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004b42:	887a      	ldrh	r2, [r7, #2]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8004b48:	e002      	b.n	8004b50 <HAL_GPIO_WritePin+0x54>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8004b4a:	887a      	ldrh	r2, [r7, #2]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004b50:	bf00      	nop
 8004b52:	3708      	adds	r7, #8
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd80      	pop	{r7, pc}
 8004b58:	08025b14 	.word	0x08025b14

08004b5c <HAL_PWR_DisableWakeUpPin>:
  *                     @arg @ref PWR_WAKEUP_PIN7
  *                     @arg @ref PWR_WAKEUP_PIN8
  * @retval None
  */
void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPin)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b082      	sub	sp, #8
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPin));
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2b01      	cmp	r3, #1
 8004b68:	f000 810f 	beq.w	8004d8a <HAL_PWR_DisableWakeUpPin+0x22e>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 8004b72:	f000 810a 	beq.w	8004d8a <HAL_PWR_DisableWakeUpPin+0x22e>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	4a8a      	ldr	r2, [pc, #552]	; (8004da4 <HAL_PWR_DisableWakeUpPin+0x248>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	f000 8105 	beq.w	8004d8a <HAL_PWR_DisableWakeUpPin+0x22e>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2b02      	cmp	r3, #2
 8004b84:	f000 8101 	beq.w	8004d8a <HAL_PWR_DisableWakeUpPin+0x22e>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	4a87      	ldr	r2, [pc, #540]	; (8004da8 <HAL_PWR_DisableWakeUpPin+0x24c>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	f000 80fc 	beq.w	8004d8a <HAL_PWR_DisableWakeUpPin+0x22e>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	4a85      	ldr	r2, [pc, #532]	; (8004dac <HAL_PWR_DisableWakeUpPin+0x250>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	f000 80f7 	beq.w	8004d8a <HAL_PWR_DisableWakeUpPin+0x22e>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2b04      	cmp	r3, #4
 8004ba0:	f000 80f3 	beq.w	8004d8a <HAL_PWR_DisableWakeUpPin+0x22e>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	4a82      	ldr	r2, [pc, #520]	; (8004db0 <HAL_PWR_DisableWakeUpPin+0x254>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	f000 80ee 	beq.w	8004d8a <HAL_PWR_DisableWakeUpPin+0x22e>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	4a80      	ldr	r2, [pc, #512]	; (8004db4 <HAL_PWR_DisableWakeUpPin+0x258>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	f000 80e9 	beq.w	8004d8a <HAL_PWR_DisableWakeUpPin+0x22e>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2b08      	cmp	r3, #8
 8004bbc:	f000 80e5 	beq.w	8004d8a <HAL_PWR_DisableWakeUpPin+0x22e>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	4a7d      	ldr	r2, [pc, #500]	; (8004db8 <HAL_PWR_DisableWakeUpPin+0x25c>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	f000 80e0 	beq.w	8004d8a <HAL_PWR_DisableWakeUpPin+0x22e>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	4a7b      	ldr	r2, [pc, #492]	; (8004dbc <HAL_PWR_DisableWakeUpPin+0x260>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	f000 80db 	beq.w	8004d8a <HAL_PWR_DisableWakeUpPin+0x22e>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2b10      	cmp	r3, #16
 8004bd8:	f000 80d7 	beq.w	8004d8a <HAL_PWR_DisableWakeUpPin+0x22e>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	4a78      	ldr	r2, [pc, #480]	; (8004dc0 <HAL_PWR_DisableWakeUpPin+0x264>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	f000 80d2 	beq.w	8004d8a <HAL_PWR_DisableWakeUpPin+0x22e>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	4a76      	ldr	r2, [pc, #472]	; (8004dc4 <HAL_PWR_DisableWakeUpPin+0x268>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	f000 80cd 	beq.w	8004d8a <HAL_PWR_DisableWakeUpPin+0x22e>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2b20      	cmp	r3, #32
 8004bf4:	f000 80c9 	beq.w	8004d8a <HAL_PWR_DisableWakeUpPin+0x22e>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	4a73      	ldr	r2, [pc, #460]	; (8004dc8 <HAL_PWR_DisableWakeUpPin+0x26c>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	f000 80c4 	beq.w	8004d8a <HAL_PWR_DisableWakeUpPin+0x22e>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	4a71      	ldr	r2, [pc, #452]	; (8004dcc <HAL_PWR_DisableWakeUpPin+0x270>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	f000 80bf 	beq.w	8004d8a <HAL_PWR_DisableWakeUpPin+0x22e>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	4a70      	ldr	r2, [pc, #448]	; (8004dd0 <HAL_PWR_DisableWakeUpPin+0x274>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	f000 80ba 	beq.w	8004d8a <HAL_PWR_DisableWakeUpPin+0x22e>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2b40      	cmp	r3, #64	; 0x40
 8004c1a:	f000 80b6 	beq.w	8004d8a <HAL_PWR_DisableWakeUpPin+0x22e>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	4a6c      	ldr	r2, [pc, #432]	; (8004dd4 <HAL_PWR_DisableWakeUpPin+0x278>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	f000 80b1 	beq.w	8004d8a <HAL_PWR_DisableWakeUpPin+0x22e>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	4a6b      	ldr	r2, [pc, #428]	; (8004dd8 <HAL_PWR_DisableWakeUpPin+0x27c>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	f000 80ac 	beq.w	8004d8a <HAL_PWR_DisableWakeUpPin+0x22e>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	4a69      	ldr	r2, [pc, #420]	; (8004ddc <HAL_PWR_DisableWakeUpPin+0x280>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	f000 80a7 	beq.w	8004d8a <HAL_PWR_DisableWakeUpPin+0x22e>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2b80      	cmp	r3, #128	; 0x80
 8004c40:	f000 80a3 	beq.w	8004d8a <HAL_PWR_DisableWakeUpPin+0x22e>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	4a66      	ldr	r2, [pc, #408]	; (8004de0 <HAL_PWR_DisableWakeUpPin+0x284>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	f000 809e 	beq.w	8004d8a <HAL_PWR_DisableWakeUpPin+0x22e>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	4a64      	ldr	r2, [pc, #400]	; (8004de4 <HAL_PWR_DisableWakeUpPin+0x288>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	f000 8099 	beq.w	8004d8a <HAL_PWR_DisableWakeUpPin+0x22e>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	4a63      	ldr	r2, [pc, #396]	; (8004de8 <HAL_PWR_DisableWakeUpPin+0x28c>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	f000 8094 	beq.w	8004d8a <HAL_PWR_DisableWakeUpPin+0x22e>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	f240 1201 	movw	r2, #257	; 0x101
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	f000 808e 	beq.w	8004d8a <HAL_PWR_DisableWakeUpPin+0x22e>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	4a5e      	ldr	r2, [pc, #376]	; (8004dec <HAL_PWR_DisableWakeUpPin+0x290>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	f000 8089 	beq.w	8004d8a <HAL_PWR_DisableWakeUpPin+0x22e>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	4a5d      	ldr	r2, [pc, #372]	; (8004df0 <HAL_PWR_DisableWakeUpPin+0x294>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	f000 8084 	beq.w	8004d8a <HAL_PWR_DisableWakeUpPin+0x22e>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	f240 2202 	movw	r2, #514	; 0x202
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d07e      	beq.n	8004d8a <HAL_PWR_DisableWakeUpPin+0x22e>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	4a59      	ldr	r2, [pc, #356]	; (8004df4 <HAL_PWR_DisableWakeUpPin+0x298>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d07a      	beq.n	8004d8a <HAL_PWR_DisableWakeUpPin+0x22e>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	4a58      	ldr	r2, [pc, #352]	; (8004df8 <HAL_PWR_DisableWakeUpPin+0x29c>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d076      	beq.n	8004d8a <HAL_PWR_DisableWakeUpPin+0x22e>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	f240 4204 	movw	r2, #1028	; 0x404
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d071      	beq.n	8004d8a <HAL_PWR_DisableWakeUpPin+0x22e>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	4a54      	ldr	r2, [pc, #336]	; (8004dfc <HAL_PWR_DisableWakeUpPin+0x2a0>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d06d      	beq.n	8004d8a <HAL_PWR_DisableWakeUpPin+0x22e>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	4a53      	ldr	r2, [pc, #332]	; (8004e00 <HAL_PWR_DisableWakeUpPin+0x2a4>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d069      	beq.n	8004d8a <HAL_PWR_DisableWakeUpPin+0x22e>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	f640 0208 	movw	r2, #2056	; 0x808
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d064      	beq.n	8004d8a <HAL_PWR_DisableWakeUpPin+0x22e>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	4a50      	ldr	r2, [pc, #320]	; (8004e04 <HAL_PWR_DisableWakeUpPin+0x2a8>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d060      	beq.n	8004d8a <HAL_PWR_DisableWakeUpPin+0x22e>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	4a4f      	ldr	r2, [pc, #316]	; (8004e08 <HAL_PWR_DisableWakeUpPin+0x2ac>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d05c      	beq.n	8004d8a <HAL_PWR_DisableWakeUpPin+0x22e>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	f241 0210 	movw	r2, #4112	; 0x1010
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d057      	beq.n	8004d8a <HAL_PWR_DisableWakeUpPin+0x22e>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	4a4b      	ldr	r2, [pc, #300]	; (8004e0c <HAL_PWR_DisableWakeUpPin+0x2b0>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d053      	beq.n	8004d8a <HAL_PWR_DisableWakeUpPin+0x22e>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	4a4a      	ldr	r2, [pc, #296]	; (8004e10 <HAL_PWR_DisableWakeUpPin+0x2b4>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d04f      	beq.n	8004d8a <HAL_PWR_DisableWakeUpPin+0x22e>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	f242 0220 	movw	r2, #8224	; 0x2020
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d04a      	beq.n	8004d8a <HAL_PWR_DisableWakeUpPin+0x22e>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	4a47      	ldr	r2, [pc, #284]	; (8004e14 <HAL_PWR_DisableWakeUpPin+0x2b8>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d046      	beq.n	8004d8a <HAL_PWR_DisableWakeUpPin+0x22e>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	4a46      	ldr	r2, [pc, #280]	; (8004e18 <HAL_PWR_DisableWakeUpPin+0x2bc>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d042      	beq.n	8004d8a <HAL_PWR_DisableWakeUpPin+0x22e>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	4a45      	ldr	r2, [pc, #276]	; (8004e1c <HAL_PWR_DisableWakeUpPin+0x2c0>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d03e      	beq.n	8004d8a <HAL_PWR_DisableWakeUpPin+0x22e>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	f244 0240 	movw	r2, #16448	; 0x4040
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d039      	beq.n	8004d8a <HAL_PWR_DisableWakeUpPin+0x22e>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	4a41      	ldr	r2, [pc, #260]	; (8004e20 <HAL_PWR_DisableWakeUpPin+0x2c4>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d035      	beq.n	8004d8a <HAL_PWR_DisableWakeUpPin+0x22e>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	4a40      	ldr	r2, [pc, #256]	; (8004e24 <HAL_PWR_DisableWakeUpPin+0x2c8>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d031      	beq.n	8004d8a <HAL_PWR_DisableWakeUpPin+0x22e>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	4a3f      	ldr	r2, [pc, #252]	; (8004e28 <HAL_PWR_DisableWakeUpPin+0x2cc>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d02d      	beq.n	8004d8a <HAL_PWR_DisableWakeUpPin+0x22e>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	f248 0280 	movw	r2, #32896	; 0x8080
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d028      	beq.n	8004d8a <HAL_PWR_DisableWakeUpPin+0x22e>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	4a3c      	ldr	r2, [pc, #240]	; (8004e2c <HAL_PWR_DisableWakeUpPin+0x2d0>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d024      	beq.n	8004d8a <HAL_PWR_DisableWakeUpPin+0x22e>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	4a3b      	ldr	r2, [pc, #236]	; (8004e30 <HAL_PWR_DisableWakeUpPin+0x2d4>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d020      	beq.n	8004d8a <HAL_PWR_DisableWakeUpPin+0x22e>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	4a3a      	ldr	r2, [pc, #232]	; (8004e34 <HAL_PWR_DisableWakeUpPin+0x2d8>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d01c      	beq.n	8004d8a <HAL_PWR_DisableWakeUpPin+0x22e>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2b01      	cmp	r3, #1
 8004d54:	d019      	beq.n	8004d8a <HAL_PWR_DisableWakeUpPin+0x22e>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2b02      	cmp	r3, #2
 8004d5a:	d016      	beq.n	8004d8a <HAL_PWR_DisableWakeUpPin+0x22e>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2b04      	cmp	r3, #4
 8004d60:	d013      	beq.n	8004d8a <HAL_PWR_DisableWakeUpPin+0x22e>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2b08      	cmp	r3, #8
 8004d66:	d010      	beq.n	8004d8a <HAL_PWR_DisableWakeUpPin+0x22e>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2b10      	cmp	r3, #16
 8004d6c:	d00d      	beq.n	8004d8a <HAL_PWR_DisableWakeUpPin+0x22e>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2b20      	cmp	r3, #32
 8004d72:	d00a      	beq.n	8004d8a <HAL_PWR_DisableWakeUpPin+0x22e>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2b40      	cmp	r3, #64	; 0x40
 8004d78:	d007      	beq.n	8004d8a <HAL_PWR_DisableWakeUpPin+0x22e>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2b80      	cmp	r3, #128	; 0x80
 8004d7e:	d004      	beq.n	8004d8a <HAL_PWR_DisableWakeUpPin+0x22e>
 8004d80:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
 8004d84:	482c      	ldr	r0, [pc, #176]	; (8004e38 <HAL_PWR_DisableWakeUpPin+0x2dc>)
 8004d86:	f010 fa90 	bl	80152aa <assert_failed>

  /* Disable wake-up pin */
  CLEAR_BIT(PWR->WUCR1, (PWR_EWUP_MASK & WakeUpPin));
 8004d8a:	4b2c      	ldr	r3, [pc, #176]	; (8004e3c <HAL_PWR_DisableWakeUpPin+0x2e0>)
 8004d8c:	695a      	ldr	r2, [r3, #20]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	b2db      	uxtb	r3, r3
 8004d92:	43db      	mvns	r3, r3
 8004d94:	4929      	ldr	r1, [pc, #164]	; (8004e3c <HAL_PWR_DisableWakeUpPin+0x2e0>)
 8004d96:	4013      	ands	r3, r2
 8004d98:	614b      	str	r3, [r1, #20]
}
 8004d9a:	bf00      	nop
 8004d9c:	3708      	adds	r7, #8
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}
 8004da2:	bf00      	nop
 8004da4:	00020001 	.word	0x00020001
 8004da8:	00040002 	.word	0x00040002
 8004dac:	00080002 	.word	0x00080002
 8004db0:	00100004 	.word	0x00100004
 8004db4:	00200004 	.word	0x00200004
 8004db8:	00400008 	.word	0x00400008
 8004dbc:	00800008 	.word	0x00800008
 8004dc0:	01000010 	.word	0x01000010
 8004dc4:	02000010 	.word	0x02000010
 8004dc8:	04000020 	.word	0x04000020
 8004dcc:	08000020 	.word	0x08000020
 8004dd0:	0c000020 	.word	0x0c000020
 8004dd4:	10000040 	.word	0x10000040
 8004dd8:	20000040 	.word	0x20000040
 8004ddc:	30000040 	.word	0x30000040
 8004de0:	40000080 	.word	0x40000080
 8004de4:	80000080 	.word	0x80000080
 8004de8:	c0000080 	.word	0xc0000080
 8004dec:	00010101 	.word	0x00010101
 8004df0:	00020101 	.word	0x00020101
 8004df4:	00040202 	.word	0x00040202
 8004df8:	00080202 	.word	0x00080202
 8004dfc:	00100404 	.word	0x00100404
 8004e00:	00200404 	.word	0x00200404
 8004e04:	00400808 	.word	0x00400808
 8004e08:	00800808 	.word	0x00800808
 8004e0c:	01001010 	.word	0x01001010
 8004e10:	02001010 	.word	0x02001010
 8004e14:	04002020 	.word	0x04002020
 8004e18:	08002020 	.word	0x08002020
 8004e1c:	0c002020 	.word	0x0c002020
 8004e20:	10004040 	.word	0x10004040
 8004e24:	20004040 	.word	0x20004040
 8004e28:	30004040 	.word	0x30004040
 8004e2c:	40008080 	.word	0x40008080
 8004e30:	80008080 	.word	0x80008080
 8004e34:	c0008080 	.word	0xc0008080
 8004e38:	08025b80 	.word	0x08025b80
 8004e3c:	46020800 	.word	0x46020800

08004e40 <HAL_PWR_EnterSTOPMode>:
  *                     @arg @ref PWR_STOPENTRY_WFE enter Stop mode with Wait
  *                               For Event request.
  * @retval None.
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t StopEntry)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b082      	sub	sp, #8
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
 8004e48:	460b      	mov	r3, r1
 8004e4a:	70fb      	strb	r3, [r7, #3]
  UNUSED(Regulator);

  /* Check the parameter */
  assert_param(IS_PWR_STOP_ENTRY(StopEntry));
 8004e4c:	78fb      	ldrb	r3, [r7, #3]
 8004e4e:	2b01      	cmp	r3, #1
 8004e50:	d007      	beq.n	8004e62 <HAL_PWR_EnterSTOPMode+0x22>
 8004e52:	78fb      	ldrb	r3, [r7, #3]
 8004e54:	2b02      	cmp	r3, #2
 8004e56:	d004      	beq.n	8004e62 <HAL_PWR_EnterSTOPMode+0x22>
 8004e58:	f240 2152 	movw	r1, #594	; 0x252
 8004e5c:	4810      	ldr	r0, [pc, #64]	; (8004ea0 <HAL_PWR_EnterSTOPMode+0x60>)
 8004e5e:	f010 fa24 	bl	80152aa <assert_failed>

  /* Select Stop 0 mode */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, 0U);
 8004e62:	4b10      	ldr	r3, [pc, #64]	; (8004ea4 <HAL_PWR_EnterSTOPMode+0x64>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4a0f      	ldr	r2, [pc, #60]	; (8004ea4 <HAL_PWR_EnterSTOPMode+0x64>)
 8004e68:	f023 0307 	bic.w	r3, r3, #7
 8004e6c:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004e6e:	4b0e      	ldr	r3, [pc, #56]	; (8004ea8 <HAL_PWR_EnterSTOPMode+0x68>)
 8004e70:	691b      	ldr	r3, [r3, #16]
 8004e72:	4a0d      	ldr	r2, [pc, #52]	; (8004ea8 <HAL_PWR_EnterSTOPMode+0x68>)
 8004e74:	f043 0304 	orr.w	r3, r3, #4
 8004e78:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry */
  if (StopEntry == PWR_STOPENTRY_WFI)
 8004e7a:	78fb      	ldrb	r3, [r7, #3]
 8004e7c:	2b01      	cmp	r3, #1
 8004e7e:	d101      	bne.n	8004e84 <HAL_PWR_EnterSTOPMode+0x44>
  {
    /* Wait For Interrupt Request */
    __WFI();
 8004e80:	bf30      	wfi
 8004e82:	e002      	b.n	8004e8a <HAL_PWR_EnterSTOPMode+0x4a>
  }
  else
  {
    /* Wait For Event Request */
    __SEV();
 8004e84:	bf40      	sev
    __WFE();
 8004e86:	bf20      	wfe
    __WFE();
 8004e88:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004e8a:	4b07      	ldr	r3, [pc, #28]	; (8004ea8 <HAL_PWR_EnterSTOPMode+0x68>)
 8004e8c:	691b      	ldr	r3, [r3, #16]
 8004e8e:	4a06      	ldr	r2, [pc, #24]	; (8004ea8 <HAL_PWR_EnterSTOPMode+0x68>)
 8004e90:	f023 0304 	bic.w	r3, r3, #4
 8004e94:	6113      	str	r3, [r2, #16]
}
 8004e96:	bf00      	nop
 8004e98:	3708      	adds	r7, #8
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bd80      	pop	{r7, pc}
 8004e9e:	bf00      	nop
 8004ea0:	08025b80 	.word	0x08025b80
 8004ea4:	46020800 	.word	0x46020800
 8004ea8:	e000ed00 	.word	0xe000ed00

08004eac <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b084      	sub	sp, #16
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
  uint32_t timeout;
  uint32_t vos_old;

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004eba:	d00f      	beq.n	8004edc <HAL_PWREx_ControlVoltageScaling+0x30>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004ec2:	d00b      	beq.n	8004edc <HAL_PWREx_ControlVoltageScaling+0x30>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004eca:	d007      	beq.n	8004edc <HAL_PWREx_ControlVoltageScaling+0x30>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d004      	beq.n	8004edc <HAL_PWREx_ControlVoltageScaling+0x30>
 8004ed2:	f44f 71a1 	mov.w	r1, #322	; 0x142
 8004ed6:	4835      	ldr	r0, [pc, #212]	; (8004fac <HAL_PWREx_ControlVoltageScaling+0x100>)
 8004ed8:	f010 f9e7 	bl	80152aa <assert_failed>

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8004edc:	4b34      	ldr	r3, [pc, #208]	; (8004fb0 <HAL_PWREx_ControlVoltageScaling+0x104>)
 8004ede:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ee0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004ee4:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8004ee6:	68ba      	ldr	r2, [r7, #8]
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	429a      	cmp	r2, r3
 8004eec:	d101      	bne.n	8004ef2 <HAL_PWREx_ControlVoltageScaling+0x46>
  {
    return HAL_OK;
 8004eee:	2300      	movs	r3, #0
 8004ef0:	e057      	b.n	8004fa2 <HAL_PWREx_ControlVoltageScaling+0xf6>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ef8:	d90a      	bls.n	8004f10 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8004efa:	4b2d      	ldr	r3, [pc, #180]	; (8004fb0 <HAL_PWREx_ControlVoltageScaling+0x104>)
 8004efc:	68db      	ldr	r3, [r3, #12]
 8004efe:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	4313      	orrs	r3, r2
 8004f06:	4a2a      	ldr	r2, [pc, #168]	; (8004fb0 <HAL_PWREx_ControlVoltageScaling+0x104>)
 8004f08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004f0c:	60d3      	str	r3, [r2, #12]
 8004f0e:	e007      	b.n	8004f20 <HAL_PWREx_ControlVoltageScaling+0x74>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8004f10:	4b27      	ldr	r3, [pc, #156]	; (8004fb0 <HAL_PWREx_ControlVoltageScaling+0x104>)
 8004f12:	68db      	ldr	r3, [r3, #12]
 8004f14:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004f18:	4925      	ldr	r1, [pc, #148]	; (8004fb0 <HAL_PWREx_ControlVoltageScaling+0x104>)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8004f20:	4b24      	ldr	r3, [pc, #144]	; (8004fb4 <HAL_PWREx_ControlVoltageScaling+0x108>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a24      	ldr	r2, [pc, #144]	; (8004fb8 <HAL_PWREx_ControlVoltageScaling+0x10c>)
 8004f26:	fba2 2303 	umull	r2, r3, r2, r3
 8004f2a:	099b      	lsrs	r3, r3, #6
 8004f2c:	2232      	movs	r2, #50	; 0x32
 8004f2e:	fb02 f303 	mul.w	r3, r2, r3
 8004f32:	4a21      	ldr	r2, [pc, #132]	; (8004fb8 <HAL_PWREx_ControlVoltageScaling+0x10c>)
 8004f34:	fba2 2303 	umull	r2, r3, r2, r3
 8004f38:	099b      	lsrs	r3, r3, #6
 8004f3a:	3301      	adds	r3, #1
 8004f3c:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8004f3e:	e002      	b.n	8004f46 <HAL_PWREx_ControlVoltageScaling+0x9a>
  {
    timeout--;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	3b01      	subs	r3, #1
 8004f44:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8004f46:	4b1a      	ldr	r3, [pc, #104]	; (8004fb0 <HAL_PWREx_ControlVoltageScaling+0x104>)
 8004f48:	68db      	ldr	r3, [r3, #12]
 8004f4a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d102      	bne.n	8004f58 <HAL_PWREx_ControlVoltageScaling+0xac>
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d1f3      	bne.n	8004f40 <HAL_PWREx_ControlVoltageScaling+0x94>
  }

  /* Check time out */
  if (timeout != 0U)
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d01b      	beq.n	8004f96 <HAL_PWREx_ControlVoltageScaling+0xea>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8004f5e:	4b15      	ldr	r3, [pc, #84]	; (8004fb4 <HAL_PWREx_ControlVoltageScaling+0x108>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4a15      	ldr	r2, [pc, #84]	; (8004fb8 <HAL_PWREx_ControlVoltageScaling+0x10c>)
 8004f64:	fba2 2303 	umull	r2, r3, r2, r3
 8004f68:	099b      	lsrs	r3, r3, #6
 8004f6a:	2232      	movs	r2, #50	; 0x32
 8004f6c:	fb02 f303 	mul.w	r3, r2, r3
 8004f70:	4a11      	ldr	r2, [pc, #68]	; (8004fb8 <HAL_PWREx_ControlVoltageScaling+0x10c>)
 8004f72:	fba2 2303 	umull	r2, r3, r2, r3
 8004f76:	099b      	lsrs	r3, r3, #6
 8004f78:	3301      	adds	r3, #1
 8004f7a:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8004f7c:	e002      	b.n	8004f84 <HAL_PWREx_ControlVoltageScaling+0xd8>
    {
      timeout--;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	3b01      	subs	r3, #1
 8004f82:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8004f84:	4b0a      	ldr	r3, [pc, #40]	; (8004fb0 <HAL_PWREx_ControlVoltageScaling+0x104>)
 8004f86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d102      	bne.n	8004f96 <HAL_PWREx_ControlVoltageScaling+0xea>
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d1f3      	bne.n	8004f7e <HAL_PWREx_ControlVoltageScaling+0xd2>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d101      	bne.n	8004fa0 <HAL_PWREx_ControlVoltageScaling+0xf4>
  {
    return HAL_TIMEOUT;
 8004f9c:	2303      	movs	r3, #3
 8004f9e:	e000      	b.n	8004fa2 <HAL_PWREx_ControlVoltageScaling+0xf6>
  }

  return HAL_OK;
 8004fa0:	2300      	movs	r3, #0
}
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	3710      	adds	r7, #16
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bd80      	pop	{r7, pc}
 8004faa:	bf00      	nop
 8004fac:	08025be8 	.word	0x08025be8
 8004fb0:	46020800 	.word	0x46020800
 8004fb4:	20000044 	.word	0x20000044
 8004fb8:	10624dd3 	.word	0x10624dd3

08004fbc <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8004fc0:	4b04      	ldr	r3, [pc, #16]	; (8004fd4 <HAL_PWREx_GetVoltageRange+0x18>)
 8004fc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fc4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd0:	4770      	bx	lr
 8004fd2:	bf00      	nop
 8004fd4:	46020800 	.word	0x46020800

08004fd8 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 8004fdc:	4b05      	ldr	r3, [pc, #20]	; (8004ff4 <HAL_PWREx_EnableVddIO2+0x1c>)
 8004fde:	691b      	ldr	r3, [r3, #16]
 8004fe0:	4a04      	ldr	r2, [pc, #16]	; (8004ff4 <HAL_PWREx_EnableVddIO2+0x1c>)
 8004fe2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004fe6:	6113      	str	r3, [r2, #16]
}
 8004fe8:	bf00      	nop
 8004fea:	46bd      	mov	sp, r7
 8004fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff0:	4770      	bx	lr
 8004ff2:	bf00      	nop
 8004ff4:	46020800 	.word	0x46020800

08004ff8 <HAL_PWREx_EnableIO2VM>:
/**
  * @brief  Enable the IO2VM Voltage Monitoring : VDDIO2 versus 0.9 V.
  * @retval None.
  */
void HAL_PWREx_EnableIO2VM(void)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2VMEN);
 8004ffc:	4b05      	ldr	r3, [pc, #20]	; (8005014 <HAL_PWREx_EnableIO2VM+0x1c>)
 8004ffe:	691b      	ldr	r3, [r3, #16]
 8005000:	4a04      	ldr	r2, [pc, #16]	; (8005014 <HAL_PWREx_EnableIO2VM+0x1c>)
 8005002:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005006:	6113      	str	r3, [r2, #16]
}
 8005008:	bf00      	nop
 800500a:	46bd      	mov	sp, r7
 800500c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005010:	4770      	bx	lr
 8005012:	bf00      	nop
 8005014:	46020800 	.word	0x46020800

08005018 <HAL_PWREx_DisableUCPDDeadBattery>:
  *         pull-down or to handover control to the UCPD (the UCPD must be
  *         initialized before doing the disable).
  * @retval None.
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005018:	b480      	push	{r7}
 800501a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->UCPDR, PWR_UCPDR_UCPD_DBDIS);
 800501c:	4b05      	ldr	r3, [pc, #20]	; (8005034 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800501e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005020:	4a04      	ldr	r2, [pc, #16]	; (8005034 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005022:	f043 0301 	orr.w	r3, r3, #1
 8005026:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 8005028:	bf00      	nop
 800502a:	46bd      	mov	sp, r7
 800502c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005030:	4770      	bx	lr
 8005032:	bf00      	nop
 8005034:	46020800 	.word	0x46020800

08005038 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b08e      	sub	sp, #56	; 0x38
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8005040:	2300      	movs	r3, #0
 8005042:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d102      	bne.n	8005052 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 800504c:	2301      	movs	r3, #1
 800504e:	f001 b8eb 	b.w	8006228 <HAL_RCC_OscConfig+0x11f0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d00a      	beq.n	8005070 <HAL_RCC_OscConfig+0x38>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005062:	2b00      	cmp	r3, #0
 8005064:	d004      	beq.n	8005070 <HAL_RCC_OscConfig+0x38>
 8005066:	f240 212d 	movw	r1, #557	; 0x22d
 800506a:	4897      	ldr	r0, [pc, #604]	; (80052c8 <HAL_RCC_OscConfig+0x290>)
 800506c:	f010 f91d 	bl	80152aa <assert_failed>

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005070:	4b96      	ldr	r3, [pc, #600]	; (80052cc <HAL_RCC_OscConfig+0x294>)
 8005072:	69db      	ldr	r3, [r3, #28]
 8005074:	f003 030c 	and.w	r3, r3, #12
 8005078:	633b      	str	r3, [r7, #48]	; 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800507a:	4b94      	ldr	r3, [pc, #592]	; (80052cc <HAL_RCC_OscConfig+0x294>)
 800507c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800507e:	f003 0303 	and.w	r3, r3, #3
 8005082:	62fb      	str	r3, [r7, #44]	; 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f003 0310 	and.w	r3, r3, #16
 800508c:	2b00      	cmp	r3, #0
 800508e:	f000 81dc 	beq.w	800544a <HAL_RCC_OscConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MSI(pRCC_OscInitStruct->MSIState));
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	69db      	ldr	r3, [r3, #28]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d008      	beq.n	80050ac <HAL_RCC_OscConfig+0x74>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	69db      	ldr	r3, [r3, #28]
 800509e:	2b01      	cmp	r3, #1
 80050a0:	d004      	beq.n	80050ac <HAL_RCC_OscConfig+0x74>
 80050a2:	f240 2136 	movw	r1, #566	; 0x236
 80050a6:	4888      	ldr	r0, [pc, #544]	; (80052c8 <HAL_RCC_OscConfig+0x290>)
 80050a8:	f010 f8ff 	bl	80152aa <assert_failed>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6a1b      	ldr	r3, [r3, #32]
 80050b0:	2bff      	cmp	r3, #255	; 0xff
 80050b2:	d904      	bls.n	80050be <HAL_RCC_OscConfig+0x86>
 80050b4:	f240 2137 	movw	r1, #567	; 0x237
 80050b8:	4883      	ldr	r0, [pc, #524]	; (80052c8 <HAL_RCC_OscConfig+0x290>)
 80050ba:	f010 f8f6 	bl	80152aa <assert_failed>
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d04f      	beq.n	8005166 <HAL_RCC_OscConfig+0x12e>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80050ce:	d04a      	beq.n	8005166 <HAL_RCC_OscConfig+0x12e>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80050d8:	d045      	beq.n	8005166 <HAL_RCC_OscConfig+0x12e>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050de:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80050e2:	d040      	beq.n	8005166 <HAL_RCC_OscConfig+0x12e>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050ec:	d03b      	beq.n	8005166 <HAL_RCC_OscConfig+0x12e>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80050f6:	d036      	beq.n	8005166 <HAL_RCC_OscConfig+0x12e>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050fc:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8005100:	d031      	beq.n	8005166 <HAL_RCC_OscConfig+0x12e>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005106:	f1b3 4fe0 	cmp.w	r3, #1879048192	; 0x70000000
 800510a:	d02c      	beq.n	8005166 <HAL_RCC_OscConfig+0x12e>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005110:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005114:	d027      	beq.n	8005166 <HAL_RCC_OscConfig+0x12e>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800511a:	f1b3 4f10 	cmp.w	r3, #2415919104	; 0x90000000
 800511e:	d022      	beq.n	8005166 <HAL_RCC_OscConfig+0x12e>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005124:	f1b3 4f20 	cmp.w	r3, #2684354560	; 0xa0000000
 8005128:	d01d      	beq.n	8005166 <HAL_RCC_OscConfig+0x12e>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800512e:	f1b3 4f30 	cmp.w	r3, #2952790016	; 0xb0000000
 8005132:	d018      	beq.n	8005166 <HAL_RCC_OscConfig+0x12e>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005138:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800513c:	d013      	beq.n	8005166 <HAL_RCC_OscConfig+0x12e>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005142:	f1b3 4f50 	cmp.w	r3, #3489660928	; 0xd0000000
 8005146:	d00e      	beq.n	8005166 <HAL_RCC_OscConfig+0x12e>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800514c:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 8005150:	d009      	beq.n	8005166 <HAL_RCC_OscConfig+0x12e>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005156:	f1b3 4f70 	cmp.w	r3, #4026531840	; 0xf0000000
 800515a:	d004      	beq.n	8005166 <HAL_RCC_OscConfig+0x12e>
 800515c:	f44f 710e 	mov.w	r1, #568	; 0x238
 8005160:	4859      	ldr	r0, [pc, #356]	; (80052c8 <HAL_RCC_OscConfig+0x290>)
 8005162:	f010 f8a2 	bl	80152aa <assert_failed>

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005168:	2b00      	cmp	r3, #0
 800516a:	d007      	beq.n	800517c <HAL_RCC_OscConfig+0x144>
 800516c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800516e:	2b0c      	cmp	r3, #12
 8005170:	f040 80e9 	bne.w	8005346 <HAL_RCC_OscConfig+0x30e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005176:	2b01      	cmp	r3, #1
 8005178:	f040 80e5 	bne.w	8005346 <HAL_RCC_OscConfig+0x30e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U) && (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800517c:	4b53      	ldr	r3, [pc, #332]	; (80052cc <HAL_RCC_OscConfig+0x294>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f003 0304 	and.w	r3, r3, #4
 8005184:	2b00      	cmp	r3, #0
 8005186:	d006      	beq.n	8005196 <HAL_RCC_OscConfig+0x15e>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	69db      	ldr	r3, [r3, #28]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d102      	bne.n	8005196 <HAL_RCC_OscConfig+0x15e>
      {
        return HAL_ERROR;
 8005190:	2301      	movs	r3, #1
 8005192:	f001 b849 	b.w	8006228 <HAL_RCC_OscConfig+0x11f0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800519a:	4b4c      	ldr	r3, [pc, #304]	; (80052cc <HAL_RCC_OscConfig+0x294>)
 800519c:	689b      	ldr	r3, [r3, #8]
 800519e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d004      	beq.n	80051b0 <HAL_RCC_OscConfig+0x178>
 80051a6:	4b49      	ldr	r3, [pc, #292]	; (80052cc <HAL_RCC_OscConfig+0x294>)
 80051a8:	689b      	ldr	r3, [r3, #8]
 80051aa:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80051ae:	e005      	b.n	80051bc <HAL_RCC_OscConfig+0x184>
 80051b0:	4b46      	ldr	r3, [pc, #280]	; (80052cc <HAL_RCC_OscConfig+0x294>)
 80051b2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80051b6:	041b      	lsls	r3, r3, #16
 80051b8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80051bc:	4293      	cmp	r3, r2
 80051be:	d255      	bcs.n	800526c <HAL_RCC_OscConfig+0x234>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80051c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d10a      	bne.n	80051dc <HAL_RCC_OscConfig+0x1a4>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ca:	4618      	mov	r0, r3
 80051cc:	f001 fe3a 	bl	8006e44 <RCC_SetFlashLatencyFromMSIRange>
 80051d0:	4603      	mov	r3, r0
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d002      	beq.n	80051dc <HAL_RCC_OscConfig+0x1a4>
            {
              return HAL_ERROR;
 80051d6:	2301      	movs	r3, #1
 80051d8:	f001 b826 	b.w	8006228 <HAL_RCC_OscConfig+0x11f0>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80051dc:	4b3b      	ldr	r3, [pc, #236]	; (80052cc <HAL_RCC_OscConfig+0x294>)
 80051de:	689b      	ldr	r3, [r3, #8]
 80051e0:	4a3a      	ldr	r2, [pc, #232]	; (80052cc <HAL_RCC_OscConfig+0x294>)
 80051e2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80051e6:	6093      	str	r3, [r2, #8]
 80051e8:	4b38      	ldr	r3, [pc, #224]	; (80052cc <HAL_RCC_OscConfig+0x294>)
 80051ea:	689b      	ldr	r3, [r3, #8]
 80051ec:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f4:	4935      	ldr	r1, [pc, #212]	; (80052cc <HAL_RCC_OscConfig+0x294>)
 80051f6:	4313      	orrs	r3, r2
 80051f8:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051fe:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8005202:	d309      	bcc.n	8005218 <HAL_RCC_OscConfig+0x1e0>
 8005204:	4b31      	ldr	r3, [pc, #196]	; (80052cc <HAL_RCC_OscConfig+0x294>)
 8005206:	68db      	ldr	r3, [r3, #12]
 8005208:	f023 021f 	bic.w	r2, r3, #31
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6a1b      	ldr	r3, [r3, #32]
 8005210:	492e      	ldr	r1, [pc, #184]	; (80052cc <HAL_RCC_OscConfig+0x294>)
 8005212:	4313      	orrs	r3, r2
 8005214:	60cb      	str	r3, [r1, #12]
 8005216:	e083      	b.n	8005320 <HAL_RCC_OscConfig+0x2e8>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800521c:	2b00      	cmp	r3, #0
 800521e:	da0a      	bge.n	8005236 <HAL_RCC_OscConfig+0x1fe>
 8005220:	4b2a      	ldr	r3, [pc, #168]	; (80052cc <HAL_RCC_OscConfig+0x294>)
 8005222:	68db      	ldr	r3, [r3, #12]
 8005224:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6a1b      	ldr	r3, [r3, #32]
 800522c:	015b      	lsls	r3, r3, #5
 800522e:	4927      	ldr	r1, [pc, #156]	; (80052cc <HAL_RCC_OscConfig+0x294>)
 8005230:	4313      	orrs	r3, r2
 8005232:	60cb      	str	r3, [r1, #12]
 8005234:	e074      	b.n	8005320 <HAL_RCC_OscConfig+0x2e8>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800523a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800523e:	d30a      	bcc.n	8005256 <HAL_RCC_OscConfig+0x21e>
 8005240:	4b22      	ldr	r3, [pc, #136]	; (80052cc <HAL_RCC_OscConfig+0x294>)
 8005242:	68db      	ldr	r3, [r3, #12]
 8005244:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6a1b      	ldr	r3, [r3, #32]
 800524c:	029b      	lsls	r3, r3, #10
 800524e:	491f      	ldr	r1, [pc, #124]	; (80052cc <HAL_RCC_OscConfig+0x294>)
 8005250:	4313      	orrs	r3, r2
 8005252:	60cb      	str	r3, [r1, #12]
 8005254:	e064      	b.n	8005320 <HAL_RCC_OscConfig+0x2e8>
 8005256:	4b1d      	ldr	r3, [pc, #116]	; (80052cc <HAL_RCC_OscConfig+0x294>)
 8005258:	68db      	ldr	r3, [r3, #12]
 800525a:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6a1b      	ldr	r3, [r3, #32]
 8005262:	03db      	lsls	r3, r3, #15
 8005264:	4919      	ldr	r1, [pc, #100]	; (80052cc <HAL_RCC_OscConfig+0x294>)
 8005266:	4313      	orrs	r3, r2
 8005268:	60cb      	str	r3, [r1, #12]
 800526a:	e059      	b.n	8005320 <HAL_RCC_OscConfig+0x2e8>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800526c:	4b17      	ldr	r3, [pc, #92]	; (80052cc <HAL_RCC_OscConfig+0x294>)
 800526e:	689b      	ldr	r3, [r3, #8]
 8005270:	4a16      	ldr	r2, [pc, #88]	; (80052cc <HAL_RCC_OscConfig+0x294>)
 8005272:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005276:	6093      	str	r3, [r2, #8]
 8005278:	4b14      	ldr	r3, [pc, #80]	; (80052cc <HAL_RCC_OscConfig+0x294>)
 800527a:	689b      	ldr	r3, [r3, #8]
 800527c:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005284:	4911      	ldr	r1, [pc, #68]	; (80052cc <HAL_RCC_OscConfig+0x294>)
 8005286:	4313      	orrs	r3, r2
 8005288:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800528e:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8005292:	d309      	bcc.n	80052a8 <HAL_RCC_OscConfig+0x270>
 8005294:	4b0d      	ldr	r3, [pc, #52]	; (80052cc <HAL_RCC_OscConfig+0x294>)
 8005296:	68db      	ldr	r3, [r3, #12]
 8005298:	f023 021f 	bic.w	r2, r3, #31
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6a1b      	ldr	r3, [r3, #32]
 80052a0:	490a      	ldr	r1, [pc, #40]	; (80052cc <HAL_RCC_OscConfig+0x294>)
 80052a2:	4313      	orrs	r3, r2
 80052a4:	60cb      	str	r3, [r1, #12]
 80052a6:	e02d      	b.n	8005304 <HAL_RCC_OscConfig+0x2cc>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	da0f      	bge.n	80052d0 <HAL_RCC_OscConfig+0x298>
 80052b0:	4b06      	ldr	r3, [pc, #24]	; (80052cc <HAL_RCC_OscConfig+0x294>)
 80052b2:	68db      	ldr	r3, [r3, #12]
 80052b4:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6a1b      	ldr	r3, [r3, #32]
 80052bc:	015b      	lsls	r3, r3, #5
 80052be:	4903      	ldr	r1, [pc, #12]	; (80052cc <HAL_RCC_OscConfig+0x294>)
 80052c0:	4313      	orrs	r3, r2
 80052c2:	60cb      	str	r3, [r1, #12]
 80052c4:	e01e      	b.n	8005304 <HAL_RCC_OscConfig+0x2cc>
 80052c6:	bf00      	nop
 80052c8:	08025c54 	.word	0x08025c54
 80052cc:	46020c00 	.word	0x46020c00
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052d8:	d30a      	bcc.n	80052f0 <HAL_RCC_OscConfig+0x2b8>
 80052da:	4b95      	ldr	r3, [pc, #596]	; (8005530 <HAL_RCC_OscConfig+0x4f8>)
 80052dc:	68db      	ldr	r3, [r3, #12]
 80052de:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6a1b      	ldr	r3, [r3, #32]
 80052e6:	029b      	lsls	r3, r3, #10
 80052e8:	4991      	ldr	r1, [pc, #580]	; (8005530 <HAL_RCC_OscConfig+0x4f8>)
 80052ea:	4313      	orrs	r3, r2
 80052ec:	60cb      	str	r3, [r1, #12]
 80052ee:	e009      	b.n	8005304 <HAL_RCC_OscConfig+0x2cc>
 80052f0:	4b8f      	ldr	r3, [pc, #572]	; (8005530 <HAL_RCC_OscConfig+0x4f8>)
 80052f2:	68db      	ldr	r3, [r3, #12]
 80052f4:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6a1b      	ldr	r3, [r3, #32]
 80052fc:	03db      	lsls	r3, r3, #15
 80052fe:	498c      	ldr	r1, [pc, #560]	; (8005530 <HAL_RCC_OscConfig+0x4f8>)
 8005300:	4313      	orrs	r3, r2
 8005302:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005306:	2b00      	cmp	r3, #0
 8005308:	d10a      	bne.n	8005320 <HAL_RCC_OscConfig+0x2e8>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800530e:	4618      	mov	r0, r3
 8005310:	f001 fd98 	bl	8006e44 <RCC_SetFlashLatencyFromMSIRange>
 8005314:	4603      	mov	r3, r0
 8005316:	2b00      	cmp	r3, #0
 8005318:	d002      	beq.n	8005320 <HAL_RCC_OscConfig+0x2e8>
            {
              return HAL_ERROR;
 800531a:	2301      	movs	r3, #1
 800531c:	f000 bf84 	b.w	8006228 <HAL_RCC_OscConfig+0x11f0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8005320:	f001 fbd6 	bl	8006ad0 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005324:	4b83      	ldr	r3, [pc, #524]	; (8005534 <HAL_RCC_OscConfig+0x4fc>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4618      	mov	r0, r3
 800532a:	f00f ffc9 	bl	80152c0 <HAL_InitTick>
 800532e:	4603      	mov	r3, r0
 8005330:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (status != HAL_OK)
 8005334:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005338:	2b00      	cmp	r3, #0
 800533a:	f000 8085 	beq.w	8005448 <HAL_RCC_OscConfig+0x410>
        {
          return status;
 800533e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005342:	f000 bf71 	b.w	8006228 <HAL_RCC_OscConfig+0x11f0>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	69db      	ldr	r3, [r3, #28]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d061      	beq.n	8005412 <HAL_RCC_OscConfig+0x3da>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 800534e:	4b78      	ldr	r3, [pc, #480]	; (8005530 <HAL_RCC_OscConfig+0x4f8>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4a77      	ldr	r2, [pc, #476]	; (8005530 <HAL_RCC_OscConfig+0x4f8>)
 8005354:	f043 0301 	orr.w	r3, r3, #1
 8005358:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800535a:	f7fd fcb5 	bl	8002cc8 <HAL_GetTick>
 800535e:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8005360:	e009      	b.n	8005376 <HAL_RCC_OscConfig+0x33e>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005362:	f7fd fcb1 	bl	8002cc8 <HAL_GetTick>
 8005366:	4602      	mov	r2, r0
 8005368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800536a:	1ad3      	subs	r3, r2, r3
 800536c:	2b02      	cmp	r3, #2
 800536e:	d902      	bls.n	8005376 <HAL_RCC_OscConfig+0x33e>
          {
            return HAL_TIMEOUT;
 8005370:	2303      	movs	r3, #3
 8005372:	f000 bf59 	b.w	8006228 <HAL_RCC_OscConfig+0x11f0>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8005376:	4b6e      	ldr	r3, [pc, #440]	; (8005530 <HAL_RCC_OscConfig+0x4f8>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f003 0304 	and.w	r3, r3, #4
 800537e:	2b00      	cmp	r3, #0
 8005380:	d0ef      	beq.n	8005362 <HAL_RCC_OscConfig+0x32a>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8005382:	4b6b      	ldr	r3, [pc, #428]	; (8005530 <HAL_RCC_OscConfig+0x4f8>)
 8005384:	689b      	ldr	r3, [r3, #8]
 8005386:	4a6a      	ldr	r2, [pc, #424]	; (8005530 <HAL_RCC_OscConfig+0x4f8>)
 8005388:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800538c:	6093      	str	r3, [r2, #8]
 800538e:	4b68      	ldr	r3, [pc, #416]	; (8005530 <HAL_RCC_OscConfig+0x4f8>)
 8005390:	689b      	ldr	r3, [r3, #8]
 8005392:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800539a:	4965      	ldr	r1, [pc, #404]	; (8005530 <HAL_RCC_OscConfig+0x4f8>)
 800539c:	4313      	orrs	r3, r2
 800539e:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a4:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80053a8:	d309      	bcc.n	80053be <HAL_RCC_OscConfig+0x386>
 80053aa:	4b61      	ldr	r3, [pc, #388]	; (8005530 <HAL_RCC_OscConfig+0x4f8>)
 80053ac:	68db      	ldr	r3, [r3, #12]
 80053ae:	f023 021f 	bic.w	r2, r3, #31
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6a1b      	ldr	r3, [r3, #32]
 80053b6:	495e      	ldr	r1, [pc, #376]	; (8005530 <HAL_RCC_OscConfig+0x4f8>)
 80053b8:	4313      	orrs	r3, r2
 80053ba:	60cb      	str	r3, [r1, #12]
 80053bc:	e045      	b.n	800544a <HAL_RCC_OscConfig+0x412>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	da0a      	bge.n	80053dc <HAL_RCC_OscConfig+0x3a4>
 80053c6:	4b5a      	ldr	r3, [pc, #360]	; (8005530 <HAL_RCC_OscConfig+0x4f8>)
 80053c8:	68db      	ldr	r3, [r3, #12]
 80053ca:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6a1b      	ldr	r3, [r3, #32]
 80053d2:	015b      	lsls	r3, r3, #5
 80053d4:	4956      	ldr	r1, [pc, #344]	; (8005530 <HAL_RCC_OscConfig+0x4f8>)
 80053d6:	4313      	orrs	r3, r2
 80053d8:	60cb      	str	r3, [r1, #12]
 80053da:	e036      	b.n	800544a <HAL_RCC_OscConfig+0x412>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053e4:	d30a      	bcc.n	80053fc <HAL_RCC_OscConfig+0x3c4>
 80053e6:	4b52      	ldr	r3, [pc, #328]	; (8005530 <HAL_RCC_OscConfig+0x4f8>)
 80053e8:	68db      	ldr	r3, [r3, #12]
 80053ea:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6a1b      	ldr	r3, [r3, #32]
 80053f2:	029b      	lsls	r3, r3, #10
 80053f4:	494e      	ldr	r1, [pc, #312]	; (8005530 <HAL_RCC_OscConfig+0x4f8>)
 80053f6:	4313      	orrs	r3, r2
 80053f8:	60cb      	str	r3, [r1, #12]
 80053fa:	e026      	b.n	800544a <HAL_RCC_OscConfig+0x412>
 80053fc:	4b4c      	ldr	r3, [pc, #304]	; (8005530 <HAL_RCC_OscConfig+0x4f8>)
 80053fe:	68db      	ldr	r3, [r3, #12]
 8005400:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6a1b      	ldr	r3, [r3, #32]
 8005408:	03db      	lsls	r3, r3, #15
 800540a:	4949      	ldr	r1, [pc, #292]	; (8005530 <HAL_RCC_OscConfig+0x4f8>)
 800540c:	4313      	orrs	r3, r2
 800540e:	60cb      	str	r3, [r1, #12]
 8005410:	e01b      	b.n	800544a <HAL_RCC_OscConfig+0x412>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8005412:	4b47      	ldr	r3, [pc, #284]	; (8005530 <HAL_RCC_OscConfig+0x4f8>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4a46      	ldr	r2, [pc, #280]	; (8005530 <HAL_RCC_OscConfig+0x4f8>)
 8005418:	f023 0301 	bic.w	r3, r3, #1
 800541c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800541e:	f7fd fc53 	bl	8002cc8 <HAL_GetTick>
 8005422:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8005424:	e009      	b.n	800543a <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005426:	f7fd fc4f 	bl	8002cc8 <HAL_GetTick>
 800542a:	4602      	mov	r2, r0
 800542c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800542e:	1ad3      	subs	r3, r2, r3
 8005430:	2b02      	cmp	r3, #2
 8005432:	d902      	bls.n	800543a <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8005434:	2303      	movs	r3, #3
 8005436:	f000 bef7 	b.w	8006228 <HAL_RCC_OscConfig+0x11f0>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800543a:	4b3d      	ldr	r3, [pc, #244]	; (8005530 <HAL_RCC_OscConfig+0x4f8>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f003 0304 	and.w	r3, r3, #4
 8005442:	2b00      	cmp	r3, #0
 8005444:	d1ef      	bne.n	8005426 <HAL_RCC_OscConfig+0x3ee>
 8005446:	e000      	b.n	800544a <HAL_RCC_OscConfig+0x412>
      if ((READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U) && (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005448:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f003 0301 	and.w	r3, r3, #1
 8005452:	2b00      	cmp	r3, #0
 8005454:	f000 80b3 	beq.w	80055be <HAL_RCC_OscConfig+0x586>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	685b      	ldr	r3, [r3, #4]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d013      	beq.n	8005488 <HAL_RCC_OscConfig+0x450>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005468:	d00e      	beq.n	8005488 <HAL_RCC_OscConfig+0x450>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005472:	d009      	beq.n	8005488 <HAL_RCC_OscConfig+0x450>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	685b      	ldr	r3, [r3, #4]
 8005478:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 800547c:	d004      	beq.n	8005488 <HAL_RCC_OscConfig+0x450>
 800547e:	f240 21a7 	movw	r1, #679	; 0x2a7
 8005482:	482d      	ldr	r0, [pc, #180]	; (8005538 <HAL_RCC_OscConfig+0x500>)
 8005484:	f00f ff11 	bl	80152aa <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8005488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800548a:	2b08      	cmp	r3, #8
 800548c:	d005      	beq.n	800549a <HAL_RCC_OscConfig+0x462>
 800548e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005490:	2b0c      	cmp	r3, #12
 8005492:	d111      	bne.n	80054b8 <HAL_RCC_OscConfig+0x480>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005496:	2b03      	cmp	r3, #3
 8005498:	d10e      	bne.n	80054b8 <HAL_RCC_OscConfig+0x480>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800549a:	4b25      	ldr	r3, [pc, #148]	; (8005530 <HAL_RCC_OscConfig+0x4f8>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	f000 808a 	beq.w	80055bc <HAL_RCC_OscConfig+0x584>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	685b      	ldr	r3, [r3, #4]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	f040 8085 	bne.w	80055bc <HAL_RCC_OscConfig+0x584>
      {
        return HAL_ERROR;
 80054b2:	2301      	movs	r3, #1
 80054b4:	f000 beb8 	b.w	8006228 <HAL_RCC_OscConfig+0x11f0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	685b      	ldr	r3, [r3, #4]
 80054bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054c0:	d106      	bne.n	80054d0 <HAL_RCC_OscConfig+0x498>
 80054c2:	4b1b      	ldr	r3, [pc, #108]	; (8005530 <HAL_RCC_OscConfig+0x4f8>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4a1a      	ldr	r2, [pc, #104]	; (8005530 <HAL_RCC_OscConfig+0x4f8>)
 80054c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054cc:	6013      	str	r3, [r2, #0]
 80054ce:	e047      	b.n	8005560 <HAL_RCC_OscConfig+0x528>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	685b      	ldr	r3, [r3, #4]
 80054d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80054d8:	d112      	bne.n	8005500 <HAL_RCC_OscConfig+0x4c8>
 80054da:	4b15      	ldr	r3, [pc, #84]	; (8005530 <HAL_RCC_OscConfig+0x4f8>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a14      	ldr	r2, [pc, #80]	; (8005530 <HAL_RCC_OscConfig+0x4f8>)
 80054e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80054e4:	6013      	str	r3, [r2, #0]
 80054e6:	4b12      	ldr	r3, [pc, #72]	; (8005530 <HAL_RCC_OscConfig+0x4f8>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a11      	ldr	r2, [pc, #68]	; (8005530 <HAL_RCC_OscConfig+0x4f8>)
 80054ec:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80054f0:	6013      	str	r3, [r2, #0]
 80054f2:	4b0f      	ldr	r3, [pc, #60]	; (8005530 <HAL_RCC_OscConfig+0x4f8>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4a0e      	ldr	r2, [pc, #56]	; (8005530 <HAL_RCC_OscConfig+0x4f8>)
 80054f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054fc:	6013      	str	r3, [r2, #0]
 80054fe:	e02f      	b.n	8005560 <HAL_RCC_OscConfig+0x528>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	685b      	ldr	r3, [r3, #4]
 8005504:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8005508:	d118      	bne.n	800553c <HAL_RCC_OscConfig+0x504>
 800550a:	4b09      	ldr	r3, [pc, #36]	; (8005530 <HAL_RCC_OscConfig+0x4f8>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4a08      	ldr	r2, [pc, #32]	; (8005530 <HAL_RCC_OscConfig+0x4f8>)
 8005510:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005514:	6013      	str	r3, [r2, #0]
 8005516:	4b06      	ldr	r3, [pc, #24]	; (8005530 <HAL_RCC_OscConfig+0x4f8>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4a05      	ldr	r2, [pc, #20]	; (8005530 <HAL_RCC_OscConfig+0x4f8>)
 800551c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005520:	6013      	str	r3, [r2, #0]
 8005522:	4b03      	ldr	r3, [pc, #12]	; (8005530 <HAL_RCC_OscConfig+0x4f8>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4a02      	ldr	r2, [pc, #8]	; (8005530 <HAL_RCC_OscConfig+0x4f8>)
 8005528:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800552c:	6013      	str	r3, [r2, #0]
 800552e:	e017      	b.n	8005560 <HAL_RCC_OscConfig+0x528>
 8005530:	46020c00 	.word	0x46020c00
 8005534:	20000000 	.word	0x20000000
 8005538:	08025c54 	.word	0x08025c54
 800553c:	4b9e      	ldr	r3, [pc, #632]	; (80057b8 <HAL_RCC_OscConfig+0x780>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4a9d      	ldr	r2, [pc, #628]	; (80057b8 <HAL_RCC_OscConfig+0x780>)
 8005542:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005546:	6013      	str	r3, [r2, #0]
 8005548:	4b9b      	ldr	r3, [pc, #620]	; (80057b8 <HAL_RCC_OscConfig+0x780>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a9a      	ldr	r2, [pc, #616]	; (80057b8 <HAL_RCC_OscConfig+0x780>)
 800554e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005552:	6013      	str	r3, [r2, #0]
 8005554:	4b98      	ldr	r3, [pc, #608]	; (80057b8 <HAL_RCC_OscConfig+0x780>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a97      	ldr	r2, [pc, #604]	; (80057b8 <HAL_RCC_OscConfig+0x780>)
 800555a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800555e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	685b      	ldr	r3, [r3, #4]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d014      	beq.n	8005592 <HAL_RCC_OscConfig+0x55a>
      {
        tickstart = HAL_GetTick();
 8005568:	f7fd fbae 	bl	8002cc8 <HAL_GetTick>
 800556c:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800556e:	e009      	b.n	8005584 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005570:	f7fd fbaa 	bl	8002cc8 <HAL_GetTick>
 8005574:	4602      	mov	r2, r0
 8005576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005578:	1ad3      	subs	r3, r2, r3
 800557a:	2b64      	cmp	r3, #100	; 0x64
 800557c:	d902      	bls.n	8005584 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 800557e:	2303      	movs	r3, #3
 8005580:	f000 be52 	b.w	8006228 <HAL_RCC_OscConfig+0x11f0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005584:	4b8c      	ldr	r3, [pc, #560]	; (80057b8 <HAL_RCC_OscConfig+0x780>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800558c:	2b00      	cmp	r3, #0
 800558e:	d0ef      	beq.n	8005570 <HAL_RCC_OscConfig+0x538>
 8005590:	e015      	b.n	80055be <HAL_RCC_OscConfig+0x586>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8005592:	f7fd fb99 	bl	8002cc8 <HAL_GetTick>
 8005596:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005598:	e009      	b.n	80055ae <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800559a:	f7fd fb95 	bl	8002cc8 <HAL_GetTick>
 800559e:	4602      	mov	r2, r0
 80055a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055a2:	1ad3      	subs	r3, r2, r3
 80055a4:	2b64      	cmp	r3, #100	; 0x64
 80055a6:	d902      	bls.n	80055ae <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80055a8:	2303      	movs	r3, #3
 80055aa:	f000 be3d 	b.w	8006228 <HAL_RCC_OscConfig+0x11f0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80055ae:	4b82      	ldr	r3, [pc, #520]	; (80057b8 <HAL_RCC_OscConfig+0x780>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d1ef      	bne.n	800559a <HAL_RCC_OscConfig+0x562>
 80055ba:	e000      	b.n	80055be <HAL_RCC_OscConfig+0x586>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f003 0302 	and.w	r3, r3, #2
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d07a      	beq.n	80056c0 <HAL_RCC_OscConfig+0x688>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	68db      	ldr	r3, [r3, #12]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d009      	beq.n	80055e6 <HAL_RCC_OscConfig+0x5ae>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	68db      	ldr	r3, [r3, #12]
 80055d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055da:	d004      	beq.n	80055e6 <HAL_RCC_OscConfig+0x5ae>
 80055dc:	f44f 7136 	mov.w	r1, #728	; 0x2d8
 80055e0:	4876      	ldr	r0, [pc, #472]	; (80057bc <HAL_RCC_OscConfig+0x784>)
 80055e2:	f00f fe62 	bl	80152aa <assert_failed>
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	691b      	ldr	r3, [r3, #16]
 80055ea:	2b1f      	cmp	r3, #31
 80055ec:	d904      	bls.n	80055f8 <HAL_RCC_OscConfig+0x5c0>
 80055ee:	f240 21d9 	movw	r1, #729	; 0x2d9
 80055f2:	4872      	ldr	r0, [pc, #456]	; (80057bc <HAL_RCC_OscConfig+0x784>)
 80055f4:	f00f fe59 	bl	80152aa <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80055f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055fa:	2b04      	cmp	r3, #4
 80055fc:	d005      	beq.n	800560a <HAL_RCC_OscConfig+0x5d2>
 80055fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005600:	2b0c      	cmp	r3, #12
 8005602:	d11a      	bne.n	800563a <HAL_RCC_OscConfig+0x602>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005606:	2b02      	cmp	r3, #2
 8005608:	d117      	bne.n	800563a <HAL_RCC_OscConfig+0x602>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800560a:	4b6b      	ldr	r3, [pc, #428]	; (80057b8 <HAL_RCC_OscConfig+0x780>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005612:	2b00      	cmp	r3, #0
 8005614:	d006      	beq.n	8005624 <HAL_RCC_OscConfig+0x5ec>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	68db      	ldr	r3, [r3, #12]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d102      	bne.n	8005624 <HAL_RCC_OscConfig+0x5ec>
      {
        return HAL_ERROR;
 800561e:	2301      	movs	r3, #1
 8005620:	f000 be02 	b.w	8006228 <HAL_RCC_OscConfig+0x11f0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8005624:	4b64      	ldr	r3, [pc, #400]	; (80057b8 <HAL_RCC_OscConfig+0x780>)
 8005626:	691b      	ldr	r3, [r3, #16]
 8005628:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	691b      	ldr	r3, [r3, #16]
 8005630:	041b      	lsls	r3, r3, #16
 8005632:	4961      	ldr	r1, [pc, #388]	; (80057b8 <HAL_RCC_OscConfig+0x780>)
 8005634:	4313      	orrs	r3, r2
 8005636:	610b      	str	r3, [r1, #16]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005638:	e042      	b.n	80056c0 <HAL_RCC_OscConfig+0x688>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	68db      	ldr	r3, [r3, #12]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d024      	beq.n	800568c <HAL_RCC_OscConfig+0x654>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8005642:	4b5d      	ldr	r3, [pc, #372]	; (80057b8 <HAL_RCC_OscConfig+0x780>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	4a5c      	ldr	r2, [pc, #368]	; (80057b8 <HAL_RCC_OscConfig+0x780>)
 8005648:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800564c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800564e:	f7fd fb3b 	bl	8002cc8 <HAL_GetTick>
 8005652:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005654:	e009      	b.n	800566a <HAL_RCC_OscConfig+0x632>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005656:	f7fd fb37 	bl	8002cc8 <HAL_GetTick>
 800565a:	4602      	mov	r2, r0
 800565c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800565e:	1ad3      	subs	r3, r2, r3
 8005660:	2b02      	cmp	r3, #2
 8005662:	d902      	bls.n	800566a <HAL_RCC_OscConfig+0x632>
          {
            return HAL_TIMEOUT;
 8005664:	2303      	movs	r3, #3
 8005666:	f000 bddf 	b.w	8006228 <HAL_RCC_OscConfig+0x11f0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800566a:	4b53      	ldr	r3, [pc, #332]	; (80057b8 <HAL_RCC_OscConfig+0x780>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005672:	2b00      	cmp	r3, #0
 8005674:	d0ef      	beq.n	8005656 <HAL_RCC_OscConfig+0x61e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8005676:	4b50      	ldr	r3, [pc, #320]	; (80057b8 <HAL_RCC_OscConfig+0x780>)
 8005678:	691b      	ldr	r3, [r3, #16]
 800567a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	691b      	ldr	r3, [r3, #16]
 8005682:	041b      	lsls	r3, r3, #16
 8005684:	494c      	ldr	r1, [pc, #304]	; (80057b8 <HAL_RCC_OscConfig+0x780>)
 8005686:	4313      	orrs	r3, r2
 8005688:	610b      	str	r3, [r1, #16]
 800568a:	e019      	b.n	80056c0 <HAL_RCC_OscConfig+0x688>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 800568c:	4b4a      	ldr	r3, [pc, #296]	; (80057b8 <HAL_RCC_OscConfig+0x780>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a49      	ldr	r2, [pc, #292]	; (80057b8 <HAL_RCC_OscConfig+0x780>)
 8005692:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005696:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005698:	f7fd fb16 	bl	8002cc8 <HAL_GetTick>
 800569c:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800569e:	e009      	b.n	80056b4 <HAL_RCC_OscConfig+0x67c>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80056a0:	f7fd fb12 	bl	8002cc8 <HAL_GetTick>
 80056a4:	4602      	mov	r2, r0
 80056a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056a8:	1ad3      	subs	r3, r2, r3
 80056aa:	2b02      	cmp	r3, #2
 80056ac:	d902      	bls.n	80056b4 <HAL_RCC_OscConfig+0x67c>
          {
            return HAL_TIMEOUT;
 80056ae:	2303      	movs	r3, #3
 80056b0:	f000 bdba 	b.w	8006228 <HAL_RCC_OscConfig+0x11f0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80056b4:	4b40      	ldr	r3, [pc, #256]	; (80057b8 <HAL_RCC_OscConfig+0x780>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d1ef      	bne.n	80056a0 <HAL_RCC_OscConfig+0x668>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f003 0308 	and.w	r3, r3, #8
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	f000 80ef 	beq.w	80058ac <HAL_RCC_OscConfig+0x874>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	695b      	ldr	r3, [r3, #20]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d009      	beq.n	80056ea <HAL_RCC_OscConfig+0x6b2>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	695b      	ldr	r3, [r3, #20]
 80056da:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80056de:	d004      	beq.n	80056ea <HAL_RCC_OscConfig+0x6b2>
 80056e0:	f240 3117 	movw	r1, #791	; 0x317
 80056e4:	4835      	ldr	r0, [pc, #212]	; (80057bc <HAL_RCC_OscConfig+0x784>)
 80056e6:	f00f fde0 	bl	80152aa <assert_failed>

    FlagStatus  pwrclkchanged = RESET;
 80056ea:	2300      	movs	r3, #0
 80056ec:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80056f0:	4b31      	ldr	r3, [pc, #196]	; (80057b8 <HAL_RCC_OscConfig+0x780>)
 80056f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80056f6:	f003 0304 	and.w	r3, r3, #4
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d111      	bne.n	8005722 <HAL_RCC_OscConfig+0x6ea>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80056fe:	4b2e      	ldr	r3, [pc, #184]	; (80057b8 <HAL_RCC_OscConfig+0x780>)
 8005700:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005704:	4a2c      	ldr	r2, [pc, #176]	; (80057b8 <HAL_RCC_OscConfig+0x780>)
 8005706:	f043 0304 	orr.w	r3, r3, #4
 800570a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800570e:	4b2a      	ldr	r3, [pc, #168]	; (80057b8 <HAL_RCC_OscConfig+0x780>)
 8005710:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005714:	f003 0304 	and.w	r3, r3, #4
 8005718:	617b      	str	r3, [r7, #20]
 800571a:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 800571c:	2301      	movs	r3, #1
 800571e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005722:	4b27      	ldr	r3, [pc, #156]	; (80057c0 <HAL_RCC_OscConfig+0x788>)
 8005724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005726:	f003 0301 	and.w	r3, r3, #1
 800572a:	2b00      	cmp	r3, #0
 800572c:	d119      	bne.n	8005762 <HAL_RCC_OscConfig+0x72a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800572e:	4b24      	ldr	r3, [pc, #144]	; (80057c0 <HAL_RCC_OscConfig+0x788>)
 8005730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005732:	4a23      	ldr	r2, [pc, #140]	; (80057c0 <HAL_RCC_OscConfig+0x788>)
 8005734:	f043 0301 	orr.w	r3, r3, #1
 8005738:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800573a:	f7fd fac5 	bl	8002cc8 <HAL_GetTick>
 800573e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005740:	e009      	b.n	8005756 <HAL_RCC_OscConfig+0x71e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005742:	f7fd fac1 	bl	8002cc8 <HAL_GetTick>
 8005746:	4602      	mov	r2, r0
 8005748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800574a:	1ad3      	subs	r3, r2, r3
 800574c:	2b02      	cmp	r3, #2
 800574e:	d902      	bls.n	8005756 <HAL_RCC_OscConfig+0x71e>
        {
          return HAL_TIMEOUT;
 8005750:	2303      	movs	r3, #3
 8005752:	f000 bd69 	b.w	8006228 <HAL_RCC_OscConfig+0x11f0>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005756:	4b1a      	ldr	r3, [pc, #104]	; (80057c0 <HAL_RCC_OscConfig+0x788>)
 8005758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800575a:	f003 0301 	and.w	r3, r3, #1
 800575e:	2b00      	cmp	r3, #0
 8005760:	d0ef      	beq.n	8005742 <HAL_RCC_OscConfig+0x70a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	695b      	ldr	r3, [r3, #20]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d077      	beq.n	800585a <HAL_RCC_OscConfig+0x822>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 800576a:	4b13      	ldr	r3, [pc, #76]	; (80057b8 <HAL_RCC_OscConfig+0x780>)
 800576c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005770:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	699b      	ldr	r3, [r3, #24]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d009      	beq.n	800578e <HAL_RCC_OscConfig+0x756>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	699b      	ldr	r3, [r3, #24]
 800577e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005782:	d004      	beq.n	800578e <HAL_RCC_OscConfig+0x756>
 8005784:	f240 3139 	movw	r1, #825	; 0x339
 8005788:	480c      	ldr	r0, [pc, #48]	; (80057bc <HAL_RCC_OscConfig+0x784>)
 800578a:	f00f fd8e 	bl	80152aa <assert_failed>

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	699a      	ldr	r2, [r3, #24]
 8005792:	6a3b      	ldr	r3, [r7, #32]
 8005794:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005798:	429a      	cmp	r2, r3
 800579a:	d040      	beq.n	800581e <HAL_RCC_OscConfig+0x7e6>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 800579c:	6a3b      	ldr	r3, [r7, #32]
 800579e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d00e      	beq.n	80057c4 <HAL_RCC_OscConfig+0x78c>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 80057a6:	6a3b      	ldr	r3, [r7, #32]
 80057a8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d109      	bne.n	80057c4 <HAL_RCC_OscConfig+0x78c>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 80057b0:	2301      	movs	r3, #1
 80057b2:	f000 bd39 	b.w	8006228 <HAL_RCC_OscConfig+0x11f0>
 80057b6:	bf00      	nop
 80057b8:	46020c00 	.word	0x46020c00
 80057bc:	08025c54 	.word	0x08025c54
 80057c0:	46020800 	.word	0x46020800
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 80057c4:	6a3b      	ldr	r3, [r7, #32]
 80057c6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d01c      	beq.n	8005808 <HAL_RCC_OscConfig+0x7d0>
        {
          __HAL_RCC_LSI_DISABLE();
 80057ce:	4baf      	ldr	r3, [pc, #700]	; (8005a8c <HAL_RCC_OscConfig+0xa54>)
 80057d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80057d4:	4aad      	ldr	r2, [pc, #692]	; (8005a8c <HAL_RCC_OscConfig+0xa54>)
 80057d6:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 80057da:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 80057de:	f7fd fa73 	bl	8002cc8 <HAL_GetTick>
 80057e2:	62b8      	str	r0, [r7, #40]	; 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80057e4:	e009      	b.n	80057fa <HAL_RCC_OscConfig+0x7c2>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80057e6:	f7fd fa6f 	bl	8002cc8 <HAL_GetTick>
 80057ea:	4602      	mov	r2, r0
 80057ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ee:	1ad3      	subs	r3, r2, r3
 80057f0:	2b02      	cmp	r3, #2
 80057f2:	d902      	bls.n	80057fa <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 80057f4:	2303      	movs	r3, #3
 80057f6:	f000 bd17 	b.w	8006228 <HAL_RCC_OscConfig+0x11f0>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80057fa:	4ba4      	ldr	r3, [pc, #656]	; (8005a8c <HAL_RCC_OscConfig+0xa54>)
 80057fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005800:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005804:	2b00      	cmp	r3, #0
 8005806:	d1ee      	bne.n	80057e6 <HAL_RCC_OscConfig+0x7ae>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8005808:	4ba0      	ldr	r3, [pc, #640]	; (8005a8c <HAL_RCC_OscConfig+0xa54>)
 800580a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800580e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	699b      	ldr	r3, [r3, #24]
 8005816:	499d      	ldr	r1, [pc, #628]	; (8005a8c <HAL_RCC_OscConfig+0xa54>)
 8005818:	4313      	orrs	r3, r2
 800581a:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 800581e:	4b9b      	ldr	r3, [pc, #620]	; (8005a8c <HAL_RCC_OscConfig+0xa54>)
 8005820:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005824:	4a99      	ldr	r2, [pc, #612]	; (8005a8c <HAL_RCC_OscConfig+0xa54>)
 8005826:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800582a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 800582e:	f7fd fa4b 	bl	8002cc8 <HAL_GetTick>
 8005832:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8005834:	e009      	b.n	800584a <HAL_RCC_OscConfig+0x812>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005836:	f7fd fa47 	bl	8002cc8 <HAL_GetTick>
 800583a:	4602      	mov	r2, r0
 800583c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800583e:	1ad3      	subs	r3, r2, r3
 8005840:	2b02      	cmp	r3, #2
 8005842:	d902      	bls.n	800584a <HAL_RCC_OscConfig+0x812>
        {
          return HAL_TIMEOUT;
 8005844:	2303      	movs	r3, #3
 8005846:	f000 bcef 	b.w	8006228 <HAL_RCC_OscConfig+0x11f0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800584a:	4b90      	ldr	r3, [pc, #576]	; (8005a8c <HAL_RCC_OscConfig+0xa54>)
 800584c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005850:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005854:	2b00      	cmp	r3, #0
 8005856:	d0ee      	beq.n	8005836 <HAL_RCC_OscConfig+0x7fe>
 8005858:	e01c      	b.n	8005894 <HAL_RCC_OscConfig+0x85c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 800585a:	4b8c      	ldr	r3, [pc, #560]	; (8005a8c <HAL_RCC_OscConfig+0xa54>)
 800585c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005860:	4a8a      	ldr	r2, [pc, #552]	; (8005a8c <HAL_RCC_OscConfig+0xa54>)
 8005862:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8005866:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 800586a:	f7fd fa2d 	bl	8002cc8 <HAL_GetTick>
 800586e:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8005870:	e009      	b.n	8005886 <HAL_RCC_OscConfig+0x84e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005872:	f7fd fa29 	bl	8002cc8 <HAL_GetTick>
 8005876:	4602      	mov	r2, r0
 8005878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800587a:	1ad3      	subs	r3, r2, r3
 800587c:	2b02      	cmp	r3, #2
 800587e:	d902      	bls.n	8005886 <HAL_RCC_OscConfig+0x84e>
        {
          return HAL_TIMEOUT;
 8005880:	2303      	movs	r3, #3
 8005882:	f000 bcd1 	b.w	8006228 <HAL_RCC_OscConfig+0x11f0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8005886:	4b81      	ldr	r3, [pc, #516]	; (8005a8c <HAL_RCC_OscConfig+0xa54>)
 8005888:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800588c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005890:	2b00      	cmp	r3, #0
 8005892:	d1ee      	bne.n	8005872 <HAL_RCC_OscConfig+0x83a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005894:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8005898:	2b01      	cmp	r3, #1
 800589a:	d107      	bne.n	80058ac <HAL_RCC_OscConfig+0x874>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800589c:	4b7b      	ldr	r3, [pc, #492]	; (8005a8c <HAL_RCC_OscConfig+0xa54>)
 800589e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80058a2:	4a7a      	ldr	r2, [pc, #488]	; (8005a8c <HAL_RCC_OscConfig+0xa54>)
 80058a4:	f023 0304 	bic.w	r3, r3, #4
 80058a8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f003 0304 	and.w	r3, r3, #4
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	f000 812f 	beq.w	8005b18 <HAL_RCC_OscConfig+0xae0>
  {
    FlagStatus pwrclkchanged = RESET;
 80058ba:	2300      	movs	r3, #0
 80058bc:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	689b      	ldr	r3, [r3, #8]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d014      	beq.n	80058f2 <HAL_RCC_OscConfig+0x8ba>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	689b      	ldr	r3, [r3, #8]
 80058cc:	2b81      	cmp	r3, #129	; 0x81
 80058ce:	d010      	beq.n	80058f2 <HAL_RCC_OscConfig+0x8ba>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	689b      	ldr	r3, [r3, #8]
 80058d4:	2b01      	cmp	r3, #1
 80058d6:	d00c      	beq.n	80058f2 <HAL_RCC_OscConfig+0x8ba>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	689b      	ldr	r3, [r3, #8]
 80058dc:	2b05      	cmp	r3, #5
 80058de:	d008      	beq.n	80058f2 <HAL_RCC_OscConfig+0x8ba>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	689b      	ldr	r3, [r3, #8]
 80058e4:	2b85      	cmp	r3, #133	; 0x85
 80058e6:	d004      	beq.n	80058f2 <HAL_RCC_OscConfig+0x8ba>
 80058e8:	f44f 7161 	mov.w	r1, #900	; 0x384
 80058ec:	4868      	ldr	r0, [pc, #416]	; (8005a90 <HAL_RCC_OscConfig+0xa58>)
 80058ee:	f00f fcdc 	bl	80152aa <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80058f2:	4b66      	ldr	r3, [pc, #408]	; (8005a8c <HAL_RCC_OscConfig+0xa54>)
 80058f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80058f8:	f003 0304 	and.w	r3, r3, #4
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d111      	bne.n	8005924 <HAL_RCC_OscConfig+0x8ec>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005900:	4b62      	ldr	r3, [pc, #392]	; (8005a8c <HAL_RCC_OscConfig+0xa54>)
 8005902:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005906:	4a61      	ldr	r2, [pc, #388]	; (8005a8c <HAL_RCC_OscConfig+0xa54>)
 8005908:	f043 0304 	orr.w	r3, r3, #4
 800590c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8005910:	4b5e      	ldr	r3, [pc, #376]	; (8005a8c <HAL_RCC_OscConfig+0xa54>)
 8005912:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005916:	f003 0304 	and.w	r3, r3, #4
 800591a:	613b      	str	r3, [r7, #16]
 800591c:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 800591e:	2301      	movs	r3, #1
 8005920:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005924:	4b5b      	ldr	r3, [pc, #364]	; (8005a94 <HAL_RCC_OscConfig+0xa5c>)
 8005926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005928:	f003 0301 	and.w	r3, r3, #1
 800592c:	2b00      	cmp	r3, #0
 800592e:	d119      	bne.n	8005964 <HAL_RCC_OscConfig+0x92c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8005930:	4b58      	ldr	r3, [pc, #352]	; (8005a94 <HAL_RCC_OscConfig+0xa5c>)
 8005932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005934:	4a57      	ldr	r2, [pc, #348]	; (8005a94 <HAL_RCC_OscConfig+0xa5c>)
 8005936:	f043 0301 	orr.w	r3, r3, #1
 800593a:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800593c:	f7fd f9c4 	bl	8002cc8 <HAL_GetTick>
 8005940:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005942:	e009      	b.n	8005958 <HAL_RCC_OscConfig+0x920>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005944:	f7fd f9c0 	bl	8002cc8 <HAL_GetTick>
 8005948:	4602      	mov	r2, r0
 800594a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800594c:	1ad3      	subs	r3, r2, r3
 800594e:	2b02      	cmp	r3, #2
 8005950:	d902      	bls.n	8005958 <HAL_RCC_OscConfig+0x920>
        {
          return HAL_TIMEOUT;
 8005952:	2303      	movs	r3, #3
 8005954:	f000 bc68 	b.w	8006228 <HAL_RCC_OscConfig+0x11f0>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005958:	4b4e      	ldr	r3, [pc, #312]	; (8005a94 <HAL_RCC_OscConfig+0xa5c>)
 800595a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800595c:	f003 0301 	and.w	r3, r3, #1
 8005960:	2b00      	cmp	r3, #0
 8005962:	d0ef      	beq.n	8005944 <HAL_RCC_OscConfig+0x90c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	689b      	ldr	r3, [r3, #8]
 8005968:	f003 0301 	and.w	r3, r3, #1
 800596c:	2b00      	cmp	r3, #0
 800596e:	d01f      	beq.n	80059b0 <HAL_RCC_OscConfig+0x978>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	689b      	ldr	r3, [r3, #8]
 8005974:	f003 0304 	and.w	r3, r3, #4
 8005978:	2b00      	cmp	r3, #0
 800597a:	d010      	beq.n	800599e <HAL_RCC_OscConfig+0x966>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800597c:	4b43      	ldr	r3, [pc, #268]	; (8005a8c <HAL_RCC_OscConfig+0xa54>)
 800597e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005982:	4a42      	ldr	r2, [pc, #264]	; (8005a8c <HAL_RCC_OscConfig+0xa54>)
 8005984:	f043 0304 	orr.w	r3, r3, #4
 8005988:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800598c:	4b3f      	ldr	r3, [pc, #252]	; (8005a8c <HAL_RCC_OscConfig+0xa54>)
 800598e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005992:	4a3e      	ldr	r2, [pc, #248]	; (8005a8c <HAL_RCC_OscConfig+0xa54>)
 8005994:	f043 0301 	orr.w	r3, r3, #1
 8005998:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800599c:	e018      	b.n	80059d0 <HAL_RCC_OscConfig+0x998>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800599e:	4b3b      	ldr	r3, [pc, #236]	; (8005a8c <HAL_RCC_OscConfig+0xa54>)
 80059a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80059a4:	4a39      	ldr	r2, [pc, #228]	; (8005a8c <HAL_RCC_OscConfig+0xa54>)
 80059a6:	f043 0301 	orr.w	r3, r3, #1
 80059aa:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80059ae:	e00f      	b.n	80059d0 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80059b0:	4b36      	ldr	r3, [pc, #216]	; (8005a8c <HAL_RCC_OscConfig+0xa54>)
 80059b2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80059b6:	4a35      	ldr	r2, [pc, #212]	; (8005a8c <HAL_RCC_OscConfig+0xa54>)
 80059b8:	f023 0301 	bic.w	r3, r3, #1
 80059bc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80059c0:	4b32      	ldr	r3, [pc, #200]	; (8005a8c <HAL_RCC_OscConfig+0xa54>)
 80059c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80059c6:	4a31      	ldr	r2, [pc, #196]	; (8005a8c <HAL_RCC_OscConfig+0xa54>)
 80059c8:	f023 0304 	bic.w	r3, r3, #4
 80059cc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	689b      	ldr	r3, [r3, #8]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d054      	beq.n	8005a82 <HAL_RCC_OscConfig+0xa4a>
    {
      tickstart = HAL_GetTick();
 80059d8:	f7fd f976 	bl	8002cc8 <HAL_GetTick>
 80059dc:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80059de:	e00b      	b.n	80059f8 <HAL_RCC_OscConfig+0x9c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059e0:	f7fd f972 	bl	8002cc8 <HAL_GetTick>
 80059e4:	4602      	mov	r2, r0
 80059e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059e8:	1ad3      	subs	r3, r2, r3
 80059ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d902      	bls.n	80059f8 <HAL_RCC_OscConfig+0x9c0>
        {
          return HAL_TIMEOUT;
 80059f2:	2303      	movs	r3, #3
 80059f4:	f000 bc18 	b.w	8006228 <HAL_RCC_OscConfig+0x11f0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80059f8:	4b24      	ldr	r3, [pc, #144]	; (8005a8c <HAL_RCC_OscConfig+0xa54>)
 80059fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80059fe:	f003 0302 	and.w	r3, r3, #2
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d0ec      	beq.n	80059e0 <HAL_RCC_OscConfig+0x9a8>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	689b      	ldr	r3, [r3, #8]
 8005a0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d01b      	beq.n	8005a4a <HAL_RCC_OscConfig+0xa12>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005a12:	4b1e      	ldr	r3, [pc, #120]	; (8005a8c <HAL_RCC_OscConfig+0xa54>)
 8005a14:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005a18:	4a1c      	ldr	r2, [pc, #112]	; (8005a8c <HAL_RCC_OscConfig+0xa54>)
 8005a1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a1e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8005a22:	e00a      	b.n	8005a3a <HAL_RCC_OscConfig+0xa02>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a24:	f7fd f950 	bl	8002cc8 <HAL_GetTick>
 8005a28:	4602      	mov	r2, r0
 8005a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a2c:	1ad3      	subs	r3, r2, r3
 8005a2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d901      	bls.n	8005a3a <HAL_RCC_OscConfig+0xa02>
          {
            return HAL_TIMEOUT;
 8005a36:	2303      	movs	r3, #3
 8005a38:	e3f6      	b.n	8006228 <HAL_RCC_OscConfig+0x11f0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8005a3a:	4b14      	ldr	r3, [pc, #80]	; (8005a8c <HAL_RCC_OscConfig+0xa54>)
 8005a3c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005a40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d0ed      	beq.n	8005a24 <HAL_RCC_OscConfig+0x9ec>
 8005a48:	e05a      	b.n	8005b00 <HAL_RCC_OscConfig+0xac8>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005a4a:	4b10      	ldr	r3, [pc, #64]	; (8005a8c <HAL_RCC_OscConfig+0xa54>)
 8005a4c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005a50:	4a0e      	ldr	r2, [pc, #56]	; (8005a8c <HAL_RCC_OscConfig+0xa54>)
 8005a52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a56:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005a5a:	e00a      	b.n	8005a72 <HAL_RCC_OscConfig+0xa3a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a5c:	f7fd f934 	bl	8002cc8 <HAL_GetTick>
 8005a60:	4602      	mov	r2, r0
 8005a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a64:	1ad3      	subs	r3, r2, r3
 8005a66:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d901      	bls.n	8005a72 <HAL_RCC_OscConfig+0xa3a>
          {
            return HAL_TIMEOUT;
 8005a6e:	2303      	movs	r3, #3
 8005a70:	e3da      	b.n	8006228 <HAL_RCC_OscConfig+0x11f0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005a72:	4b06      	ldr	r3, [pc, #24]	; (8005a8c <HAL_RCC_OscConfig+0xa54>)
 8005a74:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005a78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d1ed      	bne.n	8005a5c <HAL_RCC_OscConfig+0xa24>
 8005a80:	e03e      	b.n	8005b00 <HAL_RCC_OscConfig+0xac8>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8005a82:	f7fd f921 	bl	8002cc8 <HAL_GetTick>
 8005a86:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005a88:	e011      	b.n	8005aae <HAL_RCC_OscConfig+0xa76>
 8005a8a:	bf00      	nop
 8005a8c:	46020c00 	.word	0x46020c00
 8005a90:	08025c54 	.word	0x08025c54
 8005a94:	46020800 	.word	0x46020800
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a98:	f7fd f916 	bl	8002cc8 <HAL_GetTick>
 8005a9c:	4602      	mov	r2, r0
 8005a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aa0:	1ad3      	subs	r3, r2, r3
 8005aa2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d901      	bls.n	8005aae <HAL_RCC_OscConfig+0xa76>
        {
          return HAL_TIMEOUT;
 8005aaa:	2303      	movs	r3, #3
 8005aac:	e3bc      	b.n	8006228 <HAL_RCC_OscConfig+0x11f0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005aae:	4b62      	ldr	r3, [pc, #392]	; (8005c38 <HAL_RCC_OscConfig+0xc00>)
 8005ab0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005ab4:	f003 0302 	and.w	r3, r3, #2
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d1ed      	bne.n	8005a98 <HAL_RCC_OscConfig+0xa60>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8005abc:	4b5e      	ldr	r3, [pc, #376]	; (8005c38 <HAL_RCC_OscConfig+0xc00>)
 8005abe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005ac2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d01a      	beq.n	8005b00 <HAL_RCC_OscConfig+0xac8>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005aca:	4b5b      	ldr	r3, [pc, #364]	; (8005c38 <HAL_RCC_OscConfig+0xc00>)
 8005acc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005ad0:	4a59      	ldr	r2, [pc, #356]	; (8005c38 <HAL_RCC_OscConfig+0xc00>)
 8005ad2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ad6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005ada:	e00a      	b.n	8005af2 <HAL_RCC_OscConfig+0xaba>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005adc:	f7fd f8f4 	bl	8002cc8 <HAL_GetTick>
 8005ae0:	4602      	mov	r2, r0
 8005ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ae4:	1ad3      	subs	r3, r2, r3
 8005ae6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d901      	bls.n	8005af2 <HAL_RCC_OscConfig+0xaba>
          {
            return HAL_TIMEOUT;
 8005aee:	2303      	movs	r3, #3
 8005af0:	e39a      	b.n	8006228 <HAL_RCC_OscConfig+0x11f0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005af2:	4b51      	ldr	r3, [pc, #324]	; (8005c38 <HAL_RCC_OscConfig+0xc00>)
 8005af4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005af8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d1ed      	bne.n	8005adc <HAL_RCC_OscConfig+0xaa4>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005b00:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8005b04:	2b01      	cmp	r3, #1
 8005b06:	d107      	bne.n	8005b18 <HAL_RCC_OscConfig+0xae0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b08:	4b4b      	ldr	r3, [pc, #300]	; (8005c38 <HAL_RCC_OscConfig+0xc00>)
 8005b0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b0e:	4a4a      	ldr	r2, [pc, #296]	; (8005c38 <HAL_RCC_OscConfig+0xc00>)
 8005b10:	f023 0304 	bic.w	r3, r3, #4
 8005b14:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f003 0320 	and.w	r3, r3, #32
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d044      	beq.n	8005bae <HAL_RCC_OscConfig+0xb76>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d009      	beq.n	8005b40 <HAL_RCC_OscConfig+0xb08>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b34:	d004      	beq.n	8005b40 <HAL_RCC_OscConfig+0xb08>
 8005b36:	f240 4106 	movw	r1, #1030	; 0x406
 8005b3a:	4840      	ldr	r0, [pc, #256]	; (8005c3c <HAL_RCC_OscConfig+0xc04>)
 8005b3c:	f00f fbb5 	bl	80152aa <assert_failed>

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d019      	beq.n	8005b7c <HAL_RCC_OscConfig+0xb44>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8005b48:	4b3b      	ldr	r3, [pc, #236]	; (8005c38 <HAL_RCC_OscConfig+0xc00>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4a3a      	ldr	r2, [pc, #232]	; (8005c38 <HAL_RCC_OscConfig+0xc00>)
 8005b4e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005b52:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005b54:	f7fd f8b8 	bl	8002cc8 <HAL_GetTick>
 8005b58:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8005b5a:	e008      	b.n	8005b6e <HAL_RCC_OscConfig+0xb36>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005b5c:	f7fd f8b4 	bl	8002cc8 <HAL_GetTick>
 8005b60:	4602      	mov	r2, r0
 8005b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b64:	1ad3      	subs	r3, r2, r3
 8005b66:	2b02      	cmp	r3, #2
 8005b68:	d901      	bls.n	8005b6e <HAL_RCC_OscConfig+0xb36>
        {
          return HAL_TIMEOUT;
 8005b6a:	2303      	movs	r3, #3
 8005b6c:	e35c      	b.n	8006228 <HAL_RCC_OscConfig+0x11f0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8005b6e:	4b32      	ldr	r3, [pc, #200]	; (8005c38 <HAL_RCC_OscConfig+0xc00>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d0f0      	beq.n	8005b5c <HAL_RCC_OscConfig+0xb24>
 8005b7a:	e018      	b.n	8005bae <HAL_RCC_OscConfig+0xb76>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8005b7c:	4b2e      	ldr	r3, [pc, #184]	; (8005c38 <HAL_RCC_OscConfig+0xc00>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4a2d      	ldr	r2, [pc, #180]	; (8005c38 <HAL_RCC_OscConfig+0xc00>)
 8005b82:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005b86:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005b88:	f7fd f89e 	bl	8002cc8 <HAL_GetTick>
 8005b8c:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8005b8e:	e008      	b.n	8005ba2 <HAL_RCC_OscConfig+0xb6a>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005b90:	f7fd f89a 	bl	8002cc8 <HAL_GetTick>
 8005b94:	4602      	mov	r2, r0
 8005b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b98:	1ad3      	subs	r3, r2, r3
 8005b9a:	2b02      	cmp	r3, #2
 8005b9c:	d901      	bls.n	8005ba2 <HAL_RCC_OscConfig+0xb6a>
        {
          return HAL_TIMEOUT;
 8005b9e:	2303      	movs	r3, #3
 8005ba0:	e342      	b.n	8006228 <HAL_RCC_OscConfig+0x11f0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8005ba2:	4b25      	ldr	r3, [pc, #148]	; (8005c38 <HAL_RCC_OscConfig+0xc00>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d1f0      	bne.n	8005b90 <HAL_RCC_OscConfig+0xb58>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d048      	beq.n	8005c4c <HAL_RCC_OscConfig+0xc14>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d009      	beq.n	8005bd6 <HAL_RCC_OscConfig+0xb9e>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bc6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005bca:	d004      	beq.n	8005bd6 <HAL_RCC_OscConfig+0xb9e>
 8005bcc:	f240 412f 	movw	r1, #1071	; 0x42f
 8005bd0:	481a      	ldr	r0, [pc, #104]	; (8005c3c <HAL_RCC_OscConfig+0xc04>)
 8005bd2:	f00f fb6a 	bl	80152aa <assert_failed>

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d019      	beq.n	8005c12 <HAL_RCC_OscConfig+0xbda>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8005bde:	4b16      	ldr	r3, [pc, #88]	; (8005c38 <HAL_RCC_OscConfig+0xc00>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	4a15      	ldr	r2, [pc, #84]	; (8005c38 <HAL_RCC_OscConfig+0xc00>)
 8005be4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005be8:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005bea:	f7fd f86d 	bl	8002cc8 <HAL_GetTick>
 8005bee:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8005bf0:	e008      	b.n	8005c04 <HAL_RCC_OscConfig+0xbcc>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8005bf2:	f7fd f869 	bl	8002cc8 <HAL_GetTick>
 8005bf6:	4602      	mov	r2, r0
 8005bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bfa:	1ad3      	subs	r3, r2, r3
 8005bfc:	2b02      	cmp	r3, #2
 8005bfe:	d901      	bls.n	8005c04 <HAL_RCC_OscConfig+0xbcc>
        {
          return HAL_TIMEOUT;
 8005c00:	2303      	movs	r3, #3
 8005c02:	e311      	b.n	8006228 <HAL_RCC_OscConfig+0x11f0>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8005c04:	4b0c      	ldr	r3, [pc, #48]	; (8005c38 <HAL_RCC_OscConfig+0xc00>)
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d0f0      	beq.n	8005bf2 <HAL_RCC_OscConfig+0xbba>
 8005c10:	e01c      	b.n	8005c4c <HAL_RCC_OscConfig+0xc14>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8005c12:	4b09      	ldr	r3, [pc, #36]	; (8005c38 <HAL_RCC_OscConfig+0xc00>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	4a08      	ldr	r2, [pc, #32]	; (8005c38 <HAL_RCC_OscConfig+0xc00>)
 8005c18:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c1c:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005c1e:	f7fd f853 	bl	8002cc8 <HAL_GetTick>
 8005c22:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8005c24:	e00c      	b.n	8005c40 <HAL_RCC_OscConfig+0xc08>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8005c26:	f7fd f84f 	bl	8002cc8 <HAL_GetTick>
 8005c2a:	4602      	mov	r2, r0
 8005c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c2e:	1ad3      	subs	r3, r2, r3
 8005c30:	2b02      	cmp	r3, #2
 8005c32:	d905      	bls.n	8005c40 <HAL_RCC_OscConfig+0xc08>
        {
          return HAL_TIMEOUT;
 8005c34:	2303      	movs	r3, #3
 8005c36:	e2f7      	b.n	8006228 <HAL_RCC_OscConfig+0x11f0>
 8005c38:	46020c00 	.word	0x46020c00
 8005c3c:	08025c54 	.word	0x08025c54
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8005c40:	4b77      	ldr	r3, [pc, #476]	; (8005e20 <HAL_RCC_OscConfig+0xde8>)
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d1ec      	bne.n	8005c26 <HAL_RCC_OscConfig+0xbee>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	f000 80ed 	beq.w	8005e34 <HAL_RCC_OscConfig+0xdfc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d008      	beq.n	8005c74 <HAL_RCC_OscConfig+0xc3c>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c66:	2b10      	cmp	r3, #16
 8005c68:	d004      	beq.n	8005c74 <HAL_RCC_OscConfig+0xc3c>
 8005c6a:	f240 4157 	movw	r1, #1111	; 0x457
 8005c6e:	486d      	ldr	r0, [pc, #436]	; (8005e24 <HAL_RCC_OscConfig+0xdec>)
 8005c70:	f00f fb1b 	bl	80152aa <assert_failed>
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d04f      	beq.n	8005d1c <HAL_RCC_OscConfig+0xce4>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005c84:	d04a      	beq.n	8005d1c <HAL_RCC_OscConfig+0xce4>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c8a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005c8e:	d045      	beq.n	8005d1c <HAL_RCC_OscConfig+0xce4>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c94:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005c98:	d040      	beq.n	8005d1c <HAL_RCC_OscConfig+0xce4>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c9e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005ca2:	d03b      	beq.n	8005d1c <HAL_RCC_OscConfig+0xce4>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ca8:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8005cac:	d036      	beq.n	8005d1c <HAL_RCC_OscConfig+0xce4>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cb2:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8005cb6:	d031      	beq.n	8005d1c <HAL_RCC_OscConfig+0xce4>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cbc:	f1b3 6fe0 	cmp.w	r3, #117440512	; 0x7000000
 8005cc0:	d02c      	beq.n	8005d1c <HAL_RCC_OscConfig+0xce4>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cc6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005cca:	d027      	beq.n	8005d1c <HAL_RCC_OscConfig+0xce4>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cd0:	f1b3 6f10 	cmp.w	r3, #150994944	; 0x9000000
 8005cd4:	d022      	beq.n	8005d1c <HAL_RCC_OscConfig+0xce4>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cda:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 8005cde:	d01d      	beq.n	8005d1c <HAL_RCC_OscConfig+0xce4>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ce4:	f1b3 6f30 	cmp.w	r3, #184549376	; 0xb000000
 8005ce8:	d018      	beq.n	8005d1c <HAL_RCC_OscConfig+0xce4>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cee:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005cf2:	d013      	beq.n	8005d1c <HAL_RCC_OscConfig+0xce4>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cf8:	f1b3 6f50 	cmp.w	r3, #218103808	; 0xd000000
 8005cfc:	d00e      	beq.n	8005d1c <HAL_RCC_OscConfig+0xce4>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d02:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 8005d06:	d009      	beq.n	8005d1c <HAL_RCC_OscConfig+0xce4>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d0c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005d10:	d004      	beq.n	8005d1c <HAL_RCC_OscConfig+0xce4>
 8005d12:	f44f 618b 	mov.w	r1, #1112	; 0x458
 8005d16:	4843      	ldr	r0, [pc, #268]	; (8005e24 <HAL_RCC_OscConfig+0xdec>)
 8005d18:	f00f fac7 	bl	80152aa <assert_failed>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6a1b      	ldr	r3, [r3, #32]
 8005d20:	2bff      	cmp	r3, #255	; 0xff
 8005d22:	d904      	bls.n	8005d2e <HAL_RCC_OscConfig+0xcf6>
 8005d24:	f240 4159 	movw	r1, #1113	; 0x459
 8005d28:	483e      	ldr	r0, [pc, #248]	; (8005e24 <HAL_RCC_OscConfig+0xdec>)
 8005d2a:	f00f fabe 	bl	80152aa <assert_failed>

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d060      	beq.n	8005df8 <HAL_RCC_OscConfig+0xdc0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8005d36:	4b3a      	ldr	r3, [pc, #232]	; (8005e20 <HAL_RCC_OscConfig+0xde8>)
 8005d38:	689b      	ldr	r3, [r3, #8]
 8005d3a:	4a39      	ldr	r2, [pc, #228]	; (8005e20 <HAL_RCC_OscConfig+0xde8>)
 8005d3c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005d40:	6093      	str	r3, [r2, #8]
 8005d42:	4b37      	ldr	r3, [pc, #220]	; (8005e20 <HAL_RCC_OscConfig+0xde8>)
 8005d44:	689b      	ldr	r3, [r3, #8]
 8005d46:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d4e:	4934      	ldr	r1, [pc, #208]	; (8005e20 <HAL_RCC_OscConfig+0xde8>)
 8005d50:	4313      	orrs	r3, r2
 8005d52:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d58:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8005d5c:	d309      	bcc.n	8005d72 <HAL_RCC_OscConfig+0xd3a>
 8005d5e:	4b30      	ldr	r3, [pc, #192]	; (8005e20 <HAL_RCC_OscConfig+0xde8>)
 8005d60:	68db      	ldr	r3, [r3, #12]
 8005d62:	f023 021f 	bic.w	r2, r3, #31
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6a1b      	ldr	r3, [r3, #32]
 8005d6a:	492d      	ldr	r1, [pc, #180]	; (8005e20 <HAL_RCC_OscConfig+0xde8>)
 8005d6c:	4313      	orrs	r3, r2
 8005d6e:	60cb      	str	r3, [r1, #12]
 8005d70:	e028      	b.n	8005dc4 <HAL_RCC_OscConfig+0xd8c>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	da0a      	bge.n	8005d90 <HAL_RCC_OscConfig+0xd58>
 8005d7a:	4b29      	ldr	r3, [pc, #164]	; (8005e20 <HAL_RCC_OscConfig+0xde8>)
 8005d7c:	68db      	ldr	r3, [r3, #12]
 8005d7e:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6a1b      	ldr	r3, [r3, #32]
 8005d86:	015b      	lsls	r3, r3, #5
 8005d88:	4925      	ldr	r1, [pc, #148]	; (8005e20 <HAL_RCC_OscConfig+0xde8>)
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	60cb      	str	r3, [r1, #12]
 8005d8e:	e019      	b.n	8005dc4 <HAL_RCC_OscConfig+0xd8c>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d98:	d30a      	bcc.n	8005db0 <HAL_RCC_OscConfig+0xd78>
 8005d9a:	4b21      	ldr	r3, [pc, #132]	; (8005e20 <HAL_RCC_OscConfig+0xde8>)
 8005d9c:	68db      	ldr	r3, [r3, #12]
 8005d9e:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6a1b      	ldr	r3, [r3, #32]
 8005da6:	029b      	lsls	r3, r3, #10
 8005da8:	491d      	ldr	r1, [pc, #116]	; (8005e20 <HAL_RCC_OscConfig+0xde8>)
 8005daa:	4313      	orrs	r3, r2
 8005dac:	60cb      	str	r3, [r1, #12]
 8005dae:	e009      	b.n	8005dc4 <HAL_RCC_OscConfig+0xd8c>
 8005db0:	4b1b      	ldr	r3, [pc, #108]	; (8005e20 <HAL_RCC_OscConfig+0xde8>)
 8005db2:	68db      	ldr	r3, [r3, #12]
 8005db4:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6a1b      	ldr	r3, [r3, #32]
 8005dbc:	03db      	lsls	r3, r3, #15
 8005dbe:	4918      	ldr	r1, [pc, #96]	; (8005e20 <HAL_RCC_OscConfig+0xde8>)
 8005dc0:	4313      	orrs	r3, r2
 8005dc2:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8005dc4:	4b16      	ldr	r3, [pc, #88]	; (8005e20 <HAL_RCC_OscConfig+0xde8>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4a15      	ldr	r2, [pc, #84]	; (8005e20 <HAL_RCC_OscConfig+0xde8>)
 8005dca:	f043 0310 	orr.w	r3, r3, #16
 8005dce:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005dd0:	f7fc ff7a 	bl	8002cc8 <HAL_GetTick>
 8005dd4:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8005dd6:	e008      	b.n	8005dea <HAL_RCC_OscConfig+0xdb2>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8005dd8:	f7fc ff76 	bl	8002cc8 <HAL_GetTick>
 8005ddc:	4602      	mov	r2, r0
 8005dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005de0:	1ad3      	subs	r3, r2, r3
 8005de2:	2b02      	cmp	r3, #2
 8005de4:	d901      	bls.n	8005dea <HAL_RCC_OscConfig+0xdb2>
        {
          return HAL_TIMEOUT;
 8005de6:	2303      	movs	r3, #3
 8005de8:	e21e      	b.n	8006228 <HAL_RCC_OscConfig+0x11f0>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8005dea:	4b0d      	ldr	r3, [pc, #52]	; (8005e20 <HAL_RCC_OscConfig+0xde8>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f003 0320 	and.w	r3, r3, #32
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d0f0      	beq.n	8005dd8 <HAL_RCC_OscConfig+0xda0>
 8005df6:	e01d      	b.n	8005e34 <HAL_RCC_OscConfig+0xdfc>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8005df8:	4b09      	ldr	r3, [pc, #36]	; (8005e20 <HAL_RCC_OscConfig+0xde8>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4a08      	ldr	r2, [pc, #32]	; (8005e20 <HAL_RCC_OscConfig+0xde8>)
 8005dfe:	f023 0310 	bic.w	r3, r3, #16
 8005e02:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005e04:	f7fc ff60 	bl	8002cc8 <HAL_GetTick>
 8005e08:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8005e0a:	e00d      	b.n	8005e28 <HAL_RCC_OscConfig+0xdf0>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8005e0c:	f7fc ff5c 	bl	8002cc8 <HAL_GetTick>
 8005e10:	4602      	mov	r2, r0
 8005e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e14:	1ad3      	subs	r3, r2, r3
 8005e16:	2b02      	cmp	r3, #2
 8005e18:	d906      	bls.n	8005e28 <HAL_RCC_OscConfig+0xdf0>
        {
          return HAL_TIMEOUT;
 8005e1a:	2303      	movs	r3, #3
 8005e1c:	e204      	b.n	8006228 <HAL_RCC_OscConfig+0x11f0>
 8005e1e:	bf00      	nop
 8005e20:	46020c00 	.word	0x46020c00
 8005e24:	08025c54 	.word	0x08025c54
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8005e28:	4b60      	ldr	r3, [pc, #384]	; (8005fac <HAL_RCC_OscConfig+0xf74>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f003 0320 	and.w	r3, r3, #32
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d1eb      	bne.n	8005e0c <HAL_RCC_OscConfig+0xdd4>
      }
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d00c      	beq.n	8005e56 <HAL_RCC_OscConfig+0xe1e>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e40:	2b01      	cmp	r3, #1
 8005e42:	d008      	beq.n	8005e56 <HAL_RCC_OscConfig+0xe1e>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e48:	2b02      	cmp	r3, #2
 8005e4a:	d004      	beq.n	8005e56 <HAL_RCC_OscConfig+0xe1e>
 8005e4c:	f240 4186 	movw	r1, #1158	; 0x486
 8005e50:	4857      	ldr	r0, [pc, #348]	; (8005fb0 <HAL_RCC_OscConfig+0xf78>)
 8005e52:	f00f fa2a 	bl	80152aa <assert_failed>

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	f000 81e3 	beq.w	8006226 <HAL_RCC_OscConfig+0x11ee>
  {
    FlagStatus  pwrclkchanged = RESET;
 8005e60:	2300      	movs	r3, #0
 8005e62:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005e66:	4b51      	ldr	r3, [pc, #324]	; (8005fac <HAL_RCC_OscConfig+0xf74>)
 8005e68:	69db      	ldr	r3, [r3, #28]
 8005e6a:	f003 030c 	and.w	r3, r3, #12
 8005e6e:	2b0c      	cmp	r3, #12
 8005e70:	f000 8192 	beq.w	8006198 <HAL_RCC_OscConfig+0x1160>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e78:	2b02      	cmp	r3, #2
 8005e7a:	f040 816b 	bne.w	8006154 <HAL_RCC_OscConfig+0x111c>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLMBOOST_VALUE(pRCC_OscInitStruct->PLL.PLLMBOOST));
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d02c      	beq.n	8005ee0 <HAL_RCC_OscConfig+0xea8>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e8e:	d027      	beq.n	8005ee0 <HAL_RCC_OscConfig+0xea8>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e98:	d022      	beq.n	8005ee0 <HAL_RCC_OscConfig+0xea8>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e9e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005ea2:	d01d      	beq.n	8005ee0 <HAL_RCC_OscConfig+0xea8>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ea8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005eac:	d018      	beq.n	8005ee0 <HAL_RCC_OscConfig+0xea8>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005eb2:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8005eb6:	d013      	beq.n	8005ee0 <HAL_RCC_OscConfig+0xea8>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ebc:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005ec0:	d00e      	beq.n	8005ee0 <HAL_RCC_OscConfig+0xea8>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ec6:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8005eca:	d009      	beq.n	8005ee0 <HAL_RCC_OscConfig+0xea8>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ed0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ed4:	d004      	beq.n	8005ee0 <HAL_RCC_OscConfig+0xea8>
 8005ed6:	f240 4192 	movw	r1, #1170	; 0x492
 8005eda:	4835      	ldr	r0, [pc, #212]	; (8005fb0 <HAL_RCC_OscConfig+0xf78>)
 8005edc:	f00f f9e5 	bl	80152aa <assert_failed>
        assert_param(IS_RCC_PLLSOURCE(pRCC_OscInitStruct->PLL.PLLSource));
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ee4:	2b01      	cmp	r3, #1
 8005ee6:	d00c      	beq.n	8005f02 <HAL_RCC_OscConfig+0xeca>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005eec:	2b02      	cmp	r3, #2
 8005eee:	d008      	beq.n	8005f02 <HAL_RCC_OscConfig+0xeca>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ef4:	2b03      	cmp	r3, #3
 8005ef6:	d004      	beq.n	8005f02 <HAL_RCC_OscConfig+0xeca>
 8005ef8:	f240 4193 	movw	r1, #1171	; 0x493
 8005efc:	482c      	ldr	r0, [pc, #176]	; (8005fb0 <HAL_RCC_OscConfig+0xf78>)
 8005efe:	f00f f9d4 	bl	80152aa <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(pRCC_OscInitStruct->PLL.PLLM));
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d003      	beq.n	8005f12 <HAL_RCC_OscConfig+0xeda>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f0e:	2b10      	cmp	r3, #16
 8005f10:	d904      	bls.n	8005f1c <HAL_RCC_OscConfig+0xee4>
 8005f12:	f240 4194 	movw	r1, #1172	; 0x494
 8005f16:	4826      	ldr	r0, [pc, #152]	; (8005fb0 <HAL_RCC_OscConfig+0xf78>)
 8005f18:	f00f f9c7 	bl	80152aa <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(pRCC_OscInitStruct->PLL.PLLN));
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f20:	2b03      	cmp	r3, #3
 8005f22:	d904      	bls.n	8005f2e <HAL_RCC_OscConfig+0xef6>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f2c:	d904      	bls.n	8005f38 <HAL_RCC_OscConfig+0xf00>
 8005f2e:	f240 4195 	movw	r1, #1173	; 0x495
 8005f32:	481f      	ldr	r0, [pc, #124]	; (8005fb0 <HAL_RCC_OscConfig+0xf78>)
 8005f34:	f00f f9b9 	bl	80152aa <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d003      	beq.n	8005f48 <HAL_RCC_OscConfig+0xf10>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f44:	2b80      	cmp	r3, #128	; 0x80
 8005f46:	d904      	bls.n	8005f52 <HAL_RCC_OscConfig+0xf1a>
 8005f48:	f240 4196 	movw	r1, #1174	; 0x496
 8005f4c:	4818      	ldr	r0, [pc, #96]	; (8005fb0 <HAL_RCC_OscConfig+0xf78>)
 8005f4e:	f00f f9ac 	bl	80152aa <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d003      	beq.n	8005f62 <HAL_RCC_OscConfig+0xf2a>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f5e:	2b80      	cmp	r3, #128	; 0x80
 8005f60:	d904      	bls.n	8005f6c <HAL_RCC_OscConfig+0xf34>
 8005f62:	f240 4197 	movw	r1, #1175	; 0x497
 8005f66:	4812      	ldr	r0, [pc, #72]	; (8005fb0 <HAL_RCC_OscConfig+0xf78>)
 8005f68:	f00f f99f 	bl	80152aa <assert_failed>
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d003      	beq.n	8005f7c <HAL_RCC_OscConfig+0xf44>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f78:	2b80      	cmp	r3, #128	; 0x80
 8005f7a:	d904      	bls.n	8005f86 <HAL_RCC_OscConfig+0xf4e>
 8005f7c:	f44f 6193 	mov.w	r1, #1176	; 0x498
 8005f80:	480b      	ldr	r0, [pc, #44]	; (8005fb0 <HAL_RCC_OscConfig+0xf78>)
 8005f82:	f00f f992 	bl	80152aa <assert_failed>

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8005f86:	4b09      	ldr	r3, [pc, #36]	; (8005fac <HAL_RCC_OscConfig+0xf74>)
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	4a08      	ldr	r2, [pc, #32]	; (8005fac <HAL_RCC_OscConfig+0xf74>)
 8005f8c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005f90:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005f92:	f7fc fe99 	bl	8002cc8 <HAL_GetTick>
 8005f96:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005f98:	e00c      	b.n	8005fb4 <HAL_RCC_OscConfig+0xf7c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f9a:	f7fc fe95 	bl	8002cc8 <HAL_GetTick>
 8005f9e:	4602      	mov	r2, r0
 8005fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fa2:	1ad3      	subs	r3, r2, r3
 8005fa4:	2b02      	cmp	r3, #2
 8005fa6:	d905      	bls.n	8005fb4 <HAL_RCC_OscConfig+0xf7c>
          {
            return HAL_TIMEOUT;
 8005fa8:	2303      	movs	r3, #3
 8005faa:	e13d      	b.n	8006228 <HAL_RCC_OscConfig+0x11f0>
 8005fac:	46020c00 	.word	0x46020c00
 8005fb0:	08025c54 	.word	0x08025c54
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005fb4:	4b9e      	ldr	r3, [pc, #632]	; (8006230 <HAL_RCC_OscConfig+0x11f8>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d1ec      	bne.n	8005f9a <HAL_RCC_OscConfig+0xf62>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005fc0:	4b9b      	ldr	r3, [pc, #620]	; (8006230 <HAL_RCC_OscConfig+0x11f8>)
 8005fc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005fc6:	f003 0304 	and.w	r3, r3, #4
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d111      	bne.n	8005ff2 <HAL_RCC_OscConfig+0xfba>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8005fce:	4b98      	ldr	r3, [pc, #608]	; (8006230 <HAL_RCC_OscConfig+0x11f8>)
 8005fd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005fd4:	4a96      	ldr	r2, [pc, #600]	; (8006230 <HAL_RCC_OscConfig+0x11f8>)
 8005fd6:	f043 0304 	orr.w	r3, r3, #4
 8005fda:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8005fde:	4b94      	ldr	r3, [pc, #592]	; (8006230 <HAL_RCC_OscConfig+0x11f8>)
 8005fe0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005fe4:	f003 0304 	and.w	r3, r3, #4
 8005fe8:	60fb      	str	r3, [r7, #12]
 8005fea:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8005fec:	2301      	movs	r3, #1
 8005fee:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8005ff2:	4b90      	ldr	r3, [pc, #576]	; (8006234 <HAL_RCC_OscConfig+0x11fc>)
 8005ff4:	68db      	ldr	r3, [r3, #12]
 8005ff6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005ffa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005ffe:	d102      	bne.n	8006006 <HAL_RCC_OscConfig+0xfce>
        {
          pwrboosten = SET;
 8006000:	2301      	movs	r3, #1
 8006002:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8006006:	4b8b      	ldr	r3, [pc, #556]	; (8006234 <HAL_RCC_OscConfig+0x11fc>)
 8006008:	68db      	ldr	r3, [r3, #12]
 800600a:	4a8a      	ldr	r2, [pc, #552]	; (8006234 <HAL_RCC_OscConfig+0x11fc>)
 800600c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006010:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8006012:	4b87      	ldr	r3, [pc, #540]	; (8006230 <HAL_RCC_OscConfig+0x11f8>)
 8006014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006016:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800601a:	f023 0303 	bic.w	r3, r3, #3
 800601e:	687a      	ldr	r2, [r7, #4]
 8006020:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8006022:	687a      	ldr	r2, [r7, #4]
 8006024:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006026:	3a01      	subs	r2, #1
 8006028:	0212      	lsls	r2, r2, #8
 800602a:	4311      	orrs	r1, r2
 800602c:	687a      	ldr	r2, [r7, #4]
 800602e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8006030:	430a      	orrs	r2, r1
 8006032:	497f      	ldr	r1, [pc, #508]	; (8006230 <HAL_RCC_OscConfig+0x11f8>)
 8006034:	4313      	orrs	r3, r2
 8006036:	628b      	str	r3, [r1, #40]	; 0x28
 8006038:	4b7d      	ldr	r3, [pc, #500]	; (8006230 <HAL_RCC_OscConfig+0x11f8>)
 800603a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800603c:	4b7e      	ldr	r3, [pc, #504]	; (8006238 <HAL_RCC_OscConfig+0x1200>)
 800603e:	4013      	ands	r3, r2
 8006040:	687a      	ldr	r2, [r7, #4]
 8006042:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006044:	3a01      	subs	r2, #1
 8006046:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800604a:	687a      	ldr	r2, [r7, #4]
 800604c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800604e:	3a01      	subs	r2, #1
 8006050:	0252      	lsls	r2, r2, #9
 8006052:	b292      	uxth	r2, r2
 8006054:	4311      	orrs	r1, r2
 8006056:	687a      	ldr	r2, [r7, #4]
 8006058:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800605a:	3a01      	subs	r2, #1
 800605c:	0412      	lsls	r2, r2, #16
 800605e:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8006062:	4311      	orrs	r1, r2
 8006064:	687a      	ldr	r2, [r7, #4]
 8006066:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8006068:	3a01      	subs	r2, #1
 800606a:	0612      	lsls	r2, r2, #24
 800606c:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8006070:	430a      	orrs	r2, r1
 8006072:	496f      	ldr	r1, [pc, #444]	; (8006230 <HAL_RCC_OscConfig+0x11f8>)
 8006074:	4313      	orrs	r3, r2
 8006076:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLN,
                             pRCC_OscInitStruct->PLL.PLLP,
                             pRCC_OscInitStruct->PLL.PLLQ,
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLLFRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800607c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006080:	d304      	bcc.n	800608c <HAL_RCC_OscConfig+0x1054>
 8006082:	f240 41bf 	movw	r1, #1215	; 0x4bf
 8006086:	486d      	ldr	r0, [pc, #436]	; (800623c <HAL_RCC_OscConfig+0x1204>)
 8006088:	f00f f90f 	bl	80152aa <assert_failed>

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLLFRACN_DISABLE();
 800608c:	4b68      	ldr	r3, [pc, #416]	; (8006230 <HAL_RCC_OscConfig+0x11f8>)
 800608e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006090:	4a67      	ldr	r2, [pc, #412]	; (8006230 <HAL_RCC_OscConfig+0x11f8>)
 8006092:	f023 0310 	bic.w	r3, r3, #16
 8006096:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8006098:	4b65      	ldr	r3, [pc, #404]	; (8006230 <HAL_RCC_OscConfig+0x11f8>)
 800609a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800609c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80060a0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80060a4:	687a      	ldr	r2, [r7, #4]
 80060a6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80060a8:	00d2      	lsls	r2, r2, #3
 80060aa:	4961      	ldr	r1, [pc, #388]	; (8006230 <HAL_RCC_OscConfig+0x11f8>)
 80060ac:	4313      	orrs	r3, r2
 80060ae:	638b      	str	r3, [r1, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLLFRACN_ENABLE();
 80060b0:	4b5f      	ldr	r3, [pc, #380]	; (8006230 <HAL_RCC_OscConfig+0x11f8>)
 80060b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060b4:	4a5e      	ldr	r2, [pc, #376]	; (8006230 <HAL_RCC_OscConfig+0x11f8>)
 80060b6:	f043 0310 	orr.w	r3, r3, #16
 80060ba:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d008      	beq.n	80060d6 <HAL_RCC_OscConfig+0x109e>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060c8:	2b0c      	cmp	r3, #12
 80060ca:	d004      	beq.n	80060d6 <HAL_RCC_OscConfig+0x109e>
 80060cc:	f240 41ca 	movw	r1, #1226	; 0x4ca
 80060d0:	485a      	ldr	r0, [pc, #360]	; (800623c <HAL_RCC_OscConfig+0x1204>)
 80060d2:	f00f f8ea 	bl	80152aa <assert_failed>

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 80060d6:	4b56      	ldr	r3, [pc, #344]	; (8006230 <HAL_RCC_OscConfig+0x11f8>)
 80060d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060da:	f023 020c 	bic.w	r2, r3, #12
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060e2:	4953      	ldr	r1, [pc, #332]	; (8006230 <HAL_RCC_OscConfig+0x11f8>)
 80060e4:	4313      	orrs	r3, r2
 80060e6:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 80060e8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80060ec:	2b01      	cmp	r3, #1
 80060ee:	d105      	bne.n	80060fc <HAL_RCC_OscConfig+0x10c4>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80060f0:	4b50      	ldr	r3, [pc, #320]	; (8006234 <HAL_RCC_OscConfig+0x11fc>)
 80060f2:	68db      	ldr	r3, [r3, #12]
 80060f4:	4a4f      	ldr	r2, [pc, #316]	; (8006234 <HAL_RCC_OscConfig+0x11fc>)
 80060f6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80060fa:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 80060fc:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8006100:	2b01      	cmp	r3, #1
 8006102:	d107      	bne.n	8006114 <HAL_RCC_OscConfig+0x10dc>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8006104:	4b4a      	ldr	r3, [pc, #296]	; (8006230 <HAL_RCC_OscConfig+0x11f8>)
 8006106:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800610a:	4a49      	ldr	r2, [pc, #292]	; (8006230 <HAL_RCC_OscConfig+0x11f8>)
 800610c:	f023 0304 	bic.w	r3, r3, #4
 8006110:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006114:	4b46      	ldr	r3, [pc, #280]	; (8006230 <HAL_RCC_OscConfig+0x11f8>)
 8006116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006118:	4a45      	ldr	r2, [pc, #276]	; (8006230 <HAL_RCC_OscConfig+0x11f8>)
 800611a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800611e:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8006120:	4b43      	ldr	r3, [pc, #268]	; (8006230 <HAL_RCC_OscConfig+0x11f8>)
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4a42      	ldr	r2, [pc, #264]	; (8006230 <HAL_RCC_OscConfig+0x11f8>)
 8006126:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800612a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800612c:	f7fc fdcc 	bl	8002cc8 <HAL_GetTick>
 8006130:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8006132:	e008      	b.n	8006146 <HAL_RCC_OscConfig+0x110e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006134:	f7fc fdc8 	bl	8002cc8 <HAL_GetTick>
 8006138:	4602      	mov	r2, r0
 800613a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800613c:	1ad3      	subs	r3, r2, r3
 800613e:	2b02      	cmp	r3, #2
 8006140:	d901      	bls.n	8006146 <HAL_RCC_OscConfig+0x110e>
          {
            return HAL_TIMEOUT;
 8006142:	2303      	movs	r3, #3
 8006144:	e070      	b.n	8006228 <HAL_RCC_OscConfig+0x11f0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8006146:	4b3a      	ldr	r3, [pc, #232]	; (8006230 <HAL_RCC_OscConfig+0x11f8>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800614e:	2b00      	cmp	r3, #0
 8006150:	d0f0      	beq.n	8006134 <HAL_RCC_OscConfig+0x10fc>
 8006152:	e068      	b.n	8006226 <HAL_RCC_OscConfig+0x11ee>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8006154:	4b36      	ldr	r3, [pc, #216]	; (8006230 <HAL_RCC_OscConfig+0x11f8>)
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4a35      	ldr	r2, [pc, #212]	; (8006230 <HAL_RCC_OscConfig+0x11f8>)
 800615a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800615e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8006160:	f7fc fdb2 	bl	8002cc8 <HAL_GetTick>
 8006164:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8006166:	e008      	b.n	800617a <HAL_RCC_OscConfig+0x1142>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006168:	f7fc fdae 	bl	8002cc8 <HAL_GetTick>
 800616c:	4602      	mov	r2, r0
 800616e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006170:	1ad3      	subs	r3, r2, r3
 8006172:	2b02      	cmp	r3, #2
 8006174:	d901      	bls.n	800617a <HAL_RCC_OscConfig+0x1142>
          {
            return HAL_TIMEOUT;
 8006176:	2303      	movs	r3, #3
 8006178:	e056      	b.n	8006228 <HAL_RCC_OscConfig+0x11f0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800617a:	4b2d      	ldr	r3, [pc, #180]	; (8006230 <HAL_RCC_OscConfig+0x11f8>)
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006182:	2b00      	cmp	r3, #0
 8006184:	d1f0      	bne.n	8006168 <HAL_RCC_OscConfig+0x1130>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8006186:	4b2a      	ldr	r3, [pc, #168]	; (8006230 <HAL_RCC_OscConfig+0x11f8>)
 8006188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800618a:	4a29      	ldr	r2, [pc, #164]	; (8006230 <HAL_RCC_OscConfig+0x11f8>)
 800618c:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8006190:	f023 0303 	bic.w	r3, r3, #3
 8006194:	6293      	str	r3, [r2, #40]	; 0x28
 8006196:	e046      	b.n	8006226 <HAL_RCC_OscConfig+0x11ee>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8006198:	4b25      	ldr	r3, [pc, #148]	; (8006230 <HAL_RCC_OscConfig+0x11f8>)
 800619a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800619c:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800619e:	4b24      	ldr	r3, [pc, #144]	; (8006230 <HAL_RCC_OscConfig+0x11f8>)
 80061a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061a2:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061a8:	2b01      	cmp	r3, #1
 80061aa:	d03a      	beq.n	8006222 <HAL_RCC_OscConfig+0x11ea>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 80061ac:	69fb      	ldr	r3, [r7, #28]
 80061ae:	f003 0203 	and.w	r2, r3, #3
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80061b6:	429a      	cmp	r2, r3
 80061b8:	d133      	bne.n	8006222 <HAL_RCC_OscConfig+0x11ea>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 80061ba:	69fb      	ldr	r3, [r7, #28]
 80061bc:	0a1b      	lsrs	r3, r3, #8
 80061be:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061c6:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 80061c8:	429a      	cmp	r2, r3
 80061ca:	d12a      	bne.n	8006222 <HAL_RCC_OscConfig+0x11ea>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) >> \
 80061cc:	69fb      	ldr	r3, [r7, #28]
 80061ce:	0b1b      	lsrs	r3, r3, #12
 80061d0:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1MBOOST_Pos) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80061d8:	429a      	cmp	r2, r3
 80061da:	d122      	bne.n	8006222 <HAL_RCC_OscConfig+0x11ea>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80061dc:	69bb      	ldr	r3, [r7, #24]
 80061de:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061e6:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1MBOOST_Pos) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80061e8:	429a      	cmp	r2, r3
 80061ea:	d11a      	bne.n	8006222 <HAL_RCC_OscConfig+0x11ea>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 80061ec:	69bb      	ldr	r3, [r7, #24]
 80061ee:	0a5b      	lsrs	r3, r3, #9
 80061f0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061f8:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80061fa:	429a      	cmp	r2, r3
 80061fc:	d111      	bne.n	8006222 <HAL_RCC_OscConfig+0x11ea>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 80061fe:	69bb      	ldr	r3, [r7, #24]
 8006200:	0c1b      	lsrs	r3, r3, #16
 8006202:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800620a:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800620c:	429a      	cmp	r2, r3
 800620e:	d108      	bne.n	8006222 <HAL_RCC_OscConfig+0x11ea>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8006210:	69bb      	ldr	r3, [r7, #24]
 8006212:	0e1b      	lsrs	r3, r3, #24
 8006214:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800621c:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800621e:	429a      	cmp	r2, r3
 8006220:	d001      	beq.n	8006226 <HAL_RCC_OscConfig+0x11ee>
      {
        return HAL_ERROR;
 8006222:	2301      	movs	r3, #1
 8006224:	e000      	b.n	8006228 <HAL_RCC_OscConfig+0x11f0>
      }
    }
  }
  return HAL_OK;
 8006226:	2300      	movs	r3, #0
}
 8006228:	4618      	mov	r0, r3
 800622a:	3738      	adds	r7, #56	; 0x38
 800622c:	46bd      	mov	sp, r7
 800622e:	bd80      	pop	{r7, pc}
 8006230:	46020c00 	.word	0x46020c00
 8006234:	46020800 	.word	0x46020800
 8006238:	80800000 	.word	0x80800000
 800623c:	08025c54 	.word	0x08025c54

08006240 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b086      	sub	sp, #24
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
 8006248:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d101      	bne.n	8006254 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006250:	2301      	movs	r3, #1
 8006252:	e326      	b.n	80068a2 <HAL_RCC_ClockConfig+0x662>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(pRCC_ClkInitStruct->ClockType));
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d003      	beq.n	8006264 <HAL_RCC_ClockConfig+0x24>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	2b1f      	cmp	r3, #31
 8006262:	d904      	bls.n	800626e <HAL_RCC_ClockConfig+0x2e>
 8006264:	f240 514a 	movw	r1, #1354	; 0x54a
 8006268:	4827      	ldr	r0, [pc, #156]	; (8006308 <HAL_RCC_ClockConfig+0xc8>)
 800626a:	f00f f81e 	bl	80152aa <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d031      	beq.n	80062d8 <HAL_RCC_ClockConfig+0x98>
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	2b01      	cmp	r3, #1
 8006278:	d02e      	beq.n	80062d8 <HAL_RCC_ClockConfig+0x98>
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	2b02      	cmp	r3, #2
 800627e:	d02b      	beq.n	80062d8 <HAL_RCC_ClockConfig+0x98>
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	2b03      	cmp	r3, #3
 8006284:	d028      	beq.n	80062d8 <HAL_RCC_ClockConfig+0x98>
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	2b04      	cmp	r3, #4
 800628a:	d025      	beq.n	80062d8 <HAL_RCC_ClockConfig+0x98>
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	2b05      	cmp	r3, #5
 8006290:	d022      	beq.n	80062d8 <HAL_RCC_ClockConfig+0x98>
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	2b06      	cmp	r3, #6
 8006296:	d01f      	beq.n	80062d8 <HAL_RCC_ClockConfig+0x98>
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	2b07      	cmp	r3, #7
 800629c:	d01c      	beq.n	80062d8 <HAL_RCC_ClockConfig+0x98>
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	2b08      	cmp	r3, #8
 80062a2:	d019      	beq.n	80062d8 <HAL_RCC_ClockConfig+0x98>
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	2b09      	cmp	r3, #9
 80062a8:	d016      	beq.n	80062d8 <HAL_RCC_ClockConfig+0x98>
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	2b0a      	cmp	r3, #10
 80062ae:	d013      	beq.n	80062d8 <HAL_RCC_ClockConfig+0x98>
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	2b0b      	cmp	r3, #11
 80062b4:	d010      	beq.n	80062d8 <HAL_RCC_ClockConfig+0x98>
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	2b0c      	cmp	r3, #12
 80062ba:	d00d      	beq.n	80062d8 <HAL_RCC_ClockConfig+0x98>
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	2b0d      	cmp	r3, #13
 80062c0:	d00a      	beq.n	80062d8 <HAL_RCC_ClockConfig+0x98>
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	2b0e      	cmp	r3, #14
 80062c6:	d007      	beq.n	80062d8 <HAL_RCC_ClockConfig+0x98>
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	2b0f      	cmp	r3, #15
 80062cc:	d004      	beq.n	80062d8 <HAL_RCC_ClockConfig+0x98>
 80062ce:	f240 514b 	movw	r1, #1355	; 0x54b
 80062d2:	480d      	ldr	r0, [pc, #52]	; (8006308 <HAL_RCC_ClockConfig+0xc8>)
 80062d4:	f00e ffe9 	bl	80152aa <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80062d8:	4b0c      	ldr	r3, [pc, #48]	; (800630c <HAL_RCC_ClockConfig+0xcc>)
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f003 030f 	and.w	r3, r3, #15
 80062e0:	683a      	ldr	r2, [r7, #0]
 80062e2:	429a      	cmp	r2, r3
 80062e4:	d914      	bls.n	8006310 <HAL_RCC_ClockConfig+0xd0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062e6:	4b09      	ldr	r3, [pc, #36]	; (800630c <HAL_RCC_ClockConfig+0xcc>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f023 020f 	bic.w	r2, r3, #15
 80062ee:	4907      	ldr	r1, [pc, #28]	; (800630c <HAL_RCC_ClockConfig+0xcc>)
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	4313      	orrs	r3, r2
 80062f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80062f6:	4b05      	ldr	r3, [pc, #20]	; (800630c <HAL_RCC_ClockConfig+0xcc>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f003 030f 	and.w	r3, r3, #15
 80062fe:	683a      	ldr	r2, [r7, #0]
 8006300:	429a      	cmp	r2, r3
 8006302:	d005      	beq.n	8006310 <HAL_RCC_ClockConfig+0xd0>
    {
      return HAL_ERROR;
 8006304:	2301      	movs	r3, #1
 8006306:	e2cc      	b.n	80068a2 <HAL_RCC_ClockConfig+0x662>
 8006308:	08025c54 	.word	0x08025c54
 800630c:	40022000 	.word	0x40022000
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f003 0310 	and.w	r3, r3, #16
 8006318:	2b00      	cmp	r3, #0
 800631a:	d029      	beq.n	8006370 <HAL_RCC_ClockConfig+0x130>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	695a      	ldr	r2, [r3, #20]
 8006320:	4b8b      	ldr	r3, [pc, #556]	; (8006550 <HAL_RCC_ClockConfig+0x310>)
 8006322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006324:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006328:	429a      	cmp	r2, r3
 800632a:	d921      	bls.n	8006370 <HAL_RCC_ClockConfig+0x130>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	695b      	ldr	r3, [r3, #20]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d014      	beq.n	800635e <HAL_RCC_ClockConfig+0x11e>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	695b      	ldr	r3, [r3, #20]
 8006338:	2b40      	cmp	r3, #64	; 0x40
 800633a:	d010      	beq.n	800635e <HAL_RCC_ClockConfig+0x11e>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	695b      	ldr	r3, [r3, #20]
 8006340:	2b50      	cmp	r3, #80	; 0x50
 8006342:	d00c      	beq.n	800635e <HAL_RCC_ClockConfig+0x11e>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	695b      	ldr	r3, [r3, #20]
 8006348:	2b60      	cmp	r3, #96	; 0x60
 800634a:	d008      	beq.n	800635e <HAL_RCC_ClockConfig+0x11e>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	695b      	ldr	r3, [r3, #20]
 8006350:	2b70      	cmp	r3, #112	; 0x70
 8006352:	d004      	beq.n	800635e <HAL_RCC_ClockConfig+0x11e>
 8006354:	f240 5165 	movw	r1, #1381	; 0x565
 8006358:	487e      	ldr	r0, [pc, #504]	; (8006554 <HAL_RCC_ClockConfig+0x314>)
 800635a:	f00e ffa6 	bl	80152aa <assert_failed>
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 800635e:	4b7c      	ldr	r3, [pc, #496]	; (8006550 <HAL_RCC_ClockConfig+0x310>)
 8006360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006362:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	695b      	ldr	r3, [r3, #20]
 800636a:	4979      	ldr	r1, [pc, #484]	; (8006550 <HAL_RCC_ClockConfig+0x310>)
 800636c:	4313      	orrs	r3, r2
 800636e:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f003 0308 	and.w	r3, r3, #8
 8006378:	2b00      	cmp	r3, #0
 800637a:	d02b      	beq.n	80063d4 <HAL_RCC_ClockConfig+0x194>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	691a      	ldr	r2, [r3, #16]
 8006380:	4b73      	ldr	r3, [pc, #460]	; (8006550 <HAL_RCC_ClockConfig+0x310>)
 8006382:	6a1b      	ldr	r3, [r3, #32]
 8006384:	091b      	lsrs	r3, r3, #4
 8006386:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800638a:	429a      	cmp	r2, r3
 800638c:	d922      	bls.n	80063d4 <HAL_RCC_ClockConfig+0x194>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	691b      	ldr	r3, [r3, #16]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d014      	beq.n	80063c0 <HAL_RCC_ClockConfig+0x180>
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	691b      	ldr	r3, [r3, #16]
 800639a:	2b40      	cmp	r3, #64	; 0x40
 800639c:	d010      	beq.n	80063c0 <HAL_RCC_ClockConfig+0x180>
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	691b      	ldr	r3, [r3, #16]
 80063a2:	2b50      	cmp	r3, #80	; 0x50
 80063a4:	d00c      	beq.n	80063c0 <HAL_RCC_ClockConfig+0x180>
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	691b      	ldr	r3, [r3, #16]
 80063aa:	2b60      	cmp	r3, #96	; 0x60
 80063ac:	d008      	beq.n	80063c0 <HAL_RCC_ClockConfig+0x180>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	691b      	ldr	r3, [r3, #16]
 80063b2:	2b70      	cmp	r3, #112	; 0x70
 80063b4:	d004      	beq.n	80063c0 <HAL_RCC_ClockConfig+0x180>
 80063b6:	f240 516e 	movw	r1, #1390	; 0x56e
 80063ba:	4866      	ldr	r0, [pc, #408]	; (8006554 <HAL_RCC_ClockConfig+0x314>)
 80063bc:	f00e ff75 	bl	80152aa <assert_failed>
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80063c0:	4b63      	ldr	r3, [pc, #396]	; (8006550 <HAL_RCC_ClockConfig+0x310>)
 80063c2:	6a1b      	ldr	r3, [r3, #32]
 80063c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	691b      	ldr	r3, [r3, #16]
 80063cc:	011b      	lsls	r3, r3, #4
 80063ce:	4960      	ldr	r1, [pc, #384]	; (8006550 <HAL_RCC_ClockConfig+0x310>)
 80063d0:	4313      	orrs	r3, r2
 80063d2:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f003 0304 	and.w	r3, r3, #4
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d029      	beq.n	8006434 <HAL_RCC_ClockConfig+0x1f4>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	68da      	ldr	r2, [r3, #12]
 80063e4:	4b5a      	ldr	r3, [pc, #360]	; (8006550 <HAL_RCC_ClockConfig+0x310>)
 80063e6:	6a1b      	ldr	r3, [r3, #32]
 80063e8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80063ec:	429a      	cmp	r2, r3
 80063ee:	d921      	bls.n	8006434 <HAL_RCC_ClockConfig+0x1f4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	68db      	ldr	r3, [r3, #12]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d014      	beq.n	8006422 <HAL_RCC_ClockConfig+0x1e2>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	68db      	ldr	r3, [r3, #12]
 80063fc:	2b40      	cmp	r3, #64	; 0x40
 80063fe:	d010      	beq.n	8006422 <HAL_RCC_ClockConfig+0x1e2>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	68db      	ldr	r3, [r3, #12]
 8006404:	2b50      	cmp	r3, #80	; 0x50
 8006406:	d00c      	beq.n	8006422 <HAL_RCC_ClockConfig+0x1e2>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	68db      	ldr	r3, [r3, #12]
 800640c:	2b60      	cmp	r3, #96	; 0x60
 800640e:	d008      	beq.n	8006422 <HAL_RCC_ClockConfig+0x1e2>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	68db      	ldr	r3, [r3, #12]
 8006414:	2b70      	cmp	r3, #112	; 0x70
 8006416:	d004      	beq.n	8006422 <HAL_RCC_ClockConfig+0x1e2>
 8006418:	f44f 61af 	mov.w	r1, #1400	; 0x578
 800641c:	484d      	ldr	r0, [pc, #308]	; (8006554 <HAL_RCC_ClockConfig+0x314>)
 800641e:	f00e ff44 	bl	80152aa <assert_failed>
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8006422:	4b4b      	ldr	r3, [pc, #300]	; (8006550 <HAL_RCC_ClockConfig+0x310>)
 8006424:	6a1b      	ldr	r3, [r3, #32]
 8006426:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	68db      	ldr	r3, [r3, #12]
 800642e:	4948      	ldr	r1, [pc, #288]	; (8006550 <HAL_RCC_ClockConfig+0x310>)
 8006430:	4313      	orrs	r3, r2
 8006432:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f003 0302 	and.w	r3, r3, #2
 800643c:	2b00      	cmp	r3, #0
 800643e:	d039      	beq.n	80064b4 <HAL_RCC_ClockConfig+0x274>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	689a      	ldr	r2, [r3, #8]
 8006444:	4b42      	ldr	r3, [pc, #264]	; (8006550 <HAL_RCC_ClockConfig+0x310>)
 8006446:	6a1b      	ldr	r3, [r3, #32]
 8006448:	f003 030f 	and.w	r3, r3, #15
 800644c:	429a      	cmp	r2, r3
 800644e:	d931      	bls.n	80064b4 <HAL_RCC_ClockConfig+0x274>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	689b      	ldr	r3, [r3, #8]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d024      	beq.n	80064a2 <HAL_RCC_ClockConfig+0x262>
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	689b      	ldr	r3, [r3, #8]
 800645c:	2b08      	cmp	r3, #8
 800645e:	d020      	beq.n	80064a2 <HAL_RCC_ClockConfig+0x262>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	689b      	ldr	r3, [r3, #8]
 8006464:	2b09      	cmp	r3, #9
 8006466:	d01c      	beq.n	80064a2 <HAL_RCC_ClockConfig+0x262>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	689b      	ldr	r3, [r3, #8]
 800646c:	2b0a      	cmp	r3, #10
 800646e:	d018      	beq.n	80064a2 <HAL_RCC_ClockConfig+0x262>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	689b      	ldr	r3, [r3, #8]
 8006474:	2b0b      	cmp	r3, #11
 8006476:	d014      	beq.n	80064a2 <HAL_RCC_ClockConfig+0x262>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	689b      	ldr	r3, [r3, #8]
 800647c:	2b0c      	cmp	r3, #12
 800647e:	d010      	beq.n	80064a2 <HAL_RCC_ClockConfig+0x262>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	689b      	ldr	r3, [r3, #8]
 8006484:	2b0d      	cmp	r3, #13
 8006486:	d00c      	beq.n	80064a2 <HAL_RCC_ClockConfig+0x262>
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	689b      	ldr	r3, [r3, #8]
 800648c:	2b0e      	cmp	r3, #14
 800648e:	d008      	beq.n	80064a2 <HAL_RCC_ClockConfig+0x262>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	689b      	ldr	r3, [r3, #8]
 8006494:	2b0f      	cmp	r3, #15
 8006496:	d004      	beq.n	80064a2 <HAL_RCC_ClockConfig+0x262>
 8006498:	f240 5182 	movw	r1, #1410	; 0x582
 800649c:	482d      	ldr	r0, [pc, #180]	; (8006554 <HAL_RCC_ClockConfig+0x314>)
 800649e:	f00e ff04 	bl	80152aa <assert_failed>
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80064a2:	4b2b      	ldr	r3, [pc, #172]	; (8006550 <HAL_RCC_ClockConfig+0x310>)
 80064a4:	6a1b      	ldr	r3, [r3, #32]
 80064a6:	f023 020f 	bic.w	r2, r3, #15
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	689b      	ldr	r3, [r3, #8]
 80064ae:	4928      	ldr	r1, [pc, #160]	; (8006550 <HAL_RCC_ClockConfig+0x310>)
 80064b0:	4313      	orrs	r3, r2
 80064b2:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f003 0301 	and.w	r3, r3, #1
 80064bc:	2b00      	cmp	r3, #0
 80064be:	f000 80e8 	beq.w	8006692 <HAL_RCC_ClockConfig+0x452>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	685b      	ldr	r3, [r3, #4]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d010      	beq.n	80064ec <HAL_RCC_ClockConfig+0x2ac>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	685b      	ldr	r3, [r3, #4]
 80064ce:	2b01      	cmp	r3, #1
 80064d0:	d00c      	beq.n	80064ec <HAL_RCC_ClockConfig+0x2ac>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	685b      	ldr	r3, [r3, #4]
 80064d6:	2b02      	cmp	r3, #2
 80064d8:	d008      	beq.n	80064ec <HAL_RCC_ClockConfig+0x2ac>
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	685b      	ldr	r3, [r3, #4]
 80064de:	2b03      	cmp	r3, #3
 80064e0:	d004      	beq.n	80064ec <HAL_RCC_ClockConfig+0x2ac>
 80064e2:	f240 518a 	movw	r1, #1418	; 0x58a
 80064e6:	481b      	ldr	r0, [pc, #108]	; (8006554 <HAL_RCC_ClockConfig+0x314>)
 80064e8:	f00e fedf 	bl	80152aa <assert_failed>
    FlagStatus  pwrclkchanged = RESET;
 80064ec:	2300      	movs	r3, #0
 80064ee:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	685b      	ldr	r3, [r3, #4]
 80064f4:	2b03      	cmp	r3, #3
 80064f6:	d14a      	bne.n	800658e <HAL_RCC_ClockConfig+0x34e>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80064f8:	4b15      	ldr	r3, [pc, #84]	; (8006550 <HAL_RCC_ClockConfig+0x310>)
 80064fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80064fe:	f003 0304 	and.w	r3, r3, #4
 8006502:	2b00      	cmp	r3, #0
 8006504:	d110      	bne.n	8006528 <HAL_RCC_ClockConfig+0x2e8>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8006506:	4b12      	ldr	r3, [pc, #72]	; (8006550 <HAL_RCC_ClockConfig+0x310>)
 8006508:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800650c:	4a10      	ldr	r2, [pc, #64]	; (8006550 <HAL_RCC_ClockConfig+0x310>)
 800650e:	f043 0304 	orr.w	r3, r3, #4
 8006512:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8006516:	4b0e      	ldr	r3, [pc, #56]	; (8006550 <HAL_RCC_ClockConfig+0x310>)
 8006518:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800651c:	f003 0304 	and.w	r3, r3, #4
 8006520:	60bb      	str	r3, [r7, #8]
 8006522:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8006524:	2301      	movs	r3, #1
 8006526:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8006528:	f7fc fbce 	bl	8002cc8 <HAL_GetTick>
 800652c:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 800652e:	4b0a      	ldr	r3, [pc, #40]	; (8006558 <HAL_RCC_ClockConfig+0x318>)
 8006530:	68db      	ldr	r3, [r3, #12]
 8006532:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006536:	2b00      	cmp	r3, #0
 8006538:	d016      	beq.n	8006568 <HAL_RCC_ClockConfig+0x328>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800653a:	e00f      	b.n	800655c <HAL_RCC_ClockConfig+0x31c>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 800653c:	f7fc fbc4 	bl	8002cc8 <HAL_GetTick>
 8006540:	4602      	mov	r2, r0
 8006542:	693b      	ldr	r3, [r7, #16]
 8006544:	1ad3      	subs	r3, r2, r3
 8006546:	2b02      	cmp	r3, #2
 8006548:	d908      	bls.n	800655c <HAL_RCC_ClockConfig+0x31c>
          {
            return HAL_TIMEOUT;
 800654a:	2303      	movs	r3, #3
 800654c:	e1a9      	b.n	80068a2 <HAL_RCC_ClockConfig+0x662>
 800654e:	bf00      	nop
 8006550:	46020c00 	.word	0x46020c00
 8006554:	08025c54 	.word	0x08025c54
 8006558:	46020800 	.word	0x46020800
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800655c:	4b79      	ldr	r3, [pc, #484]	; (8006744 <HAL_RCC_ClockConfig+0x504>)
 800655e:	68db      	ldr	r3, [r3, #12]
 8006560:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006564:	2b00      	cmp	r3, #0
 8006566:	d0e9      	beq.n	800653c <HAL_RCC_ClockConfig+0x2fc>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8006568:	7dfb      	ldrb	r3, [r7, #23]
 800656a:	2b01      	cmp	r3, #1
 800656c:	d107      	bne.n	800657e <HAL_RCC_ClockConfig+0x33e>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800656e:	4b76      	ldr	r3, [pc, #472]	; (8006748 <HAL_RCC_ClockConfig+0x508>)
 8006570:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006574:	4a74      	ldr	r2, [pc, #464]	; (8006748 <HAL_RCC_ClockConfig+0x508>)
 8006576:	f023 0304 	bic.w	r3, r3, #4
 800657a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800657e:	4b72      	ldr	r3, [pc, #456]	; (8006748 <HAL_RCC_ClockConfig+0x508>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006586:	2b00      	cmp	r3, #0
 8006588:	d121      	bne.n	80065ce <HAL_RCC_ClockConfig+0x38e>
      {
        return HAL_ERROR;
 800658a:	2301      	movs	r3, #1
 800658c:	e189      	b.n	80068a2 <HAL_RCC_ClockConfig+0x662>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	685b      	ldr	r3, [r3, #4]
 8006592:	2b02      	cmp	r3, #2
 8006594:	d107      	bne.n	80065a6 <HAL_RCC_ClockConfig+0x366>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006596:	4b6c      	ldr	r3, [pc, #432]	; (8006748 <HAL_RCC_ClockConfig+0x508>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d115      	bne.n	80065ce <HAL_RCC_ClockConfig+0x38e>
        {
          return HAL_ERROR;
 80065a2:	2301      	movs	r3, #1
 80065a4:	e17d      	b.n	80068a2 <HAL_RCC_ClockConfig+0x662>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	685b      	ldr	r3, [r3, #4]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d107      	bne.n	80065be <HAL_RCC_ClockConfig+0x37e>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80065ae:	4b66      	ldr	r3, [pc, #408]	; (8006748 <HAL_RCC_ClockConfig+0x508>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f003 0304 	and.w	r3, r3, #4
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d109      	bne.n	80065ce <HAL_RCC_ClockConfig+0x38e>
        {
          return HAL_ERROR;
 80065ba:	2301      	movs	r3, #1
 80065bc:	e171      	b.n	80068a2 <HAL_RCC_ClockConfig+0x662>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80065be:	4b62      	ldr	r3, [pc, #392]	; (8006748 <HAL_RCC_ClockConfig+0x508>)
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d101      	bne.n	80065ce <HAL_RCC_ClockConfig+0x38e>
        {
          return HAL_ERROR;
 80065ca:	2301      	movs	r3, #1
 80065cc:	e169      	b.n	80068a2 <HAL_RCC_ClockConfig+0x662>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 80065ce:	4b5e      	ldr	r3, [pc, #376]	; (8006748 <HAL_RCC_ClockConfig+0x508>)
 80065d0:	69db      	ldr	r3, [r3, #28]
 80065d2:	f023 0203 	bic.w	r2, r3, #3
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	685b      	ldr	r3, [r3, #4]
 80065da:	495b      	ldr	r1, [pc, #364]	; (8006748 <HAL_RCC_ClockConfig+0x508>)
 80065dc:	4313      	orrs	r3, r2
 80065de:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 80065e0:	f7fc fb72 	bl	8002cc8 <HAL_GetTick>
 80065e4:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	685b      	ldr	r3, [r3, #4]
 80065ea:	2b03      	cmp	r3, #3
 80065ec:	d112      	bne.n	8006614 <HAL_RCC_ClockConfig+0x3d4>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80065ee:	e00a      	b.n	8006606 <HAL_RCC_ClockConfig+0x3c6>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80065f0:	f7fc fb6a 	bl	8002cc8 <HAL_GetTick>
 80065f4:	4602      	mov	r2, r0
 80065f6:	693b      	ldr	r3, [r7, #16]
 80065f8:	1ad3      	subs	r3, r2, r3
 80065fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80065fe:	4293      	cmp	r3, r2
 8006600:	d901      	bls.n	8006606 <HAL_RCC_ClockConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 8006602:	2303      	movs	r3, #3
 8006604:	e14d      	b.n	80068a2 <HAL_RCC_ClockConfig+0x662>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006606:	4b50      	ldr	r3, [pc, #320]	; (8006748 <HAL_RCC_ClockConfig+0x508>)
 8006608:	69db      	ldr	r3, [r3, #28]
 800660a:	f003 030c 	and.w	r3, r3, #12
 800660e:	2b0c      	cmp	r3, #12
 8006610:	d1ee      	bne.n	80065f0 <HAL_RCC_ClockConfig+0x3b0>
 8006612:	e03e      	b.n	8006692 <HAL_RCC_ClockConfig+0x452>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	685b      	ldr	r3, [r3, #4]
 8006618:	2b02      	cmp	r3, #2
 800661a:	d112      	bne.n	8006642 <HAL_RCC_ClockConfig+0x402>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800661c:	e00a      	b.n	8006634 <HAL_RCC_ClockConfig+0x3f4>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800661e:	f7fc fb53 	bl	8002cc8 <HAL_GetTick>
 8006622:	4602      	mov	r2, r0
 8006624:	693b      	ldr	r3, [r7, #16]
 8006626:	1ad3      	subs	r3, r2, r3
 8006628:	f241 3288 	movw	r2, #5000	; 0x1388
 800662c:	4293      	cmp	r3, r2
 800662e:	d901      	bls.n	8006634 <HAL_RCC_ClockConfig+0x3f4>
          {
            return HAL_TIMEOUT;
 8006630:	2303      	movs	r3, #3
 8006632:	e136      	b.n	80068a2 <HAL_RCC_ClockConfig+0x662>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8006634:	4b44      	ldr	r3, [pc, #272]	; (8006748 <HAL_RCC_ClockConfig+0x508>)
 8006636:	69db      	ldr	r3, [r3, #28]
 8006638:	f003 030c 	and.w	r3, r3, #12
 800663c:	2b08      	cmp	r3, #8
 800663e:	d1ee      	bne.n	800661e <HAL_RCC_ClockConfig+0x3de>
 8006640:	e027      	b.n	8006692 <HAL_RCC_ClockConfig+0x452>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	685b      	ldr	r3, [r3, #4]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d11d      	bne.n	8006686 <HAL_RCC_ClockConfig+0x446>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800664a:	e00a      	b.n	8006662 <HAL_RCC_ClockConfig+0x422>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800664c:	f7fc fb3c 	bl	8002cc8 <HAL_GetTick>
 8006650:	4602      	mov	r2, r0
 8006652:	693b      	ldr	r3, [r7, #16]
 8006654:	1ad3      	subs	r3, r2, r3
 8006656:	f241 3288 	movw	r2, #5000	; 0x1388
 800665a:	4293      	cmp	r3, r2
 800665c:	d901      	bls.n	8006662 <HAL_RCC_ClockConfig+0x422>
          {
            return HAL_TIMEOUT;
 800665e:	2303      	movs	r3, #3
 8006660:	e11f      	b.n	80068a2 <HAL_RCC_ClockConfig+0x662>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8006662:	4b39      	ldr	r3, [pc, #228]	; (8006748 <HAL_RCC_ClockConfig+0x508>)
 8006664:	69db      	ldr	r3, [r3, #28]
 8006666:	f003 030c 	and.w	r3, r3, #12
 800666a:	2b00      	cmp	r3, #0
 800666c:	d1ee      	bne.n	800664c <HAL_RCC_ClockConfig+0x40c>
 800666e:	e010      	b.n	8006692 <HAL_RCC_ClockConfig+0x452>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006670:	f7fc fb2a 	bl	8002cc8 <HAL_GetTick>
 8006674:	4602      	mov	r2, r0
 8006676:	693b      	ldr	r3, [r7, #16]
 8006678:	1ad3      	subs	r3, r2, r3
 800667a:	f241 3288 	movw	r2, #5000	; 0x1388
 800667e:	4293      	cmp	r3, r2
 8006680:	d901      	bls.n	8006686 <HAL_RCC_ClockConfig+0x446>
          {
            return HAL_TIMEOUT;
 8006682:	2303      	movs	r3, #3
 8006684:	e10d      	b.n	80068a2 <HAL_RCC_ClockConfig+0x662>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8006686:	4b30      	ldr	r3, [pc, #192]	; (8006748 <HAL_RCC_ClockConfig+0x508>)
 8006688:	69db      	ldr	r3, [r3, #28]
 800668a:	f003 030c 	and.w	r3, r3, #12
 800668e:	2b04      	cmp	r3, #4
 8006690:	d1ee      	bne.n	8006670 <HAL_RCC_ClockConfig+0x430>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f003 0302 	and.w	r3, r3, #2
 800669a:	2b00      	cmp	r3, #0
 800669c:	d039      	beq.n	8006712 <HAL_RCC_ClockConfig+0x4d2>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	689a      	ldr	r2, [r3, #8]
 80066a2:	4b29      	ldr	r3, [pc, #164]	; (8006748 <HAL_RCC_ClockConfig+0x508>)
 80066a4:	6a1b      	ldr	r3, [r3, #32]
 80066a6:	f003 030f 	and.w	r3, r3, #15
 80066aa:	429a      	cmp	r2, r3
 80066ac:	d231      	bcs.n	8006712 <HAL_RCC_ClockConfig+0x4d2>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	689b      	ldr	r3, [r3, #8]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d024      	beq.n	8006700 <HAL_RCC_ClockConfig+0x4c0>
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	689b      	ldr	r3, [r3, #8]
 80066ba:	2b08      	cmp	r3, #8
 80066bc:	d020      	beq.n	8006700 <HAL_RCC_ClockConfig+0x4c0>
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	689b      	ldr	r3, [r3, #8]
 80066c2:	2b09      	cmp	r3, #9
 80066c4:	d01c      	beq.n	8006700 <HAL_RCC_ClockConfig+0x4c0>
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	689b      	ldr	r3, [r3, #8]
 80066ca:	2b0a      	cmp	r3, #10
 80066cc:	d018      	beq.n	8006700 <HAL_RCC_ClockConfig+0x4c0>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	689b      	ldr	r3, [r3, #8]
 80066d2:	2b0b      	cmp	r3, #11
 80066d4:	d014      	beq.n	8006700 <HAL_RCC_ClockConfig+0x4c0>
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	689b      	ldr	r3, [r3, #8]
 80066da:	2b0c      	cmp	r3, #12
 80066dc:	d010      	beq.n	8006700 <HAL_RCC_ClockConfig+0x4c0>
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	689b      	ldr	r3, [r3, #8]
 80066e2:	2b0d      	cmp	r3, #13
 80066e4:	d00c      	beq.n	8006700 <HAL_RCC_ClockConfig+0x4c0>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	689b      	ldr	r3, [r3, #8]
 80066ea:	2b0e      	cmp	r3, #14
 80066ec:	d008      	beq.n	8006700 <HAL_RCC_ClockConfig+0x4c0>
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	689b      	ldr	r3, [r3, #8]
 80066f2:	2b0f      	cmp	r3, #15
 80066f4:	d004      	beq.n	8006700 <HAL_RCC_ClockConfig+0x4c0>
 80066f6:	f240 6105 	movw	r1, #1541	; 0x605
 80066fa:	4814      	ldr	r0, [pc, #80]	; (800674c <HAL_RCC_ClockConfig+0x50c>)
 80066fc:	f00e fdd5 	bl	80152aa <assert_failed>
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8006700:	4b11      	ldr	r3, [pc, #68]	; (8006748 <HAL_RCC_ClockConfig+0x508>)
 8006702:	6a1b      	ldr	r3, [r3, #32]
 8006704:	f023 020f 	bic.w	r2, r3, #15
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	689b      	ldr	r3, [r3, #8]
 800670c:	490e      	ldr	r1, [pc, #56]	; (8006748 <HAL_RCC_ClockConfig+0x508>)
 800670e:	4313      	orrs	r3, r2
 8006710:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006712:	4b0f      	ldr	r3, [pc, #60]	; (8006750 <HAL_RCC_ClockConfig+0x510>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f003 030f 	and.w	r3, r3, #15
 800671a:	683a      	ldr	r2, [r7, #0]
 800671c:	429a      	cmp	r2, r3
 800671e:	d219      	bcs.n	8006754 <HAL_RCC_ClockConfig+0x514>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006720:	4b0b      	ldr	r3, [pc, #44]	; (8006750 <HAL_RCC_ClockConfig+0x510>)
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f023 020f 	bic.w	r2, r3, #15
 8006728:	4909      	ldr	r1, [pc, #36]	; (8006750 <HAL_RCC_ClockConfig+0x510>)
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	4313      	orrs	r3, r2
 800672e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006730:	4b07      	ldr	r3, [pc, #28]	; (8006750 <HAL_RCC_ClockConfig+0x510>)
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f003 030f 	and.w	r3, r3, #15
 8006738:	683a      	ldr	r2, [r7, #0]
 800673a:	429a      	cmp	r2, r3
 800673c:	d00a      	beq.n	8006754 <HAL_RCC_ClockConfig+0x514>
    {
      return HAL_ERROR;
 800673e:	2301      	movs	r3, #1
 8006740:	e0af      	b.n	80068a2 <HAL_RCC_ClockConfig+0x662>
 8006742:	bf00      	nop
 8006744:	46020800 	.word	0x46020800
 8006748:	46020c00 	.word	0x46020c00
 800674c:	08025c54 	.word	0x08025c54
 8006750:	40022000 	.word	0x40022000
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f003 0304 	and.w	r3, r3, #4
 800675c:	2b00      	cmp	r3, #0
 800675e:	d029      	beq.n	80067b4 <HAL_RCC_ClockConfig+0x574>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	68da      	ldr	r2, [r3, #12]
 8006764:	4b51      	ldr	r3, [pc, #324]	; (80068ac <HAL_RCC_ClockConfig+0x66c>)
 8006766:	6a1b      	ldr	r3, [r3, #32]
 8006768:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800676c:	429a      	cmp	r2, r3
 800676e:	d221      	bcs.n	80067b4 <HAL_RCC_ClockConfig+0x574>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	68db      	ldr	r3, [r3, #12]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d014      	beq.n	80067a2 <HAL_RCC_ClockConfig+0x562>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	68db      	ldr	r3, [r3, #12]
 800677c:	2b40      	cmp	r3, #64	; 0x40
 800677e:	d010      	beq.n	80067a2 <HAL_RCC_ClockConfig+0x562>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	68db      	ldr	r3, [r3, #12]
 8006784:	2b50      	cmp	r3, #80	; 0x50
 8006786:	d00c      	beq.n	80067a2 <HAL_RCC_ClockConfig+0x562>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	68db      	ldr	r3, [r3, #12]
 800678c:	2b60      	cmp	r3, #96	; 0x60
 800678e:	d008      	beq.n	80067a2 <HAL_RCC_ClockConfig+0x562>
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	68db      	ldr	r3, [r3, #12]
 8006794:	2b70      	cmp	r3, #112	; 0x70
 8006796:	d004      	beq.n	80067a2 <HAL_RCC_ClockConfig+0x562>
 8006798:	f240 611d 	movw	r1, #1565	; 0x61d
 800679c:	4844      	ldr	r0, [pc, #272]	; (80068b0 <HAL_RCC_ClockConfig+0x670>)
 800679e:	f00e fd84 	bl	80152aa <assert_failed>
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 80067a2:	4b42      	ldr	r3, [pc, #264]	; (80068ac <HAL_RCC_ClockConfig+0x66c>)
 80067a4:	6a1b      	ldr	r3, [r3, #32]
 80067a6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	68db      	ldr	r3, [r3, #12]
 80067ae:	493f      	ldr	r1, [pc, #252]	; (80068ac <HAL_RCC_ClockConfig+0x66c>)
 80067b0:	4313      	orrs	r3, r2
 80067b2:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f003 0308 	and.w	r3, r3, #8
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d02b      	beq.n	8006818 <HAL_RCC_ClockConfig+0x5d8>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	691a      	ldr	r2, [r3, #16]
 80067c4:	4b39      	ldr	r3, [pc, #228]	; (80068ac <HAL_RCC_ClockConfig+0x66c>)
 80067c6:	6a1b      	ldr	r3, [r3, #32]
 80067c8:	091b      	lsrs	r3, r3, #4
 80067ca:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80067ce:	429a      	cmp	r2, r3
 80067d0:	d222      	bcs.n	8006818 <HAL_RCC_ClockConfig+0x5d8>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	691b      	ldr	r3, [r3, #16]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d014      	beq.n	8006804 <HAL_RCC_ClockConfig+0x5c4>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	691b      	ldr	r3, [r3, #16]
 80067de:	2b40      	cmp	r3, #64	; 0x40
 80067e0:	d010      	beq.n	8006804 <HAL_RCC_ClockConfig+0x5c4>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	691b      	ldr	r3, [r3, #16]
 80067e6:	2b50      	cmp	r3, #80	; 0x50
 80067e8:	d00c      	beq.n	8006804 <HAL_RCC_ClockConfig+0x5c4>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	691b      	ldr	r3, [r3, #16]
 80067ee:	2b60      	cmp	r3, #96	; 0x60
 80067f0:	d008      	beq.n	8006804 <HAL_RCC_ClockConfig+0x5c4>
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	691b      	ldr	r3, [r3, #16]
 80067f6:	2b70      	cmp	r3, #112	; 0x70
 80067f8:	d004      	beq.n	8006804 <HAL_RCC_ClockConfig+0x5c4>
 80067fa:	f240 6127 	movw	r1, #1575	; 0x627
 80067fe:	482c      	ldr	r0, [pc, #176]	; (80068b0 <HAL_RCC_ClockConfig+0x670>)
 8006800:	f00e fd53 	bl	80152aa <assert_failed>
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8006804:	4b29      	ldr	r3, [pc, #164]	; (80068ac <HAL_RCC_ClockConfig+0x66c>)
 8006806:	6a1b      	ldr	r3, [r3, #32]
 8006808:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	691b      	ldr	r3, [r3, #16]
 8006810:	011b      	lsls	r3, r3, #4
 8006812:	4926      	ldr	r1, [pc, #152]	; (80068ac <HAL_RCC_ClockConfig+0x66c>)
 8006814:	4313      	orrs	r3, r2
 8006816:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f003 0310 	and.w	r3, r3, #16
 8006820:	2b00      	cmp	r3, #0
 8006822:	d029      	beq.n	8006878 <HAL_RCC_ClockConfig+0x638>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	695a      	ldr	r2, [r3, #20]
 8006828:	4b20      	ldr	r3, [pc, #128]	; (80068ac <HAL_RCC_ClockConfig+0x66c>)
 800682a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800682c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006830:	429a      	cmp	r2, r3
 8006832:	d221      	bcs.n	8006878 <HAL_RCC_ClockConfig+0x638>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	695b      	ldr	r3, [r3, #20]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d014      	beq.n	8006866 <HAL_RCC_ClockConfig+0x626>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	695b      	ldr	r3, [r3, #20]
 8006840:	2b40      	cmp	r3, #64	; 0x40
 8006842:	d010      	beq.n	8006866 <HAL_RCC_ClockConfig+0x626>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	695b      	ldr	r3, [r3, #20]
 8006848:	2b50      	cmp	r3, #80	; 0x50
 800684a:	d00c      	beq.n	8006866 <HAL_RCC_ClockConfig+0x626>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	695b      	ldr	r3, [r3, #20]
 8006850:	2b60      	cmp	r3, #96	; 0x60
 8006852:	d008      	beq.n	8006866 <HAL_RCC_ClockConfig+0x626>
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	695b      	ldr	r3, [r3, #20]
 8006858:	2b70      	cmp	r3, #112	; 0x70
 800685a:	d004      	beq.n	8006866 <HAL_RCC_ClockConfig+0x626>
 800685c:	f240 6131 	movw	r1, #1585	; 0x631
 8006860:	4813      	ldr	r0, [pc, #76]	; (80068b0 <HAL_RCC_ClockConfig+0x670>)
 8006862:	f00e fd22 	bl	80152aa <assert_failed>
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8006866:	4b11      	ldr	r3, [pc, #68]	; (80068ac <HAL_RCC_ClockConfig+0x66c>)
 8006868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800686a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	695b      	ldr	r3, [r3, #20]
 8006872:	490e      	ldr	r1, [pc, #56]	; (80068ac <HAL_RCC_ClockConfig+0x66c>)
 8006874:	4313      	orrs	r3, r2
 8006876:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8006878:	f000 f822 	bl	80068c0 <HAL_RCC_GetSysClockFreq>
 800687c:	4602      	mov	r2, r0
 800687e:	4b0b      	ldr	r3, [pc, #44]	; (80068ac <HAL_RCC_ClockConfig+0x66c>)
 8006880:	6a1b      	ldr	r3, [r3, #32]
 8006882:	f003 030f 	and.w	r3, r3, #15
 8006886:	490b      	ldr	r1, [pc, #44]	; (80068b4 <HAL_RCC_ClockConfig+0x674>)
 8006888:	5ccb      	ldrb	r3, [r1, r3]
 800688a:	fa22 f303 	lsr.w	r3, r2, r3
 800688e:	4a0a      	ldr	r2, [pc, #40]	; (80068b8 <HAL_RCC_ClockConfig+0x678>)
 8006890:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006892:	4b0a      	ldr	r3, [pc, #40]	; (80068bc <HAL_RCC_ClockConfig+0x67c>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	4618      	mov	r0, r3
 8006898:	f00e fd12 	bl	80152c0 <HAL_InitTick>
 800689c:	4603      	mov	r3, r0
 800689e:	73fb      	strb	r3, [r7, #15]

  return status;
 80068a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80068a2:	4618      	mov	r0, r3
 80068a4:	3718      	adds	r7, #24
 80068a6:	46bd      	mov	sp, r7
 80068a8:	bd80      	pop	{r7, pc}
 80068aa:	bf00      	nop
 80068ac:	46020c00 	.word	0x46020c00
 80068b0:	08025c54 	.word	0x08025c54
 80068b4:	08027dc8 	.word	0x08027dc8
 80068b8:	20000044 	.word	0x20000044
 80068bc:	20000000 	.word	0x20000000

080068c0 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80068c0:	b480      	push	{r7}
 80068c2:	b08b      	sub	sp, #44	; 0x2c
 80068c4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 80068c6:	2300      	movs	r3, #0
 80068c8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 80068ca:	2300      	movs	r3, #0
 80068cc:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80068ce:	4b7b      	ldr	r3, [pc, #492]	; (8006abc <HAL_RCC_GetSysClockFreq+0x1fc>)
 80068d0:	69db      	ldr	r3, [r3, #28]
 80068d2:	f003 030c 	and.w	r3, r3, #12
 80068d6:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80068d8:	4b78      	ldr	r3, [pc, #480]	; (8006abc <HAL_RCC_GetSysClockFreq+0x1fc>)
 80068da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068dc:	f003 0303 	and.w	r3, r3, #3
 80068e0:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80068e2:	69bb      	ldr	r3, [r7, #24]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d005      	beq.n	80068f4 <HAL_RCC_GetSysClockFreq+0x34>
 80068e8:	69bb      	ldr	r3, [r7, #24]
 80068ea:	2b0c      	cmp	r3, #12
 80068ec:	d121      	bne.n	8006932 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80068ee:	697b      	ldr	r3, [r7, #20]
 80068f0:	2b01      	cmp	r3, #1
 80068f2:	d11e      	bne.n	8006932 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 80068f4:	4b71      	ldr	r3, [pc, #452]	; (8006abc <HAL_RCC_GetSysClockFreq+0x1fc>)
 80068f6:	689b      	ldr	r3, [r3, #8]
 80068f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d107      	bne.n	8006910 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8006900:	4b6e      	ldr	r3, [pc, #440]	; (8006abc <HAL_RCC_GetSysClockFreq+0x1fc>)
 8006902:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006906:	0b1b      	lsrs	r3, r3, #12
 8006908:	f003 030f 	and.w	r3, r3, #15
 800690c:	627b      	str	r3, [r7, #36]	; 0x24
 800690e:	e005      	b.n	800691c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8006910:	4b6a      	ldr	r3, [pc, #424]	; (8006abc <HAL_RCC_GetSysClockFreq+0x1fc>)
 8006912:	689b      	ldr	r3, [r3, #8]
 8006914:	0f1b      	lsrs	r3, r3, #28
 8006916:	f003 030f 	and.w	r3, r3, #15
 800691a:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800691c:	4a68      	ldr	r2, [pc, #416]	; (8006ac0 <HAL_RCC_GetSysClockFreq+0x200>)
 800691e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006920:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006924:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006926:	69bb      	ldr	r3, [r7, #24]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d110      	bne.n	800694e <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800692c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800692e:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006930:	e00d      	b.n	800694e <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006932:	4b62      	ldr	r3, [pc, #392]	; (8006abc <HAL_RCC_GetSysClockFreq+0x1fc>)
 8006934:	69db      	ldr	r3, [r3, #28]
 8006936:	f003 030c 	and.w	r3, r3, #12
 800693a:	2b04      	cmp	r3, #4
 800693c:	d102      	bne.n	8006944 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800693e:	4b61      	ldr	r3, [pc, #388]	; (8006ac4 <HAL_RCC_GetSysClockFreq+0x204>)
 8006940:	623b      	str	r3, [r7, #32]
 8006942:	e004      	b.n	800694e <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006944:	69bb      	ldr	r3, [r7, #24]
 8006946:	2b08      	cmp	r3, #8
 8006948:	d101      	bne.n	800694e <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800694a:	4b5e      	ldr	r3, [pc, #376]	; (8006ac4 <HAL_RCC_GetSysClockFreq+0x204>)
 800694c:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800694e:	69bb      	ldr	r3, [r7, #24]
 8006950:	2b0c      	cmp	r3, #12
 8006952:	f040 80ac 	bne.w	8006aae <HAL_RCC_GetSysClockFreq+0x1ee>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8006956:	4b59      	ldr	r3, [pc, #356]	; (8006abc <HAL_RCC_GetSysClockFreq+0x1fc>)
 8006958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800695a:	f003 0303 	and.w	r3, r3, #3
 800695e:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8006960:	4b56      	ldr	r3, [pc, #344]	; (8006abc <HAL_RCC_GetSysClockFreq+0x1fc>)
 8006962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006964:	0a1b      	lsrs	r3, r3, #8
 8006966:	f003 030f 	and.w	r3, r3, #15
 800696a:	3301      	adds	r3, #1
 800696c:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800696e:	4b53      	ldr	r3, [pc, #332]	; (8006abc <HAL_RCC_GetSysClockFreq+0x1fc>)
 8006970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006972:	091b      	lsrs	r3, r3, #4
 8006974:	f003 0301 	and.w	r3, r3, #1
 8006978:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800697a:	4b50      	ldr	r3, [pc, #320]	; (8006abc <HAL_RCC_GetSysClockFreq+0x1fc>)
 800697c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800697e:	08db      	lsrs	r3, r3, #3
 8006980:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006984:	68ba      	ldr	r2, [r7, #8]
 8006986:	fb02 f303 	mul.w	r3, r2, r3
 800698a:	ee07 3a90 	vmov	s15, r3
 800698e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006992:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    if (pllm != 0U)
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	2b00      	cmp	r3, #0
 800699a:	f000 8086 	beq.w	8006aaa <HAL_RCC_GetSysClockFreq+0x1ea>
    {
      switch (pllsource)
 800699e:	693b      	ldr	r3, [r7, #16]
 80069a0:	2b02      	cmp	r3, #2
 80069a2:	d003      	beq.n	80069ac <HAL_RCC_GetSysClockFreq+0xec>
 80069a4:	693b      	ldr	r3, [r7, #16]
 80069a6:	2b03      	cmp	r3, #3
 80069a8:	d022      	beq.n	80069f0 <HAL_RCC_GetSysClockFreq+0x130>
 80069aa:	e043      	b.n	8006a34 <HAL_RCC_GetSysClockFreq+0x174>
      {
        case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	ee07 3a90 	vmov	s15, r3
 80069b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069b6:	eddf 6a44 	vldr	s13, [pc, #272]	; 8006ac8 <HAL_RCC_GetSysClockFreq+0x208>
 80069ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069be:	4b3f      	ldr	r3, [pc, #252]	; (8006abc <HAL_RCC_GetSysClockFreq+0x1fc>)
 80069c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069c6:	ee07 3a90 	vmov	s15, r3
 80069ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 80069ce:	ed97 6a01 	vldr	s12, [r7, #4]
 80069d2:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8006acc <HAL_RCC_GetSysClockFreq+0x20c>
 80069d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80069da:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 80069de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80069e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80069e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069ea:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 80069ee:	e046      	b.n	8006a7e <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	ee07 3a90 	vmov	s15, r3
 80069f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069fa:	eddf 6a33 	vldr	s13, [pc, #204]	; 8006ac8 <HAL_RCC_GetSysClockFreq+0x208>
 80069fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a02:	4b2e      	ldr	r3, [pc, #184]	; (8006abc <HAL_RCC_GetSysClockFreq+0x1fc>)
 8006a04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a0a:	ee07 3a90 	vmov	s15, r3
 8006a0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8006a12:	ed97 6a01 	vldr	s12, [r7, #4]
 8006a16:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8006acc <HAL_RCC_GetSysClockFreq+0x20c>
 8006a1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006a1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8006a22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a26:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006a2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a2e:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8006a32:	e024      	b.n	8006a7e <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        default:
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a36:	ee07 3a90 	vmov	s15, r3
 8006a3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	ee07 3a90 	vmov	s15, r3
 8006a44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a48:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a4c:	4b1b      	ldr	r3, [pc, #108]	; (8006abc <HAL_RCC_GetSysClockFreq+0x1fc>)
 8006a4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a54:	ee07 3a90 	vmov	s15, r3
 8006a58:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8006a5c:	ed97 6a01 	vldr	s12, [r7, #4]
 8006a60:	eddf 5a1a 	vldr	s11, [pc, #104]	; 8006acc <HAL_RCC_GetSysClockFreq+0x20c>
 8006a64:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006a68:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8006a6c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a70:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006a74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a78:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8006a7c:	bf00      	nop
      }

      pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8006a7e:	4b0f      	ldr	r3, [pc, #60]	; (8006abc <HAL_RCC_GetSysClockFreq+0x1fc>)
 8006a80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a82:	0e1b      	lsrs	r3, r3, #24
 8006a84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a88:	3301      	adds	r3, #1
 8006a8a:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	ee07 3a90 	vmov	s15, r3
 8006a92:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006a96:	edd7 6a07 	vldr	s13, [r7, #28]
 8006a9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006a9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006aa2:	ee17 3a90 	vmov	r3, s15
 8006aa6:	623b      	str	r3, [r7, #32]
 8006aa8:	e001      	b.n	8006aae <HAL_RCC_GetSysClockFreq+0x1ee>
    }
    else
    {
      sysclockfreq = 0;
 8006aaa:	2300      	movs	r3, #0
 8006aac:	623b      	str	r3, [r7, #32]
    }
  }

  return sysclockfreq;
 8006aae:	6a3b      	ldr	r3, [r7, #32]
}
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	372c      	adds	r7, #44	; 0x2c
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aba:	4770      	bx	lr
 8006abc:	46020c00 	.word	0x46020c00
 8006ac0:	08027de0 	.word	0x08027de0
 8006ac4:	00f42400 	.word	0x00f42400
 8006ac8:	4b742400 	.word	0x4b742400
 8006acc:	46000000 	.word	0x46000000

08006ad0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8006ad4:	f7ff fef4 	bl	80068c0 <HAL_RCC_GetSysClockFreq>
 8006ad8:	4602      	mov	r2, r0
 8006ada:	4b07      	ldr	r3, [pc, #28]	; (8006af8 <HAL_RCC_GetHCLKFreq+0x28>)
 8006adc:	6a1b      	ldr	r3, [r3, #32]
 8006ade:	f003 030f 	and.w	r3, r3, #15
 8006ae2:	4906      	ldr	r1, [pc, #24]	; (8006afc <HAL_RCC_GetHCLKFreq+0x2c>)
 8006ae4:	5ccb      	ldrb	r3, [r1, r3]
 8006ae6:	fa22 f303 	lsr.w	r3, r2, r3
 8006aea:	4a05      	ldr	r2, [pc, #20]	; (8006b00 <HAL_RCC_GetHCLKFreq+0x30>)
 8006aec:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8006aee:	4b04      	ldr	r3, [pc, #16]	; (8006b00 <HAL_RCC_GetHCLKFreq+0x30>)
 8006af0:	681b      	ldr	r3, [r3, #0]
}
 8006af2:	4618      	mov	r0, r3
 8006af4:	bd80      	pop	{r7, pc}
 8006af6:	bf00      	nop
 8006af8:	46020c00 	.word	0x46020c00
 8006afc:	08027dc8 	.word	0x08027dc8
 8006b00:	20000044 	.word	0x20000044

08006b04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8006b08:	f7ff ffe2 	bl	8006ad0 <HAL_RCC_GetHCLKFreq>
 8006b0c:	4602      	mov	r2, r0
 8006b0e:	4b05      	ldr	r3, [pc, #20]	; (8006b24 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006b10:	6a1b      	ldr	r3, [r3, #32]
 8006b12:	091b      	lsrs	r3, r3, #4
 8006b14:	f003 0307 	and.w	r3, r3, #7
 8006b18:	4903      	ldr	r1, [pc, #12]	; (8006b28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006b1a:	5ccb      	ldrb	r3, [r1, r3]
 8006b1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006b20:	4618      	mov	r0, r3
 8006b22:	bd80      	pop	{r7, pc}
 8006b24:	46020c00 	.word	0x46020c00
 8006b28:	08027dd8 	.word	0x08027dd8

08006b2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8006b30:	f7ff ffce 	bl	8006ad0 <HAL_RCC_GetHCLKFreq>
 8006b34:	4602      	mov	r2, r0
 8006b36:	4b05      	ldr	r3, [pc, #20]	; (8006b4c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006b38:	6a1b      	ldr	r3, [r3, #32]
 8006b3a:	0a1b      	lsrs	r3, r3, #8
 8006b3c:	f003 0307 	and.w	r3, r3, #7
 8006b40:	4903      	ldr	r1, [pc, #12]	; (8006b50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006b42:	5ccb      	ldrb	r3, [r1, r3]
 8006b44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006b48:	4618      	mov	r0, r3
 8006b4a:	bd80      	pop	{r7, pc}
 8006b4c:	46020c00 	.word	0x46020c00
 8006b50:	08027dd8 	.word	0x08027dd8

08006b54 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8006b58:	f7ff ffba 	bl	8006ad0 <HAL_RCC_GetHCLKFreq>
 8006b5c:	4602      	mov	r2, r0
 8006b5e:	4b05      	ldr	r3, [pc, #20]	; (8006b74 <HAL_RCC_GetPCLK3Freq+0x20>)
 8006b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b62:	091b      	lsrs	r3, r3, #4
 8006b64:	f003 0307 	and.w	r3, r3, #7
 8006b68:	4903      	ldr	r1, [pc, #12]	; (8006b78 <HAL_RCC_GetPCLK3Freq+0x24>)
 8006b6a:	5ccb      	ldrb	r3, [r1, r3]
 8006b6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006b70:	4618      	mov	r0, r3
 8006b72:	bd80      	pop	{r7, pc}
 8006b74:	46020c00 	.word	0x46020c00
 8006b78:	08027dd8 	.word	0x08027dd8

08006b7c <HAL_RCC_GetOscConfig>:
  * @param  pRCC_OscInitStruct  pointer to an RCC_OscInitTypeDef structure that
  *         will be configured.
  * @retval None
  */
void HAL_RCC_GetOscConfig(RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b082      	sub	sp, #8
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(pRCC_OscInitStruct != (void *)NULL);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d104      	bne.n	8006b94 <HAL_RCC_GetOscConfig+0x18>
 8006b8a:	f44f 61e8 	mov.w	r1, #1856	; 0x740
 8006b8e:	4887      	ldr	r0, [pc, #540]	; (8006dac <HAL_RCC_GetOscConfig+0x230>)
 8006b90:	f00e fb8b 	bl	80152aa <assert_failed>

  /* Set all possible values for the Oscillator type parameter ---------------*/
  pRCC_OscInitStruct->OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_MSI | \
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	223f      	movs	r2, #63	; 0x3f
 8006b98:	601a      	str	r2, [r3, #0]
                                       RCC_OSCILLATORTYPE_LSE | RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_HSI48;

  /* Get the HSE configuration -----------------------------------------------*/
  if ((RCC->CR & (RCC_CR_HSEBYP | RCC_CR_HSEEXT)) == RCC_CR_HSEBYP)
 8006b9a:	4b85      	ldr	r3, [pc, #532]	; (8006db0 <HAL_RCC_GetOscConfig+0x234>)
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f403 13a0 	and.w	r3, r3, #1310720	; 0x140000
 8006ba2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006ba6:	d104      	bne.n	8006bb2 <HAL_RCC_GetOscConfig+0x36>
  {
    pRCC_OscInitStruct->HSEState = RCC_HSE_BYPASS;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8006bae:	605a      	str	r2, [r3, #4]
 8006bb0:	e01a      	b.n	8006be8 <HAL_RCC_GetOscConfig+0x6c>
  }
  else if ((RCC->CR & (RCC_CR_HSEBYP | RCC_CR_HSEEXT)) == (RCC_CR_HSEBYP | RCC_CR_HSEEXT))
 8006bb2:	4b7f      	ldr	r3, [pc, #508]	; (8006db0 <HAL_RCC_GetOscConfig+0x234>)
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f403 13a0 	and.w	r3, r3, #1310720	; 0x140000
 8006bba:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8006bbe:	d104      	bne.n	8006bca <HAL_RCC_GetOscConfig+0x4e>
  {
    pRCC_OscInitStruct->HSEState = RCC_HSE_BYPASS_DIGITAL;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	f44f 12a8 	mov.w	r2, #1376256	; 0x150000
 8006bc6:	605a      	str	r2, [r3, #4]
 8006bc8:	e00e      	b.n	8006be8 <HAL_RCC_GetOscConfig+0x6c>
  }
  else if ((RCC->CR & RCC_CR_HSEON) == RCC_CR_HSEON)
 8006bca:	4b79      	ldr	r3, [pc, #484]	; (8006db0 <HAL_RCC_GetOscConfig+0x234>)
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006bd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bd6:	d104      	bne.n	8006be2 <HAL_RCC_GetOscConfig+0x66>
  {
    pRCC_OscInitStruct->HSEState = RCC_HSE_ON;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006bde:	605a      	str	r2, [r3, #4]
 8006be0:	e002      	b.n	8006be8 <HAL_RCC_GetOscConfig+0x6c>
  }
  else
  {
    pRCC_OscInitStruct->HSEState = RCC_HSE_OFF;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2200      	movs	r2, #0
 8006be6:	605a      	str	r2, [r3, #4]
  }

  /* Get the MSI configuration -----------------------------------------------*/
  if ((RCC->CR & RCC_CR_MSISON) == RCC_CR_MSISON)
 8006be8:	4b71      	ldr	r3, [pc, #452]	; (8006db0 <HAL_RCC_GetOscConfig+0x234>)
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f003 0301 	and.w	r3, r3, #1
 8006bf0:	2b01      	cmp	r3, #1
 8006bf2:	d103      	bne.n	8006bfc <HAL_RCC_GetOscConfig+0x80>
  {
    pRCC_OscInitStruct->MSIState = RCC_MSI_ON;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2201      	movs	r2, #1
 8006bf8:	61da      	str	r2, [r3, #28]
 8006bfa:	e002      	b.n	8006c02 <HAL_RCC_GetOscConfig+0x86>
  }
  else
  {
    pRCC_OscInitStruct->MSIState = RCC_MSI_OFF;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2200      	movs	r2, #0
 8006c00:	61da      	str	r2, [r3, #28]
  }

  pRCC_OscInitStruct->MSIClockRange = (uint32_t)((RCC->CR & RCC_ICSCR1_MSISRANGE));
 8006c02:	4b6b      	ldr	r3, [pc, #428]	; (8006db0 <HAL_RCC_GetOscConfig+0x234>)
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	625a      	str	r2, [r3, #36]	; 0x24
  if (pRCC_OscInitStruct->MSIClockRange >= RCC_MSIRANGE_12)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c12:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8006c16:	d306      	bcc.n	8006c26 <HAL_RCC_GetOscConfig+0xaa>
  {
    pRCC_OscInitStruct->MSICalibrationValue = (uint32_t)((RCC->ICSCR2 & RCC_ICSCR2_MSITRIM3) >> \
 8006c18:	4b65      	ldr	r3, [pc, #404]	; (8006db0 <HAL_RCC_GetOscConfig+0x234>)
 8006c1a:	68db      	ldr	r3, [r3, #12]
 8006c1c:	f003 021f 	and.w	r2, r3, #31
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	621a      	str	r2, [r3, #32]
 8006c24:	e01f      	b.n	8006c66 <HAL_RCC_GetOscConfig+0xea>
                                                         RCC_ICSCR2_MSITRIM3_Pos);
  }
  else if (pRCC_OscInitStruct->MSIClockRange >= RCC_MSIRANGE_8)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	da07      	bge.n	8006c3e <HAL_RCC_GetOscConfig+0xc2>
  {
    pRCC_OscInitStruct->MSICalibrationValue = (uint32_t)((RCC->ICSCR2 & RCC_ICSCR2_MSITRIM2) >> \
 8006c2e:	4b60      	ldr	r3, [pc, #384]	; (8006db0 <HAL_RCC_GetOscConfig+0x234>)
 8006c30:	68db      	ldr	r3, [r3, #12]
 8006c32:	095b      	lsrs	r3, r3, #5
 8006c34:	f003 021f 	and.w	r2, r3, #31
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	621a      	str	r2, [r3, #32]
 8006c3c:	e013      	b.n	8006c66 <HAL_RCC_GetOscConfig+0xea>
                                                         RCC_ICSCR2_MSITRIM2_Pos);
  }
  else if (pRCC_OscInitStruct->MSIClockRange >= RCC_MSIRANGE_4)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c46:	d307      	bcc.n	8006c58 <HAL_RCC_GetOscConfig+0xdc>
  {
    pRCC_OscInitStruct->MSICalibrationValue = (uint32_t)((RCC->ICSCR2 & RCC_ICSCR2_MSITRIM1) >> \
 8006c48:	4b59      	ldr	r3, [pc, #356]	; (8006db0 <HAL_RCC_GetOscConfig+0x234>)
 8006c4a:	68db      	ldr	r3, [r3, #12]
 8006c4c:	0a9b      	lsrs	r3, r3, #10
 8006c4e:	f003 021f 	and.w	r2, r3, #31
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	621a      	str	r2, [r3, #32]
 8006c56:	e006      	b.n	8006c66 <HAL_RCC_GetOscConfig+0xea>
                                                         RCC_ICSCR2_MSITRIM1_Pos);
  }
  else /*if (pRCC_OscInitStruct->MSIClockRange >= RCC_MSIRANGE_0)*/
  {
    pRCC_OscInitStruct->MSICalibrationValue = (uint32_t)((RCC->ICSCR2 & RCC_ICSCR2_MSITRIM0) >> \
 8006c58:	4b55      	ldr	r3, [pc, #340]	; (8006db0 <HAL_RCC_GetOscConfig+0x234>)
 8006c5a:	68db      	ldr	r3, [r3, #12]
 8006c5c:	0bdb      	lsrs	r3, r3, #15
 8006c5e:	f003 021f 	and.w	r2, r3, #31
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	621a      	str	r2, [r3, #32]
                                                         RCC_ICSCR2_MSITRIM0_Pos);
  }

  /* Get the HSI configuration -----------------------------------------------*/
  if ((RCC->CR & RCC_CR_HSION) == RCC_CR_HSION)
 8006c66:	4b52      	ldr	r3, [pc, #328]	; (8006db0 <HAL_RCC_GetOscConfig+0x234>)
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c72:	d104      	bne.n	8006c7e <HAL_RCC_GetOscConfig+0x102>
  {
    pRCC_OscInitStruct->HSIState = RCC_HSI_ON;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006c7a:	60da      	str	r2, [r3, #12]
 8006c7c:	e002      	b.n	8006c84 <HAL_RCC_GetOscConfig+0x108>
  }
  else
  {
    pRCC_OscInitStruct->HSIState = RCC_HSI_OFF;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2200      	movs	r2, #0
 8006c82:	60da      	str	r2, [r3, #12]
  }

  pRCC_OscInitStruct->HSICalibrationValue = (uint32_t)((RCC->ICSCR3 & RCC_ICSCR3_HSITRIM) >> RCC_ICSCR3_HSITRIM_Pos);
 8006c84:	4b4a      	ldr	r3, [pc, #296]	; (8006db0 <HAL_RCC_GetOscConfig+0x234>)
 8006c86:	691b      	ldr	r3, [r3, #16]
 8006c88:	0c1b      	lsrs	r3, r3, #16
 8006c8a:	f003 021f 	and.w	r2, r3, #31
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	611a      	str	r2, [r3, #16]

  /* Get the LSE configuration -----------------------------------------------*/
  if ((RCC->BDCR & RCC_BDCR_LSEBYP) == RCC_BDCR_LSEBYP)
 8006c92:	4b47      	ldr	r3, [pc, #284]	; (8006db0 <HAL_RCC_GetOscConfig+0x234>)
 8006c94:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006c98:	f003 0304 	and.w	r3, r3, #4
 8006c9c:	2b04      	cmp	r3, #4
 8006c9e:	d103      	bne.n	8006ca8 <HAL_RCC_GetOscConfig+0x12c>
  {
    pRCC_OscInitStruct->LSEState = RCC_LSE_BYPASS;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2285      	movs	r2, #133	; 0x85
 8006ca4:	609a      	str	r2, [r3, #8]
 8006ca6:	e00d      	b.n	8006cc4 <HAL_RCC_GetOscConfig+0x148>
  }
  else if ((RCC->BDCR & RCC_BDCR_LSEON) == RCC_BDCR_LSEON)
 8006ca8:	4b41      	ldr	r3, [pc, #260]	; (8006db0 <HAL_RCC_GetOscConfig+0x234>)
 8006caa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006cae:	f003 0301 	and.w	r3, r3, #1
 8006cb2:	2b01      	cmp	r3, #1
 8006cb4:	d103      	bne.n	8006cbe <HAL_RCC_GetOscConfig+0x142>
  {
    pRCC_OscInitStruct->LSEState = RCC_LSE_ON;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2281      	movs	r2, #129	; 0x81
 8006cba:	609a      	str	r2, [r3, #8]
 8006cbc:	e002      	b.n	8006cc4 <HAL_RCC_GetOscConfig+0x148>
  }
  else
  {
    pRCC_OscInitStruct->LSEState = RCC_LSE_OFF;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	609a      	str	r2, [r3, #8]
  }

  /* Get the LSI configuration -----------------------------------------------*/
  if ((RCC->BDCR & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8006cc4:	4b3a      	ldr	r3, [pc, #232]	; (8006db0 <HAL_RCC_GetOscConfig+0x234>)
 8006cc6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006cca:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006cce:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006cd2:	d104      	bne.n	8006cde <HAL_RCC_GetOscConfig+0x162>
  {
    pRCC_OscInitStruct->LSIState = RCC_LSI_ON;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8006cda:	615a      	str	r2, [r3, #20]
 8006cdc:	e002      	b.n	8006ce4 <HAL_RCC_GetOscConfig+0x168>
  }
  else
  {
    pRCC_OscInitStruct->LSIState = RCC_LSI_OFF;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	615a      	str	r2, [r3, #20]
  }

  /* Get the HSI48 configuration ---------------------------------------------*/
  if ((RCC->CR & RCC_CR_HSI48ON) == RCC_CR_HSI48ON)
 8006ce4:	4b32      	ldr	r3, [pc, #200]	; (8006db0 <HAL_RCC_GetOscConfig+0x234>)
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006cec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cf0:	d104      	bne.n	8006cfc <HAL_RCC_GetOscConfig+0x180>
  {
    pRCC_OscInitStruct->HSI48State = RCC_HSI48_ON;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006cf8:	62da      	str	r2, [r3, #44]	; 0x2c
 8006cfa:	e002      	b.n	8006d02 <HAL_RCC_GetOscConfig+0x186>
  }
  else
  {
    pRCC_OscInitStruct->HSI48State = RCC_HSI48_OFF;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2200      	movs	r2, #0
 8006d00:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Get the PLL configuration -----------------------------------------------*/
  if ((RCC->CR & RCC_CR_PLL1ON) == RCC_CR_PLL1ON)
 8006d02:	4b2b      	ldr	r3, [pc, #172]	; (8006db0 <HAL_RCC_GetOscConfig+0x234>)
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006d0a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006d0e:	d103      	bne.n	8006d18 <HAL_RCC_GetOscConfig+0x19c>
  {
    pRCC_OscInitStruct->PLL.PLLState = RCC_PLL_ON;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2202      	movs	r2, #2
 8006d14:	639a      	str	r2, [r3, #56]	; 0x38
 8006d16:	e002      	b.n	8006d1e <HAL_RCC_GetOscConfig+0x1a2>
  }
  else
  {
    pRCC_OscInitStruct->PLL.PLLState = RCC_PLL_OFF;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2201      	movs	r2, #1
 8006d1c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  pRCC_OscInitStruct->PLL.PLLSource = (uint32_t)(RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8006d1e:	4b24      	ldr	r3, [pc, #144]	; (8006db0 <HAL_RCC_GetOscConfig+0x234>)
 8006d20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d22:	f003 0203 	and.w	r2, r3, #3
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	63da      	str	r2, [r3, #60]	; 0x3c
  pRCC_OscInitStruct->PLL.PLLM = (uint32_t)(((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U);
 8006d2a:	4b21      	ldr	r3, [pc, #132]	; (8006db0 <HAL_RCC_GetOscConfig+0x234>)
 8006d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d2e:	0a1b      	lsrs	r3, r3, #8
 8006d30:	f003 030f 	and.w	r3, r3, #15
 8006d34:	1c5a      	adds	r2, r3, #1
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	641a      	str	r2, [r3, #64]	; 0x40
  pRCC_OscInitStruct->PLL.PLLN = (uint32_t)(((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) >> RCC_PLL1DIVR_PLL1N_Pos) + 1U);
 8006d3a:	4b1d      	ldr	r3, [pc, #116]	; (8006db0 <HAL_RCC_GetOscConfig+0x234>)
 8006d3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d42:	1c5a      	adds	r2, r3, #1
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	649a      	str	r2, [r3, #72]	; 0x48
  pRCC_OscInitStruct->PLL.PLLQ = (uint32_t)(((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + 1U);
 8006d48:	4b19      	ldr	r3, [pc, #100]	; (8006db0 <HAL_RCC_GetOscConfig+0x234>)
 8006d4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d4c:	0c1b      	lsrs	r3, r3, #16
 8006d4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d52:	1c5a      	adds	r2, r3, #1
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	651a      	str	r2, [r3, #80]	; 0x50
  pRCC_OscInitStruct->PLL.PLLR = (uint32_t)(((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8006d58:	4b15      	ldr	r3, [pc, #84]	; (8006db0 <HAL_RCC_GetOscConfig+0x234>)
 8006d5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d5c:	0e1b      	lsrs	r3, r3, #24
 8006d5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d62:	1c5a      	adds	r2, r3, #1
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	655a      	str	r2, [r3, #84]	; 0x54
  pRCC_OscInitStruct->PLL.PLLP = (uint32_t)(((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U);
 8006d68:	4b11      	ldr	r3, [pc, #68]	; (8006db0 <HAL_RCC_GetOscConfig+0x234>)
 8006d6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d6c:	0a5b      	lsrs	r3, r3, #9
 8006d6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d72:	1c5a      	adds	r2, r3, #1
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	64da      	str	r2, [r3, #76]	; 0x4c
  pRCC_OscInitStruct->PLL.PLLRGE = (uint32_t)((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1RGE));
 8006d78:	4b0d      	ldr	r3, [pc, #52]	; (8006db0 <HAL_RCC_GetOscConfig+0x234>)
 8006d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d7c:	f003 020c 	and.w	r2, r3, #12
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	659a      	str	r2, [r3, #88]	; 0x58
  pRCC_OscInitStruct->PLL.PLLFRACN = (uint32_t)(((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8006d84:	4b0a      	ldr	r3, [pc, #40]	; (8006db0 <HAL_RCC_GetOscConfig+0x234>)
 8006d86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d88:	08db      	lsrs	r3, r3, #3
 8006d8a:	f3c3 020c 	ubfx	r2, r3, #0, #13
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	65da      	str	r2, [r3, #92]	; 0x5c
                                                 RCC_PLL1FRACR_PLL1FRACN_Pos));
  pRCC_OscInitStruct->PLL.PLLMBOOST = (uint32_t)(((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1MBOOST) >> \
 8006d92:	4b07      	ldr	r3, [pc, #28]	; (8006db0 <HAL_RCC_GetOscConfig+0x234>)
 8006d94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d96:	0b1b      	lsrs	r3, r3, #12
 8006d98:	f003 030f 	and.w	r3, r3, #15
 8006d9c:	1c5a      	adds	r2, r3, #1
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	645a      	str	r2, [r3, #68]	; 0x44
                                                  RCC_PLL1CFGR_PLL1MBOOST_Pos) + 1U);
}
 8006da2:	bf00      	nop
 8006da4:	3708      	adds	r7, #8
 8006da6:	46bd      	mov	sp, r7
 8006da8:	bd80      	pop	{r7, pc}
 8006daa:	bf00      	nop
 8006dac:	08025c54 	.word	0x08025c54
 8006db0:	46020c00 	.word	0x46020c00

08006db4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pRCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b082      	sub	sp, #8
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
 8006dbc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(pRCC_ClkInitStruct != (void *)NULL);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d104      	bne.n	8006dce <HAL_RCC_GetClockConfig+0x1a>
 8006dc4:	f240 71c7 	movw	r1, #1991	; 0x7c7
 8006dc8:	481b      	ldr	r0, [pc, #108]	; (8006e38 <HAL_RCC_GetClockConfig+0x84>)
 8006dca:	f00e fa6e 	bl	80152aa <assert_failed>
  assert_param(pFLatency != (void *)NULL);
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d104      	bne.n	8006dde <HAL_RCC_GetClockConfig+0x2a>
 8006dd4:	f44f 61f9 	mov.w	r1, #1992	; 0x7c8
 8006dd8:	4817      	ldr	r0, [pc, #92]	; (8006e38 <HAL_RCC_GetClockConfig+0x84>)
 8006dda:	f00e fa66 	bl	80152aa <assert_failed>

  /* Set all possible values for the Clock type parameter --------------------*/
  pRCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | \
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	221f      	movs	r2, #31
 8006de2:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_PCLK3;

  /* Get the SYSCLK configuration --------------------------------------------*/
  pRCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 8006de4:	4b15      	ldr	r3, [pc, #84]	; (8006e3c <HAL_RCC_GetClockConfig+0x88>)
 8006de6:	69db      	ldr	r3, [r3, #28]
 8006de8:	f003 0203 	and.w	r2, r3, #3
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_HPRE);
 8006df0:	4b12      	ldr	r3, [pc, #72]	; (8006e3c <HAL_RCC_GetClockConfig+0x88>)
 8006df2:	6a1b      	ldr	r3, [r3, #32]
 8006df4:	f003 020f 	and.w	r2, r3, #15
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_PPRE1);
 8006dfc:	4b0f      	ldr	r3, [pc, #60]	; (8006e3c <HAL_RCC_GetClockConfig+0x88>)
 8006dfe:	6a1b      	ldr	r3, [r3, #32]
 8006e00:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4);
 8006e08:	4b0c      	ldr	r3, [pc, #48]	; (8006e3c <HAL_RCC_GetClockConfig+0x88>)
 8006e0a:	6a1b      	ldr	r3, [r3, #32]
 8006e0c:	091b      	lsrs	r3, r3, #4
 8006e0e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	611a      	str	r2, [r3, #16]

  /* Get the APB3 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CFGR3 & RCC_CFGR3_PPRE3);
 8006e16:	4b09      	ldr	r3, [pc, #36]	; (8006e3c <HAL_RCC_GetClockConfig+0x88>)
 8006e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e1a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	615a      	str	r2, [r3, #20]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006e22:	4b07      	ldr	r3, [pc, #28]	; (8006e40 <HAL_RCC_GetClockConfig+0x8c>)
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f003 020f 	and.w	r2, r3, #15
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	601a      	str	r2, [r3, #0]
}
 8006e2e:	bf00      	nop
 8006e30:	3708      	adds	r7, #8
 8006e32:	46bd      	mov	sp, r7
 8006e34:	bd80      	pop	{r7, pc}
 8006e36:	bf00      	nop
 8006e38:	08025c54 	.word	0x08025c54
 8006e3c:	46020c00 	.word	0x46020c00
 8006e40:	40022000 	.word	0x40022000

08006e44 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b086      	sub	sp, #24
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006e4c:	4b3e      	ldr	r3, [pc, #248]	; (8006f48 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8006e4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006e52:	f003 0304 	and.w	r3, r3, #4
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d003      	beq.n	8006e62 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006e5a:	f7fe f8af 	bl	8004fbc <HAL_PWREx_GetVoltageRange>
 8006e5e:	6178      	str	r0, [r7, #20]
 8006e60:	e019      	b.n	8006e96 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006e62:	4b39      	ldr	r3, [pc, #228]	; (8006f48 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8006e64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006e68:	4a37      	ldr	r2, [pc, #220]	; (8006f48 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8006e6a:	f043 0304 	orr.w	r3, r3, #4
 8006e6e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8006e72:	4b35      	ldr	r3, [pc, #212]	; (8006f48 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8006e74:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006e78:	f003 0304 	and.w	r3, r3, #4
 8006e7c:	60fb      	str	r3, [r7, #12]
 8006e7e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006e80:	f7fe f89c 	bl	8004fbc <HAL_PWREx_GetVoltageRange>
 8006e84:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006e86:	4b30      	ldr	r3, [pc, #192]	; (8006f48 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8006e88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006e8c:	4a2e      	ldr	r2, [pc, #184]	; (8006f48 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8006e8e:	f023 0304 	bic.w	r3, r3, #4
 8006e92:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8006e96:	697b      	ldr	r3, [r7, #20]
 8006e98:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006e9c:	d003      	beq.n	8006ea6 <RCC_SetFlashLatencyFromMSIRange+0x62>
 8006e9e:	697b      	ldr	r3, [r7, #20]
 8006ea0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006ea4:	d109      	bne.n	8006eba <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006eac:	d202      	bcs.n	8006eb4 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8006eae:	2301      	movs	r3, #1
 8006eb0:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8006eb2:	e033      	b.n	8006f1c <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8006eb8:	e030      	b.n	8006f1c <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006ec0:	d208      	bcs.n	8006ed4 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8006ec2:	697b      	ldr	r3, [r7, #20]
 8006ec4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ec8:	d102      	bne.n	8006ed0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8006eca:	2303      	movs	r3, #3
 8006ecc:	613b      	str	r3, [r7, #16]
 8006ece:	e025      	b.n	8006f1c <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8006ed0:	2301      	movs	r3, #1
 8006ed2:	e035      	b.n	8006f40 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006eda:	d90f      	bls.n	8006efc <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8006edc:	697b      	ldr	r3, [r7, #20]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d109      	bne.n	8006ef6 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006ee8:	d902      	bls.n	8006ef0 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8006eea:	2300      	movs	r3, #0
 8006eec:	613b      	str	r3, [r7, #16]
 8006eee:	e015      	b.n	8006f1c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8006ef0:	2301      	movs	r3, #1
 8006ef2:	613b      	str	r3, [r7, #16]
 8006ef4:	e012      	b.n	8006f1c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	613b      	str	r3, [r7, #16]
 8006efa:	e00f      	b.n	8006f1c <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006f02:	d109      	bne.n	8006f18 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8006f04:	697b      	ldr	r3, [r7, #20]
 8006f06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f0a:	d102      	bne.n	8006f12 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8006f0c:	2301      	movs	r3, #1
 8006f0e:	613b      	str	r3, [r7, #16]
 8006f10:	e004      	b.n	8006f1c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8006f12:	2302      	movs	r3, #2
 8006f14:	613b      	str	r3, [r7, #16]
 8006f16:	e001      	b.n	8006f1c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8006f18:	2301      	movs	r3, #1
 8006f1a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006f1c:	4b0b      	ldr	r3, [pc, #44]	; (8006f4c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f023 020f 	bic.w	r2, r3, #15
 8006f24:	4909      	ldr	r1, [pc, #36]	; (8006f4c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8006f26:	693b      	ldr	r3, [r7, #16]
 8006f28:	4313      	orrs	r3, r2
 8006f2a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8006f2c:	4b07      	ldr	r3, [pc, #28]	; (8006f4c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f003 030f 	and.w	r3, r3, #15
 8006f34:	693a      	ldr	r2, [r7, #16]
 8006f36:	429a      	cmp	r2, r3
 8006f38:	d001      	beq.n	8006f3e <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8006f3a:	2301      	movs	r3, #1
 8006f3c:	e000      	b.n	8006f40 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8006f3e:	2300      	movs	r3, #0
}
 8006f40:	4618      	mov	r0, r3
 8006f42:	3718      	adds	r7, #24
 8006f44:	46bd      	mov	sp, r7
 8006f46:	bd80      	pop	{r7, pc}
 8006f48:	46020c00 	.word	0x46020c00
 8006f4c:	40022000 	.word	0x40022000

08006f50 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8006f50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006f54:	b0be      	sub	sp, #248	; 0xf8
 8006f56:	af00      	add	r7, sp, #0
 8006f58:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	f887 30f3 	strb.w	r3, [r7, #243]	; 0xf3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006f62:	2300      	movs	r3, #0
 8006f64:	f887 30f2 	strb.w	r3, [r7, #242]	; 0xf2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));
 8006f68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f70:	f022 4460 	bic.w	r4, r2, #3758096384	; 0xe0000000
 8006f74:	2500      	movs	r5, #0
 8006f76:	ea54 0305 	orrs.w	r3, r4, r5
 8006f7a:	d009      	beq.n	8006f90 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8006f7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f84:	f002 4860 	and.w	r8, r2, #3758096384	; 0xe0000000
 8006f88:	4699      	mov	r9, r3
 8006f8a:	ea58 0309 	orrs.w	r3, r8, r9
 8006f8e:	d004      	beq.n	8006f9a <HAL_RCCEx_PeriphCLKConfig+0x4a>
 8006f90:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006f94:	48bc      	ldr	r0, [pc, #752]	; (8007288 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006f96:	f00e f988 	bl	80152aa <assert_failed>

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006f9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fa2:	f002 0a01 	and.w	sl, r2, #1
 8006fa6:	f04f 0b00 	mov.w	fp, #0
 8006faa:	ea5a 030b 	orrs.w	r3, sl, fp
 8006fae:	d024      	beq.n	8006ffa <HAL_RCCEx_PeriphCLKConfig+0xaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));
 8006fb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d013      	beq.n	8006fe2 <HAL_RCCEx_PeriphCLKConfig+0x92>
 8006fba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fc0:	2b01      	cmp	r3, #1
 8006fc2:	d00e      	beq.n	8006fe2 <HAL_RCCEx_PeriphCLKConfig+0x92>
 8006fc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fca:	2b02      	cmp	r3, #2
 8006fcc:	d009      	beq.n	8006fe2 <HAL_RCCEx_PeriphCLKConfig+0x92>
 8006fce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fd4:	2b03      	cmp	r3, #3
 8006fd6:	d004      	beq.n	8006fe2 <HAL_RCCEx_PeriphCLKConfig+0x92>
 8006fd8:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8006fdc:	48aa      	ldr	r0, [pc, #680]	; (8007288 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006fde:	f00e f964 	bl	80152aa <assert_failed>

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8006fe2:	4baa      	ldr	r3, [pc, #680]	; (800728c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006fe4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006fe8:	f023 0103 	bic.w	r1, r3, #3
 8006fec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ff0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ff2:	4aa6      	ldr	r2, [pc, #664]	; (800728c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006ff4:	430b      	orrs	r3, r1
 8006ff6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006ffa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007002:	f002 0302 	and.w	r3, r2, #2
 8007006:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800700a:	2300      	movs	r3, #0
 800700c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007010:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007014:	460b      	mov	r3, r1
 8007016:	4313      	orrs	r3, r2
 8007018:	d024      	beq.n	8007064 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));
 800701a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800701e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007020:	2b00      	cmp	r3, #0
 8007022:	d013      	beq.n	800704c <HAL_RCCEx_PeriphCLKConfig+0xfc>
 8007024:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007028:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800702a:	2b04      	cmp	r3, #4
 800702c:	d00e      	beq.n	800704c <HAL_RCCEx_PeriphCLKConfig+0xfc>
 800702e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007032:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007034:	2b08      	cmp	r3, #8
 8007036:	d009      	beq.n	800704c <HAL_RCCEx_PeriphCLKConfig+0xfc>
 8007038:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800703c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800703e:	2b0c      	cmp	r3, #12
 8007040:	d004      	beq.n	800704c <HAL_RCCEx_PeriphCLKConfig+0xfc>
 8007042:	f44f 71dd 	mov.w	r1, #442	; 0x1ba
 8007046:	4890      	ldr	r0, [pc, #576]	; (8007288 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007048:	f00e f92f 	bl	80152aa <assert_failed>

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 800704c:	4b8f      	ldr	r3, [pc, #572]	; (800728c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800704e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007052:	f023 010c 	bic.w	r1, r3, #12
 8007056:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800705a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800705c:	4a8b      	ldr	r2, [pc, #556]	; (800728c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800705e:	430b      	orrs	r3, r1
 8007060:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007064:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800706c:	f002 0304 	and.w	r3, r2, #4
 8007070:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007074:	2300      	movs	r3, #0
 8007076:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800707a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800707e:	460b      	mov	r3, r1
 8007080:	4313      	orrs	r3, r2
 8007082:	d024      	beq.n	80070ce <HAL_RCCEx_PeriphCLKConfig+0x17e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));
 8007084:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007088:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800708a:	2b00      	cmp	r3, #0
 800708c:	d013      	beq.n	80070b6 <HAL_RCCEx_PeriphCLKConfig+0x166>
 800708e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007092:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007094:	2b10      	cmp	r3, #16
 8007096:	d00e      	beq.n	80070b6 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8007098:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800709c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800709e:	2b20      	cmp	r3, #32
 80070a0:	d009      	beq.n	80070b6 <HAL_RCCEx_PeriphCLKConfig+0x166>
 80070a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070a8:	2b30      	cmp	r3, #48	; 0x30
 80070aa:	d004      	beq.n	80070b6 <HAL_RCCEx_PeriphCLKConfig+0x166>
 80070ac:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 80070b0:	4875      	ldr	r0, [pc, #468]	; (8007288 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80070b2:	f00e f8fa 	bl	80152aa <assert_failed>

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 80070b6:	4b75      	ldr	r3, [pc, #468]	; (800728c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80070b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80070bc:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80070c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070c6:	4a71      	ldr	r2, [pc, #452]	; (800728c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80070c8:	430b      	orrs	r3, r1
 80070ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80070ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070d6:	f002 0308 	and.w	r3, r2, #8
 80070da:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80070de:	2300      	movs	r3, #0
 80070e0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80070e4:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80070e8:	460b      	mov	r3, r1
 80070ea:	4313      	orrs	r3, r2
 80070ec:	d024      	beq.n	8007138 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));
 80070ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d013      	beq.n	8007120 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
 80070f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070fe:	2b40      	cmp	r3, #64	; 0x40
 8007100:	d00e      	beq.n	8007120 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
 8007102:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007106:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007108:	2b80      	cmp	r3, #128	; 0x80
 800710a:	d009      	beq.n	8007120 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
 800710c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007110:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007112:	2bc0      	cmp	r3, #192	; 0xc0
 8007114:	d004      	beq.n	8007120 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
 8007116:	f44f 71e7 	mov.w	r1, #462	; 0x1ce
 800711a:	485b      	ldr	r0, [pc, #364]	; (8007288 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800711c:	f00e f8c5 	bl	80152aa <assert_failed>

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8007120:	4b5a      	ldr	r3, [pc, #360]	; (800728c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007122:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007126:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800712a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800712e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007130:	4a56      	ldr	r2, [pc, #344]	; (800728c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007132:	430b      	orrs	r3, r1
 8007134:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007138:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800713c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007140:	f002 0310 	and.w	r3, r2, #16
 8007144:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007148:	2300      	movs	r3, #0
 800714a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800714e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007152:	460b      	mov	r3, r1
 8007154:	4313      	orrs	r3, r2
 8007156:	d027      	beq.n	80071a8 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));
 8007158:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800715c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800715e:	2b00      	cmp	r3, #0
 8007160:	d016      	beq.n	8007190 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8007162:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007166:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007168:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800716c:	d010      	beq.n	8007190 <HAL_RCCEx_PeriphCLKConfig+0x240>
 800716e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007172:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007174:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007178:	d00a      	beq.n	8007190 <HAL_RCCEx_PeriphCLKConfig+0x240>
 800717a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800717e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007180:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007184:	d004      	beq.n	8007190 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8007186:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 800718a:	483f      	ldr	r0, [pc, #252]	; (8007288 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800718c:	f00e f88d 	bl	80152aa <assert_failed>

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8007190:	4b3e      	ldr	r3, [pc, #248]	; (800728c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007192:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007196:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800719a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800719e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071a0:	4a3a      	ldr	r2, [pc, #232]	; (800728c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80071a2:	430b      	orrs	r3, r1
 80071a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80071a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071b0:	f002 0320 	and.w	r3, r2, #32
 80071b4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80071b8:	2300      	movs	r3, #0
 80071ba:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80071be:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80071c2:	460b      	mov	r3, r1
 80071c4:	4313      	orrs	r3, r2
 80071c6:	d029      	beq.n	800721c <HAL_RCCEx_PeriphCLKConfig+0x2cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));
 80071c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d018      	beq.n	8007204 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80071d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80071d8:	2b01      	cmp	r3, #1
 80071da:	d013      	beq.n	8007204 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80071dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80071e2:	2b02      	cmp	r3, #2
 80071e4:	d00e      	beq.n	8007204 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80071e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80071ec:	2b03      	cmp	r3, #3
 80071ee:	d009      	beq.n	8007204 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80071f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80071f6:	2b04      	cmp	r3, #4
 80071f8:	d004      	beq.n	8007204 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80071fa:	f240 11ed 	movw	r1, #493	; 0x1ed
 80071fe:	4822      	ldr	r0, [pc, #136]	; (8007288 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007200:	f00e f853 	bl	80152aa <assert_failed>

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8007204:	4b21      	ldr	r3, [pc, #132]	; (800728c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007206:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800720a:	f023 0107 	bic.w	r1, r3, #7
 800720e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007212:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007214:	4a1d      	ldr	r2, [pc, #116]	; (800728c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007216:	430b      	orrs	r3, r1
 8007218:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800721c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007224:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8007228:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800722c:	2300      	movs	r3, #0
 800722e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007232:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8007236:	460b      	mov	r3, r1
 8007238:	4313      	orrs	r3, r2
 800723a:	d02d      	beq.n	8007298 <HAL_RCCEx_PeriphCLKConfig+0x348>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));
 800723c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007240:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007242:	2b00      	cmp	r3, #0
 8007244:	d016      	beq.n	8007274 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8007246:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800724a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800724c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007250:	d010      	beq.n	8007274 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8007252:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007256:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007258:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800725c:	d00a      	beq.n	8007274 <HAL_RCCEx_PeriphCLKConfig+0x324>
 800725e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007262:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007264:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007268:	d004      	beq.n	8007274 <HAL_RCCEx_PeriphCLKConfig+0x324>
 800726a:	f240 11f7 	movw	r1, #503	; 0x1f7
 800726e:	4806      	ldr	r0, [pc, #24]	; (8007288 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007270:	f00e f81b 	bl	80152aa <assert_failed>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8007274:	4b05      	ldr	r3, [pc, #20]	; (800728c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007276:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800727a:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 800727e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007282:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007284:	e004      	b.n	8007290 <HAL_RCCEx_PeriphCLKConfig+0x340>
 8007286:	bf00      	nop
 8007288:	08025cbc 	.word	0x08025cbc
 800728c:	46020c00 	.word	0x46020c00
 8007290:	4aab      	ldr	r2, [pc, #684]	; (8007540 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007292:	430b      	orrs	r3, r1
 8007294:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007298:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800729c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072a0:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80072a4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80072a8:	2300      	movs	r3, #0
 80072aa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80072ae:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80072b2:	460b      	mov	r3, r1
 80072b4:	4313      	orrs	r3, r2
 80072b6:	d027      	beq.n	8007308 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));
 80072b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d016      	beq.n	80072f0 <HAL_RCCEx_PeriphCLKConfig+0x3a0>
 80072c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80072c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072cc:	d010      	beq.n	80072f0 <HAL_RCCEx_PeriphCLKConfig+0x3a0>
 80072ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80072d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80072d8:	d00a      	beq.n	80072f0 <HAL_RCCEx_PeriphCLKConfig+0x3a0>
 80072da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80072e0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80072e4:	d004      	beq.n	80072f0 <HAL_RCCEx_PeriphCLKConfig+0x3a0>
 80072e6:	f240 2101 	movw	r1, #513	; 0x201
 80072ea:	4896      	ldr	r0, [pc, #600]	; (8007544 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80072ec:	f00d ffdd 	bl	80152aa <assert_failed>

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 80072f0:	4b93      	ldr	r3, [pc, #588]	; (8007540 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80072f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80072f6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80072fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007300:	4a8f      	ldr	r2, [pc, #572]	; (8007540 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007302:	430b      	orrs	r3, r1
 8007304:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007308:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800730c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007310:	f402 7380 	and.w	r3, r2, #256	; 0x100
 8007314:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007318:	2300      	movs	r3, #0
 800731a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800731e:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8007322:	460b      	mov	r3, r1
 8007324:	4313      	orrs	r3, r2
 8007326:	d024      	beq.n	8007372 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));
 8007328:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800732c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800732e:	2b00      	cmp	r3, #0
 8007330:	d013      	beq.n	800735a <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8007332:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007336:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007338:	2b40      	cmp	r3, #64	; 0x40
 800733a:	d00e      	beq.n	800735a <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800733c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007340:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007342:	2b80      	cmp	r3, #128	; 0x80
 8007344:	d009      	beq.n	800735a <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8007346:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800734a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800734c:	2bc0      	cmp	r3, #192	; 0xc0
 800734e:	d004      	beq.n	800735a <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8007350:	f240 210b 	movw	r1, #523	; 0x20b
 8007354:	487b      	ldr	r0, [pc, #492]	; (8007544 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8007356:	f00d ffa8 	bl	80152aa <assert_failed>

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 800735a:	4b79      	ldr	r3, [pc, #484]	; (8007540 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800735c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007360:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8007364:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007368:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800736a:	4a75      	ldr	r2, [pc, #468]	; (8007540 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800736c:	430b      	orrs	r3, r1
 800736e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007372:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800737a:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800737e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007382:	2300      	movs	r3, #0
 8007384:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007388:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800738c:	460b      	mov	r3, r1
 800738e:	4313      	orrs	r3, r2
 8007390:	d027      	beq.n	80073e2 <HAL_RCCEx_PeriphCLKConfig+0x492>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));
 8007392:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007396:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007398:	2b00      	cmp	r3, #0
 800739a:	d016      	beq.n	80073ca <HAL_RCCEx_PeriphCLKConfig+0x47a>
 800739c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80073a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80073a6:	d010      	beq.n	80073ca <HAL_RCCEx_PeriphCLKConfig+0x47a>
 80073a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80073ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80073b2:	d00a      	beq.n	80073ca <HAL_RCCEx_PeriphCLKConfig+0x47a>
 80073b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80073ba:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80073be:	d004      	beq.n	80073ca <HAL_RCCEx_PeriphCLKConfig+0x47a>
 80073c0:	f240 2115 	movw	r1, #533	; 0x215
 80073c4:	485f      	ldr	r0, [pc, #380]	; (8007544 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80073c6:	f00d ff70 	bl	80152aa <assert_failed>

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 80073ca:	4b5d      	ldr	r3, [pc, #372]	; (8007540 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80073cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80073d0:	f423 4140 	bic.w	r1, r3, #49152	; 0xc000
 80073d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80073da:	4a59      	ldr	r2, [pc, #356]	; (8007540 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80073dc:	430b      	orrs	r3, r1
 80073de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80073e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073ea:	f402 7300 	and.w	r3, r2, #512	; 0x200
 80073ee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80073f2:	2300      	movs	r3, #0
 80073f4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80073f8:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80073fc:	460b      	mov	r3, r1
 80073fe:	4313      	orrs	r3, r2
 8007400:	d027      	beq.n	8007452 <HAL_RCCEx_PeriphCLKConfig+0x502>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
 8007402:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007406:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007408:	2b00      	cmp	r3, #0
 800740a:	d016      	beq.n	800743a <HAL_RCCEx_PeriphCLKConfig+0x4ea>
 800740c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007410:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007412:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007416:	d010      	beq.n	800743a <HAL_RCCEx_PeriphCLKConfig+0x4ea>
 8007418:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800741c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800741e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007422:	d00a      	beq.n	800743a <HAL_RCCEx_PeriphCLKConfig+0x4ea>
 8007424:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007428:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800742a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800742e:	d004      	beq.n	800743a <HAL_RCCEx_PeriphCLKConfig+0x4ea>
 8007430:	f240 2136 	movw	r1, #566	; 0x236
 8007434:	4843      	ldr	r0, [pc, #268]	; (8007544 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8007436:	f00d ff38 	bl	80152aa <assert_failed>
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 800743a:	4b41      	ldr	r3, [pc, #260]	; (8007540 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800743c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007440:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 8007444:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007448:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800744a:	4a3d      	ldr	r2, [pc, #244]	; (8007540 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800744c:	430b      	orrs	r3, r1
 800744e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007452:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800745a:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800745e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007462:	2300      	movs	r3, #0
 8007464:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007468:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800746c:	460b      	mov	r3, r1
 800746e:	4313      	orrs	r3, r2
 8007470:	d027      	beq.n	80074c2 <HAL_RCCEx_PeriphCLKConfig+0x572>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
 8007472:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007476:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007478:	2b00      	cmp	r3, #0
 800747a:	d016      	beq.n	80074aa <HAL_RCCEx_PeriphCLKConfig+0x55a>
 800747c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007480:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007482:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007486:	d010      	beq.n	80074aa <HAL_RCCEx_PeriphCLKConfig+0x55a>
 8007488:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800748c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800748e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007492:	d00a      	beq.n	80074aa <HAL_RCCEx_PeriphCLKConfig+0x55a>
 8007494:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007498:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800749a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800749e:	d004      	beq.n	80074aa <HAL_RCCEx_PeriphCLKConfig+0x55a>
 80074a0:	f240 213d 	movw	r1, #573	; 0x23d
 80074a4:	4827      	ldr	r0, [pc, #156]	; (8007544 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80074a6:	f00d ff00 	bl	80152aa <assert_failed>
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 80074aa:	4b25      	ldr	r3, [pc, #148]	; (8007540 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80074ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80074b0:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 80074b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80074ba:	4a21      	ldr	r2, [pc, #132]	; (8007540 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80074bc:	430b      	orrs	r3, r1
 80074be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 80074c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074ca:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80074ce:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80074d2:	2300      	movs	r3, #0
 80074d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80074d8:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80074dc:	460b      	mov	r3, r1
 80074de:	4313      	orrs	r3, r2
 80074e0:	d032      	beq.n	8007548 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
 80074e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d019      	beq.n	8007522 <HAL_RCCEx_PeriphCLKConfig+0x5d2>
 80074ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80074f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80074fa:	d012      	beq.n	8007522 <HAL_RCCEx_PeriphCLKConfig+0x5d2>
 80074fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007500:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007504:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007508:	d00b      	beq.n	8007522 <HAL_RCCEx_PeriphCLKConfig+0x5d2>
 800750a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800750e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007512:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007516:	d004      	beq.n	8007522 <HAL_RCCEx_PeriphCLKConfig+0x5d2>
 8007518:	f44f 7111 	mov.w	r1, #580	; 0x244
 800751c:	4809      	ldr	r0, [pc, #36]	; (8007544 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800751e:	f00d fec4 	bl	80152aa <assert_failed>
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8007522:	4b07      	ldr	r3, [pc, #28]	; (8007540 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007524:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007528:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800752c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007530:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007534:	4a02      	ldr	r2, [pc, #8]	; (8007540 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007536:	430b      	orrs	r3, r1
 8007538:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800753c:	e004      	b.n	8007548 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
 800753e:	bf00      	nop
 8007540:	46020c00 	.word	0x46020c00
 8007544:	08025cbc 	.word	0x08025cbc
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007548:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800754c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007550:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8007554:	67bb      	str	r3, [r7, #120]	; 0x78
 8007556:	2300      	movs	r3, #0
 8007558:	67fb      	str	r3, [r7, #124]	; 0x7c
 800755a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800755e:	460b      	mov	r3, r1
 8007560:	4313      	orrs	r3, r2
 8007562:	d06f      	beq.n	8007644 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));
 8007564:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007568:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800756c:	2b00      	cmp	r3, #0
 800756e:	d01c      	beq.n	80075aa <HAL_RCCEx_PeriphCLKConfig+0x65a>
 8007570:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007574:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007578:	2b20      	cmp	r3, #32
 800757a:	d016      	beq.n	80075aa <HAL_RCCEx_PeriphCLKConfig+0x65a>
 800757c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007580:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007584:	2b40      	cmp	r3, #64	; 0x40
 8007586:	d010      	beq.n	80075aa <HAL_RCCEx_PeriphCLKConfig+0x65a>
 8007588:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800758c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007590:	2b60      	cmp	r3, #96	; 0x60
 8007592:	d00a      	beq.n	80075aa <HAL_RCCEx_PeriphCLKConfig+0x65a>
 8007594:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007598:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800759c:	2b80      	cmp	r3, #128	; 0x80
 800759e:	d004      	beq.n	80075aa <HAL_RCCEx_PeriphCLKConfig+0x65a>
 80075a0:	f44f 7113 	mov.w	r1, #588	; 0x24c
 80075a4:	48ab      	ldr	r0, [pc, #684]	; (8007854 <HAL_RCCEx_PeriphCLKConfig+0x904>)
 80075a6:	f00d fe80 	bl	80152aa <assert_failed>

    switch (pPeriphClkInit->Sai1ClockSelection)
 80075aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075b2:	2b80      	cmp	r3, #128	; 0x80
 80075b4:	d02d      	beq.n	8007612 <HAL_RCCEx_PeriphCLKConfig+0x6c2>
 80075b6:	2b80      	cmp	r3, #128	; 0x80
 80075b8:	d827      	bhi.n	800760a <HAL_RCCEx_PeriphCLKConfig+0x6ba>
 80075ba:	2b60      	cmp	r3, #96	; 0x60
 80075bc:	d02b      	beq.n	8007616 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
 80075be:	2b60      	cmp	r3, #96	; 0x60
 80075c0:	d823      	bhi.n	800760a <HAL_RCCEx_PeriphCLKConfig+0x6ba>
 80075c2:	2b40      	cmp	r3, #64	; 0x40
 80075c4:	d006      	beq.n	80075d4 <HAL_RCCEx_PeriphCLKConfig+0x684>
 80075c6:	2b40      	cmp	r3, #64	; 0x40
 80075c8:	d81f      	bhi.n	800760a <HAL_RCCEx_PeriphCLKConfig+0x6ba>
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d009      	beq.n	80075e2 <HAL_RCCEx_PeriphCLKConfig+0x692>
 80075ce:	2b20      	cmp	r3, #32
 80075d0:	d011      	beq.n	80075f6 <HAL_RCCEx_PeriphCLKConfig+0x6a6>
 80075d2:	e01a      	b.n	800760a <HAL_RCCEx_PeriphCLKConfig+0x6ba>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80075d4:	4ba0      	ldr	r3, [pc, #640]	; (8007858 <HAL_RCCEx_PeriphCLKConfig+0x908>)
 80075d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075d8:	4a9f      	ldr	r2, [pc, #636]	; (8007858 <HAL_RCCEx_PeriphCLKConfig+0x908>)
 80075da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80075de:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 80075e0:	e01a      	b.n	8007618 <HAL_RCCEx_PeriphCLKConfig+0x6c8>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80075e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075e6:	3308      	adds	r3, #8
 80075e8:	4618      	mov	r0, r3
 80075ea:	f002 fcc7 	bl	8009f7c <RCCEx_PLL2_Config>
 80075ee:	4603      	mov	r3, r0
 80075f0:	f887 30f3 	strb.w	r3, [r7, #243]	; 0xf3
        /* SAI1 clock source config set later after clock selection check */
        break;
 80075f4:	e010      	b.n	8007618 <HAL_RCCEx_PeriphCLKConfig+0x6c8>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80075f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075fa:	332c      	adds	r3, #44	; 0x2c
 80075fc:	4618      	mov	r0, r3
 80075fe:	f002 fda9 	bl	800a154 <RCCEx_PLL3_Config>
 8007602:	4603      	mov	r3, r0
 8007604:	f887 30f3 	strb.w	r3, [r7, #243]	; 0xf3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8007608:	e006      	b.n	8007618 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800760a:	2301      	movs	r3, #1
 800760c:	f887 30f3 	strb.w	r3, [r7, #243]	; 0xf3
        break;
 8007610:	e002      	b.n	8007618 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
        break;
 8007612:	bf00      	nop
 8007614:	e000      	b.n	8007618 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
        break;
 8007616:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007618:	f897 30f3 	ldrb.w	r3, [r7, #243]	; 0xf3
 800761c:	2b00      	cmp	r3, #0
 800761e:	d10d      	bne.n	800763c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8007620:	4b8d      	ldr	r3, [pc, #564]	; (8007858 <HAL_RCCEx_PeriphCLKConfig+0x908>)
 8007622:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007626:	f023 01e0 	bic.w	r1, r3, #224	; 0xe0
 800762a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800762e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007632:	4a89      	ldr	r2, [pc, #548]	; (8007858 <HAL_RCCEx_PeriphCLKConfig+0x908>)
 8007634:	430b      	orrs	r3, r1
 8007636:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800763a:	e003      	b.n	8007644 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800763c:	f897 30f3 	ldrb.w	r3, [r7, #243]	; 0xf3
 8007640:	f887 30f2 	strb.w	r3, [r7, #242]	; 0xf2
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8007644:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800764c:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8007650:	673b      	str	r3, [r7, #112]	; 0x70
 8007652:	2300      	movs	r3, #0
 8007654:	677b      	str	r3, [r7, #116]	; 0x74
 8007656:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800765a:	460b      	mov	r3, r1
 800765c:	4313      	orrs	r3, r2
 800765e:	d07a      	beq.n	8007756 <HAL_RCCEx_PeriphCLKConfig+0x806>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));
 8007660:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007664:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007668:	2b00      	cmp	r3, #0
 800766a:	d020      	beq.n	80076ae <HAL_RCCEx_PeriphCLKConfig+0x75e>
 800766c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007670:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007674:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007678:	d019      	beq.n	80076ae <HAL_RCCEx_PeriphCLKConfig+0x75e>
 800767a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800767e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007682:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007686:	d012      	beq.n	80076ae <HAL_RCCEx_PeriphCLKConfig+0x75e>
 8007688:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800768c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007690:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007694:	d00b      	beq.n	80076ae <HAL_RCCEx_PeriphCLKConfig+0x75e>
 8007696:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800769a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800769e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80076a2:	d004      	beq.n	80076ae <HAL_RCCEx_PeriphCLKConfig+0x75e>
 80076a4:	f240 217f 	movw	r1, #639	; 0x27f
 80076a8:	486a      	ldr	r0, [pc, #424]	; (8007854 <HAL_RCCEx_PeriphCLKConfig+0x904>)
 80076aa:	f00d fdfe 	bl	80152aa <assert_failed>

    switch (pPeriphClkInit->Sai2ClockSelection)
 80076ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80076b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80076ba:	d033      	beq.n	8007724 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
 80076bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80076c0:	d82c      	bhi.n	800771c <HAL_RCCEx_PeriphCLKConfig+0x7cc>
 80076c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80076c6:	d02f      	beq.n	8007728 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
 80076c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80076cc:	d826      	bhi.n	800771c <HAL_RCCEx_PeriphCLKConfig+0x7cc>
 80076ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80076d2:	d008      	beq.n	80076e6 <HAL_RCCEx_PeriphCLKConfig+0x796>
 80076d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80076d8:	d820      	bhi.n	800771c <HAL_RCCEx_PeriphCLKConfig+0x7cc>
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d00a      	beq.n	80076f4 <HAL_RCCEx_PeriphCLKConfig+0x7a4>
 80076de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80076e2:	d011      	beq.n	8007708 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
 80076e4:	e01a      	b.n	800771c <HAL_RCCEx_PeriphCLKConfig+0x7cc>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80076e6:	4b5c      	ldr	r3, [pc, #368]	; (8007858 <HAL_RCCEx_PeriphCLKConfig+0x908>)
 80076e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076ea:	4a5b      	ldr	r2, [pc, #364]	; (8007858 <HAL_RCCEx_PeriphCLKConfig+0x908>)
 80076ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80076f0:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 80076f2:	e01a      	b.n	800772a <HAL_RCCEx_PeriphCLKConfig+0x7da>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80076f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076f8:	3308      	adds	r3, #8
 80076fa:	4618      	mov	r0, r3
 80076fc:	f002 fc3e 	bl	8009f7c <RCCEx_PLL2_Config>
 8007700:	4603      	mov	r3, r0
 8007702:	f887 30f3 	strb.w	r3, [r7, #243]	; 0xf3
        /* SAI2 clock source config set later after clock selection check */
        break;
 8007706:	e010      	b.n	800772a <HAL_RCCEx_PeriphCLKConfig+0x7da>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007708:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800770c:	332c      	adds	r3, #44	; 0x2c
 800770e:	4618      	mov	r0, r3
 8007710:	f002 fd20 	bl	800a154 <RCCEx_PLL3_Config>
 8007714:	4603      	mov	r3, r0
 8007716:	f887 30f3 	strb.w	r3, [r7, #243]	; 0xf3
        /* SAI2 clock source config set later after clock selection check */
        break;
 800771a:	e006      	b.n	800772a <HAL_RCCEx_PeriphCLKConfig+0x7da>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800771c:	2301      	movs	r3, #1
 800771e:	f887 30f3 	strb.w	r3, [r7, #243]	; 0xf3
        break;
 8007722:	e002      	b.n	800772a <HAL_RCCEx_PeriphCLKConfig+0x7da>
        break;
 8007724:	bf00      	nop
 8007726:	e000      	b.n	800772a <HAL_RCCEx_PeriphCLKConfig+0x7da>
        break;
 8007728:	bf00      	nop
    }

    if (ret == HAL_OK)
 800772a:	f897 30f3 	ldrb.w	r3, [r7, #243]	; 0xf3
 800772e:	2b00      	cmp	r3, #0
 8007730:	d10d      	bne.n	800774e <HAL_RCCEx_PeriphCLKConfig+0x7fe>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8007732:	4b49      	ldr	r3, [pc, #292]	; (8007858 <HAL_RCCEx_PeriphCLKConfig+0x908>)
 8007734:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007738:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 800773c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007740:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007744:	4a44      	ldr	r2, [pc, #272]	; (8007858 <HAL_RCCEx_PeriphCLKConfig+0x908>)
 8007746:	430b      	orrs	r3, r1
 8007748:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800774c:	e003      	b.n	8007756 <HAL_RCCEx_PeriphCLKConfig+0x806>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800774e:	f897 30f3 	ldrb.w	r3, [r7, #243]	; 0xf3
 8007752:	f887 30f2 	strb.w	r3, [r7, #242]	; 0xf2
    }
  }

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8007756:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800775a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800775e:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8007762:	66bb      	str	r3, [r7, #104]	; 0x68
 8007764:	2300      	movs	r3, #0
 8007766:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007768:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800776c:	460b      	mov	r3, r1
 800776e:	4313      	orrs	r3, r2
 8007770:	d078      	beq.n	8007864 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));
 8007772:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007776:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800777a:	2b00      	cmp	r3, #0
 800777c:	d027      	beq.n	80077ce <HAL_RCCEx_PeriphCLKConfig+0x87e>
 800777e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007782:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007786:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800778a:	d020      	beq.n	80077ce <HAL_RCCEx_PeriphCLKConfig+0x87e>
 800778c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007790:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007794:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007798:	d019      	beq.n	80077ce <HAL_RCCEx_PeriphCLKConfig+0x87e>
 800779a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800779e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80077a2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80077a6:	d012      	beq.n	80077ce <HAL_RCCEx_PeriphCLKConfig+0x87e>
 80077a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077ac:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80077b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80077b4:	d00b      	beq.n	80077ce <HAL_RCCEx_PeriphCLKConfig+0x87e>
 80077b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077ba:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80077be:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80077c2:	d004      	beq.n	80077ce <HAL_RCCEx_PeriphCLKConfig+0x87e>
 80077c4:	f240 21b1 	movw	r1, #689	; 0x2b1
 80077c8:	4822      	ldr	r0, [pc, #136]	; (8007854 <HAL_RCCEx_PeriphCLKConfig+0x904>)
 80077ca:	f00d fd6e 	bl	80152aa <assert_failed>

    switch (pPeriphClkInit->AdcDacClockSelection)
 80077ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077d2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80077d6:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80077da:	d028      	beq.n	800782e <HAL_RCCEx_PeriphCLKConfig+0x8de>
 80077dc:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80077e0:	d821      	bhi.n	8007826 <HAL_RCCEx_PeriphCLKConfig+0x8d6>
 80077e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80077e6:	d022      	beq.n	800782e <HAL_RCCEx_PeriphCLKConfig+0x8de>
 80077e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80077ec:	d81b      	bhi.n	8007826 <HAL_RCCEx_PeriphCLKConfig+0x8d6>
 80077ee:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80077f2:	d01c      	beq.n	800782e <HAL_RCCEx_PeriphCLKConfig+0x8de>
 80077f4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80077f8:	d815      	bhi.n	8007826 <HAL_RCCEx_PeriphCLKConfig+0x8d6>
 80077fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80077fe:	d008      	beq.n	8007812 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
 8007800:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007804:	d80f      	bhi.n	8007826 <HAL_RCCEx_PeriphCLKConfig+0x8d6>
 8007806:	2b00      	cmp	r3, #0
 8007808:	d011      	beq.n	800782e <HAL_RCCEx_PeriphCLKConfig+0x8de>
 800780a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800780e:	d00e      	beq.n	800782e <HAL_RCCEx_PeriphCLKConfig+0x8de>
 8007810:	e009      	b.n	8007826 <HAL_RCCEx_PeriphCLKConfig+0x8d6>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007812:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007816:	3308      	adds	r3, #8
 8007818:	4618      	mov	r0, r3
 800781a:	f002 fbaf 	bl	8009f7c <RCCEx_PLL2_Config>
 800781e:	4603      	mov	r3, r0
 8007820:	f887 30f3 	strb.w	r3, [r7, #243]	; 0xf3
        break;
 8007824:	e004      	b.n	8007830 <HAL_RCCEx_PeriphCLKConfig+0x8e0>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8007826:	2301      	movs	r3, #1
 8007828:	f887 30f3 	strb.w	r3, [r7, #243]	; 0xf3
        break;
 800782c:	e000      	b.n	8007830 <HAL_RCCEx_PeriphCLKConfig+0x8e0>
        break;
 800782e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007830:	f897 30f3 	ldrb.w	r3, [r7, #243]	; 0xf3
 8007834:	2b00      	cmp	r3, #0
 8007836:	d111      	bne.n	800785c <HAL_RCCEx_PeriphCLKConfig+0x90c>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8007838:	4b07      	ldr	r3, [pc, #28]	; (8007858 <HAL_RCCEx_PeriphCLKConfig+0x908>)
 800783a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800783e:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8007842:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007846:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800784a:	4a03      	ldr	r2, [pc, #12]	; (8007858 <HAL_RCCEx_PeriphCLKConfig+0x908>)
 800784c:	430b      	orrs	r3, r1
 800784e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8007852:	e007      	b.n	8007864 <HAL_RCCEx_PeriphCLKConfig+0x914>
 8007854:	08025cbc 	.word	0x08025cbc
 8007858:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 800785c:	f897 30f3 	ldrb.w	r3, [r7, #243]	; 0xf3
 8007860:	f887 30f2 	strb.w	r3, [r7, #242]	; 0xf2
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8007864:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800786c:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8007870:	663b      	str	r3, [r7, #96]	; 0x60
 8007872:	2300      	movs	r3, #0
 8007874:	667b      	str	r3, [r7, #100]	; 0x64
 8007876:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800787a:	460b      	mov	r3, r1
 800787c:	4313      	orrs	r3, r2
 800787e:	d061      	beq.n	8007944 <HAL_RCCEx_PeriphCLKConfig+0x9f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));
 8007880:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007884:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007888:	2b00      	cmp	r3, #0
 800788a:	d01c      	beq.n	80078c6 <HAL_RCCEx_PeriphCLKConfig+0x976>
 800788c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007890:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007894:	2b01      	cmp	r3, #1
 8007896:	d016      	beq.n	80078c6 <HAL_RCCEx_PeriphCLKConfig+0x976>
 8007898:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800789c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078a0:	2b02      	cmp	r3, #2
 80078a2:	d010      	beq.n	80078c6 <HAL_RCCEx_PeriphCLKConfig+0x976>
 80078a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078ac:	2b03      	cmp	r3, #3
 80078ae:	d00a      	beq.n	80078c6 <HAL_RCCEx_PeriphCLKConfig+0x976>
 80078b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078b8:	2b04      	cmp	r3, #4
 80078ba:	d004      	beq.n	80078c6 <HAL_RCCEx_PeriphCLKConfig+0x976>
 80078bc:	f240 21d5 	movw	r1, #725	; 0x2d5
 80078c0:	48bb      	ldr	r0, [pc, #748]	; (8007bb0 <HAL_RCCEx_PeriphCLKConfig+0xc60>)
 80078c2:	f00d fcf2 	bl	80152aa <assert_failed>

    switch (pPeriphClkInit->Mdf1ClockSelection)
 80078c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078ce:	2b04      	cmp	r3, #4
 80078d0:	d81d      	bhi.n	800790e <HAL_RCCEx_PeriphCLKConfig+0x9be>
 80078d2:	a201      	add	r2, pc, #4	; (adr r2, 80078d8 <HAL_RCCEx_PeriphCLKConfig+0x988>)
 80078d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078d8:	08007917 	.word	0x08007917
 80078dc:	080078ed 	.word	0x080078ed
 80078e0:	080078fb 	.word	0x080078fb
 80078e4:	08007917 	.word	0x08007917
 80078e8:	08007917 	.word	0x08007917
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80078ec:	4bb1      	ldr	r3, [pc, #708]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0xc64>)
 80078ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078f0:	4ab0      	ldr	r2, [pc, #704]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0xc64>)
 80078f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80078f6:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 80078f8:	e00e      	b.n	8007918 <HAL_RCCEx_PeriphCLKConfig+0x9c8>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80078fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078fe:	332c      	adds	r3, #44	; 0x2c
 8007900:	4618      	mov	r0, r3
 8007902:	f002 fc27 	bl	800a154 <RCCEx_PLL3_Config>
 8007906:	4603      	mov	r3, r0
 8007908:	f887 30f3 	strb.w	r3, [r7, #243]	; 0xf3
        break;
 800790c:	e004      	b.n	8007918 <HAL_RCCEx_PeriphCLKConfig+0x9c8>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800790e:	2301      	movs	r3, #1
 8007910:	f887 30f3 	strb.w	r3, [r7, #243]	; 0xf3
        break;
 8007914:	e000      	b.n	8007918 <HAL_RCCEx_PeriphCLKConfig+0x9c8>
        break;
 8007916:	bf00      	nop
    }
    if (ret == HAL_OK)
 8007918:	f897 30f3 	ldrb.w	r3, [r7, #243]	; 0xf3
 800791c:	2b00      	cmp	r3, #0
 800791e:	d10d      	bne.n	800793c <HAL_RCCEx_PeriphCLKConfig+0x9ec>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8007920:	4ba4      	ldr	r3, [pc, #656]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0xc64>)
 8007922:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007926:	f023 0107 	bic.w	r1, r3, #7
 800792a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800792e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007932:	4aa0      	ldr	r2, [pc, #640]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0xc64>)
 8007934:	430b      	orrs	r3, r1
 8007936:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800793a:	e003      	b.n	8007944 <HAL_RCCEx_PeriphCLKConfig+0x9f4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800793c:	f897 30f3 	ldrb.w	r3, [r7, #243]	; 0xf3
 8007940:	f887 30f2 	strb.w	r3, [r7, #242]	; 0xf2
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8007944:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800794c:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8007950:	65bb      	str	r3, [r7, #88]	; 0x58
 8007952:	2300      	movs	r3, #0
 8007954:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007956:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800795a:	460b      	mov	r3, r1
 800795c:	4313      	orrs	r3, r2
 800795e:	d071      	beq.n	8007a44 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
 8007960:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007964:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007968:	2b00      	cmp	r3, #0
 800796a:	d020      	beq.n	80079ae <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 800796c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007970:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007974:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007978:	d019      	beq.n	80079ae <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 800797a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800797e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007982:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007986:	d012      	beq.n	80079ae <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8007988:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800798c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007990:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007994:	d00b      	beq.n	80079ae <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8007996:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800799a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800799e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80079a2:	d004      	beq.n	80079ae <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 80079a4:	f240 21fb 	movw	r1, #763	; 0x2fb
 80079a8:	4881      	ldr	r0, [pc, #516]	; (8007bb0 <HAL_RCCEx_PeriphCLKConfig+0xc60>)
 80079aa:	f00d fc7e 	bl	80152aa <assert_failed>
    switch (pPeriphClkInit->Adf1ClockSelection)
 80079ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80079b6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80079ba:	d028      	beq.n	8007a0e <HAL_RCCEx_PeriphCLKConfig+0xabe>
 80079bc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80079c0:	d821      	bhi.n	8007a06 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 80079c2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80079c6:	d024      	beq.n	8007a12 <HAL_RCCEx_PeriphCLKConfig+0xac2>
 80079c8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80079cc:	d81b      	bhi.n	8007a06 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 80079ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80079d2:	d00e      	beq.n	80079f2 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 80079d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80079d8:	d815      	bhi.n	8007a06 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d01b      	beq.n	8007a16 <HAL_RCCEx_PeriphCLKConfig+0xac6>
 80079de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80079e2:	d110      	bne.n	8007a06 <HAL_RCCEx_PeriphCLKConfig+0xab6>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80079e4:	4b73      	ldr	r3, [pc, #460]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0xc64>)
 80079e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079e8:	4a72      	ldr	r2, [pc, #456]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0xc64>)
 80079ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80079ee:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 80079f0:	e012      	b.n	8007a18 <HAL_RCCEx_PeriphCLKConfig+0xac8>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80079f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079f6:	332c      	adds	r3, #44	; 0x2c
 80079f8:	4618      	mov	r0, r3
 80079fa:	f002 fbab 	bl	800a154 <RCCEx_PLL3_Config>
 80079fe:	4603      	mov	r3, r0
 8007a00:	f887 30f3 	strb.w	r3, [r7, #243]	; 0xf3
        break;
 8007a04:	e008      	b.n	8007a18 <HAL_RCCEx_PeriphCLKConfig+0xac8>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8007a06:	2301      	movs	r3, #1
 8007a08:	f887 30f3 	strb.w	r3, [r7, #243]	; 0xf3
        break;
 8007a0c:	e004      	b.n	8007a18 <HAL_RCCEx_PeriphCLKConfig+0xac8>
        break;
 8007a0e:	bf00      	nop
 8007a10:	e002      	b.n	8007a18 <HAL_RCCEx_PeriphCLKConfig+0xac8>
        break;
 8007a12:	bf00      	nop
 8007a14:	e000      	b.n	8007a18 <HAL_RCCEx_PeriphCLKConfig+0xac8>
        break;
 8007a16:	bf00      	nop
    }
    if (ret == HAL_OK)
 8007a18:	f897 30f3 	ldrb.w	r3, [r7, #243]	; 0xf3
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d10d      	bne.n	8007a3c <HAL_RCCEx_PeriphCLKConfig+0xaec>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8007a20:	4b64      	ldr	r3, [pc, #400]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0xc64>)
 8007a22:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007a26:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8007a2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a32:	4a60      	ldr	r2, [pc, #384]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0xc64>)
 8007a34:	430b      	orrs	r3, r1
 8007a36:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8007a3a:	e003      	b.n	8007a44 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a3c:	f897 30f3 	ldrb.w	r3, [r7, #243]	; 0xf3
 8007a40:	f887 30f2 	strb.w	r3, [r7, #242]	; 0xf2
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007a44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a4c:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8007a50:	653b      	str	r3, [r7, #80]	; 0x50
 8007a52:	2300      	movs	r3, #0
 8007a54:	657b      	str	r3, [r7, #84]	; 0x54
 8007a56:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8007a5a:	460b      	mov	r3, r1
 8007a5c:	4313      	orrs	r3, r2
 8007a5e:	f000 80db 	beq.w	8007c18 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007a62:	2300      	movs	r3, #0
 8007a64:	f887 30f1 	strb.w	r3, [r7, #241]	; 0xf1
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
 8007a68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a6c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d019      	beq.n	8007aa8 <HAL_RCCEx_PeriphCLKConfig+0xb58>
 8007a74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a78:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8007a7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a80:	d012      	beq.n	8007aa8 <HAL_RCCEx_PeriphCLKConfig+0xb58>
 8007a82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a86:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8007a8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a8e:	d00b      	beq.n	8007aa8 <HAL_RCCEx_PeriphCLKConfig+0xb58>
 8007a90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a94:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8007a98:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007a9c:	d004      	beq.n	8007aa8 <HAL_RCCEx_PeriphCLKConfig+0xb58>
 8007a9e:	f240 3121 	movw	r1, #801	; 0x321
 8007aa2:	4843      	ldr	r0, [pc, #268]	; (8007bb0 <HAL_RCCEx_PeriphCLKConfig+0xc60>)
 8007aa4:	f00d fc01 	bl	80152aa <assert_failed>
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007aa8:	4b42      	ldr	r3, [pc, #264]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0xc64>)
 8007aaa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007aae:	f003 0304 	and.w	r3, r3, #4
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d113      	bne.n	8007ade <HAL_RCCEx_PeriphCLKConfig+0xb8e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007ab6:	4b3f      	ldr	r3, [pc, #252]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0xc64>)
 8007ab8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007abc:	4a3d      	ldr	r2, [pc, #244]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0xc64>)
 8007abe:	f043 0304 	orr.w	r3, r3, #4
 8007ac2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8007ac6:	4b3b      	ldr	r3, [pc, #236]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0xc64>)
 8007ac8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007acc:	f003 0304 	and.w	r3, r3, #4
 8007ad0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007ad4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
      pwrclkchanged = SET;
 8007ad8:	2301      	movs	r3, #1
 8007ada:	f887 30f1 	strb.w	r3, [r7, #241]	; 0xf1
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8007ade:	4b36      	ldr	r3, [pc, #216]	; (8007bb8 <HAL_RCCEx_PeriphCLKConfig+0xc68>)
 8007ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ae2:	4a35      	ldr	r2, [pc, #212]	; (8007bb8 <HAL_RCCEx_PeriphCLKConfig+0xc68>)
 8007ae4:	f043 0301 	orr.w	r3, r3, #1
 8007ae8:	6293      	str	r3, [r2, #40]	; 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007aea:	f7fb f8ed 	bl	8002cc8 <HAL_GetTick>
 8007aee:	f8c7 00ec 	str.w	r0, [r7, #236]	; 0xec

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8007af2:	e00b      	b.n	8007b0c <HAL_RCCEx_PeriphCLKConfig+0xbbc>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007af4:	f7fb f8e8 	bl	8002cc8 <HAL_GetTick>
 8007af8:	4602      	mov	r2, r0
 8007afa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007afe:	1ad3      	subs	r3, r2, r3
 8007b00:	2b02      	cmp	r3, #2
 8007b02:	d903      	bls.n	8007b0c <HAL_RCCEx_PeriphCLKConfig+0xbbc>
      {
        ret = HAL_TIMEOUT;
 8007b04:	2303      	movs	r3, #3
 8007b06:	f887 30f3 	strb.w	r3, [r7, #243]	; 0xf3
        break;
 8007b0a:	e005      	b.n	8007b18 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8007b0c:	4b2a      	ldr	r3, [pc, #168]	; (8007bb8 <HAL_RCCEx_PeriphCLKConfig+0xc68>)
 8007b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b10:	f003 0301 	and.w	r3, r3, #1
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d0ed      	beq.n	8007af4 <HAL_RCCEx_PeriphCLKConfig+0xba4>
      }
    }

    if (ret == HAL_OK)
 8007b18:	f897 30f3 	ldrb.w	r3, [r7, #243]	; 0xf3
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d16b      	bne.n	8007bf8 <HAL_RCCEx_PeriphCLKConfig+0xca8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007b20:	4b24      	ldr	r3, [pc, #144]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0xc64>)
 8007b22:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007b26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b2a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8007b2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d023      	beq.n	8007b7e <HAL_RCCEx_PeriphCLKConfig+0xc2e>
 8007b36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b3a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8007b3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b42:	4293      	cmp	r3, r2
 8007b44:	d01b      	beq.n	8007b7e <HAL_RCCEx_PeriphCLKConfig+0xc2e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007b46:	4b1b      	ldr	r3, [pc, #108]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0xc64>)
 8007b48:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007b4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b50:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007b54:	4b17      	ldr	r3, [pc, #92]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0xc64>)
 8007b56:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007b5a:	4a16      	ldr	r2, [pc, #88]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0xc64>)
 8007b5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007b60:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007b64:	4b13      	ldr	r3, [pc, #76]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0xc64>)
 8007b66:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007b6a:	4a12      	ldr	r2, [pc, #72]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0xc64>)
 8007b6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007b70:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007b74:	4a0f      	ldr	r2, [pc, #60]	; (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0xc64>)
 8007b76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b7a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007b7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b82:	f003 0301 	and.w	r3, r3, #1
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d01f      	beq.n	8007bca <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b8a:	f7fb f89d 	bl	8002cc8 <HAL_GetTick>
 8007b8e:	f8c7 00ec 	str.w	r0, [r7, #236]	; 0xec

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007b92:	e013      	b.n	8007bbc <HAL_RCCEx_PeriphCLKConfig+0xc6c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007b94:	f7fb f898 	bl	8002cc8 <HAL_GetTick>
 8007b98:	4602      	mov	r2, r0
 8007b9a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007b9e:	1ad2      	subs	r2, r2, r3
 8007ba0:	f241 3388 	movw	r3, #5000	; 0x1388
 8007ba4:	429a      	cmp	r2, r3
 8007ba6:	d909      	bls.n	8007bbc <HAL_RCCEx_PeriphCLKConfig+0xc6c>
          {
            ret = HAL_TIMEOUT;
 8007ba8:	2303      	movs	r3, #3
 8007baa:	f887 30f3 	strb.w	r3, [r7, #243]	; 0xf3
            break;
 8007bae:	e00c      	b.n	8007bca <HAL_RCCEx_PeriphCLKConfig+0xc7a>
 8007bb0:	08025cbc 	.word	0x08025cbc
 8007bb4:	46020c00 	.word	0x46020c00
 8007bb8:	46020800 	.word	0x46020800
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007bbc:	4b77      	ldr	r3, [pc, #476]	; (8007d9c <HAL_RCCEx_PeriphCLKConfig+0xe4c>)
 8007bbe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007bc2:	f003 0302 	and.w	r3, r3, #2
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d0e4      	beq.n	8007b94 <HAL_RCCEx_PeriphCLKConfig+0xc44>
          }
        }
      }

      if (ret == HAL_OK)
 8007bca:	f897 30f3 	ldrb.w	r3, [r7, #243]	; 0xf3
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d10d      	bne.n	8007bee <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8007bd2:	4b72      	ldr	r3, [pc, #456]	; (8007d9c <HAL_RCCEx_PeriphCLKConfig+0xe4c>)
 8007bd4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007bd8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007bdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007be0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8007be4:	4a6d      	ldr	r2, [pc, #436]	; (8007d9c <HAL_RCCEx_PeriphCLKConfig+0xe4c>)
 8007be6:	430b      	orrs	r3, r1
 8007be8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8007bec:	e008      	b.n	8007c00 <HAL_RCCEx_PeriphCLKConfig+0xcb0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007bee:	f897 30f3 	ldrb.w	r3, [r7, #243]	; 0xf3
 8007bf2:	f887 30f2 	strb.w	r3, [r7, #242]	; 0xf2
 8007bf6:	e003      	b.n	8007c00 <HAL_RCCEx_PeriphCLKConfig+0xcb0>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bf8:	f897 30f3 	ldrb.w	r3, [r7, #243]	; 0xf3
 8007bfc:	f887 30f2 	strb.w	r3, [r7, #242]	; 0xf2
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007c00:	f897 30f1 	ldrb.w	r3, [r7, #241]	; 0xf1
 8007c04:	2b01      	cmp	r3, #1
 8007c06:	d107      	bne.n	8007c18 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007c08:	4b64      	ldr	r3, [pc, #400]	; (8007d9c <HAL_RCCEx_PeriphCLKConfig+0xe4c>)
 8007c0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007c0e:	4a63      	ldr	r2, [pc, #396]	; (8007d9c <HAL_RCCEx_PeriphCLKConfig+0xe4c>)
 8007c10:	f023 0304 	bic.w	r3, r3, #4
 8007c14:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8007c18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c20:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8007c24:	64bb      	str	r3, [r7, #72]	; 0x48
 8007c26:	2300      	movs	r3, #0
 8007c28:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007c2a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8007c2e:	460b      	mov	r3, r1
 8007c30:	4313      	orrs	r3, r2
 8007c32:	d062      	beq.n	8007cfa <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));
 8007c34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c38:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d019      	beq.n	8007c74 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 8007c40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c44:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007c48:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007c4c:	d012      	beq.n	8007c74 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 8007c4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c52:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007c56:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007c5a:	d00b      	beq.n	8007c74 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 8007c5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c60:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007c64:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8007c68:	d004      	beq.n	8007c74 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 8007c6a:	f44f 715d 	mov.w	r1, #884	; 0x374
 8007c6e:	484c      	ldr	r0, [pc, #304]	; (8007da0 <HAL_RCCEx_PeriphCLKConfig+0xe50>)
 8007c70:	f00d fb1b 	bl	80152aa <assert_failed>

    switch (pPeriphClkInit->IclkClockSelection)
 8007c74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c78:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007c7c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8007c80:	d022      	beq.n	8007cc8 <HAL_RCCEx_PeriphCLKConfig+0xd78>
 8007c82:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8007c86:	d81b      	bhi.n	8007cc0 <HAL_RCCEx_PeriphCLKConfig+0xd70>
 8007c88:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007c8c:	d011      	beq.n	8007cb2 <HAL_RCCEx_PeriphCLKConfig+0xd62>
 8007c8e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007c92:	d815      	bhi.n	8007cc0 <HAL_RCCEx_PeriphCLKConfig+0xd70>
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d019      	beq.n	8007ccc <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8007c98:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007c9c:	d110      	bne.n	8007cc0 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007c9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ca2:	3308      	adds	r3, #8
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	f002 f969 	bl	8009f7c <RCCEx_PLL2_Config>
 8007caa:	4603      	mov	r3, r0
 8007cac:	f887 30f3 	strb.w	r3, [r7, #243]	; 0xf3
        break;
 8007cb0:	e00d      	b.n	8007cce <HAL_RCCEx_PeriphCLKConfig+0xd7e>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007cb2:	4b3a      	ldr	r3, [pc, #232]	; (8007d9c <HAL_RCCEx_PeriphCLKConfig+0xe4c>)
 8007cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cb6:	4a39      	ldr	r2, [pc, #228]	; (8007d9c <HAL_RCCEx_PeriphCLKConfig+0xe4c>)
 8007cb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007cbc:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8007cbe:	e006      	b.n	8007cce <HAL_RCCEx_PeriphCLKConfig+0xd7e>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8007cc0:	2301      	movs	r3, #1
 8007cc2:	f887 30f3 	strb.w	r3, [r7, #243]	; 0xf3
        break;
 8007cc6:	e002      	b.n	8007cce <HAL_RCCEx_PeriphCLKConfig+0xd7e>
        break;
 8007cc8:	bf00      	nop
 8007cca:	e000      	b.n	8007cce <HAL_RCCEx_PeriphCLKConfig+0xd7e>
        break;
 8007ccc:	bf00      	nop
    }
    if (ret == HAL_OK)
 8007cce:	f897 30f3 	ldrb.w	r3, [r7, #243]	; 0xf3
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d10d      	bne.n	8007cf2 <HAL_RCCEx_PeriphCLKConfig+0xda2>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 8007cd6:	4b31      	ldr	r3, [pc, #196]	; (8007d9c <HAL_RCCEx_PeriphCLKConfig+0xe4c>)
 8007cd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007cdc:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8007ce0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ce4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007ce8:	4a2c      	ldr	r2, [pc, #176]	; (8007d9c <HAL_RCCEx_PeriphCLKConfig+0xe4c>)
 8007cea:	430b      	orrs	r3, r1
 8007cec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007cf0:	e003      	b.n	8007cfa <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cf2:	f897 30f3 	ldrb.w	r3, [r7, #243]	; 0xf3
 8007cf6:	f887 30f2 	strb.w	r3, [r7, #242]	; 0xf2
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007cfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d02:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8007d06:	643b      	str	r3, [r7, #64]	; 0x40
 8007d08:	2300      	movs	r3, #0
 8007d0a:	647b      	str	r3, [r7, #68]	; 0x44
 8007d0c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8007d10:	460b      	mov	r3, r1
 8007d12:	4313      	orrs	r3, r2
 8007d14:	d04a      	beq.n	8007dac <HAL_RCCEx_PeriphCLKConfig+0xe5c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));
 8007d16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d1a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d012      	beq.n	8007d48 <HAL_RCCEx_PeriphCLKConfig+0xdf8>
 8007d22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d26:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007d2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d2e:	d00b      	beq.n	8007d48 <HAL_RCCEx_PeriphCLKConfig+0xdf8>
 8007d30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d34:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007d38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d3c:	d004      	beq.n	8007d48 <HAL_RCCEx_PeriphCLKConfig+0xdf8>
 8007d3e:	f240 3199 	movw	r1, #921	; 0x399
 8007d42:	4817      	ldr	r0, [pc, #92]	; (8007da0 <HAL_RCCEx_PeriphCLKConfig+0xe50>)
 8007d44:	f00d fab1 	bl	80152aa <assert_failed>

    switch (pPeriphClkInit->RngClockSelection)
 8007d48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d4c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007d50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d54:	d00b      	beq.n	8007d6e <HAL_RCCEx_PeriphCLKConfig+0xe1e>
 8007d56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d5a:	d804      	bhi.n	8007d66 <HAL_RCCEx_PeriphCLKConfig+0xe16>
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d008      	beq.n	8007d72 <HAL_RCCEx_PeriphCLKConfig+0xe22>
 8007d60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d64:	d007      	beq.n	8007d76 <HAL_RCCEx_PeriphCLKConfig+0xe26>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8007d66:	2301      	movs	r3, #1
 8007d68:	f887 30f3 	strb.w	r3, [r7, #243]	; 0xf3
        break;
 8007d6c:	e004      	b.n	8007d78 <HAL_RCCEx_PeriphCLKConfig+0xe28>
        break;
 8007d6e:	bf00      	nop
 8007d70:	e002      	b.n	8007d78 <HAL_RCCEx_PeriphCLKConfig+0xe28>
        break;
 8007d72:	bf00      	nop
 8007d74:	e000      	b.n	8007d78 <HAL_RCCEx_PeriphCLKConfig+0xe28>
        break;
 8007d76:	bf00      	nop
    }
    if (ret == HAL_OK)
 8007d78:	f897 30f3 	ldrb.w	r3, [r7, #243]	; 0xf3
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d111      	bne.n	8007da4 <HAL_RCCEx_PeriphCLKConfig+0xe54>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8007d80:	4b06      	ldr	r3, [pc, #24]	; (8007d9c <HAL_RCCEx_PeriphCLKConfig+0xe4c>)
 8007d82:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007d86:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007d8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d8e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007d92:	4a02      	ldr	r2, [pc, #8]	; (8007d9c <HAL_RCCEx_PeriphCLKConfig+0xe4c>)
 8007d94:	430b      	orrs	r3, r1
 8007d96:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8007d9a:	e007      	b.n	8007dac <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8007d9c:	46020c00 	.word	0x46020c00
 8007da0:	08025cbc 	.word	0x08025cbc
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007da4:	f897 30f3 	ldrb.w	r3, [r7, #243]	; 0xf3
 8007da8:	f887 30f2 	strb.w	r3, [r7, #242]	; 0xf2
    }
  }
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 8007dac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007db4:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8007db8:	63bb      	str	r3, [r7, #56]	; 0x38
 8007dba:	2300      	movs	r3, #0
 8007dbc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007dbe:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8007dc2:	460b      	mov	r3, r1
 8007dc4:	4313      	orrs	r3, r2
 8007dc6:	d01e      	beq.n	8007e06 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));
 8007dc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007dcc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d00b      	beq.n	8007dec <HAL_RCCEx_PeriphCLKConfig+0xe9c>
 8007dd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007dd8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007ddc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007de0:	d004      	beq.n	8007dec <HAL_RCCEx_PeriphCLKConfig+0xe9c>
 8007de2:	f240 31ba 	movw	r1, #954	; 0x3ba
 8007de6:	48aa      	ldr	r0, [pc, #680]	; (8008090 <HAL_RCCEx_PeriphCLKConfig+0x1140>)
 8007de8:	f00d fa5f 	bl	80152aa <assert_failed>

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 8007dec:	4ba9      	ldr	r3, [pc, #676]	; (8008094 <HAL_RCCEx_PeriphCLKConfig+0x1144>)
 8007dee:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007df2:	f423 6100 	bic.w	r1, r3, #2048	; 0x800
 8007df6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007dfa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007dfe:	4aa5      	ldr	r2, [pc, #660]	; (8008094 <HAL_RCCEx_PeriphCLKConfig+0x1144>)
 8007e00:	430b      	orrs	r3, r1
 8007e02:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8007e06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e0e:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8007e12:	633b      	str	r3, [r7, #48]	; 0x30
 8007e14:	2300      	movs	r3, #0
 8007e16:	637b      	str	r3, [r7, #52]	; 0x34
 8007e18:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8007e1c:	460b      	mov	r3, r1
 8007e1e:	4313      	orrs	r3, r2
 8007e20:	d02b      	beq.n	8007e7a <HAL_RCCEx_PeriphCLKConfig+0xf2a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));
 8007e22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e26:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d00b      	beq.n	8007e46 <HAL_RCCEx_PeriphCLKConfig+0xef6>
 8007e2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e32:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007e36:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007e3a:	d004      	beq.n	8007e46 <HAL_RCCEx_PeriphCLKConfig+0xef6>
 8007e3c:	f240 31c3 	movw	r1, #963	; 0x3c3
 8007e40:	4893      	ldr	r0, [pc, #588]	; (8008090 <HAL_RCCEx_PeriphCLKConfig+0x1140>)
 8007e42:	f00d fa32 	bl	80152aa <assert_failed>

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8007e46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e4a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007e4e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007e52:	d105      	bne.n	8007e60 <HAL_RCCEx_PeriphCLKConfig+0xf10>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007e54:	4b8f      	ldr	r3, [pc, #572]	; (8008094 <HAL_RCCEx_PeriphCLKConfig+0x1144>)
 8007e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e58:	4a8e      	ldr	r2, [pc, #568]	; (8008094 <HAL_RCCEx_PeriphCLKConfig+0x1144>)
 8007e5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007e5e:	6293      	str	r3, [r2, #40]	; 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8007e60:	4b8c      	ldr	r3, [pc, #560]	; (8008094 <HAL_RCCEx_PeriphCLKConfig+0x1144>)
 8007e62:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007e66:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8007e6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e6e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007e72:	4a88      	ldr	r2, [pc, #544]	; (8008094 <HAL_RCCEx_PeriphCLKConfig+0x1144>)
 8007e74:	430b      	orrs	r3, r1
 8007e76:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8007e7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e82:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8007e86:	62bb      	str	r3, [r7, #40]	; 0x28
 8007e88:	2300      	movs	r3, #0
 8007e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007e8c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8007e90:	460b      	mov	r3, r1
 8007e92:	4313      	orrs	r3, r2
 8007e94:	d02c      	beq.n	8007ef0 <HAL_RCCEx_PeriphCLKConfig+0xfa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));
 8007e96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e9a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d019      	beq.n	8007ed6 <HAL_RCCEx_PeriphCLKConfig+0xf86>
 8007ea2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ea6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007eaa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007eae:	d012      	beq.n	8007ed6 <HAL_RCCEx_PeriphCLKConfig+0xf86>
 8007eb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007eb4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007eb8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007ebc:	d00b      	beq.n	8007ed6 <HAL_RCCEx_PeriphCLKConfig+0xf86>
 8007ebe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ec2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007ec6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007eca:	d004      	beq.n	8007ed6 <HAL_RCCEx_PeriphCLKConfig+0xf86>
 8007ecc:	f240 31d3 	movw	r1, #979	; 0x3d3
 8007ed0:	486f      	ldr	r0, [pc, #444]	; (8008090 <HAL_RCCEx_PeriphCLKConfig+0x1140>)
 8007ed2:	f00d f9ea 	bl	80152aa <assert_failed>

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8007ed6:	4b6f      	ldr	r3, [pc, #444]	; (8008094 <HAL_RCCEx_PeriphCLKConfig+0x1144>)
 8007ed8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007edc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007ee0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ee4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007ee8:	496a      	ldr	r1, [pc, #424]	; (8008094 <HAL_RCCEx_PeriphCLKConfig+0x1144>)
 8007eea:	4313      	orrs	r3, r2
 8007eec:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8007ef0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ef8:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8007efc:	623b      	str	r3, [r7, #32]
 8007efe:	2300      	movs	r3, #0
 8007f00:	627b      	str	r3, [r7, #36]	; 0x24
 8007f02:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007f06:	460b      	mov	r3, r1
 8007f08:	4313      	orrs	r3, r2
 8007f0a:	d02c      	beq.n	8007f66 <HAL_RCCEx_PeriphCLKConfig+0x1016>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));
 8007f0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f10:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d019      	beq.n	8007f4c <HAL_RCCEx_PeriphCLKConfig+0xffc>
 8007f18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f1c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007f20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f24:	d012      	beq.n	8007f4c <HAL_RCCEx_PeriphCLKConfig+0xffc>
 8007f26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f2a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007f2e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007f32:	d00b      	beq.n	8007f4c <HAL_RCCEx_PeriphCLKConfig+0xffc>
 8007f34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f38:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007f3c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007f40:	d004      	beq.n	8007f4c <HAL_RCCEx_PeriphCLKConfig+0xffc>
 8007f42:	f240 31dd 	movw	r1, #989	; 0x3dd
 8007f46:	4852      	ldr	r0, [pc, #328]	; (8008090 <HAL_RCCEx_PeriphCLKConfig+0x1140>)
 8007f48:	f00d f9af 	bl	80152aa <assert_failed>

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8007f4c:	4b51      	ldr	r3, [pc, #324]	; (8008094 <HAL_RCCEx_PeriphCLKConfig+0x1144>)
 8007f4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007f52:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007f56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f5a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007f5e:	494d      	ldr	r1, [pc, #308]	; (8008094 <HAL_RCCEx_PeriphCLKConfig+0x1144>)
 8007f60:	4313      	orrs	r3, r2
 8007f62:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8007f66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f6e:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8007f72:	61bb      	str	r3, [r7, #24]
 8007f74:	2300      	movs	r3, #0
 8007f76:	61fb      	str	r3, [r7, #28]
 8007f78:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007f7c:	460b      	mov	r3, r1
 8007f7e:	4313      	orrs	r3, r2
 8007f80:	d029      	beq.n	8007fd6 <HAL_RCCEx_PeriphCLKConfig+0x1086>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));
 8007f82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f86:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d016      	beq.n	8007fbc <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8007f8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f92:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8007f96:	2b08      	cmp	r3, #8
 8007f98:	d010      	beq.n	8007fbc <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8007f9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f9e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8007fa2:	2b10      	cmp	r3, #16
 8007fa4:	d00a      	beq.n	8007fbc <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8007fa6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007faa:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8007fae:	2b18      	cmp	r3, #24
 8007fb0:	d004      	beq.n	8007fbc <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8007fb2:	f240 31e7 	movw	r1, #999	; 0x3e7
 8007fb6:	4836      	ldr	r0, [pc, #216]	; (8008090 <HAL_RCCEx_PeriphCLKConfig+0x1140>)
 8007fb8:	f00d f977 	bl	80152aa <assert_failed>

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8007fbc:	4b35      	ldr	r3, [pc, #212]	; (8008094 <HAL_RCCEx_PeriphCLKConfig+0x1144>)
 8007fbe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007fc2:	f023 0218 	bic.w	r2, r3, #24
 8007fc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007fca:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8007fce:	4931      	ldr	r1, [pc, #196]	; (8008094 <HAL_RCCEx_PeriphCLKConfig+0x1144>)
 8007fd0:	4313      	orrs	r3, r2
 8007fd2:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8007fd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fde:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 8007fe2:	613b      	str	r3, [r7, #16]
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	617b      	str	r3, [r7, #20]
 8007fe8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007fec:	460b      	mov	r3, r1
 8007fee:	4313      	orrs	r3, r2
 8007ff0:	d056      	beq.n	80080a0 <HAL_RCCEx_PeriphCLKConfig+0x1150>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));
 8007ff2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ff6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d019      	beq.n	8008032 <HAL_RCCEx_PeriphCLKConfig+0x10e2>
 8007ffe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008002:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008006:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800800a:	d012      	beq.n	8008032 <HAL_RCCEx_PeriphCLKConfig+0x10e2>
 800800c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008010:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008014:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008018:	d00b      	beq.n	8008032 <HAL_RCCEx_PeriphCLKConfig+0x10e2>
 800801a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800801e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008022:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008026:	d004      	beq.n	8008032 <HAL_RCCEx_PeriphCLKConfig+0x10e2>
 8008028:	f240 31f1 	movw	r1, #1009	; 0x3f1
 800802c:	4818      	ldr	r0, [pc, #96]	; (8008090 <HAL_RCCEx_PeriphCLKConfig+0x1140>)
 800802e:	f00d f93c 	bl	80152aa <assert_failed>

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8008032:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008036:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800803a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800803e:	d105      	bne.n	800804c <HAL_RCCEx_PeriphCLKConfig+0x10fc>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008040:	4b14      	ldr	r3, [pc, #80]	; (8008094 <HAL_RCCEx_PeriphCLKConfig+0x1144>)
 8008042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008044:	4a13      	ldr	r2, [pc, #76]	; (8008094 <HAL_RCCEx_PeriphCLKConfig+0x1144>)
 8008046:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800804a:	6293      	str	r3, [r2, #40]	; 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 800804c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008050:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008054:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008058:	d108      	bne.n	800806c <HAL_RCCEx_PeriphCLKConfig+0x111c>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800805a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800805e:	3308      	adds	r3, #8
 8008060:	4618      	mov	r0, r3
 8008062:	f001 ff8b 	bl	8009f7c <RCCEx_PLL2_Config>
 8008066:	4603      	mov	r3, r0
 8008068:	f887 30f3 	strb.w	r3, [r7, #243]	; 0xf3
    }
    if (ret == HAL_OK)
 800806c:	f897 30f3 	ldrb.w	r3, [r7, #243]	; 0xf3
 8008070:	2b00      	cmp	r3, #0
 8008072:	d111      	bne.n	8008098 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8008074:	4b07      	ldr	r3, [pc, #28]	; (8008094 <HAL_RCCEx_PeriphCLKConfig+0x1144>)
 8008076:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800807a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800807e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008082:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008086:	4903      	ldr	r1, [pc, #12]	; (8008094 <HAL_RCCEx_PeriphCLKConfig+0x1144>)
 8008088:	4313      	orrs	r3, r2
 800808a:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 800808e:	e007      	b.n	80080a0 <HAL_RCCEx_PeriphCLKConfig+0x1150>
 8008090:	08025cbc 	.word	0x08025cbc
 8008094:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008098:	f897 30f3 	ldrb.w	r3, [r7, #243]	; 0xf3
 800809c:	f887 30f2 	strb.w	r3, [r7, #242]	; 0xf2
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 80080a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080a8:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 80080ac:	60bb      	str	r3, [r7, #8]
 80080ae:	2300      	movs	r3, #0
 80080b0:	60fb      	str	r3, [r7, #12]
 80080b2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80080b6:	460b      	mov	r3, r1
 80080b8:	4313      	orrs	r3, r2
 80080ba:	d053      	beq.n	8008164 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));
 80080bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d012      	beq.n	80080ee <HAL_RCCEx_PeriphCLKConfig+0x119e>
 80080c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80080d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80080d4:	d00b      	beq.n	80080ee <HAL_RCCEx_PeriphCLKConfig+0x119e>
 80080d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80080de:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80080e2:	d004      	beq.n	80080ee <HAL_RCCEx_PeriphCLKConfig+0x119e>
 80080e4:	f240 413e 	movw	r1, #1086	; 0x43e
 80080e8:	4838      	ldr	r0, [pc, #224]	; (80081cc <HAL_RCCEx_PeriphCLKConfig+0x127c>)
 80080ea:	f00d f8de 	bl	80152aa <assert_failed>

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 80080ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80080f6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80080fa:	d00e      	beq.n	800811a <HAL_RCCEx_PeriphCLKConfig+0x11ca>
 80080fc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008100:	d815      	bhi.n	800812e <HAL_RCCEx_PeriphCLKConfig+0x11de>
 8008102:	2b00      	cmp	r3, #0
 8008104:	d017      	beq.n	8008136 <HAL_RCCEx_PeriphCLKConfig+0x11e6>
 8008106:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800810a:	d110      	bne.n	800812e <HAL_RCCEx_PeriphCLKConfig+0x11de>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800810c:	4b30      	ldr	r3, [pc, #192]	; (80081d0 <HAL_RCCEx_PeriphCLKConfig+0x1280>)
 800810e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008110:	4a2f      	ldr	r2, [pc, #188]	; (80081d0 <HAL_RCCEx_PeriphCLKConfig+0x1280>)
 8008112:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008116:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8008118:	e00e      	b.n	8008138 <HAL_RCCEx_PeriphCLKConfig+0x11e8>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800811a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800811e:	3308      	adds	r3, #8
 8008120:	4618      	mov	r0, r3
 8008122:	f001 ff2b 	bl	8009f7c <RCCEx_PLL2_Config>
 8008126:	4603      	mov	r3, r0
 8008128:	f887 30f3 	strb.w	r3, [r7, #243]	; 0xf3
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800812c:	e004      	b.n	8008138 <HAL_RCCEx_PeriphCLKConfig+0x11e8>
      default:
        ret = HAL_ERROR;
 800812e:	2301      	movs	r3, #1
 8008130:	f887 30f3 	strb.w	r3, [r7, #243]	; 0xf3
        break;
 8008134:	e000      	b.n	8008138 <HAL_RCCEx_PeriphCLKConfig+0x11e8>
        break;
 8008136:	bf00      	nop
    }
    if (ret == HAL_OK)
 8008138:	f897 30f3 	ldrb.w	r3, [r7, #243]	; 0xf3
 800813c:	2b00      	cmp	r3, #0
 800813e:	d10d      	bne.n	800815c <HAL_RCCEx_PeriphCLKConfig+0x120c>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8008140:	4b23      	ldr	r3, [pc, #140]	; (80081d0 <HAL_RCCEx_PeriphCLKConfig+0x1280>)
 8008142:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008146:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800814a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800814e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008152:	491f      	ldr	r1, [pc, #124]	; (80081d0 <HAL_RCCEx_PeriphCLKConfig+0x1280>)
 8008154:	4313      	orrs	r3, r2
 8008156:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 800815a:	e003      	b.n	8008164 <HAL_RCCEx_PeriphCLKConfig+0x1214>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800815c:	f897 30f3 	ldrb.w	r3, [r7, #243]	; 0xf3
 8008160:	f887 30f2 	strb.w	r3, [r7, #242]	; 0xf2
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8008164:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800816c:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8008170:	603b      	str	r3, [r7, #0]
 8008172:	2300      	movs	r3, #0
 8008174:	607b      	str	r3, [r7, #4]
 8008176:	e9d7 1200 	ldrd	r1, r2, [r7]
 800817a:	460b      	mov	r3, r1
 800817c:	4313      	orrs	r3, r2
 800817e:	d01e      	beq.n	80081be <HAL_RCCEx_PeriphCLKConfig+0x126e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));
 8008180:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008184:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008188:	2b00      	cmp	r3, #0
 800818a:	d00b      	beq.n	80081a4 <HAL_RCCEx_PeriphCLKConfig+0x1254>
 800818c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008190:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008194:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008198:	d004      	beq.n	80081a4 <HAL_RCCEx_PeriphCLKConfig+0x1254>
 800819a:	f240 4164 	movw	r1, #1124	; 0x464
 800819e:	480b      	ldr	r0, [pc, #44]	; (80081cc <HAL_RCCEx_PeriphCLKConfig+0x127c>)
 80081a0:	f00d f883 	bl	80152aa <assert_failed>

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 80081a4:	4b0a      	ldr	r3, [pc, #40]	; (80081d0 <HAL_RCCEx_PeriphCLKConfig+0x1280>)
 80081a6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80081aa:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80081ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081b2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80081b6:	4906      	ldr	r1, [pc, #24]	; (80081d0 <HAL_RCCEx_PeriphCLKConfig+0x1280>)
 80081b8:	4313      	orrs	r3, r2
 80081ba:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 80081be:	f897 30f2 	ldrb.w	r3, [r7, #242]	; 0xf2
}
 80081c2:	4618      	mov	r0, r3
 80081c4:	37f8      	adds	r7, #248	; 0xf8
 80081c6:	46bd      	mov	sp, r7
 80081c8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80081cc:	08025cbc 	.word	0x08025cbc
 80081d0:	46020c00 	.word	0x46020c00

080081d4 <HAL_RCCEx_GetPeriphCLKConfig>:
  *         clocks(USART1, USART2, USART3, UART4, UART5, LPUART, I2C1, I2C2, I2C3, LPTIM1, LPTIM2, SAI1, SAI2,
  *         ADC1, ADC2, MDF1, MDF2, RTC, CLK48, SDMMC1, I2C4, SPI12, SPI3, OSPI, FDCAN1, DAC1).
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 80081d4:	b480      	push	{r7}
 80081d6:	b083      	sub	sp, #12
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
                                         RCC_PERIPHCLK_I2C4 | RCC_PERIPHCLK_SPI1 | RCC_PERIPHCLK_SPI2 | \
                                         RCC_PERIPHCLK_SPI3 | RCC_PERIPHCLK_OSPI | RCC_PERIPHCLK_FDCAN1 | \
                                         RCC_PERIPHCLK_DAC1 | RCC_PERIPHCLK_HSPI | RCC_PERIPHCLK_USBPHY;

#else
  pPeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_USART1 | RCC_PERIPHCLK_USART2 | RCC_PERIPHCLK_USART3 | \
 80081dc:	6879      	ldr	r1, [r7, #4]
 80081de:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 80081e2:	f04f 0300 	mov.w	r3, #0
 80081e6:	e9c1 2300 	strd	r2, r3, [r1]
                                         RCC_PERIPHCLK_SPI2 | RCC_PERIPHCLK_SPI3 | RCC_PERIPHCLK_OSPI | \
                                         RCC_PERIPHCLK_FDCAN1 | RCC_PERIPHCLK_DAC1;
#endif /* defined(STM32U599xx) || defined(STM32U5A9xx) */

  /* Get the PLL2 Clock configuration -----------------------------------------------*/
  pPeriphClkInit->PLL2.PLL2Source = (uint32_t)((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC) >> RCC_PLL2CFGR_PLL2SRC_Pos);
 80081ea:	4bac      	ldr	r3, [pc, #688]	; (800849c <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 80081ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081ee:	f003 0203 	and.w	r2, r3, #3
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	609a      	str	r2, [r3, #8]
  pPeriphClkInit->PLL2.PLL2M = (uint32_t)((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 80081f6:	4ba9      	ldr	r3, [pc, #676]	; (800849c <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 80081f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081fa:	0a1b      	lsrs	r3, r3, #8
 80081fc:	f003 030f 	and.w	r3, r3, #15
 8008200:	1c5a      	adds	r2, r3, #1
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	60da      	str	r2, [r3, #12]
  pPeriphClkInit->PLL2.PLL2N = (uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) >> RCC_PLL2DIVR_PLL2N_Pos) + 1U;
 8008206:	4ba5      	ldr	r3, [pc, #660]	; (800849c <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 8008208:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800820a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800820e:	1c5a      	adds	r2, r3, #1
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	611a      	str	r2, [r3, #16]
  pPeriphClkInit->PLL2.PLL2P = (uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + 1U;
 8008214:	4ba1      	ldr	r3, [pc, #644]	; (800849c <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 8008216:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008218:	0a5b      	lsrs	r3, r3, #9
 800821a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800821e:	1c5a      	adds	r2, r3, #1
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	615a      	str	r2, [r3, #20]
  pPeriphClkInit->PLL2.PLL2Q = (uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + 1U;
 8008224:	4b9d      	ldr	r3, [pc, #628]	; (800849c <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 8008226:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008228:	0c1b      	lsrs	r3, r3, #16
 800822a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800822e:	1c5a      	adds	r2, r3, #1
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	619a      	str	r2, [r3, #24]
  pPeriphClkInit->PLL2.PLL2R = (uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + 1U;
 8008234:	4b99      	ldr	r3, [pc, #612]	; (800849c <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 8008236:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008238:	0e1b      	lsrs	r3, r3, #24
 800823a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800823e:	1c5a      	adds	r2, r3, #1
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	61da      	str	r2, [r3, #28]
  pPeriphClkInit->PLL2.PLL2RGE = (uint32_t)((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2RGE) >> RCC_PLL2CFGR_PLL2RGE_Pos);
 8008244:	4b95      	ldr	r3, [pc, #596]	; (800849c <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 8008246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008248:	089b      	lsrs	r3, r3, #2
 800824a:	f003 0203 	and.w	r2, r3, #3
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	621a      	str	r2, [r3, #32]
  pPeriphClkInit->PLL2.PLL2FRACN = (uint32_t)((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8008252:	4b92      	ldr	r3, [pc, #584]	; (800849c <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 8008254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008256:	08db      	lsrs	r3, r3, #3
 8008258:	f3c3 020c 	ubfx	r2, r3, #0, #13
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	625a      	str	r2, [r3, #36]	; 0x24
                                              RCC_PLL2FRACR_PLL2FRACN_Pos);

  /* Get the PLL3 Clock configuration -----------------------------------------------*/
  pPeriphClkInit->PLL3.PLL3Source = (uint32_t)((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC) >> RCC_PLL3CFGR_PLL3SRC_Pos);
 8008260:	4b8e      	ldr	r3, [pc, #568]	; (800849c <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 8008262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008264:	f003 0203 	and.w	r2, r3, #3
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	62da      	str	r2, [r3, #44]	; 0x2c
  pPeriphClkInit->PLL3.PLL3M = (uint32_t)((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 800826c:	4b8b      	ldr	r3, [pc, #556]	; (800849c <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 800826e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008270:	0a1b      	lsrs	r3, r3, #8
 8008272:	f003 030f 	and.w	r3, r3, #15
 8008276:	1c5a      	adds	r2, r3, #1
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	631a      	str	r2, [r3, #48]	; 0x30
  pPeriphClkInit->PLL3.PLL3N = (uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) >> RCC_PLL3DIVR_PLL3N_Pos) + 1U;
 800827c:	4b87      	ldr	r3, [pc, #540]	; (800849c <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 800827e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008280:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008284:	1c5a      	adds	r2, r3, #1
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	635a      	str	r2, [r3, #52]	; 0x34
  pPeriphClkInit->PLL3.PLL3P = (uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + 1U;
 800828a:	4b84      	ldr	r3, [pc, #528]	; (800849c <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 800828c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800828e:	0a5b      	lsrs	r3, r3, #9
 8008290:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008294:	1c5a      	adds	r2, r3, #1
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	639a      	str	r2, [r3, #56]	; 0x38
  pPeriphClkInit->PLL3.PLL3Q = (uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + 1U;
 800829a:	4b80      	ldr	r3, [pc, #512]	; (800849c <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 800829c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800829e:	0c1b      	lsrs	r3, r3, #16
 80082a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80082a4:	1c5a      	adds	r2, r3, #1
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	63da      	str	r2, [r3, #60]	; 0x3c
  pPeriphClkInit->PLL3.PLL3R = (uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + 1U;
 80082aa:	4b7c      	ldr	r3, [pc, #496]	; (800849c <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 80082ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082ae:	0e1b      	lsrs	r3, r3, #24
 80082b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80082b4:	1c5a      	adds	r2, r3, #1
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	641a      	str	r2, [r3, #64]	; 0x40
  pPeriphClkInit->PLL3.PLL3RGE = (uint32_t)((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3RGE) >> RCC_PLL3CFGR_PLL3RGE_Pos);
 80082ba:	4b78      	ldr	r3, [pc, #480]	; (800849c <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 80082bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082be:	089b      	lsrs	r3, r3, #2
 80082c0:	f003 0203 	and.w	r2, r3, #3
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	645a      	str	r2, [r3, #68]	; 0x44
  pPeriphClkInit->PLL3.PLL3FRACN = (uint32_t)((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 80082c8:	4b74      	ldr	r3, [pc, #464]	; (800849c <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 80082ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80082cc:	08db      	lsrs	r3, r3, #3
 80082ce:	f3c3 020c 	ubfx	r2, r3, #0, #13
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	649a      	str	r2, [r3, #72]	; 0x48
                                              RCC_PLL3FRACR_PLL3FRACN_Pos);

  /* Get the USART1 clock source ---------------------------------------------*/
  pPeriphClkInit->Usart1ClockSelection = __HAL_RCC_GET_USART1_SOURCE();
 80082d6:	4b71      	ldr	r3, [pc, #452]	; (800849c <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 80082d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80082dc:	f003 0203 	and.w	r2, r3, #3
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Get the USART2 clock source ---------------------------------------------*/
  pPeriphClkInit->Usart2ClockSelection = __HAL_RCC_GET_USART2_SOURCE();
 80082e4:	4b6d      	ldr	r3, [pc, #436]	; (800849c <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 80082e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80082ea:	f003 020c 	and.w	r2, r3, #12
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get the USART3 clock source ---------------------------------------------*/
  pPeriphClkInit->Usart3ClockSelection = __HAL_RCC_GET_USART3_SOURCE();
 80082f2:	4b6a      	ldr	r3, [pc, #424]	; (800849c <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 80082f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80082f8:	f003 0230 	and.w	r2, r3, #48	; 0x30
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	659a      	str	r2, [r3, #88]	; 0x58

  /* Get the UART4 clock source ----------------------------------------------*/
  pPeriphClkInit->Uart4ClockSelection = __HAL_RCC_GET_UART4_SOURCE();
 8008300:	4b66      	ldr	r3, [pc, #408]	; (800849c <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 8008302:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008306:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Get the UART5 clock source ----------------------------------------------*/
  pPeriphClkInit->Uart5ClockSelection = __HAL_RCC_GET_UART5_SOURCE();
 800830e:	4b63      	ldr	r3, [pc, #396]	; (800849c <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 8008310:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008314:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Get the LPUART1 clock source --------------------------------------------*/
  pPeriphClkInit->Lpuart1ClockSelection = __HAL_RCC_GET_LPUART1_SOURCE();
 800831c:	4b5f      	ldr	r3, [pc, #380]	; (800849c <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 800831e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008322:	f003 0207 	and.w	r2, r3, #7
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	665a      	str	r2, [r3, #100]	; 0x64
  /* Get the UART6 clock source ---------------------------------------------*/
  pPeriphClkInit->Usart6ClockSelection = __HAL_RCC_GET_USART6_SOURCE();
#endif /* defined(USART6) */

  /* Get the I2C1 clock source -----------------------------------------------*/
  pPeriphClkInit->I2c1ClockSelection = __HAL_RCC_GET_I2C1_SOURCE();
 800832a:	4b5c      	ldr	r3, [pc, #368]	; (800849c <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 800832c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008330:	f403 6240 	and.w	r2, r3, #3072	; 0xc00
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	669a      	str	r2, [r3, #104]	; 0x68

  /* Get the I2C2 clock source -----------------------------------------------*/
  pPeriphClkInit->I2c2ClockSelection = __HAL_RCC_GET_I2C2_SOURCE();
 8008338:	4b58      	ldr	r3, [pc, #352]	; (800849c <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 800833a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800833e:	f403 5240 	and.w	r2, r3, #12288	; 0x3000
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Get the I2C3 clock source -----------------------------------------------*/
  pPeriphClkInit->I2c3ClockSelection = __HAL_RCC_GET_I2C3_SOURCE();
 8008346:	4b55      	ldr	r3, [pc, #340]	; (800849c <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 8008348:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800834c:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	671a      	str	r2, [r3, #112]	; 0x70

  /* Get the I2C4 clock source -----------------------------------------------*/
  pPeriphClkInit->I2c4ClockSelection = __HAL_RCC_GET_I2C4_SOURCE();
 8008354:	4b51      	ldr	r3, [pc, #324]	; (800849c <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 8008356:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800835a:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	675a      	str	r2, [r3, #116]	; 0x74
  /* Get the  clock source ---------------------------------------------*/
  pPeriphClkInit->I2c6ClockSelection = __HAL_RCC_GET_I2C6_SOURCE();
#endif /* defined(I2C6) */

  /* Get the LPTIM1 clock source ---------------------------------------------*/
  pPeriphClkInit->Lptim1ClockSelection = __HAL_RCC_GET_LPTIM1_SOURCE();
 8008362:	4b4e      	ldr	r3, [pc, #312]	; (800849c <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 8008364:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008368:	f403 6240 	and.w	r2, r3, #3072	; 0xc00
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Get the LPTIM2 clock source ---------------------------------------------*/
  pPeriphClkInit->Lptim2ClockSelection = __HAL_RCC_GET_LPTIM2_SOURCE();
 8008370:	4b4a      	ldr	r3, [pc, #296]	; (800849c <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 8008372:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008376:	f403 2240 	and.w	r2, r3, #786432	; 0xc0000
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Get the LPTIM34 clock source --------------------------------------------*/
  pPeriphClkInit->Lptim34ClockSelection = __HAL_RCC_GET_LPTIM34_SOURCE();
 800837e:	4b47      	ldr	r3, [pc, #284]	; (800849c <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 8008380:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008384:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Get the FDCAN1 clock source ---------------------------------------------*/
  pPeriphClkInit->Fdcan1ClockSelection = __HAL_RCC_GET_FDCAN1_SOURCE();
 800838e:	4b43      	ldr	r3, [pc, #268]	; (800849c <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 8008390:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008394:	f003 7240 	and.w	r2, r3, #50331648	; 0x3000000
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Get the MDF1 clock source -----------------------------------------------*/
  pPeriphClkInit->Mdf1ClockSelection = __HAL_RCC_GET_MDF1_SOURCE();
 800839e:	4b3f      	ldr	r3, [pc, #252]	; (800849c <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 80083a0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80083a4:	f003 0207 	and.w	r2, r3, #7
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Get the ADF1 clock source -----------------------------------------------*/
  pPeriphClkInit->Adf1ClockSelection = __HAL_RCC_GET_ADF1_SOURCE();
 80083ae:	4b3b      	ldr	r3, [pc, #236]	; (800849c <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 80083b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80083b4:	f403 22e0 	and.w	r2, r3, #458752	; 0x70000
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Get the SAES clock source -----------------------------------------------*/
  pPeriphClkInit->SaesClockSelection = __HAL_RCC_GET_SAES_SOURCE();
 80083be:	4b37      	ldr	r3, [pc, #220]	; (800849c <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 80083c0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80083c4:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Get the SAI1 clock source -----------------------------------------------*/
  pPeriphClkInit->Sai1ClockSelection = __HAL_RCC_GET_SAI1_SOURCE();
 80083ce:	4b33      	ldr	r3, [pc, #204]	; (800849c <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 80083d0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80083d4:	f003 02e0 	and.w	r2, r3, #224	; 0xe0
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Get the SAI2 clock source -----------------------------------------------*/
  pPeriphClkInit->Sai2ClockSelection = __HAL_RCC_GET_SAI2_SOURCE();
 80083de:	4b2f      	ldr	r3, [pc, #188]	; (800849c <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 80083e0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80083e4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Get the CLK48 clock source ----------------------------------------------*/
  pPeriphClkInit->IclkClockSelection = __HAL_RCC_GET_ICLK_SOURCE();
 80083ee:	4b2b      	ldr	r3, [pc, #172]	; (800849c <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 80083f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80083f4:	f003 6240 	and.w	r2, r3, #201326592	; 0xc000000
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Get the SDMMC clock source ----------------------------------------------*/
  pPeriphClkInit->SdmmcClockSelection = __HAL_RCC_GET_SDMMC_SOURCE();
 80083fe:	4b27      	ldr	r3, [pc, #156]	; (800849c <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 8008400:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008404:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Get the ADCDAC clock source ---------------------------------------------*/
  pPeriphClkInit->AdcDacClockSelection = __HAL_RCC_GET_ADCDAC_SOURCE();
 800840e:	4b23      	ldr	r3, [pc, #140]	; (800849c <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 8008410:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008414:	f403 42e0 	and.w	r2, r3, #28672	; 0x7000
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8

  /* Get the DAC1 clock source -----------------------------------------------*/
  pPeriphClkInit->Dac1ClockSelection = __HAL_RCC_GET_DAC1_SOURCE();
 800841e:	4b1f      	ldr	r3, [pc, #124]	; (800849c <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 8008420:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008424:	f403 4200 	and.w	r2, r3, #32768	; 0x8000
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac

  /* Get the OSPI clock source -----------------------------------------------*/
  pPeriphClkInit->OspiClockSelection = __HAL_RCC_GET_OSPI_SOURCE();
 800842e:	4b1b      	ldr	r3, [pc, #108]	; (800849c <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 8008430:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008434:	f403 1240 	and.w	r2, r3, #3145728	; 0x300000
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Get the SPI1 clock source -----------------------------------------------*/
  pPeriphClkInit->Spi1ClockSelection = __HAL_RCC_GET_SPI1_SOURCE();
 800843e:	4b17      	ldr	r3, [pc, #92]	; (800849c <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 8008440:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008444:	f403 1240 	and.w	r2, r3, #3145728	; 0x300000
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

  /* Get the SPI2 clock source -----------------------------------------------*/
  pPeriphClkInit->Spi2ClockSelection = __HAL_RCC_GET_SPI2_SOURCE();
 800844e:	4b13      	ldr	r3, [pc, #76]	; (800849c <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 8008450:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008454:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

  /* Get the SPI3 clock source -----------------------------------------------*/
  pPeriphClkInit->Spi3ClockSelection = __HAL_RCC_GET_SPI3_SOURCE();
 800845e:	4b0f      	ldr	r3, [pc, #60]	; (800849c <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 8008460:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008464:	f003 0218 	and.w	r2, r3, #24
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc

  /* Get the RTC clock source ------------------------------------------------*/
  pPeriphClkInit->RTCClockSelection = __HAL_RCC_GET_RTC_SOURCE();
 800846e:	4b0b      	ldr	r3, [pc, #44]	; (800849c <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 8008470:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008474:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Get the RNG clock source ------------------------------------------------*/
  pPeriphClkInit->RngClockSelection = __HAL_RCC_GET_RNG_SOURCE();
 800847e:	4b07      	ldr	r3, [pc, #28]	; (800849c <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 8008480:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008484:	f403 5240 	and.w	r2, r3, #12288	; 0x3000
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

#if defined(USB_OTG_HS)
  /* Get the USB PHY clock source ------------------------------------------------*/
  pPeriphClkInit->UsbPhyClockSelection = __HAL_RCC_GET_USBPHY_SOURCE();
#endif /*  defined(USB_OTG_HS) */
}
 800848e:	bf00      	nop
 8008490:	370c      	adds	r7, #12
 8008492:	46bd      	mov	sp, r7
 8008494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008498:	4770      	bx	lr
 800849a:	bf00      	nop
 800849c:	46020c00 	.word	0x46020c00

080084a0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80084a0:	b480      	push	{r7}
 80084a2:	b089      	sub	sp, #36	; 0x24
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 80084a8:	4bac      	ldr	r3, [pc, #688]	; (800875c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80084aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084b0:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80084b2:	4baa      	ldr	r3, [pc, #680]	; (800875c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80084b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084b6:	f003 0303 	and.w	r3, r3, #3
 80084ba:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80084bc:	4ba7      	ldr	r3, [pc, #668]	; (800875c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80084be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084c0:	0a1b      	lsrs	r3, r3, #8
 80084c2:	f003 030f 	and.w	r3, r3, #15
 80084c6:	3301      	adds	r3, #1
 80084c8:	613b      	str	r3, [r7, #16]
  pll1fracen = RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN;
 80084ca:	4ba4      	ldr	r3, [pc, #656]	; (800875c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80084cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084ce:	f003 0310 	and.w	r3, r3, #16
 80084d2:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80084d4:	4ba1      	ldr	r3, [pc, #644]	; (800875c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80084d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084d8:	08db      	lsrs	r3, r3, #3
 80084da:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80084de:	68fa      	ldr	r2, [r7, #12]
 80084e0:	fb02 f303 	mul.w	r3, r2, r3
 80084e4:	ee07 3a90 	vmov	s15, r3
 80084e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084ec:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 80084f0:	693b      	ldr	r3, [r7, #16]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	f000 8123 	beq.w	800873e <HAL_RCCEx_GetPLL1ClockFreq+0x29e>
  {
    switch (pll1source)
 80084f8:	697b      	ldr	r3, [r7, #20]
 80084fa:	2b03      	cmp	r3, #3
 80084fc:	d062      	beq.n	80085c4 <HAL_RCCEx_GetPLL1ClockFreq+0x124>
 80084fe:	697b      	ldr	r3, [r7, #20]
 8008500:	2b03      	cmp	r3, #3
 8008502:	f200 8081 	bhi.w	8008608 <HAL_RCCEx_GetPLL1ClockFreq+0x168>
 8008506:	697b      	ldr	r3, [r7, #20]
 8008508:	2b01      	cmp	r3, #1
 800850a:	d024      	beq.n	8008556 <HAL_RCCEx_GetPLL1ClockFreq+0xb6>
 800850c:	697b      	ldr	r3, [r7, #20]
 800850e:	2b02      	cmp	r3, #2
 8008510:	d17a      	bne.n	8008608 <HAL_RCCEx_GetPLL1ClockFreq+0x168>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008512:	693b      	ldr	r3, [r7, #16]
 8008514:	ee07 3a90 	vmov	s15, r3
 8008518:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800851c:	eddf 6a90 	vldr	s13, [pc, #576]	; 8008760 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>
 8008520:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008524:	4b8d      	ldr	r3, [pc, #564]	; (800875c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8008526:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008528:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800852c:	ee07 3a90 	vmov	s15, r3
 8008530:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8008534:	ed97 6a02 	vldr	s12, [r7, #8]
 8008538:	eddf 5a8a 	vldr	s11, [pc, #552]	; 8008764 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 800853c:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008540:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8008544:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008548:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800854c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008550:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008554:	e08f      	b.n	8008676 <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8008556:	4b81      	ldr	r3, [pc, #516]	; (800875c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8008558:	689b      	ldr	r3, [r3, #8]
 800855a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800855e:	2b00      	cmp	r3, #0
 8008560:	d005      	beq.n	800856e <HAL_RCCEx_GetPLL1ClockFreq+0xce>
 8008562:	4b7e      	ldr	r3, [pc, #504]	; (800875c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8008564:	689b      	ldr	r3, [r3, #8]
 8008566:	0f1b      	lsrs	r3, r3, #28
 8008568:	f003 030f 	and.w	r3, r3, #15
 800856c:	e006      	b.n	800857c <HAL_RCCEx_GetPLL1ClockFreq+0xdc>
 800856e:	4b7b      	ldr	r3, [pc, #492]	; (800875c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8008570:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008574:	041b      	lsls	r3, r3, #16
 8008576:	0f1b      	lsrs	r3, r3, #28
 8008578:	f003 030f 	and.w	r3, r3, #15
 800857c:	4a7a      	ldr	r2, [pc, #488]	; (8008768 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 800857e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008582:	ee07 3a90 	vmov	s15, r3
 8008586:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800858a:	693b      	ldr	r3, [r7, #16]
 800858c:	ee07 3a90 	vmov	s15, r3
 8008590:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008594:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008598:	69bb      	ldr	r3, [r7, #24]
 800859a:	ee07 3a90 	vmov	s15, r3
 800859e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80085a6:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8008764 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 80085aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80085ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80085b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80085ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80085c2:	e058      	b.n	8008676 <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80085c4:	693b      	ldr	r3, [r7, #16]
 80085c6:	ee07 3a90 	vmov	s15, r3
 80085ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085ce:	eddf 6a64 	vldr	s13, [pc, #400]	; 8008760 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>
 80085d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80085d6:	4b61      	ldr	r3, [pc, #388]	; (800875c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80085d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085de:	ee07 3a90 	vmov	s15, r3
 80085e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80085e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80085ea:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8008764 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 80085ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80085f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80085f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80085fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80085fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008602:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008606:	e036      	b.n	8008676 <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      default:
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8008608:	4b54      	ldr	r3, [pc, #336]	; (800875c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800860a:	689b      	ldr	r3, [r3, #8]
 800860c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008610:	2b00      	cmp	r3, #0
 8008612:	d005      	beq.n	8008620 <HAL_RCCEx_GetPLL1ClockFreq+0x180>
 8008614:	4b51      	ldr	r3, [pc, #324]	; (800875c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8008616:	689b      	ldr	r3, [r3, #8]
 8008618:	0f1b      	lsrs	r3, r3, #28
 800861a:	f003 030f 	and.w	r3, r3, #15
 800861e:	e006      	b.n	800862e <HAL_RCCEx_GetPLL1ClockFreq+0x18e>
 8008620:	4b4e      	ldr	r3, [pc, #312]	; (800875c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8008622:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008626:	041b      	lsls	r3, r3, #16
 8008628:	0f1b      	lsrs	r3, r3, #28
 800862a:	f003 030f 	and.w	r3, r3, #15
 800862e:	4a4e      	ldr	r2, [pc, #312]	; (8008768 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8008630:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008634:	ee07 3a90 	vmov	s15, r3
 8008638:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800863c:	693b      	ldr	r3, [r7, #16]
 800863e:	ee07 3a90 	vmov	s15, r3
 8008642:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008646:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800864a:	69bb      	ldr	r3, [r7, #24]
 800864c:	ee07 3a90 	vmov	s15, r3
 8008650:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008654:	ed97 6a02 	vldr	s12, [r7, #8]
 8008658:	eddf 5a42 	vldr	s11, [pc, #264]	; 8008764 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 800865c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008660:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008664:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008668:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800866c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008670:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008674:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8008676:	4b39      	ldr	r3, [pc, #228]	; (800875c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8008678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800867a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800867e:	2b00      	cmp	r3, #0
 8008680:	d017      	beq.n	80086b2 <HAL_RCCEx_GetPLL1ClockFreq+0x212>
    {
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8008682:	4b36      	ldr	r3, [pc, #216]	; (800875c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8008684:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008686:	0a5b      	lsrs	r3, r3, #9
 8008688:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800868c:	ee07 3a90 	vmov	s15, r3
 8008690:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 8008694:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008698:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800869c:	edd7 6a07 	vldr	s13, [r7, #28]
 80086a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80086a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80086a8:	ee17 2a90 	vmov	r2, s15
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	601a      	str	r2, [r3, #0]
 80086b0:	e002      	b.n	80086b8 <HAL_RCCEx_GetPLL1ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_P_Frequency = 0U;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	2200      	movs	r2, #0
 80086b6:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 80086b8:	4b28      	ldr	r3, [pc, #160]	; (800875c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80086ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d017      	beq.n	80086f4 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
    {
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80086c4:	4b25      	ldr	r3, [pc, #148]	; (800875c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80086c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086c8:	0c1b      	lsrs	r3, r3, #16
 80086ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80086ce:	ee07 3a90 	vmov	s15, r3
 80086d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 80086d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80086da:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80086de:	edd7 6a07 	vldr	s13, [r7, #28]
 80086e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80086e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80086ea:	ee17 2a90 	vmov	r2, s15
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	605a      	str	r2, [r3, #4]
 80086f2:	e002      	b.n	80086fa <HAL_RCCEx_GetPLL1ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2200      	movs	r2, #0
 80086f8:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 80086fa:	4b18      	ldr	r3, [pc, #96]	; (800875c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80086fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008702:	2b00      	cmp	r3, #0
 8008704:	d017      	beq.n	8008736 <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    {
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8008706:	4b15      	ldr	r3, [pc, #84]	; (800875c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8008708:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800870a:	0e1b      	lsrs	r3, r3, #24
 800870c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008710:	ee07 3a90 	vmov	s15, r3
 8008714:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 8008718:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800871c:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8008720:	edd7 6a07 	vldr	s13, [r7, #28]
 8008724:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008728:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800872c:	ee17 2a90 	vmov	r2, s15
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8008734:	e00c      	b.n	8008750 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>
      PLL1_Clocks->PLL1_R_Frequency = 0U;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	2200      	movs	r2, #0
 800873a:	609a      	str	r2, [r3, #8]
}
 800873c:	e008      	b.n	8008750 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	2200      	movs	r2, #0
 8008742:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2200      	movs	r2, #0
 8008748:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	2200      	movs	r2, #0
 800874e:	609a      	str	r2, [r3, #8]
}
 8008750:	bf00      	nop
 8008752:	3724      	adds	r7, #36	; 0x24
 8008754:	46bd      	mov	sp, r7
 8008756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875a:	4770      	bx	lr
 800875c:	46020c00 	.word	0x46020c00
 8008760:	4b742400 	.word	0x4b742400
 8008764:	46000000 	.word	0x46000000
 8008768:	08027de0 	.word	0x08027de0

0800876c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800876c:	b480      	push	{r7}
 800876e:	b089      	sub	sp, #36	; 0x24
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8008774:	4bac      	ldr	r3, [pc, #688]	; (8008a28 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8008776:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008778:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800877c:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 800877e:	4baa      	ldr	r3, [pc, #680]	; (8008a28 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8008780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008782:	f003 0303 	and.w	r3, r3, #3
 8008786:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8008788:	4ba7      	ldr	r3, [pc, #668]	; (8008a28 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800878a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800878c:	0a1b      	lsrs	r3, r3, #8
 800878e:	f003 030f 	and.w	r3, r3, #15
 8008792:	3301      	adds	r3, #1
 8008794:	613b      	str	r3, [r7, #16]
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 8008796:	4ba4      	ldr	r3, [pc, #656]	; (8008a28 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8008798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800879a:	f003 0310 	and.w	r3, r3, #16
 800879e:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 80087a0:	4ba1      	ldr	r3, [pc, #644]	; (8008a28 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80087a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087a4:	08db      	lsrs	r3, r3, #3
 80087a6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80087aa:	68fa      	ldr	r2, [r7, #12]
 80087ac:	fb02 f303 	mul.w	r3, r2, r3
 80087b0:	ee07 3a90 	vmov	s15, r3
 80087b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087b8:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 80087bc:	693b      	ldr	r3, [r7, #16]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	f000 8123 	beq.w	8008a0a <HAL_RCCEx_GetPLL2ClockFreq+0x29e>
  {
    switch (pll2source)
 80087c4:	697b      	ldr	r3, [r7, #20]
 80087c6:	2b03      	cmp	r3, #3
 80087c8:	d062      	beq.n	8008890 <HAL_RCCEx_GetPLL2ClockFreq+0x124>
 80087ca:	697b      	ldr	r3, [r7, #20]
 80087cc:	2b03      	cmp	r3, #3
 80087ce:	f200 8081 	bhi.w	80088d4 <HAL_RCCEx_GetPLL2ClockFreq+0x168>
 80087d2:	697b      	ldr	r3, [r7, #20]
 80087d4:	2b01      	cmp	r3, #1
 80087d6:	d024      	beq.n	8008822 <HAL_RCCEx_GetPLL2ClockFreq+0xb6>
 80087d8:	697b      	ldr	r3, [r7, #20]
 80087da:	2b02      	cmp	r3, #2
 80087dc:	d17a      	bne.n	80088d4 <HAL_RCCEx_GetPLL2ClockFreq+0x168>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80087de:	693b      	ldr	r3, [r7, #16]
 80087e0:	ee07 3a90 	vmov	s15, r3
 80087e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087e8:	eddf 6a90 	vldr	s13, [pc, #576]	; 8008a2c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>
 80087ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80087f0:	4b8d      	ldr	r3, [pc, #564]	; (8008a28 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80087f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087f8:	ee07 3a90 	vmov	s15, r3
 80087fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8008800:	ed97 6a02 	vldr	s12, [r7, #8]
 8008804:	eddf 5a8a 	vldr	s11, [pc, #552]	; 8008a30 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8008808:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800880c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8008810:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008814:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8008818:	ee67 7a27 	vmul.f32	s15, s14, s15
 800881c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008820:	e08f      	b.n	8008942 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8008822:	4b81      	ldr	r3, [pc, #516]	; (8008a28 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8008824:	689b      	ldr	r3, [r3, #8]
 8008826:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800882a:	2b00      	cmp	r3, #0
 800882c:	d005      	beq.n	800883a <HAL_RCCEx_GetPLL2ClockFreq+0xce>
 800882e:	4b7e      	ldr	r3, [pc, #504]	; (8008a28 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8008830:	689b      	ldr	r3, [r3, #8]
 8008832:	0f1b      	lsrs	r3, r3, #28
 8008834:	f003 030f 	and.w	r3, r3, #15
 8008838:	e006      	b.n	8008848 <HAL_RCCEx_GetPLL2ClockFreq+0xdc>
 800883a:	4b7b      	ldr	r3, [pc, #492]	; (8008a28 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800883c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008840:	041b      	lsls	r3, r3, #16
 8008842:	0f1b      	lsrs	r3, r3, #28
 8008844:	f003 030f 	and.w	r3, r3, #15
 8008848:	4a7a      	ldr	r2, [pc, #488]	; (8008a34 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 800884a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800884e:	ee07 3a90 	vmov	s15, r3
 8008852:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008856:	693b      	ldr	r3, [r7, #16]
 8008858:	ee07 3a90 	vmov	s15, r3
 800885c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008860:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008864:	69bb      	ldr	r3, [r7, #24]
 8008866:	ee07 3a90 	vmov	s15, r3
 800886a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800886e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008872:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8008a30 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8008876:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800887a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800887e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008882:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8008886:	ee67 7a27 	vmul.f32	s15, s14, s15
 800888a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800888e:	e058      	b.n	8008942 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8008890:	693b      	ldr	r3, [r7, #16]
 8008892:	ee07 3a90 	vmov	s15, r3
 8008896:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800889a:	eddf 6a64 	vldr	s13, [pc, #400]	; 8008a2c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>
 800889e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80088a2:	4b61      	ldr	r3, [pc, #388]	; (8008a28 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80088a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088aa:	ee07 3a90 	vmov	s15, r3
 80088ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 80088b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80088b6:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8008a30 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 80088ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80088be:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 80088c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80088c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80088ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80088d2:	e036      	b.n	8008942 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      default:
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 80088d4:	4b54      	ldr	r3, [pc, #336]	; (8008a28 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80088d6:	689b      	ldr	r3, [r3, #8]
 80088d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d005      	beq.n	80088ec <HAL_RCCEx_GetPLL2ClockFreq+0x180>
 80088e0:	4b51      	ldr	r3, [pc, #324]	; (8008a28 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80088e2:	689b      	ldr	r3, [r3, #8]
 80088e4:	0f1b      	lsrs	r3, r3, #28
 80088e6:	f003 030f 	and.w	r3, r3, #15
 80088ea:	e006      	b.n	80088fa <HAL_RCCEx_GetPLL2ClockFreq+0x18e>
 80088ec:	4b4e      	ldr	r3, [pc, #312]	; (8008a28 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80088ee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80088f2:	041b      	lsls	r3, r3, #16
 80088f4:	0f1b      	lsrs	r3, r3, #28
 80088f6:	f003 030f 	and.w	r3, r3, #15
 80088fa:	4a4e      	ldr	r2, [pc, #312]	; (8008a34 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 80088fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008900:	ee07 3a90 	vmov	s15, r3
 8008904:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008908:	693b      	ldr	r3, [r7, #16]
 800890a:	ee07 3a90 	vmov	s15, r3
 800890e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008912:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008916:	69bb      	ldr	r3, [r7, #24]
 8008918:	ee07 3a90 	vmov	s15, r3
 800891c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008920:	ed97 6a02 	vldr	s12, [r7, #8]
 8008924:	eddf 5a42 	vldr	s11, [pc, #264]	; 8008a30 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8008928:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800892c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008930:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008934:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8008938:	ee67 7a27 	vmul.f32	s15, s14, s15
 800893c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008940:	bf00      	nop
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8008942:	4b39      	ldr	r3, [pc, #228]	; (8008a28 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8008944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008946:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800894a:	2b00      	cmp	r3, #0
 800894c:	d017      	beq.n	800897e <HAL_RCCEx_GetPLL2ClockFreq+0x212>
    {
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800894e:	4b36      	ldr	r3, [pc, #216]	; (8008a28 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8008950:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008952:	0a5b      	lsrs	r3, r3, #9
 8008954:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008958:	ee07 3a90 	vmov	s15, r3
 800895c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 8008960:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008964:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8008968:	edd7 6a07 	vldr	s13, [r7, #28]
 800896c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008970:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008974:	ee17 2a90 	vmov	r2, s15
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	601a      	str	r2, [r3, #0]
 800897c:	e002      	b.n	8008984 <HAL_RCCEx_GetPLL2ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_P_Frequency = 0U;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	2200      	movs	r2, #0
 8008982:	601a      	str	r2, [r3, #0]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8008984:	4b28      	ldr	r3, [pc, #160]	; (8008a28 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8008986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008988:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800898c:	2b00      	cmp	r3, #0
 800898e:	d017      	beq.n	80089c0 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
    {
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8008990:	4b25      	ldr	r3, [pc, #148]	; (8008a28 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8008992:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008994:	0c1b      	lsrs	r3, r3, #16
 8008996:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800899a:	ee07 3a90 	vmov	s15, r3
 800899e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 80089a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80089a6:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80089aa:	edd7 6a07 	vldr	s13, [r7, #28]
 80089ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80089b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80089b6:	ee17 2a90 	vmov	r2, s15
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	605a      	str	r2, [r3, #4]
 80089be:	e002      	b.n	80089c6 <HAL_RCCEx_GetPLL2ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	2200      	movs	r2, #0
 80089c4:	605a      	str	r2, [r3, #4]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 80089c6:	4b18      	ldr	r3, [pc, #96]	; (8008a28 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80089c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d017      	beq.n	8008a02 <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    {
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80089d2:	4b15      	ldr	r3, [pc, #84]	; (8008a28 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80089d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089d6:	0e1b      	lsrs	r3, r3, #24
 80089d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089dc:	ee07 3a90 	vmov	s15, r3
 80089e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 80089e4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80089e8:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80089ec:	edd7 6a07 	vldr	s13, [r7, #28]
 80089f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80089f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80089f8:	ee17 2a90 	vmov	r2, s15
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008a00:	e00c      	b.n	8008a1c <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>
      PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	2200      	movs	r2, #0
 8008a06:	609a      	str	r2, [r3, #8]
}
 8008a08:	e008      	b.n	8008a1c <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	2200      	movs	r2, #0
 8008a0e:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	2200      	movs	r2, #0
 8008a14:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	2200      	movs	r2, #0
 8008a1a:	609a      	str	r2, [r3, #8]
}
 8008a1c:	bf00      	nop
 8008a1e:	3724      	adds	r7, #36	; 0x24
 8008a20:	46bd      	mov	sp, r7
 8008a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a26:	4770      	bx	lr
 8008a28:	46020c00 	.word	0x46020c00
 8008a2c:	4b742400 	.word	0x4b742400
 8008a30:	46000000 	.word	0x46000000
 8008a34:	08027de0 	.word	0x08027de0

08008a38 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8008a38:	b480      	push	{r7}
 8008a3a:	b089      	sub	sp, #36	; 0x24
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8008a40:	4bac      	ldr	r3, [pc, #688]	; (8008cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8008a42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a48:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8008a4a:	4baa      	ldr	r3, [pc, #680]	; (8008cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8008a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a4e:	f003 0303 	and.w	r3, r3, #3
 8008a52:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8008a54:	4ba7      	ldr	r3, [pc, #668]	; (8008cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8008a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a58:	0a1b      	lsrs	r3, r3, #8
 8008a5a:	f003 030f 	and.w	r3, r3, #15
 8008a5e:	3301      	adds	r3, #1
 8008a60:	613b      	str	r3, [r7, #16]
  pll3fracen = RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN;
 8008a62:	4ba4      	ldr	r3, [pc, #656]	; (8008cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8008a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a66:	f003 0310 	and.w	r3, r3, #16
 8008a6a:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8008a6c:	4ba1      	ldr	r3, [pc, #644]	; (8008cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8008a6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008a70:	08db      	lsrs	r3, r3, #3
 8008a72:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008a76:	68fa      	ldr	r2, [r7, #12]
 8008a78:	fb02 f303 	mul.w	r3, r2, r3
 8008a7c:	ee07 3a90 	vmov	s15, r3
 8008a80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a84:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 8008a88:	693b      	ldr	r3, [r7, #16]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	f000 8123 	beq.w	8008cd6 <HAL_RCCEx_GetPLL3ClockFreq+0x29e>
  {
    switch (pll3source)
 8008a90:	697b      	ldr	r3, [r7, #20]
 8008a92:	2b03      	cmp	r3, #3
 8008a94:	d062      	beq.n	8008b5c <HAL_RCCEx_GetPLL3ClockFreq+0x124>
 8008a96:	697b      	ldr	r3, [r7, #20]
 8008a98:	2b03      	cmp	r3, #3
 8008a9a:	f200 8081 	bhi.w	8008ba0 <HAL_RCCEx_GetPLL3ClockFreq+0x168>
 8008a9e:	697b      	ldr	r3, [r7, #20]
 8008aa0:	2b01      	cmp	r3, #1
 8008aa2:	d024      	beq.n	8008aee <HAL_RCCEx_GetPLL3ClockFreq+0xb6>
 8008aa4:	697b      	ldr	r3, [r7, #20]
 8008aa6:	2b02      	cmp	r3, #2
 8008aa8:	d17a      	bne.n	8008ba0 <HAL_RCCEx_GetPLL3ClockFreq+0x168>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8008aaa:	693b      	ldr	r3, [r7, #16]
 8008aac:	ee07 3a90 	vmov	s15, r3
 8008ab0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ab4:	eddf 6a90 	vldr	s13, [pc, #576]	; 8008cf8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>
 8008ab8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008abc:	4b8d      	ldr	r3, [pc, #564]	; (8008cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8008abe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ac0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ac4:	ee07 3a90 	vmov	s15, r3
 8008ac8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8008acc:	ed97 6a02 	vldr	s12, [r7, #8]
 8008ad0:	eddf 5a8a 	vldr	s11, [pc, #552]	; 8008cfc <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 8008ad4:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8008ad8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8008adc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008ae0:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8008ae4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ae8:	edc7 7a07 	vstr	s15, [r7, #28]

        break;
 8008aec:	e08f      	b.n	8008c0e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8008aee:	4b81      	ldr	r3, [pc, #516]	; (8008cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8008af0:	689b      	ldr	r3, [r3, #8]
 8008af2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d005      	beq.n	8008b06 <HAL_RCCEx_GetPLL3ClockFreq+0xce>
 8008afa:	4b7e      	ldr	r3, [pc, #504]	; (8008cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8008afc:	689b      	ldr	r3, [r3, #8]
 8008afe:	0f1b      	lsrs	r3, r3, #28
 8008b00:	f003 030f 	and.w	r3, r3, #15
 8008b04:	e006      	b.n	8008b14 <HAL_RCCEx_GetPLL3ClockFreq+0xdc>
 8008b06:	4b7b      	ldr	r3, [pc, #492]	; (8008cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8008b08:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008b0c:	041b      	lsls	r3, r3, #16
 8008b0e:	0f1b      	lsrs	r3, r3, #28
 8008b10:	f003 030f 	and.w	r3, r3, #15
 8008b14:	4a7a      	ldr	r2, [pc, #488]	; (8008d00 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 8008b16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008b1a:	ee07 3a90 	vmov	s15, r3
 8008b1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b22:	693b      	ldr	r3, [r7, #16]
 8008b24:	ee07 3a90 	vmov	s15, r3
 8008b28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b2c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008b30:	69bb      	ldr	r3, [r7, #24]
 8008b32:	ee07 3a90 	vmov	s15, r3
 8008b36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b3a:	ed97 6a02 	vldr	s12, [r7, #8]
 8008b3e:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8008cfc <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 8008b42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008b4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8008b52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b56:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008b5a:	e058      	b.n	8008c0e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8008b5c:	693b      	ldr	r3, [r7, #16]
 8008b5e:	ee07 3a90 	vmov	s15, r3
 8008b62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b66:	eddf 6a64 	vldr	s13, [pc, #400]	; 8008cf8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>
 8008b6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b6e:	4b61      	ldr	r3, [pc, #388]	; (8008cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8008b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b76:	ee07 3a90 	vmov	s15, r3
 8008b7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8008b7e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008b82:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8008cfc <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 8008b86:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8008b8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8008b8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008b92:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8008b96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008b9e:	e036      	b.n	8008c0e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

      default:
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8008ba0:	4b54      	ldr	r3, [pc, #336]	; (8008cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8008ba2:	689b      	ldr	r3, [r3, #8]
 8008ba4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d005      	beq.n	8008bb8 <HAL_RCCEx_GetPLL3ClockFreq+0x180>
 8008bac:	4b51      	ldr	r3, [pc, #324]	; (8008cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8008bae:	689b      	ldr	r3, [r3, #8]
 8008bb0:	0f1b      	lsrs	r3, r3, #28
 8008bb2:	f003 030f 	and.w	r3, r3, #15
 8008bb6:	e006      	b.n	8008bc6 <HAL_RCCEx_GetPLL3ClockFreq+0x18e>
 8008bb8:	4b4e      	ldr	r3, [pc, #312]	; (8008cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8008bba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008bbe:	041b      	lsls	r3, r3, #16
 8008bc0:	0f1b      	lsrs	r3, r3, #28
 8008bc2:	f003 030f 	and.w	r3, r3, #15
 8008bc6:	4a4e      	ldr	r2, [pc, #312]	; (8008d00 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 8008bc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008bcc:	ee07 3a90 	vmov	s15, r3
 8008bd0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008bd4:	693b      	ldr	r3, [r7, #16]
 8008bd6:	ee07 3a90 	vmov	s15, r3
 8008bda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008be2:	69bb      	ldr	r3, [r7, #24]
 8008be4:	ee07 3a90 	vmov	s15, r3
 8008be8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008bec:	ed97 6a02 	vldr	s12, [r7, #8]
 8008bf0:	eddf 5a42 	vldr	s11, [pc, #264]	; 8008cfc <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 8008bf4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008bf8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008bfc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008c00:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8008c04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c08:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008c0c:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8008c0e:	4b39      	ldr	r3, [pc, #228]	; (8008cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8008c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d017      	beq.n	8008c4a <HAL_RCCEx_GetPLL3ClockFreq+0x212>
    {
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8008c1a:	4b36      	ldr	r3, [pc, #216]	; (8008cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8008c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c1e:	0a5b      	lsrs	r3, r3, #9
 8008c20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c24:	ee07 3a90 	vmov	s15, r3
 8008c28:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 8008c2c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008c30:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8008c34:	edd7 6a07 	vldr	s13, [r7, #28]
 8008c38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008c3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008c40:	ee17 2a90 	vmov	r2, s15
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	601a      	str	r2, [r3, #0]
 8008c48:	e002      	b.n	8008c50 <HAL_RCCEx_GetPLL3ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	2200      	movs	r2, #0
 8008c4e:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8008c50:	4b28      	ldr	r3, [pc, #160]	; (8008cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8008c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d017      	beq.n	8008c8c <HAL_RCCEx_GetPLL3ClockFreq+0x254>
    {
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8008c5c:	4b25      	ldr	r3, [pc, #148]	; (8008cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8008c5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c60:	0c1b      	lsrs	r3, r3, #16
 8008c62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c66:	ee07 3a90 	vmov	s15, r3
 8008c6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 8008c6e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008c72:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8008c76:	edd7 6a07 	vldr	s13, [r7, #28]
 8008c7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008c7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008c82:	ee17 2a90 	vmov	r2, s15
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	605a      	str	r2, [r3, #4]
 8008c8a:	e002      	b.n	8008c92 <HAL_RCCEx_GetPLL3ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	2200      	movs	r2, #0
 8008c90:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8008c92:	4b18      	ldr	r3, [pc, #96]	; (8008cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8008c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d017      	beq.n	8008cce <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    {
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8008c9e:	4b15      	ldr	r3, [pc, #84]	; (8008cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8008ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ca2:	0e1b      	lsrs	r3, r3, #24
 8008ca4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ca8:	ee07 3a90 	vmov	s15, r3
 8008cac:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 8008cb0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008cb4:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8008cb8:	edd7 6a07 	vldr	s13, [r7, #28]
 8008cbc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008cc0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008cc4:	ee17 2a90 	vmov	r2, s15
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	609a      	str	r2, [r3, #8]
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 8008ccc:	e00c      	b.n	8008ce8 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>
      PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	2200      	movs	r2, #0
 8008cd2:	609a      	str	r2, [r3, #8]
}
 8008cd4:	e008      	b.n	8008ce8 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	2200      	movs	r2, #0
 8008cda:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	2200      	movs	r2, #0
 8008ce0:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	2200      	movs	r2, #0
 8008ce6:	609a      	str	r2, [r3, #8]
}
 8008ce8:	bf00      	nop
 8008cea:	3724      	adds	r7, #36	; 0x24
 8008cec:	46bd      	mov	sp, r7
 8008cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf2:	4770      	bx	lr
 8008cf4:	46020c00 	.word	0x46020c00
 8008cf8:	4b742400 	.word	0x4b742400
 8008cfc:	46000000 	.word	0x46000000
 8008d00:	08027de0 	.word	0x08027de0

08008d04 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_FDCAN1 FDCAN1 peripheral clock
  *            @arg @ref RCC_PERIPHCLK_DAC1 DAC1 peripheral clock
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8008d04:	b5b0      	push	{r4, r5, r7, lr}
 8008d06:	b08e      	sub	sp, #56	; 0x38
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	e9c7 0100 	strd	r0, r1, [r7]

  uint32_t frequency;
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
 8008d0e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008d12:	f020 4260 	bic.w	r2, r0, #3758096384	; 0xe0000000
 8008d16:	2300      	movs	r3, #0
 8008d18:	4313      	orrs	r3, r2
 8008d1a:	d007      	beq.n	8008d2c <HAL_RCCEx_GetPeriphCLKFreq+0x28>
 8008d1c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d20:	f002 4460 	and.w	r4, r2, #3758096384	; 0xe0000000
 8008d24:	461d      	mov	r5, r3
 8008d26:	ea54 0305 	orrs.w	r3, r4, r5
 8008d2a:	d004      	beq.n	8008d36 <HAL_RCCEx_GetPeriphCLKFreq+0x32>
 8008d2c:	f240 61f6 	movw	r1, #1782	; 0x6f6
 8008d30:	4899      	ldr	r0, [pc, #612]	; (8008f98 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008d32:	f00c faba 	bl	80152aa <assert_failed>

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8008d36:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d3a:	f5a2 2180 	sub.w	r1, r2, #262144	; 0x40000
 8008d3e:	430b      	orrs	r3, r1
 8008d40:	d145      	bne.n	8008dce <HAL_RCCEx_GetPeriphCLKFreq+0xca>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8008d42:	4b96      	ldr	r3, [pc, #600]	; (8008f9c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008d44:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008d48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008d4c:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8008d4e:	4b93      	ldr	r3, [pc, #588]	; (8008f9c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008d50:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008d54:	f003 0302 	and.w	r3, r3, #2
 8008d58:	2b02      	cmp	r3, #2
 8008d5a:	d108      	bne.n	8008d6e <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
 8008d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d62:	d104      	bne.n	8008d6e <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
    {
      frequency = LSE_VALUE;
 8008d64:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008d68:	637b      	str	r3, [r7, #52]	; 0x34
 8008d6a:	f001 b8fc 	b.w	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8008d6e:	4b8b      	ldr	r3, [pc, #556]	; (8008f9c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008d70:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008d74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008d78:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008d7c:	d114      	bne.n	8008da8 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
 8008d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008d84:	d110      	bne.n	8008da8 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008d86:	4b85      	ldr	r3, [pc, #532]	; (8008f9c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008d88:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008d8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008d90:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008d94:	d103      	bne.n	8008d9e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      {
        frequency = LSI_VALUE / 128U;
 8008d96:	23fa      	movs	r3, #250	; 0xfa
 8008d98:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008d9a:	f001 b8e4 	b.w	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>
      }
      else
      {
        frequency = LSI_VALUE;
 8008d9e:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8008da2:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008da4:	f001 b8df 	b.w	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8008da8:	4b7c      	ldr	r3, [pc, #496]	; (8008f9c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008db0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008db4:	d107      	bne.n	8008dc6 <HAL_RCCEx_GetPeriphCLKFreq+0xc2>
 8008db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008db8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008dbc:	d103      	bne.n	8008dc6 <HAL_RCCEx_GetPeriphCLKFreq+0xc2>
    {
      frequency = HSE_VALUE / 32U;
 8008dbe:	4b78      	ldr	r3, [pc, #480]	; (8008fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008dc0:	637b      	str	r3, [r7, #52]	; 0x34
 8008dc2:	f001 b8d0 	b.w	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8008dc6:	2300      	movs	r3, #0
 8008dc8:	637b      	str	r3, [r7, #52]	; 0x34
 8008dca:	f001 b8cc 	b.w	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008dce:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008dd2:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8008dd6:	430b      	orrs	r3, r1
 8008dd8:	d151      	bne.n	8008e7e <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8008dda:	4b70      	ldr	r3, [pc, #448]	; (8008f9c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008ddc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008de0:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8008de4:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8008de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008de8:	2b80      	cmp	r3, #128	; 0x80
 8008dea:	d035      	beq.n	8008e58 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8008dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dee:	2b80      	cmp	r3, #128	; 0x80
 8008df0:	d841      	bhi.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0x172>
 8008df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008df4:	2b60      	cmp	r3, #96	; 0x60
 8008df6:	d02a      	beq.n	8008e4e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8008df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dfa:	2b60      	cmp	r3, #96	; 0x60
 8008dfc:	d83b      	bhi.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0x172>
 8008dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e00:	2b40      	cmp	r3, #64	; 0x40
 8008e02:	d009      	beq.n	8008e18 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 8008e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e06:	2b40      	cmp	r3, #64	; 0x40
 8008e08:	d835      	bhi.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0x172>
 8008e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d00c      	beq.n	8008e2a <HAL_RCCEx_GetPeriphCLKFreq+0x126>
 8008e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e12:	2b20      	cmp	r3, #32
 8008e14:	d012      	beq.n	8008e3c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8008e16:	e02e      	b.n	8008e76 <HAL_RCCEx_GetPeriphCLKFreq+0x172>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008e18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	f7ff fb3f 	bl	80084a0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8008e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e24:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008e26:	f001 b89e 	b.w	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008e2a:	f107 0318 	add.w	r3, r7, #24
 8008e2e:	4618      	mov	r0, r3
 8008e30:	f7ff fc9c 	bl	800876c <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8008e34:	69bb      	ldr	r3, [r7, #24]
 8008e36:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008e38:	f001 b895 	b.w	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008e3c:	f107 030c 	add.w	r3, r7, #12
 8008e40:	4618      	mov	r0, r3
 8008e42:	f7ff fdf9 	bl	8008a38 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008e4a:	f001 b88c 	b.w	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8008e4e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8008e52:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008e54:	f001 b887 	b.w	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008e58:	4b50      	ldr	r3, [pc, #320]	; (8008f9c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008e60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008e64:	d103      	bne.n	8008e6e <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
        {
          frequency = HSI_VALUE;
 8008e66:	4b4f      	ldr	r3, [pc, #316]	; (8008fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008e68:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008e6a:	f001 b87c 	b.w	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>
          frequency = 0U;
 8008e6e:	2300      	movs	r3, #0
 8008e70:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008e72:	f001 b878 	b.w	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>

      default :
      {
        frequency = 0U;
 8008e76:	2300      	movs	r3, #0
 8008e78:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008e7a:	f001 b874 	b.w	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8008e7e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e82:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8008e86:	430b      	orrs	r3, r1
 8008e88:	d158      	bne.n	8008f3c <HAL_RCCEx_GetPeriphCLKFreq+0x238>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8008e8a:	4b44      	ldr	r3, [pc, #272]	; (8008f9c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008e8c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008e90:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008e94:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8008e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008e9c:	d03b      	beq.n	8008f16 <HAL_RCCEx_GetPeriphCLKFreq+0x212>
 8008e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ea0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008ea4:	d846      	bhi.n	8008f34 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
 8008ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ea8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008eac:	d02e      	beq.n	8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8008eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eb0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008eb4:	d83e      	bhi.n	8008f34 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
 8008eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ebc:	d00b      	beq.n	8008ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x1d2>
 8008ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ec0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ec4:	d836      	bhi.n	8008f34 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
 8008ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d00d      	beq.n	8008ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
 8008ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ece:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008ed2:	d012      	beq.n	8008efa <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
 8008ed4:	e02e      	b.n	8008f34 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008ed6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008eda:	4618      	mov	r0, r3
 8008edc:	f7ff fae0 	bl	80084a0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8008ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ee2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008ee4:	f001 b83f 	b.w	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008ee8:	f107 0318 	add.w	r3, r7, #24
 8008eec:	4618      	mov	r0, r3
 8008eee:	f7ff fc3d 	bl	800876c <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8008ef2:	69bb      	ldr	r3, [r7, #24]
 8008ef4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008ef6:	f001 b836 	b.w	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008efa:	f107 030c 	add.w	r3, r7, #12
 8008efe:	4618      	mov	r0, r3
 8008f00:	f7ff fd9a 	bl	8008a38 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008f08:	f001 b82d 	b.w	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8008f0c:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8008f10:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008f12:	f001 b828 	b.w	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008f16:	4b21      	ldr	r3, [pc, #132]	; (8008f9c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008f1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008f22:	d103      	bne.n	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x228>
        {
          frequency = HSI_VALUE;
 8008f24:	4b1f      	ldr	r3, [pc, #124]	; (8008fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008f26:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008f28:	f001 b81d 	b.w	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>
          frequency = 0U;
 8008f2c:	2300      	movs	r3, #0
 8008f2e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008f30:	f001 b819 	b.w	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>

      default :

        frequency = 0U;
 8008f34:	2300      	movs	r3, #0
 8008f36:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008f38:	f001 b815 	b.w	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 8008f3c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f40:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8008f44:	430b      	orrs	r3, r1
 8008f46:	d131      	bne.n	8008fac <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 8008f48:	4b14      	ldr	r3, [pc, #80]	; (8008f9c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008f4a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008f4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008f52:	633b      	str	r3, [r7, #48]	; 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 8008f54:	4b11      	ldr	r3, [pc, #68]	; (8008f9c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008f5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008f60:	d106      	bne.n	8008f70 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
 8008f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d103      	bne.n	8008f70 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
    {
      frequency = HSI_VALUE;
 8008f68:	4b0e      	ldr	r3, [pc, #56]	; (8008fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008f6a:	637b      	str	r3, [r7, #52]	; 0x34
 8008f6c:	f000 bffb 	b.w	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 8008f70:	4b0a      	ldr	r3, [pc, #40]	; (8008f9c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008f78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008f7c:	d107      	bne.n	8008f8e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8008f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008f84:	d103      	bne.n	8008f8e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      frequency = HSI_VALUE >> 1U;
 8008f86:	4b08      	ldr	r3, [pc, #32]	; (8008fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008f88:	637b      	str	r3, [r7, #52]	; 0x34
 8008f8a:	f000 bfec 	b.w	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 8008f8e:	2300      	movs	r3, #0
 8008f90:	637b      	str	r3, [r7, #52]	; 0x34
 8008f92:	f000 bfe8 	b.w	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>
 8008f96:	bf00      	nop
 8008f98:	08025cbc 	.word	0x08025cbc
 8008f9c:	46020c00 	.word	0x46020c00
 8008fa0:	0007a120 	.word	0x0007a120
 8008fa4:	00f42400 	.word	0x00f42400
 8008fa8:	007a1200 	.word	0x007a1200
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 8008fac:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008fb0:	f5a2 1180 	sub.w	r1, r2, #1048576	; 0x100000
 8008fb4:	430b      	orrs	r3, r1
 8008fb6:	d15b      	bne.n	8009070 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8008fb8:	4ba7      	ldr	r3, [pc, #668]	; (8009258 <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 8008fba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008fbe:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8008fc2:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8008fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fc6:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8008fca:	d034      	beq.n	8009036 <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 8008fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fce:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8008fd2:	d849      	bhi.n	8009068 <HAL_RCCEx_GetPeriphCLKFreq+0x364>
 8008fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fd6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008fda:	d00b      	beq.n	8008ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>
 8008fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fde:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008fe2:	d841      	bhi.n	8009068 <HAL_RCCEx_GetPeriphCLKFreq+0x364>
 8008fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d016      	beq.n	8009018 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 8008fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008ff0:	d009      	beq.n	8009006 <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 8008ff2:	e039      	b.n	8009068 <HAL_RCCEx_GetPeriphCLKFreq+0x364>
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008ff4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	f7ff fa51 	bl	80084a0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8008ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009000:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009002:	f000 bfb0 	b.w	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009006:	f107 0318 	add.w	r3, r7, #24
 800900a:	4618      	mov	r0, r3
 800900c:	f7ff fbae 	bl	800876c <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8009010:	69fb      	ldr	r3, [r7, #28]
 8009012:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009014:	f000 bfa7 	b.w	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8009018:	4b8f      	ldr	r3, [pc, #572]	; (8009258 <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009020:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009024:	d103      	bne.n	800902e <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
        {
          frequency = HSI48_VALUE;
 8009026:	4b8d      	ldr	r3, [pc, #564]	; (800925c <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 8009028:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800902a:	f000 bf9c 	b.w	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>
          frequency = 0U;
 800902e:	2300      	movs	r3, #0
 8009030:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009032:	f000 bf98 	b.w	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009036:	4b88      	ldr	r3, [pc, #544]	; (8009258 <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 8009038:	689b      	ldr	r3, [r3, #8]
 800903a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800903e:	2b00      	cmp	r3, #0
 8009040:	d005      	beq.n	800904e <HAL_RCCEx_GetPeriphCLKFreq+0x34a>
 8009042:	4b85      	ldr	r3, [pc, #532]	; (8009258 <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 8009044:	689b      	ldr	r3, [r3, #8]
 8009046:	0e1b      	lsrs	r3, r3, #24
 8009048:	f003 030f 	and.w	r3, r3, #15
 800904c:	e006      	b.n	800905c <HAL_RCCEx_GetPeriphCLKFreq+0x358>
 800904e:	4b82      	ldr	r3, [pc, #520]	; (8009258 <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 8009050:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009054:	041b      	lsls	r3, r3, #16
 8009056:	0e1b      	lsrs	r3, r3, #24
 8009058:	f003 030f 	and.w	r3, r3, #15
 800905c:	4a80      	ldr	r2, [pc, #512]	; (8009260 <HAL_RCCEx_GetPeriphCLKFreq+0x55c>)
 800905e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009062:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009064:	f000 bf7f 	b.w	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>

      default :

        frequency = 0U;
 8009068:	2300      	movs	r3, #0
 800906a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800906c:	f000 bf7b 	b.w	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8009070:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009074:	f5a2 1100 	sub.w	r1, r2, #2097152	; 0x200000
 8009078:	430b      	orrs	r3, r1
 800907a:	d175      	bne.n	8009168 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800907c:	4b76      	ldr	r3, [pc, #472]	; (8009258 <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 800907e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8009082:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009086:	633b      	str	r3, [r7, #48]	; 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 8009088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800908a:	2b00      	cmp	r3, #0
 800908c:	d15b      	bne.n	8009146 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800908e:	4b72      	ldr	r3, [pc, #456]	; (8009258 <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 8009090:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009094:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8009098:	633b      	str	r3, [r7, #48]	; 0x30

      switch (srcclk)
 800909a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800909c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80090a0:	d034      	beq.n	800910c <HAL_RCCEx_GetPeriphCLKFreq+0x408>
 80090a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090a4:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80090a8:	d849      	bhi.n	800913e <HAL_RCCEx_GetPeriphCLKFreq+0x43a>
 80090aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80090b0:	d00b      	beq.n	80090ca <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
 80090b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80090b8:	d841      	bhi.n	800913e <HAL_RCCEx_GetPeriphCLKFreq+0x43a>
 80090ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d016      	beq.n	80090ee <HAL_RCCEx_GetPeriphCLKFreq+0x3ea>
 80090c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090c2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80090c6:	d009      	beq.n	80090dc <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
 80090c8:	e039      	b.n	800913e <HAL_RCCEx_GetPeriphCLKFreq+0x43a>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80090ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80090ce:	4618      	mov	r0, r3
 80090d0:	f7ff f9e6 	bl	80084a0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80090d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090d6:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 80090d8:	f000 bf45 	b.w	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80090dc:	f107 0318 	add.w	r3, r7, #24
 80090e0:	4618      	mov	r0, r3
 80090e2:	f7ff fb43 	bl	800876c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80090e6:	69fb      	ldr	r3, [r7, #28]
 80090e8:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 80090ea:	f000 bf3c 	b.w	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 80090ee:	4b5a      	ldr	r3, [pc, #360]	; (8009258 <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80090f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80090fa:	d103      	bne.n	8009104 <HAL_RCCEx_GetPeriphCLKFreq+0x400>
          {
            frequency = HSI48_VALUE;
 80090fc:	4b57      	ldr	r3, [pc, #348]	; (800925c <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 80090fe:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8009100:	f000 bf31 	b.w	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>
            frequency = 0U;
 8009104:	2300      	movs	r3, #0
 8009106:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8009108:	f000 bf2d 	b.w	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800910c:	4b52      	ldr	r3, [pc, #328]	; (8009258 <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 800910e:	689b      	ldr	r3, [r3, #8]
 8009110:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009114:	2b00      	cmp	r3, #0
 8009116:	d005      	beq.n	8009124 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
 8009118:	4b4f      	ldr	r3, [pc, #316]	; (8009258 <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 800911a:	689b      	ldr	r3, [r3, #8]
 800911c:	0e1b      	lsrs	r3, r3, #24
 800911e:	f003 030f 	and.w	r3, r3, #15
 8009122:	e006      	b.n	8009132 <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
 8009124:	4b4c      	ldr	r3, [pc, #304]	; (8009258 <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 8009126:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800912a:	041b      	lsls	r3, r3, #16
 800912c:	0e1b      	lsrs	r3, r3, #24
 800912e:	f003 030f 	and.w	r3, r3, #15
 8009132:	4a4b      	ldr	r2, [pc, #300]	; (8009260 <HAL_RCCEx_GetPeriphCLKFreq+0x55c>)
 8009134:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009138:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800913a:	f000 bf14 	b.w	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>
        }
        default :
        {
          frequency = 0U;
 800913e:	2300      	movs	r3, #0
 8009140:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8009142:	f000 bf10 	b.w	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 8009146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009148:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800914c:	d108      	bne.n	8009160 <HAL_RCCEx_GetPeriphCLKFreq+0x45c>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800914e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009152:	4618      	mov	r0, r3
 8009154:	f7ff f9a4 	bl	80084a0 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8009158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800915a:	637b      	str	r3, [r7, #52]	; 0x34
 800915c:	f000 bf03 	b.w	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>
    }
    else
    {
      frequency = 0U;
 8009160:	2300      	movs	r3, #0
 8009162:	637b      	str	r3, [r7, #52]	; 0x34
 8009164:	f000 beff 	b.w	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 8009168:	e9d7 2300 	ldrd	r2, r3, [r7]
 800916c:	1e51      	subs	r1, r2, #1
 800916e:	430b      	orrs	r3, r1
 8009170:	d136      	bne.n	80091e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8009172:	4b39      	ldr	r3, [pc, #228]	; (8009258 <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 8009174:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009178:	f003 0303 	and.w	r3, r3, #3
 800917c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800917e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009180:	2b00      	cmp	r3, #0
 8009182:	d104      	bne.n	800918e <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 8009184:	f7fd fcd2 	bl	8006b2c <HAL_RCC_GetPCLK2Freq>
 8009188:	6378      	str	r0, [r7, #52]	; 0x34
 800918a:	f000 beec 	b.w	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 800918e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009190:	2b01      	cmp	r3, #1
 8009192:	d104      	bne.n	800919e <HAL_RCCEx_GetPeriphCLKFreq+0x49a>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8009194:	f7fd fb94 	bl	80068c0 <HAL_RCC_GetSysClockFreq>
 8009198:	6378      	str	r0, [r7, #52]	; 0x34
 800919a:	f000 bee4 	b.w	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800919e:	4b2e      	ldr	r3, [pc, #184]	; (8009258 <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80091a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80091aa:	d106      	bne.n	80091ba <HAL_RCCEx_GetPeriphCLKFreq+0x4b6>
 80091ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091ae:	2b02      	cmp	r3, #2
 80091b0:	d103      	bne.n	80091ba <HAL_RCCEx_GetPeriphCLKFreq+0x4b6>
    {
      frequency = HSI_VALUE;
 80091b2:	4b2c      	ldr	r3, [pc, #176]	; (8009264 <HAL_RCCEx_GetPeriphCLKFreq+0x560>)
 80091b4:	637b      	str	r3, [r7, #52]	; 0x34
 80091b6:	f000 bed6 	b.w	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 80091ba:	4b27      	ldr	r3, [pc, #156]	; (8009258 <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 80091bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80091c0:	f003 0302 	and.w	r3, r3, #2
 80091c4:	2b02      	cmp	r3, #2
 80091c6:	d107      	bne.n	80091d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d4>
 80091c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091ca:	2b03      	cmp	r3, #3
 80091cc:	d104      	bne.n	80091d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d4>
    {
      frequency = LSE_VALUE;
 80091ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80091d2:	637b      	str	r3, [r7, #52]	; 0x34
 80091d4:	f000 bec7 	b.w	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 80091d8:	2300      	movs	r3, #0
 80091da:	637b      	str	r3, [r7, #52]	; 0x34
 80091dc:	f000 bec3 	b.w	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 80091e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80091e4:	1e91      	subs	r1, r2, #2
 80091e6:	430b      	orrs	r3, r1
 80091e8:	d13e      	bne.n	8009268 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80091ea:	4b1b      	ldr	r3, [pc, #108]	; (8009258 <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 80091ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80091f0:	f003 030c 	and.w	r3, r3, #12
 80091f4:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 80091f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d104      	bne.n	8009206 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80091fc:	f7fd fc82 	bl	8006b04 <HAL_RCC_GetPCLK1Freq>
 8009200:	6378      	str	r0, [r7, #52]	; 0x34
 8009202:	f000 beb0 	b.w	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8009206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009208:	2b04      	cmp	r3, #4
 800920a:	d104      	bne.n	8009216 <HAL_RCCEx_GetPeriphCLKFreq+0x512>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800920c:	f7fd fb58 	bl	80068c0 <HAL_RCC_GetSysClockFreq>
 8009210:	6378      	str	r0, [r7, #52]	; 0x34
 8009212:	f000 bea8 	b.w	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8009216:	4b10      	ldr	r3, [pc, #64]	; (8009258 <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800921e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009222:	d106      	bne.n	8009232 <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
 8009224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009226:	2b08      	cmp	r3, #8
 8009228:	d103      	bne.n	8009232 <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
    {
      frequency = HSI_VALUE;
 800922a:	4b0e      	ldr	r3, [pc, #56]	; (8009264 <HAL_RCCEx_GetPeriphCLKFreq+0x560>)
 800922c:	637b      	str	r3, [r7, #52]	; 0x34
 800922e:	f000 be9a 	b.w	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8009232:	4b09      	ldr	r3, [pc, #36]	; (8009258 <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 8009234:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009238:	f003 0302 	and.w	r3, r3, #2
 800923c:	2b02      	cmp	r3, #2
 800923e:	d107      	bne.n	8009250 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>
 8009240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009242:	2b0c      	cmp	r3, #12
 8009244:	d104      	bne.n	8009250 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>
    {
      frequency = LSE_VALUE;
 8009246:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800924a:	637b      	str	r3, [r7, #52]	; 0x34
 800924c:	f000 be8b 	b.w	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 8009250:	2300      	movs	r3, #0
 8009252:	637b      	str	r3, [r7, #52]	; 0x34
 8009254:	f000 be87 	b.w	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>
 8009258:	46020c00 	.word	0x46020c00
 800925c:	02dc6c00 	.word	0x02dc6c00
 8009260:	08027de0 	.word	0x08027de0
 8009264:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 8009268:	e9d7 2300 	ldrd	r2, r3, [r7]
 800926c:	1f11      	subs	r1, r2, #4
 800926e:	430b      	orrs	r3, r1
 8009270:	d136      	bne.n	80092e0 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8009272:	4ba6      	ldr	r3, [pc, #664]	; (800950c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8009274:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009278:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800927c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800927e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009280:	2b00      	cmp	r3, #0
 8009282:	d104      	bne.n	800928e <HAL_RCCEx_GetPeriphCLKFreq+0x58a>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8009284:	f7fd fc3e 	bl	8006b04 <HAL_RCC_GetPCLK1Freq>
 8009288:	6378      	str	r0, [r7, #52]	; 0x34
 800928a:	f000 be6c 	b.w	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 800928e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009290:	2b10      	cmp	r3, #16
 8009292:	d104      	bne.n	800929e <HAL_RCCEx_GetPeriphCLKFreq+0x59a>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8009294:	f7fd fb14 	bl	80068c0 <HAL_RCC_GetSysClockFreq>
 8009298:	6378      	str	r0, [r7, #52]	; 0x34
 800929a:	f000 be64 	b.w	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 800929e:	4b9b      	ldr	r3, [pc, #620]	; (800950c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80092a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80092aa:	d106      	bne.n	80092ba <HAL_RCCEx_GetPeriphCLKFreq+0x5b6>
 80092ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092ae:	2b20      	cmp	r3, #32
 80092b0:	d103      	bne.n	80092ba <HAL_RCCEx_GetPeriphCLKFreq+0x5b6>
    {
      frequency = HSI_VALUE;
 80092b2:	4b97      	ldr	r3, [pc, #604]	; (8009510 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 80092b4:	637b      	str	r3, [r7, #52]	; 0x34
 80092b6:	f000 be56 	b.w	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 80092ba:	4b94      	ldr	r3, [pc, #592]	; (800950c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80092bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80092c0:	f003 0302 	and.w	r3, r3, #2
 80092c4:	2b02      	cmp	r3, #2
 80092c6:	d107      	bne.n	80092d8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
 80092c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092ca:	2b30      	cmp	r3, #48	; 0x30
 80092cc:	d104      	bne.n	80092d8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
    {
      frequency = LSE_VALUE;
 80092ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80092d2:	637b      	str	r3, [r7, #52]	; 0x34
 80092d4:	f000 be47 	b.w	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 80092d8:	2300      	movs	r3, #0
 80092da:	637b      	str	r3, [r7, #52]	; 0x34
 80092dc:	f000 be43 	b.w	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 80092e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80092e4:	f1a2 0108 	sub.w	r1, r2, #8
 80092e8:	430b      	orrs	r3, r1
 80092ea:	d136      	bne.n	800935a <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 80092ec:	4b87      	ldr	r3, [pc, #540]	; (800950c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80092ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80092f2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80092f6:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 80092f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d104      	bne.n	8009308 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80092fe:	f7fd fc01 	bl	8006b04 <HAL_RCC_GetPCLK1Freq>
 8009302:	6378      	str	r0, [r7, #52]	; 0x34
 8009304:	f000 be2f 	b.w	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8009308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800930a:	2b40      	cmp	r3, #64	; 0x40
 800930c:	d104      	bne.n	8009318 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800930e:	f7fd fad7 	bl	80068c0 <HAL_RCC_GetSysClockFreq>
 8009312:	6378      	str	r0, [r7, #52]	; 0x34
 8009314:	f000 be27 	b.w	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8009318:	4b7c      	ldr	r3, [pc, #496]	; (800950c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009320:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009324:	d106      	bne.n	8009334 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 8009326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009328:	2b80      	cmp	r3, #128	; 0x80
 800932a:	d103      	bne.n	8009334 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
    {
      frequency = HSI_VALUE;
 800932c:	4b78      	ldr	r3, [pc, #480]	; (8009510 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 800932e:	637b      	str	r3, [r7, #52]	; 0x34
 8009330:	f000 be19 	b.w	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8009334:	4b75      	ldr	r3, [pc, #468]	; (800950c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8009336:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800933a:	f003 0302 	and.w	r3, r3, #2
 800933e:	2b02      	cmp	r3, #2
 8009340:	d107      	bne.n	8009352 <HAL_RCCEx_GetPeriphCLKFreq+0x64e>
 8009342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009344:	2bc0      	cmp	r3, #192	; 0xc0
 8009346:	d104      	bne.n	8009352 <HAL_RCCEx_GetPeriphCLKFreq+0x64e>
    {
      frequency = LSE_VALUE;
 8009348:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800934c:	637b      	str	r3, [r7, #52]	; 0x34
 800934e:	f000 be0a 	b.w	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 8009352:	2300      	movs	r3, #0
 8009354:	637b      	str	r3, [r7, #52]	; 0x34
 8009356:	f000 be06 	b.w	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 800935a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800935e:	f1a2 0110 	sub.w	r1, r2, #16
 8009362:	430b      	orrs	r3, r1
 8009364:	d139      	bne.n	80093da <HAL_RCCEx_GetPeriphCLKFreq+0x6d6>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8009366:	4b69      	ldr	r3, [pc, #420]	; (800950c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8009368:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800936c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009370:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8009372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009374:	2b00      	cmp	r3, #0
 8009376:	d104      	bne.n	8009382 <HAL_RCCEx_GetPeriphCLKFreq+0x67e>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8009378:	f7fd fbc4 	bl	8006b04 <HAL_RCC_GetPCLK1Freq>
 800937c:	6378      	str	r0, [r7, #52]	; 0x34
 800937e:	f000 bdf2 	b.w	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 8009382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009384:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009388:	d104      	bne.n	8009394 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800938a:	f7fd fa99 	bl	80068c0 <HAL_RCC_GetSysClockFreq>
 800938e:	6378      	str	r0, [r7, #52]	; 0x34
 8009390:	f000 bde9 	b.w	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8009394:	4b5d      	ldr	r3, [pc, #372]	; (800950c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800939c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80093a0:	d107      	bne.n	80093b2 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 80093a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80093a8:	d103      	bne.n	80093b2 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
    {
      frequency = HSI_VALUE;
 80093aa:	4b59      	ldr	r3, [pc, #356]	; (8009510 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 80093ac:	637b      	str	r3, [r7, #52]	; 0x34
 80093ae:	f000 bdda 	b.w	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 80093b2:	4b56      	ldr	r3, [pc, #344]	; (800950c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80093b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80093b8:	f003 0302 	and.w	r3, r3, #2
 80093bc:	2b02      	cmp	r3, #2
 80093be:	d108      	bne.n	80093d2 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
 80093c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80093c6:	d104      	bne.n	80093d2 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
    {
      frequency = LSE_VALUE;
 80093c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80093cc:	637b      	str	r3, [r7, #52]	; 0x34
 80093ce:	f000 bdca 	b.w	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 80093d2:	2300      	movs	r3, #0
 80093d4:	637b      	str	r3, [r7, #52]	; 0x34
 80093d6:	f000 bdc6 	b.w	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 80093da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80093de:	f1a2 0120 	sub.w	r1, r2, #32
 80093e2:	430b      	orrs	r3, r1
 80093e4:	d158      	bne.n	8009498 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80093e6:	4b49      	ldr	r3, [pc, #292]	; (800950c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80093e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80093ec:	f003 0307 	and.w	r3, r3, #7
 80093f0:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 80093f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d104      	bne.n	8009402 <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 80093f8:	f7fd fbac 	bl	8006b54 <HAL_RCC_GetPCLK3Freq>
 80093fc:	6378      	str	r0, [r7, #52]	; 0x34
 80093fe:	f000 bdb2 	b.w	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8009402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009404:	2b01      	cmp	r3, #1
 8009406:	d104      	bne.n	8009412 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8009408:	f7fd fa5a 	bl	80068c0 <HAL_RCC_GetSysClockFreq>
 800940c:	6378      	str	r0, [r7, #52]	; 0x34
 800940e:	f000 bdaa 	b.w	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8009412:	4b3e      	ldr	r3, [pc, #248]	; (800950c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800941a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800941e:	d106      	bne.n	800942e <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 8009420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009422:	2b02      	cmp	r3, #2
 8009424:	d103      	bne.n	800942e <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
    {
      frequency = HSI_VALUE;
 8009426:	4b3a      	ldr	r3, [pc, #232]	; (8009510 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 8009428:	637b      	str	r3, [r7, #52]	; 0x34
 800942a:	f000 bd9c 	b.w	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800942e:	4b37      	ldr	r3, [pc, #220]	; (800950c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8009430:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009434:	f003 0302 	and.w	r3, r3, #2
 8009438:	2b02      	cmp	r3, #2
 800943a:	d107      	bne.n	800944c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800943c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800943e:	2b03      	cmp	r3, #3
 8009440:	d104      	bne.n	800944c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
    {
      frequency = LSE_VALUE;
 8009442:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009446:	637b      	str	r3, [r7, #52]	; 0x34
 8009448:	f000 bd8d 	b.w	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 800944c:	4b2f      	ldr	r3, [pc, #188]	; (800950c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	f003 0320 	and.w	r3, r3, #32
 8009454:	2b20      	cmp	r3, #32
 8009456:	d11b      	bne.n	8009490 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
 8009458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800945a:	2b04      	cmp	r3, #4
 800945c:	d118      	bne.n	8009490 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800945e:	4b2b      	ldr	r3, [pc, #172]	; (800950c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8009460:	689b      	ldr	r3, [r3, #8]
 8009462:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009466:	2b00      	cmp	r3, #0
 8009468:	d005      	beq.n	8009476 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 800946a:	4b28      	ldr	r3, [pc, #160]	; (800950c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800946c:	689b      	ldr	r3, [r3, #8]
 800946e:	0e1b      	lsrs	r3, r3, #24
 8009470:	f003 030f 	and.w	r3, r3, #15
 8009474:	e006      	b.n	8009484 <HAL_RCCEx_GetPeriphCLKFreq+0x780>
 8009476:	4b25      	ldr	r3, [pc, #148]	; (800950c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8009478:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800947c:	041b      	lsls	r3, r3, #16
 800947e:	0e1b      	lsrs	r3, r3, #24
 8009480:	f003 030f 	and.w	r3, r3, #15
 8009484:	4a23      	ldr	r2, [pc, #140]	; (8009514 <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 8009486:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800948a:	637b      	str	r3, [r7, #52]	; 0x34
 800948c:	f000 bd6b 	b.w	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 8009490:	2300      	movs	r3, #0
 8009492:	637b      	str	r3, [r7, #52]	; 0x34
 8009494:	f000 bd67 	b.w	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 8009498:	e9d7 2300 	ldrd	r2, r3, [r7]
 800949c:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 80094a0:	430b      	orrs	r3, r1
 80094a2:	d168      	bne.n	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0x872>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 80094a4:	4b19      	ldr	r3, [pc, #100]	; (800950c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80094a6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80094aa:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80094ae:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 80094b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80094b6:	d104      	bne.n	80094c2 <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80094b8:	f7fd fa02 	bl	80068c0 <HAL_RCC_GetSysClockFreq>
 80094bc:	6378      	str	r0, [r7, #52]	; 0x34
 80094be:	f000 bd52 	b.w	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 80094c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80094c8:	d108      	bne.n	80094dc <HAL_RCCEx_GetPeriphCLKFreq+0x7d8>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80094ca:	f107 0318 	add.w	r3, r7, #24
 80094ce:	4618      	mov	r0, r3
 80094d0:	f7ff f94c 	bl	800876c <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 80094d4:	6a3b      	ldr	r3, [r7, #32]
 80094d6:	637b      	str	r3, [r7, #52]	; 0x34
 80094d8:	f000 bd45 	b.w	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 80094dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d104      	bne.n	80094ec <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 80094e2:	f7fd faf5 	bl	8006ad0 <HAL_RCC_GetHCLKFreq>
 80094e6:	6378      	str	r0, [r7, #52]	; 0x34
 80094e8:	f000 bd3d 	b.w	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 80094ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094ee:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80094f2:	d11e      	bne.n	8009532 <HAL_RCCEx_GetPeriphCLKFreq+0x82e>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)];
 80094f4:	4b05      	ldr	r3, [pc, #20]	; (800950c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80094f6:	689b      	ldr	r3, [r3, #8]
 80094f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d00b      	beq.n	8009518 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
 8009500:	4b02      	ldr	r3, [pc, #8]	; (800950c <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8009502:	689b      	ldr	r3, [r3, #8]
 8009504:	0f1b      	lsrs	r3, r3, #28
 8009506:	f003 030f 	and.w	r3, r3, #15
 800950a:	e00c      	b.n	8009526 <HAL_RCCEx_GetPeriphCLKFreq+0x822>
 800950c:	46020c00 	.word	0x46020c00
 8009510:	00f42400 	.word	0x00f42400
 8009514:	08027de0 	.word	0x08027de0
 8009518:	4baa      	ldr	r3, [pc, #680]	; (80097c4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>)
 800951a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800951e:	041b      	lsls	r3, r3, #16
 8009520:	0f1b      	lsrs	r3, r3, #28
 8009522:	f003 030f 	and.w	r3, r3, #15
 8009526:	4aa8      	ldr	r2, [pc, #672]	; (80097c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>)
 8009528:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800952c:	637b      	str	r3, [r7, #52]	; 0x34
 800952e:	f000 bd1a 	b.w	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8009532:	4ba4      	ldr	r3, [pc, #656]	; (80097c4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>)
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800953a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800953e:	d107      	bne.n	8009550 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>
 8009540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009542:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009546:	d103      	bne.n	8009550 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>
    {
      frequency = HSE_VALUE;
 8009548:	4ba0      	ldr	r3, [pc, #640]	; (80097cc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>)
 800954a:	637b      	str	r3, [r7, #52]	; 0x34
 800954c:	f000 bd0b 	b.w	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8009550:	4b9c      	ldr	r3, [pc, #624]	; (80097c4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>)
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009558:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800955c:	d107      	bne.n	800956e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800955e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009560:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009564:	d103      	bne.n	800956e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
    {
      frequency = HSI_VALUE;
 8009566:	4b99      	ldr	r3, [pc, #612]	; (80097cc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>)
 8009568:	637b      	str	r3, [r7, #52]	; 0x34
 800956a:	f000 bcfc 	b.w	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 800956e:	2300      	movs	r3, #0
 8009570:	637b      	str	r3, [r7, #52]	; 0x34
 8009572:	f000 bcf8 	b.w	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 8009576:	e9d7 2300 	ldrd	r2, r3, [r7]
 800957a:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800957e:	430b      	orrs	r3, r1
 8009580:	d14f      	bne.n	8009622 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 8009582:	4b90      	ldr	r3, [pc, #576]	; (80097c4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>)
 8009584:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8009588:	f003 0307 	and.w	r3, r3, #7
 800958c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800958e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009590:	2b04      	cmp	r3, #4
 8009592:	d842      	bhi.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x916>
 8009594:	a201      	add	r2, pc, #4	; (adr r2, 800959c <HAL_RCCEx_GetPeriphCLKFreq+0x898>)
 8009596:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800959a:	bf00      	nop
 800959c:	080095d5 	.word	0x080095d5
 80095a0:	080095b1 	.word	0x080095b1
 80095a4:	080095c3 	.word	0x080095c3
 80095a8:	080095df 	.word	0x080095df
 80095ac:	080095e9 	.word	0x080095e9
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80095b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80095b4:	4618      	mov	r0, r3
 80095b6:	f7fe ff73 	bl	80084a0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80095ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095bc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80095be:	f000 bcd2 	b.w	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80095c2:	f107 030c 	add.w	r3, r7, #12
 80095c6:	4618      	mov	r0, r3
 80095c8:	f7ff fa36 	bl	8008a38 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 80095cc:	693b      	ldr	r3, [r7, #16]
 80095ce:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80095d0:	f000 bcc9 	b.w	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 80095d4:	f7fd fa7c 	bl	8006ad0 <HAL_RCC_GetHCLKFreq>
 80095d8:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80095da:	f000 bcc4 	b.w	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80095de:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80095e2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80095e4:	f000 bcbf 	b.w	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>

      case RCC_MDF1CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80095e8:	4b76      	ldr	r3, [pc, #472]	; (80097c4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>)
 80095ea:	689b      	ldr	r3, [r3, #8]
 80095ec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d005      	beq.n	8009600 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
 80095f4:	4b73      	ldr	r3, [pc, #460]	; (80097c4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>)
 80095f6:	689b      	ldr	r3, [r3, #8]
 80095f8:	0e1b      	lsrs	r3, r3, #24
 80095fa:	f003 030f 	and.w	r3, r3, #15
 80095fe:	e006      	b.n	800960e <HAL_RCCEx_GetPeriphCLKFreq+0x90a>
 8009600:	4b70      	ldr	r3, [pc, #448]	; (80097c4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>)
 8009602:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009606:	041b      	lsls	r3, r3, #16
 8009608:	0e1b      	lsrs	r3, r3, #24
 800960a:	f003 030f 	and.w	r3, r3, #15
 800960e:	4a6e      	ldr	r2, [pc, #440]	; (80097c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>)
 8009610:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009614:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009616:	f000 bca6 	b.w	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>

      default:

        frequency = 0U;
 800961a:	2300      	movs	r3, #0
 800961c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800961e:	f000 bca2 	b.w	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 8009622:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009626:	f5a2 3100 	sub.w	r1, r2, #131072	; 0x20000
 800962a:	430b      	orrs	r3, r1
 800962c:	d15d      	bne.n	80096ea <HAL_RCCEx_GetPeriphCLKFreq+0x9e6>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 800962e:	4b65      	ldr	r3, [pc, #404]	; (80097c4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>)
 8009630:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009634:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8009638:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800963a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800963c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009640:	d036      	beq.n	80096b0 <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>
 8009642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009644:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009648:	d84b      	bhi.n	80096e2 <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
 800964a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800964c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009650:	d029      	beq.n	80096a6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a2>
 8009652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009654:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009658:	d843      	bhi.n	80096e2 <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
 800965a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800965c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009660:	d013      	beq.n	800968a <HAL_RCCEx_GetPeriphCLKFreq+0x986>
 8009662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009664:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009668:	d83b      	bhi.n	80096e2 <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
 800966a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800966c:	2b00      	cmp	r3, #0
 800966e:	d015      	beq.n	800969c <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 8009670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009672:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009676:	d134      	bne.n	80096e2 <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009678:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800967c:	4618      	mov	r0, r3
 800967e:	f7fe ff0f 	bl	80084a0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8009682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009684:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009686:	f000 bc6e 	b.w	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800968a:	f107 030c 	add.w	r3, r7, #12
 800968e:	4618      	mov	r0, r3
 8009690:	f7ff f9d2 	bl	8008a38 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8009694:	693b      	ldr	r3, [r7, #16]
 8009696:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009698:	f000 bc65 	b.w	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800969c:	f7fd fa18 	bl	8006ad0 <HAL_RCC_GetHCLKFreq>
 80096a0:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80096a2:	f000 bc60 	b.w	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80096a6:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80096aa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80096ac:	f000 bc5b 	b.w	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>

      case RCC_ADF1CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80096b0:	4b44      	ldr	r3, [pc, #272]	; (80097c4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>)
 80096b2:	689b      	ldr	r3, [r3, #8]
 80096b4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d005      	beq.n	80096c8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c4>
 80096bc:	4b41      	ldr	r3, [pc, #260]	; (80097c4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>)
 80096be:	689b      	ldr	r3, [r3, #8]
 80096c0:	0e1b      	lsrs	r3, r3, #24
 80096c2:	f003 030f 	and.w	r3, r3, #15
 80096c6:	e006      	b.n	80096d6 <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
 80096c8:	4b3e      	ldr	r3, [pc, #248]	; (80097c4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>)
 80096ca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80096ce:	041b      	lsls	r3, r3, #16
 80096d0:	0e1b      	lsrs	r3, r3, #24
 80096d2:	f003 030f 	and.w	r3, r3, #15
 80096d6:	4a3c      	ldr	r2, [pc, #240]	; (80097c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>)
 80096d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80096dc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80096de:	f000 bc42 	b.w	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>

      default:

        frequency = 0U;
 80096e2:	2300      	movs	r3, #0
 80096e4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80096e6:	f000 bc3e 	b.w	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 80096ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 80096ee:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 80096f2:	430b      	orrs	r3, r1
 80096f4:	d14a      	bne.n	800978c <HAL_RCCEx_GetPeriphCLKFreq+0xa88>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80096f6:	4b33      	ldr	r3, [pc, #204]	; (80097c4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>)
 80096f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80096fc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009700:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8009702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009704:	2b00      	cmp	r3, #0
 8009706:	d104      	bne.n	8009712 <HAL_RCCEx_GetPeriphCLKFreq+0xa0e>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8009708:	f7fd f9fc 	bl	8006b04 <HAL_RCC_GetPCLK1Freq>
 800970c:	6378      	str	r0, [r7, #52]	; 0x34
 800970e:	f000 bc2a 	b.w	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8009712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009714:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009718:	d104      	bne.n	8009724 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800971a:	f7fd f8d1 	bl	80068c0 <HAL_RCC_GetSysClockFreq>
 800971e:	6378      	str	r0, [r7, #52]	; 0x34
 8009720:	f000 bc21 	b.w	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8009724:	4b27      	ldr	r3, [pc, #156]	; (80097c4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>)
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800972c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009730:	d107      	bne.n	8009742 <HAL_RCCEx_GetPeriphCLKFreq+0xa3e>
 8009732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009734:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009738:	d103      	bne.n	8009742 <HAL_RCCEx_GetPeriphCLKFreq+0xa3e>
    {
      frequency = HSI_VALUE;
 800973a:	4b24      	ldr	r3, [pc, #144]	; (80097cc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>)
 800973c:	637b      	str	r3, [r7, #52]	; 0x34
 800973e:	f000 bc12 	b.w	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 8009742:	4b20      	ldr	r3, [pc, #128]	; (80097c4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>)
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	f003 0320 	and.w	r3, r3, #32
 800974a:	2b20      	cmp	r3, #32
 800974c:	d11b      	bne.n	8009786 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800974e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009750:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009754:	d117      	bne.n	8009786 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009756:	4b1b      	ldr	r3, [pc, #108]	; (80097c4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>)
 8009758:	689b      	ldr	r3, [r3, #8]
 800975a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800975e:	2b00      	cmp	r3, #0
 8009760:	d005      	beq.n	800976e <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
 8009762:	4b18      	ldr	r3, [pc, #96]	; (80097c4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>)
 8009764:	689b      	ldr	r3, [r3, #8]
 8009766:	0e1b      	lsrs	r3, r3, #24
 8009768:	f003 030f 	and.w	r3, r3, #15
 800976c:	e006      	b.n	800977c <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
 800976e:	4b15      	ldr	r3, [pc, #84]	; (80097c4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>)
 8009770:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009774:	041b      	lsls	r3, r3, #16
 8009776:	0e1b      	lsrs	r3, r3, #24
 8009778:	f003 030f 	and.w	r3, r3, #15
 800977c:	4a12      	ldr	r2, [pc, #72]	; (80097c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>)
 800977e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009782:	637b      	str	r3, [r7, #52]	; 0x34
 8009784:	e3ef      	b.n	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 8009786:	2300      	movs	r3, #0
 8009788:	637b      	str	r3, [r7, #52]	; 0x34
 800978a:	e3ec      	b.n	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 800978c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009790:	f1a2 0180 	sub.w	r1, r2, #128	; 0x80
 8009794:	430b      	orrs	r3, r1
 8009796:	d14e      	bne.n	8009836 <HAL_RCCEx_GetPeriphCLKFreq+0xb32>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8009798:	4b0a      	ldr	r3, [pc, #40]	; (80097c4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>)
 800979a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800979e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80097a2:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 80097a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d103      	bne.n	80097b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaae>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80097aa:	f7fd f9ab 	bl	8006b04 <HAL_RCC_GetPCLK1Freq>
 80097ae:	6378      	str	r0, [r7, #52]	; 0x34
 80097b0:	e3d9      	b.n	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 80097b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80097b8:	d10a      	bne.n	80097d0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80097ba:	f7fd f881 	bl	80068c0 <HAL_RCC_GetSysClockFreq>
 80097be:	6378      	str	r0, [r7, #52]	; 0x34
 80097c0:	e3d1      	b.n	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>
 80097c2:	bf00      	nop
 80097c4:	46020c00 	.word	0x46020c00
 80097c8:	08027de0 	.word	0x08027de0
 80097cc:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 80097d0:	4b98      	ldr	r3, [pc, #608]	; (8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0xd30>)
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80097d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80097dc:	d106      	bne.n	80097ec <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 80097de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80097e4:	d102      	bne.n	80097ec <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
    {
      frequency = HSI_VALUE;
 80097e6:	4b94      	ldr	r3, [pc, #592]	; (8009a38 <HAL_RCCEx_GetPeriphCLKFreq+0xd34>)
 80097e8:	637b      	str	r3, [r7, #52]	; 0x34
 80097ea:	e3bc      	b.n	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 80097ec:	4b91      	ldr	r3, [pc, #580]	; (8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0xd30>)
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	f003 0320 	and.w	r3, r3, #32
 80097f4:	2b20      	cmp	r3, #32
 80097f6:	d11b      	bne.n	8009830 <HAL_RCCEx_GetPeriphCLKFreq+0xb2c>
 80097f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097fa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80097fe:	d117      	bne.n	8009830 <HAL_RCCEx_GetPeriphCLKFreq+0xb2c>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009800:	4b8c      	ldr	r3, [pc, #560]	; (8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0xd30>)
 8009802:	689b      	ldr	r3, [r3, #8]
 8009804:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009808:	2b00      	cmp	r3, #0
 800980a:	d005      	beq.n	8009818 <HAL_RCCEx_GetPeriphCLKFreq+0xb14>
 800980c:	4b89      	ldr	r3, [pc, #548]	; (8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0xd30>)
 800980e:	689b      	ldr	r3, [r3, #8]
 8009810:	0e1b      	lsrs	r3, r3, #24
 8009812:	f003 030f 	and.w	r3, r3, #15
 8009816:	e006      	b.n	8009826 <HAL_RCCEx_GetPeriphCLKFreq+0xb22>
 8009818:	4b86      	ldr	r3, [pc, #536]	; (8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0xd30>)
 800981a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800981e:	041b      	lsls	r3, r3, #16
 8009820:	0e1b      	lsrs	r3, r3, #24
 8009822:	f003 030f 	and.w	r3, r3, #15
 8009826:	4a85      	ldr	r2, [pc, #532]	; (8009a3c <HAL_RCCEx_GetPeriphCLKFreq+0xd38>)
 8009828:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800982c:	637b      	str	r3, [r7, #52]	; 0x34
 800982e:	e39a      	b.n	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 8009830:	2300      	movs	r3, #0
 8009832:	637b      	str	r3, [r7, #52]	; 0x34
 8009834:	e397      	b.n	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 8009836:	e9d7 2300 	ldrd	r2, r3, [r7]
 800983a:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800983e:	430b      	orrs	r3, r1
 8009840:	d148      	bne.n	80098d4 <HAL_RCCEx_GetPeriphCLKFreq+0xbd0>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8009842:	4b7c      	ldr	r3, [pc, #496]	; (8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0xd30>)
 8009844:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009848:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800984c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800984e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009850:	2bc0      	cmp	r3, #192	; 0xc0
 8009852:	d024      	beq.n	800989e <HAL_RCCEx_GetPeriphCLKFreq+0xb9a>
 8009854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009856:	2bc0      	cmp	r3, #192	; 0xc0
 8009858:	d839      	bhi.n	80098ce <HAL_RCCEx_GetPeriphCLKFreq+0xbca>
 800985a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800985c:	2b80      	cmp	r3, #128	; 0x80
 800985e:	d00d      	beq.n	800987c <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
 8009860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009862:	2b80      	cmp	r3, #128	; 0x80
 8009864:	d833      	bhi.n	80098ce <HAL_RCCEx_GetPeriphCLKFreq+0xbca>
 8009866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009868:	2b00      	cmp	r3, #0
 800986a:	d003      	beq.n	8009874 <HAL_RCCEx_GetPeriphCLKFreq+0xb70>
 800986c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800986e:	2b40      	cmp	r3, #64	; 0x40
 8009870:	d011      	beq.n	8009896 <HAL_RCCEx_GetPeriphCLKFreq+0xb92>
 8009872:	e02c      	b.n	80098ce <HAL_RCCEx_GetPeriphCLKFreq+0xbca>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 8009874:	f7fd f96e 	bl	8006b54 <HAL_RCC_GetPCLK3Freq>
 8009878:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800987a:	e374      	b.n	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800987c:	4b6d      	ldr	r3, [pc, #436]	; (8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0xd30>)
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009884:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009888:	d102      	bne.n	8009890 <HAL_RCCEx_GetPeriphCLKFreq+0xb8c>
        {
          frequency = HSI_VALUE;
 800988a:	4b6b      	ldr	r3, [pc, #428]	; (8009a38 <HAL_RCCEx_GetPeriphCLKFreq+0xd34>)
 800988c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800988e:	e36a      	b.n	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>
          frequency = 0U;
 8009890:	2300      	movs	r3, #0
 8009892:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009894:	e367      	b.n	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 8009896:	f7fd f813 	bl	80068c0 <HAL_RCC_GetSysClockFreq>
 800989a:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800989c:	e363      	b.n	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)];
 800989e:	4b65      	ldr	r3, [pc, #404]	; (8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0xd30>)
 80098a0:	689b      	ldr	r3, [r3, #8]
 80098a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d005      	beq.n	80098b6 <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
 80098aa:	4b62      	ldr	r3, [pc, #392]	; (8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0xd30>)
 80098ac:	689b      	ldr	r3, [r3, #8]
 80098ae:	0f1b      	lsrs	r3, r3, #28
 80098b0:	f003 030f 	and.w	r3, r3, #15
 80098b4:	e006      	b.n	80098c4 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
 80098b6:	4b5f      	ldr	r3, [pc, #380]	; (8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0xd30>)
 80098b8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80098bc:	041b      	lsls	r3, r3, #16
 80098be:	0f1b      	lsrs	r3, r3, #28
 80098c0:	f003 030f 	and.w	r3, r3, #15
 80098c4:	4a5d      	ldr	r2, [pc, #372]	; (8009a3c <HAL_RCCEx_GetPeriphCLKFreq+0xd38>)
 80098c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80098ca:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80098cc:	e34b      	b.n	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>
      }
      default:
      {
        frequency = 0U;
 80098ce:	2300      	movs	r3, #0
 80098d0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80098d2:	e348      	b.n	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 80098d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80098d8:	f5a2 0180 	sub.w	r1, r2, #4194304	; 0x400000
 80098dc:	430b      	orrs	r3, r1
 80098de:	d147      	bne.n	8009970 <HAL_RCCEx_GetPeriphCLKFreq+0xc6c>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 80098e0:	4b54      	ldr	r3, [pc, #336]	; (8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0xd30>)
 80098e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80098e6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80098ea:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 80098ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d103      	bne.n	80098fa <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80098f2:	f7fd f907 	bl	8006b04 <HAL_RCC_GetPCLK1Freq>
 80098f6:	6378      	str	r0, [r7, #52]	; 0x34
 80098f8:	e335      	b.n	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 80098fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009900:	d103      	bne.n	800990a <HAL_RCCEx_GetPeriphCLKFreq+0xc06>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8009902:	f7fc ffdd 	bl	80068c0 <HAL_RCC_GetSysClockFreq>
 8009906:	6378      	str	r0, [r7, #52]	; 0x34
 8009908:	e32d      	b.n	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 800990a:	4b4a      	ldr	r3, [pc, #296]	; (8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0xd30>)
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009912:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009916:	d106      	bne.n	8009926 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 8009918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800991a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800991e:	d102      	bne.n	8009926 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
    {
      frequency = HSI_VALUE;
 8009920:	4b45      	ldr	r3, [pc, #276]	; (8009a38 <HAL_RCCEx_GetPeriphCLKFreq+0xd34>)
 8009922:	637b      	str	r3, [r7, #52]	; 0x34
 8009924:	e31f      	b.n	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 8009926:	4b43      	ldr	r3, [pc, #268]	; (8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0xd30>)
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	f003 0320 	and.w	r3, r3, #32
 800992e:	2b20      	cmp	r3, #32
 8009930:	d11b      	bne.n	800996a <HAL_RCCEx_GetPeriphCLKFreq+0xc66>
 8009932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009934:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8009938:	d117      	bne.n	800996a <HAL_RCCEx_GetPeriphCLKFreq+0xc66>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800993a:	4b3e      	ldr	r3, [pc, #248]	; (8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0xd30>)
 800993c:	689b      	ldr	r3, [r3, #8]
 800993e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009942:	2b00      	cmp	r3, #0
 8009944:	d005      	beq.n	8009952 <HAL_RCCEx_GetPeriphCLKFreq+0xc4e>
 8009946:	4b3b      	ldr	r3, [pc, #236]	; (8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0xd30>)
 8009948:	689b      	ldr	r3, [r3, #8]
 800994a:	0e1b      	lsrs	r3, r3, #24
 800994c:	f003 030f 	and.w	r3, r3, #15
 8009950:	e006      	b.n	8009960 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 8009952:	4b38      	ldr	r3, [pc, #224]	; (8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0xd30>)
 8009954:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009958:	041b      	lsls	r3, r3, #16
 800995a:	0e1b      	lsrs	r3, r3, #24
 800995c:	f003 030f 	and.w	r3, r3, #15
 8009960:	4a36      	ldr	r2, [pc, #216]	; (8009a3c <HAL_RCCEx_GetPeriphCLKFreq+0xd38>)
 8009962:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009966:	637b      	str	r3, [r7, #52]	; 0x34
 8009968:	e2fd      	b.n	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 800996a:	2300      	movs	r3, #0
 800996c:	637b      	str	r3, [r7, #52]	; 0x34
 800996e:	e2fa      	b.n	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 8009970:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009974:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8009978:	430b      	orrs	r3, r1
 800997a:	d161      	bne.n	8009a40 <HAL_RCCEx_GetPeriphCLKFreq+0xd3c>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 800997c:	4b2d      	ldr	r3, [pc, #180]	; (8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0xd30>)
 800997e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009982:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009986:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 8009988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800998a:	2b00      	cmp	r3, #0
 800998c:	d117      	bne.n	80099be <HAL_RCCEx_GetPeriphCLKFreq+0xcba>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800998e:	4b29      	ldr	r3, [pc, #164]	; (8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0xd30>)
 8009990:	689b      	ldr	r3, [r3, #8]
 8009992:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009996:	2b00      	cmp	r3, #0
 8009998:	d005      	beq.n	80099a6 <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
 800999a:	4b26      	ldr	r3, [pc, #152]	; (8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0xd30>)
 800999c:	689b      	ldr	r3, [r3, #8]
 800999e:	0e1b      	lsrs	r3, r3, #24
 80099a0:	f003 030f 	and.w	r3, r3, #15
 80099a4:	e006      	b.n	80099b4 <HAL_RCCEx_GetPeriphCLKFreq+0xcb0>
 80099a6:	4b23      	ldr	r3, [pc, #140]	; (8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0xd30>)
 80099a8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80099ac:	041b      	lsls	r3, r3, #16
 80099ae:	0e1b      	lsrs	r3, r3, #24
 80099b0:	f003 030f 	and.w	r3, r3, #15
 80099b4:	4a21      	ldr	r2, [pc, #132]	; (8009a3c <HAL_RCCEx_GetPeriphCLKFreq+0xd38>)
 80099b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80099ba:	637b      	str	r3, [r7, #52]	; 0x34
 80099bc:	e2d3      	b.n	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 80099be:	4b1d      	ldr	r3, [pc, #116]	; (8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0xd30>)
 80099c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80099c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80099c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80099cc:	d112      	bne.n	80099f4 <HAL_RCCEx_GetPeriphCLKFreq+0xcf0>
 80099ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80099d4:	d10e      	bne.n	80099f4 <HAL_RCCEx_GetPeriphCLKFreq+0xcf0>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80099d6:	4b17      	ldr	r3, [pc, #92]	; (8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0xd30>)
 80099d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80099dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80099e0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80099e4:	d102      	bne.n	80099ec <HAL_RCCEx_GetPeriphCLKFreq+0xce8>
      {
        frequency = LSI_VALUE / 128U;
 80099e6:	23fa      	movs	r3, #250	; 0xfa
 80099e8:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80099ea:	e2bc      	b.n	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>
      }
      else
      {
        frequency = LSI_VALUE;
 80099ec:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80099f0:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80099f2:	e2b8      	b.n	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 80099f4:	4b0f      	ldr	r3, [pc, #60]	; (8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0xd30>)
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80099fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009a00:	d106      	bne.n	8009a10 <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
 8009a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009a08:	d102      	bne.n	8009a10 <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
    {
      frequency = HSI_VALUE;
 8009a0a:	4b0b      	ldr	r3, [pc, #44]	; (8009a38 <HAL_RCCEx_GetPeriphCLKFreq+0xd34>)
 8009a0c:	637b      	str	r3, [r7, #52]	; 0x34
 8009a0e:	e2aa      	b.n	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 8009a10:	4b08      	ldr	r3, [pc, #32]	; (8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0xd30>)
 8009a12:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009a16:	f003 0302 	and.w	r3, r3, #2
 8009a1a:	2b02      	cmp	r3, #2
 8009a1c:	d107      	bne.n	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
 8009a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a20:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009a24:	d103      	bne.n	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
    {
      frequency = LSE_VALUE;
 8009a26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009a2a:	637b      	str	r3, [r7, #52]	; 0x34
 8009a2c:	e29b      	b.n	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 8009a2e:	2300      	movs	r3, #0
 8009a30:	637b      	str	r3, [r7, #52]	; 0x34
 8009a32:	e298      	b.n	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>
 8009a34:	46020c00 	.word	0x46020c00
 8009a38:	00f42400 	.word	0x00f42400
 8009a3c:	08027de0 	.word	0x08027de0
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 8009a40:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009a44:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8009a48:	430b      	orrs	r3, r1
 8009a4a:	d15b      	bne.n	8009b04 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8009a4c:	4b98      	ldr	r3, [pc, #608]	; (8009cb0 <HAL_RCCEx_GetPeriphCLKFreq+0xfac>)
 8009a4e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009a52:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009a56:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 8009a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d117      	bne.n	8009a8e <HAL_RCCEx_GetPeriphCLKFreq+0xd8a>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009a5e:	4b94      	ldr	r3, [pc, #592]	; (8009cb0 <HAL_RCCEx_GetPeriphCLKFreq+0xfac>)
 8009a60:	689b      	ldr	r3, [r3, #8]
 8009a62:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d005      	beq.n	8009a76 <HAL_RCCEx_GetPeriphCLKFreq+0xd72>
 8009a6a:	4b91      	ldr	r3, [pc, #580]	; (8009cb0 <HAL_RCCEx_GetPeriphCLKFreq+0xfac>)
 8009a6c:	689b      	ldr	r3, [r3, #8]
 8009a6e:	0e1b      	lsrs	r3, r3, #24
 8009a70:	f003 030f 	and.w	r3, r3, #15
 8009a74:	e006      	b.n	8009a84 <HAL_RCCEx_GetPeriphCLKFreq+0xd80>
 8009a76:	4b8e      	ldr	r3, [pc, #568]	; (8009cb0 <HAL_RCCEx_GetPeriphCLKFreq+0xfac>)
 8009a78:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009a7c:	041b      	lsls	r3, r3, #16
 8009a7e:	0e1b      	lsrs	r3, r3, #24
 8009a80:	f003 030f 	and.w	r3, r3, #15
 8009a84:	4a8b      	ldr	r2, [pc, #556]	; (8009cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xfb0>)
 8009a86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009a8a:	637b      	str	r3, [r7, #52]	; 0x34
 8009a8c:	e26b      	b.n	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8009a8e:	4b88      	ldr	r3, [pc, #544]	; (8009cb0 <HAL_RCCEx_GetPeriphCLKFreq+0xfac>)
 8009a90:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009a94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009a98:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009a9c:	d112      	bne.n	8009ac4 <HAL_RCCEx_GetPeriphCLKFreq+0xdc0>
 8009a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aa0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009aa4:	d10e      	bne.n	8009ac4 <HAL_RCCEx_GetPeriphCLKFreq+0xdc0>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009aa6:	4b82      	ldr	r3, [pc, #520]	; (8009cb0 <HAL_RCCEx_GetPeriphCLKFreq+0xfac>)
 8009aa8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009aac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009ab0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009ab4:	d102      	bne.n	8009abc <HAL_RCCEx_GetPeriphCLKFreq+0xdb8>
      {
        frequency = LSI_VALUE / 128U;
 8009ab6:	23fa      	movs	r3, #250	; 0xfa
 8009ab8:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009aba:	e254      	b.n	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>
      }
      else
      {
        frequency = LSI_VALUE;
 8009abc:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8009ac0:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009ac2:	e250      	b.n	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8009ac4:	4b7a      	ldr	r3, [pc, #488]	; (8009cb0 <HAL_RCCEx_GetPeriphCLKFreq+0xfac>)
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009acc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009ad0:	d106      	bne.n	8009ae0 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
 8009ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ad4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009ad8:	d102      	bne.n	8009ae0 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
    {
      frequency = HSI_VALUE;
 8009ada:	4b77      	ldr	r3, [pc, #476]	; (8009cb8 <HAL_RCCEx_GetPeriphCLKFreq+0xfb4>)
 8009adc:	637b      	str	r3, [r7, #52]	; 0x34
 8009ade:	e242      	b.n	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8009ae0:	4b73      	ldr	r3, [pc, #460]	; (8009cb0 <HAL_RCCEx_GetPeriphCLKFreq+0xfac>)
 8009ae2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009ae6:	f003 0302 	and.w	r3, r3, #2
 8009aea:	2b02      	cmp	r3, #2
 8009aec:	d107      	bne.n	8009afe <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
 8009aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009af0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009af4:	d103      	bne.n	8009afe <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
    {
      frequency = LSE_VALUE;
 8009af6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009afa:	637b      	str	r3, [r7, #52]	; 0x34
 8009afc:	e233      	b.n	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 8009afe:	2300      	movs	r3, #0
 8009b00:	637b      	str	r3, [r7, #52]	; 0x34
 8009b02:	e230      	b.n	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 8009b04:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009b08:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8009b0c:	430b      	orrs	r3, r1
 8009b0e:	d147      	bne.n	8009ba0 <HAL_RCCEx_GetPeriphCLKFreq+0xe9c>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8009b10:	4b67      	ldr	r3, [pc, #412]	; (8009cb0 <HAL_RCCEx_GetPeriphCLKFreq+0xfac>)
 8009b12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009b16:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8009b1a:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8009b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d103      	bne.n	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8009b22:	f7fc ffef 	bl	8006b04 <HAL_RCC_GetPCLK1Freq>
 8009b26:	6378      	str	r0, [r7, #52]	; 0x34
 8009b28:	e21d      	b.n	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8009b2a:	4b61      	ldr	r3, [pc, #388]	; (8009cb0 <HAL_RCCEx_GetPeriphCLKFreq+0xfac>)
 8009b2c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009b30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009b34:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009b38:	d112      	bne.n	8009b60 <HAL_RCCEx_GetPeriphCLKFreq+0xe5c>
 8009b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b3c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009b40:	d10e      	bne.n	8009b60 <HAL_RCCEx_GetPeriphCLKFreq+0xe5c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009b42:	4b5b      	ldr	r3, [pc, #364]	; (8009cb0 <HAL_RCCEx_GetPeriphCLKFreq+0xfac>)
 8009b44:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009b48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009b4c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009b50:	d102      	bne.n	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0xe54>
      {
        frequency = LSI_VALUE / 128U;
 8009b52:	23fa      	movs	r3, #250	; 0xfa
 8009b54:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009b56:	e206      	b.n	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>
      }
      else
      {
        frequency = LSI_VALUE;
 8009b58:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8009b5c:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009b5e:	e202      	b.n	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8009b60:	4b53      	ldr	r3, [pc, #332]	; (8009cb0 <HAL_RCCEx_GetPeriphCLKFreq+0xfac>)
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009b68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009b6c:	d106      	bne.n	8009b7c <HAL_RCCEx_GetPeriphCLKFreq+0xe78>
 8009b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b70:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009b74:	d102      	bne.n	8009b7c <HAL_RCCEx_GetPeriphCLKFreq+0xe78>
    {
      frequency = HSI_VALUE;
 8009b76:	4b50      	ldr	r3, [pc, #320]	; (8009cb8 <HAL_RCCEx_GetPeriphCLKFreq+0xfb4>)
 8009b78:	637b      	str	r3, [r7, #52]	; 0x34
 8009b7a:	e1f4      	b.n	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8009b7c:	4b4c      	ldr	r3, [pc, #304]	; (8009cb0 <HAL_RCCEx_GetPeriphCLKFreq+0xfac>)
 8009b7e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009b82:	f003 0302 	and.w	r3, r3, #2
 8009b86:	2b02      	cmp	r3, #2
 8009b88:	d107      	bne.n	8009b9a <HAL_RCCEx_GetPeriphCLKFreq+0xe96>
 8009b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b8c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8009b90:	d103      	bne.n	8009b9a <HAL_RCCEx_GetPeriphCLKFreq+0xe96>
    {
      frequency = LSE_VALUE;
 8009b92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009b96:	637b      	str	r3, [r7, #52]	; 0x34
 8009b98:	e1e5      	b.n	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 8009b9a:	2300      	movs	r3, #0
 8009b9c:	637b      	str	r3, [r7, #52]	; 0x34
 8009b9e:	e1e2      	b.n	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 8009ba0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009ba4:	f102 4178 	add.w	r1, r2, #4160749568	; 0xf8000000
 8009ba8:	430b      	orrs	r3, r1
 8009baa:	d12d      	bne.n	8009c08 <HAL_RCCEx_GetPeriphCLKFreq+0xf04>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 8009bac:	4b40      	ldr	r3, [pc, #256]	; (8009cb0 <HAL_RCCEx_GetPeriphCLKFreq+0xfac>)
 8009bae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009bb2:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8009bb6:	633b      	str	r3, [r7, #48]	; 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 8009bb8:	4b3d      	ldr	r3, [pc, #244]	; (8009cb0 <HAL_RCCEx_GetPeriphCLKFreq+0xfac>)
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009bc0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009bc4:	d105      	bne.n	8009bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xece>
 8009bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d102      	bne.n	8009bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xece>
    {
      frequency = HSE_VALUE;
 8009bcc:	4b3a      	ldr	r3, [pc, #232]	; (8009cb8 <HAL_RCCEx_GetPeriphCLKFreq+0xfb4>)
 8009bce:	637b      	str	r3, [r7, #52]	; 0x34
 8009bd0:	e1c9      	b.n	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 8009bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bd4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009bd8:	d107      	bne.n	8009bea <HAL_RCCEx_GetPeriphCLKFreq+0xee6>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009bda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009bde:	4618      	mov	r0, r3
 8009be0:	f7fe fc5e 	bl	80084a0 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 8009be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009be6:	637b      	str	r3, [r7, #52]	; 0x34
 8009be8:	e1bd      	b.n	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 8009bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009bf0:	d107      	bne.n	8009c02 <HAL_RCCEx_GetPeriphCLKFreq+0xefe>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009bf2:	f107 0318 	add.w	r3, r7, #24
 8009bf6:	4618      	mov	r0, r3
 8009bf8:	f7fe fdb8 	bl	800876c <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 8009bfc:	69bb      	ldr	r3, [r7, #24]
 8009bfe:	637b      	str	r3, [r7, #52]	; 0x34
 8009c00:	e1b1      	b.n	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 8009c02:	2300      	movs	r3, #0
 8009c04:	637b      	str	r3, [r7, #52]	; 0x34
 8009c06:	e1ae      	b.n	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 8009c08:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009c0c:	f5a2 0100 	sub.w	r1, r2, #8388608	; 0x800000
 8009c10:	430b      	orrs	r3, r1
 8009c12:	d153      	bne.n	8009cbc <HAL_RCCEx_GetPeriphCLKFreq+0xfb8>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8009c14:	4b26      	ldr	r3, [pc, #152]	; (8009cb0 <HAL_RCCEx_GetPeriphCLKFreq+0xfac>)
 8009c16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009c1a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8009c1e:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8009c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c22:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009c26:	d028      	beq.n	8009c7a <HAL_RCCEx_GetPeriphCLKFreq+0xf76>
 8009c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c2a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009c2e:	d83c      	bhi.n	8009caa <HAL_RCCEx_GetPeriphCLKFreq+0xfa6>
 8009c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c32:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009c36:	d013      	beq.n	8009c60 <HAL_RCCEx_GetPeriphCLKFreq+0xf5c>
 8009c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c3a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009c3e:	d834      	bhi.n	8009caa <HAL_RCCEx_GetPeriphCLKFreq+0xfa6>
 8009c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d004      	beq.n	8009c50 <HAL_RCCEx_GetPeriphCLKFreq+0xf4c>
 8009c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c48:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009c4c:	d004      	beq.n	8009c58 <HAL_RCCEx_GetPeriphCLKFreq+0xf54>
 8009c4e:	e02c      	b.n	8009caa <HAL_RCCEx_GetPeriphCLKFreq+0xfa6>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 8009c50:	f7fc ff6c 	bl	8006b2c <HAL_RCC_GetPCLK2Freq>
 8009c54:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8009c56:	e186      	b.n	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8009c58:	f7fc fe32 	bl	80068c0 <HAL_RCC_GetSysClockFreq>
 8009c5c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8009c5e:	e182      	b.n	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009c60:	4b13      	ldr	r3, [pc, #76]	; (8009cb0 <HAL_RCCEx_GetPeriphCLKFreq+0xfac>)
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009c68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009c6c:	d102      	bne.n	8009c74 <HAL_RCCEx_GetPeriphCLKFreq+0xf70>
        {
          frequency = HSI_VALUE;
 8009c6e:	4b12      	ldr	r3, [pc, #72]	; (8009cb8 <HAL_RCCEx_GetPeriphCLKFreq+0xfb4>)
 8009c70:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009c72:	e178      	b.n	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>
          frequency = 0U;
 8009c74:	2300      	movs	r3, #0
 8009c76:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009c78:	e175      	b.n	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>

      case RCC_SPI1CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009c7a:	4b0d      	ldr	r3, [pc, #52]	; (8009cb0 <HAL_RCCEx_GetPeriphCLKFreq+0xfac>)
 8009c7c:	689b      	ldr	r3, [r3, #8]
 8009c7e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d005      	beq.n	8009c92 <HAL_RCCEx_GetPeriphCLKFreq+0xf8e>
 8009c86:	4b0a      	ldr	r3, [pc, #40]	; (8009cb0 <HAL_RCCEx_GetPeriphCLKFreq+0xfac>)
 8009c88:	689b      	ldr	r3, [r3, #8]
 8009c8a:	0e1b      	lsrs	r3, r3, #24
 8009c8c:	f003 030f 	and.w	r3, r3, #15
 8009c90:	e006      	b.n	8009ca0 <HAL_RCCEx_GetPeriphCLKFreq+0xf9c>
 8009c92:	4b07      	ldr	r3, [pc, #28]	; (8009cb0 <HAL_RCCEx_GetPeriphCLKFreq+0xfac>)
 8009c94:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009c98:	041b      	lsls	r3, r3, #16
 8009c9a:	0e1b      	lsrs	r3, r3, #24
 8009c9c:	f003 030f 	and.w	r3, r3, #15
 8009ca0:	4a04      	ldr	r2, [pc, #16]	; (8009cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xfb0>)
 8009ca2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009ca6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009ca8:	e15d      	b.n	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>

      default:

        frequency = 0U;
 8009caa:	2300      	movs	r3, #0
 8009cac:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009cae:	e15a      	b.n	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>
 8009cb0:	46020c00 	.word	0x46020c00
 8009cb4:	08027de0 	.word	0x08027de0
 8009cb8:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 8009cbc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009cc0:	f102 417f 	add.w	r1, r2, #4278190080	; 0xff000000
 8009cc4:	430b      	orrs	r3, r1
 8009cc6:	d14d      	bne.n	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x1060>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8009cc8:	4ba9      	ldr	r3, [pc, #676]	; (8009f70 <HAL_RCCEx_GetPeriphCLKFreq+0x126c>)
 8009cca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009cce:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009cd2:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8009cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cd6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009cda:	d028      	beq.n	8009d2e <HAL_RCCEx_GetPeriphCLKFreq+0x102a>
 8009cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cde:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009ce2:	d83c      	bhi.n	8009d5e <HAL_RCCEx_GetPeriphCLKFreq+0x105a>
 8009ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ce6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009cea:	d013      	beq.n	8009d14 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>
 8009cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009cf2:	d834      	bhi.n	8009d5e <HAL_RCCEx_GetPeriphCLKFreq+0x105a>
 8009cf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d004      	beq.n	8009d04 <HAL_RCCEx_GetPeriphCLKFreq+0x1000>
 8009cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009d00:	d004      	beq.n	8009d0c <HAL_RCCEx_GetPeriphCLKFreq+0x1008>
 8009d02:	e02c      	b.n	8009d5e <HAL_RCCEx_GetPeriphCLKFreq+0x105a>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 8009d04:	f7fc fefe 	bl	8006b04 <HAL_RCC_GetPCLK1Freq>
 8009d08:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8009d0a:	e12c      	b.n	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8009d0c:	f7fc fdd8 	bl	80068c0 <HAL_RCC_GetSysClockFreq>
 8009d10:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8009d12:	e128      	b.n	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009d14:	4b96      	ldr	r3, [pc, #600]	; (8009f70 <HAL_RCCEx_GetPeriphCLKFreq+0x126c>)
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009d1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009d20:	d102      	bne.n	8009d28 <HAL_RCCEx_GetPeriphCLKFreq+0x1024>
        {
          frequency = HSI_VALUE;
 8009d22:	4b94      	ldr	r3, [pc, #592]	; (8009f74 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8009d24:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009d26:	e11e      	b.n	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>
          frequency = 0U;
 8009d28:	2300      	movs	r3, #0
 8009d2a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009d2c:	e11b      	b.n	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>

      case RCC_SPI2CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009d2e:	4b90      	ldr	r3, [pc, #576]	; (8009f70 <HAL_RCCEx_GetPeriphCLKFreq+0x126c>)
 8009d30:	689b      	ldr	r3, [r3, #8]
 8009d32:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d005      	beq.n	8009d46 <HAL_RCCEx_GetPeriphCLKFreq+0x1042>
 8009d3a:	4b8d      	ldr	r3, [pc, #564]	; (8009f70 <HAL_RCCEx_GetPeriphCLKFreq+0x126c>)
 8009d3c:	689b      	ldr	r3, [r3, #8]
 8009d3e:	0e1b      	lsrs	r3, r3, #24
 8009d40:	f003 030f 	and.w	r3, r3, #15
 8009d44:	e006      	b.n	8009d54 <HAL_RCCEx_GetPeriphCLKFreq+0x1050>
 8009d46:	4b8a      	ldr	r3, [pc, #552]	; (8009f70 <HAL_RCCEx_GetPeriphCLKFreq+0x126c>)
 8009d48:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009d4c:	041b      	lsls	r3, r3, #16
 8009d4e:	0e1b      	lsrs	r3, r3, #24
 8009d50:	f003 030f 	and.w	r3, r3, #15
 8009d54:	4a88      	ldr	r2, [pc, #544]	; (8009f78 <HAL_RCCEx_GetPeriphCLKFreq+0x1274>)
 8009d56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009d5a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009d5c:	e103      	b.n	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>

      default:

        frequency = 0U;
 8009d5e:	2300      	movs	r3, #0
 8009d60:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009d62:	e100      	b.n	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 8009d64:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009d68:	f102 417e 	add.w	r1, r2, #4261412864	; 0xfe000000
 8009d6c:	430b      	orrs	r3, r1
 8009d6e:	d16d      	bne.n	8009e4c <HAL_RCCEx_GetPeriphCLKFreq+0x1148>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8009d70:	4b7f      	ldr	r3, [pc, #508]	; (8009f70 <HAL_RCCEx_GetPeriphCLKFreq+0x126c>)
 8009d72:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009d76:	f003 0318 	and.w	r3, r3, #24
 8009d7a:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8009d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d7e:	2b18      	cmp	r3, #24
 8009d80:	d861      	bhi.n	8009e46 <HAL_RCCEx_GetPeriphCLKFreq+0x1142>
 8009d82:	a201      	add	r2, pc, #4	; (adr r2, 8009d88 <HAL_RCCEx_GetPeriphCLKFreq+0x1084>)
 8009d84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d88:	08009ded 	.word	0x08009ded
 8009d8c:	08009e47 	.word	0x08009e47
 8009d90:	08009e47 	.word	0x08009e47
 8009d94:	08009e47 	.word	0x08009e47
 8009d98:	08009e47 	.word	0x08009e47
 8009d9c:	08009e47 	.word	0x08009e47
 8009da0:	08009e47 	.word	0x08009e47
 8009da4:	08009e47 	.word	0x08009e47
 8009da8:	08009df5 	.word	0x08009df5
 8009dac:	08009e47 	.word	0x08009e47
 8009db0:	08009e47 	.word	0x08009e47
 8009db4:	08009e47 	.word	0x08009e47
 8009db8:	08009e47 	.word	0x08009e47
 8009dbc:	08009e47 	.word	0x08009e47
 8009dc0:	08009e47 	.word	0x08009e47
 8009dc4:	08009e47 	.word	0x08009e47
 8009dc8:	08009dfd 	.word	0x08009dfd
 8009dcc:	08009e47 	.word	0x08009e47
 8009dd0:	08009e47 	.word	0x08009e47
 8009dd4:	08009e47 	.word	0x08009e47
 8009dd8:	08009e47 	.word	0x08009e47
 8009ddc:	08009e47 	.word	0x08009e47
 8009de0:	08009e47 	.word	0x08009e47
 8009de4:	08009e47 	.word	0x08009e47
 8009de8:	08009e17 	.word	0x08009e17
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 8009dec:	f7fc feb2 	bl	8006b54 <HAL_RCC_GetPCLK3Freq>
 8009df0:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8009df2:	e0b8      	b.n	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8009df4:	f7fc fd64 	bl	80068c0 <HAL_RCC_GetSysClockFreq>
 8009df8:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8009dfa:	e0b4      	b.n	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009dfc:	4b5c      	ldr	r3, [pc, #368]	; (8009f70 <HAL_RCCEx_GetPeriphCLKFreq+0x126c>)
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009e04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009e08:	d102      	bne.n	8009e10 <HAL_RCCEx_GetPeriphCLKFreq+0x110c>
        {
          frequency = HSI_VALUE;
 8009e0a:	4b5a      	ldr	r3, [pc, #360]	; (8009f74 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8009e0c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009e0e:	e0aa      	b.n	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>
          frequency = 0U;
 8009e10:	2300      	movs	r3, #0
 8009e12:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009e14:	e0a7      	b.n	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>

      case RCC_SPI3CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009e16:	4b56      	ldr	r3, [pc, #344]	; (8009f70 <HAL_RCCEx_GetPeriphCLKFreq+0x126c>)
 8009e18:	689b      	ldr	r3, [r3, #8]
 8009e1a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d005      	beq.n	8009e2e <HAL_RCCEx_GetPeriphCLKFreq+0x112a>
 8009e22:	4b53      	ldr	r3, [pc, #332]	; (8009f70 <HAL_RCCEx_GetPeriphCLKFreq+0x126c>)
 8009e24:	689b      	ldr	r3, [r3, #8]
 8009e26:	0e1b      	lsrs	r3, r3, #24
 8009e28:	f003 030f 	and.w	r3, r3, #15
 8009e2c:	e006      	b.n	8009e3c <HAL_RCCEx_GetPeriphCLKFreq+0x1138>
 8009e2e:	4b50      	ldr	r3, [pc, #320]	; (8009f70 <HAL_RCCEx_GetPeriphCLKFreq+0x126c>)
 8009e30:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009e34:	041b      	lsls	r3, r3, #16
 8009e36:	0e1b      	lsrs	r3, r3, #24
 8009e38:	f003 030f 	and.w	r3, r3, #15
 8009e3c:	4a4e      	ldr	r2, [pc, #312]	; (8009f78 <HAL_RCCEx_GetPeriphCLKFreq+0x1274>)
 8009e3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009e42:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009e44:	e08f      	b.n	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>

      default:

        frequency = 0U;
 8009e46:	2300      	movs	r3, #0
 8009e48:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009e4a:	e08c      	b.n	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 8009e4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009e50:	f102 417c 	add.w	r1, r2, #4227858432	; 0xfc000000
 8009e54:	430b      	orrs	r3, r1
 8009e56:	d14c      	bne.n	8009ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x11ee>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8009e58:	4b45      	ldr	r3, [pc, #276]	; (8009f70 <HAL_RCCEx_GetPeriphCLKFreq+0x126c>)
 8009e5a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8009e5e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8009e62:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8009e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e66:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009e6a:	d013      	beq.n	8009e94 <HAL_RCCEx_GetPeriphCLKFreq+0x1190>
 8009e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e6e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009e72:	d83b      	bhi.n	8009eec <HAL_RCCEx_GetPeriphCLKFreq+0x11e8>
 8009e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e76:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009e7a:	d013      	beq.n	8009ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x11a0>
 8009e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e7e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009e82:	d833      	bhi.n	8009eec <HAL_RCCEx_GetPeriphCLKFreq+0x11e8>
 8009e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d014      	beq.n	8009eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x11b0>
 8009e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e8c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009e90:	d014      	beq.n	8009ebc <HAL_RCCEx_GetPeriphCLKFreq+0x11b8>
 8009e92:	e02b      	b.n	8009eec <HAL_RCCEx_GetPeriphCLKFreq+0x11e8>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009e94:	f107 0318 	add.w	r3, r7, #24
 8009e98:	4618      	mov	r0, r3
 8009e9a:	f7fe fc67 	bl	800876c <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8009e9e:	69fb      	ldr	r3, [r7, #28]
 8009ea0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009ea2:	e060      	b.n	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009ea4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	f7fe faf9 	bl	80084a0 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8009eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009eb0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009eb2:	e058      	b.n	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8009eb4:	f7fc fd04 	bl	80068c0 <HAL_RCC_GetSysClockFreq>
 8009eb8:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8009eba:	e054      	b.n	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>

      case RCC_OSPICLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009ebc:	4b2c      	ldr	r3, [pc, #176]	; (8009f70 <HAL_RCCEx_GetPeriphCLKFreq+0x126c>)
 8009ebe:	689b      	ldr	r3, [r3, #8]
 8009ec0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d005      	beq.n	8009ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x11d0>
 8009ec8:	4b29      	ldr	r3, [pc, #164]	; (8009f70 <HAL_RCCEx_GetPeriphCLKFreq+0x126c>)
 8009eca:	689b      	ldr	r3, [r3, #8]
 8009ecc:	0e1b      	lsrs	r3, r3, #24
 8009ece:	f003 030f 	and.w	r3, r3, #15
 8009ed2:	e006      	b.n	8009ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x11de>
 8009ed4:	4b26      	ldr	r3, [pc, #152]	; (8009f70 <HAL_RCCEx_GetPeriphCLKFreq+0x126c>)
 8009ed6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009eda:	041b      	lsls	r3, r3, #16
 8009edc:	0e1b      	lsrs	r3, r3, #24
 8009ede:	f003 030f 	and.w	r3, r3, #15
 8009ee2:	4a25      	ldr	r2, [pc, #148]	; (8009f78 <HAL_RCCEx_GetPeriphCLKFreq+0x1274>)
 8009ee4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009ee8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009eea:	e03c      	b.n	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>

      default:

        frequency = 0U;
 8009eec:	2300      	movs	r3, #0
 8009eee:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009ef0:	e039      	b.n	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 8009ef2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009ef6:	f102 4170 	add.w	r1, r2, #4026531840	; 0xf0000000
 8009efa:	430b      	orrs	r3, r1
 8009efc:	d131      	bne.n	8009f62 <HAL_RCCEx_GetPeriphCLKFreq+0x125e>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 8009efe:	4b1c      	ldr	r3, [pc, #112]	; (8009f70 <HAL_RCCEx_GetPeriphCLKFreq+0x126c>)
 8009f00:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009f04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009f08:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 8009f0a:	4b19      	ldr	r3, [pc, #100]	; (8009f70 <HAL_RCCEx_GetPeriphCLKFreq+0x126c>)
 8009f0c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009f10:	f003 0302 	and.w	r3, r3, #2
 8009f14:	2b02      	cmp	r3, #2
 8009f16:	d106      	bne.n	8009f26 <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
 8009f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d103      	bne.n	8009f26 <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
    {
      frequency = LSE_VALUE;
 8009f1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009f22:	637b      	str	r3, [r7, #52]	; 0x34
 8009f24:	e01f      	b.n	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 8009f26:	4b12      	ldr	r3, [pc, #72]	; (8009f70 <HAL_RCCEx_GetPeriphCLKFreq+0x126c>)
 8009f28:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009f2c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009f30:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009f34:	d112      	bne.n	8009f5c <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
 8009f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009f3c:	d10e      	bne.n	8009f5c <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009f3e:	4b0c      	ldr	r3, [pc, #48]	; (8009f70 <HAL_RCCEx_GetPeriphCLKFreq+0x126c>)
 8009f40:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009f44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009f48:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009f4c:	d102      	bne.n	8009f54 <HAL_RCCEx_GetPeriphCLKFreq+0x1250>
      {
        frequency = LSI_VALUE / 128U;
 8009f4e:	23fa      	movs	r3, #250	; 0xfa
 8009f50:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009f52:	e008      	b.n	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>
      }
      else
      {
        frequency = LSI_VALUE;
 8009f54:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8009f58:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009f5a:	e004      	b.n	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 8009f5c:	2300      	movs	r3, #0
 8009f5e:	637b      	str	r3, [r7, #52]	; 0x34
 8009f60:	e001      	b.n	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>
    }

  }
  else
  {
    frequency = 0;
 8009f62:	2300      	movs	r3, #0
 8009f64:	637b      	str	r3, [r7, #52]	; 0x34
  }
  return (frequency);
 8009f66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009f68:	4618      	mov	r0, r3
 8009f6a:	3738      	adds	r7, #56	; 0x38
 8009f6c:	46bd      	mov	sp, r7
 8009f6e:	bdb0      	pop	{r4, r5, r7, pc}
 8009f70:	46020c00 	.word	0x46020c00
 8009f74:	00f42400 	.word	0x00f42400
 8009f78:	08027de0 	.word	0x08027de0

08009f7c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2)
{
 8009f7c:	b580      	push	{r7, lr}
 8009f7e:	b084      	sub	sp, #16
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	6078      	str	r0, [r7, #4]

  uint32_t tickstart;
  assert_param(IS_RCC_PLLSOURCE(pll2->PLL2Source));
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	2b01      	cmp	r3, #1
 8009f8a:	d00c      	beq.n	8009fa6 <RCCEx_PLL2_Config+0x2a>
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	2b02      	cmp	r3, #2
 8009f92:	d008      	beq.n	8009fa6 <RCCEx_PLL2_Config+0x2a>
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	2b03      	cmp	r3, #3
 8009f9a:	d004      	beq.n	8009fa6 <RCCEx_PLL2_Config+0x2a>
 8009f9c:	f640 7118 	movw	r1, #3864	; 0xf18
 8009fa0:	4869      	ldr	r0, [pc, #420]	; (800a148 <RCCEx_PLL2_Config+0x1cc>)
 8009fa2:	f00b f982 	bl	80152aa <assert_failed>
  assert_param(IS_RCC_PLLM_VALUE(pll2->PLL2M));
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	685b      	ldr	r3, [r3, #4]
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d003      	beq.n	8009fb6 <RCCEx_PLL2_Config+0x3a>
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	685b      	ldr	r3, [r3, #4]
 8009fb2:	2b10      	cmp	r3, #16
 8009fb4:	d904      	bls.n	8009fc0 <RCCEx_PLL2_Config+0x44>
 8009fb6:	f640 7119 	movw	r1, #3865	; 0xf19
 8009fba:	4863      	ldr	r0, [pc, #396]	; (800a148 <RCCEx_PLL2_Config+0x1cc>)
 8009fbc:	f00b f975 	bl	80152aa <assert_failed>
  assert_param(IS_RCC_PLLN_VALUE(pll2->PLL2N));
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	689b      	ldr	r3, [r3, #8]
 8009fc4:	2b03      	cmp	r3, #3
 8009fc6:	d904      	bls.n	8009fd2 <RCCEx_PLL2_Config+0x56>
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	689b      	ldr	r3, [r3, #8]
 8009fcc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009fd0:	d904      	bls.n	8009fdc <RCCEx_PLL2_Config+0x60>
 8009fd2:	f640 711a 	movw	r1, #3866	; 0xf1a
 8009fd6:	485c      	ldr	r0, [pc, #368]	; (800a148 <RCCEx_PLL2_Config+0x1cc>)
 8009fd8:	f00b f967 	bl	80152aa <assert_failed>
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	68db      	ldr	r3, [r3, #12]
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d003      	beq.n	8009fec <RCCEx_PLL2_Config+0x70>
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	68db      	ldr	r3, [r3, #12]
 8009fe8:	2b80      	cmp	r3, #128	; 0x80
 8009fea:	d904      	bls.n	8009ff6 <RCCEx_PLL2_Config+0x7a>
 8009fec:	f640 711b 	movw	r1, #3867	; 0xf1b
 8009ff0:	4855      	ldr	r0, [pc, #340]	; (800a148 <RCCEx_PLL2_Config+0x1cc>)
 8009ff2:	f00b f95a 	bl	80152aa <assert_failed>
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	691b      	ldr	r3, [r3, #16]
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d003      	beq.n	800a006 <RCCEx_PLL2_Config+0x8a>
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	691b      	ldr	r3, [r3, #16]
 800a002:	2b80      	cmp	r3, #128	; 0x80
 800a004:	d904      	bls.n	800a010 <RCCEx_PLL2_Config+0x94>
 800a006:	f640 711c 	movw	r1, #3868	; 0xf1c
 800a00a:	484f      	ldr	r0, [pc, #316]	; (800a148 <RCCEx_PLL2_Config+0x1cc>)
 800a00c:	f00b f94d 	bl	80152aa <assert_failed>
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	695b      	ldr	r3, [r3, #20]
 800a014:	2b00      	cmp	r3, #0
 800a016:	d003      	beq.n	800a020 <RCCEx_PLL2_Config+0xa4>
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	695b      	ldr	r3, [r3, #20]
 800a01c:	2b80      	cmp	r3, #128	; 0x80
 800a01e:	d904      	bls.n	800a02a <RCCEx_PLL2_Config+0xae>
 800a020:	f640 711d 	movw	r1, #3869	; 0xf1d
 800a024:	4848      	ldr	r0, [pc, #288]	; (800a148 <RCCEx_PLL2_Config+0x1cc>)
 800a026:	f00b f940 	bl	80152aa <assert_failed>

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 800a02a:	4b48      	ldr	r3, [pc, #288]	; (800a14c <RCCEx_PLL2_Config+0x1d0>)
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	4a47      	ldr	r2, [pc, #284]	; (800a14c <RCCEx_PLL2_Config+0x1d0>)
 800a030:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a034:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a036:	f7f8 fe47 	bl	8002cc8 <HAL_GetTick>
 800a03a:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a03c:	e008      	b.n	800a050 <RCCEx_PLL2_Config+0xd4>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a03e:	f7f8 fe43 	bl	8002cc8 <HAL_GetTick>
 800a042:	4602      	mov	r2, r0
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	1ad3      	subs	r3, r2, r3
 800a048:	2b02      	cmp	r3, #2
 800a04a:	d901      	bls.n	800a050 <RCCEx_PLL2_Config+0xd4>
    {
      return HAL_TIMEOUT;
 800a04c:	2303      	movs	r3, #3
 800a04e:	e077      	b.n	800a140 <RCCEx_PLL2_Config+0x1c4>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a050:	4b3e      	ldr	r3, [pc, #248]	; (800a14c <RCCEx_PLL2_Config+0x1d0>)
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d1f0      	bne.n	800a03e <RCCEx_PLL2_Config+0xc2>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800a05c:	4b3b      	ldr	r3, [pc, #236]	; (800a14c <RCCEx_PLL2_Config+0x1d0>)
 800a05e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a060:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800a064:	f023 0303 	bic.w	r3, r3, #3
 800a068:	687a      	ldr	r2, [r7, #4]
 800a06a:	6811      	ldr	r1, [r2, #0]
 800a06c:	687a      	ldr	r2, [r7, #4]
 800a06e:	6852      	ldr	r2, [r2, #4]
 800a070:	3a01      	subs	r2, #1
 800a072:	0212      	lsls	r2, r2, #8
 800a074:	430a      	orrs	r2, r1
 800a076:	4935      	ldr	r1, [pc, #212]	; (800a14c <RCCEx_PLL2_Config+0x1d0>)
 800a078:	4313      	orrs	r3, r2
 800a07a:	62cb      	str	r3, [r1, #44]	; 0x2c
 800a07c:	4b33      	ldr	r3, [pc, #204]	; (800a14c <RCCEx_PLL2_Config+0x1d0>)
 800a07e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a080:	4b33      	ldr	r3, [pc, #204]	; (800a150 <RCCEx_PLL2_Config+0x1d4>)
 800a082:	4013      	ands	r3, r2
 800a084:	687a      	ldr	r2, [r7, #4]
 800a086:	6892      	ldr	r2, [r2, #8]
 800a088:	3a01      	subs	r2, #1
 800a08a:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800a08e:	687a      	ldr	r2, [r7, #4]
 800a090:	68d2      	ldr	r2, [r2, #12]
 800a092:	3a01      	subs	r2, #1
 800a094:	0252      	lsls	r2, r2, #9
 800a096:	b292      	uxth	r2, r2
 800a098:	4311      	orrs	r1, r2
 800a09a:	687a      	ldr	r2, [r7, #4]
 800a09c:	6912      	ldr	r2, [r2, #16]
 800a09e:	3a01      	subs	r2, #1
 800a0a0:	0412      	lsls	r2, r2, #16
 800a0a2:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800a0a6:	4311      	orrs	r1, r2
 800a0a8:	687a      	ldr	r2, [r7, #4]
 800a0aa:	6952      	ldr	r2, [r2, #20]
 800a0ac:	3a01      	subs	r2, #1
 800a0ae:	0612      	lsls	r2, r2, #24
 800a0b0:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800a0b4:	430a      	orrs	r2, r1
 800a0b6:	4925      	ldr	r1, [pc, #148]	; (800a14c <RCCEx_PLL2_Config+0x1d0>)
 800a0b8:	4313      	orrs	r3, r2
 800a0ba:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800a0bc:	4b23      	ldr	r3, [pc, #140]	; (800a14c <RCCEx_PLL2_Config+0x1d0>)
 800a0be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0c0:	f023 020c 	bic.w	r2, r3, #12
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	699b      	ldr	r3, [r3, #24]
 800a0c8:	4920      	ldr	r1, [pc, #128]	; (800a14c <RCCEx_PLL2_Config+0x1d0>)
 800a0ca:	4313      	orrs	r3, r2
 800a0cc:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800a0ce:	4b1f      	ldr	r3, [pc, #124]	; (800a14c <RCCEx_PLL2_Config+0x1d0>)
 800a0d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	6a1b      	ldr	r3, [r3, #32]
 800a0d6:	491d      	ldr	r1, [pc, #116]	; (800a14c <RCCEx_PLL2_Config+0x1d0>)
 800a0d8:	4313      	orrs	r3, r2
 800a0da:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 800a0dc:	4b1b      	ldr	r3, [pc, #108]	; (800a14c <RCCEx_PLL2_Config+0x1d0>)
 800a0de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0e0:	4a1a      	ldr	r2, [pc, #104]	; (800a14c <RCCEx_PLL2_Config+0x1d0>)
 800a0e2:	f023 0310 	bic.w	r3, r3, #16
 800a0e6:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a0e8:	4b18      	ldr	r3, [pc, #96]	; (800a14c <RCCEx_PLL2_Config+0x1d0>)
 800a0ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0ec:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a0f0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800a0f4:	687a      	ldr	r2, [r7, #4]
 800a0f6:	69d2      	ldr	r2, [r2, #28]
 800a0f8:	00d2      	lsls	r2, r2, #3
 800a0fa:	4914      	ldr	r1, [pc, #80]	; (800a14c <RCCEx_PLL2_Config+0x1d0>)
 800a0fc:	4313      	orrs	r3, r2
 800a0fe:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 800a100:	4b12      	ldr	r3, [pc, #72]	; (800a14c <RCCEx_PLL2_Config+0x1d0>)
 800a102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a104:	4a11      	ldr	r2, [pc, #68]	; (800a14c <RCCEx_PLL2_Config+0x1d0>)
 800a106:	f043 0310 	orr.w	r3, r3, #16
 800a10a:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 800a10c:	4b0f      	ldr	r3, [pc, #60]	; (800a14c <RCCEx_PLL2_Config+0x1d0>)
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	4a0e      	ldr	r2, [pc, #56]	; (800a14c <RCCEx_PLL2_Config+0x1d0>)
 800a112:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a116:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a118:	f7f8 fdd6 	bl	8002cc8 <HAL_GetTick>
 800a11c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a11e:	e008      	b.n	800a132 <RCCEx_PLL2_Config+0x1b6>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a120:	f7f8 fdd2 	bl	8002cc8 <HAL_GetTick>
 800a124:	4602      	mov	r2, r0
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	1ad3      	subs	r3, r2, r3
 800a12a:	2b02      	cmp	r3, #2
 800a12c:	d901      	bls.n	800a132 <RCCEx_PLL2_Config+0x1b6>
    {
      return HAL_TIMEOUT;
 800a12e:	2303      	movs	r3, #3
 800a130:	e006      	b.n	800a140 <RCCEx_PLL2_Config+0x1c4>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a132:	4b06      	ldr	r3, [pc, #24]	; (800a14c <RCCEx_PLL2_Config+0x1d0>)
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d0f0      	beq.n	800a120 <RCCEx_PLL2_Config+0x1a4>
    }
  }
  return HAL_OK;
 800a13e:	2300      	movs	r3, #0

}
 800a140:	4618      	mov	r0, r3
 800a142:	3710      	adds	r7, #16
 800a144:	46bd      	mov	sp, r7
 800a146:	bd80      	pop	{r7, pc}
 800a148:	08025cbc 	.word	0x08025cbc
 800a14c:	46020c00 	.word	0x46020c00
 800a150:	80800000 	.word	0x80800000

0800a154 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3)
{
 800a154:	b580      	push	{r7, lr}
 800a156:	b084      	sub	sp, #16
 800a158:	af00      	add	r7, sp, #0
 800a15a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  assert_param(IS_RCC_PLLSOURCE(pll3->PLL3Source));
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	2b01      	cmp	r3, #1
 800a162:	d00c      	beq.n	800a17e <RCCEx_PLL3_Config+0x2a>
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	2b02      	cmp	r3, #2
 800a16a:	d008      	beq.n	800a17e <RCCEx_PLL3_Config+0x2a>
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	2b03      	cmp	r3, #3
 800a172:	d004      	beq.n	800a17e <RCCEx_PLL3_Config+0x2a>
 800a174:	f640 7161 	movw	r1, #3937	; 0xf61
 800a178:	4869      	ldr	r0, [pc, #420]	; (800a320 <RCCEx_PLL3_Config+0x1cc>)
 800a17a:	f00b f896 	bl	80152aa <assert_failed>
  assert_param(IS_RCC_PLLM_VALUE(pll3->PLL3M));
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	685b      	ldr	r3, [r3, #4]
 800a182:	2b00      	cmp	r3, #0
 800a184:	d003      	beq.n	800a18e <RCCEx_PLL3_Config+0x3a>
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	685b      	ldr	r3, [r3, #4]
 800a18a:	2b10      	cmp	r3, #16
 800a18c:	d904      	bls.n	800a198 <RCCEx_PLL3_Config+0x44>
 800a18e:	f640 7162 	movw	r1, #3938	; 0xf62
 800a192:	4863      	ldr	r0, [pc, #396]	; (800a320 <RCCEx_PLL3_Config+0x1cc>)
 800a194:	f00b f889 	bl	80152aa <assert_failed>
  assert_param(IS_RCC_PLLN_VALUE(pll3->PLL3N));
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	689b      	ldr	r3, [r3, #8]
 800a19c:	2b03      	cmp	r3, #3
 800a19e:	d904      	bls.n	800a1aa <RCCEx_PLL3_Config+0x56>
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	689b      	ldr	r3, [r3, #8]
 800a1a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a1a8:	d904      	bls.n	800a1b4 <RCCEx_PLL3_Config+0x60>
 800a1aa:	f640 7163 	movw	r1, #3939	; 0xf63
 800a1ae:	485c      	ldr	r0, [pc, #368]	; (800a320 <RCCEx_PLL3_Config+0x1cc>)
 800a1b0:	f00b f87b 	bl	80152aa <assert_failed>
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	68db      	ldr	r3, [r3, #12]
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d003      	beq.n	800a1c4 <RCCEx_PLL3_Config+0x70>
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	68db      	ldr	r3, [r3, #12]
 800a1c0:	2b80      	cmp	r3, #128	; 0x80
 800a1c2:	d904      	bls.n	800a1ce <RCCEx_PLL3_Config+0x7a>
 800a1c4:	f640 7164 	movw	r1, #3940	; 0xf64
 800a1c8:	4855      	ldr	r0, [pc, #340]	; (800a320 <RCCEx_PLL3_Config+0x1cc>)
 800a1ca:	f00b f86e 	bl	80152aa <assert_failed>
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	691b      	ldr	r3, [r3, #16]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d003      	beq.n	800a1de <RCCEx_PLL3_Config+0x8a>
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	691b      	ldr	r3, [r3, #16]
 800a1da:	2b80      	cmp	r3, #128	; 0x80
 800a1dc:	d904      	bls.n	800a1e8 <RCCEx_PLL3_Config+0x94>
 800a1de:	f640 7165 	movw	r1, #3941	; 0xf65
 800a1e2:	484f      	ldr	r0, [pc, #316]	; (800a320 <RCCEx_PLL3_Config+0x1cc>)
 800a1e4:	f00b f861 	bl	80152aa <assert_failed>
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	695b      	ldr	r3, [r3, #20]
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d003      	beq.n	800a1f8 <RCCEx_PLL3_Config+0xa4>
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	695b      	ldr	r3, [r3, #20]
 800a1f4:	2b80      	cmp	r3, #128	; 0x80
 800a1f6:	d904      	bls.n	800a202 <RCCEx_PLL3_Config+0xae>
 800a1f8:	f640 7166 	movw	r1, #3942	; 0xf66
 800a1fc:	4848      	ldr	r0, [pc, #288]	; (800a320 <RCCEx_PLL3_Config+0x1cc>)
 800a1fe:	f00b f854 	bl	80152aa <assert_failed>

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 800a202:	4b48      	ldr	r3, [pc, #288]	; (800a324 <RCCEx_PLL3_Config+0x1d0>)
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	4a47      	ldr	r2, [pc, #284]	; (800a324 <RCCEx_PLL3_Config+0x1d0>)
 800a208:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a20c:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a20e:	f7f8 fd5b 	bl	8002cc8 <HAL_GetTick>
 800a212:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a214:	e008      	b.n	800a228 <RCCEx_PLL3_Config+0xd4>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a216:	f7f8 fd57 	bl	8002cc8 <HAL_GetTick>
 800a21a:	4602      	mov	r2, r0
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	1ad3      	subs	r3, r2, r3
 800a220:	2b02      	cmp	r3, #2
 800a222:	d901      	bls.n	800a228 <RCCEx_PLL3_Config+0xd4>
    {
      return HAL_TIMEOUT;
 800a224:	2303      	movs	r3, #3
 800a226:	e077      	b.n	800a318 <RCCEx_PLL3_Config+0x1c4>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a228:	4b3e      	ldr	r3, [pc, #248]	; (800a324 <RCCEx_PLL3_Config+0x1d0>)
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a230:	2b00      	cmp	r3, #0
 800a232:	d1f0      	bne.n	800a216 <RCCEx_PLL3_Config+0xc2>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800a234:	4b3b      	ldr	r3, [pc, #236]	; (800a324 <RCCEx_PLL3_Config+0x1d0>)
 800a236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a238:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800a23c:	f023 0303 	bic.w	r3, r3, #3
 800a240:	687a      	ldr	r2, [r7, #4]
 800a242:	6811      	ldr	r1, [r2, #0]
 800a244:	687a      	ldr	r2, [r7, #4]
 800a246:	6852      	ldr	r2, [r2, #4]
 800a248:	3a01      	subs	r2, #1
 800a24a:	0212      	lsls	r2, r2, #8
 800a24c:	430a      	orrs	r2, r1
 800a24e:	4935      	ldr	r1, [pc, #212]	; (800a324 <RCCEx_PLL3_Config+0x1d0>)
 800a250:	4313      	orrs	r3, r2
 800a252:	630b      	str	r3, [r1, #48]	; 0x30
 800a254:	4b33      	ldr	r3, [pc, #204]	; (800a324 <RCCEx_PLL3_Config+0x1d0>)
 800a256:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a258:	4b33      	ldr	r3, [pc, #204]	; (800a328 <RCCEx_PLL3_Config+0x1d4>)
 800a25a:	4013      	ands	r3, r2
 800a25c:	687a      	ldr	r2, [r7, #4]
 800a25e:	6892      	ldr	r2, [r2, #8]
 800a260:	3a01      	subs	r2, #1
 800a262:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800a266:	687a      	ldr	r2, [r7, #4]
 800a268:	68d2      	ldr	r2, [r2, #12]
 800a26a:	3a01      	subs	r2, #1
 800a26c:	0252      	lsls	r2, r2, #9
 800a26e:	b292      	uxth	r2, r2
 800a270:	4311      	orrs	r1, r2
 800a272:	687a      	ldr	r2, [r7, #4]
 800a274:	6912      	ldr	r2, [r2, #16]
 800a276:	3a01      	subs	r2, #1
 800a278:	0412      	lsls	r2, r2, #16
 800a27a:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800a27e:	4311      	orrs	r1, r2
 800a280:	687a      	ldr	r2, [r7, #4]
 800a282:	6952      	ldr	r2, [r2, #20]
 800a284:	3a01      	subs	r2, #1
 800a286:	0612      	lsls	r2, r2, #24
 800a288:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800a28c:	430a      	orrs	r2, r1
 800a28e:	4925      	ldr	r1, [pc, #148]	; (800a324 <RCCEx_PLL3_Config+0x1d0>)
 800a290:	4313      	orrs	r3, r2
 800a292:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 800a294:	4b23      	ldr	r3, [pc, #140]	; (800a324 <RCCEx_PLL3_Config+0x1d0>)
 800a296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a298:	f023 020c 	bic.w	r2, r3, #12
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	699b      	ldr	r3, [r3, #24]
 800a2a0:	4920      	ldr	r1, [pc, #128]	; (800a324 <RCCEx_PLL3_Config+0x1d0>)
 800a2a2:	4313      	orrs	r3, r2
 800a2a4:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800a2a6:	4b1f      	ldr	r3, [pc, #124]	; (800a324 <RCCEx_PLL3_Config+0x1d0>)
 800a2a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	6a1b      	ldr	r3, [r3, #32]
 800a2ae:	491d      	ldr	r1, [pc, #116]	; (800a324 <RCCEx_PLL3_Config+0x1d0>)
 800a2b0:	4313      	orrs	r3, r2
 800a2b2:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 800a2b4:	4b1b      	ldr	r3, [pc, #108]	; (800a324 <RCCEx_PLL3_Config+0x1d0>)
 800a2b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2b8:	4a1a      	ldr	r2, [pc, #104]	; (800a324 <RCCEx_PLL3_Config+0x1d0>)
 800a2ba:	f023 0310 	bic.w	r3, r3, #16
 800a2be:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a2c0:	4b18      	ldr	r3, [pc, #96]	; (800a324 <RCCEx_PLL3_Config+0x1d0>)
 800a2c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a2c4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a2c8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800a2cc:	687a      	ldr	r2, [r7, #4]
 800a2ce:	69d2      	ldr	r2, [r2, #28]
 800a2d0:	00d2      	lsls	r2, r2, #3
 800a2d2:	4914      	ldr	r1, [pc, #80]	; (800a324 <RCCEx_PLL3_Config+0x1d0>)
 800a2d4:	4313      	orrs	r3, r2
 800a2d6:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 800a2d8:	4b12      	ldr	r3, [pc, #72]	; (800a324 <RCCEx_PLL3_Config+0x1d0>)
 800a2da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2dc:	4a11      	ldr	r2, [pc, #68]	; (800a324 <RCCEx_PLL3_Config+0x1d0>)
 800a2de:	f043 0310 	orr.w	r3, r3, #16
 800a2e2:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 800a2e4:	4b0f      	ldr	r3, [pc, #60]	; (800a324 <RCCEx_PLL3_Config+0x1d0>)
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	4a0e      	ldr	r2, [pc, #56]	; (800a324 <RCCEx_PLL3_Config+0x1d0>)
 800a2ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a2ee:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a2f0:	f7f8 fcea 	bl	8002cc8 <HAL_GetTick>
 800a2f4:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a2f6:	e008      	b.n	800a30a <RCCEx_PLL3_Config+0x1b6>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a2f8:	f7f8 fce6 	bl	8002cc8 <HAL_GetTick>
 800a2fc:	4602      	mov	r2, r0
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	1ad3      	subs	r3, r2, r3
 800a302:	2b02      	cmp	r3, #2
 800a304:	d901      	bls.n	800a30a <RCCEx_PLL3_Config+0x1b6>
    {
      return HAL_TIMEOUT;
 800a306:	2303      	movs	r3, #3
 800a308:	e006      	b.n	800a318 <RCCEx_PLL3_Config+0x1c4>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a30a:	4b06      	ldr	r3, [pc, #24]	; (800a324 <RCCEx_PLL3_Config+0x1d0>)
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a312:	2b00      	cmp	r3, #0
 800a314:	d0f0      	beq.n	800a2f8 <RCCEx_PLL3_Config+0x1a4>
    }
  }
  return HAL_OK;
 800a316:	2300      	movs	r3, #0
}
 800a318:	4618      	mov	r0, r3
 800a31a:	3710      	adds	r7, #16
 800a31c:	46bd      	mov	sp, r7
 800a31e:	bd80      	pop	{r7, pc}
 800a320:	08025cbc 	.word	0x08025cbc
 800a324:	46020c00 	.word	0x46020c00
 800a328:	80800000 	.word	0x80800000

0800a32c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a32c:	b580      	push	{r7, lr}
 800a32e:	b084      	sub	sp, #16
 800a330:	af00      	add	r7, sp, #0
 800a332:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	2b00      	cmp	r3, #0
 800a338:	d101      	bne.n	800a33e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a33a:	2301      	movs	r3, #1
 800a33c:	e30b      	b.n	800a956 <HAL_SPI_Init+0x62a>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	4a43      	ldr	r2, [pc, #268]	; (800a450 <HAL_SPI_Init+0x124>)
 800a344:	4293      	cmp	r3, r2
 800a346:	d01c      	beq.n	800a382 <HAL_SPI_Init+0x56>
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	4a41      	ldr	r2, [pc, #260]	; (800a454 <HAL_SPI_Init+0x128>)
 800a34e:	4293      	cmp	r3, r2
 800a350:	d017      	beq.n	800a382 <HAL_SPI_Init+0x56>
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	4a40      	ldr	r2, [pc, #256]	; (800a458 <HAL_SPI_Init+0x12c>)
 800a358:	4293      	cmp	r3, r2
 800a35a:	d012      	beq.n	800a382 <HAL_SPI_Init+0x56>
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	4a3e      	ldr	r2, [pc, #248]	; (800a45c <HAL_SPI_Init+0x130>)
 800a362:	4293      	cmp	r3, r2
 800a364:	d00d      	beq.n	800a382 <HAL_SPI_Init+0x56>
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	4a3d      	ldr	r2, [pc, #244]	; (800a460 <HAL_SPI_Init+0x134>)
 800a36c:	4293      	cmp	r3, r2
 800a36e:	d008      	beq.n	800a382 <HAL_SPI_Init+0x56>
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	4a3b      	ldr	r2, [pc, #236]	; (800a464 <HAL_SPI_Init+0x138>)
 800a376:	4293      	cmp	r3, r2
 800a378:	d003      	beq.n	800a382 <HAL_SPI_Init+0x56>
 800a37a:	21f7      	movs	r1, #247	; 0xf7
 800a37c:	483a      	ldr	r0, [pc, #232]	; (800a468 <HAL_SPI_Init+0x13c>)
 800a37e:	f00a ff94 	bl	80152aa <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	685b      	ldr	r3, [r3, #4]
 800a386:	2b00      	cmp	r3, #0
 800a388:	d008      	beq.n	800a39c <HAL_SPI_Init+0x70>
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	685b      	ldr	r3, [r3, #4]
 800a38e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a392:	d003      	beq.n	800a39c <HAL_SPI_Init+0x70>
 800a394:	21f8      	movs	r1, #248	; 0xf8
 800a396:	4834      	ldr	r0, [pc, #208]	; (800a468 <HAL_SPI_Init+0x13c>)
 800a398:	f00a ff87 	bl	80152aa <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	689b      	ldr	r3, [r3, #8]
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d012      	beq.n	800a3ca <HAL_SPI_Init+0x9e>
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	689b      	ldr	r3, [r3, #8]
 800a3a8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a3ac:	d00d      	beq.n	800a3ca <HAL_SPI_Init+0x9e>
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	689b      	ldr	r3, [r3, #8]
 800a3b2:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800a3b6:	d008      	beq.n	800a3ca <HAL_SPI_Init+0x9e>
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	689b      	ldr	r3, [r3, #8]
 800a3bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a3c0:	d003      	beq.n	800a3ca <HAL_SPI_Init+0x9e>
 800a3c2:	21f9      	movs	r1, #249	; 0xf9
 800a3c4:	4828      	ldr	r0, [pc, #160]	; (800a468 <HAL_SPI_Init+0x13c>)
 800a3c6:	f00a ff70 	bl	80152aa <assert_failed>
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	4a24      	ldr	r2, [pc, #144]	; (800a460 <HAL_SPI_Init+0x134>)
 800a3d0:	4293      	cmp	r3, r2
 800a3d2:	d004      	beq.n	800a3de <HAL_SPI_Init+0xb2>
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	4a22      	ldr	r2, [pc, #136]	; (800a464 <HAL_SPI_Init+0x138>)
 800a3da:	4293      	cmp	r3, r2
 800a3dc:	d146      	bne.n	800a46c <HAL_SPI_Init+0x140>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	68db      	ldr	r3, [r3, #12]
 800a3e2:	2b0f      	cmp	r3, #15
 800a3e4:	d007      	beq.n	800a3f6 <HAL_SPI_Init+0xca>
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	68db      	ldr	r3, [r3, #12]
 800a3ea:	2b07      	cmp	r3, #7
 800a3ec:	d003      	beq.n	800a3f6 <HAL_SPI_Init+0xca>
 800a3ee:	21fc      	movs	r1, #252	; 0xfc
 800a3f0:	481d      	ldr	r0, [pc, #116]	; (800a468 <HAL_SPI_Init+0x13c>)
 800a3f2:	f00a ff5a 	bl	80152aa <assert_failed>
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	f000 8101 	beq.w	800a602 <HAL_SPI_Init+0x2d6>
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a404:	2b20      	cmp	r3, #32
 800a406:	f000 80fc 	beq.w	800a602 <HAL_SPI_Init+0x2d6>
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a40e:	2b40      	cmp	r3, #64	; 0x40
 800a410:	f000 80f7 	beq.w	800a602 <HAL_SPI_Init+0x2d6>
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a418:	2b60      	cmp	r3, #96	; 0x60
 800a41a:	f000 80f2 	beq.w	800a602 <HAL_SPI_Init+0x2d6>
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a422:	2b80      	cmp	r3, #128	; 0x80
 800a424:	f000 80ed 	beq.w	800a602 <HAL_SPI_Init+0x2d6>
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a42c:	2ba0      	cmp	r3, #160	; 0xa0
 800a42e:	f000 80e8 	beq.w	800a602 <HAL_SPI_Init+0x2d6>
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a436:	2bc0      	cmp	r3, #192	; 0xc0
 800a438:	f000 80e3 	beq.w	800a602 <HAL_SPI_Init+0x2d6>
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a440:	2be0      	cmp	r3, #224	; 0xe0
 800a442:	f000 80de 	beq.w	800a602 <HAL_SPI_Init+0x2d6>
 800a446:	21fd      	movs	r1, #253	; 0xfd
 800a448:	4807      	ldr	r0, [pc, #28]	; (800a468 <HAL_SPI_Init+0x13c>)
 800a44a:	f00a ff2e 	bl	80152aa <assert_failed>
 800a44e:	e0d8      	b.n	800a602 <HAL_SPI_Init+0x2d6>
 800a450:	40013000 	.word	0x40013000
 800a454:	50013000 	.word	0x50013000
 800a458:	40003800 	.word	0x40003800
 800a45c:	50003800 	.word	0x50003800
 800a460:	46002000 	.word	0x46002000
 800a464:	56002000 	.word	0x56002000
 800a468:	08025d28 	.word	0x08025d28
  }
  else
  {
    assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	68db      	ldr	r3, [r3, #12]
 800a470:	2b1f      	cmp	r3, #31
 800a472:	d078      	beq.n	800a566 <HAL_SPI_Init+0x23a>
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	68db      	ldr	r3, [r3, #12]
 800a478:	2b1e      	cmp	r3, #30
 800a47a:	d074      	beq.n	800a566 <HAL_SPI_Init+0x23a>
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	68db      	ldr	r3, [r3, #12]
 800a480:	2b1d      	cmp	r3, #29
 800a482:	d070      	beq.n	800a566 <HAL_SPI_Init+0x23a>
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	68db      	ldr	r3, [r3, #12]
 800a488:	2b1c      	cmp	r3, #28
 800a48a:	d06c      	beq.n	800a566 <HAL_SPI_Init+0x23a>
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	68db      	ldr	r3, [r3, #12]
 800a490:	2b1b      	cmp	r3, #27
 800a492:	d068      	beq.n	800a566 <HAL_SPI_Init+0x23a>
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	68db      	ldr	r3, [r3, #12]
 800a498:	2b1a      	cmp	r3, #26
 800a49a:	d064      	beq.n	800a566 <HAL_SPI_Init+0x23a>
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	68db      	ldr	r3, [r3, #12]
 800a4a0:	2b19      	cmp	r3, #25
 800a4a2:	d060      	beq.n	800a566 <HAL_SPI_Init+0x23a>
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	68db      	ldr	r3, [r3, #12]
 800a4a8:	2b18      	cmp	r3, #24
 800a4aa:	d05c      	beq.n	800a566 <HAL_SPI_Init+0x23a>
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	68db      	ldr	r3, [r3, #12]
 800a4b0:	2b17      	cmp	r3, #23
 800a4b2:	d058      	beq.n	800a566 <HAL_SPI_Init+0x23a>
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	68db      	ldr	r3, [r3, #12]
 800a4b8:	2b16      	cmp	r3, #22
 800a4ba:	d054      	beq.n	800a566 <HAL_SPI_Init+0x23a>
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	68db      	ldr	r3, [r3, #12]
 800a4c0:	2b15      	cmp	r3, #21
 800a4c2:	d050      	beq.n	800a566 <HAL_SPI_Init+0x23a>
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	68db      	ldr	r3, [r3, #12]
 800a4c8:	2b14      	cmp	r3, #20
 800a4ca:	d04c      	beq.n	800a566 <HAL_SPI_Init+0x23a>
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	68db      	ldr	r3, [r3, #12]
 800a4d0:	2b13      	cmp	r3, #19
 800a4d2:	d048      	beq.n	800a566 <HAL_SPI_Init+0x23a>
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	68db      	ldr	r3, [r3, #12]
 800a4d8:	2b15      	cmp	r3, #21
 800a4da:	d044      	beq.n	800a566 <HAL_SPI_Init+0x23a>
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	68db      	ldr	r3, [r3, #12]
 800a4e0:	2b12      	cmp	r3, #18
 800a4e2:	d040      	beq.n	800a566 <HAL_SPI_Init+0x23a>
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	68db      	ldr	r3, [r3, #12]
 800a4e8:	2b11      	cmp	r3, #17
 800a4ea:	d03c      	beq.n	800a566 <HAL_SPI_Init+0x23a>
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	68db      	ldr	r3, [r3, #12]
 800a4f0:	2b10      	cmp	r3, #16
 800a4f2:	d038      	beq.n	800a566 <HAL_SPI_Init+0x23a>
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	68db      	ldr	r3, [r3, #12]
 800a4f8:	2b0f      	cmp	r3, #15
 800a4fa:	d034      	beq.n	800a566 <HAL_SPI_Init+0x23a>
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	68db      	ldr	r3, [r3, #12]
 800a500:	2b0e      	cmp	r3, #14
 800a502:	d030      	beq.n	800a566 <HAL_SPI_Init+0x23a>
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	68db      	ldr	r3, [r3, #12]
 800a508:	2b0d      	cmp	r3, #13
 800a50a:	d02c      	beq.n	800a566 <HAL_SPI_Init+0x23a>
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	68db      	ldr	r3, [r3, #12]
 800a510:	2b0c      	cmp	r3, #12
 800a512:	d028      	beq.n	800a566 <HAL_SPI_Init+0x23a>
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	68db      	ldr	r3, [r3, #12]
 800a518:	2b0b      	cmp	r3, #11
 800a51a:	d024      	beq.n	800a566 <HAL_SPI_Init+0x23a>
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	68db      	ldr	r3, [r3, #12]
 800a520:	2b0a      	cmp	r3, #10
 800a522:	d020      	beq.n	800a566 <HAL_SPI_Init+0x23a>
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	68db      	ldr	r3, [r3, #12]
 800a528:	2b09      	cmp	r3, #9
 800a52a:	d01c      	beq.n	800a566 <HAL_SPI_Init+0x23a>
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	68db      	ldr	r3, [r3, #12]
 800a530:	2b08      	cmp	r3, #8
 800a532:	d018      	beq.n	800a566 <HAL_SPI_Init+0x23a>
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	68db      	ldr	r3, [r3, #12]
 800a538:	2b07      	cmp	r3, #7
 800a53a:	d014      	beq.n	800a566 <HAL_SPI_Init+0x23a>
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	68db      	ldr	r3, [r3, #12]
 800a540:	2b06      	cmp	r3, #6
 800a542:	d010      	beq.n	800a566 <HAL_SPI_Init+0x23a>
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	68db      	ldr	r3, [r3, #12]
 800a548:	2b05      	cmp	r3, #5
 800a54a:	d00c      	beq.n	800a566 <HAL_SPI_Init+0x23a>
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	68db      	ldr	r3, [r3, #12]
 800a550:	2b04      	cmp	r3, #4
 800a552:	d008      	beq.n	800a566 <HAL_SPI_Init+0x23a>
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	68db      	ldr	r3, [r3, #12]
 800a558:	2b03      	cmp	r3, #3
 800a55a:	d004      	beq.n	800a566 <HAL_SPI_Init+0x23a>
 800a55c:	f240 1101 	movw	r1, #257	; 0x101
 800a560:	4884      	ldr	r0, [pc, #528]	; (800a774 <HAL_SPI_Init+0x448>)
 800a562:	f00a fea2 	bl	80152aa <assert_failed>
    assert_param(IS_SPI_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d04a      	beq.n	800a604 <HAL_SPI_Init+0x2d8>
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a572:	2b20      	cmp	r3, #32
 800a574:	d046      	beq.n	800a604 <HAL_SPI_Init+0x2d8>
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a57a:	2b40      	cmp	r3, #64	; 0x40
 800a57c:	d042      	beq.n	800a604 <HAL_SPI_Init+0x2d8>
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a582:	2b60      	cmp	r3, #96	; 0x60
 800a584:	d03e      	beq.n	800a604 <HAL_SPI_Init+0x2d8>
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a58a:	2b80      	cmp	r3, #128	; 0x80
 800a58c:	d03a      	beq.n	800a604 <HAL_SPI_Init+0x2d8>
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a592:	2ba0      	cmp	r3, #160	; 0xa0
 800a594:	d036      	beq.n	800a604 <HAL_SPI_Init+0x2d8>
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a59a:	2bc0      	cmp	r3, #192	; 0xc0
 800a59c:	d032      	beq.n	800a604 <HAL_SPI_Init+0x2d8>
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5a2:	2be0      	cmp	r3, #224	; 0xe0
 800a5a4:	d02e      	beq.n	800a604 <HAL_SPI_Init+0x2d8>
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a5ae:	d029      	beq.n	800a604 <HAL_SPI_Init+0x2d8>
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5b4:	f5b3 7f90 	cmp.w	r3, #288	; 0x120
 800a5b8:	d024      	beq.n	800a604 <HAL_SPI_Init+0x2d8>
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5be:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800a5c2:	d01f      	beq.n	800a604 <HAL_SPI_Init+0x2d8>
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5c8:	f5b3 7fb0 	cmp.w	r3, #352	; 0x160
 800a5cc:	d01a      	beq.n	800a604 <HAL_SPI_Init+0x2d8>
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5d2:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 800a5d6:	d015      	beq.n	800a604 <HAL_SPI_Init+0x2d8>
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5dc:	f5b3 7fd0 	cmp.w	r3, #416	; 0x1a0
 800a5e0:	d010      	beq.n	800a604 <HAL_SPI_Init+0x2d8>
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5e6:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 800a5ea:	d00b      	beq.n	800a604 <HAL_SPI_Init+0x2d8>
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5f0:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 800a5f4:	d006      	beq.n	800a604 <HAL_SPI_Init+0x2d8>
 800a5f6:	f44f 7181 	mov.w	r1, #258	; 0x102
 800a5fa:	485e      	ldr	r0, [pc, #376]	; (800a774 <HAL_SPI_Init+0x448>)
 800a5fc:	f00a fe55 	bl	80152aa <assert_failed>
 800a600:	e000      	b.n	800a604 <HAL_SPI_Init+0x2d8>
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 800a602:	bf00      	nop
  }
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	699b      	ldr	r3, [r3, #24]
 800a608:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a60c:	d00d      	beq.n	800a62a <HAL_SPI_Init+0x2fe>
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	699b      	ldr	r3, [r3, #24]
 800a612:	2b00      	cmp	r3, #0
 800a614:	d009      	beq.n	800a62a <HAL_SPI_Init+0x2fe>
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	699b      	ldr	r3, [r3, #24]
 800a61a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a61e:	d004      	beq.n	800a62a <HAL_SPI_Init+0x2fe>
 800a620:	f44f 7182 	mov.w	r1, #260	; 0x104
 800a624:	4853      	ldr	r0, [pc, #332]	; (800a774 <HAL_SPI_Init+0x448>)
 800a626:	f00a fe40 	bl	80152aa <assert_failed>
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a62e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a632:	d008      	beq.n	800a646 <HAL_SPI_Init+0x31a>
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d004      	beq.n	800a646 <HAL_SPI_Init+0x31a>
 800a63c:	f240 1105 	movw	r1, #261	; 0x105
 800a640:	484c      	ldr	r0, [pc, #304]	; (800a774 <HAL_SPI_Init+0x448>)
 800a642:	f00a fe32 	bl	80152aa <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	69db      	ldr	r3, [r3, #28]
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d027      	beq.n	800a69e <HAL_SPI_Init+0x372>
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	69db      	ldr	r3, [r3, #28]
 800a652:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a656:	d022      	beq.n	800a69e <HAL_SPI_Init+0x372>
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	69db      	ldr	r3, [r3, #28]
 800a65c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a660:	d01d      	beq.n	800a69e <HAL_SPI_Init+0x372>
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	69db      	ldr	r3, [r3, #28]
 800a666:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a66a:	d018      	beq.n	800a69e <HAL_SPI_Init+0x372>
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	69db      	ldr	r3, [r3, #28]
 800a670:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a674:	d013      	beq.n	800a69e <HAL_SPI_Init+0x372>
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	69db      	ldr	r3, [r3, #28]
 800a67a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a67e:	d00e      	beq.n	800a69e <HAL_SPI_Init+0x372>
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	69db      	ldr	r3, [r3, #28]
 800a684:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800a688:	d009      	beq.n	800a69e <HAL_SPI_Init+0x372>
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	69db      	ldr	r3, [r3, #28]
 800a68e:	f1b3 4fe0 	cmp.w	r3, #1879048192	; 0x70000000
 800a692:	d004      	beq.n	800a69e <HAL_SPI_Init+0x372>
 800a694:	f44f 7183 	mov.w	r1, #262	; 0x106
 800a698:	4836      	ldr	r0, [pc, #216]	; (800a774 <HAL_SPI_Init+0x448>)
 800a69a:	f00a fe06 	bl	80152aa <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	6a1b      	ldr	r3, [r3, #32]
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d009      	beq.n	800a6ba <HAL_SPI_Init+0x38e>
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	6a1b      	ldr	r3, [r3, #32]
 800a6aa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a6ae:	d004      	beq.n	800a6ba <HAL_SPI_Init+0x38e>
 800a6b0:	f240 1107 	movw	r1, #263	; 0x107
 800a6b4:	482f      	ldr	r0, [pc, #188]	; (800a774 <HAL_SPI_Init+0x448>)
 800a6b6:	f00a fdf8 	bl	80152aa <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d009      	beq.n	800a6d6 <HAL_SPI_Init+0x3aa>
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6c6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800a6ca:	d004      	beq.n	800a6d6 <HAL_SPI_Init+0x3aa>
 800a6cc:	f44f 7184 	mov.w	r1, #264	; 0x108
 800a6d0:	4828      	ldr	r0, [pc, #160]	; (800a774 <HAL_SPI_Init+0x448>)
 800a6d2:	f00a fdea 	bl	80152aa <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d11b      	bne.n	800a716 <HAL_SPI_Init+0x3ea>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	691b      	ldr	r3, [r3, #16]
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d009      	beq.n	800a6fa <HAL_SPI_Init+0x3ce>
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	691b      	ldr	r3, [r3, #16]
 800a6ea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a6ee:	d004      	beq.n	800a6fa <HAL_SPI_Init+0x3ce>
 800a6f0:	f240 110b 	movw	r1, #267	; 0x10b
 800a6f4:	481f      	ldr	r0, [pc, #124]	; (800a774 <HAL_SPI_Init+0x448>)
 800a6f6:	f00a fdd8 	bl	80152aa <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	695b      	ldr	r3, [r3, #20]
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d009      	beq.n	800a716 <HAL_SPI_Init+0x3ea>
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	695b      	ldr	r3, [r3, #20]
 800a706:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a70a:	d004      	beq.n	800a716 <HAL_SPI_Init+0x3ea>
 800a70c:	f44f 7186 	mov.w	r1, #268	; 0x10c
 800a710:	4818      	ldr	r0, [pc, #96]	; (800a774 <HAL_SPI_Init+0x448>)
 800a712:	f00a fdca 	bl	80152aa <assert_failed>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	2200      	movs	r2, #0
 800a71a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a720:	2b00      	cmp	r3, #0
 800a722:	d009      	beq.n	800a738 <HAL_SPI_Init+0x40c>
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a728:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a72c:	d004      	beq.n	800a738 <HAL_SPI_Init+0x40c>
 800a72e:	f44f 7191 	mov.w	r1, #290	; 0x122
 800a732:	4810      	ldr	r0, [pc, #64]	; (800a774 <HAL_SPI_Init+0x448>)
 800a734:	f00a fdb9 	bl	80152aa <assert_failed>
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d009      	beq.n	800a754 <HAL_SPI_Init+0x428>
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a744:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a748:	d004      	beq.n	800a754 <HAL_SPI_Init+0x428>
 800a74a:	f240 1123 	movw	r1, #291	; 0x123
 800a74e:	4809      	ldr	r0, [pc, #36]	; (800a774 <HAL_SPI_Init+0x448>)
 800a750:	f00a fdab 	bl	80152aa <assert_failed>

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	4a07      	ldr	r2, [pc, #28]	; (800a778 <HAL_SPI_Init+0x44c>)
 800a75a:	4293      	cmp	r3, r2
 800a75c:	d004      	beq.n	800a768 <HAL_SPI_Init+0x43c>
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	4a06      	ldr	r2, [pc, #24]	; (800a77c <HAL_SPI_Init+0x450>)
 800a764:	4293      	cmp	r3, r2
 800a766:	d10b      	bne.n	800a780 <HAL_SPI_Init+0x454>
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	68db      	ldr	r3, [r3, #12]
 800a76c:	2b0f      	cmp	r3, #15
 800a76e:	d907      	bls.n	800a780 <HAL_SPI_Init+0x454>
  {
    return HAL_ERROR;
 800a770:	2301      	movs	r3, #1
 800a772:	e0f0      	b.n	800a956 <HAL_SPI_Init+0x62a>
 800a774:	08025d28 	.word	0x08025d28
 800a778:	46002000 	.word	0x46002000
 800a77c:	56002000 	.word	0x56002000
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800a780:	6878      	ldr	r0, [r7, #4]
 800a782:	f001 fe80 	bl	800c486 <SPI_GetPacketSize>
 800a786:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	4a74      	ldr	r2, [pc, #464]	; (800a960 <HAL_SPI_Init+0x634>)
 800a78e:	4293      	cmp	r3, r2
 800a790:	d004      	beq.n	800a79c <HAL_SPI_Init+0x470>
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	4a73      	ldr	r2, [pc, #460]	; (800a964 <HAL_SPI_Init+0x638>)
 800a798:	4293      	cmp	r3, r2
 800a79a:	d102      	bne.n	800a7a2 <HAL_SPI_Init+0x476>
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	2b08      	cmp	r3, #8
 800a7a0:	d816      	bhi.n	800a7d0 <HAL_SPI_Init+0x4a4>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a7a6:	4a70      	ldr	r2, [pc, #448]	; (800a968 <HAL_SPI_Init+0x63c>)
 800a7a8:	4293      	cmp	r3, r2
 800a7aa:	d00e      	beq.n	800a7ca <HAL_SPI_Init+0x49e>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	4a6e      	ldr	r2, [pc, #440]	; (800a96c <HAL_SPI_Init+0x640>)
 800a7b2:	4293      	cmp	r3, r2
 800a7b4:	d009      	beq.n	800a7ca <HAL_SPI_Init+0x49e>
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	4a6d      	ldr	r2, [pc, #436]	; (800a970 <HAL_SPI_Init+0x644>)
 800a7bc:	4293      	cmp	r3, r2
 800a7be:	d004      	beq.n	800a7ca <HAL_SPI_Init+0x49e>
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	4a6b      	ldr	r2, [pc, #428]	; (800a974 <HAL_SPI_Init+0x648>)
 800a7c6:	4293      	cmp	r3, r2
 800a7c8:	d104      	bne.n	800a7d4 <HAL_SPI_Init+0x4a8>
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	2b10      	cmp	r3, #16
 800a7ce:	d901      	bls.n	800a7d4 <HAL_SPI_Init+0x4a8>
  {
    return HAL_ERROR;
 800a7d0:	2301      	movs	r3, #1
 800a7d2:	e0c0      	b.n	800a956 <HAL_SPI_Init+0x62a>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800a7da:	b2db      	uxtb	r3, r3
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d131      	bne.n	800a844 <HAL_SPI_Init+0x518>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	2200      	movs	r2, #0
 800a7e4:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    /* Init the SPI Callback settings */
    hspi->TxCpltCallback       = HAL_SPI_TxCpltCallback;       /* Legacy weak TxCpltCallback       */
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	4a63      	ldr	r2, [pc, #396]	; (800a978 <HAL_SPI_Init+0x64c>)
 800a7ec:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    hspi->RxCpltCallback       = HAL_SPI_RxCpltCallback;       /* Legacy weak RxCpltCallback       */
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	4a62      	ldr	r2, [pc, #392]	; (800a97c <HAL_SPI_Init+0x650>)
 800a7f4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    hspi->TxRxCpltCallback     = HAL_SPI_TxRxCpltCallback;     /* Legacy weak TxRxCpltCallback     */
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	4a61      	ldr	r2, [pc, #388]	; (800a980 <HAL_SPI_Init+0x654>)
 800a7fc:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    hspi->TxHalfCpltCallback   = HAL_SPI_TxHalfCpltCallback;   /* Legacy weak TxHalfCpltCallback   */
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	4a60      	ldr	r2, [pc, #384]	; (800a984 <HAL_SPI_Init+0x658>)
 800a804:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    hspi->RxHalfCpltCallback   = HAL_SPI_RxHalfCpltCallback;   /* Legacy weak RxHalfCpltCallback   */
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	4a5f      	ldr	r2, [pc, #380]	; (800a988 <HAL_SPI_Init+0x65c>)
 800a80c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    hspi->TxRxHalfCpltCallback = HAL_SPI_TxRxHalfCpltCallback; /* Legacy weak TxRxHalfCpltCallback */
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	4a5e      	ldr	r2, [pc, #376]	; (800a98c <HAL_SPI_Init+0x660>)
 800a814:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    hspi->ErrorCallback        = HAL_SPI_ErrorCallback;        /* Legacy weak ErrorCallback        */
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	4a5d      	ldr	r2, [pc, #372]	; (800a990 <HAL_SPI_Init+0x664>)
 800a81c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    hspi->AbortCpltCallback    = HAL_SPI_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	4a5c      	ldr	r2, [pc, #368]	; (800a994 <HAL_SPI_Init+0x668>)
 800a824:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac

    if (hspi->MspInitCallback == NULL)
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d103      	bne.n	800a83a <HAL_SPI_Init+0x50e>
    {
      hspi->MspInitCallback = HAL_SPI_MspInit; /* Legacy weak MspInit  */
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	4a58      	ldr	r2, [pc, #352]	; (800a998 <HAL_SPI_Init+0x66c>)
 800a836:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    }

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a840:	6878      	ldr	r0, [r7, #4]
 800a842:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	2202      	movs	r2, #2
 800a848:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	681a      	ldr	r2, [r3, #0]
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	f022 0201 	bic.w	r2, r2, #1
 800a85a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	689b      	ldr	r3, [r3, #8]
 800a862:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800a866:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	699b      	ldr	r3, [r3, #24]
 800a86c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a870:	d119      	bne.n	800a8a6 <HAL_SPI_Init+0x57a>
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	685b      	ldr	r3, [r3, #4]
 800a876:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a87a:	d103      	bne.n	800a884 <HAL_SPI_Init+0x558>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a880:	2b00      	cmp	r3, #0
 800a882:	d008      	beq.n	800a896 <HAL_SPI_Init+0x56a>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d10c      	bne.n	800a8a6 <HAL_SPI_Init+0x57a>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800a890:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a894:	d107      	bne.n	800a8a6 <HAL_SPI_Init+0x57a>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	681a      	ldr	r2, [r3, #0]
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a8a4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	69da      	ldr	r2, [r3, #28]
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8ae:	431a      	orrs	r2, r3
 800a8b0:	68bb      	ldr	r3, [r7, #8]
 800a8b2:	431a      	orrs	r2, r3
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a8b8:	ea42 0103 	orr.w	r1, r2, r3
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	68da      	ldr	r2, [r3, #12]
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	430a      	orrs	r2, r1
 800a8c6:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8d0:	431a      	orrs	r2, r3
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8d6:	431a      	orrs	r2, r3
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	699b      	ldr	r3, [r3, #24]
 800a8dc:	431a      	orrs	r2, r3
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	691b      	ldr	r3, [r3, #16]
 800a8e2:	431a      	orrs	r2, r3
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	695b      	ldr	r3, [r3, #20]
 800a8e8:	431a      	orrs	r2, r3
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	6a1b      	ldr	r3, [r3, #32]
 800a8ee:	431a      	orrs	r2, r3
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	685b      	ldr	r3, [r3, #4]
 800a8f4:	431a      	orrs	r2, r3
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a8fa:	431a      	orrs	r2, r3
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	689b      	ldr	r3, [r3, #8]
 800a900:	431a      	orrs	r2, r3
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a906:	431a      	orrs	r2, r3
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a90c:	431a      	orrs	r2, r3
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a912:	ea42 0103 	orr.w	r1, r2, r3
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	430a      	orrs	r2, r1
 800a920:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	685b      	ldr	r3, [r3, #4]
 800a926:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d00a      	beq.n	800a944 <HAL_SPI_Init+0x618>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	68db      	ldr	r3, [r3, #12]
 800a934:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	430a      	orrs	r2, r1
 800a942:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	2200      	movs	r2, #0
 800a948:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	2201      	movs	r2, #1
 800a950:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  return HAL_OK;
 800a954:	2300      	movs	r3, #0
}
 800a956:	4618      	mov	r0, r3
 800a958:	3710      	adds	r7, #16
 800a95a:	46bd      	mov	sp, r7
 800a95c:	bd80      	pop	{r7, pc}
 800a95e:	bf00      	nop
 800a960:	46002000 	.word	0x46002000
 800a964:	56002000 	.word	0x56002000
 800a968:	40013000 	.word	0x40013000
 800a96c:	50013000 	.word	0x50013000
 800a970:	40003800 	.word	0x40003800
 800a974:	50003800 	.word	0x50003800
 800a978:	0800c065 	.word	0x0800c065
 800a97c:	0800c079 	.word	0x0800c079
 800a980:	0800c08d 	.word	0x0800c08d
 800a984:	0800c0a1 	.word	0x0800c0a1
 800a988:	0800c0b5 	.word	0x0800c0b5
 800a98c:	0800c0c9 	.word	0x0800c0c9
 800a990:	0800c0dd 	.word	0x0800c0dd
 800a994:	0800c0f1 	.word	0x0800c0f1
 800a998:	0801770d 	.word	0x0801770d

0800a99c <HAL_SPI_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_RegisterCallback(SPI_HandleTypeDef *hspi, HAL_SPI_CallbackIDTypeDef CallbackID,
                                           pSPI_CallbackTypeDef pCallback)
{
 800a99c:	b480      	push	{r7}
 800a99e:	b087      	sub	sp, #28
 800a9a0:	af00      	add	r7, sp, #0
 800a9a2:	60f8      	str	r0, [r7, #12]
 800a9a4:	460b      	mov	r3, r1
 800a9a6:	607a      	str	r2, [r7, #4]
 800a9a8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800a9aa:	2300      	movs	r3, #0
 800a9ac:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d109      	bne.n	800a9c8 <HAL_SPI_RegisterCallback+0x2c>
  {
    /* Update the error code */
    hspi->ErrorCode |= HAL_SPI_ERROR_INVALID_CALLBACK;
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a9ba:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_ERROR;
 800a9c4:	2301      	movs	r3, #1
 800a9c6:	e098      	b.n	800aafa <HAL_SPI_RegisterCallback+0x15e>
  }
  /* Lock the process */
  __HAL_LOCK(hspi);
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800a9ce:	2b01      	cmp	r3, #1
 800a9d0:	d101      	bne.n	800a9d6 <HAL_SPI_RegisterCallback+0x3a>
 800a9d2:	2302      	movs	r3, #2
 800a9d4:	e091      	b.n	800aafa <HAL_SPI_RegisterCallback+0x15e>
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	2201      	movs	r2, #1
 800a9da:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  if (HAL_SPI_STATE_READY == hspi->State)
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800a9e4:	b2db      	uxtb	r3, r3
 800a9e6:	2b01      	cmp	r3, #1
 800a9e8:	d157      	bne.n	800aa9a <HAL_SPI_RegisterCallback+0xfe>
  {
    switch (CallbackID)
 800a9ea:	7afb      	ldrb	r3, [r7, #11]
 800a9ec:	2b09      	cmp	r3, #9
 800a9ee:	d849      	bhi.n	800aa84 <HAL_SPI_RegisterCallback+0xe8>
 800a9f0:	a201      	add	r2, pc, #4	; (adr r2, 800a9f8 <HAL_SPI_RegisterCallback+0x5c>)
 800a9f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9f6:	bf00      	nop
 800a9f8:	0800aa21 	.word	0x0800aa21
 800a9fc:	0800aa2b 	.word	0x0800aa2b
 800aa00:	0800aa35 	.word	0x0800aa35
 800aa04:	0800aa3f 	.word	0x0800aa3f
 800aa08:	0800aa49 	.word	0x0800aa49
 800aa0c:	0800aa53 	.word	0x0800aa53
 800aa10:	0800aa5d 	.word	0x0800aa5d
 800aa14:	0800aa67 	.word	0x0800aa67
 800aa18:	0800aa71 	.word	0x0800aa71
 800aa1c:	0800aa7b 	.word	0x0800aa7b
    {
      case HAL_SPI_TX_COMPLETE_CB_ID :
        hspi->TxCpltCallback = pCallback;
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	687a      	ldr	r2, [r7, #4]
 800aa24:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        break;
 800aa28:	e062      	b.n	800aaf0 <HAL_SPI_RegisterCallback+0x154>

      case HAL_SPI_RX_COMPLETE_CB_ID :
        hspi->RxCpltCallback = pCallback;
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	687a      	ldr	r2, [r7, #4]
 800aa2e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        break;
 800aa32:	e05d      	b.n	800aaf0 <HAL_SPI_RegisterCallback+0x154>

      case HAL_SPI_TX_RX_COMPLETE_CB_ID :
        hspi->TxRxCpltCallback = pCallback;
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	687a      	ldr	r2, [r7, #4]
 800aa38:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        break;
 800aa3c:	e058      	b.n	800aaf0 <HAL_SPI_RegisterCallback+0x154>

      case HAL_SPI_TX_HALF_COMPLETE_CB_ID :
        hspi->TxHalfCpltCallback = pCallback;
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	687a      	ldr	r2, [r7, #4]
 800aa42:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        break;
 800aa46:	e053      	b.n	800aaf0 <HAL_SPI_RegisterCallback+0x154>

      case HAL_SPI_RX_HALF_COMPLETE_CB_ID :
        hspi->RxHalfCpltCallback = pCallback;
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	687a      	ldr	r2, [r7, #4]
 800aa4c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        break;
 800aa50:	e04e      	b.n	800aaf0 <HAL_SPI_RegisterCallback+0x154>

      case HAL_SPI_TX_RX_HALF_COMPLETE_CB_ID :
        hspi->TxRxHalfCpltCallback = pCallback;
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	687a      	ldr	r2, [r7, #4]
 800aa56:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        break;
 800aa5a:	e049      	b.n	800aaf0 <HAL_SPI_RegisterCallback+0x154>

      case HAL_SPI_ERROR_CB_ID :
        hspi->ErrorCallback = pCallback;
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	687a      	ldr	r2, [r7, #4]
 800aa60:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
        break;
 800aa64:	e044      	b.n	800aaf0 <HAL_SPI_RegisterCallback+0x154>

      case HAL_SPI_ABORT_CB_ID :
        hspi->AbortCpltCallback = pCallback;
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	687a      	ldr	r2, [r7, #4]
 800aa6a:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
        break;
 800aa6e:	e03f      	b.n	800aaf0 <HAL_SPI_RegisterCallback+0x154>

      case HAL_SPI_MSPINIT_CB_ID :
        hspi->MspInitCallback = pCallback;
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	687a      	ldr	r2, [r7, #4]
 800aa74:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
        break;
 800aa78:	e03a      	b.n	800aaf0 <HAL_SPI_RegisterCallback+0x154>

      case HAL_SPI_MSPDEINIT_CB_ID :
        hspi->MspDeInitCallback = pCallback;
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	687a      	ldr	r2, [r7, #4]
 800aa7e:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
        break;
 800aa82:	e035      	b.n	800aaf0 <HAL_SPI_RegisterCallback+0x154>

      default :
        /* Update the error code */
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_INVALID_CALLBACK);
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aa8a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Return error status */
        status =  HAL_ERROR;
 800aa94:	2301      	movs	r3, #1
 800aa96:	75fb      	strb	r3, [r7, #23]
        break;
 800aa98:	e02a      	b.n	800aaf0 <HAL_SPI_RegisterCallback+0x154>
    }
  }
  else if (HAL_SPI_STATE_RESET == hspi->State)
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800aaa0:	b2db      	uxtb	r3, r3
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d11a      	bne.n	800aadc <HAL_SPI_RegisterCallback+0x140>
  {
    switch (CallbackID)
 800aaa6:	7afb      	ldrb	r3, [r7, #11]
 800aaa8:	2b08      	cmp	r3, #8
 800aaaa:	d002      	beq.n	800aab2 <HAL_SPI_RegisterCallback+0x116>
 800aaac:	2b09      	cmp	r3, #9
 800aaae:	d005      	beq.n	800aabc <HAL_SPI_RegisterCallback+0x120>
 800aab0:	e009      	b.n	800aac6 <HAL_SPI_RegisterCallback+0x12a>
    {
      case HAL_SPI_MSPINIT_CB_ID :
        hspi->MspInitCallback = pCallback;
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	687a      	ldr	r2, [r7, #4]
 800aab6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
        break;
 800aaba:	e019      	b.n	800aaf0 <HAL_SPI_RegisterCallback+0x154>

      case HAL_SPI_MSPDEINIT_CB_ID :
        hspi->MspDeInitCallback = pCallback;
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	687a      	ldr	r2, [r7, #4]
 800aac0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
        break;
 800aac4:	e014      	b.n	800aaf0 <HAL_SPI_RegisterCallback+0x154>

      default :
        /* Update the error code */
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_INVALID_CALLBACK);
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aacc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Return error status */
        status =  HAL_ERROR;
 800aad6:	2301      	movs	r3, #1
 800aad8:	75fb      	strb	r3, [r7, #23]
        break;
 800aada:	e009      	b.n	800aaf0 <HAL_SPI_RegisterCallback+0x154>
    }
  }
  else
  {
    /* Update the error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_INVALID_CALLBACK);
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aae2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* Return error status */
    status =  HAL_ERROR;
 800aaec:	2301      	movs	r3, #1
 800aaee:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	2200      	movs	r2, #0
 800aaf4:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
  return status;
 800aaf8:	7dfb      	ldrb	r3, [r7, #23]
}
 800aafa:	4618      	mov	r0, r3
 800aafc:	371c      	adds	r7, #28
 800aafe:	46bd      	mov	sp, r7
 800ab00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab04:	4770      	bx	lr
 800ab06:	bf00      	nop

0800ab08 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ab08:	b580      	push	{r7, lr}
 800ab0a:	b08a      	sub	sp, #40	; 0x28
 800ab0c:	af02      	add	r7, sp, #8
 800ab0e:	60f8      	str	r0, [r7, #12]
 800ab10:	60b9      	str	r1, [r7, #8]
 800ab12:	603b      	str	r3, [r7, #0]
 800ab14:	4613      	mov	r3, r2
 800ab16:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	3320      	adds	r3, #32
 800ab1e:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ab20:	2300      	movs	r3, #0
 800ab22:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	689b      	ldr	r3, [r3, #8]
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d00e      	beq.n	800ab4a <HAL_SPI_Transmit+0x42>
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	689b      	ldr	r3, [r3, #8]
 800ab30:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800ab34:	d009      	beq.n	800ab4a <HAL_SPI_Transmit+0x42>
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	689b      	ldr	r3, [r3, #8]
 800ab3a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ab3e:	d004      	beq.n	800ab4a <HAL_SPI_Transmit+0x42>
 800ab40:	f240 3131 	movw	r1, #817	; 0x331
 800ab44:	4891      	ldr	r0, [pc, #580]	; (800ad8c <HAL_SPI_Transmit+0x284>)
 800ab46:	f00a fbb0 	bl	80152aa <assert_failed>

  /* Lock the process */
  __HAL_LOCK(hspi);
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800ab50:	2b01      	cmp	r3, #1
 800ab52:	d101      	bne.n	800ab58 <HAL_SPI_Transmit+0x50>
 800ab54:	2302      	movs	r3, #2
 800ab56:	e1f9      	b.n	800af4c <HAL_SPI_Transmit+0x444>
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	2201      	movs	r2, #1
 800ab5c:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ab60:	f7f8 f8b2 	bl	8002cc8 <HAL_GetTick>
 800ab64:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800ab6c:	b2db      	uxtb	r3, r3
 800ab6e:	2b01      	cmp	r3, #1
 800ab70:	d007      	beq.n	800ab82 <HAL_SPI_Transmit+0x7a>
  {
    errorcode = HAL_BUSY;
 800ab72:	2302      	movs	r3, #2
 800ab74:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	2200      	movs	r2, #0
 800ab7a:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 800ab7e:	7efb      	ldrb	r3, [r7, #27]
 800ab80:	e1e4      	b.n	800af4c <HAL_SPI_Transmit+0x444>
  }

  if ((pData == NULL) || (Size == 0UL))
 800ab82:	68bb      	ldr	r3, [r7, #8]
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d002      	beq.n	800ab8e <HAL_SPI_Transmit+0x86>
 800ab88:	88fb      	ldrh	r3, [r7, #6]
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d107      	bne.n	800ab9e <HAL_SPI_Transmit+0x96>
  {
    errorcode = HAL_ERROR;
 800ab8e:	2301      	movs	r3, #1
 800ab90:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	2200      	movs	r2, #0
 800ab96:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 800ab9a:	7efb      	ldrb	r3, [r7, #27]
 800ab9c:	e1d6      	b.n	800af4c <HAL_SPI_Transmit+0x444>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	2203      	movs	r2, #3
 800aba2:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	2200      	movs	r2, #0
 800abaa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	68ba      	ldr	r2, [r7, #8]
 800abb2:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->TxXferSize  = Size;
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	88fa      	ldrh	r2, [r7, #6]
 800abb8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->TxXferCount = Size;
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	88fa      	ldrh	r2, [r7, #6]
 800abc0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	2200      	movs	r2, #0
 800abc8:	66da      	str	r2, [r3, #108]	; 0x6c
  hspi->RxXferSize  = (uint16_t) 0UL;
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	2200      	movs	r2, #0
 800abce:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
  hspi->RxXferCount = (uint16_t) 0UL;
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	2200      	movs	r2, #0
 800abd6:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
  hspi->TxISR       = NULL;
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	2200      	movs	r2, #0
 800abde:	67da      	str	r2, [r3, #124]	; 0x7c
  hspi->RxISR       = NULL;
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	2200      	movs	r2, #0
 800abe4:	679a      	str	r2, [r3, #120]	; 0x78

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	689b      	ldr	r3, [r3, #8]
 800abea:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800abee:	d107      	bne.n	800ac00 <HAL_SPI_Transmit+0xf8>
  {
    SPI_1LINE_TX(hspi);
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	681a      	ldr	r2, [r3, #0]
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800abfe:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	685b      	ldr	r3, [r3, #4]
 800ac06:	0c1b      	lsrs	r3, r3, #16
 800ac08:	041b      	lsls	r3, r3, #16
 800ac0a:	88f9      	ldrh	r1, [r7, #6]
 800ac0c:	68fa      	ldr	r2, [r7, #12]
 800ac0e:	6812      	ldr	r2, [r2, #0]
 800ac10:	430b      	orrs	r3, r1
 800ac12:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	681a      	ldr	r2, [r3, #0]
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	f042 0201 	orr.w	r2, r2, #1
 800ac22:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	69db      	ldr	r3, [r3, #28]
 800ac2a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d10c      	bne.n	800ac4c <HAL_SPI_Transmit+0x144>
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	685b      	ldr	r3, [r3, #4]
 800ac36:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ac3a:	d107      	bne.n	800ac4c <HAL_SPI_Transmit+0x144>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	681a      	ldr	r2, [r3, #0]
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ac4a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	68db      	ldr	r3, [r3, #12]
 800ac50:	2b0f      	cmp	r3, #15
 800ac52:	d95b      	bls.n	800ad0c <HAL_SPI_Transmit+0x204>
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	4a4d      	ldr	r2, [pc, #308]	; (800ad90 <HAL_SPI_Transmit+0x288>)
 800ac5a:	4293      	cmp	r3, r2
 800ac5c:	d04f      	beq.n	800acfe <HAL_SPI_Transmit+0x1f6>
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	4a4c      	ldr	r2, [pc, #304]	; (800ad94 <HAL_SPI_Transmit+0x28c>)
 800ac64:	4293      	cmp	r3, r2
 800ac66:	d04a      	beq.n	800acfe <HAL_SPI_Transmit+0x1f6>
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	4a4a      	ldr	r2, [pc, #296]	; (800ad98 <HAL_SPI_Transmit+0x290>)
 800ac6e:	4293      	cmp	r3, r2
 800ac70:	d045      	beq.n	800acfe <HAL_SPI_Transmit+0x1f6>
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	4a49      	ldr	r2, [pc, #292]	; (800ad9c <HAL_SPI_Transmit+0x294>)
 800ac78:	4293      	cmp	r3, r2
 800ac7a:	d147      	bne.n	800ad0c <HAL_SPI_Transmit+0x204>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800ac7c:	e03f      	b.n	800acfe <HAL_SPI_Transmit+0x1f6>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	695b      	ldr	r3, [r3, #20]
 800ac84:	f003 0302 	and.w	r3, r3, #2
 800ac88:	2b02      	cmp	r3, #2
 800ac8a:	d114      	bne.n	800acb6 <HAL_SPI_Transmit+0x1ae>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	6812      	ldr	r2, [r2, #0]
 800ac96:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ac9c:	1d1a      	adds	r2, r3, #4
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->TxXferCount--;
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800aca8:	b29b      	uxth	r3, r3
 800acaa:	3b01      	subs	r3, #1
 800acac:	b29a      	uxth	r2, r3
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800acb4:	e023      	b.n	800acfe <HAL_SPI_Transmit+0x1f6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800acb6:	f7f8 f807 	bl	8002cc8 <HAL_GetTick>
 800acba:	4602      	mov	r2, r0
 800acbc:	697b      	ldr	r3, [r7, #20]
 800acbe:	1ad3      	subs	r3, r2, r3
 800acc0:	683a      	ldr	r2, [r7, #0]
 800acc2:	429a      	cmp	r2, r3
 800acc4:	d803      	bhi.n	800acce <HAL_SPI_Transmit+0x1c6>
 800acc6:	683b      	ldr	r3, [r7, #0]
 800acc8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800accc:	d102      	bne.n	800acd4 <HAL_SPI_Transmit+0x1cc>
 800acce:	683b      	ldr	r3, [r7, #0]
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d114      	bne.n	800acfe <HAL_SPI_Transmit+0x1f6>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800acd4:	68f8      	ldr	r0, [r7, #12]
 800acd6:	f001 fb08 	bl	800c2ea <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	2200      	movs	r2, #0
 800acde:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ace8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	2201      	movs	r2, #1
 800acf6:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 800acfa:	2303      	movs	r3, #3
 800acfc:	e126      	b.n	800af4c <HAL_SPI_Transmit+0x444>
    while (hspi->TxXferCount > 0UL)
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ad04:	b29b      	uxth	r3, r3
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d1b9      	bne.n	800ac7e <HAL_SPI_Transmit+0x176>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800ad0a:	e0f9      	b.n	800af00 <HAL_SPI_Transmit+0x3f8>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	68db      	ldr	r3, [r3, #12]
 800ad10:	2b07      	cmp	r3, #7
 800ad12:	f240 80ee 	bls.w	800aef2 <HAL_SPI_Transmit+0x3ea>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800ad16:	e067      	b.n	800ade8 <HAL_SPI_Transmit+0x2e0>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	695b      	ldr	r3, [r3, #20]
 800ad1e:	f003 0302 	and.w	r3, r3, #2
 800ad22:	2b02      	cmp	r3, #2
 800ad24:	d13c      	bne.n	800ada0 <HAL_SPI_Transmit+0x298>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ad2c:	b29b      	uxth	r3, r3
 800ad2e:	2b01      	cmp	r3, #1
 800ad30:	d918      	bls.n	800ad64 <HAL_SPI_Transmit+0x25c>
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d014      	beq.n	800ad64 <HAL_SPI_Transmit+0x25c>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	6812      	ldr	r2, [r2, #0]
 800ad44:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ad4a:	1d1a      	adds	r2, r3, #4
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ad56:	b29b      	uxth	r3, r3
 800ad58:	3b02      	subs	r3, #2
 800ad5a:	b29a      	uxth	r2, r3
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800ad62:	e041      	b.n	800ade8 <HAL_SPI_Transmit+0x2e0>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ad68:	881a      	ldrh	r2, [r3, #0]
 800ad6a:	69fb      	ldr	r3, [r7, #28]
 800ad6c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ad72:	1c9a      	adds	r2, r3, #2
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount--;
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ad7e:	b29b      	uxth	r3, r3
 800ad80:	3b01      	subs	r3, #1
 800ad82:	b29a      	uxth	r2, r3
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800ad8a:	e02d      	b.n	800ade8 <HAL_SPI_Transmit+0x2e0>
 800ad8c:	08025d28 	.word	0x08025d28
 800ad90:	40013000 	.word	0x40013000
 800ad94:	50013000 	.word	0x50013000
 800ad98:	40003800 	.word	0x40003800
 800ad9c:	50003800 	.word	0x50003800
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ada0:	f7f7 ff92 	bl	8002cc8 <HAL_GetTick>
 800ada4:	4602      	mov	r2, r0
 800ada6:	697b      	ldr	r3, [r7, #20]
 800ada8:	1ad3      	subs	r3, r2, r3
 800adaa:	683a      	ldr	r2, [r7, #0]
 800adac:	429a      	cmp	r2, r3
 800adae:	d803      	bhi.n	800adb8 <HAL_SPI_Transmit+0x2b0>
 800adb0:	683b      	ldr	r3, [r7, #0]
 800adb2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800adb6:	d102      	bne.n	800adbe <HAL_SPI_Transmit+0x2b6>
 800adb8:	683b      	ldr	r3, [r7, #0]
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d114      	bne.n	800ade8 <HAL_SPI_Transmit+0x2e0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800adbe:	68f8      	ldr	r0, [r7, #12]
 800adc0:	f001 fa93 	bl	800c2ea <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	2200      	movs	r2, #0
 800adc8:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800add2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	2201      	movs	r2, #1
 800ade0:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 800ade4:	2303      	movs	r3, #3
 800ade6:	e0b1      	b.n	800af4c <HAL_SPI_Transmit+0x444>
    while (hspi->TxXferCount > 0UL)
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800adee:	b29b      	uxth	r3, r3
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d191      	bne.n	800ad18 <HAL_SPI_Transmit+0x210>
 800adf4:	e084      	b.n	800af00 <HAL_SPI_Transmit+0x3f8>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	695b      	ldr	r3, [r3, #20]
 800adfc:	f003 0302 	and.w	r3, r3, #2
 800ae00:	2b02      	cmp	r3, #2
 800ae02:	d152      	bne.n	800aeaa <HAL_SPI_Transmit+0x3a2>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ae0a:	b29b      	uxth	r3, r3
 800ae0c:	2b03      	cmp	r3, #3
 800ae0e:	d918      	bls.n	800ae42 <HAL_SPI_Transmit+0x33a>
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae14:	2b40      	cmp	r3, #64	; 0x40
 800ae16:	d914      	bls.n	800ae42 <HAL_SPI_Transmit+0x33a>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	6812      	ldr	r2, [r2, #0]
 800ae22:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ae28:	1d1a      	adds	r2, r3, #4
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)4UL;
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ae34:	b29b      	uxth	r3, r3
 800ae36:	3b04      	subs	r3, #4
 800ae38:	b29a      	uxth	r2, r3
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800ae40:	e057      	b.n	800aef2 <HAL_SPI_Transmit+0x3ea>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ae48:	b29b      	uxth	r3, r3
 800ae4a:	2b01      	cmp	r3, #1
 800ae4c:	d917      	bls.n	800ae7e <HAL_SPI_Transmit+0x376>
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d013      	beq.n	800ae7e <HAL_SPI_Transmit+0x376>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ae5a:	881a      	ldrh	r2, [r3, #0]
 800ae5c:	69fb      	ldr	r3, [r7, #28]
 800ae5e:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ae64:	1c9a      	adds	r2, r3, #2
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ae70:	b29b      	uxth	r3, r3
 800ae72:	3b02      	subs	r3, #2
 800ae74:	b29a      	uxth	r2, r3
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800ae7c:	e039      	b.n	800aef2 <HAL_SPI_Transmit+0x3ea>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	3320      	adds	r3, #32
 800ae88:	7812      	ldrb	r2, [r2, #0]
 800ae8a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ae90:	1c5a      	adds	r2, r3, #1
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount--;
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ae9c:	b29b      	uxth	r3, r3
 800ae9e:	3b01      	subs	r3, #1
 800aea0:	b29a      	uxth	r2, r3
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800aea8:	e023      	b.n	800aef2 <HAL_SPI_Transmit+0x3ea>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800aeaa:	f7f7 ff0d 	bl	8002cc8 <HAL_GetTick>
 800aeae:	4602      	mov	r2, r0
 800aeb0:	697b      	ldr	r3, [r7, #20]
 800aeb2:	1ad3      	subs	r3, r2, r3
 800aeb4:	683a      	ldr	r2, [r7, #0]
 800aeb6:	429a      	cmp	r2, r3
 800aeb8:	d803      	bhi.n	800aec2 <HAL_SPI_Transmit+0x3ba>
 800aeba:	683b      	ldr	r3, [r7, #0]
 800aebc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aec0:	d102      	bne.n	800aec8 <HAL_SPI_Transmit+0x3c0>
 800aec2:	683b      	ldr	r3, [r7, #0]
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d114      	bne.n	800aef2 <HAL_SPI_Transmit+0x3ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800aec8:	68f8      	ldr	r0, [r7, #12]
 800aeca:	f001 fa0e 	bl	800c2ea <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	2200      	movs	r2, #0
 800aed2:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aedc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	2201      	movs	r2, #1
 800aeea:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 800aeee:	2303      	movs	r3, #3
 800aef0:	e02c      	b.n	800af4c <HAL_SPI_Transmit+0x444>
    while (hspi->TxXferCount > 0UL)
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800aef8:	b29b      	uxth	r3, r3
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	f47f af7b 	bne.w	800adf6 <HAL_SPI_Transmit+0x2ee>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800af00:	683b      	ldr	r3, [r7, #0]
 800af02:	9300      	str	r3, [sp, #0]
 800af04:	697b      	ldr	r3, [r7, #20]
 800af06:	2200      	movs	r2, #0
 800af08:	2108      	movs	r1, #8
 800af0a:	68f8      	ldr	r0, [r7, #12]
 800af0c:	f001 fa8d 	bl	800c42a <SPI_WaitOnFlagUntilTimeout>
 800af10:	4603      	mov	r3, r0
 800af12:	2b00      	cmp	r3, #0
 800af14:	d007      	beq.n	800af26 <HAL_SPI_Transmit+0x41e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800af1c:	f043 0220 	orr.w	r2, r3, #32
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800af26:	68f8      	ldr	r0, [r7, #12]
 800af28:	f001 f9df 	bl	800c2ea <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	2200      	movs	r2, #0
 800af30:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  hspi->State = HAL_SPI_STATE_READY;
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	2201      	movs	r2, #1
 800af38:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800af42:	2b00      	cmp	r3, #0
 800af44:	d001      	beq.n	800af4a <HAL_SPI_Transmit+0x442>
  {
    return HAL_ERROR;
 800af46:	2301      	movs	r3, #1
 800af48:	e000      	b.n	800af4c <HAL_SPI_Transmit+0x444>
  }
  return errorcode;
 800af4a:	7efb      	ldrb	r3, [r7, #27]
}
 800af4c:	4618      	mov	r0, r3
 800af4e:	3720      	adds	r7, #32
 800af50:	46bd      	mov	sp, r7
 800af52:	bd80      	pop	{r7, pc}

0800af54 <HAL_SPI_Transmit_DMA>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800af54:	b580      	push	{r7, lr}
 800af56:	b086      	sub	sp, #24
 800af58:	af00      	add	r7, sp, #0
 800af5a:	60f8      	str	r0, [r7, #12]
 800af5c:	60b9      	str	r1, [r7, #8]
 800af5e:	4613      	mov	r3, r2
 800af60:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode;

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	689b      	ldr	r3, [r3, #8]
 800af66:	2b00      	cmp	r3, #0
 800af68:	d00e      	beq.n	800af88 <HAL_SPI_Transmit_DMA+0x34>
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	689b      	ldr	r3, [r3, #8]
 800af6e:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800af72:	d009      	beq.n	800af88 <HAL_SPI_Transmit_DMA+0x34>
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	689b      	ldr	r3, [r3, #8]
 800af78:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800af7c:	d004      	beq.n	800af88 <HAL_SPI_Transmit_DMA+0x34>
 800af7e:	f240 711f 	movw	r1, #1823	; 0x71f
 800af82:	4896      	ldr	r0, [pc, #600]	; (800b1dc <HAL_SPI_Transmit_DMA+0x288>)
 800af84:	f00a f991 	bl	80152aa <assert_failed>

  /* Lock the process */
  __HAL_LOCK(hspi);
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800af8e:	2b01      	cmp	r3, #1
 800af90:	d101      	bne.n	800af96 <HAL_SPI_Transmit_DMA+0x42>
 800af92:	2302      	movs	r3, #2
 800af94:	e1b9      	b.n	800b30a <HAL_SPI_Transmit_DMA+0x3b6>
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	2201      	movs	r2, #1
 800af9a:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  if (hspi->State != HAL_SPI_STATE_READY)
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800afa4:	b2db      	uxtb	r3, r3
 800afa6:	2b01      	cmp	r3, #1
 800afa8:	d007      	beq.n	800afba <HAL_SPI_Transmit_DMA+0x66>
  {
    errorcode = HAL_BUSY;
 800afaa:	2302      	movs	r3, #2
 800afac:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	2200      	movs	r2, #0
 800afb2:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 800afb6:	7dfb      	ldrb	r3, [r7, #23]
 800afb8:	e1a7      	b.n	800b30a <HAL_SPI_Transmit_DMA+0x3b6>
  }

  if ((pData == NULL) || (Size == 0UL))
 800afba:	68bb      	ldr	r3, [r7, #8]
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d002      	beq.n	800afc6 <HAL_SPI_Transmit_DMA+0x72>
 800afc0:	88fb      	ldrh	r3, [r7, #6]
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d107      	bne.n	800afd6 <HAL_SPI_Transmit_DMA+0x82>
  {
    errorcode = HAL_ERROR;
 800afc6:	2301      	movs	r3, #1
 800afc8:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	2200      	movs	r2, #0
 800afce:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 800afd2:	7dfb      	ldrb	r3, [r7, #23]
 800afd4:	e199      	b.n	800b30a <HAL_SPI_Transmit_DMA+0x3b6>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	2203      	movs	r2, #3
 800afda:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	2200      	movs	r2, #0
 800afe2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	68ba      	ldr	r2, [r7, #8]
 800afea:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->TxXferSize  = Size;
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	88fa      	ldrh	r2, [r7, #6]
 800aff0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->TxXferCount = Size;
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	88fa      	ldrh	r2, [r7, #6]
 800aff8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	2200      	movs	r2, #0
 800b000:	66da      	str	r2, [r3, #108]	; 0x6c
  hspi->TxISR       = NULL;
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	2200      	movs	r2, #0
 800b006:	67da      	str	r2, [r3, #124]	; 0x7c
  hspi->RxISR       = NULL;
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	2200      	movs	r2, #0
 800b00c:	679a      	str	r2, [r3, #120]	; 0x78
  hspi->RxXferSize  = (uint16_t)0UL;
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	2200      	movs	r2, #0
 800b012:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
  hspi->RxXferCount = (uint16_t)0UL;
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	2200      	movs	r2, #0
 800b01a:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	689b      	ldr	r3, [r3, #8]
 800b022:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800b026:	d107      	bne.n	800b038 <HAL_SPI_Transmit_DMA+0xe4>
  {
    SPI_1LINE_TX(hspi);
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	681a      	ldr	r2, [r3, #0]
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b036:	601a      	str	r2, [r3, #0]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.SrcDataWidth !=  DMA_SRC_DATAWIDTH_WORD) && \
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	68db      	ldr	r3, [r3, #12]
 800b03c:	2b0f      	cmp	r3, #15
 800b03e:	d919      	bls.n	800b074 <HAL_SPI_Transmit_DMA+0x120>
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b046:	699b      	ldr	r3, [r3, #24]
 800b048:	2b02      	cmp	r3, #2
 800b04a:	d013      	beq.n	800b074 <HAL_SPI_Transmit_DMA+0x120>
       (IS_SPI_FULL_INSTANCE(hspi->Instance))) || \
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	681b      	ldr	r3, [r3, #0]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.SrcDataWidth !=  DMA_SRC_DATAWIDTH_WORD) && \
 800b050:	4a63      	ldr	r2, [pc, #396]	; (800b1e0 <HAL_SPI_Transmit_DMA+0x28c>)
 800b052:	4293      	cmp	r3, r2
 800b054:	d018      	beq.n	800b088 <HAL_SPI_Transmit_DMA+0x134>
       (IS_SPI_FULL_INSTANCE(hspi->Instance))) || \
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	4a62      	ldr	r2, [pc, #392]	; (800b1e4 <HAL_SPI_Transmit_DMA+0x290>)
 800b05c:	4293      	cmp	r3, r2
 800b05e:	d013      	beq.n	800b088 <HAL_SPI_Transmit_DMA+0x134>
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	4a60      	ldr	r2, [pc, #384]	; (800b1e8 <HAL_SPI_Transmit_DMA+0x294>)
 800b066:	4293      	cmp	r3, r2
 800b068:	d00e      	beq.n	800b088 <HAL_SPI_Transmit_DMA+0x134>
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	4a5f      	ldr	r2, [pc, #380]	; (800b1ec <HAL_SPI_Transmit_DMA+0x298>)
 800b070:	4293      	cmp	r3, r2
 800b072:	d009      	beq.n	800b088 <HAL_SPI_Transmit_DMA+0x134>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT)  && (hspi->hdmatx->Init.SrcDataWidth ==  DMA_SRC_DATAWIDTH_BYTE)))
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	68db      	ldr	r3, [r3, #12]
       (IS_SPI_FULL_INSTANCE(hspi->Instance))) || \
 800b078:	2b07      	cmp	r3, #7
 800b07a:	d90d      	bls.n	800b098 <HAL_SPI_Transmit_DMA+0x144>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT)  && (hspi->hdmatx->Init.SrcDataWidth ==  DMA_SRC_DATAWIDTH_BYTE)))
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b082:	699b      	ldr	r3, [r3, #24]
 800b084:	2b00      	cmp	r3, #0
 800b086:	d107      	bne.n	800b098 <HAL_SPI_Transmit_DMA+0x144>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    errorcode = HAL_ERROR;
 800b088:	2301      	movs	r3, #1
 800b08a:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	2200      	movs	r2, #0
 800b090:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 800b094:	7dfb      	ldrb	r3, [r7, #23]
 800b096:	e138      	b.n	800b30a <HAL_SPI_Transmit_DMA+0x3b6>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	68db      	ldr	r3, [r3, #12]
 800b09c:	2b07      	cmp	r3, #7
 800b09e:	d820      	bhi.n	800b0e2 <HAL_SPI_Transmit_DMA+0x18e>
  {
    if (hspi->hdmatx->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_HALFWORD)
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b0a6:	699b      	ldr	r3, [r3, #24]
 800b0a8:	2b01      	cmp	r3, #1
 800b0aa:	d109      	bne.n	800b0c0 <HAL_SPI_Transmit_DMA+0x16c>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b0b2:	b29b      	uxth	r3, r3
 800b0b4:	3301      	adds	r3, #1
 800b0b6:	105b      	asrs	r3, r3, #1
 800b0b8:	b29a      	uxth	r2, r3
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    }
    if (hspi->hdmatx->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b0c6:	699b      	ldr	r3, [r3, #24]
 800b0c8:	2b02      	cmp	r3, #2
 800b0ca:	d11e      	bne.n	800b10a <HAL_SPI_Transmit_DMA+0x1b6>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b0d2:	b29b      	uxth	r3, r3
 800b0d4:	3303      	adds	r3, #3
 800b0d6:	109b      	asrs	r3, r3, #2
 800b0d8:	b29a      	uxth	r2, r3
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800b0e0:	e013      	b.n	800b10a <HAL_SPI_Transmit_DMA+0x1b6>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	68db      	ldr	r3, [r3, #12]
 800b0e6:	2b0f      	cmp	r3, #15
 800b0e8:	d80f      	bhi.n	800b10a <HAL_SPI_Transmit_DMA+0x1b6>
  {
    if (hspi->hdmatx->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b0f0:	699b      	ldr	r3, [r3, #24]
 800b0f2:	2b02      	cmp	r3, #2
 800b0f4:	d109      	bne.n	800b10a <HAL_SPI_Transmit_DMA+0x1b6>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b0fc:	b29b      	uxth	r3, r3
 800b0fe:	3301      	adds	r3, #1
 800b100:	105b      	asrs	r3, r3, #1
 800b102:	b29a      	uxth	r2, r3
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  {
    /* Adjustment done */
  }

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b110:	4a37      	ldr	r2, [pc, #220]	; (800b1f0 <HAL_SPI_Transmit_DMA+0x29c>)
 800b112:	665a      	str	r2, [r3, #100]	; 0x64

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b11a:	4a36      	ldr	r2, [pc, #216]	; (800b1f4 <HAL_SPI_Transmit_DMA+0x2a0>)
 800b11c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b124:	4a34      	ldr	r2, [pc, #208]	; (800b1f8 <HAL_SPI_Transmit_DMA+0x2a4>)
 800b126:	669a      	str	r2, [r3, #104]	; 0x68

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b12e:	2200      	movs	r2, #0
 800b130:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Clear TXDMAEN bit*/
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	689a      	ldr	r2, [r3, #8]
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b140:	609a      	str	r2, [r3, #8]

  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	68db      	ldr	r3, [r3, #12]
 800b146:	2b07      	cmp	r3, #7
 800b148:	d804      	bhi.n	800b154 <HAL_SPI_Transmit_DMA+0x200>
  {
    hspi->TxXferCount = Size;
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	88fa      	ldrh	r2, [r7, #6]
 800b14e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800b152:	e010      	b.n	800b176 <HAL_SPI_Transmit_DMA+0x222>
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	68db      	ldr	r3, [r3, #12]
 800b158:	2b0f      	cmp	r3, #15
 800b15a:	d806      	bhi.n	800b16a <HAL_SPI_Transmit_DMA+0x216>
  {
    hspi->TxXferCount = Size * 2U;
 800b15c:	88fb      	ldrh	r3, [r7, #6]
 800b15e:	005b      	lsls	r3, r3, #1
 800b160:	b29a      	uxth	r2, r3
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800b168:	e005      	b.n	800b176 <HAL_SPI_Transmit_DMA+0x222>
  }
  else
  {
    hspi->TxXferCount = Size * 4U;
 800b16a:	88fb      	ldrh	r3, [r7, #6]
 800b16c:	009b      	lsls	r3, r3, #2
 800b16e:	b29a      	uxth	r2, r3
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  }

  /* Enable the Tx DMA Stream/Channel */
  if ((hspi->hdmatx->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b17c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b17e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b182:	2b00      	cmp	r3, #0
 800b184:	d04e      	beq.n	800b224 <HAL_SPI_Transmit_DMA+0x2d0>
  {
    if (hspi->hdmatx->LinkedListQueue != NULL)
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b18c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d034      	beq.n	800b1fc <HAL_SPI_Transmit_DMA+0x2a8>
    {
      /* Set DMA data size */
      hspi->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = hspi->TxXferCount;
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b198:	b29a      	uxth	r2, r3
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b1a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	609a      	str	r2, [r3, #8]

      /* Set DMA source address */
      hspi->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = (uint32_t)hspi->pTxBuffPtr;
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b1b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	60da      	str	r2, [r3, #12]

      /* Set DMA destination address */
      hspi->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)&hspi->Instance->TXDR;
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	f103 0220 	add.w	r2, r3, #32
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b1c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	611a      	str	r2, [r3, #16]

      errorcode = HAL_DMAEx_List_Start_IT(hspi->hdmatx);
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b1d0:	4618      	mov	r0, r3
 800b1d2:	f7f8 ff71 	bl	80040b8 <HAL_DMAEx_List_Start_IT>
 800b1d6:	4603      	mov	r3, r0
 800b1d8:	75fb      	strb	r3, [r7, #23]
 800b1da:	e035      	b.n	800b248 <HAL_SPI_Transmit_DMA+0x2f4>
 800b1dc:	08025d28 	.word	0x08025d28
 800b1e0:	40013000 	.word	0x40013000
 800b1e4:	50013000 	.word	0x50013000
 800b1e8:	40003800 	.word	0x40003800
 800b1ec:	50003800 	.word	0x50003800
 800b1f0:	0800c209 	.word	0x0800c209
 800b1f4:	0800c11f 	.word	0x0800c11f
 800b1f8:	0800c269 	.word	0x0800c269
    }
    else
    {
      /* Update SPI error code */
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b202:	f043 0210 	orr.w	r2, r3, #16
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Unlock the process */
      __HAL_UNLOCK(hspi);
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	2200      	movs	r2, #0
 800b210:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

      hspi->State = HAL_SPI_STATE_READY;
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	2201      	movs	r2, #1
 800b218:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
      errorcode = HAL_ERROR;
 800b21c:	2301      	movs	r3, #1
 800b21e:	75fb      	strb	r3, [r7, #23]
      return errorcode;
 800b220:	7dfb      	ldrb	r3, [r7, #23]
 800b222:	e072      	b.n	800b30a <HAL_SPI_Transmit_DMA+0x3b6>
    }
  }
  else
  {
    errorcode = HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b22e:	4619      	mov	r1, r3
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	3320      	adds	r3, #32
 800b236:	461a      	mov	r2, r3
                                 hspi->TxXferCount);
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b23e:	b29b      	uxth	r3, r3
    errorcode = HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 800b240:	f7f8 fa34 	bl	80036ac <HAL_DMA_Start_IT>
 800b244:	4603      	mov	r3, r0
 800b246:	75fb      	strb	r3, [r7, #23]
  }

  /* Check status */
  if (errorcode != HAL_OK)
 800b248:	7dfb      	ldrb	r3, [r7, #23]
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d013      	beq.n	800b276 <HAL_SPI_Transmit_DMA+0x322>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b254:	f043 0210 	orr.w	r2, r3, #16
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	2200      	movs	r2, #0
 800b262:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    hspi->State = HAL_SPI_STATE_READY;
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	2201      	movs	r2, #1
 800b26a:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
    errorcode = HAL_ERROR;
 800b26e:	2301      	movs	r3, #1
 800b270:	75fb      	strb	r3, [r7, #23]
    return errorcode;
 800b272:	7dfb      	ldrb	r3, [r7, #23]
 800b274:	e049      	b.n	800b30a <HAL_SPI_Transmit_DMA+0x3b6>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmatx->Mode == DMA_LINKEDLIST_CIRCULAR)
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b27c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b27e:	2b81      	cmp	r3, #129	; 0x81
 800b280:	d108      	bne.n	800b294 <HAL_SPI_Transmit_DMA+0x340>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	685b      	ldr	r3, [r3, #4]
 800b288:	68fa      	ldr	r2, [r7, #12]
 800b28a:	6812      	ldr	r2, [r2, #0]
 800b28c:	0c1b      	lsrs	r3, r3, #16
 800b28e:	041b      	lsls	r3, r3, #16
 800b290:	6053      	str	r3, [r2, #4]
 800b292:	e009      	b.n	800b2a8 <HAL_SPI_Transmit_DMA+0x354>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	685b      	ldr	r3, [r3, #4]
 800b29a:	0c1b      	lsrs	r3, r3, #16
 800b29c:	041b      	lsls	r3, r3, #16
 800b29e:	88f9      	ldrh	r1, [r7, #6]
 800b2a0:	68fa      	ldr	r2, [r7, #12]
 800b2a2:	6812      	ldr	r2, [r2, #0]
 800b2a4:	430b      	orrs	r3, r1
 800b2a6:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	689a      	ldr	r2, [r3, #8]
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b2b6:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	691a      	ldr	r2, [r3, #16]
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	f442 7248 	orr.w	r2, r2, #800	; 0x320
 800b2c6:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	681a      	ldr	r2, [r3, #0]
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	f042 0201 	orr.w	r2, r2, #1
 800b2d6:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	69db      	ldr	r3, [r3, #28]
 800b2de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d10c      	bne.n	800b300 <HAL_SPI_Transmit_DMA+0x3ac>
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	685b      	ldr	r3, [r3, #4]
 800b2ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b2ee:	d107      	bne.n	800b300 <HAL_SPI_Transmit_DMA+0x3ac>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	681a      	ldr	r2, [r3, #0]
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b2fe:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	2200      	movs	r2, #0
 800b304:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
  return errorcode;
 800b308:	7dfb      	ldrb	r3, [r7, #23]
}
 800b30a:	4618      	mov	r0, r3
 800b30c:	3718      	adds	r7, #24
 800b30e:	46bd      	mov	sp, r7
 800b310:	bd80      	pop	{r7, pc}
 800b312:	bf00      	nop

0800b314 <HAL_SPI_Receive_DMA>:
  * @param  Size : amount of data to be sent
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800b314:	b580      	push	{r7, lr}
 800b316:	b086      	sub	sp, #24
 800b318:	af00      	add	r7, sp, #0
 800b31a:	60f8      	str	r0, [r7, #12]
 800b31c:	60b9      	str	r1, [r7, #8]
 800b31e:	4613      	mov	r3, r2
 800b320:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode;

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	689b      	ldr	r3, [r3, #8]
 800b326:	2b00      	cmp	r3, #0
 800b328:	d00e      	beq.n	800b348 <HAL_SPI_Receive_DMA+0x34>
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	689b      	ldr	r3, [r3, #8]
 800b32e:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800b332:	d009      	beq.n	800b348 <HAL_SPI_Receive_DMA+0x34>
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	689b      	ldr	r3, [r3, #8]
 800b338:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b33c:	d004      	beq.n	800b348 <HAL_SPI_Receive_DMA+0x34>
 800b33e:	f240 71e2 	movw	r1, #2018	; 0x7e2
 800b342:	4885      	ldr	r0, [pc, #532]	; (800b558 <HAL_SPI_Receive_DMA+0x244>)
 800b344:	f009 ffb1 	bl	80152aa <assert_failed>

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	689b      	ldr	r3, [r3, #8]
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d110      	bne.n	800b372 <HAL_SPI_Receive_DMA+0x5e>
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	685b      	ldr	r3, [r3, #4]
 800b354:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b358:	d10b      	bne.n	800b372 <HAL_SPI_Receive_DMA+0x5e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	2204      	movs	r2, #4
 800b35e:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 800b362:	88fb      	ldrh	r3, [r7, #6]
 800b364:	68ba      	ldr	r2, [r7, #8]
 800b366:	68b9      	ldr	r1, [r7, #8]
 800b368:	68f8      	ldr	r0, [r7, #12]
 800b36a:	f000 f9c9 	bl	800b700 <HAL_SPI_TransmitReceive_DMA>
 800b36e:	4603      	mov	r3, r0
 800b370:	e1c2      	b.n	800b6f8 <HAL_SPI_Receive_DMA+0x3e4>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800b378:	2b01      	cmp	r3, #1
 800b37a:	d101      	bne.n	800b380 <HAL_SPI_Receive_DMA+0x6c>
 800b37c:	2302      	movs	r3, #2
 800b37e:	e1bb      	b.n	800b6f8 <HAL_SPI_Receive_DMA+0x3e4>
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	2201      	movs	r2, #1
 800b384:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  if (hspi->State != HAL_SPI_STATE_READY)
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800b38e:	b2db      	uxtb	r3, r3
 800b390:	2b01      	cmp	r3, #1
 800b392:	d007      	beq.n	800b3a4 <HAL_SPI_Receive_DMA+0x90>
  {
    errorcode = HAL_BUSY;
 800b394:	2302      	movs	r3, #2
 800b396:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	2200      	movs	r2, #0
 800b39c:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 800b3a0:	7dfb      	ldrb	r3, [r7, #23]
 800b3a2:	e1a9      	b.n	800b6f8 <HAL_SPI_Receive_DMA+0x3e4>
  }

  if ((pData == NULL) || (Size == 0UL))
 800b3a4:	68bb      	ldr	r3, [r7, #8]
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d002      	beq.n	800b3b0 <HAL_SPI_Receive_DMA+0x9c>
 800b3aa:	88fb      	ldrh	r3, [r7, #6]
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d107      	bne.n	800b3c0 <HAL_SPI_Receive_DMA+0xac>
  {
    errorcode = HAL_ERROR;
 800b3b0:	2301      	movs	r3, #1
 800b3b2:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	2200      	movs	r2, #0
 800b3b8:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 800b3bc:	7dfb      	ldrb	r3, [r7, #23]
 800b3be:	e19b      	b.n	800b6f8 <HAL_SPI_Receive_DMA+0x3e4>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	2204      	movs	r2, #4
 800b3c4:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	2200      	movs	r2, #0
 800b3cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	68ba      	ldr	r2, [r7, #8]
 800b3d4:	66da      	str	r2, [r3, #108]	; 0x6c
  hspi->RxXferSize  = Size;
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	88fa      	ldrh	r2, [r7, #6]
 800b3da:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
  hspi->RxXferCount = Size;
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	88fa      	ldrh	r2, [r7, #6]
 800b3e2:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	2200      	movs	r2, #0
 800b3ea:	679a      	str	r2, [r3, #120]	; 0x78
  hspi->TxISR       = NULL;
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	2200      	movs	r2, #0
 800b3f0:	67da      	str	r2, [r3, #124]	; 0x7c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	2200      	movs	r2, #0
 800b3f6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->TxXferCount = (uint16_t) 0UL;
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	2200      	movs	r2, #0
 800b3fe:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	689b      	ldr	r3, [r3, #8]
 800b406:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800b40a:	d107      	bne.n	800b41c <HAL_SPI_Receive_DMA+0x108>
  {
    SPI_1LINE_RX(hspi);
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	681a      	ldr	r2, [r3, #0]
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b41a:	601a      	str	r2, [r3, #0]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.DestDataWidth != DMA_DEST_DATAWIDTH_WORD) &&  \
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	68db      	ldr	r3, [r3, #12]
 800b420:	2b0f      	cmp	r3, #15
 800b422:	d91a      	bls.n	800b45a <HAL_SPI_Receive_DMA+0x146>
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b42a:	69db      	ldr	r3, [r3, #28]
 800b42c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b430:	d013      	beq.n	800b45a <HAL_SPI_Receive_DMA+0x146>
       (IS_SPI_FULL_INSTANCE(hspi->Instance))) || \
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	681b      	ldr	r3, [r3, #0]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.DestDataWidth != DMA_DEST_DATAWIDTH_WORD) &&  \
 800b436:	4a49      	ldr	r2, [pc, #292]	; (800b55c <HAL_SPI_Receive_DMA+0x248>)
 800b438:	4293      	cmp	r3, r2
 800b43a:	d018      	beq.n	800b46e <HAL_SPI_Receive_DMA+0x15a>
       (IS_SPI_FULL_INSTANCE(hspi->Instance))) || \
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	4a47      	ldr	r2, [pc, #284]	; (800b560 <HAL_SPI_Receive_DMA+0x24c>)
 800b442:	4293      	cmp	r3, r2
 800b444:	d013      	beq.n	800b46e <HAL_SPI_Receive_DMA+0x15a>
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	4a46      	ldr	r2, [pc, #280]	; (800b564 <HAL_SPI_Receive_DMA+0x250>)
 800b44c:	4293      	cmp	r3, r2
 800b44e:	d00e      	beq.n	800b46e <HAL_SPI_Receive_DMA+0x15a>
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	4a44      	ldr	r2, [pc, #272]	; (800b568 <HAL_SPI_Receive_DMA+0x254>)
 800b456:	4293      	cmp	r3, r2
 800b458:	d009      	beq.n	800b46e <HAL_SPI_Receive_DMA+0x15a>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT)  && (hspi->hdmarx->Init.DestDataWidth == DMA_DEST_DATAWIDTH_BYTE)))
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	68db      	ldr	r3, [r3, #12]
       (IS_SPI_FULL_INSTANCE(hspi->Instance))) || \
 800b45e:	2b07      	cmp	r3, #7
 800b460:	d90d      	bls.n	800b47e <HAL_SPI_Receive_DMA+0x16a>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT)  && (hspi->hdmarx->Init.DestDataWidth == DMA_DEST_DATAWIDTH_BYTE)))
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b468:	69db      	ldr	r3, [r3, #28]
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d107      	bne.n	800b47e <HAL_SPI_Receive_DMA+0x16a>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    errorcode = HAL_ERROR;
 800b46e:	2301      	movs	r3, #1
 800b470:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	2200      	movs	r2, #0
 800b476:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 800b47a:	7dfb      	ldrb	r3, [r7, #23]
 800b47c:	e13c      	b.n	800b6f8 <HAL_SPI_Receive_DMA+0x3e4>
  }

  /* Clear RXDMAEN bit */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	689a      	ldr	r2, [r3, #8]
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800b48c:	609a      	str	r2, [r3, #8]

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	68db      	ldr	r3, [r3, #12]
 800b492:	2b07      	cmp	r3, #7
 800b494:	d822      	bhi.n	800b4dc <HAL_SPI_Receive_DMA+0x1c8>
  {
    if (hspi->hdmarx->Init.DestDataWidth == DMA_DEST_DATAWIDTH_HALFWORD)
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b49c:	69db      	ldr	r3, [r3, #28]
 800b49e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b4a2:	d109      	bne.n	800b4b8 <HAL_SPI_Receive_DMA+0x1a4>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 800b4aa:	b29b      	uxth	r3, r3
 800b4ac:	3301      	adds	r3, #1
 800b4ae:	105b      	asrs	r3, r3, #1
 800b4b0:	b29a      	uxth	r2, r3
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
    }
    if (hspi->hdmarx->Init.DestDataWidth == DMA_DEST_DATAWIDTH_WORD)
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b4be:	69db      	ldr	r3, [r3, #28]
 800b4c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b4c4:	d11f      	bne.n	800b506 <HAL_SPI_Receive_DMA+0x1f2>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 800b4cc:	b29b      	uxth	r3, r3
 800b4ce:	3303      	adds	r3, #3
 800b4d0:	109b      	asrs	r3, r3, #2
 800b4d2:	b29a      	uxth	r2, r3
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
 800b4da:	e014      	b.n	800b506 <HAL_SPI_Receive_DMA+0x1f2>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	68db      	ldr	r3, [r3, #12]
 800b4e0:	2b0f      	cmp	r3, #15
 800b4e2:	d810      	bhi.n	800b506 <HAL_SPI_Receive_DMA+0x1f2>
  {
    if (hspi->hdmarx->Init.DestDataWidth == DMA_DEST_DATAWIDTH_WORD)
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b4ea:	69db      	ldr	r3, [r3, #28]
 800b4ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b4f0:	d109      	bne.n	800b506 <HAL_SPI_Receive_DMA+0x1f2>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 800b4f8:	b29b      	uxth	r3, r3
 800b4fa:	3301      	adds	r3, #1
 800b4fc:	105b      	asrs	r3, r3, #1
 800b4fe:	b29a      	uxth	r2, r3
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
  {
    /* Adjustment done */
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b50c:	4a17      	ldr	r2, [pc, #92]	; (800b56c <HAL_SPI_Receive_DMA+0x258>)
 800b50e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b516:	4a16      	ldr	r2, [pc, #88]	; (800b570 <HAL_SPI_Receive_DMA+0x25c>)
 800b518:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b520:	4a14      	ldr	r2, [pc, #80]	; (800b574 <HAL_SPI_Receive_DMA+0x260>)
 800b522:	669a      	str	r2, [r3, #104]	; 0x68

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b52a:	2200      	movs	r2, #0
 800b52c:	66da      	str	r2, [r3, #108]	; 0x6c

  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	68db      	ldr	r3, [r3, #12]
 800b532:	2b07      	cmp	r3, #7
 800b534:	d804      	bhi.n	800b540 <HAL_SPI_Receive_DMA+0x22c>
  {
    hspi->RxXferCount = Size;
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	88fa      	ldrh	r2, [r7, #6]
 800b53a:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
 800b53e:	e021      	b.n	800b584 <HAL_SPI_Receive_DMA+0x270>
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	68db      	ldr	r3, [r3, #12]
 800b544:	2b0f      	cmp	r3, #15
 800b546:	d817      	bhi.n	800b578 <HAL_SPI_Receive_DMA+0x264>
  {
    hspi->RxXferCount = Size * 2U;
 800b548:	88fb      	ldrh	r3, [r7, #6]
 800b54a:	005b      	lsls	r3, r3, #1
 800b54c:	b29a      	uxth	r2, r3
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
 800b554:	e016      	b.n	800b584 <HAL_SPI_Receive_DMA+0x270>
 800b556:	bf00      	nop
 800b558:	08025d28 	.word	0x08025d28
 800b55c:	40013000 	.word	0x40013000
 800b560:	50013000 	.word	0x50013000
 800b564:	40003800 	.word	0x40003800
 800b568:	50003800 	.word	0x50003800
 800b56c:	0800c229 	.word	0x0800c229
 800b570:	0800c169 	.word	0x0800c169
 800b574:	0800c269 	.word	0x0800c269
  }
  else
  {
    hspi->RxXferCount = Size * 4U;
 800b578:	88fb      	ldrh	r3, [r7, #6]
 800b57a:	009b      	lsls	r3, r3, #2
 800b57c:	b29a      	uxth	r2, r3
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
  }

  /* Enable the Rx DMA Stream/Channel  */
  if ((hspi->hdmarx->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b58a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b58c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b590:	2b00      	cmp	r3, #0
 800b592:	d03e      	beq.n	800b612 <HAL_SPI_Receive_DMA+0x2fe>
  {
    if (hspi->hdmarx->LinkedListQueue != NULL)
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b59a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d024      	beq.n	800b5ea <HAL_SPI_Receive_DMA+0x2d6>
    {
      /* Set DMA data size */
      hspi->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = hspi->RxXferCount;
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 800b5a6:	b29a      	uxth	r2, r3
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b5ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	609a      	str	r2, [r3, #8]

      /* Set DMA source address */
      hspi->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = (uint32_t)&hspi->Instance->RXDR;
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b5c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	60da      	str	r2, [r3, #12]

      /* Set DMA destination address */
      hspi->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)hspi->pRxBuffPtr;
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b5d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	611a      	str	r2, [r3, #16]

      errorcode = HAL_DMAEx_List_Start_IT(hspi->hdmarx);
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b5de:	4618      	mov	r0, r3
 800b5e0:	f7f8 fd6a 	bl	80040b8 <HAL_DMAEx_List_Start_IT>
 800b5e4:	4603      	mov	r3, r0
 800b5e6:	75fb      	strb	r3, [r7, #23]
 800b5e8:	e025      	b.n	800b636 <HAL_SPI_Receive_DMA+0x322>
    }
    else
    {
      /* Update SPI error code */
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b5f0:	f043 0210 	orr.w	r2, r3, #16
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Unlock the process */
      __HAL_UNLOCK(hspi);
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	2200      	movs	r2, #0
 800b5fe:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

      hspi->State = HAL_SPI_STATE_READY;
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	2201      	movs	r2, #1
 800b606:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
      errorcode = HAL_ERROR;
 800b60a:	2301      	movs	r3, #1
 800b60c:	75fb      	strb	r3, [r7, #23]
      return errorcode;
 800b60e:	7dfb      	ldrb	r3, [r7, #23]
 800b610:	e072      	b.n	800b6f8 <HAL_SPI_Receive_DMA+0x3e4>
    }
  }
  else
  {
    errorcode = HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	3330      	adds	r3, #48	; 0x30
 800b61e:	4619      	mov	r1, r3
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b624:	461a      	mov	r2, r3
                                 hspi->RxXferCount);
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 800b62c:	b29b      	uxth	r3, r3
    errorcode = HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 800b62e:	f7f8 f83d 	bl	80036ac <HAL_DMA_Start_IT>
 800b632:	4603      	mov	r3, r0
 800b634:	75fb      	strb	r3, [r7, #23]
  }

  /* Check status */
  if (errorcode != HAL_OK)
 800b636:	7dfb      	ldrb	r3, [r7, #23]
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d013      	beq.n	800b664 <HAL_SPI_Receive_DMA+0x350>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b642:	f043 0210 	orr.w	r2, r3, #16
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	2200      	movs	r2, #0
 800b650:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    hspi->State = HAL_SPI_STATE_READY;
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	2201      	movs	r2, #1
 800b658:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
    errorcode = HAL_ERROR;
 800b65c:	2301      	movs	r3, #1
 800b65e:	75fb      	strb	r3, [r7, #23]
    return errorcode;
 800b660:	7dfb      	ldrb	r3, [r7, #23]
 800b662:	e049      	b.n	800b6f8 <HAL_SPI_Receive_DMA+0x3e4>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmarx->Mode == DMA_LINKEDLIST_CIRCULAR)
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b66a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b66c:	2b81      	cmp	r3, #129	; 0x81
 800b66e:	d108      	bne.n	800b682 <HAL_SPI_Receive_DMA+0x36e>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	685b      	ldr	r3, [r3, #4]
 800b676:	68fa      	ldr	r2, [r7, #12]
 800b678:	6812      	ldr	r2, [r2, #0]
 800b67a:	0c1b      	lsrs	r3, r3, #16
 800b67c:	041b      	lsls	r3, r3, #16
 800b67e:	6053      	str	r3, [r2, #4]
 800b680:	e009      	b.n	800b696 <HAL_SPI_Receive_DMA+0x382>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	685b      	ldr	r3, [r3, #4]
 800b688:	0c1b      	lsrs	r3, r3, #16
 800b68a:	041b      	lsls	r3, r3, #16
 800b68c:	88f9      	ldrh	r1, [r7, #6]
 800b68e:	68fa      	ldr	r2, [r7, #12]
 800b690:	6812      	ldr	r2, [r2, #0]
 800b692:	430b      	orrs	r3, r1
 800b694:	6053      	str	r3, [r2, #4]
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	689a      	ldr	r2, [r3, #8]
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b6a4:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	691a      	ldr	r2, [r3, #16]
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	f442 7250 	orr.w	r2, r2, #832	; 0x340
 800b6b4:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	681a      	ldr	r2, [r3, #0]
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	f042 0201 	orr.w	r2, r2, #1
 800b6c4:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	69db      	ldr	r3, [r3, #28]
 800b6cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d10c      	bne.n	800b6ee <HAL_SPI_Receive_DMA+0x3da>
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	685b      	ldr	r3, [r3, #4]
 800b6d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b6dc:	d107      	bne.n	800b6ee <HAL_SPI_Receive_DMA+0x3da>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	681a      	ldr	r2, [r3, #0]
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b6ec:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	2200      	movs	r2, #0
 800b6f2:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
  return errorcode;
 800b6f6:	7dfb      	ldrb	r3, [r7, #23]
}
 800b6f8:	4618      	mov	r0, r3
 800b6fa:	3718      	adds	r7, #24
 800b6fc:	46bd      	mov	sp, r7
 800b6fe:	bd80      	pop	{r7, pc}

0800b700 <HAL_SPI_TransmitReceive_DMA>:
  * @note   When the CRC feature is enabled the pRxData Length must be Size + 1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800b700:	b580      	push	{r7, lr}
 800b702:	b086      	sub	sp, #24
 800b704:	af00      	add	r7, sp, #0
 800b706:	60f8      	str	r0, [r7, #12]
 800b708:	60b9      	str	r1, [r7, #8]
 800b70a:	607a      	str	r2, [r7, #4]
 800b70c:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef errorcode;

  uint32_t             tmp_mode;

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	689b      	ldr	r3, [r3, #8]
 800b712:	2b00      	cmp	r3, #0
 800b714:	d004      	beq.n	800b720 <HAL_SPI_TransmitReceive_DMA+0x20>
 800b716:	f44f 610b 	mov.w	r1, #2224	; 0x8b0
 800b71a:	489c      	ldr	r0, [pc, #624]	; (800b98c <HAL_SPI_TransmitReceive_DMA+0x28c>)
 800b71c:	f009 fdc5 	bl	80152aa <assert_failed>

  /* Lock the process */
  __HAL_LOCK(hspi);
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800b726:	2b01      	cmp	r3, #1
 800b728:	d101      	bne.n	800b72e <HAL_SPI_TransmitReceive_DMA+0x2e>
 800b72a:	2302      	movs	r3, #2
 800b72c:	e2b9      	b.n	800bca2 <HAL_SPI_TransmitReceive_DMA+0x5a2>
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	2201      	movs	r2, #1
 800b732:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  /* Init temporary variables */
  tmp_state   = hspi->State;
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800b73c:	75bb      	strb	r3, [r7, #22]
  tmp_mode    = hspi->Init.Mode;
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	685b      	ldr	r3, [r3, #4]
 800b742:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800b744:	7dbb      	ldrb	r3, [r7, #22]
 800b746:	2b01      	cmp	r3, #1
 800b748:	d012      	beq.n	800b770 <HAL_SPI_TransmitReceive_DMA+0x70>
 800b74a:	693b      	ldr	r3, [r7, #16]
 800b74c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b750:	d106      	bne.n	800b760 <HAL_SPI_TransmitReceive_DMA+0x60>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 800b756:	2b00      	cmp	r3, #0
 800b758:	d102      	bne.n	800b760 <HAL_SPI_TransmitReceive_DMA+0x60>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800b75a:	7dbb      	ldrb	r3, [r7, #22]
 800b75c:	2b04      	cmp	r3, #4
 800b75e:	d007      	beq.n	800b770 <HAL_SPI_TransmitReceive_DMA+0x70>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 800b760:	2302      	movs	r3, #2
 800b762:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	2200      	movs	r2, #0
 800b768:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 800b76c:	7dfb      	ldrb	r3, [r7, #23]
 800b76e:	e298      	b.n	800bca2 <HAL_SPI_TransmitReceive_DMA+0x5a2>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800b770:	68bb      	ldr	r3, [r7, #8]
 800b772:	2b00      	cmp	r3, #0
 800b774:	d005      	beq.n	800b782 <HAL_SPI_TransmitReceive_DMA+0x82>
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d002      	beq.n	800b782 <HAL_SPI_TransmitReceive_DMA+0x82>
 800b77c:	887b      	ldrh	r3, [r7, #2]
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d107      	bne.n	800b792 <HAL_SPI_TransmitReceive_DMA+0x92>
  {
    errorcode = HAL_ERROR;
 800b782:	2301      	movs	r3, #1
 800b784:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	2200      	movs	r2, #0
 800b78a:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 800b78e:	7dfb      	ldrb	r3, [r7, #23]
 800b790:	e287      	b.n	800bca2 <HAL_SPI_TransmitReceive_DMA+0x5a2>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800b798:	b2db      	uxtb	r3, r3
 800b79a:	2b04      	cmp	r3, #4
 800b79c:	d003      	beq.n	800b7a6 <HAL_SPI_TransmitReceive_DMA+0xa6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	2205      	movs	r2, #5
 800b7a2:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	2200      	movs	r2, #0
 800b7aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	68ba      	ldr	r2, [r7, #8]
 800b7b2:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->TxXferSize  = Size;
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	887a      	ldrh	r2, [r7, #2]
 800b7b8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->TxXferCount = Size;
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	887a      	ldrh	r2, [r7, #2]
 800b7c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	687a      	ldr	r2, [r7, #4]
 800b7c8:	66da      	str	r2, [r3, #108]	; 0x6c
  hspi->RxXferSize  = Size;
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	887a      	ldrh	r2, [r7, #2]
 800b7ce:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
  hspi->RxXferCount = Size;
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	887a      	ldrh	r2, [r7, #2]
 800b7d6:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	2200      	movs	r2, #0
 800b7de:	679a      	str	r2, [r3, #120]	; 0x78
  hspi->TxISR       = NULL;
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	2200      	movs	r2, #0
 800b7e4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Reset the Tx/Rx DMA bits */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	689a      	ldr	r2, [r3, #8]
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800b7f4:	609a      	str	r2, [r3, #8]

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.DestDataWidth != DMA_DEST_DATAWIDTH_WORD) && \
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	68db      	ldr	r3, [r3, #12]
 800b7fa:	2b0f      	cmp	r3, #15
 800b7fc:	d91a      	bls.n	800b834 <HAL_SPI_TransmitReceive_DMA+0x134>
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b804:	69db      	ldr	r3, [r3, #28]
 800b806:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b80a:	d013      	beq.n	800b834 <HAL_SPI_TransmitReceive_DMA+0x134>
       (IS_SPI_FULL_INSTANCE(hspi->Instance))) || \
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	681b      	ldr	r3, [r3, #0]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.DestDataWidth != DMA_DEST_DATAWIDTH_WORD) && \
 800b810:	4a5f      	ldr	r2, [pc, #380]	; (800b990 <HAL_SPI_TransmitReceive_DMA+0x290>)
 800b812:	4293      	cmp	r3, r2
 800b814:	d018      	beq.n	800b848 <HAL_SPI_TransmitReceive_DMA+0x148>
       (IS_SPI_FULL_INSTANCE(hspi->Instance))) || \
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	4a5e      	ldr	r2, [pc, #376]	; (800b994 <HAL_SPI_TransmitReceive_DMA+0x294>)
 800b81c:	4293      	cmp	r3, r2
 800b81e:	d013      	beq.n	800b848 <HAL_SPI_TransmitReceive_DMA+0x148>
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	4a5c      	ldr	r2, [pc, #368]	; (800b998 <HAL_SPI_TransmitReceive_DMA+0x298>)
 800b826:	4293      	cmp	r3, r2
 800b828:	d00e      	beq.n	800b848 <HAL_SPI_TransmitReceive_DMA+0x148>
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	4a5b      	ldr	r2, [pc, #364]	; (800b99c <HAL_SPI_TransmitReceive_DMA+0x29c>)
 800b830:	4293      	cmp	r3, r2
 800b832:	d009      	beq.n	800b848 <HAL_SPI_TransmitReceive_DMA+0x148>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT)  && (hspi->hdmarx->Init.DestDataWidth == DMA_DEST_DATAWIDTH_BYTE)))
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	68db      	ldr	r3, [r3, #12]
       (IS_SPI_FULL_INSTANCE(hspi->Instance))) || \
 800b838:	2b07      	cmp	r3, #7
 800b83a:	d90d      	bls.n	800b858 <HAL_SPI_TransmitReceive_DMA+0x158>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT)  && (hspi->hdmarx->Init.DestDataWidth == DMA_DEST_DATAWIDTH_BYTE)))
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b842:	69db      	ldr	r3, [r3, #28]
 800b844:	2b00      	cmp	r3, #0
 800b846:	d107      	bne.n	800b858 <HAL_SPI_TransmitReceive_DMA+0x158>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    errorcode = HAL_ERROR;
 800b848:	2301      	movs	r3, #1
 800b84a:	75fb      	strb	r3, [r7, #23]
    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	2200      	movs	r2, #0
 800b850:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 800b854:	7dfb      	ldrb	r3, [r7, #23]
 800b856:	e224      	b.n	800bca2 <HAL_SPI_TransmitReceive_DMA+0x5a2>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	68db      	ldr	r3, [r3, #12]
 800b85c:	2b07      	cmp	r3, #7
 800b85e:	d842      	bhi.n	800b8e6 <HAL_SPI_TransmitReceive_DMA+0x1e6>
  {
    if (hspi->hdmatx->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_HALFWORD)
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b866:	699b      	ldr	r3, [r3, #24]
 800b868:	2b01      	cmp	r3, #1
 800b86a:	d109      	bne.n	800b880 <HAL_SPI_TransmitReceive_DMA+0x180>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b872:	b29b      	uxth	r3, r3
 800b874:	3301      	adds	r3, #1
 800b876:	105b      	asrs	r3, r3, #1
 800b878:	b29a      	uxth	r2, r3
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    }
    if (hspi->hdmatx->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b886:	699b      	ldr	r3, [r3, #24]
 800b888:	2b02      	cmp	r3, #2
 800b88a:	d109      	bne.n	800b8a0 <HAL_SPI_TransmitReceive_DMA+0x1a0>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b892:	b29b      	uxth	r3, r3
 800b894:	3303      	adds	r3, #3
 800b896:	109b      	asrs	r3, r3, #2
 800b898:	b29a      	uxth	r2, r3
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    }
    if (hspi->hdmarx->Init.DestDataWidth == DMA_DEST_DATAWIDTH_HALFWORD)
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b8a6:	69db      	ldr	r3, [r3, #28]
 800b8a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b8ac:	d109      	bne.n	800b8c2 <HAL_SPI_TransmitReceive_DMA+0x1c2>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 800b8b4:	b29b      	uxth	r3, r3
 800b8b6:	3301      	adds	r3, #1
 800b8b8:	105b      	asrs	r3, r3, #1
 800b8ba:	b29a      	uxth	r2, r3
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
    }
    if (hspi->hdmarx->Init.DestDataWidth == DMA_DEST_DATAWIDTH_WORD)
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b8c8:	69db      	ldr	r3, [r3, #28]
 800b8ca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b8ce:	d12f      	bne.n	800b930 <HAL_SPI_TransmitReceive_DMA+0x230>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 800b8d6:	b29b      	uxth	r3, r3
 800b8d8:	3303      	adds	r3, #3
 800b8da:	109b      	asrs	r3, r3, #2
 800b8dc:	b29a      	uxth	r2, r3
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
 800b8e4:	e024      	b.n	800b930 <HAL_SPI_TransmitReceive_DMA+0x230>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	68db      	ldr	r3, [r3, #12]
 800b8ea:	2b0f      	cmp	r3, #15
 800b8ec:	d820      	bhi.n	800b930 <HAL_SPI_TransmitReceive_DMA+0x230>
  {
    if (hspi->hdmatx->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b8f4:	699b      	ldr	r3, [r3, #24]
 800b8f6:	2b02      	cmp	r3, #2
 800b8f8:	d109      	bne.n	800b90e <HAL_SPI_TransmitReceive_DMA+0x20e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b900:	b29b      	uxth	r3, r3
 800b902:	3301      	adds	r3, #1
 800b904:	105b      	asrs	r3, r3, #1
 800b906:	b29a      	uxth	r2, r3
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    }
    if (hspi->hdmarx->Init.DestDataWidth == DMA_DEST_DATAWIDTH_WORD)
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b914:	69db      	ldr	r3, [r3, #28]
 800b916:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b91a:	d109      	bne.n	800b930 <HAL_SPI_TransmitReceive_DMA+0x230>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 800b922:	b29b      	uxth	r3, r3
 800b924:	3301      	adds	r3, #1
 800b926:	105b      	asrs	r3, r3, #1
 800b928:	b29a      	uxth	r2, r3
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
  {
    /* Adjustment done */
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800b936:	b2db      	uxtb	r3, r3
 800b938:	2b04      	cmp	r3, #4
 800b93a:	d10a      	bne.n	800b952 <HAL_SPI_TransmitReceive_DMA+0x252>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b942:	4a17      	ldr	r2, [pc, #92]	; (800b9a0 <HAL_SPI_TransmitReceive_DMA+0x2a0>)
 800b944:	665a      	str	r2, [r3, #100]	; 0x64
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b94c:	4a15      	ldr	r2, [pc, #84]	; (800b9a4 <HAL_SPI_TransmitReceive_DMA+0x2a4>)
 800b94e:	661a      	str	r2, [r3, #96]	; 0x60
 800b950:	e009      	b.n	800b966 <HAL_SPI_TransmitReceive_DMA+0x266>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b958:	4a13      	ldr	r2, [pc, #76]	; (800b9a8 <HAL_SPI_TransmitReceive_DMA+0x2a8>)
 800b95a:	665a      	str	r2, [r3, #100]	; 0x64
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b962:	4a12      	ldr	r2, [pc, #72]	; (800b9ac <HAL_SPI_TransmitReceive_DMA+0x2ac>)
 800b964:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b96c:	4a10      	ldr	r2, [pc, #64]	; (800b9b0 <HAL_SPI_TransmitReceive_DMA+0x2b0>)
 800b96e:	669a      	str	r2, [r3, #104]	; 0x68

  /* Set the DMA AbortCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b976:	2200      	movs	r2, #0
 800b978:	66da      	str	r2, [r3, #108]	; 0x6c

  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	68db      	ldr	r3, [r3, #12]
 800b97e:	2b07      	cmp	r3, #7
 800b980:	d818      	bhi.n	800b9b4 <HAL_SPI_TransmitReceive_DMA+0x2b4>
  {
    hspi->RxXferCount = Size;
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	887a      	ldrh	r2, [r7, #2]
 800b986:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
 800b98a:	e024      	b.n	800b9d6 <HAL_SPI_TransmitReceive_DMA+0x2d6>
 800b98c:	08025d28 	.word	0x08025d28
 800b990:	40013000 	.word	0x40013000
 800b994:	50013000 	.word	0x50013000
 800b998:	40003800 	.word	0x40003800
 800b99c:	50003800 	.word	0x50003800
 800b9a0:	0800c229 	.word	0x0800c229
 800b9a4:	0800c169 	.word	0x0800c169
 800b9a8:	0800c249 	.word	0x0800c249
 800b9ac:	0800c1b3 	.word	0x0800c1b3
 800b9b0:	0800c269 	.word	0x0800c269
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	68db      	ldr	r3, [r3, #12]
 800b9b8:	2b0f      	cmp	r3, #15
 800b9ba:	d806      	bhi.n	800b9ca <HAL_SPI_TransmitReceive_DMA+0x2ca>
  {
    hspi->RxXferCount = Size * 2U;
 800b9bc:	887b      	ldrh	r3, [r7, #2]
 800b9be:	005b      	lsls	r3, r3, #1
 800b9c0:	b29a      	uxth	r2, r3
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
 800b9c8:	e005      	b.n	800b9d6 <HAL_SPI_TransmitReceive_DMA+0x2d6>
  }
  else
  {
    hspi->RxXferCount = Size * 4U;
 800b9ca:	887b      	ldrh	r3, [r7, #2]
 800b9cc:	009b      	lsls	r3, r3, #2
 800b9ce:	b29a      	uxth	r2, r3
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
  }
  /* Enable the Rx DMA Stream/Channel  */
  if ((hspi->hdmarx->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b9dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b9de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d03e      	beq.n	800ba64 <HAL_SPI_TransmitReceive_DMA+0x364>
  {
    if (hspi->hdmarx->LinkedListQueue != NULL)
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b9ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d024      	beq.n	800ba3c <HAL_SPI_TransmitReceive_DMA+0x33c>
    {
      /* Set DMA data size */
      hspi->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = hspi->RxXferCount;
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 800b9f8:	b29a      	uxth	r2, r3
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ba00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	609a      	str	r2, [r3, #8]

      /* Set DMA source address */
      hspi->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = (uint32_t)&hspi->Instance->RXDR;
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ba14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	60da      	str	r2, [r3, #12]

      /* Set DMA destination address */
      hspi->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)hspi->pRxBuffPtr;
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ba24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	611a      	str	r2, [r3, #16]

      errorcode = HAL_DMAEx_List_Start_IT(hspi->hdmarx);
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ba30:	4618      	mov	r0, r3
 800ba32:	f7f8 fb41 	bl	80040b8 <HAL_DMAEx_List_Start_IT>
 800ba36:	4603      	mov	r3, r0
 800ba38:	75fb      	strb	r3, [r7, #23]
 800ba3a:	e025      	b.n	800ba88 <HAL_SPI_TransmitReceive_DMA+0x388>
    }
    else
    {
      /* Update SPI error code */
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ba42:	f043 0210 	orr.w	r2, r3, #16
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Unlock the process */
      __HAL_UNLOCK(hspi);
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	2200      	movs	r2, #0
 800ba50:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

      hspi->State = HAL_SPI_STATE_READY;
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	2201      	movs	r2, #1
 800ba58:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
      errorcode = HAL_ERROR;
 800ba5c:	2301      	movs	r3, #1
 800ba5e:	75fb      	strb	r3, [r7, #23]
      return errorcode;
 800ba60:	7dfb      	ldrb	r3, [r7, #23]
 800ba62:	e11e      	b.n	800bca2 <HAL_SPI_TransmitReceive_DMA+0x5a2>
    }
  }
  else
  {
    errorcode = HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	3330      	adds	r3, #48	; 0x30
 800ba70:	4619      	mov	r1, r3
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ba76:	461a      	mov	r2, r3
                                 hspi->RxXferCount);
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 800ba7e:	b29b      	uxth	r3, r3
    errorcode = HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 800ba80:	f7f7 fe14 	bl	80036ac <HAL_DMA_Start_IT>
 800ba84:	4603      	mov	r3, r0
 800ba86:	75fb      	strb	r3, [r7, #23]
  }

  /* Check status */
  if (errorcode != HAL_OK)
 800ba88:	7dfb      	ldrb	r3, [r7, #23]
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d013      	beq.n	800bab6 <HAL_SPI_TransmitReceive_DMA+0x3b6>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ba94:	f043 0210 	orr.w	r2, r3, #16
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	2200      	movs	r2, #0
 800baa2:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    hspi->State = HAL_SPI_STATE_READY;
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	2201      	movs	r2, #1
 800baaa:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
    errorcode = HAL_ERROR;
 800baae:	2301      	movs	r3, #1
 800bab0:	75fb      	strb	r3, [r7, #23]
    return errorcode;
 800bab2:	7dfb      	ldrb	r3, [r7, #23]
 800bab4:	e0f5      	b.n	800bca2 <HAL_SPI_TransmitReceive_DMA+0x5a2>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	689a      	ldr	r2, [r3, #8]
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bac4:	609a      	str	r2, [r3, #8]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bacc:	2200      	movs	r2, #0
 800bace:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->hdmatx->XferCpltCallback     = NULL;
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bad6:	2200      	movs	r2, #0
 800bad8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->hdmatx->XferErrorCallback    = NULL;
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bae0:	2200      	movs	r2, #0
 800bae2:	669a      	str	r2, [r3, #104]	; 0x68
  hspi->hdmatx->XferAbortCallback    = NULL;
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800baea:	2200      	movs	r2, #0
 800baec:	66da      	str	r2, [r3, #108]	; 0x6c

  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	68db      	ldr	r3, [r3, #12]
 800baf2:	2b07      	cmp	r3, #7
 800baf4:	d804      	bhi.n	800bb00 <HAL_SPI_TransmitReceive_DMA+0x400>
  {
    hspi->TxXferCount = Size;
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	887a      	ldrh	r2, [r7, #2]
 800bafa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800bafe:	e010      	b.n	800bb22 <HAL_SPI_TransmitReceive_DMA+0x422>
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	68db      	ldr	r3, [r3, #12]
 800bb04:	2b0f      	cmp	r3, #15
 800bb06:	d806      	bhi.n	800bb16 <HAL_SPI_TransmitReceive_DMA+0x416>
  {
    hspi->TxXferCount = Size * 2U;
 800bb08:	887b      	ldrh	r3, [r7, #2]
 800bb0a:	005b      	lsls	r3, r3, #1
 800bb0c:	b29a      	uxth	r2, r3
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800bb14:	e005      	b.n	800bb22 <HAL_SPI_TransmitReceive_DMA+0x422>
  }
  else
  {
    hspi->TxXferCount = Size * 4U;
 800bb16:	887b      	ldrh	r3, [r7, #2]
 800bb18:	009b      	lsls	r3, r3, #2
 800bb1a:	b29a      	uxth	r2, r3
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  }

  /* Enable the Tx DMA Stream/Channel  */
  if ((hspi->hdmatx->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bb28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d03e      	beq.n	800bbb0 <HAL_SPI_TransmitReceive_DMA+0x4b0>
  {
    if (hspi->hdmatx->LinkedListQueue != NULL)
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bb38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d024      	beq.n	800bb88 <HAL_SPI_TransmitReceive_DMA+0x488>
    {
      /* Set DMA data size */
      hspi->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = hspi->TxXferCount;
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bb44:	b29a      	uxth	r2, r3
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bb4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	609a      	str	r2, [r3, #8]

      /* Set DMA source address */
      hspi->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = (uint32_t)hspi->pTxBuffPtr;
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bb5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	60da      	str	r2, [r3, #12]

      /* Set DMA destination address */
      hspi->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)&hspi->Instance->TXDR;
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	f103 0220 	add.w	r2, r3, #32
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bb70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	611a      	str	r2, [r3, #16]

      errorcode = HAL_DMAEx_List_Start_IT(hspi->hdmatx);
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bb7c:	4618      	mov	r0, r3
 800bb7e:	f7f8 fa9b 	bl	80040b8 <HAL_DMAEx_List_Start_IT>
 800bb82:	4603      	mov	r3, r0
 800bb84:	75fb      	strb	r3, [r7, #23]
 800bb86:	e025      	b.n	800bbd4 <HAL_SPI_TransmitReceive_DMA+0x4d4>
    }
    else
    {
      /* Update SPI error code */
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bb8e:	f043 0210 	orr.w	r2, r3, #16
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Unlock the process */
      __HAL_UNLOCK(hspi);
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	2200      	movs	r2, #0
 800bb9c:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

      hspi->State = HAL_SPI_STATE_READY;
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	2201      	movs	r2, #1
 800bba4:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
      errorcode = HAL_ERROR;
 800bba8:	2301      	movs	r3, #1
 800bbaa:	75fb      	strb	r3, [r7, #23]
      return errorcode;
 800bbac:	7dfb      	ldrb	r3, [r7, #23]
 800bbae:	e078      	b.n	800bca2 <HAL_SPI_TransmitReceive_DMA+0x5a2>
    }
  }
  else
  {
    errorcode = HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bbba:	4619      	mov	r1, r3
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	3320      	adds	r3, #32
 800bbc2:	461a      	mov	r2, r3
                                 hspi->TxXferCount);
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bbca:	b29b      	uxth	r3, r3
    errorcode = HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 800bbcc:	f7f7 fd6e 	bl	80036ac <HAL_DMA_Start_IT>
 800bbd0:	4603      	mov	r3, r0
 800bbd2:	75fb      	strb	r3, [r7, #23]
  }

  /* Check status */
  if (errorcode != HAL_OK)
 800bbd4:	7dfb      	ldrb	r3, [r7, #23]
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d013      	beq.n	800bc02 <HAL_SPI_TransmitReceive_DMA+0x502>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bbe0:	f043 0210 	orr.w	r2, r3, #16
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	2200      	movs	r2, #0
 800bbee:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    hspi->State = HAL_SPI_STATE_READY;
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	2201      	movs	r2, #1
 800bbf6:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
    errorcode = HAL_ERROR;
 800bbfa:	2301      	movs	r3, #1
 800bbfc:	75fb      	strb	r3, [r7, #23]
    return errorcode;
 800bbfe:	7dfb      	ldrb	r3, [r7, #23]
 800bc00:	e04f      	b.n	800bca2 <HAL_SPI_TransmitReceive_DMA+0x5a2>
  }

  if ((hspi->hdmarx->Mode == DMA_LINKEDLIST_CIRCULAR) && (hspi->hdmatx->Mode == DMA_LINKEDLIST_CIRCULAR))
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bc08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc0a:	2b81      	cmp	r3, #129	; 0x81
 800bc0c:	d10e      	bne.n	800bc2c <HAL_SPI_TransmitReceive_DMA+0x52c>
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bc14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc16:	2b81      	cmp	r3, #129	; 0x81
 800bc18:	d108      	bne.n	800bc2c <HAL_SPI_TransmitReceive_DMA+0x52c>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	685b      	ldr	r3, [r3, #4]
 800bc20:	68fa      	ldr	r2, [r7, #12]
 800bc22:	6812      	ldr	r2, [r2, #0]
 800bc24:	0c1b      	lsrs	r3, r3, #16
 800bc26:	041b      	lsls	r3, r3, #16
 800bc28:	6053      	str	r3, [r2, #4]
 800bc2a:	e009      	b.n	800bc40 <HAL_SPI_TransmitReceive_DMA+0x540>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	685b      	ldr	r3, [r3, #4]
 800bc32:	0c1b      	lsrs	r3, r3, #16
 800bc34:	041b      	lsls	r3, r3, #16
 800bc36:	8879      	ldrh	r1, [r7, #2]
 800bc38:	68fa      	ldr	r2, [r7, #12]
 800bc3a:	6812      	ldr	r2, [r2, #0]
 800bc3c:	430b      	orrs	r3, r1
 800bc3e:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	689a      	ldr	r2, [r3, #8]
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800bc4e:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	691a      	ldr	r2, [r3, #16]
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	f442 7258 	orr.w	r2, r2, #864	; 0x360
 800bc5e:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	681a      	ldr	r2, [r3, #0]
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	f042 0201 	orr.w	r2, r2, #1
 800bc6e:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	69db      	ldr	r3, [r3, #28]
 800bc76:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d10c      	bne.n	800bc98 <HAL_SPI_TransmitReceive_DMA+0x598>
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	685b      	ldr	r3, [r3, #4]
 800bc82:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bc86:	d107      	bne.n	800bc98 <HAL_SPI_TransmitReceive_DMA+0x598>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	681a      	ldr	r2, [r3, #0]
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bc96:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	2200      	movs	r2, #0
 800bc9c:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
  return errorcode;
 800bca0:	7dfb      	ldrb	r3, [r7, #23]
}
 800bca2:	4618      	mov	r0, r3
 800bca4:	3718      	adds	r7, #24
 800bca6:	46bd      	mov	sp, r7
 800bca8:	bd80      	pop	{r7, pc}
 800bcaa:	bf00      	nop

0800bcac <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800bcac:	b580      	push	{r7, lr}
 800bcae:	b08a      	sub	sp, #40	; 0x28
 800bcb0:	af00      	add	r7, sp, #0
 800bcb2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	691b      	ldr	r3, [r3, #16]
 800bcba:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	695b      	ldr	r3, [r3, #20]
 800bcc2:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 800bcc4:	6a3a      	ldr	r2, [r7, #32]
 800bcc6:	69fb      	ldr	r3, [r7, #28]
 800bcc8:	4013      	ands	r3, r2
 800bcca:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	689b      	ldr	r3, [r3, #8]
 800bcd2:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 800bcd4:	2300      	movs	r3, #0
 800bcd6:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800bcde:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	3330      	adds	r3, #48	; 0x30
 800bce6:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800bce8:	69bb      	ldr	r3, [r7, #24]
 800bcea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d113      	bne.n	800bd1a <HAL_SPI_IRQHandler+0x6e>
 800bcf2:	69bb      	ldr	r3, [r7, #24]
 800bcf4:	f003 0320 	and.w	r3, r3, #32
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d10e      	bne.n	800bd1a <HAL_SPI_IRQHandler+0x6e>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 800bcfc:	69bb      	ldr	r3, [r7, #24]
 800bcfe:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d009      	beq.n	800bd1a <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bd0a:	6878      	ldr	r0, [r7, #4]
 800bd0c:	4798      	blx	r3
    hspi->RxISR(hspi);
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bd12:	6878      	ldr	r0, [r7, #4]
 800bd14:	4798      	blx	r3
    handled = 1UL;
 800bd16:	2301      	movs	r3, #1
 800bd18:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800bd1a:	69bb      	ldr	r3, [r7, #24]
 800bd1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d10f      	bne.n	800bd44 <HAL_SPI_IRQHandler+0x98>
 800bd24:	69bb      	ldr	r3, [r7, #24]
 800bd26:	f003 0301 	and.w	r3, r3, #1
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d00a      	beq.n	800bd44 <HAL_SPI_IRQHandler+0x98>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800bd2e:	69bb      	ldr	r3, [r7, #24]
 800bd30:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d105      	bne.n	800bd44 <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bd3c:	6878      	ldr	r0, [r7, #4]
 800bd3e:	4798      	blx	r3
    handled = 1UL;
 800bd40:	2301      	movs	r3, #1
 800bd42:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800bd44:	69bb      	ldr	r3, [r7, #24]
 800bd46:	f003 0320 	and.w	r3, r3, #32
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d10f      	bne.n	800bd6e <HAL_SPI_IRQHandler+0xc2>
 800bd4e:	69bb      	ldr	r3, [r7, #24]
 800bd50:	f003 0302 	and.w	r3, r3, #2
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d00a      	beq.n	800bd6e <HAL_SPI_IRQHandler+0xc2>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800bd58:	69bb      	ldr	r3, [r7, #24]
 800bd5a:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d105      	bne.n	800bd6e <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bd66:	6878      	ldr	r0, [r7, #4]
 800bd68:	4798      	blx	r3
    handled = 1UL;
 800bd6a:	2301      	movs	r3, #1
 800bd6c:	627b      	str	r3, [r7, #36]	; 0x24
  }


  if (handled != 0UL)
 800bd6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	f040 816c 	bne.w	800c04e <HAL_SPI_IRQHandler+0x3a2>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800bd76:	69bb      	ldr	r3, [r7, #24]
 800bd78:	f003 0308 	and.w	r3, r3, #8
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	f000 8093 	beq.w	800bea8 <HAL_SPI_IRQHandler+0x1fc>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	699a      	ldr	r2, [r3, #24]
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	f042 0208 	orr.w	r2, r2, #8
 800bd90:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	699a      	ldr	r2, [r3, #24]
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	f042 0210 	orr.w	r2, r2, #16
 800bda0:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	699a      	ldr	r2, [r3, #24]
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bdb0:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	691a      	ldr	r2, [r3, #16]
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	f022 0208 	bic.w	r2, r2, #8
 800bdc0:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	689b      	ldr	r3, [r3, #8]
 800bdc8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d13d      	bne.n	800be4c <HAL_SPI_IRQHandler+0x1a0>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 800bdd0:	e036      	b.n	800be40 <HAL_SPI_IRQHandler+0x194>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	68db      	ldr	r3, [r3, #12]
 800bdd6:	2b0f      	cmp	r3, #15
 800bdd8:	d90b      	bls.n	800bdf2 <HAL_SPI_IRQHandler+0x146>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	681a      	ldr	r2, [r3, #0]
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bde2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800bde4:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bdea:	1d1a      	adds	r2, r3, #4
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	66da      	str	r2, [r3, #108]	; 0x6c
 800bdf0:	e01d      	b.n	800be2e <HAL_SPI_IRQHandler+0x182>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	68db      	ldr	r3, [r3, #12]
 800bdf6:	2b07      	cmp	r3, #7
 800bdf8:	d90b      	bls.n	800be12 <HAL_SPI_IRQHandler+0x166>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bdfe:	68fa      	ldr	r2, [r7, #12]
 800be00:	8812      	ldrh	r2, [r2, #0]
 800be02:	b292      	uxth	r2, r2
 800be04:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800be0a:	1c9a      	adds	r2, r3, #2
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	66da      	str	r2, [r3, #108]	; 0x6c
 800be10:	e00d      	b.n	800be2e <HAL_SPI_IRQHandler+0x182>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800be1e:	7812      	ldrb	r2, [r2, #0]
 800be20:	b2d2      	uxtb	r2, r2
 800be22:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800be28:	1c5a      	adds	r2, r3, #1
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	66da      	str	r2, [r3, #108]	; 0x6c
        }

        hspi->RxXferCount--;
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 800be34:	b29b      	uxth	r3, r3
 800be36:	3b01      	subs	r3, #1
 800be38:	b29a      	uxth	r2, r3
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
      while (hspi->RxXferCount != 0UL)
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 800be46:	b29b      	uxth	r3, r3
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d1c2      	bne.n	800bdd2 <HAL_SPI_IRQHandler+0x126>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 800be4c:	6878      	ldr	r0, [r7, #4]
 800be4e:	f000 fa4c 	bl	800c2ea <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	2201      	movs	r2, #1
 800be56:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800be60:	2b00      	cmp	r3, #0
 800be62:	d005      	beq.n	800be70 <HAL_SPI_IRQHandler+0x1c4>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800be6a:	6878      	ldr	r0, [r7, #4]
 800be6c:	4798      	blx	r3
#else
      HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800be6e:	e0f3      	b.n	800c058 <HAL_SPI_IRQHandler+0x3ac>
    }

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800be70:	7cfb      	ldrb	r3, [r7, #19]
 800be72:	2b05      	cmp	r3, #5
 800be74:	d105      	bne.n	800be82 <HAL_SPI_IRQHandler+0x1d6>
    {
      hspi->TxRxCpltCallback(hspi);
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800be7c:	6878      	ldr	r0, [r7, #4]
 800be7e:	4798      	blx	r3
    else
    {
      /* End of the appropriate call */
    }

    return;
 800be80:	e0e7      	b.n	800c052 <HAL_SPI_IRQHandler+0x3a6>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800be82:	7cfb      	ldrb	r3, [r7, #19]
 800be84:	2b04      	cmp	r3, #4
 800be86:	d105      	bne.n	800be94 <HAL_SPI_IRQHandler+0x1e8>
      hspi->RxCpltCallback(hspi);
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800be8e:	6878      	ldr	r0, [r7, #4]
 800be90:	4798      	blx	r3
    return;
 800be92:	e0de      	b.n	800c052 <HAL_SPI_IRQHandler+0x3a6>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800be94:	7cfb      	ldrb	r3, [r7, #19]
 800be96:	2b03      	cmp	r3, #3
 800be98:	f040 80db 	bne.w	800c052 <HAL_SPI_IRQHandler+0x3a6>
      hspi->TxCpltCallback(hspi);
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bea2:	6878      	ldr	r0, [r7, #4]
 800bea4:	4798      	blx	r3
    return;
 800bea6:	e0d4      	b.n	800c052 <HAL_SPI_IRQHandler+0x3a6>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800bea8:	69fb      	ldr	r3, [r7, #28]
 800beaa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d00d      	beq.n	800bece <HAL_SPI_IRQHandler+0x222>
 800beb2:	6a3b      	ldr	r3, [r7, #32]
 800beb4:	f003 0308 	and.w	r3, r3, #8
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d008      	beq.n	800bece <HAL_SPI_IRQHandler+0x222>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	699a      	ldr	r2, [r3, #24]
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800beca:	619a      	str	r2, [r3, #24]

    return;
 800becc:	e0c4      	b.n	800c058 <HAL_SPI_IRQHandler+0x3ac>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800bece:	69bb      	ldr	r3, [r7, #24]
 800bed0:	f403 7358 	and.w	r3, r3, #864	; 0x360
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	f000 80bf 	beq.w	800c058 <HAL_SPI_IRQHandler+0x3ac>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800beda:	69bb      	ldr	r3, [r7, #24]
 800bedc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d00f      	beq.n	800bf04 <HAL_SPI_IRQHandler+0x258>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800beea:	f043 0204 	orr.w	r2, r3, #4
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	699a      	ldr	r2, [r3, #24]
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bf02:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800bf04:	69bb      	ldr	r3, [r7, #24]
 800bf06:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d00f      	beq.n	800bf2e <HAL_SPI_IRQHandler+0x282>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bf14:	f043 0201 	orr.w	r2, r3, #1
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	699a      	ldr	r2, [r3, #24]
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bf2c:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800bf2e:	69bb      	ldr	r3, [r7, #24]
 800bf30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d00f      	beq.n	800bf58 <HAL_SPI_IRQHandler+0x2ac>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bf3e:	f043 0208 	orr.w	r2, r3, #8
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	699a      	ldr	r2, [r3, #24]
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bf56:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800bf58:	69bb      	ldr	r3, [r7, #24]
 800bf5a:	f003 0320 	and.w	r3, r3, #32
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d00f      	beq.n	800bf82 <HAL_SPI_IRQHandler+0x2d6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bf68:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	699a      	ldr	r2, [r3, #24]
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	f042 0220 	orr.w	r2, r2, #32
 800bf80:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d064      	beq.n	800c056 <HAL_SPI_IRQHandler+0x3aa>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	681a      	ldr	r2, [r3, #0]
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	f022 0201 	bic.w	r2, r2, #1
 800bf9a:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	691b      	ldr	r3, [r3, #16]
 800bfa2:	687a      	ldr	r2, [r7, #4]
 800bfa4:	6812      	ldr	r2, [r2, #0]
 800bfa6:	f423 735a 	bic.w	r3, r3, #872	; 0x368
 800bfaa:	f023 0303 	bic.w	r3, r3, #3
 800bfae:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800bfb0:	697b      	ldr	r3, [r7, #20]
 800bfb2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800bfb6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800bfba:	d13e      	bne.n	800c03a <HAL_SPI_IRQHandler+0x38e>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	689a      	ldr	r2, [r3, #8]
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800bfca:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d015      	beq.n	800c002 <HAL_SPI_IRQHandler+0x356>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bfdc:	4a20      	ldr	r2, [pc, #128]	; (800c060 <HAL_SPI_IRQHandler+0x3b4>)
 800bfde:	66da      	str	r2, [r3, #108]	; 0x6c
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bfe6:	4618      	mov	r0, r3
 800bfe8:	f7f7 fbce 	bl	8003788 <HAL_DMA_Abort_IT>
 800bfec:	4603      	mov	r3, r0
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d007      	beq.n	800c002 <HAL_SPI_IRQHandler+0x356>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bff8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d024      	beq.n	800c056 <HAL_SPI_IRQHandler+0x3aa>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c012:	4a13      	ldr	r2, [pc, #76]	; (800c060 <HAL_SPI_IRQHandler+0x3b4>)
 800c014:	66da      	str	r2, [r3, #108]	; 0x6c
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c01c:	4618      	mov	r0, r3
 800c01e:	f7f7 fbb3 	bl	8003788 <HAL_DMA_Abort_IT>
 800c022:	4603      	mov	r3, r0
 800c024:	2b00      	cmp	r3, #0
 800c026:	d016      	beq.n	800c056 <HAL_SPI_IRQHandler+0x3aa>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c02e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800c038:	e00d      	b.n	800c056 <HAL_SPI_IRQHandler+0x3aa>
        hspi->State = HAL_SPI_STATE_READY;
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	2201      	movs	r2, #1
 800c03e:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        hspi->ErrorCallback(hspi);
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800c048:	6878      	ldr	r0, [r7, #4]
 800c04a:	4798      	blx	r3
    return;
 800c04c:	e003      	b.n	800c056 <HAL_SPI_IRQHandler+0x3aa>
    return;
 800c04e:	bf00      	nop
 800c050:	e002      	b.n	800c058 <HAL_SPI_IRQHandler+0x3ac>
    return;
 800c052:	bf00      	nop
 800c054:	e000      	b.n	800c058 <HAL_SPI_IRQHandler+0x3ac>
    return;
 800c056:	bf00      	nop
  }
}
 800c058:	3728      	adds	r7, #40	; 0x28
 800c05a:	46bd      	mov	sp, r7
 800c05c:	bd80      	pop	{r7, pc}
 800c05e:	bf00      	nop
 800c060:	0800c2b3 	.word	0x0800c2b3

0800c064 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800c064:	b480      	push	{r7}
 800c066:	b083      	sub	sp, #12
 800c068:	af00      	add	r7, sp, #0
 800c06a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800c06c:	bf00      	nop
 800c06e:	370c      	adds	r7, #12
 800c070:	46bd      	mov	sp, r7
 800c072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c076:	4770      	bx	lr

0800c078 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800c078:	b480      	push	{r7}
 800c07a:	b083      	sub	sp, #12
 800c07c:	af00      	add	r7, sp, #0
 800c07e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800c080:	bf00      	nop
 800c082:	370c      	adds	r7, #12
 800c084:	46bd      	mov	sp, r7
 800c086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c08a:	4770      	bx	lr

0800c08c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800c08c:	b480      	push	{r7}
 800c08e:	b083      	sub	sp, #12
 800c090:	af00      	add	r7, sp, #0
 800c092:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800c094:	bf00      	nop
 800c096:	370c      	adds	r7, #12
 800c098:	46bd      	mov	sp, r7
 800c09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c09e:	4770      	bx	lr

0800c0a0 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800c0a0:	b480      	push	{r7}
 800c0a2:	b083      	sub	sp, #12
 800c0a4:	af00      	add	r7, sp, #0
 800c0a6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800c0a8:	bf00      	nop
 800c0aa:	370c      	adds	r7, #12
 800c0ac:	46bd      	mov	sp, r7
 800c0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0b2:	4770      	bx	lr

0800c0b4 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800c0b4:	b480      	push	{r7}
 800c0b6:	b083      	sub	sp, #12
 800c0b8:	af00      	add	r7, sp, #0
 800c0ba:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800c0bc:	bf00      	nop
 800c0be:	370c      	adds	r7, #12
 800c0c0:	46bd      	mov	sp, r7
 800c0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c6:	4770      	bx	lr

0800c0c8 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800c0c8:	b480      	push	{r7}
 800c0ca:	b083      	sub	sp, #12
 800c0cc:	af00      	add	r7, sp, #0
 800c0ce:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800c0d0:	bf00      	nop
 800c0d2:	370c      	adds	r7, #12
 800c0d4:	46bd      	mov	sp, r7
 800c0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0da:	4770      	bx	lr

0800c0dc <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800c0dc:	b480      	push	{r7}
 800c0de:	b083      	sub	sp, #12
 800c0e0:	af00      	add	r7, sp, #0
 800c0e2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800c0e4:	bf00      	nop
 800c0e6:	370c      	adds	r7, #12
 800c0e8:	46bd      	mov	sp, r7
 800c0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ee:	4770      	bx	lr

0800c0f0 <HAL_SPI_AbortCpltCallback>:
  * @brief  SPI Abort Complete callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_AbortCpltCallback(SPI_HandleTypeDef *hspi)
{
 800c0f0:	b480      	push	{r7}
 800c0f2:	b083      	sub	sp, #12
 800c0f4:	af00      	add	r7, sp, #0
 800c0f6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_AbortCpltCallback can be implemented in the user file.
   */
}
 800c0f8:	bf00      	nop
 800c0fa:	370c      	adds	r7, #12
 800c0fc:	46bd      	mov	sp, r7
 800c0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c102:	4770      	bx	lr

0800c104 <HAL_SPI_GetError>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI error code in bitmap format
  */
uint32_t HAL_SPI_GetError(SPI_HandleTypeDef *hspi)
{
 800c104:	b480      	push	{r7}
 800c106:	b083      	sub	sp, #12
 800c108:	af00      	add	r7, sp, #0
 800c10a:	6078      	str	r0, [r7, #4]
  /* Return SPI ErrorCode */
  return hspi->ErrorCode;
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
}
 800c112:	4618      	mov	r0, r3
 800c114:	370c      	adds	r7, #12
 800c116:	46bd      	mov	sp, r7
 800c118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c11c:	4770      	bx	lr

0800c11e <SPI_DMATransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800c11e:	b580      	push	{r7, lr}
 800c120:	b084      	sub	sp, #16
 800c122:	af00      	add	r7, sp, #0
 800c124:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c12a:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800c132:	b2db      	uxtb	r3, r3
 800c134:	2b07      	cmp	r3, #7
 800c136:	d013      	beq.n	800c160 <SPI_DMATransmitCplt+0x42>
  {
    if (hspi->hdmatx->Mode == DMA_LINKEDLIST_CIRCULAR)
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c13e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c140:	2b81      	cmp	r3, #129	; 0x81
 800c142:	d105      	bne.n	800c150 <SPI_DMATransmitCplt+0x32>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxCpltCallback(hspi);
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c14a:	68f8      	ldr	r0, [r7, #12]
 800c14c:	4798      	blx	r3
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 800c14e:	e007      	b.n	800c160 <SPI_DMATransmitCplt+0x42>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	691a      	ldr	r2, [r3, #16]
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	f042 0208 	orr.w	r2, r2, #8
 800c15e:	611a      	str	r2, [r3, #16]
}
 800c160:	bf00      	nop
 800c162:	3710      	adds	r7, #16
 800c164:	46bd      	mov	sp, r7
 800c166:	bd80      	pop	{r7, pc}

0800c168 <SPI_DMAReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c168:	b580      	push	{r7, lr}
 800c16a:	b084      	sub	sp, #16
 800c16c:	af00      	add	r7, sp, #0
 800c16e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c174:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800c17c:	b2db      	uxtb	r3, r3
 800c17e:	2b07      	cmp	r3, #7
 800c180:	d013      	beq.n	800c1aa <SPI_DMAReceiveCplt+0x42>
  {
    if (hspi->hdmarx->Mode == DMA_LINKEDLIST_CIRCULAR)
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c188:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c18a:	2b81      	cmp	r3, #129	; 0x81
 800c18c:	d105      	bne.n	800c19a <SPI_DMAReceiveCplt+0x32>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->RxCpltCallback(hspi);
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c194:	68f8      	ldr	r0, [r7, #12]
 800c196:	4798      	blx	r3
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 800c198:	e007      	b.n	800c1aa <SPI_DMAReceiveCplt+0x42>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	691a      	ldr	r2, [r3, #16]
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	f042 0208 	orr.w	r2, r2, #8
 800c1a8:	611a      	str	r2, [r3, #16]
}
 800c1aa:	bf00      	nop
 800c1ac:	3710      	adds	r7, #16
 800c1ae:	46bd      	mov	sp, r7
 800c1b0:	bd80      	pop	{r7, pc}

0800c1b2 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c1b2:	b580      	push	{r7, lr}
 800c1b4:	b084      	sub	sp, #16
 800c1b6:	af00      	add	r7, sp, #0
 800c1b8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c1be:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800c1c6:	b2db      	uxtb	r3, r3
 800c1c8:	2b07      	cmp	r3, #7
 800c1ca:	d019      	beq.n	800c200 <SPI_DMATransmitReceiveCplt+0x4e>
  {
    if ((hspi->hdmarx->Mode == DMA_LINKEDLIST_CIRCULAR) &&
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c1d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c1d4:	2b81      	cmp	r3, #129	; 0x81
 800c1d6:	d10b      	bne.n	800c1f0 <SPI_DMATransmitReceiveCplt+0x3e>
        (hspi->hdmatx->Mode == DMA_LINKEDLIST_CIRCULAR))
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c1de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    if ((hspi->hdmarx->Mode == DMA_LINKEDLIST_CIRCULAR) &&
 800c1e0:	2b81      	cmp	r3, #129	; 0x81
 800c1e2:	d105      	bne.n	800c1f0 <SPI_DMATransmitReceiveCplt+0x3e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxRxCpltCallback(hspi);
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c1ea:	68f8      	ldr	r0, [r7, #12]
 800c1ec:	4798      	blx	r3
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 800c1ee:	e007      	b.n	800c200 <SPI_DMATransmitReceiveCplt+0x4e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	691a      	ldr	r2, [r3, #16]
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	f042 0208 	orr.w	r2, r2, #8
 800c1fe:	611a      	str	r2, [r3, #16]
}
 800c200:	bf00      	nop
 800c202:	3710      	adds	r7, #16
 800c204:	46bd      	mov	sp, r7
 800c206:	bd80      	pop	{r7, pc}

0800c208 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800c208:	b580      	push	{r7, lr}
 800c20a:	b084      	sub	sp, #16
 800c20c:	af00      	add	r7, sp, #0
 800c20e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c214:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxHalfCpltCallback(hspi);
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c21c:	68f8      	ldr	r0, [r7, #12]
 800c21e:	4798      	blx	r3
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800c220:	bf00      	nop
 800c222:	3710      	adds	r7, #16
 800c224:	46bd      	mov	sp, r7
 800c226:	bd80      	pop	{r7, pc}

0800c228 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c228:	b580      	push	{r7, lr}
 800c22a:	b084      	sub	sp, #16
 800c22c:	af00      	add	r7, sp, #0
 800c22e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c234:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->RxHalfCpltCallback(hspi);
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c23c:	68f8      	ldr	r0, [r7, #12]
 800c23e:	4798      	blx	r3
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800c240:	bf00      	nop
 800c242:	3710      	adds	r7, #16
 800c244:	46bd      	mov	sp, r7
 800c246:	bd80      	pop	{r7, pc}

0800c248 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c248:	b580      	push	{r7, lr}
 800c24a:	b084      	sub	sp, #16
 800c24c:	af00      	add	r7, sp, #0
 800c24e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c254:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxRxHalfCpltCallback(hspi);
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800c25c:	68f8      	ldr	r0, [r7, #12]
 800c25e:	4798      	blx	r3
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800c260:	bf00      	nop
 800c262:	3710      	adds	r7, #16
 800c264:	46bd      	mov	sp, r7
 800c266:	bd80      	pop	{r7, pc}

0800c268 <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800c268:	b580      	push	{r7, lr}
 800c26a:	b084      	sub	sp, #16
 800c26c:	af00      	add	r7, sp, #0
 800c26e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c274:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_NONE)
 800c276:	6878      	ldr	r0, [r7, #4]
 800c278:	f7f7 fc23 	bl	8003ac2 <HAL_DMA_GetError>
 800c27c:	4603      	mov	r3, r0
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d013      	beq.n	800c2aa <SPI_DMAError+0x42>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 800c282:	68f8      	ldr	r0, [r7, #12]
 800c284:	f000 f831 	bl	800c2ea <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c28e:	f043 0210 	orr.w	r2, r3, #16
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    hspi->State = HAL_SPI_STATE_READY;
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	2201      	movs	r2, #1
 800c29c:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800c2a6:	68f8      	ldr	r0, [r7, #12]
 800c2a8:	4798      	blx	r3
#else
    HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 800c2aa:	bf00      	nop
 800c2ac:	3710      	adds	r7, #16
 800c2ae:	46bd      	mov	sp, r7
 800c2b0:	bd80      	pop	{r7, pc}

0800c2b2 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c2b2:	b580      	push	{r7, lr}
 800c2b4:	b084      	sub	sp, #16
 800c2b6:	af00      	add	r7, sp, #0
 800c2b8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c2be:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	2200      	movs	r2, #0
 800c2c4:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
  hspi->TxXferCount = (uint16_t) 0UL;
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	2200      	movs	r2, #0
 800c2cc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	2201      	movs	r2, #1
 800c2d4:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800c2de:	68f8      	ldr	r0, [r7, #12]
 800c2e0:	4798      	blx	r3
#else
  HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800c2e2:	bf00      	nop
 800c2e4:	3710      	adds	r7, #16
 800c2e6:	46bd      	mov	sp, r7
 800c2e8:	bd80      	pop	{r7, pc}

0800c2ea <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800c2ea:	b480      	push	{r7}
 800c2ec:	b085      	sub	sp, #20
 800c2ee:	af00      	add	r7, sp, #0
 800c2f0:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	695b      	ldr	r3, [r3, #20]
 800c2f8:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	699a      	ldr	r2, [r3, #24]
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	f042 0208 	orr.w	r2, r2, #8
 800c308:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	699a      	ldr	r2, [r3, #24]
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	f042 0210 	orr.w	r2, r2, #16
 800c318:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	681a      	ldr	r2, [r3, #0]
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	f022 0201 	bic.w	r2, r2, #1
 800c328:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	691b      	ldr	r3, [r3, #16]
 800c330:	687a      	ldr	r2, [r7, #4]
 800c332:	6812      	ldr	r2, [r2, #0]
 800c334:	f423 735b 	bic.w	r3, r3, #876	; 0x36c
 800c338:	f023 0303 	bic.w	r3, r3, #3
 800c33c:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	689a      	ldr	r2, [r3, #8]
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800c34c:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800c354:	b2db      	uxtb	r3, r3
 800c356:	2b04      	cmp	r3, #4
 800c358:	d014      	beq.n	800c384 <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	f003 0320 	and.w	r3, r3, #32
 800c360:	2b00      	cmp	r3, #0
 800c362:	d00f      	beq.n	800c384 <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c36a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	699a      	ldr	r2, [r3, #24]
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	f042 0220 	orr.w	r2, r2, #32
 800c382:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800c38a:	b2db      	uxtb	r3, r3
 800c38c:	2b03      	cmp	r3, #3
 800c38e:	d014      	beq.n	800c3ba <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800c390:	68fb      	ldr	r3, [r7, #12]
 800c392:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c396:	2b00      	cmp	r3, #0
 800c398:	d00f      	beq.n	800c3ba <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c3a0:	f043 0204 	orr.w	r2, r3, #4
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	699a      	ldr	r2, [r3, #24]
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c3b8:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d00f      	beq.n	800c3e4 <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c3ca:	f043 0201 	orr.w	r2, r3, #1
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	699a      	ldr	r2, [r3, #24]
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c3e2:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d00f      	beq.n	800c40e <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c3f4:	f043 0208 	orr.w	r2, r3, #8
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	699a      	ldr	r2, [r3, #24]
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c40c:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	2200      	movs	r2, #0
 800c412:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	2200      	movs	r2, #0
 800c41a:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
}
 800c41e:	bf00      	nop
 800c420:	3714      	adds	r7, #20
 800c422:	46bd      	mov	sp, r7
 800c424:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c428:	4770      	bx	lr

0800c42a <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 800c42a:	b580      	push	{r7, lr}
 800c42c:	b084      	sub	sp, #16
 800c42e:	af00      	add	r7, sp, #0
 800c430:	60f8      	str	r0, [r7, #12]
 800c432:	60b9      	str	r1, [r7, #8]
 800c434:	603b      	str	r3, [r7, #0]
 800c436:	4613      	mov	r3, r2
 800c438:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800c43a:	e010      	b.n	800c45e <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c43c:	f7f6 fc44 	bl	8002cc8 <HAL_GetTick>
 800c440:	4602      	mov	r2, r0
 800c442:	683b      	ldr	r3, [r7, #0]
 800c444:	1ad3      	subs	r3, r2, r3
 800c446:	69ba      	ldr	r2, [r7, #24]
 800c448:	429a      	cmp	r2, r3
 800c44a:	d803      	bhi.n	800c454 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800c44c:	69bb      	ldr	r3, [r7, #24]
 800c44e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c452:	d102      	bne.n	800c45a <SPI_WaitOnFlagUntilTimeout+0x30>
 800c454:	69bb      	ldr	r3, [r7, #24]
 800c456:	2b00      	cmp	r3, #0
 800c458:	d101      	bne.n	800c45e <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800c45a:	2303      	movs	r3, #3
 800c45c:	e00f      	b.n	800c47e <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	695a      	ldr	r2, [r3, #20]
 800c464:	68bb      	ldr	r3, [r7, #8]
 800c466:	4013      	ands	r3, r2
 800c468:	68ba      	ldr	r2, [r7, #8]
 800c46a:	429a      	cmp	r2, r3
 800c46c:	bf0c      	ite	eq
 800c46e:	2301      	moveq	r3, #1
 800c470:	2300      	movne	r3, #0
 800c472:	b2db      	uxtb	r3, r3
 800c474:	461a      	mov	r2, r3
 800c476:	79fb      	ldrb	r3, [r7, #7]
 800c478:	429a      	cmp	r2, r3
 800c47a:	d0df      	beq.n	800c43c <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800c47c:	2300      	movs	r3, #0
}
 800c47e:	4618      	mov	r0, r3
 800c480:	3710      	adds	r7, #16
 800c482:	46bd      	mov	sp, r7
 800c484:	bd80      	pop	{r7, pc}

0800c486 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800c486:	b480      	push	{r7}
 800c488:	b085      	sub	sp, #20
 800c48a:	af00      	add	r7, sp, #0
 800c48c:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c492:	095b      	lsrs	r3, r3, #5
 800c494:	3301      	adds	r3, #1
 800c496:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	68db      	ldr	r3, [r3, #12]
 800c49c:	3301      	adds	r3, #1
 800c49e:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800c4a0:	68bb      	ldr	r3, [r7, #8]
 800c4a2:	3307      	adds	r3, #7
 800c4a4:	08db      	lsrs	r3, r3, #3
 800c4a6:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800c4a8:	68bb      	ldr	r3, [r7, #8]
 800c4aa:	68fa      	ldr	r2, [r7, #12]
 800c4ac:	fb02 f303 	mul.w	r3, r2, r3
}
 800c4b0:	4618      	mov	r0, r3
 800c4b2:	3714      	adds	r7, #20
 800c4b4:	46bd      	mov	sp, r7
 800c4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ba:	4770      	bx	lr

0800c4bc <HAL_SPIEx_SetConfigAutonomousMode>:
  * @param  sConfig Pointer to a SPI_HandleTypeDef structure that contains
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi, SPI_AutonomousModeConfTypeDef *sConfig)
{
 800c4bc:	b580      	push	{r7, lr}
 800c4be:	b082      	sub	sp, #8
 800c4c0:	af00      	add	r7, sp, #0
 800c4c2:	6078      	str	r0, [r7, #4]
 800c4c4:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800c4cc:	b2db      	uxtb	r3, r3
 800c4ce:	2b01      	cmp	r3, #1
 800c4d0:	f040 80cc 	bne.w	800c66c <HAL_SPIEx_SetConfigAutonomousMode+0x1b0>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800c4da:	2b01      	cmp	r3, #1
 800c4dc:	d101      	bne.n	800c4e2 <HAL_SPIEx_SetConfigAutonomousMode+0x26>
 800c4de:	2302      	movs	r3, #2
 800c4e0:	e0c5      	b.n	800c66e <HAL_SPIEx_SetConfigAutonomousMode+0x1b2>
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	2201      	movs	r2, #1
 800c4e6:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	2202      	movs	r2, #2
 800c4ee:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

    /* Check the parameters */
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	4a60      	ldr	r2, [pc, #384]	; (800c678 <HAL_SPIEx_SetConfigAutonomousMode+0x1bc>)
 800c4f8:	4293      	cmp	r3, r2
 800c4fa:	d142      	bne.n	800c582 <HAL_SPIEx_SetConfigAutonomousMode+0xc6>
 800c4fc:	683b      	ldr	r3, [r7, #0]
 800c4fe:	685b      	ldr	r3, [r3, #4]
 800c500:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c504:	d036      	beq.n	800c574 <HAL_SPIEx_SetConfigAutonomousMode+0xb8>
 800c506:	683b      	ldr	r3, [r7, #0]
 800c508:	685b      	ldr	r3, [r3, #4]
 800c50a:	4a5c      	ldr	r2, [pc, #368]	; (800c67c <HAL_SPIEx_SetConfigAutonomousMode+0x1c0>)
 800c50c:	4293      	cmp	r3, r2
 800c50e:	d031      	beq.n	800c574 <HAL_SPIEx_SetConfigAutonomousMode+0xb8>
 800c510:	683b      	ldr	r3, [r7, #0]
 800c512:	685b      	ldr	r3, [r3, #4]
 800c514:	4a5a      	ldr	r2, [pc, #360]	; (800c680 <HAL_SPIEx_SetConfigAutonomousMode+0x1c4>)
 800c516:	4293      	cmp	r3, r2
 800c518:	d02c      	beq.n	800c574 <HAL_SPIEx_SetConfigAutonomousMode+0xb8>
 800c51a:	683b      	ldr	r3, [r7, #0]
 800c51c:	685b      	ldr	r3, [r3, #4]
 800c51e:	4a59      	ldr	r2, [pc, #356]	; (800c684 <HAL_SPIEx_SetConfigAutonomousMode+0x1c8>)
 800c520:	4293      	cmp	r3, r2
 800c522:	d027      	beq.n	800c574 <HAL_SPIEx_SetConfigAutonomousMode+0xb8>
 800c524:	683b      	ldr	r3, [r7, #0]
 800c526:	685b      	ldr	r3, [r3, #4]
 800c528:	4a57      	ldr	r2, [pc, #348]	; (800c688 <HAL_SPIEx_SetConfigAutonomousMode+0x1cc>)
 800c52a:	4293      	cmp	r3, r2
 800c52c:	d022      	beq.n	800c574 <HAL_SPIEx_SetConfigAutonomousMode+0xb8>
 800c52e:	683b      	ldr	r3, [r7, #0]
 800c530:	685b      	ldr	r3, [r3, #4]
 800c532:	4a56      	ldr	r2, [pc, #344]	; (800c68c <HAL_SPIEx_SetConfigAutonomousMode+0x1d0>)
 800c534:	4293      	cmp	r3, r2
 800c536:	d01d      	beq.n	800c574 <HAL_SPIEx_SetConfigAutonomousMode+0xb8>
 800c538:	683b      	ldr	r3, [r7, #0]
 800c53a:	685b      	ldr	r3, [r3, #4]
 800c53c:	4a54      	ldr	r2, [pc, #336]	; (800c690 <HAL_SPIEx_SetConfigAutonomousMode+0x1d4>)
 800c53e:	4293      	cmp	r3, r2
 800c540:	d018      	beq.n	800c574 <HAL_SPIEx_SetConfigAutonomousMode+0xb8>
 800c542:	683b      	ldr	r3, [r7, #0]
 800c544:	685b      	ldr	r3, [r3, #4]
 800c546:	4a53      	ldr	r2, [pc, #332]	; (800c694 <HAL_SPIEx_SetConfigAutonomousMode+0x1d8>)
 800c548:	4293      	cmp	r3, r2
 800c54a:	d013      	beq.n	800c574 <HAL_SPIEx_SetConfigAutonomousMode+0xb8>
 800c54c:	683b      	ldr	r3, [r7, #0]
 800c54e:	685b      	ldr	r3, [r3, #4]
 800c550:	4a51      	ldr	r2, [pc, #324]	; (800c698 <HAL_SPIEx_SetConfigAutonomousMode+0x1dc>)
 800c552:	4293      	cmp	r3, r2
 800c554:	d00e      	beq.n	800c574 <HAL_SPIEx_SetConfigAutonomousMode+0xb8>
 800c556:	683b      	ldr	r3, [r7, #0]
 800c558:	685b      	ldr	r3, [r3, #4]
 800c55a:	4a50      	ldr	r2, [pc, #320]	; (800c69c <HAL_SPIEx_SetConfigAutonomousMode+0x1e0>)
 800c55c:	4293      	cmp	r3, r2
 800c55e:	d009      	beq.n	800c574 <HAL_SPIEx_SetConfigAutonomousMode+0xb8>
 800c560:	683b      	ldr	r3, [r7, #0]
 800c562:	685b      	ldr	r3, [r3, #4]
 800c564:	4a4e      	ldr	r2, [pc, #312]	; (800c6a0 <HAL_SPIEx_SetConfigAutonomousMode+0x1e4>)
 800c566:	4293      	cmp	r3, r2
 800c568:	d004      	beq.n	800c574 <HAL_SPIEx_SetConfigAutonomousMode+0xb8>
 800c56a:	683b      	ldr	r3, [r7, #0]
 800c56c:	685b      	ldr	r3, [r3, #4]
 800c56e:	4a4d      	ldr	r2, [pc, #308]	; (800c6a4 <HAL_SPIEx_SetConfigAutonomousMode+0x1e8>)
 800c570:	4293      	cmp	r3, r2
 800c572:	d101      	bne.n	800c578 <HAL_SPIEx_SetConfigAutonomousMode+0xbc>
 800c574:	2301      	movs	r3, #1
 800c576:	e000      	b.n	800c57a <HAL_SPIEx_SetConfigAutonomousMode+0xbe>
 800c578:	2300      	movs	r3, #0
 800c57a:	f003 0301 	and.w	r3, r3, #1
 800c57e:	b2db      	uxtb	r3, r3
 800c580:	e041      	b.n	800c606 <HAL_SPIEx_SetConfigAutonomousMode+0x14a>
 800c582:	683b      	ldr	r3, [r7, #0]
 800c584:	685b      	ldr	r3, [r3, #4]
 800c586:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c58a:	d036      	beq.n	800c5fa <HAL_SPIEx_SetConfigAutonomousMode+0x13e>
 800c58c:	683b      	ldr	r3, [r7, #0]
 800c58e:	685b      	ldr	r3, [r3, #4]
 800c590:	4a45      	ldr	r2, [pc, #276]	; (800c6a8 <HAL_SPIEx_SetConfigAutonomousMode+0x1ec>)
 800c592:	4293      	cmp	r3, r2
 800c594:	d031      	beq.n	800c5fa <HAL_SPIEx_SetConfigAutonomousMode+0x13e>
 800c596:	683b      	ldr	r3, [r7, #0]
 800c598:	685b      	ldr	r3, [r3, #4]
 800c59a:	4a44      	ldr	r2, [pc, #272]	; (800c6ac <HAL_SPIEx_SetConfigAutonomousMode+0x1f0>)
 800c59c:	4293      	cmp	r3, r2
 800c59e:	d02c      	beq.n	800c5fa <HAL_SPIEx_SetConfigAutonomousMode+0x13e>
 800c5a0:	683b      	ldr	r3, [r7, #0]
 800c5a2:	685b      	ldr	r3, [r3, #4]
 800c5a4:	4a42      	ldr	r2, [pc, #264]	; (800c6b0 <HAL_SPIEx_SetConfigAutonomousMode+0x1f4>)
 800c5a6:	4293      	cmp	r3, r2
 800c5a8:	d027      	beq.n	800c5fa <HAL_SPIEx_SetConfigAutonomousMode+0x13e>
 800c5aa:	683b      	ldr	r3, [r7, #0]
 800c5ac:	685b      	ldr	r3, [r3, #4]
 800c5ae:	4a41      	ldr	r2, [pc, #260]	; (800c6b4 <HAL_SPIEx_SetConfigAutonomousMode+0x1f8>)
 800c5b0:	4293      	cmp	r3, r2
 800c5b2:	d022      	beq.n	800c5fa <HAL_SPIEx_SetConfigAutonomousMode+0x13e>
 800c5b4:	683b      	ldr	r3, [r7, #0]
 800c5b6:	685b      	ldr	r3, [r3, #4]
 800c5b8:	4a3f      	ldr	r2, [pc, #252]	; (800c6b8 <HAL_SPIEx_SetConfigAutonomousMode+0x1fc>)
 800c5ba:	4293      	cmp	r3, r2
 800c5bc:	d01d      	beq.n	800c5fa <HAL_SPIEx_SetConfigAutonomousMode+0x13e>
 800c5be:	683b      	ldr	r3, [r7, #0]
 800c5c0:	685b      	ldr	r3, [r3, #4]
 800c5c2:	4a3e      	ldr	r2, [pc, #248]	; (800c6bc <HAL_SPIEx_SetConfigAutonomousMode+0x200>)
 800c5c4:	4293      	cmp	r3, r2
 800c5c6:	d018      	beq.n	800c5fa <HAL_SPIEx_SetConfigAutonomousMode+0x13e>
 800c5c8:	683b      	ldr	r3, [r7, #0]
 800c5ca:	685b      	ldr	r3, [r3, #4]
 800c5cc:	4a3c      	ldr	r2, [pc, #240]	; (800c6c0 <HAL_SPIEx_SetConfigAutonomousMode+0x204>)
 800c5ce:	4293      	cmp	r3, r2
 800c5d0:	d013      	beq.n	800c5fa <HAL_SPIEx_SetConfigAutonomousMode+0x13e>
 800c5d2:	683b      	ldr	r3, [r7, #0]
 800c5d4:	685b      	ldr	r3, [r3, #4]
 800c5d6:	4a3b      	ldr	r2, [pc, #236]	; (800c6c4 <HAL_SPIEx_SetConfigAutonomousMode+0x208>)
 800c5d8:	4293      	cmp	r3, r2
 800c5da:	d00e      	beq.n	800c5fa <HAL_SPIEx_SetConfigAutonomousMode+0x13e>
 800c5dc:	683b      	ldr	r3, [r7, #0]
 800c5de:	685b      	ldr	r3, [r3, #4]
 800c5e0:	4a39      	ldr	r2, [pc, #228]	; (800c6c8 <HAL_SPIEx_SetConfigAutonomousMode+0x20c>)
 800c5e2:	4293      	cmp	r3, r2
 800c5e4:	d009      	beq.n	800c5fa <HAL_SPIEx_SetConfigAutonomousMode+0x13e>
 800c5e6:	683b      	ldr	r3, [r7, #0]
 800c5e8:	685b      	ldr	r3, [r3, #4]
 800c5ea:	4a38      	ldr	r2, [pc, #224]	; (800c6cc <HAL_SPIEx_SetConfigAutonomousMode+0x210>)
 800c5ec:	4293      	cmp	r3, r2
 800c5ee:	d004      	beq.n	800c5fa <HAL_SPIEx_SetConfigAutonomousMode+0x13e>
 800c5f0:	683b      	ldr	r3, [r7, #0]
 800c5f2:	685b      	ldr	r3, [r3, #4]
 800c5f4:	4a36      	ldr	r2, [pc, #216]	; (800c6d0 <HAL_SPIEx_SetConfigAutonomousMode+0x214>)
 800c5f6:	4293      	cmp	r3, r2
 800c5f8:	d101      	bne.n	800c5fe <HAL_SPIEx_SetConfigAutonomousMode+0x142>
 800c5fa:	2301      	movs	r3, #1
 800c5fc:	e000      	b.n	800c600 <HAL_SPIEx_SetConfigAutonomousMode+0x144>
 800c5fe:	2300      	movs	r3, #0
 800c600:	f003 0301 	and.w	r3, r3, #1
 800c604:	b2db      	uxtb	r3, r3
 800c606:	2b00      	cmp	r3, #0
 800c608:	d103      	bne.n	800c612 <HAL_SPIEx_SetConfigAutonomousMode+0x156>
 800c60a:	21e6      	movs	r1, #230	; 0xe6
 800c60c:	4831      	ldr	r0, [pc, #196]	; (800c6d4 <HAL_SPIEx_SetConfigAutonomousMode+0x218>)
 800c60e:	f008 fe4c 	bl	80152aa <assert_failed>

    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));
 800c612:	683b      	ldr	r3, [r7, #0]
 800c614:	689b      	ldr	r3, [r3, #8]
 800c616:	2b00      	cmp	r3, #0
 800c618:	d008      	beq.n	800c62c <HAL_SPIEx_SetConfigAutonomousMode+0x170>
 800c61a:	683b      	ldr	r3, [r7, #0]
 800c61c:	689b      	ldr	r3, [r3, #8]
 800c61e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c622:	d003      	beq.n	800c62c <HAL_SPIEx_SetConfigAutonomousMode+0x170>
 800c624:	21e8      	movs	r1, #232	; 0xe8
 800c626:	482b      	ldr	r0, [pc, #172]	; (800c6d4 <HAL_SPIEx_SetConfigAutonomousMode+0x218>)
 800c628:	f008 fe3f 	bl	80152aa <assert_failed>

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	681a      	ldr	r2, [r3, #0]
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	f022 0201 	bic.w	r2, r2, #1
 800c63a:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 800c63c:	683b      	ldr	r3, [r7, #0]
 800c63e:	681a      	ldr	r2, [r3, #0]
 800c640:	683b      	ldr	r3, [r7, #0]
 800c642:	685b      	ldr	r3, [r3, #4]
 800c644:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800c648:	ea42 0103 	orr.w	r1, r2, r3
 800c64c:	683b      	ldr	r3, [r7, #0]
 800c64e:	689a      	ldr	r2, [r3, #8]
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	430a      	orrs	r2, r1
 800c656:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	2201      	movs	r2, #1
 800c65c:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	2200      	movs	r2, #0
 800c664:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800c668:	2300      	movs	r3, #0
 800c66a:	e000      	b.n	800c66e <HAL_SPIEx_SetConfigAutonomousMode+0x1b2>
  }
  else
  {
    return HAL_ERROR;
 800c66c:	2301      	movs	r3, #1
  }
}
 800c66e:	4618      	mov	r0, r3
 800c670:	3708      	adds	r7, #8
 800c672:	46bd      	mov	sp, r7
 800c674:	bd80      	pop	{r7, pc}
 800c676:	bf00      	nop
 800c678:	46002000 	.word	0x46002000
 800c67c:	20010000 	.word	0x20010000
 800c680:	20020000 	.word	0x20020000
 800c684:	20030000 	.word	0x20030000
 800c688:	20040000 	.word	0x20040000
 800c68c:	20050000 	.word	0x20050000
 800c690:	20060000 	.word	0x20060000
 800c694:	20070000 	.word	0x20070000
 800c698:	20080000 	.word	0x20080000
 800c69c:	20090000 	.word	0x20090000
 800c6a0:	200a0000 	.word	0x200a0000
 800c6a4:	200b0000 	.word	0x200b0000
 800c6a8:	10010000 	.word	0x10010000
 800c6ac:	10020000 	.word	0x10020000
 800c6b0:	10030000 	.word	0x10030000
 800c6b4:	10040000 	.word	0x10040000
 800c6b8:	10050000 	.word	0x10050000
 800c6bc:	10060000 	.word	0x10060000
 800c6c0:	10070000 	.word	0x10070000
 800c6c4:	10080000 	.word	0x10080000
 800c6c8:	10090000 	.word	0x10090000
 800c6cc:	100a0000 	.word	0x100a0000
 800c6d0:	100b0000 	.word	0x100b0000
 800c6d4:	08025d90 	.word	0x08025d90

0800c6d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c6d8:	b580      	push	{r7, lr}
 800c6da:	b082      	sub	sp, #8
 800c6dc:	af00      	add	r7, sp, #0
 800c6de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d101      	bne.n	800c6ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c6e6:	2301      	movs	r3, #1
 800c6e8:	e15f      	b.n	800c9aa <HAL_TIM_Base_Init+0x2d2>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	4a7a      	ldr	r2, [pc, #488]	; (800c8d8 <HAL_TIM_Base_Init+0x200>)
 800c6f0:	4293      	cmp	r3, r2
 800c6f2:	d06d      	beq.n	800c7d0 <HAL_TIM_Base_Init+0xf8>
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	4a78      	ldr	r2, [pc, #480]	; (800c8dc <HAL_TIM_Base_Init+0x204>)
 800c6fa:	4293      	cmp	r3, r2
 800c6fc:	d068      	beq.n	800c7d0 <HAL_TIM_Base_Init+0xf8>
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c706:	d063      	beq.n	800c7d0 <HAL_TIM_Base_Init+0xf8>
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c710:	d05e      	beq.n	800c7d0 <HAL_TIM_Base_Init+0xf8>
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	4a72      	ldr	r2, [pc, #456]	; (800c8e0 <HAL_TIM_Base_Init+0x208>)
 800c718:	4293      	cmp	r3, r2
 800c71a:	d059      	beq.n	800c7d0 <HAL_TIM_Base_Init+0xf8>
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	4a70      	ldr	r2, [pc, #448]	; (800c8e4 <HAL_TIM_Base_Init+0x20c>)
 800c722:	4293      	cmp	r3, r2
 800c724:	d054      	beq.n	800c7d0 <HAL_TIM_Base_Init+0xf8>
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	4a6f      	ldr	r2, [pc, #444]	; (800c8e8 <HAL_TIM_Base_Init+0x210>)
 800c72c:	4293      	cmp	r3, r2
 800c72e:	d04f      	beq.n	800c7d0 <HAL_TIM_Base_Init+0xf8>
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	4a6d      	ldr	r2, [pc, #436]	; (800c8ec <HAL_TIM_Base_Init+0x214>)
 800c736:	4293      	cmp	r3, r2
 800c738:	d04a      	beq.n	800c7d0 <HAL_TIM_Base_Init+0xf8>
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	4a6c      	ldr	r2, [pc, #432]	; (800c8f0 <HAL_TIM_Base_Init+0x218>)
 800c740:	4293      	cmp	r3, r2
 800c742:	d045      	beq.n	800c7d0 <HAL_TIM_Base_Init+0xf8>
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	4a6a      	ldr	r2, [pc, #424]	; (800c8f4 <HAL_TIM_Base_Init+0x21c>)
 800c74a:	4293      	cmp	r3, r2
 800c74c:	d040      	beq.n	800c7d0 <HAL_TIM_Base_Init+0xf8>
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	4a69      	ldr	r2, [pc, #420]	; (800c8f8 <HAL_TIM_Base_Init+0x220>)
 800c754:	4293      	cmp	r3, r2
 800c756:	d03b      	beq.n	800c7d0 <HAL_TIM_Base_Init+0xf8>
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	4a67      	ldr	r2, [pc, #412]	; (800c8fc <HAL_TIM_Base_Init+0x224>)
 800c75e:	4293      	cmp	r3, r2
 800c760:	d036      	beq.n	800c7d0 <HAL_TIM_Base_Init+0xf8>
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	4a66      	ldr	r2, [pc, #408]	; (800c900 <HAL_TIM_Base_Init+0x228>)
 800c768:	4293      	cmp	r3, r2
 800c76a:	d031      	beq.n	800c7d0 <HAL_TIM_Base_Init+0xf8>
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	4a64      	ldr	r2, [pc, #400]	; (800c904 <HAL_TIM_Base_Init+0x22c>)
 800c772:	4293      	cmp	r3, r2
 800c774:	d02c      	beq.n	800c7d0 <HAL_TIM_Base_Init+0xf8>
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	4a63      	ldr	r2, [pc, #396]	; (800c908 <HAL_TIM_Base_Init+0x230>)
 800c77c:	4293      	cmp	r3, r2
 800c77e:	d027      	beq.n	800c7d0 <HAL_TIM_Base_Init+0xf8>
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	4a61      	ldr	r2, [pc, #388]	; (800c90c <HAL_TIM_Base_Init+0x234>)
 800c786:	4293      	cmp	r3, r2
 800c788:	d022      	beq.n	800c7d0 <HAL_TIM_Base_Init+0xf8>
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	4a60      	ldr	r2, [pc, #384]	; (800c910 <HAL_TIM_Base_Init+0x238>)
 800c790:	4293      	cmp	r3, r2
 800c792:	d01d      	beq.n	800c7d0 <HAL_TIM_Base_Init+0xf8>
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	4a5e      	ldr	r2, [pc, #376]	; (800c914 <HAL_TIM_Base_Init+0x23c>)
 800c79a:	4293      	cmp	r3, r2
 800c79c:	d018      	beq.n	800c7d0 <HAL_TIM_Base_Init+0xf8>
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	4a5d      	ldr	r2, [pc, #372]	; (800c918 <HAL_TIM_Base_Init+0x240>)
 800c7a4:	4293      	cmp	r3, r2
 800c7a6:	d013      	beq.n	800c7d0 <HAL_TIM_Base_Init+0xf8>
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	4a5b      	ldr	r2, [pc, #364]	; (800c91c <HAL_TIM_Base_Init+0x244>)
 800c7ae:	4293      	cmp	r3, r2
 800c7b0:	d00e      	beq.n	800c7d0 <HAL_TIM_Base_Init+0xf8>
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	4a5a      	ldr	r2, [pc, #360]	; (800c920 <HAL_TIM_Base_Init+0x248>)
 800c7b8:	4293      	cmp	r3, r2
 800c7ba:	d009      	beq.n	800c7d0 <HAL_TIM_Base_Init+0xf8>
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	4a58      	ldr	r2, [pc, #352]	; (800c924 <HAL_TIM_Base_Init+0x24c>)
 800c7c2:	4293      	cmp	r3, r2
 800c7c4:	d004      	beq.n	800c7d0 <HAL_TIM_Base_Init+0xf8>
 800c7c6:	f44f 7191 	mov.w	r1, #290	; 0x122
 800c7ca:	4857      	ldr	r0, [pc, #348]	; (800c928 <HAL_TIM_Base_Init+0x250>)
 800c7cc:	f008 fd6d 	bl	80152aa <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	689b      	ldr	r3, [r3, #8]
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d014      	beq.n	800c802 <HAL_TIM_Base_Init+0x12a>
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	689b      	ldr	r3, [r3, #8]
 800c7dc:	2b10      	cmp	r3, #16
 800c7de:	d010      	beq.n	800c802 <HAL_TIM_Base_Init+0x12a>
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	689b      	ldr	r3, [r3, #8]
 800c7e4:	2b20      	cmp	r3, #32
 800c7e6:	d00c      	beq.n	800c802 <HAL_TIM_Base_Init+0x12a>
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	689b      	ldr	r3, [r3, #8]
 800c7ec:	2b40      	cmp	r3, #64	; 0x40
 800c7ee:	d008      	beq.n	800c802 <HAL_TIM_Base_Init+0x12a>
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	689b      	ldr	r3, [r3, #8]
 800c7f4:	2b60      	cmp	r3, #96	; 0x60
 800c7f6:	d004      	beq.n	800c802 <HAL_TIM_Base_Init+0x12a>
 800c7f8:	f240 1123 	movw	r1, #291	; 0x123
 800c7fc:	484a      	ldr	r0, [pc, #296]	; (800c928 <HAL_TIM_Base_Init+0x250>)
 800c7fe:	f008 fd54 	bl	80152aa <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	691b      	ldr	r3, [r3, #16]
 800c806:	2b00      	cmp	r3, #0
 800c808:	d00e      	beq.n	800c828 <HAL_TIM_Base_Init+0x150>
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	691b      	ldr	r3, [r3, #16]
 800c80e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c812:	d009      	beq.n	800c828 <HAL_TIM_Base_Init+0x150>
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	691b      	ldr	r3, [r3, #16]
 800c818:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c81c:	d004      	beq.n	800c828 <HAL_TIM_Base_Init+0x150>
 800c81e:	f44f 7192 	mov.w	r1, #292	; 0x124
 800c822:	4841      	ldr	r0, [pc, #260]	; (800c928 <HAL_TIM_Base_Init+0x250>)
 800c824:	f008 fd41 	bl	80152aa <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c830:	d02c      	beq.n	800c88c <HAL_TIM_Base_Init+0x1b4>
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c83a:	d027      	beq.n	800c88c <HAL_TIM_Base_Init+0x1b4>
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	4a27      	ldr	r2, [pc, #156]	; (800c8e0 <HAL_TIM_Base_Init+0x208>)
 800c842:	4293      	cmp	r3, r2
 800c844:	d022      	beq.n	800c88c <HAL_TIM_Base_Init+0x1b4>
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	4a26      	ldr	r2, [pc, #152]	; (800c8e4 <HAL_TIM_Base_Init+0x20c>)
 800c84c:	4293      	cmp	r3, r2
 800c84e:	d01d      	beq.n	800c88c <HAL_TIM_Base_Init+0x1b4>
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	4a24      	ldr	r2, [pc, #144]	; (800c8e8 <HAL_TIM_Base_Init+0x210>)
 800c856:	4293      	cmp	r3, r2
 800c858:	d018      	beq.n	800c88c <HAL_TIM_Base_Init+0x1b4>
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	4a23      	ldr	r2, [pc, #140]	; (800c8ec <HAL_TIM_Base_Init+0x214>)
 800c860:	4293      	cmp	r3, r2
 800c862:	d013      	beq.n	800c88c <HAL_TIM_Base_Init+0x1b4>
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	4a21      	ldr	r2, [pc, #132]	; (800c8f0 <HAL_TIM_Base_Init+0x218>)
 800c86a:	4293      	cmp	r3, r2
 800c86c:	d00e      	beq.n	800c88c <HAL_TIM_Base_Init+0x1b4>
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	4a20      	ldr	r2, [pc, #128]	; (800c8f4 <HAL_TIM_Base_Init+0x21c>)
 800c874:	4293      	cmp	r3, r2
 800c876:	d009      	beq.n	800c88c <HAL_TIM_Base_Init+0x1b4>
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	68db      	ldr	r3, [r3, #12]
 800c87c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c880:	d304      	bcc.n	800c88c <HAL_TIM_Base_Init+0x1b4>
 800c882:	f240 1125 	movw	r1, #293	; 0x125
 800c886:	4828      	ldr	r0, [pc, #160]	; (800c928 <HAL_TIM_Base_Init+0x250>)
 800c888:	f008 fd0f 	bl	80152aa <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	699b      	ldr	r3, [r3, #24]
 800c890:	2b00      	cmp	r3, #0
 800c892:	d008      	beq.n	800c8a6 <HAL_TIM_Base_Init+0x1ce>
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	699b      	ldr	r3, [r3, #24]
 800c898:	2b80      	cmp	r3, #128	; 0x80
 800c89a:	d004      	beq.n	800c8a6 <HAL_TIM_Base_Init+0x1ce>
 800c89c:	f44f 7193 	mov.w	r1, #294	; 0x126
 800c8a0:	4821      	ldr	r0, [pc, #132]	; (800c928 <HAL_TIM_Base_Init+0x250>)
 800c8a2:	f008 fd02 	bl	80152aa <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c8ac:	b2db      	uxtb	r3, r3
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d13e      	bne.n	800c930 <HAL_TIM_Base_Init+0x258>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	2200      	movs	r2, #0
 800c8b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800c8ba:	6878      	ldr	r0, [r7, #4]
 800c8bc:	f000 fc9a 	bl	800d1f4 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d102      	bne.n	800c8ce <HAL_TIM_Base_Init+0x1f6>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	4a18      	ldr	r2, [pc, #96]	; (800c92c <HAL_TIM_Base_Init+0x254>)
 800c8cc:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c8d2:	6878      	ldr	r0, [r7, #4]
 800c8d4:	4798      	blx	r3
 800c8d6:	e02b      	b.n	800c930 <HAL_TIM_Base_Init+0x258>
 800c8d8:	40012c00 	.word	0x40012c00
 800c8dc:	50012c00 	.word	0x50012c00
 800c8e0:	40000400 	.word	0x40000400
 800c8e4:	50000400 	.word	0x50000400
 800c8e8:	40000800 	.word	0x40000800
 800c8ec:	50000800 	.word	0x50000800
 800c8f0:	40000c00 	.word	0x40000c00
 800c8f4:	50000c00 	.word	0x50000c00
 800c8f8:	40001000 	.word	0x40001000
 800c8fc:	50001000 	.word	0x50001000
 800c900:	40001400 	.word	0x40001400
 800c904:	50001400 	.word	0x50001400
 800c908:	40013400 	.word	0x40013400
 800c90c:	50013400 	.word	0x50013400
 800c910:	40014000 	.word	0x40014000
 800c914:	50014000 	.word	0x50014000
 800c918:	40014400 	.word	0x40014400
 800c91c:	50014400 	.word	0x50014400
 800c920:	40014800 	.word	0x40014800
 800c924:	50014800 	.word	0x50014800
 800c928:	08025dfc 	.word	0x08025dfc
 800c92c:	08017c49 	.word	0x08017c49
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	2202      	movs	r2, #2
 800c934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	681a      	ldr	r2, [r3, #0]
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	3304      	adds	r3, #4
 800c940:	4619      	mov	r1, r3
 800c942:	4610      	mov	r0, r2
 800c944:	f000 fb5c 	bl	800d000 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	2201      	movs	r2, #1
 800c94c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	2201      	movs	r2, #1
 800c954:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	2201      	movs	r2, #1
 800c95c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	2201      	movs	r2, #1
 800c964:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	2201      	movs	r2, #1
 800c96c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	2201      	movs	r2, #1
 800c974:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	2201      	movs	r2, #1
 800c97c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	2201      	movs	r2, #1
 800c984:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	2201      	movs	r2, #1
 800c98c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	2201      	movs	r2, #1
 800c994:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	2201      	movs	r2, #1
 800c99c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	2201      	movs	r2, #1
 800c9a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c9a8:	2300      	movs	r3, #0
}
 800c9aa:	4618      	mov	r0, r3
 800c9ac:	3708      	adds	r7, #8
 800c9ae:	46bd      	mov	sp, r7
 800c9b0:	bd80      	pop	{r7, pc}
 800c9b2:	bf00      	nop

0800c9b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c9b4:	b580      	push	{r7, lr}
 800c9b6:	b084      	sub	sp, #16
 800c9b8:	af00      	add	r7, sp, #0
 800c9ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	4a77      	ldr	r2, [pc, #476]	; (800cba0 <HAL_TIM_Base_Start_IT+0x1ec>)
 800c9c2:	4293      	cmp	r3, r2
 800c9c4:	d06d      	beq.n	800caa2 <HAL_TIM_Base_Start_IT+0xee>
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	4a76      	ldr	r2, [pc, #472]	; (800cba4 <HAL_TIM_Base_Start_IT+0x1f0>)
 800c9cc:	4293      	cmp	r3, r2
 800c9ce:	d068      	beq.n	800caa2 <HAL_TIM_Base_Start_IT+0xee>
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c9d8:	d063      	beq.n	800caa2 <HAL_TIM_Base_Start_IT+0xee>
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c9e2:	d05e      	beq.n	800caa2 <HAL_TIM_Base_Start_IT+0xee>
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	4a6f      	ldr	r2, [pc, #444]	; (800cba8 <HAL_TIM_Base_Start_IT+0x1f4>)
 800c9ea:	4293      	cmp	r3, r2
 800c9ec:	d059      	beq.n	800caa2 <HAL_TIM_Base_Start_IT+0xee>
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	4a6e      	ldr	r2, [pc, #440]	; (800cbac <HAL_TIM_Base_Start_IT+0x1f8>)
 800c9f4:	4293      	cmp	r3, r2
 800c9f6:	d054      	beq.n	800caa2 <HAL_TIM_Base_Start_IT+0xee>
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	4a6c      	ldr	r2, [pc, #432]	; (800cbb0 <HAL_TIM_Base_Start_IT+0x1fc>)
 800c9fe:	4293      	cmp	r3, r2
 800ca00:	d04f      	beq.n	800caa2 <HAL_TIM_Base_Start_IT+0xee>
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	4a6b      	ldr	r2, [pc, #428]	; (800cbb4 <HAL_TIM_Base_Start_IT+0x200>)
 800ca08:	4293      	cmp	r3, r2
 800ca0a:	d04a      	beq.n	800caa2 <HAL_TIM_Base_Start_IT+0xee>
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	4a69      	ldr	r2, [pc, #420]	; (800cbb8 <HAL_TIM_Base_Start_IT+0x204>)
 800ca12:	4293      	cmp	r3, r2
 800ca14:	d045      	beq.n	800caa2 <HAL_TIM_Base_Start_IT+0xee>
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	4a68      	ldr	r2, [pc, #416]	; (800cbbc <HAL_TIM_Base_Start_IT+0x208>)
 800ca1c:	4293      	cmp	r3, r2
 800ca1e:	d040      	beq.n	800caa2 <HAL_TIM_Base_Start_IT+0xee>
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	4a66      	ldr	r2, [pc, #408]	; (800cbc0 <HAL_TIM_Base_Start_IT+0x20c>)
 800ca26:	4293      	cmp	r3, r2
 800ca28:	d03b      	beq.n	800caa2 <HAL_TIM_Base_Start_IT+0xee>
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	4a65      	ldr	r2, [pc, #404]	; (800cbc4 <HAL_TIM_Base_Start_IT+0x210>)
 800ca30:	4293      	cmp	r3, r2
 800ca32:	d036      	beq.n	800caa2 <HAL_TIM_Base_Start_IT+0xee>
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	4a63      	ldr	r2, [pc, #396]	; (800cbc8 <HAL_TIM_Base_Start_IT+0x214>)
 800ca3a:	4293      	cmp	r3, r2
 800ca3c:	d031      	beq.n	800caa2 <HAL_TIM_Base_Start_IT+0xee>
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	4a62      	ldr	r2, [pc, #392]	; (800cbcc <HAL_TIM_Base_Start_IT+0x218>)
 800ca44:	4293      	cmp	r3, r2
 800ca46:	d02c      	beq.n	800caa2 <HAL_TIM_Base_Start_IT+0xee>
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	4a60      	ldr	r2, [pc, #384]	; (800cbd0 <HAL_TIM_Base_Start_IT+0x21c>)
 800ca4e:	4293      	cmp	r3, r2
 800ca50:	d027      	beq.n	800caa2 <HAL_TIM_Base_Start_IT+0xee>
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	4a5f      	ldr	r2, [pc, #380]	; (800cbd4 <HAL_TIM_Base_Start_IT+0x220>)
 800ca58:	4293      	cmp	r3, r2
 800ca5a:	d022      	beq.n	800caa2 <HAL_TIM_Base_Start_IT+0xee>
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	4a5d      	ldr	r2, [pc, #372]	; (800cbd8 <HAL_TIM_Base_Start_IT+0x224>)
 800ca62:	4293      	cmp	r3, r2
 800ca64:	d01d      	beq.n	800caa2 <HAL_TIM_Base_Start_IT+0xee>
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	4a5c      	ldr	r2, [pc, #368]	; (800cbdc <HAL_TIM_Base_Start_IT+0x228>)
 800ca6c:	4293      	cmp	r3, r2
 800ca6e:	d018      	beq.n	800caa2 <HAL_TIM_Base_Start_IT+0xee>
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	4a5a      	ldr	r2, [pc, #360]	; (800cbe0 <HAL_TIM_Base_Start_IT+0x22c>)
 800ca76:	4293      	cmp	r3, r2
 800ca78:	d013      	beq.n	800caa2 <HAL_TIM_Base_Start_IT+0xee>
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	4a59      	ldr	r2, [pc, #356]	; (800cbe4 <HAL_TIM_Base_Start_IT+0x230>)
 800ca80:	4293      	cmp	r3, r2
 800ca82:	d00e      	beq.n	800caa2 <HAL_TIM_Base_Start_IT+0xee>
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	4a57      	ldr	r2, [pc, #348]	; (800cbe8 <HAL_TIM_Base_Start_IT+0x234>)
 800ca8a:	4293      	cmp	r3, r2
 800ca8c:	d009      	beq.n	800caa2 <HAL_TIM_Base_Start_IT+0xee>
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	4a56      	ldr	r2, [pc, #344]	; (800cbec <HAL_TIM_Base_Start_IT+0x238>)
 800ca94:	4293      	cmp	r3, r2
 800ca96:	d004      	beq.n	800caa2 <HAL_TIM_Base_Start_IT+0xee>
 800ca98:	f240 11df 	movw	r1, #479	; 0x1df
 800ca9c:	4854      	ldr	r0, [pc, #336]	; (800cbf0 <HAL_TIM_Base_Start_IT+0x23c>)
 800ca9e:	f008 fc04 	bl	80152aa <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800caa8:	b2db      	uxtb	r3, r3
 800caaa:	2b01      	cmp	r3, #1
 800caac:	d001      	beq.n	800cab2 <HAL_TIM_Base_Start_IT+0xfe>
  {
    return HAL_ERROR;
 800caae:	2301      	movs	r3, #1
 800cab0:	e072      	b.n	800cb98 <HAL_TIM_Base_Start_IT+0x1e4>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	2202      	movs	r2, #2
 800cab6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	68da      	ldr	r2, [r3, #12]
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	f042 0201 	orr.w	r2, r2, #1
 800cac8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	4a34      	ldr	r2, [pc, #208]	; (800cba0 <HAL_TIM_Base_Start_IT+0x1ec>)
 800cad0:	4293      	cmp	r3, r2
 800cad2:	d040      	beq.n	800cb56 <HAL_TIM_Base_Start_IT+0x1a2>
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	4a32      	ldr	r2, [pc, #200]	; (800cba4 <HAL_TIM_Base_Start_IT+0x1f0>)
 800cada:	4293      	cmp	r3, r2
 800cadc:	d03b      	beq.n	800cb56 <HAL_TIM_Base_Start_IT+0x1a2>
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cae6:	d036      	beq.n	800cb56 <HAL_TIM_Base_Start_IT+0x1a2>
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800caf0:	d031      	beq.n	800cb56 <HAL_TIM_Base_Start_IT+0x1a2>
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	4a2c      	ldr	r2, [pc, #176]	; (800cba8 <HAL_TIM_Base_Start_IT+0x1f4>)
 800caf8:	4293      	cmp	r3, r2
 800cafa:	d02c      	beq.n	800cb56 <HAL_TIM_Base_Start_IT+0x1a2>
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	4a2a      	ldr	r2, [pc, #168]	; (800cbac <HAL_TIM_Base_Start_IT+0x1f8>)
 800cb02:	4293      	cmp	r3, r2
 800cb04:	d027      	beq.n	800cb56 <HAL_TIM_Base_Start_IT+0x1a2>
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	4a29      	ldr	r2, [pc, #164]	; (800cbb0 <HAL_TIM_Base_Start_IT+0x1fc>)
 800cb0c:	4293      	cmp	r3, r2
 800cb0e:	d022      	beq.n	800cb56 <HAL_TIM_Base_Start_IT+0x1a2>
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	4a27      	ldr	r2, [pc, #156]	; (800cbb4 <HAL_TIM_Base_Start_IT+0x200>)
 800cb16:	4293      	cmp	r3, r2
 800cb18:	d01d      	beq.n	800cb56 <HAL_TIM_Base_Start_IT+0x1a2>
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	4a26      	ldr	r2, [pc, #152]	; (800cbb8 <HAL_TIM_Base_Start_IT+0x204>)
 800cb20:	4293      	cmp	r3, r2
 800cb22:	d018      	beq.n	800cb56 <HAL_TIM_Base_Start_IT+0x1a2>
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	681b      	ldr	r3, [r3, #0]
 800cb28:	4a24      	ldr	r2, [pc, #144]	; (800cbbc <HAL_TIM_Base_Start_IT+0x208>)
 800cb2a:	4293      	cmp	r3, r2
 800cb2c:	d013      	beq.n	800cb56 <HAL_TIM_Base_Start_IT+0x1a2>
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	4a27      	ldr	r2, [pc, #156]	; (800cbd0 <HAL_TIM_Base_Start_IT+0x21c>)
 800cb34:	4293      	cmp	r3, r2
 800cb36:	d00e      	beq.n	800cb56 <HAL_TIM_Base_Start_IT+0x1a2>
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	4a25      	ldr	r2, [pc, #148]	; (800cbd4 <HAL_TIM_Base_Start_IT+0x220>)
 800cb3e:	4293      	cmp	r3, r2
 800cb40:	d009      	beq.n	800cb56 <HAL_TIM_Base_Start_IT+0x1a2>
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	4a24      	ldr	r2, [pc, #144]	; (800cbd8 <HAL_TIM_Base_Start_IT+0x224>)
 800cb48:	4293      	cmp	r3, r2
 800cb4a:	d004      	beq.n	800cb56 <HAL_TIM_Base_Start_IT+0x1a2>
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	4a22      	ldr	r2, [pc, #136]	; (800cbdc <HAL_TIM_Base_Start_IT+0x228>)
 800cb52:	4293      	cmp	r3, r2
 800cb54:	d115      	bne.n	800cb82 <HAL_TIM_Base_Start_IT+0x1ce>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	689a      	ldr	r2, [r3, #8]
 800cb5c:	4b25      	ldr	r3, [pc, #148]	; (800cbf4 <HAL_TIM_Base_Start_IT+0x240>)
 800cb5e:	4013      	ands	r3, r2
 800cb60:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cb62:	68fb      	ldr	r3, [r7, #12]
 800cb64:	2b06      	cmp	r3, #6
 800cb66:	d015      	beq.n	800cb94 <HAL_TIM_Base_Start_IT+0x1e0>
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cb6e:	d011      	beq.n	800cb94 <HAL_TIM_Base_Start_IT+0x1e0>
    {
      __HAL_TIM_ENABLE(htim);
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	681a      	ldr	r2, [r3, #0]
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	f042 0201 	orr.w	r2, r2, #1
 800cb7e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cb80:	e008      	b.n	800cb94 <HAL_TIM_Base_Start_IT+0x1e0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	681a      	ldr	r2, [r3, #0]
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	f042 0201 	orr.w	r2, r2, #1
 800cb90:	601a      	str	r2, [r3, #0]
 800cb92:	e000      	b.n	800cb96 <HAL_TIM_Base_Start_IT+0x1e2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cb94:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800cb96:	2300      	movs	r3, #0
}
 800cb98:	4618      	mov	r0, r3
 800cb9a:	3710      	adds	r7, #16
 800cb9c:	46bd      	mov	sp, r7
 800cb9e:	bd80      	pop	{r7, pc}
 800cba0:	40012c00 	.word	0x40012c00
 800cba4:	50012c00 	.word	0x50012c00
 800cba8:	40000400 	.word	0x40000400
 800cbac:	50000400 	.word	0x50000400
 800cbb0:	40000800 	.word	0x40000800
 800cbb4:	50000800 	.word	0x50000800
 800cbb8:	40000c00 	.word	0x40000c00
 800cbbc:	50000c00 	.word	0x50000c00
 800cbc0:	40001000 	.word	0x40001000
 800cbc4:	50001000 	.word	0x50001000
 800cbc8:	40001400 	.word	0x40001400
 800cbcc:	50001400 	.word	0x50001400
 800cbd0:	40013400 	.word	0x40013400
 800cbd4:	50013400 	.word	0x50013400
 800cbd8:	40014000 	.word	0x40014000
 800cbdc:	50014000 	.word	0x50014000
 800cbe0:	40014400 	.word	0x40014400
 800cbe4:	50014400 	.word	0x50014400
 800cbe8:	40014800 	.word	0x40014800
 800cbec:	50014800 	.word	0x50014800
 800cbf0:	08025dfc 	.word	0x08025dfc
 800cbf4:	00010007 	.word	0x00010007

0800cbf8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800cbf8:	b580      	push	{r7, lr}
 800cbfa:	b082      	sub	sp, #8
 800cbfc:	af00      	add	r7, sp, #0
 800cbfe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	691b      	ldr	r3, [r3, #16]
 800cc06:	f003 0302 	and.w	r3, r3, #2
 800cc0a:	2b02      	cmp	r3, #2
 800cc0c:	d128      	bne.n	800cc60 <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	68db      	ldr	r3, [r3, #12]
 800cc14:	f003 0302 	and.w	r3, r3, #2
 800cc18:	2b02      	cmp	r3, #2
 800cc1a:	d121      	bne.n	800cc60 <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	f06f 0202 	mvn.w	r2, #2
 800cc24:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	2201      	movs	r2, #1
 800cc2a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	699b      	ldr	r3, [r3, #24]
 800cc32:	f003 0303 	and.w	r3, r3, #3
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d005      	beq.n	800cc46 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cc40:	6878      	ldr	r0, [r7, #4]
 800cc42:	4798      	blx	r3
 800cc44:	e009      	b.n	800cc5a <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800cc4c:	6878      	ldr	r0, [r7, #4]
 800cc4e:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800cc56:	6878      	ldr	r0, [r7, #4]
 800cc58:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	2200      	movs	r2, #0
 800cc5e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	691b      	ldr	r3, [r3, #16]
 800cc66:	f003 0304 	and.w	r3, r3, #4
 800cc6a:	2b04      	cmp	r3, #4
 800cc6c:	d128      	bne.n	800ccc0 <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	681b      	ldr	r3, [r3, #0]
 800cc72:	68db      	ldr	r3, [r3, #12]
 800cc74:	f003 0304 	and.w	r3, r3, #4
 800cc78:	2b04      	cmp	r3, #4
 800cc7a:	d121      	bne.n	800ccc0 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	f06f 0204 	mvn.w	r2, #4
 800cc84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	2202      	movs	r2, #2
 800cc8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	699b      	ldr	r3, [r3, #24]
 800cc92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d005      	beq.n	800cca6 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cca0:	6878      	ldr	r0, [r7, #4]
 800cca2:	4798      	blx	r3
 800cca4:	e009      	b.n	800ccba <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800ccac:	6878      	ldr	r0, [r7, #4]
 800ccae:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800ccb6:	6878      	ldr	r0, [r7, #4]
 800ccb8:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	2200      	movs	r2, #0
 800ccbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	691b      	ldr	r3, [r3, #16]
 800ccc6:	f003 0308 	and.w	r3, r3, #8
 800ccca:	2b08      	cmp	r3, #8
 800cccc:	d128      	bne.n	800cd20 <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	68db      	ldr	r3, [r3, #12]
 800ccd4:	f003 0308 	and.w	r3, r3, #8
 800ccd8:	2b08      	cmp	r3, #8
 800ccda:	d121      	bne.n	800cd20 <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	f06f 0208 	mvn.w	r2, #8
 800cce4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	2204      	movs	r2, #4
 800ccea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	69db      	ldr	r3, [r3, #28]
 800ccf2:	f003 0303 	and.w	r3, r3, #3
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d005      	beq.n	800cd06 <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cd00:	6878      	ldr	r0, [r7, #4]
 800cd02:	4798      	blx	r3
 800cd04:	e009      	b.n	800cd1a <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800cd0c:	6878      	ldr	r0, [r7, #4]
 800cd0e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800cd16:	6878      	ldr	r0, [r7, #4]
 800cd18:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	2200      	movs	r2, #0
 800cd1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	691b      	ldr	r3, [r3, #16]
 800cd26:	f003 0310 	and.w	r3, r3, #16
 800cd2a:	2b10      	cmp	r3, #16
 800cd2c:	d128      	bne.n	800cd80 <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	68db      	ldr	r3, [r3, #12]
 800cd34:	f003 0310 	and.w	r3, r3, #16
 800cd38:	2b10      	cmp	r3, #16
 800cd3a:	d121      	bne.n	800cd80 <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	f06f 0210 	mvn.w	r2, #16
 800cd44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	2208      	movs	r2, #8
 800cd4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	69db      	ldr	r3, [r3, #28]
 800cd52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d005      	beq.n	800cd66 <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cd60:	6878      	ldr	r0, [r7, #4]
 800cd62:	4798      	blx	r3
 800cd64:	e009      	b.n	800cd7a <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800cd6c:	6878      	ldr	r0, [r7, #4]
 800cd6e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800cd76:	6878      	ldr	r0, [r7, #4]
 800cd78:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	2200      	movs	r2, #0
 800cd7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	691b      	ldr	r3, [r3, #16]
 800cd86:	f003 0301 	and.w	r3, r3, #1
 800cd8a:	2b01      	cmp	r3, #1
 800cd8c:	d110      	bne.n	800cdb0 <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	68db      	ldr	r3, [r3, #12]
 800cd94:	f003 0301 	and.w	r3, r3, #1
 800cd98:	2b01      	cmp	r3, #1
 800cd9a:	d109      	bne.n	800cdb0 <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	f06f 0201 	mvn.w	r2, #1
 800cda4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cdac:	6878      	ldr	r0, [r7, #4]
 800cdae:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	691b      	ldr	r3, [r3, #16]
 800cdb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cdba:	2b80      	cmp	r3, #128	; 0x80
 800cdbc:	d110      	bne.n	800cde0 <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	68db      	ldr	r3, [r3, #12]
 800cdc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cdc8:	2b80      	cmp	r3, #128	; 0x80
 800cdca:	d109      	bne.n	800cde0 <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800cdd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800cddc:	6878      	ldr	r0, [r7, #4]
 800cdde:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	691b      	ldr	r3, [r3, #16]
 800cde6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cdea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cdee:	d110      	bne.n	800ce12 <HAL_TIM_IRQHandler+0x21a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	68db      	ldr	r3, [r3, #12]
 800cdf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cdfa:	2b80      	cmp	r3, #128	; 0x80
 800cdfc:	d109      	bne.n	800ce12 <HAL_TIM_IRQHandler+0x21a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	681b      	ldr	r3, [r3, #0]
 800ce02:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800ce06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800ce0e:	6878      	ldr	r0, [r7, #4]
 800ce10:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	691b      	ldr	r3, [r3, #16]
 800ce18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ce1c:	2b40      	cmp	r3, #64	; 0x40
 800ce1e:	d110      	bne.n	800ce42 <HAL_TIM_IRQHandler+0x24a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	68db      	ldr	r3, [r3, #12]
 800ce26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ce2a:	2b40      	cmp	r3, #64	; 0x40
 800ce2c:	d109      	bne.n	800ce42 <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ce36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ce3e:	6878      	ldr	r0, [r7, #4]
 800ce40:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	691b      	ldr	r3, [r3, #16]
 800ce48:	f003 0320 	and.w	r3, r3, #32
 800ce4c:	2b20      	cmp	r3, #32
 800ce4e:	d110      	bne.n	800ce72 <HAL_TIM_IRQHandler+0x27a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	68db      	ldr	r3, [r3, #12]
 800ce56:	f003 0320 	and.w	r3, r3, #32
 800ce5a:	2b20      	cmp	r3, #32
 800ce5c:	d109      	bne.n	800ce72 <HAL_TIM_IRQHandler+0x27a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	f06f 0220 	mvn.w	r2, #32
 800ce66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800ce6e:	6878      	ldr	r0, [r7, #4]
 800ce70:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	691b      	ldr	r3, [r3, #16]
 800ce78:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ce7c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ce80:	d111      	bne.n	800cea6 <HAL_TIM_IRQHandler+0x2ae>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	68db      	ldr	r3, [r3, #12]
 800ce88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ce8c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ce90:	d109      	bne.n	800cea6 <HAL_TIM_IRQHandler+0x2ae>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800ce9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800cea2:	6878      	ldr	r0, [r7, #4]
 800cea4:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	691b      	ldr	r3, [r3, #16]
 800ceac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ceb0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ceb4:	d111      	bne.n	800ceda <HAL_TIM_IRQHandler+0x2e2>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	68db      	ldr	r3, [r3, #12]
 800cebc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800cec0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800cec4:	d109      	bne.n	800ceda <HAL_TIM_IRQHandler+0x2e2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800cece:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800ced6:	6878      	ldr	r0, [r7, #4]
 800ced8:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	691b      	ldr	r3, [r3, #16]
 800cee0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cee4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cee8:	d111      	bne.n	800cf0e <HAL_TIM_IRQHandler+0x316>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	68db      	ldr	r3, [r3, #12]
 800cef0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cef4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cef8:	d109      	bne.n	800cf0e <HAL_TIM_IRQHandler+0x316>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800cf02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800cf0a:	6878      	ldr	r0, [r7, #4]
 800cf0c:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	691b      	ldr	r3, [r3, #16]
 800cf14:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cf18:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800cf1c:	d111      	bne.n	800cf42 <HAL_TIM_IRQHandler+0x34a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	681b      	ldr	r3, [r3, #0]
 800cf22:	68db      	ldr	r3, [r3, #12]
 800cf24:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cf28:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800cf2c:	d109      	bne.n	800cf42 <HAL_TIM_IRQHandler+0x34a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	681b      	ldr	r3, [r3, #0]
 800cf32:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800cf36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800cf3e:	6878      	ldr	r0, [r7, #4]
 800cf40:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800cf42:	bf00      	nop
 800cf44:	3708      	adds	r7, #8
 800cf46:	46bd      	mov	sp, r7
 800cf48:	bd80      	pop	{r7, pc}

0800cf4a <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800cf4a:	b480      	push	{r7}
 800cf4c:	b083      	sub	sp, #12
 800cf4e:	af00      	add	r7, sp, #0
 800cf50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 800cf52:	bf00      	nop
 800cf54:	370c      	adds	r7, #12
 800cf56:	46bd      	mov	sp, r7
 800cf58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf5c:	4770      	bx	lr

0800cf5e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800cf5e:	b480      	push	{r7}
 800cf60:	b083      	sub	sp, #12
 800cf62:	af00      	add	r7, sp, #0
 800cf64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800cf66:	bf00      	nop
 800cf68:	370c      	adds	r7, #12
 800cf6a:	46bd      	mov	sp, r7
 800cf6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf70:	4770      	bx	lr

0800cf72 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800cf72:	b480      	push	{r7}
 800cf74:	b083      	sub	sp, #12
 800cf76:	af00      	add	r7, sp, #0
 800cf78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800cf7a:	bf00      	nop
 800cf7c:	370c      	adds	r7, #12
 800cf7e:	46bd      	mov	sp, r7
 800cf80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf84:	4770      	bx	lr

0800cf86 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800cf86:	b480      	push	{r7}
 800cf88:	b083      	sub	sp, #12
 800cf8a:	af00      	add	r7, sp, #0
 800cf8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800cf8e:	bf00      	nop
 800cf90:	370c      	adds	r7, #12
 800cf92:	46bd      	mov	sp, r7
 800cf94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf98:	4770      	bx	lr

0800cf9a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800cf9a:	b480      	push	{r7}
 800cf9c:	b083      	sub	sp, #12
 800cf9e:	af00      	add	r7, sp, #0
 800cfa0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800cfa2:	bf00      	nop
 800cfa4:	370c      	adds	r7, #12
 800cfa6:	46bd      	mov	sp, r7
 800cfa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfac:	4770      	bx	lr

0800cfae <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800cfae:	b480      	push	{r7}
 800cfb0:	b083      	sub	sp, #12
 800cfb2:	af00      	add	r7, sp, #0
 800cfb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800cfb6:	bf00      	nop
 800cfb8:	370c      	adds	r7, #12
 800cfba:	46bd      	mov	sp, r7
 800cfbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfc0:	4770      	bx	lr

0800cfc2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800cfc2:	b480      	push	{r7}
 800cfc4:	b083      	sub	sp, #12
 800cfc6:	af00      	add	r7, sp, #0
 800cfc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800cfca:	bf00      	nop
 800cfcc:	370c      	adds	r7, #12
 800cfce:	46bd      	mov	sp, r7
 800cfd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfd4:	4770      	bx	lr

0800cfd6 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800cfd6:	b480      	push	{r7}
 800cfd8:	b083      	sub	sp, #12
 800cfda:	af00      	add	r7, sp, #0
 800cfdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 800cfde:	bf00      	nop
 800cfe0:	370c      	adds	r7, #12
 800cfe2:	46bd      	mov	sp, r7
 800cfe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfe8:	4770      	bx	lr

0800cfea <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800cfea:	b480      	push	{r7}
 800cfec:	b083      	sub	sp, #12
 800cfee:	af00      	add	r7, sp, #0
 800cff0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800cff2:	bf00      	nop
 800cff4:	370c      	adds	r7, #12
 800cff6:	46bd      	mov	sp, r7
 800cff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cffc:	4770      	bx	lr
	...

0800d000 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800d000:	b480      	push	{r7}
 800d002:	b085      	sub	sp, #20
 800d004:	af00      	add	r7, sp, #0
 800d006:	6078      	str	r0, [r7, #4]
 800d008:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	4a68      	ldr	r2, [pc, #416]	; (800d1b4 <TIM_Base_SetConfig+0x1b4>)
 800d014:	4293      	cmp	r3, r2
 800d016:	d02b      	beq.n	800d070 <TIM_Base_SetConfig+0x70>
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	4a67      	ldr	r2, [pc, #412]	; (800d1b8 <TIM_Base_SetConfig+0x1b8>)
 800d01c:	4293      	cmp	r3, r2
 800d01e:	d027      	beq.n	800d070 <TIM_Base_SetConfig+0x70>
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d026:	d023      	beq.n	800d070 <TIM_Base_SetConfig+0x70>
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d02e:	d01f      	beq.n	800d070 <TIM_Base_SetConfig+0x70>
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	4a62      	ldr	r2, [pc, #392]	; (800d1bc <TIM_Base_SetConfig+0x1bc>)
 800d034:	4293      	cmp	r3, r2
 800d036:	d01b      	beq.n	800d070 <TIM_Base_SetConfig+0x70>
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	4a61      	ldr	r2, [pc, #388]	; (800d1c0 <TIM_Base_SetConfig+0x1c0>)
 800d03c:	4293      	cmp	r3, r2
 800d03e:	d017      	beq.n	800d070 <TIM_Base_SetConfig+0x70>
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	4a60      	ldr	r2, [pc, #384]	; (800d1c4 <TIM_Base_SetConfig+0x1c4>)
 800d044:	4293      	cmp	r3, r2
 800d046:	d013      	beq.n	800d070 <TIM_Base_SetConfig+0x70>
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	4a5f      	ldr	r2, [pc, #380]	; (800d1c8 <TIM_Base_SetConfig+0x1c8>)
 800d04c:	4293      	cmp	r3, r2
 800d04e:	d00f      	beq.n	800d070 <TIM_Base_SetConfig+0x70>
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	4a5e      	ldr	r2, [pc, #376]	; (800d1cc <TIM_Base_SetConfig+0x1cc>)
 800d054:	4293      	cmp	r3, r2
 800d056:	d00b      	beq.n	800d070 <TIM_Base_SetConfig+0x70>
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	4a5d      	ldr	r2, [pc, #372]	; (800d1d0 <TIM_Base_SetConfig+0x1d0>)
 800d05c:	4293      	cmp	r3, r2
 800d05e:	d007      	beq.n	800d070 <TIM_Base_SetConfig+0x70>
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	4a5c      	ldr	r2, [pc, #368]	; (800d1d4 <TIM_Base_SetConfig+0x1d4>)
 800d064:	4293      	cmp	r3, r2
 800d066:	d003      	beq.n	800d070 <TIM_Base_SetConfig+0x70>
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	4a5b      	ldr	r2, [pc, #364]	; (800d1d8 <TIM_Base_SetConfig+0x1d8>)
 800d06c:	4293      	cmp	r3, r2
 800d06e:	d108      	bne.n	800d082 <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d070:	68fb      	ldr	r3, [r7, #12]
 800d072:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d076:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d078:	683b      	ldr	r3, [r7, #0]
 800d07a:	685b      	ldr	r3, [r3, #4]
 800d07c:	68fa      	ldr	r2, [r7, #12]
 800d07e:	4313      	orrs	r3, r2
 800d080:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	4a4b      	ldr	r2, [pc, #300]	; (800d1b4 <TIM_Base_SetConfig+0x1b4>)
 800d086:	4293      	cmp	r3, r2
 800d088:	d043      	beq.n	800d112 <TIM_Base_SetConfig+0x112>
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	4a4a      	ldr	r2, [pc, #296]	; (800d1b8 <TIM_Base_SetConfig+0x1b8>)
 800d08e:	4293      	cmp	r3, r2
 800d090:	d03f      	beq.n	800d112 <TIM_Base_SetConfig+0x112>
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d098:	d03b      	beq.n	800d112 <TIM_Base_SetConfig+0x112>
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d0a0:	d037      	beq.n	800d112 <TIM_Base_SetConfig+0x112>
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	4a45      	ldr	r2, [pc, #276]	; (800d1bc <TIM_Base_SetConfig+0x1bc>)
 800d0a6:	4293      	cmp	r3, r2
 800d0a8:	d033      	beq.n	800d112 <TIM_Base_SetConfig+0x112>
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	4a44      	ldr	r2, [pc, #272]	; (800d1c0 <TIM_Base_SetConfig+0x1c0>)
 800d0ae:	4293      	cmp	r3, r2
 800d0b0:	d02f      	beq.n	800d112 <TIM_Base_SetConfig+0x112>
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	4a43      	ldr	r2, [pc, #268]	; (800d1c4 <TIM_Base_SetConfig+0x1c4>)
 800d0b6:	4293      	cmp	r3, r2
 800d0b8:	d02b      	beq.n	800d112 <TIM_Base_SetConfig+0x112>
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	4a42      	ldr	r2, [pc, #264]	; (800d1c8 <TIM_Base_SetConfig+0x1c8>)
 800d0be:	4293      	cmp	r3, r2
 800d0c0:	d027      	beq.n	800d112 <TIM_Base_SetConfig+0x112>
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	4a41      	ldr	r2, [pc, #260]	; (800d1cc <TIM_Base_SetConfig+0x1cc>)
 800d0c6:	4293      	cmp	r3, r2
 800d0c8:	d023      	beq.n	800d112 <TIM_Base_SetConfig+0x112>
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	4a40      	ldr	r2, [pc, #256]	; (800d1d0 <TIM_Base_SetConfig+0x1d0>)
 800d0ce:	4293      	cmp	r3, r2
 800d0d0:	d01f      	beq.n	800d112 <TIM_Base_SetConfig+0x112>
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	4a3f      	ldr	r2, [pc, #252]	; (800d1d4 <TIM_Base_SetConfig+0x1d4>)
 800d0d6:	4293      	cmp	r3, r2
 800d0d8:	d01b      	beq.n	800d112 <TIM_Base_SetConfig+0x112>
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	4a3e      	ldr	r2, [pc, #248]	; (800d1d8 <TIM_Base_SetConfig+0x1d8>)
 800d0de:	4293      	cmp	r3, r2
 800d0e0:	d017      	beq.n	800d112 <TIM_Base_SetConfig+0x112>
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	4a3d      	ldr	r2, [pc, #244]	; (800d1dc <TIM_Base_SetConfig+0x1dc>)
 800d0e6:	4293      	cmp	r3, r2
 800d0e8:	d013      	beq.n	800d112 <TIM_Base_SetConfig+0x112>
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	4a3c      	ldr	r2, [pc, #240]	; (800d1e0 <TIM_Base_SetConfig+0x1e0>)
 800d0ee:	4293      	cmp	r3, r2
 800d0f0:	d00f      	beq.n	800d112 <TIM_Base_SetConfig+0x112>
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	4a3b      	ldr	r2, [pc, #236]	; (800d1e4 <TIM_Base_SetConfig+0x1e4>)
 800d0f6:	4293      	cmp	r3, r2
 800d0f8:	d00b      	beq.n	800d112 <TIM_Base_SetConfig+0x112>
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	4a3a      	ldr	r2, [pc, #232]	; (800d1e8 <TIM_Base_SetConfig+0x1e8>)
 800d0fe:	4293      	cmp	r3, r2
 800d100:	d007      	beq.n	800d112 <TIM_Base_SetConfig+0x112>
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	4a39      	ldr	r2, [pc, #228]	; (800d1ec <TIM_Base_SetConfig+0x1ec>)
 800d106:	4293      	cmp	r3, r2
 800d108:	d003      	beq.n	800d112 <TIM_Base_SetConfig+0x112>
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	4a38      	ldr	r2, [pc, #224]	; (800d1f0 <TIM_Base_SetConfig+0x1f0>)
 800d10e:	4293      	cmp	r3, r2
 800d110:	d108      	bne.n	800d124 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d112:	68fb      	ldr	r3, [r7, #12]
 800d114:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d118:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d11a:	683b      	ldr	r3, [r7, #0]
 800d11c:	68db      	ldr	r3, [r3, #12]
 800d11e:	68fa      	ldr	r2, [r7, #12]
 800d120:	4313      	orrs	r3, r2
 800d122:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d12a:	683b      	ldr	r3, [r7, #0]
 800d12c:	695b      	ldr	r3, [r3, #20]
 800d12e:	4313      	orrs	r3, r2
 800d130:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	68fa      	ldr	r2, [r7, #12]
 800d136:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d138:	683b      	ldr	r3, [r7, #0]
 800d13a:	689a      	ldr	r2, [r3, #8]
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d140:	683b      	ldr	r3, [r7, #0]
 800d142:	681a      	ldr	r2, [r3, #0]
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	4a1a      	ldr	r2, [pc, #104]	; (800d1b4 <TIM_Base_SetConfig+0x1b4>)
 800d14c:	4293      	cmp	r3, r2
 800d14e:	d023      	beq.n	800d198 <TIM_Base_SetConfig+0x198>
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	4a19      	ldr	r2, [pc, #100]	; (800d1b8 <TIM_Base_SetConfig+0x1b8>)
 800d154:	4293      	cmp	r3, r2
 800d156:	d01f      	beq.n	800d198 <TIM_Base_SetConfig+0x198>
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	4a1e      	ldr	r2, [pc, #120]	; (800d1d4 <TIM_Base_SetConfig+0x1d4>)
 800d15c:	4293      	cmp	r3, r2
 800d15e:	d01b      	beq.n	800d198 <TIM_Base_SetConfig+0x198>
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	4a1d      	ldr	r2, [pc, #116]	; (800d1d8 <TIM_Base_SetConfig+0x1d8>)
 800d164:	4293      	cmp	r3, r2
 800d166:	d017      	beq.n	800d198 <TIM_Base_SetConfig+0x198>
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	4a1c      	ldr	r2, [pc, #112]	; (800d1dc <TIM_Base_SetConfig+0x1dc>)
 800d16c:	4293      	cmp	r3, r2
 800d16e:	d013      	beq.n	800d198 <TIM_Base_SetConfig+0x198>
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	4a1b      	ldr	r2, [pc, #108]	; (800d1e0 <TIM_Base_SetConfig+0x1e0>)
 800d174:	4293      	cmp	r3, r2
 800d176:	d00f      	beq.n	800d198 <TIM_Base_SetConfig+0x198>
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	4a1a      	ldr	r2, [pc, #104]	; (800d1e4 <TIM_Base_SetConfig+0x1e4>)
 800d17c:	4293      	cmp	r3, r2
 800d17e:	d00b      	beq.n	800d198 <TIM_Base_SetConfig+0x198>
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	4a19      	ldr	r2, [pc, #100]	; (800d1e8 <TIM_Base_SetConfig+0x1e8>)
 800d184:	4293      	cmp	r3, r2
 800d186:	d007      	beq.n	800d198 <TIM_Base_SetConfig+0x198>
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	4a18      	ldr	r2, [pc, #96]	; (800d1ec <TIM_Base_SetConfig+0x1ec>)
 800d18c:	4293      	cmp	r3, r2
 800d18e:	d003      	beq.n	800d198 <TIM_Base_SetConfig+0x198>
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	4a17      	ldr	r2, [pc, #92]	; (800d1f0 <TIM_Base_SetConfig+0x1f0>)
 800d194:	4293      	cmp	r3, r2
 800d196:	d103      	bne.n	800d1a0 <TIM_Base_SetConfig+0x1a0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d198:	683b      	ldr	r3, [r7, #0]
 800d19a:	691a      	ldr	r2, [r3, #16]
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	2201      	movs	r2, #1
 800d1a4:	615a      	str	r2, [r3, #20]
}
 800d1a6:	bf00      	nop
 800d1a8:	3714      	adds	r7, #20
 800d1aa:	46bd      	mov	sp, r7
 800d1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1b0:	4770      	bx	lr
 800d1b2:	bf00      	nop
 800d1b4:	40012c00 	.word	0x40012c00
 800d1b8:	50012c00 	.word	0x50012c00
 800d1bc:	40000400 	.word	0x40000400
 800d1c0:	50000400 	.word	0x50000400
 800d1c4:	40000800 	.word	0x40000800
 800d1c8:	50000800 	.word	0x50000800
 800d1cc:	40000c00 	.word	0x40000c00
 800d1d0:	50000c00 	.word	0x50000c00
 800d1d4:	40013400 	.word	0x40013400
 800d1d8:	50013400 	.word	0x50013400
 800d1dc:	40014000 	.word	0x40014000
 800d1e0:	50014000 	.word	0x50014000
 800d1e4:	40014400 	.word	0x40014400
 800d1e8:	50014400 	.word	0x50014400
 800d1ec:	40014800 	.word	0x40014800
 800d1f0:	50014800 	.word	0x50014800

0800d1f4 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 800d1f4:	b480      	push	{r7}
 800d1f6:	b083      	sub	sp, #12
 800d1f8:	af00      	add	r7, sp, #0
 800d1fa:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	4a26      	ldr	r2, [pc, #152]	; (800d298 <TIM_ResetCallback+0xa4>)
 800d200:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	4a25      	ldr	r2, [pc, #148]	; (800d29c <TIM_ResetCallback+0xa8>)
 800d208:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	4a24      	ldr	r2, [pc, #144]	; (800d2a0 <TIM_ResetCallback+0xac>)
 800d210:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	4a23      	ldr	r2, [pc, #140]	; (800d2a4 <TIM_ResetCallback+0xb0>)
 800d218:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	4a22      	ldr	r2, [pc, #136]	; (800d2a8 <TIM_ResetCallback+0xb4>)
 800d220:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	4a21      	ldr	r2, [pc, #132]	; (800d2ac <TIM_ResetCallback+0xb8>)
 800d228:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	4a20      	ldr	r2, [pc, #128]	; (800d2b0 <TIM_ResetCallback+0xbc>)
 800d230:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	4a1f      	ldr	r2, [pc, #124]	; (800d2b4 <TIM_ResetCallback+0xc0>)
 800d238:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	4a1e      	ldr	r2, [pc, #120]	; (800d2b8 <TIM_ResetCallback+0xc4>)
 800d240:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	4a1d      	ldr	r2, [pc, #116]	; (800d2bc <TIM_ResetCallback+0xc8>)
 800d248:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	4a1c      	ldr	r2, [pc, #112]	; (800d2c0 <TIM_ResetCallback+0xcc>)
 800d250:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	4a1b      	ldr	r2, [pc, #108]	; (800d2c4 <TIM_ResetCallback+0xd0>)
 800d258:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	4a1a      	ldr	r2, [pc, #104]	; (800d2c8 <TIM_ResetCallback+0xd4>)
 800d260:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	4a19      	ldr	r2, [pc, #100]	; (800d2cc <TIM_ResetCallback+0xd8>)
 800d268:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	4a18      	ldr	r2, [pc, #96]	; (800d2d0 <TIM_ResetCallback+0xdc>)
 800d270:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	4a17      	ldr	r2, [pc, #92]	; (800d2d4 <TIM_ResetCallback+0xe0>)
 800d278:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	4a16      	ldr	r2, [pc, #88]	; (800d2d8 <TIM_ResetCallback+0xe4>)
 800d280:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	4a15      	ldr	r2, [pc, #84]	; (800d2dc <TIM_ResetCallback+0xe8>)
 800d288:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
 800d28c:	bf00      	nop
 800d28e:	370c      	adds	r7, #12
 800d290:	46bd      	mov	sp, r7
 800d292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d296:	4770      	bx	lr
 800d298:	0801527d 	.word	0x0801527d
 800d29c:	0800cf4b 	.word	0x0800cf4b
 800d2a0:	0800cfc3 	.word	0x0800cfc3
 800d2a4:	0800cfd7 	.word	0x0800cfd7
 800d2a8:	0800cf73 	.word	0x0800cf73
 800d2ac:	0800cf87 	.word	0x0800cf87
 800d2b0:	0800cf5f 	.word	0x0800cf5f
 800d2b4:	0800cf9b 	.word	0x0800cf9b
 800d2b8:	0800cfaf 	.word	0x0800cfaf
 800d2bc:	0800cfeb 	.word	0x0800cfeb
 800d2c0:	0800d2e1 	.word	0x0800d2e1
 800d2c4:	0800d2f5 	.word	0x0800d2f5
 800d2c8:	0800d309 	.word	0x0800d309
 800d2cc:	0800d31d 	.word	0x0800d31d
 800d2d0:	0800d331 	.word	0x0800d331
 800d2d4:	0800d345 	.word	0x0800d345
 800d2d8:	0800d359 	.word	0x0800d359
 800d2dc:	0800d36d 	.word	0x0800d36d

0800d2e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d2e0:	b480      	push	{r7}
 800d2e2:	b083      	sub	sp, #12
 800d2e4:	af00      	add	r7, sp, #0
 800d2e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d2e8:	bf00      	nop
 800d2ea:	370c      	adds	r7, #12
 800d2ec:	46bd      	mov	sp, r7
 800d2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2f2:	4770      	bx	lr

0800d2f4 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800d2f4:	b480      	push	{r7}
 800d2f6:	b083      	sub	sp, #12
 800d2f8:	af00      	add	r7, sp, #0
 800d2fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800d2fc:	bf00      	nop
 800d2fe:	370c      	adds	r7, #12
 800d300:	46bd      	mov	sp, r7
 800d302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d306:	4770      	bx	lr

0800d308 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d308:	b480      	push	{r7}
 800d30a:	b083      	sub	sp, #12
 800d30c:	af00      	add	r7, sp, #0
 800d30e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d310:	bf00      	nop
 800d312:	370c      	adds	r7, #12
 800d314:	46bd      	mov	sp, r7
 800d316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d31a:	4770      	bx	lr

0800d31c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d31c:	b480      	push	{r7}
 800d31e:	b083      	sub	sp, #12
 800d320:	af00      	add	r7, sp, #0
 800d322:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d324:	bf00      	nop
 800d326:	370c      	adds	r7, #12
 800d328:	46bd      	mov	sp, r7
 800d32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d32e:	4770      	bx	lr

0800d330 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800d330:	b480      	push	{r7}
 800d332:	b083      	sub	sp, #12
 800d334:	af00      	add	r7, sp, #0
 800d336:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800d338:	bf00      	nop
 800d33a:	370c      	adds	r7, #12
 800d33c:	46bd      	mov	sp, r7
 800d33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d342:	4770      	bx	lr

0800d344 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800d344:	b480      	push	{r7}
 800d346:	b083      	sub	sp, #12
 800d348:	af00      	add	r7, sp, #0
 800d34a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800d34c:	bf00      	nop
 800d34e:	370c      	adds	r7, #12
 800d350:	46bd      	mov	sp, r7
 800d352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d356:	4770      	bx	lr

0800d358 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800d358:	b480      	push	{r7}
 800d35a:	b083      	sub	sp, #12
 800d35c:	af00      	add	r7, sp, #0
 800d35e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800d360:	bf00      	nop
 800d362:	370c      	adds	r7, #12
 800d364:	46bd      	mov	sp, r7
 800d366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d36a:	4770      	bx	lr

0800d36c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800d36c:	b480      	push	{r7}
 800d36e:	b083      	sub	sp, #12
 800d370:	af00      	add	r7, sp, #0
 800d372:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800d374:	bf00      	nop
 800d376:	370c      	adds	r7, #12
 800d378:	46bd      	mov	sp, r7
 800d37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d37e:	4770      	bx	lr

0800d380 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d380:	b580      	push	{r7, lr}
 800d382:	b082      	sub	sp, #8
 800d384:	af00      	add	r7, sp, #0
 800d386:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d101      	bne.n	800d392 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d38e:	2301      	movs	r3, #1
 800d390:	e0c9      	b.n	800d526 <HAL_UART_Init+0x1a6>
  }

  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	699b      	ldr	r3, [r3, #24]
 800d396:	2b00      	cmp	r3, #0
 800d398:	d041      	beq.n	800d41e <HAL_UART_Init+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	681b      	ldr	r3, [r3, #0]
 800d39e:	4a64      	ldr	r2, [pc, #400]	; (800d530 <HAL_UART_Init+0x1b0>)
 800d3a0:	4293      	cmp	r3, r2
 800d3a2:	d07d      	beq.n	800d4a0 <HAL_UART_Init+0x120>
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	4a62      	ldr	r2, [pc, #392]	; (800d534 <HAL_UART_Init+0x1b4>)
 800d3aa:	4293      	cmp	r3, r2
 800d3ac:	d078      	beq.n	800d4a0 <HAL_UART_Init+0x120>
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	4a61      	ldr	r2, [pc, #388]	; (800d538 <HAL_UART_Init+0x1b8>)
 800d3b4:	4293      	cmp	r3, r2
 800d3b6:	d073      	beq.n	800d4a0 <HAL_UART_Init+0x120>
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	681b      	ldr	r3, [r3, #0]
 800d3bc:	4a5f      	ldr	r2, [pc, #380]	; (800d53c <HAL_UART_Init+0x1bc>)
 800d3be:	4293      	cmp	r3, r2
 800d3c0:	d06e      	beq.n	800d4a0 <HAL_UART_Init+0x120>
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	4a5e      	ldr	r2, [pc, #376]	; (800d540 <HAL_UART_Init+0x1c0>)
 800d3c8:	4293      	cmp	r3, r2
 800d3ca:	d069      	beq.n	800d4a0 <HAL_UART_Init+0x120>
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	4a5c      	ldr	r2, [pc, #368]	; (800d544 <HAL_UART_Init+0x1c4>)
 800d3d2:	4293      	cmp	r3, r2
 800d3d4:	d064      	beq.n	800d4a0 <HAL_UART_Init+0x120>
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	4a5b      	ldr	r2, [pc, #364]	; (800d548 <HAL_UART_Init+0x1c8>)
 800d3dc:	4293      	cmp	r3, r2
 800d3de:	d05f      	beq.n	800d4a0 <HAL_UART_Init+0x120>
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	4a59      	ldr	r2, [pc, #356]	; (800d54c <HAL_UART_Init+0x1cc>)
 800d3e6:	4293      	cmp	r3, r2
 800d3e8:	d05a      	beq.n	800d4a0 <HAL_UART_Init+0x120>
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	681b      	ldr	r3, [r3, #0]
 800d3ee:	4a58      	ldr	r2, [pc, #352]	; (800d550 <HAL_UART_Init+0x1d0>)
 800d3f0:	4293      	cmp	r3, r2
 800d3f2:	d055      	beq.n	800d4a0 <HAL_UART_Init+0x120>
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	681b      	ldr	r3, [r3, #0]
 800d3f8:	f1b3 2f50 	cmp.w	r3, #1342197760	; 0x50005000
 800d3fc:	d050      	beq.n	800d4a0 <HAL_UART_Init+0x120>
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	681b      	ldr	r3, [r3, #0]
 800d402:	4a54      	ldr	r2, [pc, #336]	; (800d554 <HAL_UART_Init+0x1d4>)
 800d404:	4293      	cmp	r3, r2
 800d406:	d04b      	beq.n	800d4a0 <HAL_UART_Init+0x120>
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	4a52      	ldr	r2, [pc, #328]	; (800d558 <HAL_UART_Init+0x1d8>)
 800d40e:	4293      	cmp	r3, r2
 800d410:	d046      	beq.n	800d4a0 <HAL_UART_Init+0x120>
 800d412:	f44f 719f 	mov.w	r1, #318	; 0x13e
 800d416:	4851      	ldr	r0, [pc, #324]	; (800d55c <HAL_UART_Init+0x1dc>)
 800d418:	f007 ff47 	bl	80152aa <assert_failed>
 800d41c:	e040      	b.n	800d4a0 <HAL_UART_Init+0x120>
  }
  else
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	4a43      	ldr	r2, [pc, #268]	; (800d530 <HAL_UART_Init+0x1b0>)
 800d424:	4293      	cmp	r3, r2
 800d426:	d03b      	beq.n	800d4a0 <HAL_UART_Init+0x120>
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	4a41      	ldr	r2, [pc, #260]	; (800d534 <HAL_UART_Init+0x1b4>)
 800d42e:	4293      	cmp	r3, r2
 800d430:	d036      	beq.n	800d4a0 <HAL_UART_Init+0x120>
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	681b      	ldr	r3, [r3, #0]
 800d436:	4a40      	ldr	r2, [pc, #256]	; (800d538 <HAL_UART_Init+0x1b8>)
 800d438:	4293      	cmp	r3, r2
 800d43a:	d031      	beq.n	800d4a0 <HAL_UART_Init+0x120>
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	4a3e      	ldr	r2, [pc, #248]	; (800d53c <HAL_UART_Init+0x1bc>)
 800d442:	4293      	cmp	r3, r2
 800d444:	d02c      	beq.n	800d4a0 <HAL_UART_Init+0x120>
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	681b      	ldr	r3, [r3, #0]
 800d44a:	4a3d      	ldr	r2, [pc, #244]	; (800d540 <HAL_UART_Init+0x1c0>)
 800d44c:	4293      	cmp	r3, r2
 800d44e:	d027      	beq.n	800d4a0 <HAL_UART_Init+0x120>
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	681b      	ldr	r3, [r3, #0]
 800d454:	4a3b      	ldr	r2, [pc, #236]	; (800d544 <HAL_UART_Init+0x1c4>)
 800d456:	4293      	cmp	r3, r2
 800d458:	d022      	beq.n	800d4a0 <HAL_UART_Init+0x120>
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	4a3a      	ldr	r2, [pc, #232]	; (800d548 <HAL_UART_Init+0x1c8>)
 800d460:	4293      	cmp	r3, r2
 800d462:	d01d      	beq.n	800d4a0 <HAL_UART_Init+0x120>
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	4a38      	ldr	r2, [pc, #224]	; (800d54c <HAL_UART_Init+0x1cc>)
 800d46a:	4293      	cmp	r3, r2
 800d46c:	d018      	beq.n	800d4a0 <HAL_UART_Init+0x120>
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	681b      	ldr	r3, [r3, #0]
 800d472:	4a37      	ldr	r2, [pc, #220]	; (800d550 <HAL_UART_Init+0x1d0>)
 800d474:	4293      	cmp	r3, r2
 800d476:	d013      	beq.n	800d4a0 <HAL_UART_Init+0x120>
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	681b      	ldr	r3, [r3, #0]
 800d47c:	f1b3 2f50 	cmp.w	r3, #1342197760	; 0x50005000
 800d480:	d00e      	beq.n	800d4a0 <HAL_UART_Init+0x120>
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	4a33      	ldr	r2, [pc, #204]	; (800d554 <HAL_UART_Init+0x1d4>)
 800d488:	4293      	cmp	r3, r2
 800d48a:	d009      	beq.n	800d4a0 <HAL_UART_Init+0x120>
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	681b      	ldr	r3, [r3, #0]
 800d490:	4a31      	ldr	r2, [pc, #196]	; (800d558 <HAL_UART_Init+0x1d8>)
 800d492:	4293      	cmp	r3, r2
 800d494:	d004      	beq.n	800d4a0 <HAL_UART_Init+0x120>
 800d496:	f240 1143 	movw	r1, #323	; 0x143
 800d49a:	4830      	ldr	r0, [pc, #192]	; (800d55c <HAL_UART_Init+0x1dc>)
 800d49c:	f007 ff05 	bl	80152aa <assert_failed>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	d106      	bne.n	800d4b8 <HAL_UART_Init+0x138>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	2200      	movs	r2, #0
 800d4ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d4b2:	6878      	ldr	r0, [r7, #4]
 800d4b4:	f00a fc3c 	bl	8017d30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	2224      	movs	r2, #36	; 0x24
 800d4bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	681b      	ldr	r3, [r3, #0]
 800d4c4:	681a      	ldr	r2, [r3, #0]
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	681b      	ldr	r3, [r3, #0]
 800d4ca:	f022 0201 	bic.w	r2, r2, #1
 800d4ce:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d4d0:	6878      	ldr	r0, [r7, #4]
 800d4d2:	f000 f8eb 	bl	800d6ac <UART_SetConfig>
 800d4d6:	4603      	mov	r3, r0
 800d4d8:	2b01      	cmp	r3, #1
 800d4da:	d101      	bne.n	800d4e0 <HAL_UART_Init+0x160>
  {
    return HAL_ERROR;
 800d4dc:	2301      	movs	r3, #1
 800d4de:	e022      	b.n	800d526 <HAL_UART_Init+0x1a6>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d002      	beq.n	800d4ee <HAL_UART_Init+0x16e>
  {
    UART_AdvFeatureConfig(huart);
 800d4e8:	6878      	ldr	r0, [r7, #4]
 800d4ea:	f000 fb63 	bl	800dbb4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	681b      	ldr	r3, [r3, #0]
 800d4f2:	685a      	ldr	r2, [r3, #4]
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	681b      	ldr	r3, [r3, #0]
 800d4f8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d4fc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	681b      	ldr	r3, [r3, #0]
 800d502:	689a      	ldr	r2, [r3, #8]
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	681b      	ldr	r3, [r3, #0]
 800d508:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d50c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	681a      	ldr	r2, [r3, #0]
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	f042 0201 	orr.w	r2, r2, #1
 800d51c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d51e:	6878      	ldr	r0, [r7, #4]
 800d520:	f000 fcc8 	bl	800deb4 <UART_CheckIdleState>
 800d524:	4603      	mov	r3, r0
}
 800d526:	4618      	mov	r0, r3
 800d528:	3708      	adds	r7, #8
 800d52a:	46bd      	mov	sp, r7
 800d52c:	bd80      	pop	{r7, pc}
 800d52e:	bf00      	nop
 800d530:	40013800 	.word	0x40013800
 800d534:	50013800 	.word	0x50013800
 800d538:	40004400 	.word	0x40004400
 800d53c:	50004400 	.word	0x50004400
 800d540:	40004800 	.word	0x40004800
 800d544:	50004800 	.word	0x50004800
 800d548:	40004c00 	.word	0x40004c00
 800d54c:	50004c00 	.word	0x50004c00
 800d550:	40005000 	.word	0x40005000
 800d554:	46002400 	.word	0x46002400
 800d558:	56002400 	.word	0x56002400
 800d55c:	08025e64 	.word	0x08025e64

0800d560 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d560:	b580      	push	{r7, lr}
 800d562:	b08a      	sub	sp, #40	; 0x28
 800d564:	af02      	add	r7, sp, #8
 800d566:	60f8      	str	r0, [r7, #12]
 800d568:	60b9      	str	r1, [r7, #8]
 800d56a:	603b      	str	r3, [r7, #0]
 800d56c:	4613      	mov	r3, r2
 800d56e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d570:	68fb      	ldr	r3, [r7, #12]
 800d572:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d576:	2b20      	cmp	r3, #32
 800d578:	f040 8092 	bne.w	800d6a0 <HAL_UART_Transmit+0x140>
  {
    if ((pData == NULL) || (Size == 0U))
 800d57c:	68bb      	ldr	r3, [r7, #8]
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d002      	beq.n	800d588 <HAL_UART_Transmit+0x28>
 800d582:	88fb      	ldrh	r3, [r7, #6]
 800d584:	2b00      	cmp	r3, #0
 800d586:	d101      	bne.n	800d58c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800d588:	2301      	movs	r3, #1
 800d58a:	e08a      	b.n	800d6a2 <HAL_UART_Transmit+0x142>
    }

    __HAL_LOCK(huart);
 800d58c:	68fb      	ldr	r3, [r7, #12]
 800d58e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d592:	2b01      	cmp	r3, #1
 800d594:	d101      	bne.n	800d59a <HAL_UART_Transmit+0x3a>
 800d596:	2302      	movs	r3, #2
 800d598:	e083      	b.n	800d6a2 <HAL_UART_Transmit+0x142>
 800d59a:	68fb      	ldr	r3, [r7, #12]
 800d59c:	2201      	movs	r2, #1
 800d59e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800d5a2:	68fb      	ldr	r3, [r7, #12]
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	689b      	ldr	r3, [r3, #8]
 800d5a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d5ac:	2b80      	cmp	r3, #128	; 0x80
 800d5ae:	d107      	bne.n	800d5c0 <HAL_UART_Transmit+0x60>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	689a      	ldr	r2, [r3, #8]
 800d5b6:	68fb      	ldr	r3, [r7, #12]
 800d5b8:	681b      	ldr	r3, [r3, #0]
 800d5ba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d5be:	609a      	str	r2, [r3, #8]
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d5c0:	68fb      	ldr	r3, [r7, #12]
 800d5c2:	2200      	movs	r2, #0
 800d5c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d5c8:	68fb      	ldr	r3, [r7, #12]
 800d5ca:	2221      	movs	r2, #33	; 0x21
 800d5cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d5d0:	f7f5 fb7a 	bl	8002cc8 <HAL_GetTick>
 800d5d4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800d5d6:	68fb      	ldr	r3, [r7, #12]
 800d5d8:	88fa      	ldrh	r2, [r7, #6]
 800d5da:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800d5de:	68fb      	ldr	r3, [r7, #12]
 800d5e0:	88fa      	ldrh	r2, [r7, #6]
 800d5e2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d5e6:	68fb      	ldr	r3, [r7, #12]
 800d5e8:	689b      	ldr	r3, [r3, #8]
 800d5ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d5ee:	d108      	bne.n	800d602 <HAL_UART_Transmit+0xa2>
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	691b      	ldr	r3, [r3, #16]
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d104      	bne.n	800d602 <HAL_UART_Transmit+0xa2>
    {
      pdata8bits  = NULL;
 800d5f8:	2300      	movs	r3, #0
 800d5fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800d5fc:	68bb      	ldr	r3, [r7, #8]
 800d5fe:	61bb      	str	r3, [r7, #24]
 800d600:	e003      	b.n	800d60a <HAL_UART_Transmit+0xaa>
    }
    else
    {
      pdata8bits  = pData;
 800d602:	68bb      	ldr	r3, [r7, #8]
 800d604:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d606:	2300      	movs	r3, #0
 800d608:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800d60a:	68fb      	ldr	r3, [r7, #12]
 800d60c:	2200      	movs	r2, #0
 800d60e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800d612:	e02c      	b.n	800d66e <HAL_UART_Transmit+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800d614:	683b      	ldr	r3, [r7, #0]
 800d616:	9300      	str	r3, [sp, #0]
 800d618:	697b      	ldr	r3, [r7, #20]
 800d61a:	2200      	movs	r2, #0
 800d61c:	2180      	movs	r1, #128	; 0x80
 800d61e:	68f8      	ldr	r0, [r7, #12]
 800d620:	f000 fc93 	bl	800df4a <UART_WaitOnFlagUntilTimeout>
 800d624:	4603      	mov	r3, r0
 800d626:	2b00      	cmp	r3, #0
 800d628:	d001      	beq.n	800d62e <HAL_UART_Transmit+0xce>
      {
        return HAL_TIMEOUT;
 800d62a:	2303      	movs	r3, #3
 800d62c:	e039      	b.n	800d6a2 <HAL_UART_Transmit+0x142>
      }
      if (pdata8bits == NULL)
 800d62e:	69fb      	ldr	r3, [r7, #28]
 800d630:	2b00      	cmp	r3, #0
 800d632:	d10b      	bne.n	800d64c <HAL_UART_Transmit+0xec>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800d634:	69bb      	ldr	r3, [r7, #24]
 800d636:	881b      	ldrh	r3, [r3, #0]
 800d638:	461a      	mov	r2, r3
 800d63a:	68fb      	ldr	r3, [r7, #12]
 800d63c:	681b      	ldr	r3, [r3, #0]
 800d63e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d642:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800d644:	69bb      	ldr	r3, [r7, #24]
 800d646:	3302      	adds	r3, #2
 800d648:	61bb      	str	r3, [r7, #24]
 800d64a:	e007      	b.n	800d65c <HAL_UART_Transmit+0xfc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800d64c:	69fb      	ldr	r3, [r7, #28]
 800d64e:	781a      	ldrb	r2, [r3, #0]
 800d650:	68fb      	ldr	r3, [r7, #12]
 800d652:	681b      	ldr	r3, [r3, #0]
 800d654:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800d656:	69fb      	ldr	r3, [r7, #28]
 800d658:	3301      	adds	r3, #1
 800d65a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800d65c:	68fb      	ldr	r3, [r7, #12]
 800d65e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800d662:	b29b      	uxth	r3, r3
 800d664:	3b01      	subs	r3, #1
 800d666:	b29a      	uxth	r2, r3
 800d668:	68fb      	ldr	r3, [r7, #12]
 800d66a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800d66e:	68fb      	ldr	r3, [r7, #12]
 800d670:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800d674:	b29b      	uxth	r3, r3
 800d676:	2b00      	cmp	r3, #0
 800d678:	d1cc      	bne.n	800d614 <HAL_UART_Transmit+0xb4>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800d67a:	683b      	ldr	r3, [r7, #0]
 800d67c:	9300      	str	r3, [sp, #0]
 800d67e:	697b      	ldr	r3, [r7, #20]
 800d680:	2200      	movs	r2, #0
 800d682:	2140      	movs	r1, #64	; 0x40
 800d684:	68f8      	ldr	r0, [r7, #12]
 800d686:	f000 fc60 	bl	800df4a <UART_WaitOnFlagUntilTimeout>
 800d68a:	4603      	mov	r3, r0
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d001      	beq.n	800d694 <HAL_UART_Transmit+0x134>
    {
      return HAL_TIMEOUT;
 800d690:	2303      	movs	r3, #3
 800d692:	e006      	b.n	800d6a2 <HAL_UART_Transmit+0x142>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	2220      	movs	r2, #32
 800d698:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800d69c:	2300      	movs	r3, #0
 800d69e:	e000      	b.n	800d6a2 <HAL_UART_Transmit+0x142>
  }
  else
  {
    return HAL_BUSY;
 800d6a0:	2302      	movs	r3, #2
  }
}
 800d6a2:	4618      	mov	r0, r3
 800d6a4:	3720      	adds	r7, #32
 800d6a6:	46bd      	mov	sp, r7
 800d6a8:	bd80      	pop	{r7, pc}
	...

0800d6ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d6ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d6b0:	b094      	sub	sp, #80	; 0x50
 800d6b2:	af00      	add	r7, sp, #0
 800d6b4:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d6b6:	2300      	movs	r3, #0
 800d6b8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t lpuart_ker_ck_pres;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 800d6bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6be:	685a      	ldr	r2, [r3, #4]
 800d6c0:	4b2d      	ldr	r3, [pc, #180]	; (800d778 <UART_SetConfig+0xcc>)
 800d6c2:	429a      	cmp	r2, r3
 800d6c4:	d904      	bls.n	800d6d0 <UART_SetConfig+0x24>
 800d6c6:	f640 4111 	movw	r1, #3089	; 0xc11
 800d6ca:	482c      	ldr	r0, [pc, #176]	; (800d77c <UART_SetConfig+0xd0>)
 800d6cc:	f007 fded 	bl	80152aa <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 800d6d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6d2:	689b      	ldr	r3, [r3, #8]
 800d6d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d6d8:	d00d      	beq.n	800d6f6 <UART_SetConfig+0x4a>
 800d6da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6dc:	689b      	ldr	r3, [r3, #8]
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d009      	beq.n	800d6f6 <UART_SetConfig+0x4a>
 800d6e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6e4:	689b      	ldr	r3, [r3, #8]
 800d6e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d6ea:	d004      	beq.n	800d6f6 <UART_SetConfig+0x4a>
 800d6ec:	f640 4112 	movw	r1, #3090	; 0xc12
 800d6f0:	4822      	ldr	r0, [pc, #136]	; (800d77c <UART_SetConfig+0xd0>)
 800d6f2:	f007 fdda 	bl	80152aa <assert_failed>
  if (UART_INSTANCE_LOWPOWER(huart))
 800d6f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6f8:	681a      	ldr	r2, [r3, #0]
 800d6fa:	4b21      	ldr	r3, [pc, #132]	; (800d780 <UART_SetConfig+0xd4>)
 800d6fc:	429a      	cmp	r2, r3
 800d6fe:	d004      	beq.n	800d70a <UART_SetConfig+0x5e>
 800d700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d702:	681a      	ldr	r2, [r3, #0]
 800d704:	4b1f      	ldr	r3, [pc, #124]	; (800d784 <UART_SetConfig+0xd8>)
 800d706:	429a      	cmp	r2, r3
 800d708:	d10e      	bne.n	800d728 <UART_SetConfig+0x7c>
  {
    assert_param(IS_LPUART_STOPBITS(huart->Init.StopBits));
 800d70a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d70c:	68db      	ldr	r3, [r3, #12]
 800d70e:	2b00      	cmp	r3, #0
 800d710:	d03a      	beq.n	800d788 <UART_SetConfig+0xdc>
 800d712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d714:	68db      	ldr	r3, [r3, #12]
 800d716:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d71a:	d035      	beq.n	800d788 <UART_SetConfig+0xdc>
 800d71c:	f640 4115 	movw	r1, #3093	; 0xc15
 800d720:	4816      	ldr	r0, [pc, #88]	; (800d77c <UART_SetConfig+0xd0>)
 800d722:	f007 fdc2 	bl	80152aa <assert_failed>
 800d726:	e02f      	b.n	800d788 <UART_SetConfig+0xdc>
  }
  else
  {
    assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 800d728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d72a:	68db      	ldr	r3, [r3, #12]
 800d72c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d730:	d012      	beq.n	800d758 <UART_SetConfig+0xac>
 800d732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d734:	68db      	ldr	r3, [r3, #12]
 800d736:	2b00      	cmp	r3, #0
 800d738:	d00e      	beq.n	800d758 <UART_SetConfig+0xac>
 800d73a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d73c:	68db      	ldr	r3, [r3, #12]
 800d73e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800d742:	d009      	beq.n	800d758 <UART_SetConfig+0xac>
 800d744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d746:	68db      	ldr	r3, [r3, #12]
 800d748:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d74c:	d004      	beq.n	800d758 <UART_SetConfig+0xac>
 800d74e:	f640 4119 	movw	r1, #3097	; 0xc19
 800d752:	480a      	ldr	r0, [pc, #40]	; (800d77c <UART_SetConfig+0xd0>)
 800d754:	f007 fda9 	bl	80152aa <assert_failed>
    assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 800d758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d75a:	6a1b      	ldr	r3, [r3, #32]
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d014      	beq.n	800d78a <UART_SetConfig+0xde>
 800d760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d762:	6a1b      	ldr	r3, [r3, #32]
 800d764:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d768:	d00f      	beq.n	800d78a <UART_SetConfig+0xde>
 800d76a:	f640 411a 	movw	r1, #3098	; 0xc1a
 800d76e:	4803      	ldr	r0, [pc, #12]	; (800d77c <UART_SetConfig+0xd0>)
 800d770:	f007 fd9b 	bl	80152aa <assert_failed>
 800d774:	e009      	b.n	800d78a <UART_SetConfig+0xde>
 800d776:	bf00      	nop
 800d778:	01312cff 	.word	0x01312cff
 800d77c:	08025e64 	.word	0x08025e64
 800d780:	46002400 	.word	0x46002400
 800d784:	56002400 	.word	0x56002400
    assert_param(IS_LPUART_STOPBITS(huart->Init.StopBits));
 800d788:	bf00      	nop
  }

  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800d78a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d78c:	691b      	ldr	r3, [r3, #16]
 800d78e:	2b00      	cmp	r3, #0
 800d790:	d00e      	beq.n	800d7b0 <UART_SetConfig+0x104>
 800d792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d794:	691b      	ldr	r3, [r3, #16]
 800d796:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d79a:	d009      	beq.n	800d7b0 <UART_SetConfig+0x104>
 800d79c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d79e:	691b      	ldr	r3, [r3, #16]
 800d7a0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800d7a4:	d004      	beq.n	800d7b0 <UART_SetConfig+0x104>
 800d7a6:	f640 411d 	movw	r1, #3101	; 0xc1d
 800d7aa:	488f      	ldr	r0, [pc, #572]	; (800d9e8 <UART_SetConfig+0x33c>)
 800d7ac:	f007 fd7d 	bl	80152aa <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 800d7b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7b2:	695b      	ldr	r3, [r3, #20]
 800d7b4:	f023 030c 	bic.w	r3, r3, #12
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d103      	bne.n	800d7c4 <UART_SetConfig+0x118>
 800d7bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7be:	695b      	ldr	r3, [r3, #20]
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d104      	bne.n	800d7ce <UART_SetConfig+0x122>
 800d7c4:	f640 411e 	movw	r1, #3102	; 0xc1e
 800d7c8:	4887      	ldr	r0, [pc, #540]	; (800d9e8 <UART_SetConfig+0x33c>)
 800d7ca:	f007 fd6e 	bl	80152aa <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 800d7ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7d0:	699b      	ldr	r3, [r3, #24]
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	d013      	beq.n	800d7fe <UART_SetConfig+0x152>
 800d7d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7d8:	699b      	ldr	r3, [r3, #24]
 800d7da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d7de:	d00e      	beq.n	800d7fe <UART_SetConfig+0x152>
 800d7e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7e2:	699b      	ldr	r3, [r3, #24]
 800d7e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d7e8:	d009      	beq.n	800d7fe <UART_SetConfig+0x152>
 800d7ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7ec:	699b      	ldr	r3, [r3, #24]
 800d7ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d7f2:	d004      	beq.n	800d7fe <UART_SetConfig+0x152>
 800d7f4:	f640 411f 	movw	r1, #3103	; 0xc1f
 800d7f8:	487b      	ldr	r0, [pc, #492]	; (800d9e8 <UART_SetConfig+0x33c>)
 800d7fa:	f007 fd56 	bl	80152aa <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 800d7fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d800:	69db      	ldr	r3, [r3, #28]
 800d802:	2b00      	cmp	r3, #0
 800d804:	d009      	beq.n	800d81a <UART_SetConfig+0x16e>
 800d806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d808:	69db      	ldr	r3, [r3, #28]
 800d80a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d80e:	d004      	beq.n	800d81a <UART_SetConfig+0x16e>
 800d810:	f44f 6142 	mov.w	r1, #3104	; 0xc20
 800d814:	4874      	ldr	r0, [pc, #464]	; (800d9e8 <UART_SetConfig+0x33c>)
 800d816:	f007 fd48 	bl	80152aa <assert_failed>
  assert_param(IS_UART_PRESCALER(huart->Init.ClockPrescaler));
 800d81a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d81c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d81e:	2b00      	cmp	r3, #0
 800d820:	d030      	beq.n	800d884 <UART_SetConfig+0x1d8>
 800d822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d826:	2b01      	cmp	r3, #1
 800d828:	d02c      	beq.n	800d884 <UART_SetConfig+0x1d8>
 800d82a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d82c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d82e:	2b02      	cmp	r3, #2
 800d830:	d028      	beq.n	800d884 <UART_SetConfig+0x1d8>
 800d832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d836:	2b03      	cmp	r3, #3
 800d838:	d024      	beq.n	800d884 <UART_SetConfig+0x1d8>
 800d83a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d83c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d83e:	2b04      	cmp	r3, #4
 800d840:	d020      	beq.n	800d884 <UART_SetConfig+0x1d8>
 800d842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d846:	2b05      	cmp	r3, #5
 800d848:	d01c      	beq.n	800d884 <UART_SetConfig+0x1d8>
 800d84a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d84c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d84e:	2b06      	cmp	r3, #6
 800d850:	d018      	beq.n	800d884 <UART_SetConfig+0x1d8>
 800d852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d856:	2b07      	cmp	r3, #7
 800d858:	d014      	beq.n	800d884 <UART_SetConfig+0x1d8>
 800d85a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d85c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d85e:	2b08      	cmp	r3, #8
 800d860:	d010      	beq.n	800d884 <UART_SetConfig+0x1d8>
 800d862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d866:	2b09      	cmp	r3, #9
 800d868:	d00c      	beq.n	800d884 <UART_SetConfig+0x1d8>
 800d86a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d86c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d86e:	2b0a      	cmp	r3, #10
 800d870:	d008      	beq.n	800d884 <UART_SetConfig+0x1d8>
 800d872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d876:	2b0b      	cmp	r3, #11
 800d878:	d004      	beq.n	800d884 <UART_SetConfig+0x1d8>
 800d87a:	f640 4121 	movw	r1, #3105	; 0xc21
 800d87e:	485a      	ldr	r0, [pc, #360]	; (800d9e8 <UART_SetConfig+0x33c>)
 800d880:	f007 fd13 	bl	80152aa <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d886:	689a      	ldr	r2, [r3, #8]
 800d888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d88a:	691b      	ldr	r3, [r3, #16]
 800d88c:	431a      	orrs	r2, r3
 800d88e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d890:	695b      	ldr	r3, [r3, #20]
 800d892:	431a      	orrs	r2, r3
 800d894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d896:	69db      	ldr	r3, [r3, #28]
 800d898:	4313      	orrs	r3, r2
 800d89a:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d89c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	4952      	ldr	r1, [pc, #328]	; (800d9ec <UART_SetConfig+0x340>)
 800d8a4:	4019      	ands	r1, r3
 800d8a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8a8:	681a      	ldr	r2, [r3, #0]
 800d8aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d8ac:	430b      	orrs	r3, r1
 800d8ae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d8b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8b2:	681b      	ldr	r3, [r3, #0]
 800d8b4:	685b      	ldr	r3, [r3, #4]
 800d8b6:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800d8ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8bc:	68d9      	ldr	r1, [r3, #12]
 800d8be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8c0:	681a      	ldr	r2, [r3, #0]
 800d8c2:	ea40 0301 	orr.w	r3, r0, r1
 800d8c6:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d8c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8ca:	699b      	ldr	r3, [r3, #24]
 800d8cc:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d8ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8d0:	681a      	ldr	r2, [r3, #0]
 800d8d2:	4b47      	ldr	r3, [pc, #284]	; (800d9f0 <UART_SetConfig+0x344>)
 800d8d4:	429a      	cmp	r2, r3
 800d8d6:	d009      	beq.n	800d8ec <UART_SetConfig+0x240>
 800d8d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8da:	681a      	ldr	r2, [r3, #0]
 800d8dc:	4b45      	ldr	r3, [pc, #276]	; (800d9f4 <UART_SetConfig+0x348>)
 800d8de:	429a      	cmp	r2, r3
 800d8e0:	d004      	beq.n	800d8ec <UART_SetConfig+0x240>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d8e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8e4:	6a1a      	ldr	r2, [r3, #32]
 800d8e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d8e8:	4313      	orrs	r3, r2
 800d8ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d8ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	689b      	ldr	r3, [r3, #8]
 800d8f2:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 800d8f6:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 800d8fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8fc:	681a      	ldr	r2, [r3, #0]
 800d8fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d900:	430b      	orrs	r3, r1
 800d902:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d906:	681b      	ldr	r3, [r3, #0]
 800d908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d90a:	f023 000f 	bic.w	r0, r3, #15
 800d90e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d910:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800d912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d914:	681a      	ldr	r2, [r3, #0]
 800d916:	ea40 0301 	orr.w	r3, r0, r1
 800d91a:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d91c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d91e:	681a      	ldr	r2, [r3, #0]
 800d920:	4b35      	ldr	r3, [pc, #212]	; (800d9f8 <UART_SetConfig+0x34c>)
 800d922:	429a      	cmp	r2, r3
 800d924:	d102      	bne.n	800d92c <UART_SetConfig+0x280>
 800d926:	2301      	movs	r3, #1
 800d928:	64bb      	str	r3, [r7, #72]	; 0x48
 800d92a:	e029      	b.n	800d980 <UART_SetConfig+0x2d4>
 800d92c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d92e:	681a      	ldr	r2, [r3, #0]
 800d930:	4b32      	ldr	r3, [pc, #200]	; (800d9fc <UART_SetConfig+0x350>)
 800d932:	429a      	cmp	r2, r3
 800d934:	d102      	bne.n	800d93c <UART_SetConfig+0x290>
 800d936:	2302      	movs	r3, #2
 800d938:	64bb      	str	r3, [r7, #72]	; 0x48
 800d93a:	e021      	b.n	800d980 <UART_SetConfig+0x2d4>
 800d93c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d93e:	681a      	ldr	r2, [r3, #0]
 800d940:	4b2f      	ldr	r3, [pc, #188]	; (800da00 <UART_SetConfig+0x354>)
 800d942:	429a      	cmp	r2, r3
 800d944:	d102      	bne.n	800d94c <UART_SetConfig+0x2a0>
 800d946:	2304      	movs	r3, #4
 800d948:	64bb      	str	r3, [r7, #72]	; 0x48
 800d94a:	e019      	b.n	800d980 <UART_SetConfig+0x2d4>
 800d94c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d94e:	681a      	ldr	r2, [r3, #0]
 800d950:	4b2c      	ldr	r3, [pc, #176]	; (800da04 <UART_SetConfig+0x358>)
 800d952:	429a      	cmp	r2, r3
 800d954:	d102      	bne.n	800d95c <UART_SetConfig+0x2b0>
 800d956:	2308      	movs	r3, #8
 800d958:	64bb      	str	r3, [r7, #72]	; 0x48
 800d95a:	e011      	b.n	800d980 <UART_SetConfig+0x2d4>
 800d95c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d95e:	681a      	ldr	r2, [r3, #0]
 800d960:	4b29      	ldr	r3, [pc, #164]	; (800da08 <UART_SetConfig+0x35c>)
 800d962:	429a      	cmp	r2, r3
 800d964:	d102      	bne.n	800d96c <UART_SetConfig+0x2c0>
 800d966:	2310      	movs	r3, #16
 800d968:	64bb      	str	r3, [r7, #72]	; 0x48
 800d96a:	e009      	b.n	800d980 <UART_SetConfig+0x2d4>
 800d96c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d96e:	681a      	ldr	r2, [r3, #0]
 800d970:	4b1f      	ldr	r3, [pc, #124]	; (800d9f0 <UART_SetConfig+0x344>)
 800d972:	429a      	cmp	r2, r3
 800d974:	d102      	bne.n	800d97c <UART_SetConfig+0x2d0>
 800d976:	2320      	movs	r3, #32
 800d978:	64bb      	str	r3, [r7, #72]	; 0x48
 800d97a:	e001      	b.n	800d980 <UART_SetConfig+0x2d4>
 800d97c:	2300      	movs	r3, #0
 800d97e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d982:	681a      	ldr	r2, [r3, #0]
 800d984:	4b1a      	ldr	r3, [pc, #104]	; (800d9f0 <UART_SetConfig+0x344>)
 800d986:	429a      	cmp	r2, r3
 800d988:	d005      	beq.n	800d996 <UART_SetConfig+0x2ea>
 800d98a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d98c:	681a      	ldr	r2, [r3, #0]
 800d98e:	4b19      	ldr	r3, [pc, #100]	; (800d9f4 <UART_SetConfig+0x348>)
 800d990:	429a      	cmp	r2, r3
 800d992:	f040 8087 	bne.w	800daa4 <UART_SetConfig+0x3f8>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800d996:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d998:	2200      	movs	r2, #0
 800d99a:	623b      	str	r3, [r7, #32]
 800d99c:	627a      	str	r2, [r7, #36]	; 0x24
 800d99e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800d9a2:	f7fb f9af 	bl	8008d04 <HAL_RCCEx_GetPeriphCLKFreq>
 800d9a6:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800d9a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	f000 80ea 	beq.w	800db84 <UART_SetConfig+0x4d8>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d9b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9b4:	4a15      	ldr	r2, [pc, #84]	; (800da0c <UART_SetConfig+0x360>)
 800d9b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d9ba:	461a      	mov	r2, r3
 800d9bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d9be:	fbb3 f3f2 	udiv	r3, r3, r2
 800d9c2:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d9c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9c6:	685a      	ldr	r2, [r3, #4]
 800d9c8:	4613      	mov	r3, r2
 800d9ca:	005b      	lsls	r3, r3, #1
 800d9cc:	4413      	add	r3, r2
 800d9ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d9d0:	429a      	cmp	r2, r3
 800d9d2:	d305      	bcc.n	800d9e0 <UART_SetConfig+0x334>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d9d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9d6:	685b      	ldr	r3, [r3, #4]
 800d9d8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d9da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d9dc:	429a      	cmp	r2, r3
 800d9de:	d917      	bls.n	800da10 <UART_SetConfig+0x364>
      {
        ret = HAL_ERROR;
 800d9e0:	2301      	movs	r3, #1
 800d9e2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800d9e6:	e05c      	b.n	800daa2 <UART_SetConfig+0x3f6>
 800d9e8:	08025e64 	.word	0x08025e64
 800d9ec:	cfff69f3 	.word	0xcfff69f3
 800d9f0:	46002400 	.word	0x46002400
 800d9f4:	56002400 	.word	0x56002400
 800d9f8:	40013800 	.word	0x40013800
 800d9fc:	40004400 	.word	0x40004400
 800da00:	40004800 	.word	0x40004800
 800da04:	40004c00 	.word	0x40004c00
 800da08:	40005000 	.word	0x40005000
 800da0c:	08027cc8 	.word	0x08027cc8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800da10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800da12:	2200      	movs	r2, #0
 800da14:	61bb      	str	r3, [r7, #24]
 800da16:	61fa      	str	r2, [r7, #28]
 800da18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da1c:	4a64      	ldr	r2, [pc, #400]	; (800dbb0 <UART_SetConfig+0x504>)
 800da1e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800da22:	b29b      	uxth	r3, r3
 800da24:	2200      	movs	r2, #0
 800da26:	613b      	str	r3, [r7, #16]
 800da28:	617a      	str	r2, [r7, #20]
 800da2a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800da2e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800da32:	f7f3 f977 	bl	8000d24 <__aeabi_uldivmod>
 800da36:	4602      	mov	r2, r0
 800da38:	460b      	mov	r3, r1
 800da3a:	4610      	mov	r0, r2
 800da3c:	4619      	mov	r1, r3
 800da3e:	f04f 0200 	mov.w	r2, #0
 800da42:	f04f 0300 	mov.w	r3, #0
 800da46:	020b      	lsls	r3, r1, #8
 800da48:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800da4c:	0202      	lsls	r2, r0, #8
 800da4e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800da50:	6849      	ldr	r1, [r1, #4]
 800da52:	0849      	lsrs	r1, r1, #1
 800da54:	2000      	movs	r0, #0
 800da56:	460c      	mov	r4, r1
 800da58:	4605      	mov	r5, r0
 800da5a:	eb12 0804 	adds.w	r8, r2, r4
 800da5e:	eb43 0905 	adc.w	r9, r3, r5
 800da62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da64:	685b      	ldr	r3, [r3, #4]
 800da66:	2200      	movs	r2, #0
 800da68:	60bb      	str	r3, [r7, #8]
 800da6a:	60fa      	str	r2, [r7, #12]
 800da6c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800da70:	4640      	mov	r0, r8
 800da72:	4649      	mov	r1, r9
 800da74:	f7f3 f956 	bl	8000d24 <__aeabi_uldivmod>
 800da78:	4602      	mov	r2, r0
 800da7a:	460b      	mov	r3, r1
 800da7c:	4613      	mov	r3, r2
 800da7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800da80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da82:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800da86:	d308      	bcc.n	800da9a <UART_SetConfig+0x3ee>
 800da88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800da8e:	d204      	bcs.n	800da9a <UART_SetConfig+0x3ee>
        {
          huart->Instance->BRR = usartdiv;
 800da90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800da96:	60da      	str	r2, [r3, #12]
 800da98:	e003      	b.n	800daa2 <UART_SetConfig+0x3f6>
        }
        else
        {
          ret = HAL_ERROR;
 800da9a:	2301      	movs	r3, #1
 800da9c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 800daa0:	e070      	b.n	800db84 <UART_SetConfig+0x4d8>
 800daa2:	e06f      	b.n	800db84 <UART_SetConfig+0x4d8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800daa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800daa6:	69db      	ldr	r3, [r3, #28]
 800daa8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800daac:	d13c      	bne.n	800db28 <UART_SetConfig+0x47c>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800daae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dab0:	2200      	movs	r2, #0
 800dab2:	603b      	str	r3, [r7, #0]
 800dab4:	607a      	str	r2, [r7, #4]
 800dab6:	e9d7 0100 	ldrd	r0, r1, [r7]
 800daba:	f7fb f923 	bl	8008d04 <HAL_RCCEx_GetPeriphCLKFreq>
 800dabe:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800dac0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	d05e      	beq.n	800db84 <UART_SetConfig+0x4d8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800dac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800daca:	4a39      	ldr	r2, [pc, #228]	; (800dbb0 <UART_SetConfig+0x504>)
 800dacc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dad0:	461a      	mov	r2, r3
 800dad2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dad4:	fbb3 f3f2 	udiv	r3, r3, r2
 800dad8:	005a      	lsls	r2, r3, #1
 800dada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dadc:	685b      	ldr	r3, [r3, #4]
 800dade:	085b      	lsrs	r3, r3, #1
 800dae0:	441a      	add	r2, r3
 800dae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dae4:	685b      	ldr	r3, [r3, #4]
 800dae6:	fbb2 f3f3 	udiv	r3, r2, r3
 800daea:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800daec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800daee:	2b0f      	cmp	r3, #15
 800daf0:	d916      	bls.n	800db20 <UART_SetConfig+0x474>
 800daf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800daf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800daf8:	d212      	bcs.n	800db20 <UART_SetConfig+0x474>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800dafa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dafc:	b29b      	uxth	r3, r3
 800dafe:	f023 030f 	bic.w	r3, r3, #15
 800db02:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800db04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db06:	085b      	lsrs	r3, r3, #1
 800db08:	b29b      	uxth	r3, r3
 800db0a:	f003 0307 	and.w	r3, r3, #7
 800db0e:	b29a      	uxth	r2, r3
 800db10:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800db12:	4313      	orrs	r3, r2
 800db14:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 800db16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800db1c:	60da      	str	r2, [r3, #12]
 800db1e:	e031      	b.n	800db84 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 800db20:	2301      	movs	r3, #1
 800db22:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800db26:	e02d      	b.n	800db84 <UART_SetConfig+0x4d8>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800db28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800db2a:	2200      	movs	r2, #0
 800db2c:	469a      	mov	sl, r3
 800db2e:	4693      	mov	fp, r2
 800db30:	4650      	mov	r0, sl
 800db32:	4659      	mov	r1, fp
 800db34:	f7fb f8e6 	bl	8008d04 <HAL_RCCEx_GetPeriphCLKFreq>
 800db38:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 800db3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d021      	beq.n	800db84 <UART_SetConfig+0x4d8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800db40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db44:	4a1a      	ldr	r2, [pc, #104]	; (800dbb0 <UART_SetConfig+0x504>)
 800db46:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800db4a:	461a      	mov	r2, r3
 800db4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800db4e:	fbb3 f2f2 	udiv	r2, r3, r2
 800db52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db54:	685b      	ldr	r3, [r3, #4]
 800db56:	085b      	lsrs	r3, r3, #1
 800db58:	441a      	add	r2, r3
 800db5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db5c:	685b      	ldr	r3, [r3, #4]
 800db5e:	fbb2 f3f3 	udiv	r3, r2, r3
 800db62:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800db64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db66:	2b0f      	cmp	r3, #15
 800db68:	d909      	bls.n	800db7e <UART_SetConfig+0x4d2>
 800db6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800db70:	d205      	bcs.n	800db7e <UART_SetConfig+0x4d2>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800db72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db74:	b29a      	uxth	r2, r3
 800db76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db78:	681b      	ldr	r3, [r3, #0]
 800db7a:	60da      	str	r2, [r3, #12]
 800db7c:	e002      	b.n	800db84 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 800db7e:	2301      	movs	r3, #1
 800db80:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800db84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db86:	2201      	movs	r2, #1
 800db88:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800db8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db8e:	2201      	movs	r2, #1
 800db90:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800db94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db96:	2200      	movs	r2, #0
 800db98:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800db9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db9c:	2200      	movs	r2, #0
 800db9e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800dba0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800dba4:	4618      	mov	r0, r3
 800dba6:	3750      	adds	r7, #80	; 0x50
 800dba8:	46bd      	mov	sp, r7
 800dbaa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800dbae:	bf00      	nop
 800dbb0:	08027cc8 	.word	0x08027cc8

0800dbb4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800dbb4:	b580      	push	{r7, lr}
 800dbb6:	b082      	sub	sp, #8
 800dbb8:	af00      	add	r7, sp, #0
 800dbba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dbc0:	2bff      	cmp	r3, #255	; 0xff
 800dbc2:	d904      	bls.n	800dbce <UART_AdvFeatureConfig+0x1a>
 800dbc4:	f640 41a6 	movw	r1, #3238	; 0xca6
 800dbc8:	4884      	ldr	r0, [pc, #528]	; (800dddc <UART_AdvFeatureConfig+0x228>)
 800dbca:	f007 fb6e 	bl	80152aa <assert_failed>

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dbd2:	f003 0301 	and.w	r3, r3, #1
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d018      	beq.n	800dc0c <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	d009      	beq.n	800dbf6 <UART_AdvFeatureConfig+0x42>
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbe6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800dbea:	d004      	beq.n	800dbf6 <UART_AdvFeatureConfig+0x42>
 800dbec:	f640 41ab 	movw	r1, #3243	; 0xcab
 800dbf0:	487a      	ldr	r0, [pc, #488]	; (800dddc <UART_AdvFeatureConfig+0x228>)
 800dbf2:	f007 fb5a 	bl	80152aa <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	681b      	ldr	r3, [r3, #0]
 800dbfa:	685b      	ldr	r3, [r3, #4]
 800dbfc:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	681b      	ldr	r3, [r3, #0]
 800dc08:	430a      	orrs	r2, r1
 800dc0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc10:	f003 0302 	and.w	r3, r3, #2
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	d018      	beq.n	800dc4a <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d009      	beq.n	800dc34 <UART_AdvFeatureConfig+0x80>
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dc28:	d004      	beq.n	800dc34 <UART_AdvFeatureConfig+0x80>
 800dc2a:	f640 41b2 	movw	r1, #3250	; 0xcb2
 800dc2e:	486b      	ldr	r0, [pc, #428]	; (800dddc <UART_AdvFeatureConfig+0x228>)
 800dc30:	f007 fb3b 	bl	80152aa <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	685b      	ldr	r3, [r3, #4]
 800dc3a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	430a      	orrs	r2, r1
 800dc48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc4e:	f003 0304 	and.w	r3, r3, #4
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	d018      	beq.n	800dc88 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d009      	beq.n	800dc72 <UART_AdvFeatureConfig+0xbe>
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc62:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800dc66:	d004      	beq.n	800dc72 <UART_AdvFeatureConfig+0xbe>
 800dc68:	f640 41b9 	movw	r1, #3257	; 0xcb9
 800dc6c:	485b      	ldr	r0, [pc, #364]	; (800dddc <UART_AdvFeatureConfig+0x228>)
 800dc6e:	f007 fb1c 	bl	80152aa <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	681b      	ldr	r3, [r3, #0]
 800dc76:	685b      	ldr	r3, [r3, #4]
 800dc78:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	430a      	orrs	r2, r1
 800dc86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc8c:	f003 0308 	and.w	r3, r3, #8
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	d018      	beq.n	800dcc6 <UART_AdvFeatureConfig+0x112>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	d009      	beq.n	800dcb0 <UART_AdvFeatureConfig+0xfc>
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dca0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800dca4:	d004      	beq.n	800dcb0 <UART_AdvFeatureConfig+0xfc>
 800dca6:	f44f 614c 	mov.w	r1, #3264	; 0xcc0
 800dcaa:	484c      	ldr	r0, [pc, #304]	; (800dddc <UART_AdvFeatureConfig+0x228>)
 800dcac:	f007 fafd 	bl	80152aa <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	681b      	ldr	r3, [r3, #0]
 800dcb4:	685b      	ldr	r3, [r3, #4]
 800dcb6:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	681b      	ldr	r3, [r3, #0]
 800dcc2:	430a      	orrs	r2, r1
 800dcc4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dcca:	f003 0310 	and.w	r3, r3, #16
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	d018      	beq.n	800dd04 <UART_AdvFeatureConfig+0x150>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d009      	beq.n	800dcee <UART_AdvFeatureConfig+0x13a>
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dcde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dce2:	d004      	beq.n	800dcee <UART_AdvFeatureConfig+0x13a>
 800dce4:	f640 41c7 	movw	r1, #3271	; 0xcc7
 800dce8:	483c      	ldr	r0, [pc, #240]	; (800dddc <UART_AdvFeatureConfig+0x228>)
 800dcea:	f007 fade 	bl	80152aa <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	681b      	ldr	r3, [r3, #0]
 800dcf2:	689b      	ldr	r3, [r3, #8]
 800dcf4:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	681b      	ldr	r3, [r3, #0]
 800dd00:	430a      	orrs	r2, r1
 800dd02:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd08:	f003 0320 	and.w	r3, r3, #32
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	d018      	beq.n	800dd42 <UART_AdvFeatureConfig+0x18e>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	d009      	beq.n	800dd2c <UART_AdvFeatureConfig+0x178>
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800dd20:	d004      	beq.n	800dd2c <UART_AdvFeatureConfig+0x178>
 800dd22:	f640 41ce 	movw	r1, #3278	; 0xcce
 800dd26:	482d      	ldr	r0, [pc, #180]	; (800dddc <UART_AdvFeatureConfig+0x228>)
 800dd28:	f007 fabf 	bl	80152aa <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	681b      	ldr	r3, [r3, #0]
 800dd30:	689b      	ldr	r3, [r3, #8]
 800dd32:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	681b      	ldr	r3, [r3, #0]
 800dd3e:	430a      	orrs	r2, r1
 800dd40:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	f000 808d 	beq.w	800de6a <UART_AdvFeatureConfig+0x2b6>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	681b      	ldr	r3, [r3, #0]
 800dd54:	4a22      	ldr	r2, [pc, #136]	; (800dde0 <UART_AdvFeatureConfig+0x22c>)
 800dd56:	4293      	cmp	r3, r2
 800dd58:	d031      	beq.n	800ddbe <UART_AdvFeatureConfig+0x20a>
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	681b      	ldr	r3, [r3, #0]
 800dd5e:	4a21      	ldr	r2, [pc, #132]	; (800dde4 <UART_AdvFeatureConfig+0x230>)
 800dd60:	4293      	cmp	r3, r2
 800dd62:	d02c      	beq.n	800ddbe <UART_AdvFeatureConfig+0x20a>
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	681b      	ldr	r3, [r3, #0]
 800dd68:	4a1f      	ldr	r2, [pc, #124]	; (800dde8 <UART_AdvFeatureConfig+0x234>)
 800dd6a:	4293      	cmp	r3, r2
 800dd6c:	d027      	beq.n	800ddbe <UART_AdvFeatureConfig+0x20a>
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	681b      	ldr	r3, [r3, #0]
 800dd72:	4a1e      	ldr	r2, [pc, #120]	; (800ddec <UART_AdvFeatureConfig+0x238>)
 800dd74:	4293      	cmp	r3, r2
 800dd76:	d022      	beq.n	800ddbe <UART_AdvFeatureConfig+0x20a>
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	4a1c      	ldr	r2, [pc, #112]	; (800ddf0 <UART_AdvFeatureConfig+0x23c>)
 800dd7e:	4293      	cmp	r3, r2
 800dd80:	d01d      	beq.n	800ddbe <UART_AdvFeatureConfig+0x20a>
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	681b      	ldr	r3, [r3, #0]
 800dd86:	4a1b      	ldr	r2, [pc, #108]	; (800ddf4 <UART_AdvFeatureConfig+0x240>)
 800dd88:	4293      	cmp	r3, r2
 800dd8a:	d018      	beq.n	800ddbe <UART_AdvFeatureConfig+0x20a>
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	681b      	ldr	r3, [r3, #0]
 800dd90:	4a19      	ldr	r2, [pc, #100]	; (800ddf8 <UART_AdvFeatureConfig+0x244>)
 800dd92:	4293      	cmp	r3, r2
 800dd94:	d013      	beq.n	800ddbe <UART_AdvFeatureConfig+0x20a>
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	681b      	ldr	r3, [r3, #0]
 800dd9a:	4a18      	ldr	r2, [pc, #96]	; (800ddfc <UART_AdvFeatureConfig+0x248>)
 800dd9c:	4293      	cmp	r3, r2
 800dd9e:	d00e      	beq.n	800ddbe <UART_AdvFeatureConfig+0x20a>
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	681b      	ldr	r3, [r3, #0]
 800dda4:	4a16      	ldr	r2, [pc, #88]	; (800de00 <UART_AdvFeatureConfig+0x24c>)
 800dda6:	4293      	cmp	r3, r2
 800dda8:	d009      	beq.n	800ddbe <UART_AdvFeatureConfig+0x20a>
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	681b      	ldr	r3, [r3, #0]
 800ddae:	f1b3 2f50 	cmp.w	r3, #1342197760	; 0x50005000
 800ddb2:	d004      	beq.n	800ddbe <UART_AdvFeatureConfig+0x20a>
 800ddb4:	f640 41d5 	movw	r1, #3285	; 0xcd5
 800ddb8:	4808      	ldr	r0, [pc, #32]	; (800dddc <UART_AdvFeatureConfig+0x228>)
 800ddba:	f007 fa76 	bl	80152aa <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d01e      	beq.n	800de04 <UART_AdvFeatureConfig+0x250>
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ddca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ddce:	d019      	beq.n	800de04 <UART_AdvFeatureConfig+0x250>
 800ddd0:	f640 41d6 	movw	r1, #3286	; 0xcd6
 800ddd4:	4801      	ldr	r0, [pc, #4]	; (800dddc <UART_AdvFeatureConfig+0x228>)
 800ddd6:	f007 fa68 	bl	80152aa <assert_failed>
 800ddda:	e013      	b.n	800de04 <UART_AdvFeatureConfig+0x250>
 800dddc:	08025e64 	.word	0x08025e64
 800dde0:	40013800 	.word	0x40013800
 800dde4:	50013800 	.word	0x50013800
 800dde8:	40004400 	.word	0x40004400
 800ddec:	50004400 	.word	0x50004400
 800ddf0:	40004800 	.word	0x40004800
 800ddf4:	50004800 	.word	0x50004800
 800ddf8:	40004c00 	.word	0x40004c00
 800ddfc:	50004c00 	.word	0x50004c00
 800de00:	40005000 	.word	0x40005000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	681b      	ldr	r3, [r3, #0]
 800de08:	685b      	ldr	r3, [r3, #4]
 800de0a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	681b      	ldr	r3, [r3, #0]
 800de16:	430a      	orrs	r2, r1
 800de18:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800de1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800de22:	d122      	bne.n	800de6a <UART_AdvFeatureConfig+0x2b6>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800de28:	2b00      	cmp	r3, #0
 800de2a:	d013      	beq.n	800de54 <UART_AdvFeatureConfig+0x2a0>
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800de30:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800de34:	d00e      	beq.n	800de54 <UART_AdvFeatureConfig+0x2a0>
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800de3a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800de3e:	d009      	beq.n	800de54 <UART_AdvFeatureConfig+0x2a0>
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800de44:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800de48:	d004      	beq.n	800de54 <UART_AdvFeatureConfig+0x2a0>
 800de4a:	f640 41db 	movw	r1, #3291	; 0xcdb
 800de4e:	4818      	ldr	r0, [pc, #96]	; (800deb0 <UART_AdvFeatureConfig+0x2fc>)
 800de50:	f007 fa2b 	bl	80152aa <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	681b      	ldr	r3, [r3, #0]
 800de58:	685b      	ldr	r3, [r3, #4]
 800de5a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	681b      	ldr	r3, [r3, #0]
 800de66:	430a      	orrs	r2, r1
 800de68:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800de72:	2b00      	cmp	r3, #0
 800de74:	d018      	beq.n	800dea8 <UART_AdvFeatureConfig+0x2f4>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	d009      	beq.n	800de92 <UART_AdvFeatureConfig+0x2de>
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800de82:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800de86:	d004      	beq.n	800de92 <UART_AdvFeatureConfig+0x2de>
 800de88:	f640 41e3 	movw	r1, #3299	; 0xce3
 800de8c:	4808      	ldr	r0, [pc, #32]	; (800deb0 <UART_AdvFeatureConfig+0x2fc>)
 800de8e:	f007 fa0c 	bl	80152aa <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	681b      	ldr	r3, [r3, #0]
 800de96:	685b      	ldr	r3, [r3, #4]
 800de98:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	681b      	ldr	r3, [r3, #0]
 800dea4:	430a      	orrs	r2, r1
 800dea6:	605a      	str	r2, [r3, #4]
  }
}
 800dea8:	bf00      	nop
 800deaa:	3708      	adds	r7, #8
 800deac:	46bd      	mov	sp, r7
 800deae:	bd80      	pop	{r7, pc}
 800deb0:	08025e64 	.word	0x08025e64

0800deb4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800deb4:	b580      	push	{r7, lr}
 800deb6:	b086      	sub	sp, #24
 800deb8:	af02      	add	r7, sp, #8
 800deba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	2200      	movs	r2, #0
 800dec0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800dec4:	f7f4 ff00 	bl	8002cc8 <HAL_GetTick>
 800dec8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	681b      	ldr	r3, [r3, #0]
 800dece:	681b      	ldr	r3, [r3, #0]
 800ded0:	f003 0308 	and.w	r3, r3, #8
 800ded4:	2b08      	cmp	r3, #8
 800ded6:	d10e      	bne.n	800def6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ded8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800dedc:	9300      	str	r3, [sp, #0]
 800dede:	68fb      	ldr	r3, [r7, #12]
 800dee0:	2200      	movs	r2, #0
 800dee2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800dee6:	6878      	ldr	r0, [r7, #4]
 800dee8:	f000 f82f 	bl	800df4a <UART_WaitOnFlagUntilTimeout>
 800deec:	4603      	mov	r3, r0
 800deee:	2b00      	cmp	r3, #0
 800def0:	d001      	beq.n	800def6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800def2:	2303      	movs	r3, #3
 800def4:	e025      	b.n	800df42 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	681b      	ldr	r3, [r3, #0]
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	f003 0304 	and.w	r3, r3, #4
 800df00:	2b04      	cmp	r3, #4
 800df02:	d10e      	bne.n	800df22 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800df04:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800df08:	9300      	str	r3, [sp, #0]
 800df0a:	68fb      	ldr	r3, [r7, #12]
 800df0c:	2200      	movs	r2, #0
 800df0e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800df12:	6878      	ldr	r0, [r7, #4]
 800df14:	f000 f819 	bl	800df4a <UART_WaitOnFlagUntilTimeout>
 800df18:	4603      	mov	r3, r0
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d001      	beq.n	800df22 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800df1e:	2303      	movs	r3, #3
 800df20:	e00f      	b.n	800df42 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	2220      	movs	r2, #32
 800df26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	2220      	movs	r2, #32
 800df2e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	2200      	movs	r2, #0
 800df36:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	2200      	movs	r2, #0
 800df3c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800df40:	2300      	movs	r3, #0
}
 800df42:	4618      	mov	r0, r3
 800df44:	3710      	adds	r7, #16
 800df46:	46bd      	mov	sp, r7
 800df48:	bd80      	pop	{r7, pc}

0800df4a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800df4a:	b580      	push	{r7, lr}
 800df4c:	b09c      	sub	sp, #112	; 0x70
 800df4e:	af00      	add	r7, sp, #0
 800df50:	60f8      	str	r0, [r7, #12]
 800df52:	60b9      	str	r1, [r7, #8]
 800df54:	603b      	str	r3, [r7, #0]
 800df56:	4613      	mov	r3, r2
 800df58:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800df5a:	e0a9      	b.n	800e0b0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800df5c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800df5e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800df62:	f000 80a5 	beq.w	800e0b0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800df66:	f7f4 feaf 	bl	8002cc8 <HAL_GetTick>
 800df6a:	4602      	mov	r2, r0
 800df6c:	683b      	ldr	r3, [r7, #0]
 800df6e:	1ad3      	subs	r3, r2, r3
 800df70:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800df72:	429a      	cmp	r2, r3
 800df74:	d302      	bcc.n	800df7c <UART_WaitOnFlagUntilTimeout+0x32>
 800df76:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800df78:	2b00      	cmp	r3, #0
 800df7a:	d140      	bne.n	800dffe <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800df7c:	68fb      	ldr	r3, [r7, #12]
 800df7e:	681b      	ldr	r3, [r3, #0]
 800df80:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800df84:	e853 3f00 	ldrex	r3, [r3]
 800df88:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800df8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800df8c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800df90:	667b      	str	r3, [r7, #100]	; 0x64
 800df92:	68fb      	ldr	r3, [r7, #12]
 800df94:	681b      	ldr	r3, [r3, #0]
 800df96:	461a      	mov	r2, r3
 800df98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800df9a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800df9c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df9e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800dfa0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800dfa2:	e841 2300 	strex	r3, r2, [r1]
 800dfa6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800dfa8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	d1e6      	bne.n	800df7c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dfae:	68fb      	ldr	r3, [r7, #12]
 800dfb0:	681b      	ldr	r3, [r3, #0]
 800dfb2:	3308      	adds	r3, #8
 800dfb4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dfb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dfb8:	e853 3f00 	ldrex	r3, [r3]
 800dfbc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800dfbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfc0:	f023 0301 	bic.w	r3, r3, #1
 800dfc4:	663b      	str	r3, [r7, #96]	; 0x60
 800dfc6:	68fb      	ldr	r3, [r7, #12]
 800dfc8:	681b      	ldr	r3, [r3, #0]
 800dfca:	3308      	adds	r3, #8
 800dfcc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800dfce:	64ba      	str	r2, [r7, #72]	; 0x48
 800dfd0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dfd2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800dfd4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dfd6:	e841 2300 	strex	r3, r2, [r1]
 800dfda:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800dfdc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	d1e5      	bne.n	800dfae <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800dfe2:	68fb      	ldr	r3, [r7, #12]
 800dfe4:	2220      	movs	r2, #32
 800dfe6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800dfea:	68fb      	ldr	r3, [r7, #12]
 800dfec:	2220      	movs	r2, #32
 800dfee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800dff2:	68fb      	ldr	r3, [r7, #12]
 800dff4:	2200      	movs	r2, #0
 800dff6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800dffa:	2303      	movs	r3, #3
 800dffc:	e069      	b.n	800e0d2 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800dffe:	68fb      	ldr	r3, [r7, #12]
 800e000:	681b      	ldr	r3, [r3, #0]
 800e002:	681b      	ldr	r3, [r3, #0]
 800e004:	f003 0304 	and.w	r3, r3, #4
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d051      	beq.n	800e0b0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e00c:	68fb      	ldr	r3, [r7, #12]
 800e00e:	681b      	ldr	r3, [r3, #0]
 800e010:	69db      	ldr	r3, [r3, #28]
 800e012:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e016:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e01a:	d149      	bne.n	800e0b0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e01c:	68fb      	ldr	r3, [r7, #12]
 800e01e:	681b      	ldr	r3, [r3, #0]
 800e020:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e024:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800e026:	68fb      	ldr	r3, [r7, #12]
 800e028:	681b      	ldr	r3, [r3, #0]
 800e02a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e02c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e02e:	e853 3f00 	ldrex	r3, [r3]
 800e032:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e036:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800e03a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e03c:	68fb      	ldr	r3, [r7, #12]
 800e03e:	681b      	ldr	r3, [r3, #0]
 800e040:	461a      	mov	r2, r3
 800e042:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e044:	637b      	str	r3, [r7, #52]	; 0x34
 800e046:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e048:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e04a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e04c:	e841 2300 	strex	r3, r2, [r1]
 800e050:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800e052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e054:	2b00      	cmp	r3, #0
 800e056:	d1e6      	bne.n	800e026 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e058:	68fb      	ldr	r3, [r7, #12]
 800e05a:	681b      	ldr	r3, [r3, #0]
 800e05c:	3308      	adds	r3, #8
 800e05e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e060:	697b      	ldr	r3, [r7, #20]
 800e062:	e853 3f00 	ldrex	r3, [r3]
 800e066:	613b      	str	r3, [r7, #16]
   return(result);
 800e068:	693b      	ldr	r3, [r7, #16]
 800e06a:	f023 0301 	bic.w	r3, r3, #1
 800e06e:	66bb      	str	r3, [r7, #104]	; 0x68
 800e070:	68fb      	ldr	r3, [r7, #12]
 800e072:	681b      	ldr	r3, [r3, #0]
 800e074:	3308      	adds	r3, #8
 800e076:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800e078:	623a      	str	r2, [r7, #32]
 800e07a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e07c:	69f9      	ldr	r1, [r7, #28]
 800e07e:	6a3a      	ldr	r2, [r7, #32]
 800e080:	e841 2300 	strex	r3, r2, [r1]
 800e084:	61bb      	str	r3, [r7, #24]
   return(result);
 800e086:	69bb      	ldr	r3, [r7, #24]
 800e088:	2b00      	cmp	r3, #0
 800e08a:	d1e5      	bne.n	800e058 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800e08c:	68fb      	ldr	r3, [r7, #12]
 800e08e:	2220      	movs	r2, #32
 800e090:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	2220      	movs	r2, #32
 800e098:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e09c:	68fb      	ldr	r3, [r7, #12]
 800e09e:	2220      	movs	r2, #32
 800e0a0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e0a4:	68fb      	ldr	r3, [r7, #12]
 800e0a6:	2200      	movs	r2, #0
 800e0a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800e0ac:	2303      	movs	r3, #3
 800e0ae:	e010      	b.n	800e0d2 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e0b0:	68fb      	ldr	r3, [r7, #12]
 800e0b2:	681b      	ldr	r3, [r3, #0]
 800e0b4:	69da      	ldr	r2, [r3, #28]
 800e0b6:	68bb      	ldr	r3, [r7, #8]
 800e0b8:	4013      	ands	r3, r2
 800e0ba:	68ba      	ldr	r2, [r7, #8]
 800e0bc:	429a      	cmp	r2, r3
 800e0be:	bf0c      	ite	eq
 800e0c0:	2301      	moveq	r3, #1
 800e0c2:	2300      	movne	r3, #0
 800e0c4:	b2db      	uxtb	r3, r3
 800e0c6:	461a      	mov	r2, r3
 800e0c8:	79fb      	ldrb	r3, [r7, #7]
 800e0ca:	429a      	cmp	r2, r3
 800e0cc:	f43f af46 	beq.w	800df5c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e0d0:	2300      	movs	r3, #0
}
 800e0d2:	4618      	mov	r0, r3
 800e0d4:	3770      	adds	r7, #112	; 0x70
 800e0d6:	46bd      	mov	sp, r7
 800e0d8:	bd80      	pop	{r7, pc}
	...

0800e0dc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800e0dc:	b580      	push	{r7, lr}
 800e0de:	b084      	sub	sp, #16
 800e0e0:	af00      	add	r7, sp, #0
 800e0e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1;

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	681b      	ldr	r3, [r3, #0]
 800e0e8:	4a38      	ldr	r2, [pc, #224]	; (800e1cc <HAL_UARTEx_DisableFifoMode+0xf0>)
 800e0ea:	4293      	cmp	r3, r2
 800e0ec:	d03b      	beq.n	800e166 <HAL_UARTEx_DisableFifoMode+0x8a>
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	681b      	ldr	r3, [r3, #0]
 800e0f2:	4a37      	ldr	r2, [pc, #220]	; (800e1d0 <HAL_UARTEx_DisableFifoMode+0xf4>)
 800e0f4:	4293      	cmp	r3, r2
 800e0f6:	d036      	beq.n	800e166 <HAL_UARTEx_DisableFifoMode+0x8a>
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	681b      	ldr	r3, [r3, #0]
 800e0fc:	4a35      	ldr	r2, [pc, #212]	; (800e1d4 <HAL_UARTEx_DisableFifoMode+0xf8>)
 800e0fe:	4293      	cmp	r3, r2
 800e100:	d031      	beq.n	800e166 <HAL_UARTEx_DisableFifoMode+0x8a>
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	681b      	ldr	r3, [r3, #0]
 800e106:	4a34      	ldr	r2, [pc, #208]	; (800e1d8 <HAL_UARTEx_DisableFifoMode+0xfc>)
 800e108:	4293      	cmp	r3, r2
 800e10a:	d02c      	beq.n	800e166 <HAL_UARTEx_DisableFifoMode+0x8a>
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	681b      	ldr	r3, [r3, #0]
 800e110:	4a32      	ldr	r2, [pc, #200]	; (800e1dc <HAL_UARTEx_DisableFifoMode+0x100>)
 800e112:	4293      	cmp	r3, r2
 800e114:	d027      	beq.n	800e166 <HAL_UARTEx_DisableFifoMode+0x8a>
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	681b      	ldr	r3, [r3, #0]
 800e11a:	4a31      	ldr	r2, [pc, #196]	; (800e1e0 <HAL_UARTEx_DisableFifoMode+0x104>)
 800e11c:	4293      	cmp	r3, r2
 800e11e:	d022      	beq.n	800e166 <HAL_UARTEx_DisableFifoMode+0x8a>
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	681b      	ldr	r3, [r3, #0]
 800e124:	4a2f      	ldr	r2, [pc, #188]	; (800e1e4 <HAL_UARTEx_DisableFifoMode+0x108>)
 800e126:	4293      	cmp	r3, r2
 800e128:	d01d      	beq.n	800e166 <HAL_UARTEx_DisableFifoMode+0x8a>
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	681b      	ldr	r3, [r3, #0]
 800e12e:	4a2e      	ldr	r2, [pc, #184]	; (800e1e8 <HAL_UARTEx_DisableFifoMode+0x10c>)
 800e130:	4293      	cmp	r3, r2
 800e132:	d018      	beq.n	800e166 <HAL_UARTEx_DisableFifoMode+0x8a>
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	681b      	ldr	r3, [r3, #0]
 800e138:	4a2c      	ldr	r2, [pc, #176]	; (800e1ec <HAL_UARTEx_DisableFifoMode+0x110>)
 800e13a:	4293      	cmp	r3, r2
 800e13c:	d013      	beq.n	800e166 <HAL_UARTEx_DisableFifoMode+0x8a>
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	681b      	ldr	r3, [r3, #0]
 800e142:	f1b3 2f50 	cmp.w	r3, #1342197760	; 0x50005000
 800e146:	d00e      	beq.n	800e166 <HAL_UARTEx_DisableFifoMode+0x8a>
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	681b      	ldr	r3, [r3, #0]
 800e14c:	4a28      	ldr	r2, [pc, #160]	; (800e1f0 <HAL_UARTEx_DisableFifoMode+0x114>)
 800e14e:	4293      	cmp	r3, r2
 800e150:	d009      	beq.n	800e166 <HAL_UARTEx_DisableFifoMode+0x8a>
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	681b      	ldr	r3, [r3, #0]
 800e156:	4a27      	ldr	r2, [pc, #156]	; (800e1f4 <HAL_UARTEx_DisableFifoMode+0x118>)
 800e158:	4293      	cmp	r3, r2
 800e15a:	d004      	beq.n	800e166 <HAL_UARTEx_DisableFifoMode+0x8a>
 800e15c:	f240 211f 	movw	r1, #543	; 0x21f
 800e160:	4825      	ldr	r0, [pc, #148]	; (800e1f8 <HAL_UARTEx_DisableFifoMode+0x11c>)
 800e162:	f007 f8a2 	bl	80152aa <assert_failed>

  /* Process Locked */
  __HAL_LOCK(huart);
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e16c:	2b01      	cmp	r3, #1
 800e16e:	d101      	bne.n	800e174 <HAL_UARTEx_DisableFifoMode+0x98>
 800e170:	2302      	movs	r3, #2
 800e172:	e027      	b.n	800e1c4 <HAL_UARTEx_DisableFifoMode+0xe8>
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	2201      	movs	r2, #1
 800e178:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	2224      	movs	r2, #36	; 0x24
 800e180:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	681b      	ldr	r3, [r3, #0]
 800e188:	681b      	ldr	r3, [r3, #0]
 800e18a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	681b      	ldr	r3, [r3, #0]
 800e190:	681a      	ldr	r2, [r3, #0]
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	681b      	ldr	r3, [r3, #0]
 800e196:	f022 0201 	bic.w	r2, r2, #1
 800e19a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800e19c:	68fb      	ldr	r3, [r7, #12]
 800e19e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800e1a2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	2200      	movs	r2, #0
 800e1a8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	681b      	ldr	r3, [r3, #0]
 800e1ae:	68fa      	ldr	r2, [r7, #12]
 800e1b0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	2220      	movs	r2, #32
 800e1b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	2200      	movs	r2, #0
 800e1be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e1c2:	2300      	movs	r3, #0
}
 800e1c4:	4618      	mov	r0, r3
 800e1c6:	3710      	adds	r7, #16
 800e1c8:	46bd      	mov	sp, r7
 800e1ca:	bd80      	pop	{r7, pc}
 800e1cc:	40013800 	.word	0x40013800
 800e1d0:	50013800 	.word	0x50013800
 800e1d4:	40004400 	.word	0x40004400
 800e1d8:	50004400 	.word	0x50004400
 800e1dc:	40004800 	.word	0x40004800
 800e1e0:	50004800 	.word	0x50004800
 800e1e4:	40004c00 	.word	0x40004c00
 800e1e8:	50004c00 	.word	0x50004c00
 800e1ec:	40005000 	.word	0x40005000
 800e1f0:	46002400 	.word	0x46002400
 800e1f4:	56002400 	.word	0x56002400
 800e1f8:	08025ed0 	.word	0x08025ed0

0800e1fc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e1fc:	b580      	push	{r7, lr}
 800e1fe:	b084      	sub	sp, #16
 800e200:	af00      	add	r7, sp, #0
 800e202:	6078      	str	r0, [r7, #4]
 800e204:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	681b      	ldr	r3, [r3, #0]
 800e20a:	4a4a      	ldr	r2, [pc, #296]	; (800e334 <HAL_UARTEx_SetTxFifoThreshold+0x138>)
 800e20c:	4293      	cmp	r3, r2
 800e20e:	d03b      	beq.n	800e288 <HAL_UARTEx_SetTxFifoThreshold+0x8c>
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	681b      	ldr	r3, [r3, #0]
 800e214:	4a48      	ldr	r2, [pc, #288]	; (800e338 <HAL_UARTEx_SetTxFifoThreshold+0x13c>)
 800e216:	4293      	cmp	r3, r2
 800e218:	d036      	beq.n	800e288 <HAL_UARTEx_SetTxFifoThreshold+0x8c>
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	681b      	ldr	r3, [r3, #0]
 800e21e:	4a47      	ldr	r2, [pc, #284]	; (800e33c <HAL_UARTEx_SetTxFifoThreshold+0x140>)
 800e220:	4293      	cmp	r3, r2
 800e222:	d031      	beq.n	800e288 <HAL_UARTEx_SetTxFifoThreshold+0x8c>
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	681b      	ldr	r3, [r3, #0]
 800e228:	4a45      	ldr	r2, [pc, #276]	; (800e340 <HAL_UARTEx_SetTxFifoThreshold+0x144>)
 800e22a:	4293      	cmp	r3, r2
 800e22c:	d02c      	beq.n	800e288 <HAL_UARTEx_SetTxFifoThreshold+0x8c>
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	681b      	ldr	r3, [r3, #0]
 800e232:	4a44      	ldr	r2, [pc, #272]	; (800e344 <HAL_UARTEx_SetTxFifoThreshold+0x148>)
 800e234:	4293      	cmp	r3, r2
 800e236:	d027      	beq.n	800e288 <HAL_UARTEx_SetTxFifoThreshold+0x8c>
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	681b      	ldr	r3, [r3, #0]
 800e23c:	4a42      	ldr	r2, [pc, #264]	; (800e348 <HAL_UARTEx_SetTxFifoThreshold+0x14c>)
 800e23e:	4293      	cmp	r3, r2
 800e240:	d022      	beq.n	800e288 <HAL_UARTEx_SetTxFifoThreshold+0x8c>
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	681b      	ldr	r3, [r3, #0]
 800e246:	4a41      	ldr	r2, [pc, #260]	; (800e34c <HAL_UARTEx_SetTxFifoThreshold+0x150>)
 800e248:	4293      	cmp	r3, r2
 800e24a:	d01d      	beq.n	800e288 <HAL_UARTEx_SetTxFifoThreshold+0x8c>
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	681b      	ldr	r3, [r3, #0]
 800e250:	4a3f      	ldr	r2, [pc, #252]	; (800e350 <HAL_UARTEx_SetTxFifoThreshold+0x154>)
 800e252:	4293      	cmp	r3, r2
 800e254:	d018      	beq.n	800e288 <HAL_UARTEx_SetTxFifoThreshold+0x8c>
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	681b      	ldr	r3, [r3, #0]
 800e25a:	4a3e      	ldr	r2, [pc, #248]	; (800e354 <HAL_UARTEx_SetTxFifoThreshold+0x158>)
 800e25c:	4293      	cmp	r3, r2
 800e25e:	d013      	beq.n	800e288 <HAL_UARTEx_SetTxFifoThreshold+0x8c>
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	681b      	ldr	r3, [r3, #0]
 800e264:	f1b3 2f50 	cmp.w	r3, #1342197760	; 0x50005000
 800e268:	d00e      	beq.n	800e288 <HAL_UARTEx_SetTxFifoThreshold+0x8c>
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	681b      	ldr	r3, [r3, #0]
 800e26e:	4a3a      	ldr	r2, [pc, #232]	; (800e358 <HAL_UARTEx_SetTxFifoThreshold+0x15c>)
 800e270:	4293      	cmp	r3, r2
 800e272:	d009      	beq.n	800e288 <HAL_UARTEx_SetTxFifoThreshold+0x8c>
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	681b      	ldr	r3, [r3, #0]
 800e278:	4a38      	ldr	r2, [pc, #224]	; (800e35c <HAL_UARTEx_SetTxFifoThreshold+0x160>)
 800e27a:	4293      	cmp	r3, r2
 800e27c:	d004      	beq.n	800e288 <HAL_UARTEx_SetTxFifoThreshold+0x8c>
 800e27e:	f240 214d 	movw	r1, #589	; 0x24d
 800e282:	4837      	ldr	r0, [pc, #220]	; (800e360 <HAL_UARTEx_SetTxFifoThreshold+0x164>)
 800e284:	f007 f811 	bl	80152aa <assert_failed>
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));
 800e288:	683b      	ldr	r3, [r7, #0]
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	d018      	beq.n	800e2c0 <HAL_UARTEx_SetTxFifoThreshold+0xc4>
 800e28e:	683b      	ldr	r3, [r7, #0]
 800e290:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e294:	d014      	beq.n	800e2c0 <HAL_UARTEx_SetTxFifoThreshold+0xc4>
 800e296:	683b      	ldr	r3, [r7, #0]
 800e298:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e29c:	d010      	beq.n	800e2c0 <HAL_UARTEx_SetTxFifoThreshold+0xc4>
 800e29e:	683b      	ldr	r3, [r7, #0]
 800e2a0:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800e2a4:	d00c      	beq.n	800e2c0 <HAL_UARTEx_SetTxFifoThreshold+0xc4>
 800e2a6:	683b      	ldr	r3, [r7, #0]
 800e2a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e2ac:	d008      	beq.n	800e2c0 <HAL_UARTEx_SetTxFifoThreshold+0xc4>
 800e2ae:	683b      	ldr	r3, [r7, #0]
 800e2b0:	f1b3 4f20 	cmp.w	r3, #2684354560	; 0xa0000000
 800e2b4:	d004      	beq.n	800e2c0 <HAL_UARTEx_SetTxFifoThreshold+0xc4>
 800e2b6:	f240 214e 	movw	r1, #590	; 0x24e
 800e2ba:	4829      	ldr	r0, [pc, #164]	; (800e360 <HAL_UARTEx_SetTxFifoThreshold+0x164>)
 800e2bc:	f006 fff5 	bl	80152aa <assert_failed>

  /* Process Locked */
  __HAL_LOCK(huart);
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e2c6:	2b01      	cmp	r3, #1
 800e2c8:	d101      	bne.n	800e2ce <HAL_UARTEx_SetTxFifoThreshold+0xd2>
 800e2ca:	2302      	movs	r3, #2
 800e2cc:	e02d      	b.n	800e32a <HAL_UARTEx_SetTxFifoThreshold+0x12e>
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	2201      	movs	r2, #1
 800e2d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	2224      	movs	r2, #36	; 0x24
 800e2da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	681b      	ldr	r3, [r3, #0]
 800e2e2:	681b      	ldr	r3, [r3, #0]
 800e2e4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	681b      	ldr	r3, [r3, #0]
 800e2ea:	681a      	ldr	r2, [r3, #0]
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	681b      	ldr	r3, [r3, #0]
 800e2f0:	f022 0201 	bic.w	r2, r2, #1
 800e2f4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	681b      	ldr	r3, [r3, #0]
 800e2fa:	689b      	ldr	r3, [r3, #8]
 800e2fc:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	681b      	ldr	r3, [r3, #0]
 800e304:	683a      	ldr	r2, [r7, #0]
 800e306:	430a      	orrs	r2, r1
 800e308:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e30a:	6878      	ldr	r0, [r7, #4]
 800e30c:	f000 f8de 	bl	800e4cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	681b      	ldr	r3, [r3, #0]
 800e314:	68fa      	ldr	r2, [r7, #12]
 800e316:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	2220      	movs	r2, #32
 800e31c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	2200      	movs	r2, #0
 800e324:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e328:	2300      	movs	r3, #0
}
 800e32a:	4618      	mov	r0, r3
 800e32c:	3710      	adds	r7, #16
 800e32e:	46bd      	mov	sp, r7
 800e330:	bd80      	pop	{r7, pc}
 800e332:	bf00      	nop
 800e334:	40013800 	.word	0x40013800
 800e338:	50013800 	.word	0x50013800
 800e33c:	40004400 	.word	0x40004400
 800e340:	50004400 	.word	0x50004400
 800e344:	40004800 	.word	0x40004800
 800e348:	50004800 	.word	0x50004800
 800e34c:	40004c00 	.word	0x40004c00
 800e350:	50004c00 	.word	0x50004c00
 800e354:	40005000 	.word	0x40005000
 800e358:	46002400 	.word	0x46002400
 800e35c:	56002400 	.word	0x56002400
 800e360:	08025ed0 	.word	0x08025ed0

0800e364 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e364:	b580      	push	{r7, lr}
 800e366:	b084      	sub	sp, #16
 800e368:	af00      	add	r7, sp, #0
 800e36a:	6078      	str	r0, [r7, #4]
 800e36c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;

  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	681b      	ldr	r3, [r3, #0]
 800e372:	4a4a      	ldr	r2, [pc, #296]	; (800e49c <HAL_UARTEx_SetRxFifoThreshold+0x138>)
 800e374:	4293      	cmp	r3, r2
 800e376:	d03b      	beq.n	800e3f0 <HAL_UARTEx_SetRxFifoThreshold+0x8c>
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	681b      	ldr	r3, [r3, #0]
 800e37c:	4a48      	ldr	r2, [pc, #288]	; (800e4a0 <HAL_UARTEx_SetRxFifoThreshold+0x13c>)
 800e37e:	4293      	cmp	r3, r2
 800e380:	d036      	beq.n	800e3f0 <HAL_UARTEx_SetRxFifoThreshold+0x8c>
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	681b      	ldr	r3, [r3, #0]
 800e386:	4a47      	ldr	r2, [pc, #284]	; (800e4a4 <HAL_UARTEx_SetRxFifoThreshold+0x140>)
 800e388:	4293      	cmp	r3, r2
 800e38a:	d031      	beq.n	800e3f0 <HAL_UARTEx_SetRxFifoThreshold+0x8c>
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	681b      	ldr	r3, [r3, #0]
 800e390:	4a45      	ldr	r2, [pc, #276]	; (800e4a8 <HAL_UARTEx_SetRxFifoThreshold+0x144>)
 800e392:	4293      	cmp	r3, r2
 800e394:	d02c      	beq.n	800e3f0 <HAL_UARTEx_SetRxFifoThreshold+0x8c>
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	681b      	ldr	r3, [r3, #0]
 800e39a:	4a44      	ldr	r2, [pc, #272]	; (800e4ac <HAL_UARTEx_SetRxFifoThreshold+0x148>)
 800e39c:	4293      	cmp	r3, r2
 800e39e:	d027      	beq.n	800e3f0 <HAL_UARTEx_SetRxFifoThreshold+0x8c>
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	681b      	ldr	r3, [r3, #0]
 800e3a4:	4a42      	ldr	r2, [pc, #264]	; (800e4b0 <HAL_UARTEx_SetRxFifoThreshold+0x14c>)
 800e3a6:	4293      	cmp	r3, r2
 800e3a8:	d022      	beq.n	800e3f0 <HAL_UARTEx_SetRxFifoThreshold+0x8c>
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	681b      	ldr	r3, [r3, #0]
 800e3ae:	4a41      	ldr	r2, [pc, #260]	; (800e4b4 <HAL_UARTEx_SetRxFifoThreshold+0x150>)
 800e3b0:	4293      	cmp	r3, r2
 800e3b2:	d01d      	beq.n	800e3f0 <HAL_UARTEx_SetRxFifoThreshold+0x8c>
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	681b      	ldr	r3, [r3, #0]
 800e3b8:	4a3f      	ldr	r2, [pc, #252]	; (800e4b8 <HAL_UARTEx_SetRxFifoThreshold+0x154>)
 800e3ba:	4293      	cmp	r3, r2
 800e3bc:	d018      	beq.n	800e3f0 <HAL_UARTEx_SetRxFifoThreshold+0x8c>
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	681b      	ldr	r3, [r3, #0]
 800e3c2:	4a3e      	ldr	r2, [pc, #248]	; (800e4bc <HAL_UARTEx_SetRxFifoThreshold+0x158>)
 800e3c4:	4293      	cmp	r3, r2
 800e3c6:	d013      	beq.n	800e3f0 <HAL_UARTEx_SetRxFifoThreshold+0x8c>
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	f1b3 2f50 	cmp.w	r3, #1342197760	; 0x50005000
 800e3d0:	d00e      	beq.n	800e3f0 <HAL_UARTEx_SetRxFifoThreshold+0x8c>
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	681b      	ldr	r3, [r3, #0]
 800e3d6:	4a3a      	ldr	r2, [pc, #232]	; (800e4c0 <HAL_UARTEx_SetRxFifoThreshold+0x15c>)
 800e3d8:	4293      	cmp	r3, r2
 800e3da:	d009      	beq.n	800e3f0 <HAL_UARTEx_SetRxFifoThreshold+0x8c>
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	681b      	ldr	r3, [r3, #0]
 800e3e0:	4a38      	ldr	r2, [pc, #224]	; (800e4c4 <HAL_UARTEx_SetRxFifoThreshold+0x160>)
 800e3e2:	4293      	cmp	r3, r2
 800e3e4:	d004      	beq.n	800e3f0 <HAL_UARTEx_SetRxFifoThreshold+0x8c>
 800e3e6:	f240 217e 	movw	r1, #638	; 0x27e
 800e3ea:	4837      	ldr	r0, [pc, #220]	; (800e4c8 <HAL_UARTEx_SetRxFifoThreshold+0x164>)
 800e3ec:	f006 ff5d 	bl	80152aa <assert_failed>
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));
 800e3f0:	683b      	ldr	r3, [r7, #0]
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	d018      	beq.n	800e428 <HAL_UARTEx_SetRxFifoThreshold+0xc4>
 800e3f6:	683b      	ldr	r3, [r7, #0]
 800e3f8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e3fc:	d014      	beq.n	800e428 <HAL_UARTEx_SetRxFifoThreshold+0xc4>
 800e3fe:	683b      	ldr	r3, [r7, #0]
 800e400:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800e404:	d010      	beq.n	800e428 <HAL_UARTEx_SetRxFifoThreshold+0xc4>
 800e406:	683b      	ldr	r3, [r7, #0]
 800e408:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 800e40c:	d00c      	beq.n	800e428 <HAL_UARTEx_SetRxFifoThreshold+0xc4>
 800e40e:	683b      	ldr	r3, [r7, #0]
 800e410:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e414:	d008      	beq.n	800e428 <HAL_UARTEx_SetRxFifoThreshold+0xc4>
 800e416:	683b      	ldr	r3, [r7, #0]
 800e418:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 800e41c:	d004      	beq.n	800e428 <HAL_UARTEx_SetRxFifoThreshold+0xc4>
 800e41e:	f240 217f 	movw	r1, #639	; 0x27f
 800e422:	4829      	ldr	r0, [pc, #164]	; (800e4c8 <HAL_UARTEx_SetRxFifoThreshold+0x164>)
 800e424:	f006 ff41 	bl	80152aa <assert_failed>

  /* Process Locked */
  __HAL_LOCK(huart);
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e42e:	2b01      	cmp	r3, #1
 800e430:	d101      	bne.n	800e436 <HAL_UARTEx_SetRxFifoThreshold+0xd2>
 800e432:	2302      	movs	r3, #2
 800e434:	e02d      	b.n	800e492 <HAL_UARTEx_SetRxFifoThreshold+0x12e>
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	2201      	movs	r2, #1
 800e43a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	2224      	movs	r2, #36	; 0x24
 800e442:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	681b      	ldr	r3, [r3, #0]
 800e44a:	681b      	ldr	r3, [r3, #0]
 800e44c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	681b      	ldr	r3, [r3, #0]
 800e452:	681a      	ldr	r2, [r3, #0]
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	681b      	ldr	r3, [r3, #0]
 800e458:	f022 0201 	bic.w	r2, r2, #1
 800e45c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	681b      	ldr	r3, [r3, #0]
 800e462:	689b      	ldr	r3, [r3, #8]
 800e464:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	681b      	ldr	r3, [r3, #0]
 800e46c:	683a      	ldr	r2, [r7, #0]
 800e46e:	430a      	orrs	r2, r1
 800e470:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e472:	6878      	ldr	r0, [r7, #4]
 800e474:	f000 f82a 	bl	800e4cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	681b      	ldr	r3, [r3, #0]
 800e47c:	68fa      	ldr	r2, [r7, #12]
 800e47e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	2220      	movs	r2, #32
 800e484:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	2200      	movs	r2, #0
 800e48c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e490:	2300      	movs	r3, #0
}
 800e492:	4618      	mov	r0, r3
 800e494:	3710      	adds	r7, #16
 800e496:	46bd      	mov	sp, r7
 800e498:	bd80      	pop	{r7, pc}
 800e49a:	bf00      	nop
 800e49c:	40013800 	.word	0x40013800
 800e4a0:	50013800 	.word	0x50013800
 800e4a4:	40004400 	.word	0x40004400
 800e4a8:	50004400 	.word	0x50004400
 800e4ac:	40004800 	.word	0x40004800
 800e4b0:	50004800 	.word	0x50004800
 800e4b4:	40004c00 	.word	0x40004c00
 800e4b8:	50004c00 	.word	0x50004c00
 800e4bc:	40005000 	.word	0x40005000
 800e4c0:	46002400 	.word	0x46002400
 800e4c4:	56002400 	.word	0x56002400
 800e4c8:	08025ed0 	.word	0x08025ed0

0800e4cc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800e4cc:	b480      	push	{r7}
 800e4ce:	b085      	sub	sp, #20
 800e4d0:	af00      	add	r7, sp, #0
 800e4d2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	d108      	bne.n	800e4ee <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	2201      	movs	r2, #1
 800e4e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	2201      	movs	r2, #1
 800e4e8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800e4ec:	e031      	b.n	800e552 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800e4ee:	2308      	movs	r3, #8
 800e4f0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800e4f2:	2308      	movs	r3, #8
 800e4f4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	681b      	ldr	r3, [r3, #0]
 800e4fa:	689b      	ldr	r3, [r3, #8]
 800e4fc:	0e5b      	lsrs	r3, r3, #25
 800e4fe:	b2db      	uxtb	r3, r3
 800e500:	f003 0307 	and.w	r3, r3, #7
 800e504:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	681b      	ldr	r3, [r3, #0]
 800e50a:	689b      	ldr	r3, [r3, #8]
 800e50c:	0f5b      	lsrs	r3, r3, #29
 800e50e:	b2db      	uxtb	r3, r3
 800e510:	f003 0307 	and.w	r3, r3, #7
 800e514:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e516:	7bbb      	ldrb	r3, [r7, #14]
 800e518:	7b3a      	ldrb	r2, [r7, #12]
 800e51a:	4911      	ldr	r1, [pc, #68]	; (800e560 <UARTEx_SetNbDataToProcess+0x94>)
 800e51c:	5c8a      	ldrb	r2, [r1, r2]
 800e51e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800e522:	7b3a      	ldrb	r2, [r7, #12]
 800e524:	490f      	ldr	r1, [pc, #60]	; (800e564 <UARTEx_SetNbDataToProcess+0x98>)
 800e526:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e528:	fb93 f3f2 	sdiv	r3, r3, r2
 800e52c:	b29a      	uxth	r2, r3
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e534:	7bfb      	ldrb	r3, [r7, #15]
 800e536:	7b7a      	ldrb	r2, [r7, #13]
 800e538:	4909      	ldr	r1, [pc, #36]	; (800e560 <UARTEx_SetNbDataToProcess+0x94>)
 800e53a:	5c8a      	ldrb	r2, [r1, r2]
 800e53c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800e540:	7b7a      	ldrb	r2, [r7, #13]
 800e542:	4908      	ldr	r1, [pc, #32]	; (800e564 <UARTEx_SetNbDataToProcess+0x98>)
 800e544:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e546:	fb93 f3f2 	sdiv	r3, r3, r2
 800e54a:	b29a      	uxth	r2, r3
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800e552:	bf00      	nop
 800e554:	3714      	adds	r7, #20
 800e556:	46bd      	mov	sp, r7
 800e558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e55c:	4770      	bx	lr
 800e55e:	bf00      	nop
 800e560:	08027ce0 	.word	0x08027ce0
 800e564:	08027ce8 	.word	0x08027ce8

0800e568 <AEventSrv_vtblInit>:


/* IEventSrc virtual functions definition */
/******************************************/

sys_error_code_t AEventSrv_vtblInit(IEventSrc *_this) {
 800e568:	b580      	push	{r7, lr}
 800e56a:	b084      	sub	sp, #16
 800e56c:	af00      	add	r7, sp, #0
 800e56e:	6078      	str	r0, [r7, #4]
  assert_param(_this != NULL);
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	2b00      	cmp	r3, #0
 800e574:	d103      	bne.n	800e57e <AEventSrv_vtblInit+0x16>
 800e576:	2135      	movs	r1, #53	; 0x35
 800e578:	4809      	ldr	r0, [pc, #36]	; (800e5a0 <AEventSrv_vtblInit+0x38>)
 800e57a:	f006 fe96 	bl	80152aa <assert_failed>
  AEventSrc *pObj = (AEventSrc*)_this;
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	60fb      	str	r3, [r7, #12]
  sys_error_code_t xRes = SYS_NO_ERROR_CODE;
 800e582:	2300      	movs	r3, #0
 800e584:	817b      	strh	r3, [r7, #10]

  memset(pObj->m_pxListeners, 0, sizeof(pObj->m_pxListeners));
 800e586:	68fb      	ldr	r3, [r7, #12]
 800e588:	3304      	adds	r3, #4
 800e58a:	2208      	movs	r2, #8
 800e58c:	2100      	movs	r1, #0
 800e58e:	4618      	mov	r0, r3
 800e590:	f015 fb4b 	bl	8023c2a <memset>

  return xRes;
 800e594:	897b      	ldrh	r3, [r7, #10]
}
 800e596:	4618      	mov	r0, r3
 800e598:	3710      	adds	r7, #16
 800e59a:	46bd      	mov	sp, r7
 800e59c:	bd80      	pop	{r7, pc}
 800e59e:	bf00      	nop
 800e5a0:	08025f3c 	.word	0x08025f3c

0800e5a4 <AEventSrv_vtblAddEventListener>:

sys_error_code_t AEventSrv_vtblAddEventListener(IEventSrc *_this, IEventListener *pListener) {
 800e5a4:	b580      	push	{r7, lr}
 800e5a6:	b084      	sub	sp, #16
 800e5a8:	af00      	add	r7, sp, #0
 800e5aa:	6078      	str	r0, [r7, #4]
 800e5ac:	6039      	str	r1, [r7, #0]
  assert_param(_this != NULL);
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	2b00      	cmp	r3, #0
 800e5b2:	d103      	bne.n	800e5bc <AEventSrv_vtblAddEventListener+0x18>
 800e5b4:	213f      	movs	r1, #63	; 0x3f
 800e5b6:	4813      	ldr	r0, [pc, #76]	; (800e604 <AEventSrv_vtblAddEventListener+0x60>)
 800e5b8:	f006 fe77 	bl	80152aa <assert_failed>
  AEventSrc *pObj = (AEventSrc*)_this;
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	60bb      	str	r3, [r7, #8]
  sys_error_code_t xRes = SYS_IEVTSRC_FULL_ERROR_CODE;
 800e5c0:	f44f 73c9 	mov.w	r3, #402	; 0x192
 800e5c4:	81fb      	strh	r3, [r7, #14]

  for (uint8_t i=0; i<AEVENT_SRC_CFG_MAX_LISTENERS; ++i) {
 800e5c6:	2300      	movs	r3, #0
 800e5c8:	737b      	strb	r3, [r7, #13]
 800e5ca:	e012      	b.n	800e5f2 <AEventSrv_vtblAddEventListener+0x4e>
    if (pObj->m_pxListeners[i] == NULL) {
 800e5cc:	7b7b      	ldrb	r3, [r7, #13]
 800e5ce:	68ba      	ldr	r2, [r7, #8]
 800e5d0:	009b      	lsls	r3, r3, #2
 800e5d2:	4413      	add	r3, r2
 800e5d4:	685b      	ldr	r3, [r3, #4]
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	d108      	bne.n	800e5ec <AEventSrv_vtblAddEventListener+0x48>
      pObj->m_pxListeners[i] = pListener;
 800e5da:	7b7b      	ldrb	r3, [r7, #13]
 800e5dc:	68ba      	ldr	r2, [r7, #8]
 800e5de:	009b      	lsls	r3, r3, #2
 800e5e0:	4413      	add	r3, r2
 800e5e2:	683a      	ldr	r2, [r7, #0]
 800e5e4:	605a      	str	r2, [r3, #4]
      xRes = SYS_NO_ERROR_CODE;
 800e5e6:	2300      	movs	r3, #0
 800e5e8:	81fb      	strh	r3, [r7, #14]
      break;
 800e5ea:	e005      	b.n	800e5f8 <AEventSrv_vtblAddEventListener+0x54>
  for (uint8_t i=0; i<AEVENT_SRC_CFG_MAX_LISTENERS; ++i) {
 800e5ec:	7b7b      	ldrb	r3, [r7, #13]
 800e5ee:	3301      	adds	r3, #1
 800e5f0:	737b      	strb	r3, [r7, #13]
 800e5f2:	7b7b      	ldrb	r3, [r7, #13]
 800e5f4:	2b01      	cmp	r3, #1
 800e5f6:	d9e9      	bls.n	800e5cc <AEventSrv_vtblAddEventListener+0x28>
    }
  }

  return xRes;
 800e5f8:	89fb      	ldrh	r3, [r7, #14]
}
 800e5fa:	4618      	mov	r0, r3
 800e5fc:	3710      	adds	r7, #16
 800e5fe:	46bd      	mov	sp, r7
 800e600:	bd80      	pop	{r7, pc}
 800e602:	bf00      	nop
 800e604:	08025f3c 	.word	0x08025f3c

0800e608 <AEventSrv_vtblRemoveEventListener>:

sys_error_code_t AEventSrv_vtblRemoveEventListener(IEventSrc *_this, IEventListener *pListener) {
 800e608:	b580      	push	{r7, lr}
 800e60a:	b086      	sub	sp, #24
 800e60c:	af00      	add	r7, sp, #0
 800e60e:	6078      	str	r0, [r7, #4]
 800e610:	6039      	str	r1, [r7, #0]
  assert_param(_this != NULL);
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	2b00      	cmp	r3, #0
 800e616:	d103      	bne.n	800e620 <AEventSrv_vtblRemoveEventListener+0x18>
 800e618:	214f      	movs	r1, #79	; 0x4f
 800e61a:	4812      	ldr	r0, [pc, #72]	; (800e664 <AEventSrv_vtblRemoveEventListener+0x5c>)
 800e61c:	f006 fe45 	bl	80152aa <assert_failed>
  AEventSrc *pObj = (AEventSrc*)_this;
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	613b      	str	r3, [r7, #16]
  sys_error_code_t xRes = SYS_NO_ERROR_CODE;
 800e624:	2300      	movs	r3, #0
 800e626:	81fb      	strh	r3, [r7, #14]

  for (uint8_t i=0; i<AEVENT_SRC_CFG_MAX_LISTENERS; ++i) {
 800e628:	2300      	movs	r3, #0
 800e62a:	75fb      	strb	r3, [r7, #23]
 800e62c:	e011      	b.n	800e652 <AEventSrv_vtblRemoveEventListener+0x4a>
    if (pObj->m_pxListeners[i] == pListener) {
 800e62e:	7dfb      	ldrb	r3, [r7, #23]
 800e630:	693a      	ldr	r2, [r7, #16]
 800e632:	009b      	lsls	r3, r3, #2
 800e634:	4413      	add	r3, r2
 800e636:	685b      	ldr	r3, [r3, #4]
 800e638:	683a      	ldr	r2, [r7, #0]
 800e63a:	429a      	cmp	r2, r3
 800e63c:	d106      	bne.n	800e64c <AEventSrv_vtblRemoveEventListener+0x44>
      pObj->m_pxListeners[i] = NULL;
 800e63e:	7dfb      	ldrb	r3, [r7, #23]
 800e640:	693a      	ldr	r2, [r7, #16]
 800e642:	009b      	lsls	r3, r3, #2
 800e644:	4413      	add	r3, r2
 800e646:	2200      	movs	r2, #0
 800e648:	605a      	str	r2, [r3, #4]
      break;
 800e64a:	e005      	b.n	800e658 <AEventSrv_vtblRemoveEventListener+0x50>
  for (uint8_t i=0; i<AEVENT_SRC_CFG_MAX_LISTENERS; ++i) {
 800e64c:	7dfb      	ldrb	r3, [r7, #23]
 800e64e:	3301      	adds	r3, #1
 800e650:	75fb      	strb	r3, [r7, #23]
 800e652:	7dfb      	ldrb	r3, [r7, #23]
 800e654:	2b01      	cmp	r3, #1
 800e656:	d9ea      	bls.n	800e62e <AEventSrv_vtblRemoveEventListener+0x26>
    }
  }

  return xRes;
 800e658:	89fb      	ldrh	r3, [r7, #14]
}
 800e65a:	4618      	mov	r0, r3
 800e65c:	3718      	adds	r7, #24
 800e65e:	46bd      	mov	sp, r7
 800e660:	bd80      	pop	{r7, pc}
 800e662:	bf00      	nop
 800e664:	08025f3c 	.word	0x08025f3c

0800e668 <AEventSrv_vtblGetMaxListenerCount>:

uint32_t AEventSrv_vtblGetMaxListenerCount(const IEventSrc *_this) {
 800e668:	b480      	push	{r7}
 800e66a:	b083      	sub	sp, #12
 800e66c:	af00      	add	r7, sp, #0
 800e66e:	6078      	str	r0, [r7, #4]
  UNUSED(_this);

  return AEVENT_SRC_CFG_MAX_LISTENERS;
 800e670:	2302      	movs	r3, #2
}
 800e672:	4618      	mov	r0, r3
 800e674:	370c      	adds	r7, #12
 800e676:	46bd      	mov	sp, r7
 800e678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e67c:	4770      	bx	lr

0800e67e <AMTOnEnterTaskControlLoop>:
sys_error_code_t AMTHandleError(AManagedTask *_this, SysEvent xError) {
  return _this->vptr->HandleError(_this, xError);
}

SYS_DEFINE_STATIC_INLINE
sys_error_code_t AMTOnEnterTaskControlLoop(AManagedTask *_this) {
 800e67e:	b580      	push	{r7, lr}
 800e680:	b082      	sub	sp, #8
 800e682:	af00      	add	r7, sp, #0
 800e684:	6078      	str	r0, [r7, #4]
  return _this->vptr->OnEnterTaskControlLoop(_this);
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	691b      	ldr	r3, [r3, #16]
 800e68c:	6878      	ldr	r0, [r7, #4]
 800e68e:	4798      	blx	r3
 800e690:	4603      	mov	r3, r0
}
 800e692:	4618      	mov	r0, r3
 800e694:	3708      	adds	r7, #8
 800e696:	46bd      	mov	sp, r7
 800e698:	bd80      	pop	{r7, pc}
	...

0800e69c <AMTGetTaskPowerMode>:
EPowerMode AMTGetSystemPowerMode() {
  return SysGetPowerMode();
}

SYS_DEFINE_STATIC_INLINE
EPowerMode AMTGetTaskPowerMode(AManagedTask *_this) {
 800e69c:	b590      	push	{r4, r7, lr}
 800e69e:	b085      	sub	sp, #20
 800e6a0:	af00      	add	r7, sp, #0
 800e6a2:	6078      	str	r0, [r7, #4]
  assert_param(_this != NULL);
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	d103      	bne.n	800e6b2 <AMTGetTaskPowerMode+0x16>
 800e6aa:	21ca      	movs	r1, #202	; 0xca
 800e6ac:	480c      	ldr	r0, [pc, #48]	; (800e6e0 <AMTGetTaskPowerMode+0x44>)
 800e6ae:	f006 fdfc 	bl	80152aa <assert_failed>

  EPowerMode eTaskPowrMode = (_this->m_pPMState2PMStateMap != NULL) ?
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
      _this->m_pPMState2PMStateMap[(uint8_t)SysGetPowerMode()] :
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	d008      	beq.n	800e6ce <AMTGetTaskPowerMode+0x32>
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	f8d3 40bc 	ldr.w	r4, [r3, #188]	; 0xbc
 800e6c2:	f000 fda3 	bl	800f20c <SysGetPowerMode>
 800e6c6:	4603      	mov	r3, r0
 800e6c8:	4423      	add	r3, r4
 800e6ca:	781b      	ldrb	r3, [r3, #0]
 800e6cc:	e002      	b.n	800e6d4 <AMTGetTaskPowerMode+0x38>
      SysGetPowerMode();
 800e6ce:	f000 fd9d 	bl	800f20c <SysGetPowerMode>
 800e6d2:	4603      	mov	r3, r0
  EPowerMode eTaskPowrMode = (_this->m_pPMState2PMStateMap != NULL) ?
 800e6d4:	73fb      	strb	r3, [r7, #15]

  return eTaskPowrMode;
 800e6d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800e6d8:	4618      	mov	r0, r3
 800e6da:	3714      	adds	r7, #20
 800e6dc:	46bd      	mov	sp, r7
 800e6de:	bd90      	pop	{r4, r7, pc}
 800e6e0:	08025f9c 	.word	0x08025f9c

0800e6e4 <AMTNotifyIsStillRunning>:

SYS_DEFINE_STATIC_INLINE
sys_error_code_t AMTNotifyIsStillRunning(AManagedTask *_this, sys_error_code_t nStepError) {
 800e6e4:	b480      	push	{r7}
 800e6e6:	b083      	sub	sp, #12
 800e6e8:	af00      	add	r7, sp, #0
 800e6ea:	6078      	str	r0, [r7, #4]
 800e6ec:	460b      	mov	r3, r1
 800e6ee:	807b      	strh	r3, [r7, #2]

  if (SYS_IS_ERROR_CODE(nStepError) && (_this->m_xStatus.nErrorCount < MT_MAX_ERROR_COUNT)) {
 800e6f0:	887b      	ldrh	r3, [r7, #2]
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	d018      	beq.n	800e728 <AMTNotifyIsStillRunning+0x44>
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 800e6fc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800e700:	b2db      	uxtb	r3, r3
 800e702:	2b30      	cmp	r3, #48	; 0x30
 800e704:	d010      	beq.n	800e728 <AMTNotifyIsStillRunning+0x44>
    _this->m_xStatus.nErrorCount++;
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 800e70c:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800e710:	b2db      	uxtb	r3, r3
 800e712:	3301      	adds	r3, #1
 800e714:	f003 0303 	and.w	r3, r3, #3
 800e718:	b2d9      	uxtb	r1, r3
 800e71a:	687a      	ldr	r2, [r7, #4]
 800e71c:	f892 30c0 	ldrb.w	r3, [r2, #192]	; 0xc0
 800e720:	f361 1305 	bfi	r3, r1, #4, #2
 800e724:	f882 30c0 	strb.w	r3, [r2, #192]	; 0xc0
  }
  if (_this->m_xStatus.nErrorCount < MT_ALLOWED_ERROR_COUNT) {
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 800e72e:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800e732:	b2db      	uxtb	r3, r3
 800e734:	2b01      	cmp	r3, #1
 800e736:	d806      	bhi.n	800e746 <AMTNotifyIsStillRunning+0x62>
    _this->m_xStatus.nIsTaskStillRunning = 1;
 800e738:	687a      	ldr	r2, [r7, #4]
 800e73a:	f892 30c0 	ldrb.w	r3, [r2, #192]	; 0xc0
 800e73e:	f043 0308 	orr.w	r3, r3, #8
 800e742:	f882 30c0 	strb.w	r3, [r2, #192]	; 0xc0
  }

  return SYS_NO_ERROR_CODE;
 800e746:	2300      	movs	r3, #0
}
 800e748:	4618      	mov	r0, r3
 800e74a:	370c      	adds	r7, #12
 800e74c:	46bd      	mov	sp, r7
 800e74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e752:	4770      	bx	lr

0800e754 <AMTRun>:


/* Public API definition */
/*************************/

VOID AMTRun(ULONG pParams) {
 800e754:	b580      	push	{r7, lr}
 800e756:	b088      	sub	sp, #32
 800e758:	af00      	add	r7, sp, #0
 800e75a:	6078      	str	r0, [r7, #4]
  sys_error_code_t xRes = SYS_NO_ERROR_CODE;
 800e75c:	2300      	movs	r3, #0
 800e75e:	83fb      	strh	r3, [r7, #30]
  AManagedTask *_this = (AManagedTask*)pParams;
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	61bb      	str	r3, [r7, #24]
  pExecuteStepFunc_t pExecuteStepFunc = NULL;
 800e764:	2300      	movs	r3, #0
 800e766:	617b      	str	r3, [r7, #20]
  UINT nPosture = TX_INT_ENABLE;
 800e768:	2300      	movs	r3, #0
 800e76a:	613b      	str	r3, [r7, #16]

  /* At this point all system has been initialized.
     Execute task specific delayed one time initialization. */
  xRes = AMTOnEnterTaskControlLoop(_this);
 800e76c:	69b8      	ldr	r0, [r7, #24]
 800e76e:	f7ff ff86 	bl	800e67e <AMTOnEnterTaskControlLoop>
 800e772:	4603      	mov	r3, r0
 800e774:	83fb      	strh	r3, [r7, #30]
  if (SYS_IS_ERROR_CODE(xRes)) {
 800e776:	8bfb      	ldrh	r3, [r7, #30]
 800e778:	2b00      	cmp	r3, #0
 800e77a:	d001      	beq.n	800e780 <AMTRun+0x2c>
    /* stop the system execution */
    sys_error_handler();
 800e77c:	f000 faec 	bl	800ed58 <sys_error_handler>
  }

  for (;;) {
    if(_this->m_pfPMState2FuncMap == NULL) {
 800e780:	69bb      	ldr	r3, [r7, #24]
 800e782:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800e786:	2b00      	cmp	r3, #0
 800e788:	d101      	bne.n	800e78e <AMTRun+0x3a>
      sys_error_handler();
 800e78a:	f000 fae5 	bl	800ed58 <sys_error_handler>
    }

    /* check if there is a pending power mode switch request */
    if (_this->m_xStatus.nPowerModeSwitchPending == 1U) {
 800e78e:	69bb      	ldr	r3, [r7, #24]
 800e790:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 800e794:	f003 0302 	and.w	r3, r3, #2
 800e798:	b2db      	uxtb	r3, r3
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	d013      	beq.n	800e7c6 <AMTRun+0x72>
      // clear the power mode switch delay because the task is ready to switch.
      nPosture = tx_interrupt_control(TX_INT_DISABLE);
 800e79e:	2001      	movs	r0, #1
 800e7a0:	f7f1 fd6a 	bl	8000278 <_tx_thread_interrupt_control>
 800e7a4:	6138      	str	r0, [r7, #16]
        _this->m_xStatus.nDelayPowerModeSwitch = 0;
 800e7a6:	69ba      	ldr	r2, [r7, #24]
 800e7a8:	f892 30c0 	ldrb.w	r3, [r2, #192]	; 0xc0
 800e7ac:	f36f 0300 	bfc	r3, #0, #1
 800e7b0:	f882 30c0 	strb.w	r3, [r2, #192]	; 0xc0
      tx_interrupt_control(nPosture);;
 800e7b4:	6938      	ldr	r0, [r7, #16]
 800e7b6:	f7f1 fd5f 	bl	8000278 <_tx_thread_interrupt_control>
      tx_thread_suspend(&_this->m_xTaskHandle);
 800e7ba:	69bb      	ldr	r3, [r7, #24]
 800e7bc:	3304      	adds	r3, #4
 800e7be:	4618      	mov	r0, r3
 800e7c0:	f004 fe30 	bl	8013424 <_txe_thread_suspend>
 800e7c4:	e7dc      	b.n	800e780 <AMTRun+0x2c>
    }
    else {
      /* find the execute step function  */
      uint8_t nPMState = (uint8_t)AMTGetTaskPowerMode(_this);
 800e7c6:	69b8      	ldr	r0, [r7, #24]
 800e7c8:	f7ff ff68 	bl	800e69c <AMTGetTaskPowerMode>
 800e7cc:	4603      	mov	r3, r0
 800e7ce:	73fb      	strb	r3, [r7, #15]
      pExecuteStepFunc = _this->m_pfPMState2FuncMap[nPMState];
 800e7d0:	69bb      	ldr	r3, [r7, #24]
 800e7d2:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 800e7d6:	7bfb      	ldrb	r3, [r7, #15]
 800e7d8:	009b      	lsls	r3, r3, #2
 800e7da:	4413      	add	r3, r2
 800e7dc:	681b      	ldr	r3, [r3, #0]
 800e7de:	617b      	str	r3, [r7, #20]

      if (pExecuteStepFunc != NULL) {
 800e7e0:	697b      	ldr	r3, [r7, #20]
 800e7e2:	2b00      	cmp	r3, #0
 800e7e4:	d021      	beq.n	800e82a <AMTRun+0xd6>
        nPosture = tx_interrupt_control(TX_INT_DISABLE);
 800e7e6:	2001      	movs	r0, #1
 800e7e8:	f7f1 fd46 	bl	8000278 <_tx_thread_interrupt_control>
 800e7ec:	6138      	str	r0, [r7, #16]
          _this->m_xStatus.nDelayPowerModeSwitch = 1;
 800e7ee:	69ba      	ldr	r2, [r7, #24]
 800e7f0:	f892 30c0 	ldrb.w	r3, [r2, #192]	; 0xc0
 800e7f4:	f043 0301 	orr.w	r3, r3, #1
 800e7f8:	f882 30c0 	strb.w	r3, [r2, #192]	; 0xc0
        tx_interrupt_control(nPosture);
 800e7fc:	6938      	ldr	r0, [r7, #16]
 800e7fe:	f7f1 fd3b 	bl	8000278 <_tx_thread_interrupt_control>
        xRes = pExecuteStepFunc(_this);
 800e802:	697b      	ldr	r3, [r7, #20]
 800e804:	69b8      	ldr	r0, [r7, #24]
 800e806:	4798      	blx	r3
 800e808:	4603      	mov	r3, r0
 800e80a:	83fb      	strh	r3, [r7, #30]
        nPosture = tx_interrupt_control(TX_INT_DISABLE);
 800e80c:	2001      	movs	r0, #1
 800e80e:	f7f1 fd33 	bl	8000278 <_tx_thread_interrupt_control>
 800e812:	6138      	str	r0, [r7, #16]
          _this->m_xStatus.nDelayPowerModeSwitch = 0;
 800e814:	69ba      	ldr	r2, [r7, #24]
 800e816:	f892 30c0 	ldrb.w	r3, [r2, #192]	; 0xc0
 800e81a:	f36f 0300 	bfc	r3, #0, #1
 800e81e:	f882 30c0 	strb.w	r3, [r2, #192]	; 0xc0
        tx_interrupt_control(nPosture);
 800e822:	6938      	ldr	r0, [r7, #16]
 800e824:	f7f1 fd28 	bl	8000278 <_tx_thread_interrupt_control>
 800e828:	e002      	b.n	800e830 <AMTRun+0xdc>
      }
      else {
        /* there is no function so, because this is a AManagedTask simply suspend it for a while */
        tx_thread_sleep(AMT_MS_TO_TICKS(50));
 800e82a:	2032      	movs	r0, #50	; 0x32
 800e82c:	f003 f896 	bl	801195c <_tx_thread_sleep>
      }

      /* notify the system that the task is working fine. */
      (void)AMTNotifyIsStillRunning((AManagedTask*)_this, xRes);
 800e830:	8bfb      	ldrh	r3, [r7, #30]
 800e832:	4619      	mov	r1, r3
 800e834:	69b8      	ldr	r0, [r7, #24]
 800e836:	f7ff ff55 	bl	800e6e4 <AMTNotifyIsStillRunning>
    if(_this->m_pfPMState2FuncMap == NULL) {
 800e83a:	e7a1      	b.n	800e780 <AMTRun+0x2c>

0800e83c <AMTOnEnterTaskControlLoop>:
sys_error_code_t AMTOnEnterTaskControlLoop(AManagedTask *_this) {
 800e83c:	b580      	push	{r7, lr}
 800e83e:	b082      	sub	sp, #8
 800e840:	af00      	add	r7, sp, #0
 800e842:	6078      	str	r0, [r7, #4]
  return _this->vptr->OnEnterTaskControlLoop(_this);
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	681b      	ldr	r3, [r3, #0]
 800e848:	691b      	ldr	r3, [r3, #16]
 800e84a:	6878      	ldr	r0, [r7, #4]
 800e84c:	4798      	blx	r3
 800e84e:	4603      	mov	r3, r0
}
 800e850:	4618      	mov	r0, r3
 800e852:	3708      	adds	r7, #8
 800e854:	46bd      	mov	sp, r7
 800e856:	bd80      	pop	{r7, pc}

0800e858 <AMTGetTaskPowerMode>:
EPowerMode AMTGetTaskPowerMode(AManagedTask *_this) {
 800e858:	b590      	push	{r4, r7, lr}
 800e85a:	b085      	sub	sp, #20
 800e85c:	af00      	add	r7, sp, #0
 800e85e:	6078      	str	r0, [r7, #4]
  assert_param(_this != NULL);
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	2b00      	cmp	r3, #0
 800e864:	d103      	bne.n	800e86e <AMTGetTaskPowerMode+0x16>
 800e866:	21ca      	movs	r1, #202	; 0xca
 800e868:	480c      	ldr	r0, [pc, #48]	; (800e89c <AMTGetTaskPowerMode+0x44>)
 800e86a:	f006 fd1e 	bl	80152aa <assert_failed>
  EPowerMode eTaskPowrMode = (_this->m_pPMState2PMStateMap != NULL) ?
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
      _this->m_pPMState2PMStateMap[(uint8_t)SysGetPowerMode()] :
 800e874:	2b00      	cmp	r3, #0
 800e876:	d008      	beq.n	800e88a <AMTGetTaskPowerMode+0x32>
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	f8d3 40bc 	ldr.w	r4, [r3, #188]	; 0xbc
 800e87e:	f000 fcc5 	bl	800f20c <SysGetPowerMode>
 800e882:	4603      	mov	r3, r0
 800e884:	4423      	add	r3, r4
 800e886:	781b      	ldrb	r3, [r3, #0]
 800e888:	e002      	b.n	800e890 <AMTGetTaskPowerMode+0x38>
      SysGetPowerMode();
 800e88a:	f000 fcbf 	bl	800f20c <SysGetPowerMode>
 800e88e:	4603      	mov	r3, r0
  EPowerMode eTaskPowrMode = (_this->m_pPMState2PMStateMap != NULL) ?
 800e890:	73fb      	strb	r3, [r7, #15]
  return eTaskPowrMode;
 800e892:	7bfb      	ldrb	r3, [r7, #15]
}
 800e894:	4618      	mov	r0, r3
 800e896:	3714      	adds	r7, #20
 800e898:	46bd      	mov	sp, r7
 800e89a:	bd90      	pop	{r4, r7, pc}
 800e89c:	08025fe4 	.word	0x08025fe4

0800e8a0 <AMTNotifyIsStillRunning>:
sys_error_code_t AMTNotifyIsStillRunning(AManagedTask *_this, sys_error_code_t nStepError) {
 800e8a0:	b480      	push	{r7}
 800e8a2:	b083      	sub	sp, #12
 800e8a4:	af00      	add	r7, sp, #0
 800e8a6:	6078      	str	r0, [r7, #4]
 800e8a8:	460b      	mov	r3, r1
 800e8aa:	807b      	strh	r3, [r7, #2]
  if (SYS_IS_ERROR_CODE(nStepError) && (_this->m_xStatus.nErrorCount < MT_MAX_ERROR_COUNT)) {
 800e8ac:	887b      	ldrh	r3, [r7, #2]
 800e8ae:	2b00      	cmp	r3, #0
 800e8b0:	d018      	beq.n	800e8e4 <AMTNotifyIsStillRunning+0x44>
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 800e8b8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800e8bc:	b2db      	uxtb	r3, r3
 800e8be:	2b30      	cmp	r3, #48	; 0x30
 800e8c0:	d010      	beq.n	800e8e4 <AMTNotifyIsStillRunning+0x44>
    _this->m_xStatus.nErrorCount++;
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 800e8c8:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800e8cc:	b2db      	uxtb	r3, r3
 800e8ce:	3301      	adds	r3, #1
 800e8d0:	f003 0303 	and.w	r3, r3, #3
 800e8d4:	b2d9      	uxtb	r1, r3
 800e8d6:	687a      	ldr	r2, [r7, #4]
 800e8d8:	f892 30c0 	ldrb.w	r3, [r2, #192]	; 0xc0
 800e8dc:	f361 1305 	bfi	r3, r1, #4, #2
 800e8e0:	f882 30c0 	strb.w	r3, [r2, #192]	; 0xc0
  if (_this->m_xStatus.nErrorCount < MT_ALLOWED_ERROR_COUNT) {
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 800e8ea:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800e8ee:	b2db      	uxtb	r3, r3
 800e8f0:	2b01      	cmp	r3, #1
 800e8f2:	d806      	bhi.n	800e902 <AMTNotifyIsStillRunning+0x62>
    _this->m_xStatus.nIsTaskStillRunning = 1;
 800e8f4:	687a      	ldr	r2, [r7, #4]
 800e8f6:	f892 30c0 	ldrb.w	r3, [r2, #192]	; 0xc0
 800e8fa:	f043 0308 	orr.w	r3, r3, #8
 800e8fe:	f882 30c0 	strb.w	r3, [r2, #192]	; 0xc0
  return SYS_NO_ERROR_CODE;
 800e902:	2300      	movs	r3, #0
}
 800e904:	4618      	mov	r0, r3
 800e906:	370c      	adds	r7, #12
 800e908:	46bd      	mov	sp, r7
 800e90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e90e:	4770      	bx	lr

0800e910 <AMTExSetInactiveState>:

  return SYS_NO_ERROR_CODE;
}

SYS_DEFINE_STATIC_INLINE
sys_error_code_t AMTExSetInactiveState(AManagedTaskEx *_this, boolean_t bBlockedSuspended) {
 800e910:	b580      	push	{r7, lr}
 800e912:	b082      	sub	sp, #8
 800e914:	af00      	add	r7, sp, #0
 800e916:	6078      	str	r0, [r7, #4]
 800e918:	460b      	mov	r3, r1
 800e91a:	70fb      	strb	r3, [r7, #3]
  assert_param(_this);
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	2b00      	cmp	r3, #0
 800e920:	d103      	bne.n	800e92a <AMTExSetInactiveState+0x1a>
 800e922:	21a6      	movs	r1, #166	; 0xa6
 800e924:	4807      	ldr	r0, [pc, #28]	; (800e944 <AMTExSetInactiveState+0x34>)
 800e926:	f006 fcc0 	bl	80152aa <assert_failed>

  _this->m_xStatusEx.nIsWaitingNoTimeout = (uint8_t)bBlockedSuspended;
 800e92a:	687a      	ldr	r2, [r7, #4]
 800e92c:	f892 30c1 	ldrb.w	r3, [r2, #193]	; 0xc1
 800e930:	78f9      	ldrb	r1, [r7, #3]
 800e932:	f361 0300 	bfi	r3, r1, #0, #1
 800e936:	f882 30c1 	strb.w	r3, [r2, #193]	; 0xc1

  return SYS_NO_ERROR_CODE;
 800e93a:	2300      	movs	r3, #0
}
 800e93c:	4618      	mov	r0, r3
 800e93e:	3708      	adds	r7, #8
 800e940:	46bd      	mov	sp, r7
 800e942:	bd80      	pop	{r7, pc}
 800e944:	0802602c 	.word	0x0802602c

0800e948 <AMTExRun>:


/* Public API definition */
/*************************/

VOID AMTExRun(ULONG nParam) {
 800e948:	b580      	push	{r7, lr}
 800e94a:	b088      	sub	sp, #32
 800e94c:	af00      	add	r7, sp, #0
 800e94e:	6078      	str	r0, [r7, #4]
  sys_error_code_t xRes = SYS_NO_ERROR_CODE;
 800e950:	2300      	movs	r3, #0
 800e952:	83fb      	strh	r3, [r7, #30]
  AManagedTaskEx *_this = (AManagedTaskEx*)nParam;
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	61bb      	str	r3, [r7, #24]
  pExecuteStepFunc_t pExecuteStepFunc = NULL;
 800e958:	2300      	movs	r3, #0
 800e95a:	617b      	str	r3, [r7, #20]
  UINT nPosture = TX_INT_ENABLE;
 800e95c:	2300      	movs	r3, #0
 800e95e:	613b      	str	r3, [r7, #16]

  /* At this point all system has been initialized.
     Execute task specific delayed one time initialization. */
  xRes = AMTOnEnterTaskControlLoop((AManagedTask*)_this);
 800e960:	69b8      	ldr	r0, [r7, #24]
 800e962:	f7ff ff6b 	bl	800e83c <AMTOnEnterTaskControlLoop>
 800e966:	4603      	mov	r3, r0
 800e968:	83fb      	strh	r3, [r7, #30]
  if (SYS_IS_ERROR_CODE(xRes)) {
 800e96a:	8bfb      	ldrh	r3, [r7, #30]
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	d001      	beq.n	800e974 <AMTExRun+0x2c>
    /* stop the system execution */
    sys_error_handler();
 800e970:	f000 f9f2 	bl	800ed58 <sys_error_handler>
  }

  for (;;) {
    if(_this->m_pfPMState2FuncMap == NULL) {
 800e974:	69bb      	ldr	r3, [r7, #24]
 800e976:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800e97a:	2b00      	cmp	r3, #0
 800e97c:	d101      	bne.n	800e982 <AMTExRun+0x3a>
      sys_error_handler();
 800e97e:	f000 f9eb 	bl	800ed58 <sys_error_handler>
    }

    /* check if there is a pending power mode switch request */
    if (_this->m_xStatus.nPowerModeSwitchPending == 1U) {
 800e982:	69bb      	ldr	r3, [r7, #24]
 800e984:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 800e988:	f003 0302 	and.w	r3, r3, #2
 800e98c:	b2db      	uxtb	r3, r3
 800e98e:	2b00      	cmp	r3, #0
 800e990:	d013      	beq.n	800e9ba <AMTExRun+0x72>
      /* clear the power mode switch delay because the task is ready to switch.*/
      nPosture = tx_interrupt_control(TX_INT_DISABLE);
 800e992:	2001      	movs	r0, #1
 800e994:	f7f1 fc70 	bl	8000278 <_tx_thread_interrupt_control>
 800e998:	6138      	str	r0, [r7, #16]
        _this->m_xStatus.nDelayPowerModeSwitch = 0;
 800e99a:	69ba      	ldr	r2, [r7, #24]
 800e99c:	f892 30c0 	ldrb.w	r3, [r2, #192]	; 0xc0
 800e9a0:	f36f 0300 	bfc	r3, #0, #1
 800e9a4:	f882 30c0 	strb.w	r3, [r2, #192]	; 0xc0
      tx_interrupt_control(nPosture);;
 800e9a8:	6938      	ldr	r0, [r7, #16]
 800e9aa:	f7f1 fc65 	bl	8000278 <_tx_thread_interrupt_control>
      tx_thread_suspend(&_this->m_xThaskHandle);
 800e9ae:	69bb      	ldr	r3, [r7, #24]
 800e9b0:	3304      	adds	r3, #4
 800e9b2:	4618      	mov	r0, r3
 800e9b4:	f004 fd36 	bl	8013424 <_txe_thread_suspend>
 800e9b8:	e7dc      	b.n	800e974 <AMTExRun+0x2c>
    }
    else {
      /* find the execute step function  */
      uint8_t nPMState = (uint8_t)AMTGetTaskPowerMode((AManagedTask*)_this);
 800e9ba:	69b8      	ldr	r0, [r7, #24]
 800e9bc:	f7ff ff4c 	bl	800e858 <AMTGetTaskPowerMode>
 800e9c0:	4603      	mov	r3, r0
 800e9c2:	73fb      	strb	r3, [r7, #15]
      pExecuteStepFunc = _this->m_pfPMState2FuncMap[nPMState];
 800e9c4:	69bb      	ldr	r3, [r7, #24]
 800e9c6:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 800e9ca:	7bfb      	ldrb	r3, [r7, #15]
 800e9cc:	009b      	lsls	r3, r3, #2
 800e9ce:	4413      	add	r3, r2
 800e9d0:	681b      	ldr	r3, [r3, #0]
 800e9d2:	617b      	str	r3, [r7, #20]

      if (pExecuteStepFunc != NULL) {
 800e9d4:	697b      	ldr	r3, [r7, #20]
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	d021      	beq.n	800ea1e <AMTExRun+0xd6>
        nPosture = tx_interrupt_control(TX_INT_DISABLE);
 800e9da:	2001      	movs	r0, #1
 800e9dc:	f7f1 fc4c 	bl	8000278 <_tx_thread_interrupt_control>
 800e9e0:	6138      	str	r0, [r7, #16]
          _this->m_xStatus.nDelayPowerModeSwitch = 1;
 800e9e2:	69ba      	ldr	r2, [r7, #24]
 800e9e4:	f892 30c0 	ldrb.w	r3, [r2, #192]	; 0xc0
 800e9e8:	f043 0301 	orr.w	r3, r3, #1
 800e9ec:	f882 30c0 	strb.w	r3, [r2, #192]	; 0xc0
        tx_interrupt_control(nPosture);
 800e9f0:	6938      	ldr	r0, [r7, #16]
 800e9f2:	f7f1 fc41 	bl	8000278 <_tx_thread_interrupt_control>
        xRes = pExecuteStepFunc((AManagedTask*)_this);
 800e9f6:	697b      	ldr	r3, [r7, #20]
 800e9f8:	69b8      	ldr	r0, [r7, #24]
 800e9fa:	4798      	blx	r3
 800e9fc:	4603      	mov	r3, r0
 800e9fe:	83fb      	strh	r3, [r7, #30]
        nPosture = tx_interrupt_control(TX_INT_DISABLE);
 800ea00:	2001      	movs	r0, #1
 800ea02:	f7f1 fc39 	bl	8000278 <_tx_thread_interrupt_control>
 800ea06:	6138      	str	r0, [r7, #16]
          _this->m_xStatus.nDelayPowerModeSwitch = 0;
 800ea08:	69ba      	ldr	r2, [r7, #24]
 800ea0a:	f892 30c0 	ldrb.w	r3, [r2, #192]	; 0xc0
 800ea0e:	f36f 0300 	bfc	r3, #0, #1
 800ea12:	f882 30c0 	strb.w	r3, [r2, #192]	; 0xc0
        tx_interrupt_control(nPosture);
 800ea16:	6938      	ldr	r0, [r7, #16]
 800ea18:	f7f1 fc2e 	bl	8000278 <_tx_thread_interrupt_control>
 800ea1c:	e00c      	b.n	800ea38 <AMTExRun+0xf0>
      }
      else {
        /* there is no function so, we suspend the task.*/
        (void)AMTExSetInactiveState(_this, TRUE);
 800ea1e:	2101      	movs	r1, #1
 800ea20:	69b8      	ldr	r0, [r7, #24]
 800ea22:	f7ff ff75 	bl	800e910 <AMTExSetInactiveState>
        tx_thread_suspend(&_this->m_xThaskHandle);
 800ea26:	69bb      	ldr	r3, [r7, #24]
 800ea28:	3304      	adds	r3, #4
 800ea2a:	4618      	mov	r0, r3
 800ea2c:	f004 fcfa 	bl	8013424 <_txe_thread_suspend>
        (void)AMTExSetInactiveState(_this, FALSE);
 800ea30:	2100      	movs	r1, #0
 800ea32:	69b8      	ldr	r0, [r7, #24]
 800ea34:	f7ff ff6c 	bl	800e910 <AMTExSetInactiveState>
      }

      /* notify the system that the task is working fine.*/
      (void)AMTNotifyIsStillRunning((AManagedTask*)_this, xRes);
 800ea38:	8bfb      	ldrh	r3, [r7, #30]
 800ea3a:	4619      	mov	r1, r3
 800ea3c:	69b8      	ldr	r0, [r7, #24]
 800ea3e:	f7ff ff2f 	bl	800e8a0 <AMTNotifyIsStillRunning>
    if(_this->m_pfPMState2FuncMap == NULL) {
 800ea42:	e797      	b.n	800e974 <AMTExRun+0x2c>

0800ea44 <ACGetFirstTask>:

	return _this->m_nListSize;
}

SYS_DEFINE_STATIC_INLINE
AManagedTask *ACGetFirstTask(ApplicationContext *_this) {
 800ea44:	b580      	push	{r7, lr}
 800ea46:	b082      	sub	sp, #8
 800ea48:	af00      	add	r7, sp, #0
 800ea4a:	6078      	str	r0, [r7, #4]
	assert_param(_this != NULL);
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	2b00      	cmp	r3, #0
 800ea50:	d103      	bne.n	800ea5a <ACGetFirstTask+0x16>
 800ea52:	2178      	movs	r1, #120	; 0x78
 800ea54:	4804      	ldr	r0, [pc, #16]	; (800ea68 <ACGetFirstTask+0x24>)
 800ea56:	f006 fc28 	bl	80152aa <assert_failed>

	return _this->m_pHead;
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	681b      	ldr	r3, [r3, #0]
}
 800ea5e:	4618      	mov	r0, r3
 800ea60:	3708      	adds	r7, #8
 800ea62:	46bd      	mov	sp, r7
 800ea64:	bd80      	pop	{r7, pc}
 800ea66:	bf00      	nop
 800ea68:	08026078 	.word	0x08026078

0800ea6c <ACGetNextTask>:

SYS_DEFINE_STATIC_INLINE
AManagedTask *ACGetNextTask(ApplicationContext *_this, const AManagedTask *pTask) {
 800ea6c:	b580      	push	{r7, lr}
 800ea6e:	b082      	sub	sp, #8
 800ea70:	af00      	add	r7, sp, #0
 800ea72:	6078      	str	r0, [r7, #4]
 800ea74:	6039      	str	r1, [r7, #0]
	assert_param(_this != NULL);
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	2b00      	cmp	r3, #0
 800ea7a:	d103      	bne.n	800ea84 <ACGetNextTask+0x18>
 800ea7c:	217f      	movs	r1, #127	; 0x7f
 800ea7e:	4808      	ldr	r0, [pc, #32]	; (800eaa0 <ACGetNextTask+0x34>)
 800ea80:	f006 fc13 	bl	80152aa <assert_failed>
	assert_param(pTask != NULL);
 800ea84:	683b      	ldr	r3, [r7, #0]
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	d103      	bne.n	800ea92 <ACGetNextTask+0x26>
 800ea8a:	2180      	movs	r1, #128	; 0x80
 800ea8c:	4804      	ldr	r0, [pc, #16]	; (800eaa0 <ACGetNextTask+0x34>)
 800ea8e:	f006 fc0c 	bl	80152aa <assert_failed>
	UNUSED(_this);

	return pTask->m_pNext;
 800ea92:	683b      	ldr	r3, [r7, #0]
 800ea94:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
}
 800ea98:	4618      	mov	r0, r3
 800ea9a:	3708      	adds	r7, #8
 800ea9c:	46bd      	mov	sp, r7
 800ea9e:	bd80      	pop	{r7, pc}
 800eaa0:	08026078 	.word	0x08026078

0800eaa4 <ACInit>:


// Public API definition
// *********************

sys_error_code_t ACInit(ApplicationContext *this) {
 800eaa4:	b580      	push	{r7, lr}
 800eaa6:	b082      	sub	sp, #8
 800eaa8:	af00      	add	r7, sp, #0
 800eaaa:	6078      	str	r0, [r7, #4]
	assert_param(this != NULL);
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	d103      	bne.n	800eaba <ACInit+0x16>
 800eab2:	2125      	movs	r1, #37	; 0x25
 800eab4:	4806      	ldr	r0, [pc, #24]	; (800ead0 <ACInit+0x2c>)
 800eab6:	f006 fbf8 	bl	80152aa <assert_failed>

	this->m_nListSize = 0;
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	2200      	movs	r2, #0
 800eabe:	711a      	strb	r2, [r3, #4]
	this->m_pHead = NULL;
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	2200      	movs	r2, #0
 800eac4:	601a      	str	r2, [r3, #0]

	return SYS_NO_ERROR_CODE;
 800eac6:	2300      	movs	r3, #0
}
 800eac8:	4618      	mov	r0, r3
 800eaca:	3708      	adds	r7, #8
 800eacc:	46bd      	mov	sp, r7
 800eace:	bd80      	pop	{r7, pc}
 800ead0:	080260c4 	.word	0x080260c4

0800ead4 <ACAddTask>:

sys_error_code_t ACAddTask(ApplicationContext *this, AManagedTask *pTask) {
 800ead4:	b580      	push	{r7, lr}
 800ead6:	b084      	sub	sp, #16
 800ead8:	af00      	add	r7, sp, #0
 800eada:	6078      	str	r0, [r7, #4]
 800eadc:	6039      	str	r1, [r7, #0]
	assert_param(this != NULL);
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	2b00      	cmp	r3, #0
 800eae2:	d103      	bne.n	800eaec <ACAddTask+0x18>
 800eae4:	212e      	movs	r1, #46	; 0x2e
 800eae6:	481b      	ldr	r0, [pc, #108]	; (800eb54 <ACAddTask+0x80>)
 800eae8:	f006 fbdf 	bl	80152aa <assert_failed>
	sys_error_code_t xRes = SYS_NO_ERROR_CODE;
 800eaec:	2300      	movs	r3, #0
 800eaee:	81fb      	strh	r3, [r7, #14]

	if (pTask != NULL) {
 800eaf0:	683b      	ldr	r3, [r7, #0]
 800eaf2:	2b00      	cmp	r3, #0
 800eaf4:	d028      	beq.n	800eb48 <ACAddTask+0x74>
		// check if pTask is already in the list
		const AManagedTask *pTaskTemp = ACGetFirstTask(this);
 800eaf6:	6878      	ldr	r0, [r7, #4]
 800eaf8:	f7ff ffa4 	bl	800ea44 <ACGetFirstTask>
 800eafc:	60b8      	str	r0, [r7, #8]
		while ((pTaskTemp != NULL) && (pTaskTemp != pTask)) {
 800eafe:	e004      	b.n	800eb0a <ACAddTask+0x36>
			pTaskTemp = ACGetNextTask(this, pTaskTemp);
 800eb00:	68b9      	ldr	r1, [r7, #8]
 800eb02:	6878      	ldr	r0, [r7, #4]
 800eb04:	f7ff ffb2 	bl	800ea6c <ACGetNextTask>
 800eb08:	60b8      	str	r0, [r7, #8]
		while ((pTaskTemp != NULL) && (pTaskTemp != pTask)) {
 800eb0a:	68bb      	ldr	r3, [r7, #8]
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	d003      	beq.n	800eb18 <ACAddTask+0x44>
 800eb10:	68ba      	ldr	r2, [r7, #8]
 800eb12:	683b      	ldr	r3, [r7, #0]
 800eb14:	429a      	cmp	r2, r3
 800eb16:	d1f3      	bne.n	800eb00 <ACAddTask+0x2c>
		}

		if ((pTaskTemp == pTask)) {
 800eb18:	68ba      	ldr	r2, [r7, #8]
 800eb1a:	683b      	ldr	r3, [r7, #0]
 800eb1c:	429a      	cmp	r2, r3
 800eb1e:	d105      	bne.n	800eb2c <ACAddTask+0x58>
			// the task is already in this context.
			xRes = SYS_AC_TASK_ALREADY_ADDED_ERROR_CODE;
 800eb20:	23ca      	movs	r3, #202	; 0xca
 800eb22:	81fb      	strh	r3, [r7, #14]
			SYS_SET_SERVICE_LEVEL_ERROR_CODE(xRes);
 800eb24:	4a0c      	ldr	r2, [pc, #48]	; (800eb58 <ACAddTask+0x84>)
 800eb26:	89fb      	ldrh	r3, [r7, #14]
 800eb28:	8053      	strh	r3, [r2, #2]
 800eb2a:	e00d      	b.n	800eb48 <ACAddTask+0x74>
		}
		else {
			// add the task in the context.
			pTask->m_pNext = this->m_pHead;
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	681a      	ldr	r2, [r3, #0]
 800eb30:	683b      	ldr	r3, [r7, #0]
 800eb32:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
			this->m_pHead = pTask;
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	683a      	ldr	r2, [r7, #0]
 800eb3a:	601a      	str	r2, [r3, #0]
			this->m_nListSize++;
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	791b      	ldrb	r3, [r3, #4]
 800eb40:	3301      	adds	r3, #1
 800eb42:	b2da      	uxtb	r2, r3
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	711a      	strb	r2, [r3, #4]
		}
	}

	return xRes;
 800eb48:	89fb      	ldrh	r3, [r7, #14]
}
 800eb4a:	4618      	mov	r0, r3
 800eb4c:	3710      	adds	r7, #16
 800eb4e:	46bd      	mov	sp, r7
 800eb50:	bd80      	pop	{r7, pc}
 800eb52:	bf00      	nop
 800eb54:	080260c4 	.word	0x080260c4
 800eb58:	20000700 	.word	0x20000700

0800eb5c <NullAEDInit>:
/**
 * Null implementation of the IApplicationErrorDelegate. It does no error management.
 * @sa IAEDInit
 */
static inline
sys_error_code_t NullAEDInit(IApplicationErrorDelegate *_this, void *pParams) {
 800eb5c:	b480      	push	{r7}
 800eb5e:	b083      	sub	sp, #12
 800eb60:	af00      	add	r7, sp, #0
 800eb62:	6078      	str	r0, [r7, #4]
 800eb64:	6039      	str	r1, [r7, #0]
  UNUSED(_this);
  UNUSED(pParams);
  return SYS_NO_ERROR_CODE;
 800eb66:	2300      	movs	r3, #0
}
 800eb68:	4618      	mov	r0, r3
 800eb6a:	370c      	adds	r7, #12
 800eb6c:	46bd      	mov	sp, r7
 800eb6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb72:	4770      	bx	lr

0800eb74 <NullAEDOnStartApplication>:
/**
 * Default implementation of the IApplicationErrorDelegate. It does no error management.
 * @sa IAEDOnStartApplication
 */
static inline
sys_error_code_t NullAEDOnStartApplication(IApplicationErrorDelegate *_this, ApplicationContext *pxContext) {
 800eb74:	b480      	push	{r7}
 800eb76:	b083      	sub	sp, #12
 800eb78:	af00      	add	r7, sp, #0
 800eb7a:	6078      	str	r0, [r7, #4]
 800eb7c:	6039      	str	r1, [r7, #0]
  UNUSED(_this);
  UNUSED(pxContext);
  return SYS_NO_ERROR_CODE;
 800eb7e:	2300      	movs	r3, #0
}
 800eb80:	4618      	mov	r0, r3
 800eb82:	370c      	adds	r7, #12
 800eb84:	46bd      	mov	sp, r7
 800eb86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb8a:	4770      	bx	lr

0800eb8c <NullAEDProcessEvent>:
/**
 * Null implementation of the IApplicationErrorDelegate. It does no error management.
 * @sa IAEDProcessEvent
 */
static inline
sys_error_code_t NullAEDProcessEvent(IApplicationErrorDelegate *_this, ApplicationContext *pxContext, SysEvent xEvent) {
 800eb8c:	b480      	push	{r7}
 800eb8e:	b085      	sub	sp, #20
 800eb90:	af00      	add	r7, sp, #0
 800eb92:	60f8      	str	r0, [r7, #12]
 800eb94:	60b9      	str	r1, [r7, #8]
 800eb96:	607a      	str	r2, [r7, #4]
  UNUSED(_this);
  UNUSED(pxContext);
  UNUSED(xEvent);
  return SYS_NO_ERROR_CODE;
 800eb98:	2300      	movs	r3, #0
}
 800eb9a:	4618      	mov	r0, r3
 800eb9c:	3714      	adds	r7, #20
 800eb9e:	46bd      	mov	sp, r7
 800eba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eba4:	4770      	bx	lr

0800eba6 <NullAEDOnNewErrEvent>:
 * Null implementation of the IApplicationErrorDelegate. It does no error management.
 * @sa IAEDOnNewErrEvent
 */

static inline
sys_error_code_t NullAEDOnNewErrEvent(IApplicationErrorDelegate *_this, SysEvent xEvent) {
 800eba6:	b480      	push	{r7}
 800eba8:	b083      	sub	sp, #12
 800ebaa:	af00      	add	r7, sp, #0
 800ebac:	6078      	str	r0, [r7, #4]
 800ebae:	6039      	str	r1, [r7, #0]
  UNUSED(_this);
  UNUSED(xEvent);
  return SYS_NO_ERROR_CODE;
 800ebb0:	2300      	movs	r3, #0
}
 800ebb2:	4618      	mov	r0, r3
 800ebb4:	370c      	adds	r7, #12
 800ebb6:	46bd      	mov	sp, r7
 800ebb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebbc:	4770      	bx	lr

0800ebbe <NullAEDIsLastErrorPending>:
/**
 * Null implementation of the IApplicationErrorDelegate. It does no error management.
 * @sa IAEDIsLastErrorPending
 */
static inline
boolean_t NullAEDIsLastErrorPending(IApplicationErrorDelegate *_this) {
 800ebbe:	b480      	push	{r7}
 800ebc0:	b083      	sub	sp, #12
 800ebc2:	af00      	add	r7, sp, #0
 800ebc4:	6078      	str	r0, [r7, #4]
  UNUSED(_this);
  return FALSE;
 800ebc6:	2300      	movs	r3, #0
}
 800ebc8:	4618      	mov	r0, r3
 800ebca:	370c      	adds	r7, #12
 800ebcc:	46bd      	mov	sp, r7
 800ebce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebd2:	4770      	bx	lr

0800ebd4 <NullAEDAddFirstResponder>:
/**
 * Null implementation of the IApplicationErrorDelegate. It does no error management.
 * @sa IAEDAddFirstResponder
 */
static inline
sys_error_code_t NullAEDAddFirstResponder(IApplicationErrorDelegate *_this, IErrFirstResponder *pFirstResponder, uint8_t nPriority) {
 800ebd4:	b480      	push	{r7}
 800ebd6:	b085      	sub	sp, #20
 800ebd8:	af00      	add	r7, sp, #0
 800ebda:	60f8      	str	r0, [r7, #12]
 800ebdc:	60b9      	str	r1, [r7, #8]
 800ebde:	4613      	mov	r3, r2
 800ebe0:	71fb      	strb	r3, [r7, #7]
  UNUSED(_this);
  UNUSED(pFirstResponder);
  UNUSED(nPriority);
  return SYS_NO_ERROR_CODE;
 800ebe2:	2300      	movs	r3, #0
}
 800ebe4:	4618      	mov	r0, r3
 800ebe6:	3714      	adds	r7, #20
 800ebe8:	46bd      	mov	sp, r7
 800ebea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebee:	4770      	bx	lr

0800ebf0 <NullAEDRemoveFirstResponder>:
/**
 * Null implementation of the IApplicationErrorDelegate. It does no error management.
 * @sa IAEDRemoveFirstResponder
 */
static inline
sys_error_code_t NullAEDRemoveFirstResponder(IApplicationErrorDelegate *_this, IErrFirstResponder *pFirstResponder) {
 800ebf0:	b480      	push	{r7}
 800ebf2:	b083      	sub	sp, #12
 800ebf4:	af00      	add	r7, sp, #0
 800ebf6:	6078      	str	r0, [r7, #4]
 800ebf8:	6039      	str	r1, [r7, #0]
  UNUSED(_this);
  UNUSED(pFirstResponder);
  return SYS_NO_ERROR_CODE;
 800ebfa:	2300      	movs	r3, #0
}
 800ebfc:	4618      	mov	r0, r3
 800ebfe:	370c      	adds	r7, #12
 800ec00:	46bd      	mov	sp, r7
 800ec02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec06:	4770      	bx	lr

0800ec08 <NullAEDGetMaxFirstResponderPriority>:
/**
 * Null implementation of the IApplicationErrorDelegate. It does no error management.
 * @sa IAEDGetMaxFirstResponderPriority
 */
static inline
uint8_t NullAEDGetMaxFirstResponderPriority(const IApplicationErrorDelegate *_this) {
 800ec08:	b480      	push	{r7}
 800ec0a:	b083      	sub	sp, #12
 800ec0c:	af00      	add	r7, sp, #0
 800ec0e:	6078      	str	r0, [r7, #4]
  UNUSED(_this);
  return 0;
 800ec10:	2300      	movs	r3, #0
}
 800ec12:	4618      	mov	r0, r3
 800ec14:	370c      	adds	r7, #12
 800ec16:	46bd      	mov	sp, r7
 800ec18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec1c:	4770      	bx	lr

0800ec1e <NullAEDResetCounter>:
/**
 * Null implementation of the IApplicationErrorDelegate. It does no error management.
 * @sa IAEDResetCounter
 */
static inline
void NullAEDResetCounter(IApplicationErrorDelegate *_this) {
 800ec1e:	b480      	push	{r7}
 800ec20:	b083      	sub	sp, #12
 800ec22:	af00      	add	r7, sp, #0
 800ec24:	6078      	str	r0, [r7, #4]
  UNUSED(_this);
};
 800ec26:	bf00      	nop
 800ec28:	370c      	adds	r7, #12
 800ec2a:	46bd      	mov	sp, r7
 800ec2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec30:	4770      	bx	lr
	...

0800ec34 <NullAEDAlloc>:


// Public API definition
// *********************

IApplicationErrorDelegate *NullAEDAlloc(void) {
 800ec34:	b480      	push	{r7}
 800ec36:	af00      	add	r7, sp, #0
      NullAEDGetMaxFirstResponderPriority,
      NullAEDResetCounter
  };

  static NullErrorDelegate s_xNullAED;
  s_xNullAED.super.vptr = &s_xNullAED_vtbl;
 800ec38:	4b04      	ldr	r3, [pc, #16]	; (800ec4c <NullAEDAlloc+0x18>)
 800ec3a:	4a05      	ldr	r2, [pc, #20]	; (800ec50 <NullAEDAlloc+0x1c>)
 800ec3c:	601a      	str	r2, [r3, #0]

  return (IApplicationErrorDelegate*) &s_xNullAED;
 800ec3e:	4b03      	ldr	r3, [pc, #12]	; (800ec4c <NullAEDAlloc+0x18>)
}
 800ec40:	4618      	mov	r0, r3
 800ec42:	46bd      	mov	sp, r7
 800ec44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec48:	4770      	bx	lr
 800ec4a:	bf00      	nop
 800ec4c:	200006e0 	.word	0x200006e0
 800ec50:	20000008 	.word	0x20000008

0800ec54 <SysDebugInit>:
xDebugLockUnlockFnType xSysDebugLockFn = null_lockfn;
xDebugLockUnlockFnType xSysDebugUnlockFn = null_lockfn;

DebugPrintfFn xSysDebugPrintfFn = printf;

int SysDebugInit() {
 800ec54:	b580      	push	{r7, lr}
 800ec56:	b082      	sub	sp, #8
 800ec58:	af00      	add	r7, sp, #0
  // hardware initialization
  SysDebugHardwareInit();
 800ec5a:	f000 f85d 	bl	800ed18 <SysDebugHardwareInit>

  // software initialization.
  UINT xResult = tx_semaphore_create(&s_xMutex, "DBG_S", 1);
 800ec5e:	231c      	movs	r3, #28
 800ec60:	2201      	movs	r2, #1
 800ec62:	490a      	ldr	r1, [pc, #40]	; (800ec8c <SysDebugInit+0x38>)
 800ec64:	480a      	ldr	r0, [pc, #40]	; (800ec90 <SysDebugInit+0x3c>)
 800ec66:	f004 f999 	bl	8012f9c <_txe_semaphore_create>
 800ec6a:	6078      	str	r0, [r7, #4]

  if (xResult != TX_SUCCESS) {
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	d001      	beq.n	800ec76 <SysDebugInit+0x22>
    return 1;
 800ec72:	2301      	movs	r3, #1
 800ec74:	e006      	b.n	800ec84 <SysDebugInit+0x30>
  }

  xSysDebugUnlockFn = SysDebugUnlock;
 800ec76:	4b07      	ldr	r3, [pc, #28]	; (800ec94 <SysDebugInit+0x40>)
 800ec78:	4a07      	ldr	r2, [pc, #28]	; (800ec98 <SysDebugInit+0x44>)
 800ec7a:	601a      	str	r2, [r3, #0]
  xSysDebugLockFn = SysDebugLock;
 800ec7c:	4b07      	ldr	r3, [pc, #28]	; (800ec9c <SysDebugInit+0x48>)
 800ec7e:	4a08      	ldr	r2, [pc, #32]	; (800eca0 <SysDebugInit+0x4c>)
 800ec80:	601a      	str	r2, [r3, #0]

  return 0;
 800ec82:	2300      	movs	r3, #0
}
 800ec84:	4618      	mov	r0, r3
 800ec86:	3708      	adds	r7, #8
 800ec88:	46bd      	mov	sp, r7
 800ec8a:	bd80      	pop	{r7, pc}
 800ec8c:	08026130 	.word	0x08026130
 800ec90:	200006e4 	.word	0x200006e4
 800ec94:	20000034 	.word	0x20000034
 800ec98:	0800ed05 	.word	0x0800ed05
 800ec9c:	20000030 	.word	0x20000030
 800eca0:	0800ecb5 	.word	0x0800ecb5

0800eca4 <null_lockfn>:

void null_lockfn()
{
 800eca4:	b480      	push	{r7}
 800eca6:	af00      	add	r7, sp, #0
  return;
 800eca8:	bf00      	nop
}
 800ecaa:	46bd      	mov	sp, r7
 800ecac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecb0:	4770      	bx	lr
	...

0800ecb4 <SysDebugLock>:

void SysDebugLock() {
 800ecb4:	b580      	push	{r7, lr}
 800ecb6:	b082      	sub	sp, #8
 800ecb8:	af00      	add	r7, sp, #0
  UINT xResult = TX_SUCCESS;
 800ecba:	2300      	movs	r3, #0
 800ecbc:	607b      	str	r3, [r7, #4]
  if (SYS_DBG_IS_CALLED_FROM_ISR()) {
 800ecbe:	4b0e      	ldr	r3, [pc, #56]	; (800ecf8 <SysDebugLock+0x44>)
 800ecc0:	685b      	ldr	r3, [r3, #4]
 800ecc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ecc6:	2b00      	cmp	r3, #0
 800ecc8:	d005      	beq.n	800ecd6 <SysDebugLock+0x22>
    xResult = tx_semaphore_get(&s_xMutex, TX_NO_WAIT);
 800ecca:	2100      	movs	r1, #0
 800eccc:	480b      	ldr	r0, [pc, #44]	; (800ecfc <SysDebugLock+0x48>)
 800ecce:	f004 fa03 	bl	80130d8 <_txe_semaphore_get>
 800ecd2:	6078      	str	r0, [r7, #4]
 800ecd4:	e005      	b.n	800ece2 <SysDebugLock+0x2e>
  }
  else {
    xResult = tx_semaphore_get(&s_xMutex, TX_WAIT_FOREVER);
 800ecd6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800ecda:	4808      	ldr	r0, [pc, #32]	; (800ecfc <SysDebugLock+0x48>)
 800ecdc:	f004 f9fc 	bl	80130d8 <_txe_semaphore_get>
 800ece0:	6078      	str	r0, [r7, #4]
    }
  assert_param(xResult == TX_SUCCESS);
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	2b00      	cmp	r3, #0
 800ece6:	d003      	beq.n	800ecf0 <SysDebugLock+0x3c>
 800ece8:	2167      	movs	r1, #103	; 0x67
 800ecea:	4805      	ldr	r0, [pc, #20]	; (800ed00 <SysDebugLock+0x4c>)
 800ecec:	f006 fadd 	bl	80152aa <assert_failed>
}
 800ecf0:	bf00      	nop
 800ecf2:	3708      	adds	r7, #8
 800ecf4:	46bd      	mov	sp, r7
 800ecf6:	bd80      	pop	{r7, pc}
 800ecf8:	e000ed00 	.word	0xe000ed00
 800ecfc:	200006e4 	.word	0x200006e4
 800ed00:	08026138 	.word	0x08026138

0800ed04 <SysDebugUnlock>:

void SysDebugUnlock() {
 800ed04:	b580      	push	{r7, lr}
 800ed06:	af00      	add	r7, sp, #0
  tx_semaphore_put(&s_xMutex);
 800ed08:	4802      	ldr	r0, [pc, #8]	; (800ed14 <SysDebugUnlock+0x10>)
 800ed0a:	f004 fa27 	bl	801315c <_txe_semaphore_put>
}
 800ed0e:	bf00      	nop
 800ed10:	bd80      	pop	{r7, pc}
 800ed12:	bf00      	nop
 800ed14:	200006e4 	.word	0x200006e4

0800ed18 <SysDebugHardwareInit>:
#if defined ( __ICCARM__ )
__weak
#else
__attribute__((weak))
#endif
int SysDebugHardwareInit() {
 800ed18:	b580      	push	{r7, lr}
 800ed1a:	af00      	add	r7, sp, #0

  SYS_DBG_UART_INIT();
 800ed1c:	f008 ffbc 	bl	8017c98 <MX_USART2_UART_Init>

  return 0;
 800ed20:	2300      	movs	r3, #0
}
 800ed22:	4618      	mov	r0, r3
 800ed24:	bd80      	pop	{r7, pc}
	...

0800ed28 <__io_putchar>:

int SysDebugLowLevelPutchar(int x) {
 800ed28:	b580      	push	{r7, lr}
 800ed2a:	b082      	sub	sp, #8
 800ed2c:	af00      	add	r7, sp, #0
 800ed2e:	6078      	str	r0, [r7, #4]
  if(HAL_UART_Transmit(&SYS_DBG_UART, (uint8_t*)&x, 1, SYS_DBG_UART_TIMEOUT_MS)!= HAL_OK) {
 800ed30:	1d39      	adds	r1, r7, #4
 800ed32:	f241 3388 	movw	r3, #5000	; 0x1388
 800ed36:	2201      	movs	r2, #1
 800ed38:	4806      	ldr	r0, [pc, #24]	; (800ed54 <__io_putchar+0x2c>)
 800ed3a:	f7fe fc11 	bl	800d560 <HAL_UART_Transmit>
 800ed3e:	4603      	mov	r3, r0
 800ed40:	2b00      	cmp	r3, #0
 800ed42:	d002      	beq.n	800ed4a <__io_putchar+0x22>
    return -1;
 800ed44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ed48:	e000      	b.n	800ed4c <__io_putchar+0x24>
  }

//  ITM_SendChar(x);

  return x;
 800ed4a:	687b      	ldr	r3, [r7, #4]
}
 800ed4c:	4618      	mov	r0, r3
 800ed4e:	3708      	adds	r7, #8
 800ed50:	46bd      	mov	sp, r7
 800ed52:	bd80      	pop	{r7, pc}
 800ed54:	200396ac 	.word	0x200396ac

0800ed58 <sys_error_handler>:
#define SYS_IS_CALLED_FROM_ISR() ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0 ? TRUE : FALSE)
#endif


void sys_error_handler(void)
{
 800ed58:	b480      	push	{r7}
 800ed5a:	af00      	add	r7, sp, #0
#if defined(DEBUG)
	__asm volatile ("bkpt 0");
 800ed5c:	be00      	bkpt	0x0000
  __disable_irq();
	while(1) {
      __asm volatile( "NOP" );
	}
#endif
}
 800ed5e:	bf00      	nop
 800ed60:	46bd      	mov	sp, r7
 800ed62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed66:	4770      	bx	lr

0800ed68 <AMTHardwareInit>:
sys_error_code_t AMTHardwareInit(AManagedTask *_this, void *pParams) {
 800ed68:	b580      	push	{r7, lr}
 800ed6a:	b082      	sub	sp, #8
 800ed6c:	af00      	add	r7, sp, #0
 800ed6e:	6078      	str	r0, [r7, #4]
 800ed70:	6039      	str	r1, [r7, #0]
  return _this->vptr->HardwareInit(_this, pParams);
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	681b      	ldr	r3, [r3, #0]
 800ed76:	681b      	ldr	r3, [r3, #0]
 800ed78:	6839      	ldr	r1, [r7, #0]
 800ed7a:	6878      	ldr	r0, [r7, #4]
 800ed7c:	4798      	blx	r3
 800ed7e:	4603      	mov	r3, r0
}
 800ed80:	4618      	mov	r0, r3
 800ed82:	3708      	adds	r7, #8
 800ed84:	46bd      	mov	sp, r7
 800ed86:	bd80      	pop	{r7, pc}

0800ed88 <AMTOnCreateTask>:
    ULONG *pnParams) {
 800ed88:	b590      	push	{r4, r7, lr}
 800ed8a:	b08b      	sub	sp, #44	; 0x2c
 800ed8c:	af06      	add	r7, sp, #24
 800ed8e:	60f8      	str	r0, [r7, #12]
 800ed90:	60b9      	str	r1, [r7, #8]
 800ed92:	607a      	str	r2, [r7, #4]
 800ed94:	603b      	str	r3, [r7, #0]
  return _this->vptr->OnCreateTask(_this, pvTaskCode, pcName, pvStackStart, pnStackSize, pnPriority, pnPreemptThreshold, pnTimeSlice, pnAutoStart, pnParams);
 800ed96:	68fb      	ldr	r3, [r7, #12]
 800ed98:	681b      	ldr	r3, [r3, #0]
 800ed9a:	685c      	ldr	r4, [r3, #4]
 800ed9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ed9e:	9305      	str	r3, [sp, #20]
 800eda0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eda2:	9304      	str	r3, [sp, #16]
 800eda4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eda6:	9303      	str	r3, [sp, #12]
 800eda8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edaa:	9302      	str	r3, [sp, #8]
 800edac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edae:	9301      	str	r3, [sp, #4]
 800edb0:	6a3b      	ldr	r3, [r7, #32]
 800edb2:	9300      	str	r3, [sp, #0]
 800edb4:	683b      	ldr	r3, [r7, #0]
 800edb6:	687a      	ldr	r2, [r7, #4]
 800edb8:	68b9      	ldr	r1, [r7, #8]
 800edba:	68f8      	ldr	r0, [r7, #12]
 800edbc:	47a0      	blx	r4
 800edbe:	4603      	mov	r3, r0
}
 800edc0:	4618      	mov	r0, r3
 800edc2:	3714      	adds	r7, #20
 800edc4:	46bd      	mov	sp, r7
 800edc6:	bd90      	pop	{r4, r7, pc}

0800edc8 <AMTDoEnterPowerMode>:
sys_error_code_t AMTDoEnterPowerMode(AManagedTask *_this, const EPowerMode eActivePowerMode, const EPowerMode eNewPowerMode) {
 800edc8:	b580      	push	{r7, lr}
 800edca:	b084      	sub	sp, #16
 800edcc:	af00      	add	r7, sp, #0
 800edce:	6078      	str	r0, [r7, #4]
 800edd0:	460b      	mov	r3, r1
 800edd2:	70fb      	strb	r3, [r7, #3]
 800edd4:	4613      	mov	r3, r2
 800edd6:	70bb      	strb	r3, [r7, #2]
  assert_param(_this != NULL);
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	2b00      	cmp	r3, #0
 800eddc:	d103      	bne.n	800ede6 <AMTDoEnterPowerMode+0x1e>
 800edde:	219c      	movs	r1, #156	; 0x9c
 800ede0:	4812      	ldr	r0, [pc, #72]	; (800ee2c <AMTDoEnterPowerMode+0x64>)
 800ede2:	f006 fa62 	bl	80152aa <assert_failed>
  EPowerMode eObjeActivePowerMode = eActivePowerMode;
 800ede6:	78fb      	ldrb	r3, [r7, #3]
 800ede8:	73fb      	strb	r3, [r7, #15]
  EPowerMode eObjNewPowerMode = eNewPowerMode;
 800edea:	78bb      	ldrb	r3, [r7, #2]
 800edec:	73bb      	strb	r3, [r7, #14]
  if (_this->m_pPMState2PMStateMap != NULL) {
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800edf4:	2b00      	cmp	r3, #0
 800edf6:	d00d      	beq.n	800ee14 <AMTDoEnterPowerMode+0x4c>
    eObjeActivePowerMode = _this->m_pPMState2PMStateMap[(uint8_t)eActivePowerMode];
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 800edfe:	78fb      	ldrb	r3, [r7, #3]
 800ee00:	4413      	add	r3, r2
 800ee02:	781b      	ldrb	r3, [r3, #0]
 800ee04:	73fb      	strb	r3, [r7, #15]
    eObjNewPowerMode = _this->m_pPMState2PMStateMap[(uint8_t)eNewPowerMode];
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 800ee0c:	78bb      	ldrb	r3, [r7, #2]
 800ee0e:	4413      	add	r3, r2
 800ee10:	781b      	ldrb	r3, [r3, #0]
 800ee12:	73bb      	strb	r3, [r7, #14]
  return _this->vptr->DoEnterPowerMode(_this, eObjeActivePowerMode, eObjNewPowerMode);
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	681b      	ldr	r3, [r3, #0]
 800ee18:	689b      	ldr	r3, [r3, #8]
 800ee1a:	7bba      	ldrb	r2, [r7, #14]
 800ee1c:	7bf9      	ldrb	r1, [r7, #15]
 800ee1e:	6878      	ldr	r0, [r7, #4]
 800ee20:	4798      	blx	r3
 800ee22:	4603      	mov	r3, r0
}
 800ee24:	4618      	mov	r0, r3
 800ee26:	3710      	adds	r7, #16
 800ee28:	46bd      	mov	sp, r7
 800ee2a:	bd80      	pop	{r7, pc}
 800ee2c:	08026198 	.word	0x08026198

0800ee30 <AMTExForceExecuteStep>:
sys_error_code_t AMTExForceExecuteStep(AManagedTaskEx *_this, EPowerMode eActivePowerMode) {
 800ee30:	b580      	push	{r7, lr}
 800ee32:	b084      	sub	sp, #16
 800ee34:	af00      	add	r7, sp, #0
 800ee36:	6078      	str	r0, [r7, #4]
 800ee38:	460b      	mov	r3, r1
 800ee3a:	70fb      	strb	r3, [r7, #3]
  assert_param(_this != NULL);
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	d103      	bne.n	800ee4a <AMTExForceExecuteStep+0x1a>
 800ee42:	2173      	movs	r1, #115	; 0x73
 800ee44:	480e      	ldr	r0, [pc, #56]	; (800ee80 <AMTExForceExecuteStep+0x50>)
 800ee46:	f006 fa30 	bl	80152aa <assert_failed>
    EPowerMode eObjeActivePowerMode = eActivePowerMode;
 800ee4a:	78fb      	ldrb	r3, [r7, #3]
 800ee4c:	73fb      	strb	r3, [r7, #15]
    if (_this->m_pPMState2PMStateMap != NULL) {
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	d006      	beq.n	800ee66 <AMTExForceExecuteStep+0x36>
      eObjeActivePowerMode = _this->m_pPMState2PMStateMap[(uint8_t)eActivePowerMode];
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 800ee5e:	78fb      	ldrb	r3, [r7, #3]
 800ee60:	4413      	add	r3, r2
 800ee62:	781b      	ldrb	r3, [r3, #0]
 800ee64:	73fb      	strb	r3, [r7, #15]
  return _this->vptr->ForceExecuteStep(_this, eObjeActivePowerMode);
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	681b      	ldr	r3, [r3, #0]
 800ee6a:	695b      	ldr	r3, [r3, #20]
 800ee6c:	7bfa      	ldrb	r2, [r7, #15]
 800ee6e:	4611      	mov	r1, r2
 800ee70:	6878      	ldr	r0, [r7, #4]
 800ee72:	4798      	blx	r3
 800ee74:	4603      	mov	r3, r0
}
 800ee76:	4618      	mov	r0, r3
 800ee78:	3710      	adds	r7, #16
 800ee7a:	46bd      	mov	sp, r7
 800ee7c:	bd80      	pop	{r7, pc}
 800ee7e:	bf00      	nop
 800ee80:	080261e0 	.word	0x080261e0

0800ee84 <AMTExOnEnterPowerMode>:
sys_error_code_t AMTExOnEnterPowerMode(AManagedTaskEx *_this, const EPowerMode eActivePowerMode, const EPowerMode eNewPowerMode) {
 800ee84:	b580      	push	{r7, lr}
 800ee86:	b084      	sub	sp, #16
 800ee88:	af00      	add	r7, sp, #0
 800ee8a:	6078      	str	r0, [r7, #4]
 800ee8c:	460b      	mov	r3, r1
 800ee8e:	70fb      	strb	r3, [r7, #3]
 800ee90:	4613      	mov	r3, r2
 800ee92:	70bb      	strb	r3, [r7, #2]
  assert_param(_this != NULL);
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	d103      	bne.n	800eea2 <AMTExOnEnterPowerMode+0x1e>
 800ee9a:	2180      	movs	r1, #128	; 0x80
 800ee9c:	4812      	ldr	r0, [pc, #72]	; (800eee8 <AMTExOnEnterPowerMode+0x64>)
 800ee9e:	f006 fa04 	bl	80152aa <assert_failed>
  EPowerMode eObjeActivePowerMode = eActivePowerMode;
 800eea2:	78fb      	ldrb	r3, [r7, #3]
 800eea4:	73fb      	strb	r3, [r7, #15]
  EPowerMode eObjNewPowerMode = eNewPowerMode;
 800eea6:	78bb      	ldrb	r3, [r7, #2]
 800eea8:	73bb      	strb	r3, [r7, #14]
  if (_this->m_pPMState2PMStateMap != NULL) {
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800eeb0:	2b00      	cmp	r3, #0
 800eeb2:	d00d      	beq.n	800eed0 <AMTExOnEnterPowerMode+0x4c>
    eObjeActivePowerMode = _this->m_pPMState2PMStateMap[(uint8_t)eActivePowerMode];
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 800eeba:	78fb      	ldrb	r3, [r7, #3]
 800eebc:	4413      	add	r3, r2
 800eebe:	781b      	ldrb	r3, [r3, #0]
 800eec0:	73fb      	strb	r3, [r7, #15]
    eObjNewPowerMode = _this->m_pPMState2PMStateMap[(uint8_t)eNewPowerMode];
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 800eec8:	78bb      	ldrb	r3, [r7, #2]
 800eeca:	4413      	add	r3, r2
 800eecc:	781b      	ldrb	r3, [r3, #0]
 800eece:	73bb      	strb	r3, [r7, #14]
  return _this->vptr->OnEnterPowerMode(_this, eObjeActivePowerMode, eObjNewPowerMode);
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	681b      	ldr	r3, [r3, #0]
 800eed4:	699b      	ldr	r3, [r3, #24]
 800eed6:	7bba      	ldrb	r2, [r7, #14]
 800eed8:	7bf9      	ldrb	r1, [r7, #15]
 800eeda:	6878      	ldr	r0, [r7, #4]
 800eedc:	4798      	blx	r3
 800eede:	4603      	mov	r3, r0
}
 800eee0:	4618      	mov	r0, r3
 800eee2:	3710      	adds	r7, #16
 800eee4:	46bd      	mov	sp, r7
 800eee6:	bd80      	pop	{r7, pc}
 800eee8:	080261e0 	.word	0x080261e0

0800eeec <AMTExGetPMClass>:

  return SYS_NO_ERROR_CODE;
}

SYS_DEFINE_STATIC_INLINE
EPMClass AMTExGetPMClass(AManagedTaskEx *_this) {
 800eeec:	b580      	push	{r7, lr}
 800eeee:	b082      	sub	sp, #8
 800eef0:	af00      	add	r7, sp, #0
 800eef2:	6078      	str	r0, [r7, #4]
  assert_param(_this);
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	2b00      	cmp	r3, #0
 800eef8:	d103      	bne.n	800ef02 <AMTExGetPMClass+0x16>
 800eefa:	21bf      	movs	r1, #191	; 0xbf
 800eefc:	4806      	ldr	r0, [pc, #24]	; (800ef18 <AMTExGetPMClass+0x2c>)
 800eefe:	f006 f9d4 	bl	80152aa <assert_failed>

  return (EPMClass)_this->m_xStatusEx.nPowerModeClass;
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 800ef08:	f3c3 0341 	ubfx	r3, r3, #1, #2
 800ef0c:	b2db      	uxtb	r3, r3
}
 800ef0e:	4618      	mov	r0, r3
 800ef10:	3708      	adds	r7, #8
 800ef12:	46bd      	mov	sp, r7
 800ef14:	bd80      	pop	{r7, pc}
 800ef16:	bf00      	nop
 800ef18:	080261e0 	.word	0x080261e0

0800ef1c <ACGetTaskCount>:
uint8_t ACGetTaskCount(ApplicationContext *_this) {
 800ef1c:	b580      	push	{r7, lr}
 800ef1e:	b082      	sub	sp, #8
 800ef20:	af00      	add	r7, sp, #0
 800ef22:	6078      	str	r0, [r7, #4]
	assert_param(_this != NULL);
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	2b00      	cmp	r3, #0
 800ef28:	d103      	bne.n	800ef32 <ACGetTaskCount+0x16>
 800ef2a:	2171      	movs	r1, #113	; 0x71
 800ef2c:	4804      	ldr	r0, [pc, #16]	; (800ef40 <ACGetTaskCount+0x24>)
 800ef2e:	f006 f9bc 	bl	80152aa <assert_failed>
	return _this->m_nListSize;
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	791b      	ldrb	r3, [r3, #4]
}
 800ef36:	4618      	mov	r0, r3
 800ef38:	3708      	adds	r7, #8
 800ef3a:	46bd      	mov	sp, r7
 800ef3c:	bd80      	pop	{r7, pc}
 800ef3e:	bf00      	nop
 800ef40:	0802622c 	.word	0x0802622c

0800ef44 <ACGetFirstTask>:
AManagedTask *ACGetFirstTask(ApplicationContext *_this) {
 800ef44:	b580      	push	{r7, lr}
 800ef46:	b082      	sub	sp, #8
 800ef48:	af00      	add	r7, sp, #0
 800ef4a:	6078      	str	r0, [r7, #4]
	assert_param(_this != NULL);
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	2b00      	cmp	r3, #0
 800ef50:	d103      	bne.n	800ef5a <ACGetFirstTask+0x16>
 800ef52:	2178      	movs	r1, #120	; 0x78
 800ef54:	4804      	ldr	r0, [pc, #16]	; (800ef68 <ACGetFirstTask+0x24>)
 800ef56:	f006 f9a8 	bl	80152aa <assert_failed>
	return _this->m_pHead;
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	681b      	ldr	r3, [r3, #0]
}
 800ef5e:	4618      	mov	r0, r3
 800ef60:	3708      	adds	r7, #8
 800ef62:	46bd      	mov	sp, r7
 800ef64:	bd80      	pop	{r7, pc}
 800ef66:	bf00      	nop
 800ef68:	0802622c 	.word	0x0802622c

0800ef6c <ACGetNextTask>:
AManagedTask *ACGetNextTask(ApplicationContext *_this, const AManagedTask *pTask) {
 800ef6c:	b580      	push	{r7, lr}
 800ef6e:	b082      	sub	sp, #8
 800ef70:	af00      	add	r7, sp, #0
 800ef72:	6078      	str	r0, [r7, #4]
 800ef74:	6039      	str	r1, [r7, #0]
	assert_param(_this != NULL);
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	2b00      	cmp	r3, #0
 800ef7a:	d103      	bne.n	800ef84 <ACGetNextTask+0x18>
 800ef7c:	217f      	movs	r1, #127	; 0x7f
 800ef7e:	4808      	ldr	r0, [pc, #32]	; (800efa0 <ACGetNextTask+0x34>)
 800ef80:	f006 f993 	bl	80152aa <assert_failed>
	assert_param(pTask != NULL);
 800ef84:	683b      	ldr	r3, [r7, #0]
 800ef86:	2b00      	cmp	r3, #0
 800ef88:	d103      	bne.n	800ef92 <ACGetNextTask+0x26>
 800ef8a:	2180      	movs	r1, #128	; 0x80
 800ef8c:	4804      	ldr	r0, [pc, #16]	; (800efa0 <ACGetNextTask+0x34>)
 800ef8e:	f006 f98c 	bl	80152aa <assert_failed>
	return pTask->m_pNext;
 800ef92:	683b      	ldr	r3, [r7, #0]
 800ef94:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
}
 800ef98:	4618      	mov	r0, r3
 800ef9a:	3708      	adds	r7, #8
 800ef9c:	46bd      	mov	sp, r7
 800ef9e:	bd80      	pop	{r7, pc}
 800efa0:	0802622c 	.word	0x0802622c

0800efa4 <IAEDInit>:

// Inline functions definition
// ***************************

SYS_DEFINE_STATIC_INLINE
sys_error_code_t IAEDInit(IApplicationErrorDelegate *_this, void *pParams) {
 800efa4:	b580      	push	{r7, lr}
 800efa6:	b082      	sub	sp, #8
 800efa8:	af00      	add	r7, sp, #0
 800efaa:	6078      	str	r0, [r7, #4]
 800efac:	6039      	str	r1, [r7, #0]
	return _this->vptr->Init(_this, pParams);
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	681b      	ldr	r3, [r3, #0]
 800efb2:	681b      	ldr	r3, [r3, #0]
 800efb4:	6839      	ldr	r1, [r7, #0]
 800efb6:	6878      	ldr	r0, [r7, #4]
 800efb8:	4798      	blx	r3
 800efba:	4603      	mov	r3, r0
}
 800efbc:	4618      	mov	r0, r3
 800efbe:	3708      	adds	r7, #8
 800efc0:	46bd      	mov	sp, r7
 800efc2:	bd80      	pop	{r7, pc}

0800efc4 <IAEDOnStartApplication>:

SYS_DEFINE_STATIC_INLINE
sys_error_code_t IAEDOnStartApplication(IApplicationErrorDelegate *_this, ApplicationContext *pxContext) {
 800efc4:	b580      	push	{r7, lr}
 800efc6:	b082      	sub	sp, #8
 800efc8:	af00      	add	r7, sp, #0
 800efca:	6078      	str	r0, [r7, #4]
 800efcc:	6039      	str	r1, [r7, #0]
	return _this->vptr->OnStartApplication(_this, pxContext);
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	681b      	ldr	r3, [r3, #0]
 800efd2:	685b      	ldr	r3, [r3, #4]
 800efd4:	6839      	ldr	r1, [r7, #0]
 800efd6:	6878      	ldr	r0, [r7, #4]
 800efd8:	4798      	blx	r3
 800efda:	4603      	mov	r3, r0
}
 800efdc:	4618      	mov	r0, r3
 800efde:	3708      	adds	r7, #8
 800efe0:	46bd      	mov	sp, r7
 800efe2:	bd80      	pop	{r7, pc}

0800efe4 <IAEDProcessEvent>:

SYS_DEFINE_STATIC_INLINE
sys_error_code_t IAEDProcessEvent(IApplicationErrorDelegate *_this, ApplicationContext *pxContext, SysEvent xEvent) {
 800efe4:	b580      	push	{r7, lr}
 800efe6:	b084      	sub	sp, #16
 800efe8:	af00      	add	r7, sp, #0
 800efea:	60f8      	str	r0, [r7, #12]
 800efec:	60b9      	str	r1, [r7, #8]
 800efee:	607a      	str	r2, [r7, #4]
	return _this->vptr->ProcessEvent(_this, pxContext, xEvent);
 800eff0:	68fb      	ldr	r3, [r7, #12]
 800eff2:	681b      	ldr	r3, [r3, #0]
 800eff4:	689b      	ldr	r3, [r3, #8]
 800eff6:	687a      	ldr	r2, [r7, #4]
 800eff8:	68b9      	ldr	r1, [r7, #8]
 800effa:	68f8      	ldr	r0, [r7, #12]
 800effc:	4798      	blx	r3
 800effe:	4603      	mov	r3, r0
}
 800f000:	4618      	mov	r0, r3
 800f002:	3710      	adds	r7, #16
 800f004:	46bd      	mov	sp, r7
 800f006:	bd80      	pop	{r7, pc}

0800f008 <IAEDOnNewErrEvent>:

SYS_DEFINE_STATIC_INLINE
sys_error_code_t IAEDOnNewErrEvent(IApplicationErrorDelegate *_this, SysEvent xEvent) {
 800f008:	b580      	push	{r7, lr}
 800f00a:	b082      	sub	sp, #8
 800f00c:	af00      	add	r7, sp, #0
 800f00e:	6078      	str	r0, [r7, #4]
 800f010:	6039      	str	r1, [r7, #0]
	return _this->vptr->OnNewErrEvent(_this, xEvent);
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	681b      	ldr	r3, [r3, #0]
 800f016:	68db      	ldr	r3, [r3, #12]
 800f018:	6839      	ldr	r1, [r7, #0]
 800f01a:	6878      	ldr	r0, [r7, #4]
 800f01c:	4798      	blx	r3
 800f01e:	4603      	mov	r3, r0
}
 800f020:	4618      	mov	r0, r3
 800f022:	3708      	adds	r7, #8
 800f024:	46bd      	mov	sp, r7
 800f026:	bd80      	pop	{r7, pc}

0800f028 <IAEDIsLastErrorPending>:

SYS_DEFINE_STATIC_INLINE
boolean_t IAEDIsLastErrorPending(IApplicationErrorDelegate *_this) {
 800f028:	b580      	push	{r7, lr}
 800f02a:	b082      	sub	sp, #8
 800f02c:	af00      	add	r7, sp, #0
 800f02e:	6078      	str	r0, [r7, #4]
	return _this->vptr->IsLastErrorPending(_this);
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	681b      	ldr	r3, [r3, #0]
 800f034:	691b      	ldr	r3, [r3, #16]
 800f036:	6878      	ldr	r0, [r7, #4]
 800f038:	4798      	blx	r3
 800f03a:	4603      	mov	r3, r0
}
 800f03c:	4618      	mov	r0, r3
 800f03e:	3708      	adds	r7, #8
 800f040:	46bd      	mov	sp, r7
 800f042:	bd80      	pop	{r7, pc}

0800f044 <IAEDResetCounter>:
uint8_t IAEDGetMaxFirstResponderPriority(const IApplicationErrorDelegate *_this) {
	return _this->vptr->GetMaxFirstResponderPriority(_this);
}

SYS_DEFINE_STATIC_INLINE
void IAEDResetCounter(IApplicationErrorDelegate *_this) {
 800f044:	b580      	push	{r7, lr}
 800f046:	b082      	sub	sp, #8
 800f048:	af00      	add	r7, sp, #0
 800f04a:	6078      	str	r0, [r7, #4]
	_this->vptr->ResetCounter(_this);
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	681b      	ldr	r3, [r3, #0]
 800f050:	6a1b      	ldr	r3, [r3, #32]
 800f052:	6878      	ldr	r0, [r7, #4]
 800f054:	4798      	blx	r3
}
 800f056:	bf00      	nop
 800f058:	3708      	adds	r7, #8
 800f05a:	46bd      	mov	sp, r7
 800f05c:	bd80      	pop	{r7, pc}

0800f05e <IapmhInit>:

// Inline functions definition
// ***************************

SYS_DEFINE_STATIC_INLINE
sys_error_code_t IapmhInit(IAppPowerModeHelper *_this) {
 800f05e:	b580      	push	{r7, lr}
 800f060:	b082      	sub	sp, #8
 800f062:	af00      	add	r7, sp, #0
 800f064:	6078      	str	r0, [r7, #4]
  return _this->vptr->Init(_this);
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	681b      	ldr	r3, [r3, #0]
 800f06a:	681b      	ldr	r3, [r3, #0]
 800f06c:	6878      	ldr	r0, [r7, #4]
 800f06e:	4798      	blx	r3
 800f070:	4603      	mov	r3, r0
}
 800f072:	4618      	mov	r0, r3
 800f074:	3708      	adds	r7, #8
 800f076:	46bd      	mov	sp, r7
 800f078:	bd80      	pop	{r7, pc}

0800f07a <IapmhComputeNewPowerMode>:

SYS_DEFINE_STATIC_INLINE
EPowerMode IapmhComputeNewPowerMode(IAppPowerModeHelper *_this, const SysEvent xEvent) {
 800f07a:	b580      	push	{r7, lr}
 800f07c:	b082      	sub	sp, #8
 800f07e:	af00      	add	r7, sp, #0
 800f080:	6078      	str	r0, [r7, #4]
 800f082:	6039      	str	r1, [r7, #0]
  return _this->vptr->ComputeNewPowerMode(_this, xEvent);
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	681b      	ldr	r3, [r3, #0]
 800f088:	685b      	ldr	r3, [r3, #4]
 800f08a:	6839      	ldr	r1, [r7, #0]
 800f08c:	6878      	ldr	r0, [r7, #4]
 800f08e:	4798      	blx	r3
 800f090:	4603      	mov	r3, r0
}
 800f092:	4618      	mov	r0, r3
 800f094:	3708      	adds	r7, #8
 800f096:	46bd      	mov	sp, r7
 800f098:	bd80      	pop	{r7, pc}

0800f09a <IapmhCheckPowerModeTransaction>:

SYS_DEFINE_STATIC_INLINE
boolean_t IapmhCheckPowerModeTransaction(IAppPowerModeHelper *_this, const EPowerMode eActivePowerMode, const EPowerMode eNewPowerMode) {
 800f09a:	b580      	push	{r7, lr}
 800f09c:	b082      	sub	sp, #8
 800f09e:	af00      	add	r7, sp, #0
 800f0a0:	6078      	str	r0, [r7, #4]
 800f0a2:	460b      	mov	r3, r1
 800f0a4:	70fb      	strb	r3, [r7, #3]
 800f0a6:	4613      	mov	r3, r2
 800f0a8:	70bb      	strb	r3, [r7, #2]
  return _this->vptr->CheckPowerModeTransaction(_this, eActivePowerMode, eNewPowerMode);
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	681b      	ldr	r3, [r3, #0]
 800f0ae:	689b      	ldr	r3, [r3, #8]
 800f0b0:	78ba      	ldrb	r2, [r7, #2]
 800f0b2:	78f9      	ldrb	r1, [r7, #3]
 800f0b4:	6878      	ldr	r0, [r7, #4]
 800f0b6:	4798      	blx	r3
 800f0b8:	4603      	mov	r3, r0
}
 800f0ba:	4618      	mov	r0, r3
 800f0bc:	3708      	adds	r7, #8
 800f0be:	46bd      	mov	sp, r7
 800f0c0:	bd80      	pop	{r7, pc}

0800f0c2 <IapmhDidEnterPowerMode>:

SYS_DEFINE_STATIC_INLINE
sys_error_code_t IapmhDidEnterPowerMode(IAppPowerModeHelper *_this, EPowerMode ePowerMode) {
 800f0c2:	b580      	push	{r7, lr}
 800f0c4:	b082      	sub	sp, #8
 800f0c6:	af00      	add	r7, sp, #0
 800f0c8:	6078      	str	r0, [r7, #4]
 800f0ca:	460b      	mov	r3, r1
 800f0cc:	70fb      	strb	r3, [r7, #3]
  return _this->vptr->DidEnterPowerMode(_this, ePowerMode);
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	681b      	ldr	r3, [r3, #0]
 800f0d2:	68db      	ldr	r3, [r3, #12]
 800f0d4:	78fa      	ldrb	r2, [r7, #3]
 800f0d6:	4611      	mov	r1, r2
 800f0d8:	6878      	ldr	r0, [r7, #4]
 800f0da:	4798      	blx	r3
 800f0dc:	4603      	mov	r3, r0
}
 800f0de:	4618      	mov	r0, r3
 800f0e0:	3708      	adds	r7, #8
 800f0e2:	46bd      	mov	sp, r7
 800f0e4:	bd80      	pop	{r7, pc}

0800f0e6 <IapmhGetActivePowerMode>:

SYS_DEFINE_STATIC_INLINE
EPowerMode IapmhGetActivePowerMode(IAppPowerModeHelper *_this) {
 800f0e6:	b580      	push	{r7, lr}
 800f0e8:	b082      	sub	sp, #8
 800f0ea:	af00      	add	r7, sp, #0
 800f0ec:	6078      	str	r0, [r7, #4]
  return _this->vptr->GetActivePowerMode(_this);
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	681b      	ldr	r3, [r3, #0]
 800f0f2:	691b      	ldr	r3, [r3, #16]
 800f0f4:	6878      	ldr	r0, [r7, #4]
 800f0f6:	4798      	blx	r3
 800f0f8:	4603      	mov	r3, r0
}
 800f0fa:	4618      	mov	r0, r3
 800f0fc:	3708      	adds	r7, #8
 800f0fe:	46bd      	mov	sp, r7
 800f100:	bd80      	pop	{r7, pc}

0800f102 <IapmhIsLowPowerMode>:
SysPowerStatus IapmhGetPowerStatus(IAppPowerModeHelper *_this) {
  return _this->vptr->GetPowerStatus(_this);
}

SYS_DEFINE_STATIC_INLINE
boolean_t IapmhIsLowPowerMode(IAppPowerModeHelper *_this, const EPowerMode ePowerMode) {
 800f102:	b580      	push	{r7, lr}
 800f104:	b082      	sub	sp, #8
 800f106:	af00      	add	r7, sp, #0
 800f108:	6078      	str	r0, [r7, #4]
 800f10a:	460b      	mov	r3, r1
 800f10c:	70fb      	strb	r3, [r7, #3]
  return _this->vptr->IsLowPowerMode(_this, ePowerMode);
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	681b      	ldr	r3, [r3, #0]
 800f112:	699b      	ldr	r3, [r3, #24]
 800f114:	78fa      	ldrb	r2, [r7, #3]
 800f116:	4611      	mov	r1, r2
 800f118:	6878      	ldr	r0, [r7, #4]
 800f11a:	4798      	blx	r3
 800f11c:	4603      	mov	r3, r0
}
 800f11e:	4618      	mov	r0, r3
 800f120:	3708      	adds	r7, #8
 800f122:	46bd      	mov	sp, r7
 800f124:	bd80      	pop	{r7, pc}
	...

0800f128 <SysInit>:
  UNUSED(pAppContext);
  SYS_SET_SERVICE_LEVEL_ERROR_CODE(SYS_TASK_INVALID_CALL_ERROR_CODE);
  return SYS_TASK_INVALID_CALL_ERROR_CODE;
}

sys_error_code_t SysInit(boolean_t bEnableBootIF) {
 800f128:	b580      	push	{r7, lr}
 800f12a:	b084      	sub	sp, #16
 800f12c:	af00      	add	r7, sp, #0
 800f12e:	4603      	mov	r3, r0
 800f130:	71fb      	strb	r3, [r7, #7]
  /* First step: initialize the minimum set of resources before passing the control
   to the RTOS.*/

  sys_error_code_t xRes = SYS_NO_ERROR_CODE;
 800f132:	2300      	movs	r3, #0
 800f134:	81fb      	strh	r3, [r7, #14]

  /* Reset of all peripherals, Initializes the Flash interface and the Systick.*/
  if ( HAL_OK != HAL_Init()) {
 800f136:	f7f3 fd85 	bl	8002c44 <HAL_Init>
 800f13a:	4603      	mov	r3, r0
 800f13c:	2b00      	cmp	r3, #0
 800f13e:	d001      	beq.n	800f144 <SysInit+0x1c>
    sys_error_handler();
 800f140:	f7ff fe0a 	bl	800ed58 <sys_error_handler>
  }

  /* Configure the system clock.*/
  SystemClock_Config();
 800f144:	f006 f9d8 	bl	80154f8 <SystemClock_Config>
  SysPowerConfig();
 800f148:	f006 fb74 	bl	8015834 <SysPowerConfig>
  }

#endif  /* INIT_TASK_CFG_ENABLE_BOOT_IF */

#ifdef SYS_DEBUG
  if (SysDebugInit() != 0) {
 800f14c:	f7ff fd82 	bl	800ec54 <SysDebugInit>
 800f150:	4603      	mov	r3, r0
 800f152:	2b00      	cmp	r3, #0
 800f154:	d001      	beq.n	800f15a <SysInit+0x32>
    sys_error_handler();
 800f156:	f7ff fdff 	bl	800ed58 <sys_error_handler>
  }
#ifdef DEBUG
  HAL_DBGMCU_EnableDBGStopMode();
 800f15a:	f7f3 fde5 	bl	8002d28 <HAL_DBGMCU_EnableDBGStopMode>
  __HAL_DBGMCU_FREEZE_WWDG();
 800f15e:	4b07      	ldr	r3, [pc, #28]	; (800f17c <SysInit+0x54>)
 800f160:	689b      	ldr	r3, [r3, #8]
 800f162:	4a06      	ldr	r2, [pc, #24]	; (800f17c <SysInit+0x54>)
 800f164:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800f168:	6093      	str	r3, [r2, #8]
#endif /* DEBUG */
#endif /* SYS_DEBUG */

  /* Clear the global error.*/
  SYS_CLEAR_ERROR();
 800f16a:	4b05      	ldr	r3, [pc, #20]	; (800f180 <SysInit+0x58>)
 800f16c:	2200      	movs	r2, #0
 800f16e:	601a      	str	r2, [r3, #0]

  // ThreadX use a different approach. After the scheduler is started, it will call the following function
  // that the application code must overwrite:
  // void tx_application_define(void *first_unused_memory)

  return xRes;
 800f170:	89fb      	ldrh	r3, [r7, #14]
}
 800f172:	4618      	mov	r0, r3
 800f174:	3710      	adds	r7, #16
 800f176:	46bd      	mov	sp, r7
 800f178:	bd80      	pop	{r7, pc}
 800f17a:	bf00      	nop
 800f17c:	e0044000 	.word	0xe0044000
 800f180:	20000700 	.word	0x20000700

0800f184 <SysPostEvent>:

sys_error_code_t SysPostEvent(SysEvent xEvent) {
 800f184:	b580      	push	{r7, lr}
 800f186:	b084      	sub	sp, #16
 800f188:	af00      	add	r7, sp, #0
 800f18a:	6078      	str	r0, [r7, #4]
  sys_error_code_t xRes = SYS_NO_ERROR_CODE;
 800f18c:	2300      	movs	r3, #0
 800f18e:	81fb      	strh	r3, [r7, #14]
  UINT xResult = TX_SUCCESS;
 800f190:	2300      	movs	r3, #0
 800f192:	60bb      	str	r3, [r7, #8]

  if (SYS_IS_ERROR_EVENT(xEvent)) {
 800f194:	79fb      	ldrb	r3, [r7, #7]
 800f196:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800f19a:	b2db      	uxtb	r3, r3
 800f19c:	2b00      	cmp	r3, #0
 800f19e:	d008      	beq.n	800f1b2 <SysPostEvent+0x2e>
    /* notify the error delegate to allow a first response to critical errors.*/
    xRes = IAEDOnNewErrEvent(s_xTheSystem.m_pxAppErrorDelegate, xEvent);
 800f1a0:	4b16      	ldr	r3, [pc, #88]	; (800f1fc <SysPostEvent+0x78>)
 800f1a2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800f1a6:	6879      	ldr	r1, [r7, #4]
 800f1a8:	4618      	mov	r0, r3
 800f1aa:	f7ff ff2d 	bl	800f008 <IAEDOnNewErrEvent>
 800f1ae:	4603      	mov	r3, r0
 800f1b0:	81fb      	strh	r3, [r7, #14]
  }

  if (SYS_IS_CALLED_FROM_ISR()) {
 800f1b2:	4b13      	ldr	r3, [pc, #76]	; (800f200 <SysPostEvent+0x7c>)
 800f1b4:	685b      	ldr	r3, [r3, #4]
 800f1b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	d007      	beq.n	800f1ce <SysPostEvent+0x4a>
    // inside an ISR we cannot wait
    xResult = tx_queue_send(&s_xTheSystem.m_xSysQueue, &xEvent, TX_NO_WAIT);
 800f1be:	1d3b      	adds	r3, r7, #4
 800f1c0:	2200      	movs	r2, #0
 800f1c2:	4619      	mov	r1, r3
 800f1c4:	480f      	ldr	r0, [pc, #60]	; (800f204 <SysPostEvent+0x80>)
 800f1c6:	f003 fe91 	bl	8012eec <_txe_queue_send>
 800f1ca:	60b8      	str	r0, [r7, #8]
 800f1cc:	e006      	b.n	800f1dc <SysPostEvent+0x58>
  }
  else {
    xResult = tx_queue_send(&s_xTheSystem.m_xSysQueue, &xEvent, SYS_MS_TO_TICKS(50));
 800f1ce:	1d3b      	adds	r3, r7, #4
 800f1d0:	2232      	movs	r2, #50	; 0x32
 800f1d2:	4619      	mov	r1, r3
 800f1d4:	480b      	ldr	r0, [pc, #44]	; (800f204 <SysPostEvent+0x80>)
 800f1d6:	f003 fe89 	bl	8012eec <_txe_queue_send>
 800f1da:	60b8      	str	r0, [r7, #8]
  }

  if (xResult != TX_SUCCESS) {
 800f1dc:	68bb      	ldr	r3, [r7, #8]
 800f1de:	2b00      	cmp	r3, #0
 800f1e0:	d006      	beq.n	800f1f0 <SysPostEvent+0x6c>
    SYS_SET_SERVICE_LEVEL_ERROR_CODE(SYS_INIT_TASK_POWER_MODE_NOT_ENABLE_ERROR_CODE);
 800f1e2:	4b09      	ldr	r3, [pc, #36]	; (800f208 <SysPostEvent+0x84>)
 800f1e4:	f240 3223 	movw	r2, #803	; 0x323
 800f1e8:	805a      	strh	r2, [r3, #2]
    xRes = SYS_INIT_TASK_POWER_MODE_NOT_ENABLE_ERROR_CODE;
 800f1ea:	f240 3323 	movw	r3, #803	; 0x323
 800f1ee:	81fb      	strh	r3, [r7, #14]
  }

  return xRes;
 800f1f0:	89fb      	ldrh	r3, [r7, #14]
}
 800f1f2:	4618      	mov	r0, r3
 800f1f4:	3710      	adds	r7, #16
 800f1f6:	46bd      	mov	sp, r7
 800f1f8:	bd80      	pop	{r7, pc}
 800f1fa:	bf00      	nop
 800f1fc:	20000704 	.word	0x20000704
 800f200:	e000ed00 	.word	0xe000ed00
 800f204:	200007b4 	.word	0x200007b4
 800f208:	20000700 	.word	0x20000700

0800f20c <SysGetPowerMode>:

EPowerMode SysGetPowerMode(void) {
 800f20c:	b580      	push	{r7, lr}
 800f20e:	af00      	add	r7, sp, #0
  return IapmhGetActivePowerMode(s_xTheSystem.m_pxAppPowerModeHelper);
 800f210:	4b04      	ldr	r3, [pc, #16]	; (800f224 <SysGetPowerMode+0x18>)
 800f212:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800f216:	4618      	mov	r0, r3
 800f218:	f7ff ff65 	bl	800f0e6 <IapmhGetActivePowerMode>
 800f21c:	4603      	mov	r3, r0
}
 800f21e:	4618      	mov	r0, r3
 800f220:	bd80      	pop	{r7, pc}
 800f222:	bf00      	nop
 800f224:	20000704 	.word	0x20000704

0800f228 <SysResetAEDCounter>:

SysPowerStatus SysGetPowerStatus(void) {
  return IapmhGetPowerStatus(s_xTheSystem.m_pxAppPowerModeHelper);
}

void SysResetAEDCounter(void) {
 800f228:	b580      	push	{r7, lr}
 800f22a:	af00      	add	r7, sp, #0
  IAEDResetCounter(s_xTheSystem.m_pxAppErrorDelegate);
 800f22c:	4b03      	ldr	r3, [pc, #12]	; (800f23c <SysResetAEDCounter+0x14>)
 800f22e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800f232:	4618      	mov	r0, r3
 800f234:	f7ff ff06 	bl	800f044 <IAEDResetCounter>
}
 800f238:	bf00      	nop
 800f23a:	bd80      	pop	{r7, pc}
 800f23c:	20000704 	.word	0x20000704

0800f240 <SysEventsPending>:

boolean_t SysEventsPending(void) {
 800f240:	b580      	push	{r7, lr}
 800f242:	b086      	sub	sp, #24
 800f244:	af04      	add	r7, sp, #16
  ULONG nEnqueued = 0;
 800f246:	2300      	movs	r3, #0
 800f248:	603b      	str	r3, [r7, #0]
  UINT xResult = tx_queue_info_get(&s_xTheSystem.m_xSysQueue, TX_NULL, &nEnqueued, TX_NULL, TX_NULL, TX_NULL, TX_NULL);
 800f24a:	463a      	mov	r2, r7
 800f24c:	2300      	movs	r3, #0
 800f24e:	9302      	str	r3, [sp, #8]
 800f250:	2300      	movs	r3, #0
 800f252:	9301      	str	r3, [sp, #4]
 800f254:	2300      	movs	r3, #0
 800f256:	9300      	str	r3, [sp, #0]
 800f258:	2300      	movs	r3, #0
 800f25a:	2100      	movs	r1, #0
 800f25c:	480a      	ldr	r0, [pc, #40]	; (800f288 <SysEventsPending+0x48>)
 800f25e:	f003 fdb5 	bl	8012dcc <_txe_queue_info_get>
 800f262:	6078      	str	r0, [r7, #4]
  assert_param(xResult == TX_SUCCESS);
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	2b00      	cmp	r3, #0
 800f268:	d004      	beq.n	800f274 <SysEventsPending+0x34>
 800f26a:	f240 112f 	movw	r1, #303	; 0x12f
 800f26e:	4807      	ldr	r0, [pc, #28]	; (800f28c <SysEventsPending+0x4c>)
 800f270:	f006 f81b 	bl	80152aa <assert_failed>

  return nEnqueued > 0;
 800f274:	683b      	ldr	r3, [r7, #0]
 800f276:	2b00      	cmp	r3, #0
 800f278:	bf14      	ite	ne
 800f27a:	2301      	movne	r3, #1
 800f27c:	2300      	moveq	r3, #0
 800f27e:	b2db      	uxtb	r3, r3
}
 800f280:	4618      	mov	r0, r3
 800f282:	3708      	adds	r7, #8
 800f284:	46bd      	mov	sp, r7
 800f286:	bd80      	pop	{r7, pc}
 800f288:	200007b4 	.word	0x200007b4
 800f28c:	08026278 	.word	0x08026278

0800f290 <SysAlloc>:

void *SysAlloc(size_t nSize) {
 800f290:	b580      	push	{r7, lr}
 800f292:	b084      	sub	sp, #16
 800f294:	af00      	add	r7, sp, #0
 800f296:	6078      	str	r0, [r7, #4]
  void *pcMemory = NULL;
 800f298:	2300      	movs	r3, #0
 800f29a:	60fb      	str	r3, [r7, #12]
  if (TX_SUCCESS != tx_byte_allocate(&s_xTheSystem.m_xSysMemPool, (VOID **)&pcMemory, nSize, TX_NO_WAIT)) {
 800f29c:	f107 010c 	add.w	r1, r7, #12
 800f2a0:	2300      	movs	r3, #0
 800f2a2:	687a      	ldr	r2, [r7, #4]
 800f2a4:	4806      	ldr	r0, [pc, #24]	; (800f2c0 <SysAlloc+0x30>)
 800f2a6:	f003 fad7 	bl	8012858 <_txe_byte_allocate>
 800f2aa:	4603      	mov	r3, r0
 800f2ac:	2b00      	cmp	r3, #0
 800f2ae:	d001      	beq.n	800f2b4 <SysAlloc+0x24>
    pcMemory = NULL;
 800f2b0:	2300      	movs	r3, #0
 800f2b2:	60fb      	str	r3, [r7, #12]
  }
  return pcMemory;
 800f2b4:	68fb      	ldr	r3, [r7, #12]
  }
 800f2b6:	4618      	mov	r0, r3
 800f2b8:	3710      	adds	r7, #16
 800f2ba:	46bd      	mov	sp, r7
 800f2bc:	bd80      	pop	{r7, pc}
 800f2be:	bf00      	nop
 800f2c0:	200007f8 	.word	0x200007f8

0800f2c4 <SysFree>:

void SysFree(void *pvData) {
 800f2c4:	b580      	push	{r7, lr}
 800f2c6:	b082      	sub	sp, #8
 800f2c8:	af00      	add	r7, sp, #0
 800f2ca:	6078      	str	r0, [r7, #4]
  tx_byte_release(pvData);
 800f2cc:	6878      	ldr	r0, [r7, #4]
 800f2ce:	f003 fc15 	bl	8012afc <_txe_byte_release>
}
 800f2d2:	bf00      	nop
 800f2d4:	3708      	adds	r7, #8
 800f2d6:	46bd      	mov	sp, r7
 800f2d8:	bd80      	pop	{r7, pc}

0800f2da <SysGetErrorDelegate>:

__weak IApplicationErrorDelegate *SysGetErrorDelegate(void) {
 800f2da:	b580      	push	{r7, lr}
 800f2dc:	af00      	add	r7, sp, #0

  return NullAEDAlloc();
 800f2de:	f7ff fca9 	bl	800ec34 <NullAEDAlloc>
 800f2e2:	4603      	mov	r3, r0
}
 800f2e4:	4618      	mov	r0, r3
 800f2e6:	bd80      	pop	{r7, pc}

0800f2e8 <InitTaskRun>:
 * The INIT task is the first created and running task. It is responsible to complete
 * the system initialization and to create all other system task.
 *
 * @param pParams not used
 */
static void InitTaskRun(ULONG thread_input) {
 800f2e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f2ea:	b09f      	sub	sp, #124	; 0x7c
 800f2ec:	af08      	add	r7, sp, #32
 800f2ee:	60f8      	str	r0, [r7, #12]
  sys_error_code_t xRes = SYS_NO_ERROR_CODE;
 800f2f0:	2300      	movs	r3, #0
 800f2f2:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  UINT nRtosRes = TX_SUCCESS;
 800f2f6:	2300      	movs	r3, #0
 800f2f8:	653b      	str	r3, [r7, #80]	; 0x50
  UNUSED(thread_input);

  SYS_DEBUGF(SYS_DBG_LEVEL_VERBOSE, ("System Initialization\r\n"));
 800f2fa:	4b8b      	ldr	r3, [pc, #556]	; (800f528 <InitTaskRun+0x240>)
 800f2fc:	781b      	ldrb	r3, [r3, #0]
 800f2fe:	2b01      	cmp	r3, #1
 800f300:	d809      	bhi.n	800f316 <InitTaskRun+0x2e>
 800f302:	4b8a      	ldr	r3, [pc, #552]	; (800f52c <InitTaskRun+0x244>)
 800f304:	681b      	ldr	r3, [r3, #0]
 800f306:	4798      	blx	r3
 800f308:	4b89      	ldr	r3, [pc, #548]	; (800f530 <InitTaskRun+0x248>)
 800f30a:	681b      	ldr	r3, [r3, #0]
 800f30c:	4889      	ldr	r0, [pc, #548]	; (800f534 <InitTaskRun+0x24c>)
 800f30e:	4798      	blx	r3
 800f310:	4b89      	ldr	r3, [pc, #548]	; (800f538 <InitTaskRun+0x250>)
 800f312:	681b      	ldr	r3, [r3, #0]
 800f314:	4798      	blx	r3
//  vTaskSuspendAll();
  // to suspend all tasks, they are created with auto_start set to 0.
  // At the end of the system initialization all tasks with auto_start set to 1 are resumed.

  // allocate the system memory pool
  if (TX_SUCCESS != tx_byte_pool_create(&s_xTheSystem.m_xSysMemPool, "SYS_MEM_POOL", s_xTheSystem.m_pnHeap, INIT_TASK_CFG_HEAP_SYZE)) {
 800f316:	2334      	movs	r3, #52	; 0x34
 800f318:	9300      	str	r3, [sp, #0]
 800f31a:	f44f 3316 	mov.w	r3, #153600	; 0x25800
 800f31e:	4a87      	ldr	r2, [pc, #540]	; (800f53c <InitTaskRun+0x254>)
 800f320:	4987      	ldr	r1, [pc, #540]	; (800f540 <InitTaskRun+0x258>)
 800f322:	4888      	ldr	r0, [pc, #544]	; (800f544 <InitTaskRun+0x25c>)
 800f324:	f003 fb18 	bl	8012958 <_txe_byte_pool_create>
 800f328:	4603      	mov	r3, r0
 800f32a:	2b00      	cmp	r3, #0
 800f32c:	d001      	beq.n	800f332 <InitTaskRun+0x4a>
    // if the memory pool allocation fails then the execution is blocked
    sys_error_handler();
 800f32e:	f7ff fd13 	bl	800ed58 <sys_error_handler>
  }

  CHAR *pcMemory = NULL;
 800f332:	2300      	movs	r3, #0
 800f334:	647b      	str	r3, [r7, #68]	; 0x44
  // Create the queue for the system messages.
  if (TX_SUCCESS != tx_byte_allocate(&s_xTheSystem.m_xSysMemPool, (VOID **)&pcMemory, INIT_TASK_CFG_QUEUE_ITEM_SIZE * INIT_TASK_CFG_QUEUE_LENGTH, TX_NO_WAIT)) {
 800f336:	f107 0144 	add.w	r1, r7, #68	; 0x44
 800f33a:	2300      	movs	r3, #0
 800f33c:	2240      	movs	r2, #64	; 0x40
 800f33e:	4881      	ldr	r0, [pc, #516]	; (800f544 <InitTaskRun+0x25c>)
 800f340:	f003 fa8a 	bl	8012858 <_txe_byte_allocate>
 800f344:	4603      	mov	r3, r0
 800f346:	2b00      	cmp	r3, #0
 800f348:	d001      	beq.n	800f34e <InitTaskRun+0x66>
    sys_error_handler();
 800f34a:	f7ff fd05 	bl	800ed58 <sys_error_handler>
  }
  tx_queue_create(&s_xTheSystem.m_xSysQueue, "SYS_Q", INIT_TASK_CFG_QUEUE_ITEM_SIZE / sizeof(uint32_t), pcMemory, INIT_TASK_CFG_QUEUE_ITEM_SIZE * INIT_TASK_CFG_QUEUE_LENGTH);
 800f34e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f350:	2238      	movs	r2, #56	; 0x38
 800f352:	9201      	str	r2, [sp, #4]
 800f354:	2240      	movs	r2, #64	; 0x40
 800f356:	9200      	str	r2, [sp, #0]
 800f358:	2201      	movs	r2, #1
 800f35a:	497b      	ldr	r1, [pc, #492]	; (800f548 <InitTaskRun+0x260>)
 800f35c:	487b      	ldr	r0, [pc, #492]	; (800f54c <InitTaskRun+0x264>)
 800f35e:	f003 fc15 	bl	8012b8c <_txe_queue_create>

  /* Check if the system has resumed from WWDG reset*/
  if (__HAL_RCC_GET_FLAG(RCC_FLAG_WWDGRST) != RESET) {
 800f362:	4b7b      	ldr	r3, [pc, #492]	; (800f550 <InitTaskRun+0x268>)
 800f364:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800f368:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800f36c:	2b00      	cmp	r3, #0
 800f36e:	d00e      	beq.n	800f38e <InitTaskRun+0xa6>
    __NOP();
 800f370:	bf00      	nop

    SYS_DEBUGF(SYS_DBG_LEVEL_WARNING, ("INIT: start after WWDG reset!\r\n"));
 800f372:	4b6d      	ldr	r3, [pc, #436]	; (800f528 <InitTaskRun+0x240>)
 800f374:	781b      	ldrb	r3, [r3, #0]
 800f376:	2b05      	cmp	r3, #5
 800f378:	d809      	bhi.n	800f38e <InitTaskRun+0xa6>
 800f37a:	4b6c      	ldr	r3, [pc, #432]	; (800f52c <InitTaskRun+0x244>)
 800f37c:	681b      	ldr	r3, [r3, #0]
 800f37e:	4798      	blx	r3
 800f380:	4b6b      	ldr	r3, [pc, #428]	; (800f530 <InitTaskRun+0x248>)
 800f382:	681b      	ldr	r3, [r3, #0]
 800f384:	4873      	ldr	r0, [pc, #460]	; (800f554 <InitTaskRun+0x26c>)
 800f386:	4798      	blx	r3
 800f388:	4b6b      	ldr	r3, [pc, #428]	; (800f538 <InitTaskRun+0x250>)
 800f38a:	681b      	ldr	r3, [r3, #0]
 800f38c:	4798      	blx	r3
  }
  /* Check if the system has resumed from the Option Byte loading occurred*/
  if (__HAL_RCC_GET_FLAG(RCC_FLAG_OBLRST) != RESET) {
 800f38e:	4b70      	ldr	r3, [pc, #448]	; (800f550 <InitTaskRun+0x268>)
 800f390:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800f394:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f398:	2b00      	cmp	r3, #0
 800f39a:	d011      	beq.n	800f3c0 <InitTaskRun+0xd8>
    HAL_FLASH_OB_Lock();
 800f39c:	f7f4 ff6a 	bl	8004274 <HAL_FLASH_OB_Lock>
    HAL_FLASH_Lock();
 800f3a0:	f7f4 ff4e 	bl	8004240 <HAL_FLASH_Lock>

    SYS_DEBUGF(SYS_DBG_LEVEL_WARNING, ("INIT: start after OB reset!\r\n"));
 800f3a4:	4b60      	ldr	r3, [pc, #384]	; (800f528 <InitTaskRun+0x240>)
 800f3a6:	781b      	ldrb	r3, [r3, #0]
 800f3a8:	2b05      	cmp	r3, #5
 800f3aa:	d809      	bhi.n	800f3c0 <InitTaskRun+0xd8>
 800f3ac:	4b5f      	ldr	r3, [pc, #380]	; (800f52c <InitTaskRun+0x244>)
 800f3ae:	681b      	ldr	r3, [r3, #0]
 800f3b0:	4798      	blx	r3
 800f3b2:	4b5f      	ldr	r3, [pc, #380]	; (800f530 <InitTaskRun+0x248>)
 800f3b4:	681b      	ldr	r3, [r3, #0]
 800f3b6:	4868      	ldr	r0, [pc, #416]	; (800f558 <InitTaskRun+0x270>)
 800f3b8:	4798      	blx	r3
 800f3ba:	4b5f      	ldr	r3, [pc, #380]	; (800f538 <InitTaskRun+0x250>)
 800f3bc:	681b      	ldr	r3, [r3, #0]
 800f3be:	4798      	blx	r3
  }

  /* check the reset flags*/
  SYS_DEBUGF(SYS_DBG_LEVEL_VERBOSE, ("INIT: reset flags: 0x%x\r\n", READ_BIT(RCC->CSR, 0xFF000000U)));
 800f3c0:	4b59      	ldr	r3, [pc, #356]	; (800f528 <InitTaskRun+0x240>)
 800f3c2:	781b      	ldrb	r3, [r3, #0]
 800f3c4:	2b01      	cmp	r3, #1
 800f3c6:	d80f      	bhi.n	800f3e8 <InitTaskRun+0x100>
 800f3c8:	4b58      	ldr	r3, [pc, #352]	; (800f52c <InitTaskRun+0x244>)
 800f3ca:	681b      	ldr	r3, [r3, #0]
 800f3cc:	4798      	blx	r3
 800f3ce:	4b58      	ldr	r3, [pc, #352]	; (800f530 <InitTaskRun+0x248>)
 800f3d0:	681b      	ldr	r3, [r3, #0]
 800f3d2:	4a5f      	ldr	r2, [pc, #380]	; (800f550 <InitTaskRun+0x268>)
 800f3d4:	f8d2 20f4 	ldr.w	r2, [r2, #244]	; 0xf4
 800f3d8:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800f3dc:	4611      	mov	r1, r2
 800f3de:	485f      	ldr	r0, [pc, #380]	; (800f55c <InitTaskRun+0x274>)
 800f3e0:	4798      	blx	r3
 800f3e2:	4b55      	ldr	r3, [pc, #340]	; (800f538 <InitTaskRun+0x250>)
 800f3e4:	681b      	ldr	r3, [r3, #0]
 800f3e6:	4798      	blx	r3

  /* Clear reset flags in any case*/
  __HAL_RCC_CLEAR_RESET_FLAGS();
 800f3e8:	4b59      	ldr	r3, [pc, #356]	; (800f550 <InitTaskRun+0x268>)
 800f3ea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800f3ee:	4a58      	ldr	r2, [pc, #352]	; (800f550 <InitTaskRun+0x268>)
 800f3f0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800f3f4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4

  /* Get the default application error manager delegate*/
  s_xTheSystem.m_pxAppErrorDelegate = SysGetErrorDelegate();
 800f3f8:	f7ff ff6f 	bl	800f2da <SysGetErrorDelegate>
 800f3fc:	4603      	mov	r3, r0
 800f3fe:	4a58      	ldr	r2, [pc, #352]	; (800f560 <InitTaskRun+0x278>)
 800f400:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  /* initialize the application error manager delegate*/
  xRes = IAEDInit(s_xTheSystem.m_pxAppErrorDelegate, NULL);
 800f404:	4b56      	ldr	r3, [pc, #344]	; (800f560 <InitTaskRun+0x278>)
 800f406:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800f40a:	2100      	movs	r1, #0
 800f40c:	4618      	mov	r0, r3
 800f40e:	f7ff fdc9 	bl	800efa4 <IAEDInit>
 800f412:	4603      	mov	r3, r0
 800f414:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  if (SYS_IS_ERROR_CODE(xRes)) {
 800f418:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800f41c:	2b00      	cmp	r3, #0
 800f41e:	d001      	beq.n	800f424 <InitTaskRun+0x13c>
    sys_error_handler();
 800f420:	f7ff fc9a 	bl	800ed58 <sys_error_handler>
  }

  /* Get the default Power Mode Helper object*/
  s_xTheSystem.m_pxAppPowerModeHelper = SysGetPowerModeHelper();
 800f424:	f004 fa10 	bl	8013848 <SysGetPowerModeHelper>
 800f428:	4603      	mov	r3, r0
 800f42a:	4a4d      	ldr	r2, [pc, #308]	; (800f560 <InitTaskRun+0x278>)
 800f42c:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
  /* Initialize the Power Mode Helper object*/
  xRes = IapmhInit(s_xTheSystem.m_pxAppPowerModeHelper);
 800f430:	4b4b      	ldr	r3, [pc, #300]	; (800f560 <InitTaskRun+0x278>)
 800f432:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800f436:	4618      	mov	r0, r3
 800f438:	f7ff fe11 	bl	800f05e <IapmhInit>
 800f43c:	4603      	mov	r3, r0
 800f43e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  if (SYS_IS_ERROR_CODE(xRes)) {
 800f442:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800f446:	2b00      	cmp	r3, #0
 800f448:	d001      	beq.n	800f44e <InitTaskRun+0x166>
    sys_error_handler();
 800f44a:	f7ff fc85 	bl	800ed58 <sys_error_handler>
  }

  /* Allocate the global application context*/
  ApplicationContext xContext;
  /* Initialize the context*/
  xRes = ACInit(&xContext);
 800f44e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800f452:	4618      	mov	r0, r3
 800f454:	f7ff fb26 	bl	800eaa4 <ACInit>
 800f458:	4603      	mov	r3, r0
 800f45a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

  UNUSED(xRes); /* at the moment ACInit() return always SYS_NO_ERROR_CODE */

  xRes = SysLoadApplicationContext(&xContext);
 800f45e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800f462:	4618      	mov	r0, r3
 800f464:	f004 f944 	bl	80136f0 <SysLoadApplicationContext>
 800f468:	4603      	mov	r3, r0
 800f46a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  if (xRes != SYS_NO_ERROR_CODE) {
 800f46e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800f472:	2b00      	cmp	r3, #0
 800f474:	d00f      	beq.n	800f496 <InitTaskRun+0x1ae>
    /* it seems that there is no application to run!!!*/
    SYS_DEBUGF(SYS_DBG_LEVEL_WARNING, ("INIT: no application tasks loaded!\r\n"));
 800f476:	4b2c      	ldr	r3, [pc, #176]	; (800f528 <InitTaskRun+0x240>)
 800f478:	781b      	ldrb	r3, [r3, #0]
 800f47a:	2b05      	cmp	r3, #5
 800f47c:	d809      	bhi.n	800f492 <InitTaskRun+0x1aa>
 800f47e:	4b2b      	ldr	r3, [pc, #172]	; (800f52c <InitTaskRun+0x244>)
 800f480:	681b      	ldr	r3, [r3, #0]
 800f482:	4798      	blx	r3
 800f484:	4b2a      	ldr	r3, [pc, #168]	; (800f530 <InitTaskRun+0x248>)
 800f486:	681b      	ldr	r3, [r3, #0]
 800f488:	4836      	ldr	r0, [pc, #216]	; (800f564 <InitTaskRun+0x27c>)
 800f48a:	4798      	blx	r3
 800f48c:	4b2a      	ldr	r3, [pc, #168]	; (800f538 <InitTaskRun+0x250>)
 800f48e:	681b      	ldr	r3, [r3, #0]
 800f490:	4798      	blx	r3
    sys_error_handler();
 800f492:	f7ff fc61 	bl	800ed58 <sys_error_handler>
  }

  SYS_DEBUGF(SYS_DBG_LEVEL_VERBOSE, ("INIT: added %i managed tasks.\r\n", ACGetTaskCount(&xContext)));
 800f496:	4b24      	ldr	r3, [pc, #144]	; (800f528 <InitTaskRun+0x240>)
 800f498:	781b      	ldrb	r3, [r3, #0]
 800f49a:	2b01      	cmp	r3, #1
 800f49c:	d810      	bhi.n	800f4c0 <InitTaskRun+0x1d8>
 800f49e:	4b23      	ldr	r3, [pc, #140]	; (800f52c <InitTaskRun+0x244>)
 800f4a0:	681b      	ldr	r3, [r3, #0]
 800f4a2:	4798      	blx	r3
 800f4a4:	4b22      	ldr	r3, [pc, #136]	; (800f530 <InitTaskRun+0x248>)
 800f4a6:	681c      	ldr	r4, [r3, #0]
 800f4a8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800f4ac:	4618      	mov	r0, r3
 800f4ae:	f7ff fd35 	bl	800ef1c <ACGetTaskCount>
 800f4b2:	4603      	mov	r3, r0
 800f4b4:	4619      	mov	r1, r3
 800f4b6:	482c      	ldr	r0, [pc, #176]	; (800f568 <InitTaskRun+0x280>)
 800f4b8:	47a0      	blx	r4
 800f4ba:	4b1f      	ldr	r3, [pc, #124]	; (800f538 <InitTaskRun+0x250>)
 800f4bc:	681b      	ldr	r3, [r3, #0]
 800f4be:	4798      	blx	r3

  /* Initialize the hardware resource for all tasks*/
  SYS_DEBUGF(SYS_DBG_LEVEL_VERBOSE, ("INIT: task hardware initialization.\r\n"));
 800f4c0:	4b19      	ldr	r3, [pc, #100]	; (800f528 <InitTaskRun+0x240>)
 800f4c2:	781b      	ldrb	r3, [r3, #0]
 800f4c4:	2b01      	cmp	r3, #1
 800f4c6:	d809      	bhi.n	800f4dc <InitTaskRun+0x1f4>
 800f4c8:	4b18      	ldr	r3, [pc, #96]	; (800f52c <InitTaskRun+0x244>)
 800f4ca:	681b      	ldr	r3, [r3, #0]
 800f4cc:	4798      	blx	r3
 800f4ce:	4b18      	ldr	r3, [pc, #96]	; (800f530 <InitTaskRun+0x248>)
 800f4d0:	681b      	ldr	r3, [r3, #0]
 800f4d2:	4826      	ldr	r0, [pc, #152]	; (800f56c <InitTaskRun+0x284>)
 800f4d4:	4798      	blx	r3
 800f4d6:	4b18      	ldr	r3, [pc, #96]	; (800f538 <InitTaskRun+0x250>)
 800f4d8:	681b      	ldr	r3, [r3, #0]
 800f4da:	4798      	blx	r3

  AManagedTask *pxTask = ACGetFirstTask(&xContext);
 800f4dc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800f4e0:	4618      	mov	r0, r3
 800f4e2:	f7ff fd2f 	bl	800ef44 <ACGetFirstTask>
 800f4e6:	64f8      	str	r0, [r7, #76]	; 0x4c
  while (pxTask != NULL && !SYS_IS_ERROR_CODE(xRes)) {
 800f4e8:	e05b      	b.n	800f5a2 <InitTaskRun+0x2ba>
    xRes = AMTHardwareInit(pxTask, NULL);
 800f4ea:	2100      	movs	r1, #0
 800f4ec:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800f4ee:	f7ff fc3b 	bl	800ed68 <AMTHardwareInit>
 800f4f2:	4603      	mov	r3, r0
 800f4f4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
    if (SYS_IS_ERROR_CODE(xRes)) {
 800f4f8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800f4fc:	2b00      	cmp	r3, #0
 800f4fe:	d03b      	beq.n	800f578 <InitTaskRun+0x290>
       SYS_SET_SERVICE_LEVEL_ERROR_CODE(SYS_INIT_TASK_FAILURE_ERROR_CODE);
 800f500:	4b1b      	ldr	r3, [pc, #108]	; (800f570 <InitTaskRun+0x288>)
 800f502:	f240 3222 	movw	r2, #802	; 0x322
 800f506:	805a      	strh	r2, [r3, #2]
       SYS_DEBUGF(SYS_DBG_LEVEL_SEVERE, ("\r\nINIT: system failure.\r\n"));
 800f508:	4b07      	ldr	r3, [pc, #28]	; (800f528 <InitTaskRun+0x240>)
 800f50a:	781b      	ldrb	r3, [r3, #0]
 800f50c:	2b06      	cmp	r3, #6
 800f50e:	d848      	bhi.n	800f5a2 <InitTaskRun+0x2ba>
 800f510:	4b06      	ldr	r3, [pc, #24]	; (800f52c <InitTaskRun+0x244>)
 800f512:	681b      	ldr	r3, [r3, #0]
 800f514:	4798      	blx	r3
 800f516:	4b06      	ldr	r3, [pc, #24]	; (800f530 <InitTaskRun+0x248>)
 800f518:	681b      	ldr	r3, [r3, #0]
 800f51a:	4816      	ldr	r0, [pc, #88]	; (800f574 <InitTaskRun+0x28c>)
 800f51c:	4798      	blx	r3
 800f51e:	4b06      	ldr	r3, [pc, #24]	; (800f538 <InitTaskRun+0x250>)
 800f520:	681b      	ldr	r3, [r3, #0]
 800f522:	4798      	blx	r3
 800f524:	e03d      	b.n	800f5a2 <InitTaskRun+0x2ba>
 800f526:	bf00      	nop
 800f528:	2000002c 	.word	0x2000002c
 800f52c:	20000030 	.word	0x20000030
 800f530:	20000038 	.word	0x20000038
 800f534:	080262d8 	.word	0x080262d8
 800f538:	20000034 	.word	0x20000034
 800f53c:	2000082c 	.word	0x2000082c
 800f540:	080262f0 	.word	0x080262f0
 800f544:	200007f8 	.word	0x200007f8
 800f548:	08026300 	.word	0x08026300
 800f54c:	200007b4 	.word	0x200007b4
 800f550:	46020c00 	.word	0x46020c00
 800f554:	08026308 	.word	0x08026308
 800f558:	08026328 	.word	0x08026328
 800f55c:	08026348 	.word	0x08026348
 800f560:	20000704 	.word	0x20000704
 800f564:	08026364 	.word	0x08026364
 800f568:	0802638c 	.word	0x0802638c
 800f56c:	080263ac 	.word	0x080263ac
 800f570:	20000700 	.word	0x20000700
 800f574:	080263d4 	.word	0x080263d4
    }
    else {
      pxTask = ACGetNextTask(&xContext, pxTask);
 800f578:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800f57c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800f57e:	4618      	mov	r0, r3
 800f580:	f7ff fcf4 	bl	800ef6c <ACGetNextTask>
 800f584:	64f8      	str	r0, [r7, #76]	; 0x4c

      SYS_DEBUGF(SYS_DBG_LEVEL_VERBOSE, ("...\r\n"));
 800f586:	4b89      	ldr	r3, [pc, #548]	; (800f7ac <InitTaskRun+0x4c4>)
 800f588:	781b      	ldrb	r3, [r3, #0]
 800f58a:	2b01      	cmp	r3, #1
 800f58c:	d809      	bhi.n	800f5a2 <InitTaskRun+0x2ba>
 800f58e:	4b88      	ldr	r3, [pc, #544]	; (800f7b0 <InitTaskRun+0x4c8>)
 800f590:	681b      	ldr	r3, [r3, #0]
 800f592:	4798      	blx	r3
 800f594:	4b87      	ldr	r3, [pc, #540]	; (800f7b4 <InitTaskRun+0x4cc>)
 800f596:	681b      	ldr	r3, [r3, #0]
 800f598:	4887      	ldr	r0, [pc, #540]	; (800f7b8 <InitTaskRun+0x4d0>)
 800f59a:	4798      	blx	r3
 800f59c:	4b87      	ldr	r3, [pc, #540]	; (800f7bc <InitTaskRun+0x4d4>)
 800f59e:	681b      	ldr	r3, [r3, #0]
 800f5a0:	4798      	blx	r3
  while (pxTask != NULL && !SYS_IS_ERROR_CODE(xRes)) {
 800f5a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f5a4:	2b00      	cmp	r3, #0
 800f5a6:	d003      	beq.n	800f5b0 <InitTaskRun+0x2c8>
 800f5a8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800f5ac:	2b00      	cmp	r3, #0
 800f5ae:	d09c      	beq.n	800f4ea <InitTaskRun+0x202>
    }
  }

  SYS_DEBUGF(SYS_DBG_LEVEL_VERBOSE, ("DONE.\r\n"));
 800f5b0:	4b7e      	ldr	r3, [pc, #504]	; (800f7ac <InitTaskRun+0x4c4>)
 800f5b2:	781b      	ldrb	r3, [r3, #0]
 800f5b4:	2b01      	cmp	r3, #1
 800f5b6:	d809      	bhi.n	800f5cc <InitTaskRun+0x2e4>
 800f5b8:	4b7d      	ldr	r3, [pc, #500]	; (800f7b0 <InitTaskRun+0x4c8>)
 800f5ba:	681b      	ldr	r3, [r3, #0]
 800f5bc:	4798      	blx	r3
 800f5be:	4b7d      	ldr	r3, [pc, #500]	; (800f7b4 <InitTaskRun+0x4cc>)
 800f5c0:	681b      	ldr	r3, [r3, #0]
 800f5c2:	487f      	ldr	r0, [pc, #508]	; (800f7c0 <InitTaskRun+0x4d8>)
 800f5c4:	4798      	blx	r3
 800f5c6:	4b7d      	ldr	r3, [pc, #500]	; (800f7bc <InitTaskRun+0x4d4>)
 800f5c8:	681b      	ldr	r3, [r3, #0]
 800f5ca:	4798      	blx	r3
  UINT nPreemptThreshold;
  ULONG nTimeSlice;
  ULONG nAutoStart;
  ULONG nParams;

  pxTask = ACGetFirstTask(&xContext);
 800f5cc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800f5d0:	4618      	mov	r0, r3
 800f5d2:	f7ff fcb7 	bl	800ef44 <ACGetFirstTask>
 800f5d6:	64f8      	str	r0, [r7, #76]	; 0x4c
  while ((pxTask != NULL) && !SYS_IS_ERROR_CODE(xRes)) {
 800f5d8:	e089      	b.n	800f6ee <InitTaskRun+0x406>
    xRes = AMTOnCreateTask(pxTask, &pvTaskCode, &pcName, &pvStackStart, &nStackSize, &nPriority, &nPreemptThreshold, &nTimeSlice, &nAutoStart, &nParams);
 800f5da:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800f5de:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800f5e2:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800f5e6:	f107 0318 	add.w	r3, r7, #24
 800f5ea:	9305      	str	r3, [sp, #20]
 800f5ec:	f107 031c 	add.w	r3, r7, #28
 800f5f0:	9304      	str	r3, [sp, #16]
 800f5f2:	f107 0320 	add.w	r3, r7, #32
 800f5f6:	9303      	str	r3, [sp, #12]
 800f5f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f5fc:	9302      	str	r3, [sp, #8]
 800f5fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f602:	9301      	str	r3, [sp, #4]
 800f604:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f608:	9300      	str	r3, [sp, #0]
 800f60a:	4603      	mov	r3, r0
 800f60c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800f60e:	f7ff fbbb 	bl	800ed88 <AMTOnCreateTask>
 800f612:	4603      	mov	r3, r0
 800f614:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
    if (SYS_IS_ERROR_CODE(xRes)) {
 800f618:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800f61c:	2b00      	cmp	r3, #0
 800f61e:	d012      	beq.n	800f646 <InitTaskRun+0x35e>
      SYS_SET_SERVICE_LEVEL_ERROR_CODE(SYS_INIT_TASK_FAILURE_ERROR_CODE);
 800f620:	4b68      	ldr	r3, [pc, #416]	; (800f7c4 <InitTaskRun+0x4dc>)
 800f622:	f240 3222 	movw	r2, #802	; 0x322
 800f626:	805a      	strh	r2, [r3, #2]
      SYS_DEBUGF(SYS_DBG_LEVEL_SEVERE, ("INIT: system failure.\r\n"));
 800f628:	4b60      	ldr	r3, [pc, #384]	; (800f7ac <InitTaskRun+0x4c4>)
 800f62a:	781b      	ldrb	r3, [r3, #0]
 800f62c:	2b06      	cmp	r3, #6
 800f62e:	d857      	bhi.n	800f6e0 <InitTaskRun+0x3f8>
 800f630:	4b5f      	ldr	r3, [pc, #380]	; (800f7b0 <InitTaskRun+0x4c8>)
 800f632:	681b      	ldr	r3, [r3, #0]
 800f634:	4798      	blx	r3
 800f636:	4b5f      	ldr	r3, [pc, #380]	; (800f7b4 <InitTaskRun+0x4cc>)
 800f638:	681b      	ldr	r3, [r3, #0]
 800f63a:	4863      	ldr	r0, [pc, #396]	; (800f7c8 <InitTaskRun+0x4e0>)
 800f63c:	4798      	blx	r3
 800f63e:	4b5f      	ldr	r3, [pc, #380]	; (800f7bc <InitTaskRun+0x4d4>)
 800f640:	681b      	ldr	r3, [r3, #0]
 800f642:	4798      	blx	r3
 800f644:	e04c      	b.n	800f6e0 <InitTaskRun+0x3f8>
    } else {
      if(pvStackStart == NULL) {
 800f646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f648:	2b00      	cmp	r3, #0
 800f64a:	d107      	bne.n	800f65c <InitTaskRun+0x374>
        // allocate the task stack in the system memory pool
        nRtosRes = tx_byte_allocate(&s_xTheSystem.m_xSysMemPool, &pvStackStart, nStackSize, TX_NO_WAIT);
 800f64c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f64e:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800f652:	2300      	movs	r3, #0
 800f654:	485d      	ldr	r0, [pc, #372]	; (800f7cc <InitTaskRun+0x4e4>)
 800f656:	f003 f8ff 	bl	8012858 <_txe_byte_allocate>
 800f65a:	6538      	str	r0, [r7, #80]	; 0x50
      }
      if (nRtosRes == TX_SUCCESS) {
 800f65c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f65e:	2b00      	cmp	r3, #0
 800f660:	d127      	bne.n	800f6b2 <InitTaskRun+0x3ca>
        if (nAutoStart == TX_AUTO_START) {
 800f662:	69fb      	ldr	r3, [r7, #28]
 800f664:	2b01      	cmp	r3, #1
 800f666:	d106      	bne.n	800f676 <InitTaskRun+0x38e>
          pxTask->m_xStatus.nAutoStart = 1;
 800f668:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f66a:	f892 30c0 	ldrb.w	r3, [r2, #192]	; 0xc0
 800f66e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f672:	f882 30c0 	strb.w	r3, [r2, #192]	; 0xc0
        }
        nRtosRes = tx_thread_create(&pxTask->m_xTaskHandle, pcName, pvTaskCode, nParams, pvStackStart, nStackSize,
 800f676:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f678:	1d1d      	adds	r5, r3, #4
 800f67a:	6b7e      	ldr	r6, [r7, #52]	; 0x34
 800f67c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f67e:	60bb      	str	r3, [r7, #8]
 800f680:	69b9      	ldr	r1, [r7, #24]
 800f682:	6079      	str	r1, [r7, #4]
 800f684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f686:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f688:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f68a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f68c:	6038      	str	r0, [r7, #0]
 800f68e:	6a3c      	ldr	r4, [r7, #32]
 800f690:	20b0      	movs	r0, #176	; 0xb0
 800f692:	9006      	str	r0, [sp, #24]
 800f694:	2000      	movs	r0, #0
 800f696:	9005      	str	r0, [sp, #20]
 800f698:	9404      	str	r4, [sp, #16]
 800f69a:	6838      	ldr	r0, [r7, #0]
 800f69c:	9003      	str	r0, [sp, #12]
 800f69e:	9102      	str	r1, [sp, #8]
 800f6a0:	9201      	str	r2, [sp, #4]
 800f6a2:	9300      	str	r3, [sp, #0]
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	68ba      	ldr	r2, [r7, #8]
 800f6a8:	4631      	mov	r1, r6
 800f6aa:	4628      	mov	r0, r5
 800f6ac:	f003 fd82 	bl	80131b4 <_txe_thread_create>
 800f6b0:	6538      	str	r0, [r7, #80]	; 0x50
            nPriority, nPreemptThreshold, nTimeSlice, TX_DONT_START);
      }
      if(nRtosRes != TX_SUCCESS) {
 800f6b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f6b4:	2b00      	cmp	r3, #0
 800f6b6:	d013      	beq.n	800f6e0 <InitTaskRun+0x3f8>
        SYS_SET_SERVICE_LEVEL_ERROR_CODE(SYS_INIT_TASK_FAILURE_ERROR_CODE);
 800f6b8:	4b42      	ldr	r3, [pc, #264]	; (800f7c4 <InitTaskRun+0x4dc>)
 800f6ba:	f240 3222 	movw	r2, #802	; 0x322
 800f6be:	805a      	strh	r2, [r3, #2]
        SYS_DEBUGF(SYS_DBG_LEVEL_SEVERE, ("INIT: unable to create task %s.\r\n", pcName));
 800f6c0:	4b3a      	ldr	r3, [pc, #232]	; (800f7ac <InitTaskRun+0x4c4>)
 800f6c2:	781b      	ldrb	r3, [r3, #0]
 800f6c4:	2b06      	cmp	r3, #6
 800f6c6:	d80b      	bhi.n	800f6e0 <InitTaskRun+0x3f8>
 800f6c8:	4b39      	ldr	r3, [pc, #228]	; (800f7b0 <InitTaskRun+0x4c8>)
 800f6ca:	681b      	ldr	r3, [r3, #0]
 800f6cc:	4798      	blx	r3
 800f6ce:	4b39      	ldr	r3, [pc, #228]	; (800f7b4 <InitTaskRun+0x4cc>)
 800f6d0:	681b      	ldr	r3, [r3, #0]
 800f6d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f6d4:	4611      	mov	r1, r2
 800f6d6:	483e      	ldr	r0, [pc, #248]	; (800f7d0 <InitTaskRun+0x4e8>)
 800f6d8:	4798      	blx	r3
 800f6da:	4b38      	ldr	r3, [pc, #224]	; (800f7bc <InitTaskRun+0x4d4>)
 800f6dc:	681b      	ldr	r3, [r3, #0]
 800f6de:	4798      	blx	r3
      }
    }
    pxTask = ACGetNextTask(&xContext, pxTask);
 800f6e0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800f6e4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800f6e6:	4618      	mov	r0, r3
 800f6e8:	f7ff fc40 	bl	800ef6c <ACGetNextTask>
 800f6ec:	64f8      	str	r0, [r7, #76]	; 0x4c
  while ((pxTask != NULL) && !SYS_IS_ERROR_CODE(xRes)) {
 800f6ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f6f0:	2b00      	cmp	r3, #0
 800f6f2:	d004      	beq.n	800f6fe <InitTaskRun+0x416>
 800f6f4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800f6f8:	2b00      	cmp	r3, #0
 800f6fa:	f43f af6e 	beq.w	800f5da <InitTaskRun+0x2f2>
  }

  SysOnStartApplication(&xContext);
 800f6fe:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800f702:	4618      	mov	r0, r3
 800f704:	f004 f868 	bl	80137d8 <SysOnStartApplication>
  IAEDOnStartApplication(s_xTheSystem.m_pxAppErrorDelegate, &xContext);
 800f708:	4b32      	ldr	r3, [pc, #200]	; (800f7d4 <InitTaskRun+0x4ec>)
 800f70a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800f70e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800f712:	4611      	mov	r1, r2
 800f714:	4618      	mov	r0, r3
 800f716:	f7ff fc55 	bl	800efc4 <IAEDOnStartApplication>

  SYS_DEBUGF(SYS_DBG_LEVEL_SL, ("INIT: system initialized.\r\n"));
 800f71a:	4b24      	ldr	r3, [pc, #144]	; (800f7ac <InitTaskRun+0x4c4>)
 800f71c:	781b      	ldrb	r3, [r3, #0]
 800f71e:	2b03      	cmp	r3, #3
 800f720:	d809      	bhi.n	800f736 <InitTaskRun+0x44e>
 800f722:	4b23      	ldr	r3, [pc, #140]	; (800f7b0 <InitTaskRun+0x4c8>)
 800f724:	681b      	ldr	r3, [r3, #0]
 800f726:	4798      	blx	r3
 800f728:	4b22      	ldr	r3, [pc, #136]	; (800f7b4 <InitTaskRun+0x4cc>)
 800f72a:	681b      	ldr	r3, [r3, #0]
 800f72c:	482a      	ldr	r0, [pc, #168]	; (800f7d8 <InitTaskRun+0x4f0>)
 800f72e:	4798      	blx	r3
 800f730:	4b22      	ldr	r3, [pc, #136]	; (800f7bc <InitTaskRun+0x4d4>)
 800f732:	681b      	ldr	r3, [r3, #0]
 800f734:	4798      	blx	r3

#if defined(DEBUG) || defined(SYS_DEBUG)
  if (SYS_DBG_LEVEL_SL >= g_sys_dbg_min_level) {
 800f736:	4b1d      	ldr	r3, [pc, #116]	; (800f7ac <InitTaskRun+0x4c4>)
 800f738:	781b      	ldrb	r3, [r3, #0]
 800f73a:	2b03      	cmp	r3, #3
 800f73c:	d82f      	bhi.n	800f79e <InitTaskRun+0x4b6>
    ULONG nFreeHeapSize = 0;
 800f73e:	2300      	movs	r3, #0
 800f740:	613b      	str	r3, [r7, #16]
    tx_byte_pool_info_get(&s_xTheSystem.m_xSysMemPool, TX_NULL, &nFreeHeapSize, TX_NULL, TX_NULL, TX_NULL, TX_NULL);
 800f742:	f107 0210 	add.w	r2, r7, #16
 800f746:	2300      	movs	r3, #0
 800f748:	9302      	str	r3, [sp, #8]
 800f74a:	2300      	movs	r3, #0
 800f74c:	9301      	str	r3, [sp, #4]
 800f74e:	2300      	movs	r3, #0
 800f750:	9300      	str	r3, [sp, #0]
 800f752:	2300      	movs	r3, #0
 800f754:	2100      	movs	r1, #0
 800f756:	481d      	ldr	r0, [pc, #116]	; (800f7cc <InitTaskRun+0x4e4>)
 800f758:	f003 f998 	bl	8012a8c <_txe_byte_pool_info_get>
    SYS_DEBUGF(SYS_DBG_LEVEL_SL, ("INIT: free heap = %i.\r\n", nFreeHeapSize));
 800f75c:	4b13      	ldr	r3, [pc, #76]	; (800f7ac <InitTaskRun+0x4c4>)
 800f75e:	781b      	ldrb	r3, [r3, #0]
 800f760:	2b03      	cmp	r3, #3
 800f762:	d80b      	bhi.n	800f77c <InitTaskRun+0x494>
 800f764:	4b12      	ldr	r3, [pc, #72]	; (800f7b0 <InitTaskRun+0x4c8>)
 800f766:	681b      	ldr	r3, [r3, #0]
 800f768:	4798      	blx	r3
 800f76a:	4b12      	ldr	r3, [pc, #72]	; (800f7b4 <InitTaskRun+0x4cc>)
 800f76c:	681b      	ldr	r3, [r3, #0]
 800f76e:	693a      	ldr	r2, [r7, #16]
 800f770:	4611      	mov	r1, r2
 800f772:	481a      	ldr	r0, [pc, #104]	; (800f7dc <InitTaskRun+0x4f4>)
 800f774:	4798      	blx	r3
 800f776:	4b11      	ldr	r3, [pc, #68]	; (800f7bc <InitTaskRun+0x4d4>)
 800f778:	681b      	ldr	r3, [r3, #0]
 800f77a:	4798      	blx	r3
    SYS_DEBUGF(SYS_DBG_LEVEL_SL, ("INIT: SystemCoreClock = %iHz.\r\n", SystemCoreClock));
 800f77c:	4b0b      	ldr	r3, [pc, #44]	; (800f7ac <InitTaskRun+0x4c4>)
 800f77e:	781b      	ldrb	r3, [r3, #0]
 800f780:	2b03      	cmp	r3, #3
 800f782:	d80c      	bhi.n	800f79e <InitTaskRun+0x4b6>
 800f784:	4b0a      	ldr	r3, [pc, #40]	; (800f7b0 <InitTaskRun+0x4c8>)
 800f786:	681b      	ldr	r3, [r3, #0]
 800f788:	4798      	blx	r3
 800f78a:	4b0a      	ldr	r3, [pc, #40]	; (800f7b4 <InitTaskRun+0x4cc>)
 800f78c:	681b      	ldr	r3, [r3, #0]
 800f78e:	4a14      	ldr	r2, [pc, #80]	; (800f7e0 <InitTaskRun+0x4f8>)
 800f790:	6812      	ldr	r2, [r2, #0]
 800f792:	4611      	mov	r1, r2
 800f794:	4813      	ldr	r0, [pc, #76]	; (800f7e4 <InitTaskRun+0x4fc>)
 800f796:	4798      	blx	r3
 800f798:	4b08      	ldr	r3, [pc, #32]	; (800f7bc <InitTaskRun+0x4d4>)
 800f79a:	681b      	ldr	r3, [r3, #0]
 800f79c:	4798      	blx	r3
  }
#endif

  /*Resume all tasks created with auto_start set to 1.*/
  pxTask = ACGetFirstTask(&xContext);
 800f79e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800f7a2:	4618      	mov	r0, r3
 800f7a4:	f7ff fbce 	bl	800ef44 <ACGetFirstTask>
 800f7a8:	64f8      	str	r0, [r7, #76]	; 0x4c
  while (pxTask != NULL && !SYS_IS_ERROR_CODE(xRes)) {
 800f7aa:	e031      	b.n	800f810 <InitTaskRun+0x528>
 800f7ac:	2000002c 	.word	0x2000002c
 800f7b0:	20000030 	.word	0x20000030
 800f7b4:	20000038 	.word	0x20000038
 800f7b8:	080263f0 	.word	0x080263f0
 800f7bc:	20000034 	.word	0x20000034
 800f7c0:	080263f8 	.word	0x080263f8
 800f7c4:	20000700 	.word	0x20000700
 800f7c8:	08026400 	.word	0x08026400
 800f7cc:	200007f8 	.word	0x200007f8
 800f7d0:	08026418 	.word	0x08026418
 800f7d4:	20000704 	.word	0x20000704
 800f7d8:	0802643c 	.word	0x0802643c
 800f7dc:	08026458 	.word	0x08026458
 800f7e0:	20000044 	.word	0x20000044
 800f7e4:	08026470 	.word	0x08026470
    if (pxTask->m_xStatus.nAutoStart) {
 800f7e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f7ea:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 800f7ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f7f2:	b2db      	uxtb	r3, r3
 800f7f4:	2b00      	cmp	r3, #0
 800f7f6:	d004      	beq.n	800f802 <InitTaskRun+0x51a>
      tx_thread_resume(&pxTask->m_xTaskHandle);
 800f7f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f7fa:	3304      	adds	r3, #4
 800f7fc:	4618      	mov	r0, r3
 800f7fe:	f003 fdf3 	bl	80133e8 <_txe_thread_resume>
    }
    pxTask = ACGetNextTask(&xContext, pxTask);
 800f802:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800f806:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800f808:	4618      	mov	r0, r3
 800f80a:	f7ff fbaf 	bl	800ef6c <ACGetNextTask>
 800f80e:	64f8      	str	r0, [r7, #76]	; 0x4c
  while (pxTask != NULL && !SYS_IS_ERROR_CODE(xRes)) {
 800f810:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f812:	2b00      	cmp	r3, #0
 800f814:	d003      	beq.n	800f81e <InitTaskRun+0x536>
 800f816:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800f81a:	2b00      	cmp	r3, #0
 800f81c:	d0e4      	beq.n	800f7e8 <InitTaskRun+0x500>
  // because it is the owner of the Application Context.
  // At the moment this is an initial implementation of a system level Power Management:
  // wait for a system level power mode request
  SysEvent xEvent;
  for (;;) {
    if (TX_SUCCESS == tx_queue_receive(&s_xTheSystem.m_xSysQueue, &xEvent, TX_WAIT_FOREVER)) {
 800f81e:	f107 0314 	add.w	r3, r7, #20
 800f822:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f826:	4619      	mov	r1, r3
 800f828:	4890      	ldr	r0, [pc, #576]	; (800fa6c <InitTaskRun+0x784>)
 800f82a:	f003 fb07 	bl	8012e3c <_txe_queue_receive>
 800f82e:	4603      	mov	r3, r0
 800f830:	2b00      	cmp	r3, #0
 800f832:	d1f4      	bne.n	800f81e <InitTaskRun+0x536>
      EPowerMode eActivePowerMode = IapmhGetActivePowerMode(s_xTheSystem.m_pxAppPowerModeHelper);
 800f834:	4b8e      	ldr	r3, [pc, #568]	; (800fa70 <InitTaskRun+0x788>)
 800f836:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800f83a:	4618      	mov	r0, r3
 800f83c:	f7ff fc53 	bl	800f0e6 <IapmhGetActivePowerMode>
 800f840:	4603      	mov	r3, r0
 800f842:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
      /* check if it is a system error event*/
      if (SYS_IS_ERROR_EVENT(xEvent)) {
 800f846:	7dfb      	ldrb	r3, [r7, #23]
 800f848:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800f84c:	b2db      	uxtb	r3, r3
 800f84e:	2b00      	cmp	r3, #0
 800f850:	d02a      	beq.n	800f8a8 <InitTaskRun+0x5c0>
        IAEDProcessEvent(s_xTheSystem.m_pxAppErrorDelegate, &xContext, xEvent);
 800f852:	4b87      	ldr	r3, [pc, #540]	; (800fa70 <InitTaskRun+0x788>)
 800f854:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800f858:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800f85c:	697a      	ldr	r2, [r7, #20]
 800f85e:	4618      	mov	r0, r3
 800f860:	f7ff fbc0 	bl	800efe4 <IAEDProcessEvent>
        // check if the system is in low power mode and it was waked up by a strange IRQ.
        if (IapmhIsLowPowerMode(s_xTheSystem.m_pxAppPowerModeHelper, eActivePowerMode)) {
 800f864:	4b82      	ldr	r3, [pc, #520]	; (800fa70 <InitTaskRun+0x788>)
 800f866:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800f86a:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 800f86e:	4611      	mov	r1, r2
 800f870:	4618      	mov	r0, r3
 800f872:	f7ff fc46 	bl	800f102 <IapmhIsLowPowerMode>
 800f876:	4603      	mov	r3, r0
 800f878:	2b00      	cmp	r3, #0
 800f87a:	d0d0      	beq.n	800f81e <InitTaskRun+0x536>
          // if the system was wake up due to an error event, then wait the error is recovered before put the MCU in STOP
          if (!IAEDIsLastErrorPending(s_xTheSystem.m_pxAppErrorDelegate)) {
 800f87c:	4b7c      	ldr	r3, [pc, #496]	; (800fa70 <InitTaskRun+0x788>)
 800f87e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800f882:	4618      	mov	r0, r3
 800f884:	f7ff fbd0 	bl	800f028 <IAEDIsLastErrorPending>
 800f888:	4603      	mov	r3, r0
 800f88a:	f083 0301 	eor.w	r3, r3, #1
 800f88e:	b2db      	uxtb	r3, r3
 800f890:	2b00      	cmp	r3, #0
 800f892:	d0c4      	beq.n	800f81e <InitTaskRun+0x536>
            // then put the system again in low power mode.
            IapmhDidEnterPowerMode(s_xTheSystem.m_pxAppPowerModeHelper, eActivePowerMode);
 800f894:	4b76      	ldr	r3, [pc, #472]	; (800fa70 <InitTaskRun+0x788>)
 800f896:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800f89a:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 800f89e:	4611      	mov	r1, r2
 800f8a0:	4618      	mov	r0, r3
 800f8a2:	f7ff fc0e 	bl	800f0c2 <IapmhDidEnterPowerMode>
 800f8a6:	e7ba      	b.n	800f81e <InitTaskRun+0x536>
          }
        }
      }
      else {
        /* it is a power mode event*/
        EPowerMode ePowerMode = IapmhComputeNewPowerMode(s_xTheSystem.m_pxAppPowerModeHelper, xEvent);
 800f8a8:	4b71      	ldr	r3, [pc, #452]	; (800fa70 <InitTaskRun+0x788>)
 800f8aa:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800f8ae:	6979      	ldr	r1, [r7, #20]
 800f8b0:	4618      	mov	r0, r3
 800f8b2:	f7ff fbe2 	bl	800f07a <IapmhComputeNewPowerMode>
 800f8b6:	4603      	mov	r3, r0
 800f8b8:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
        if (ePowerMode != eActivePowerMode) {
 800f8bc:	f897 2048 	ldrb.w	r2, [r7, #72]	; 0x48
 800f8c0:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 800f8c4:	429a      	cmp	r2, r3
 800f8c6:	f000 80b9 	beq.w	800fa3c <InitTaskRun+0x754>
          IapmhCheckPowerModeTransaction(s_xTheSystem.m_pxAppPowerModeHelper, eActivePowerMode, ePowerMode);
 800f8ca:	4b69      	ldr	r3, [pc, #420]	; (800fa70 <InitTaskRun+0x788>)
 800f8cc:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800f8d0:	f897 2048 	ldrb.w	r2, [r7, #72]	; 0x48
 800f8d4:	f897 1049 	ldrb.w	r1, [r7, #73]	; 0x49
 800f8d8:	4618      	mov	r0, r3
 800f8da:	f7ff fbde 	bl	800f09a <IapmhCheckPowerModeTransaction>

          SYS_DEBUGF(SYS_DBG_LEVEL_VERBOSE, ("INIT: evt:src=%x evt:param=%x\r\n", xEvent.xEvent.nSource, xEvent.xEvent.nParam));
 800f8de:	4b65      	ldr	r3, [pc, #404]	; (800fa74 <InitTaskRun+0x78c>)
 800f8e0:	781b      	ldrb	r3, [r3, #0]
 800f8e2:	2b01      	cmp	r3, #1
 800f8e4:	d812      	bhi.n	800f90c <InitTaskRun+0x624>
 800f8e6:	4b64      	ldr	r3, [pc, #400]	; (800fa78 <InitTaskRun+0x790>)
 800f8e8:	681b      	ldr	r3, [r3, #0]
 800f8ea:	4798      	blx	r3
 800f8ec:	4b63      	ldr	r3, [pc, #396]	; (800fa7c <InitTaskRun+0x794>)
 800f8ee:	681b      	ldr	r3, [r3, #0]
 800f8f0:	7d3a      	ldrb	r2, [r7, #20]
 800f8f2:	f3c2 0202 	ubfx	r2, r2, #0, #3
 800f8f6:	b2d2      	uxtb	r2, r2
 800f8f8:	4611      	mov	r1, r2
 800f8fa:	7d3a      	ldrb	r2, [r7, #20]
 800f8fc:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 800f900:	b2d2      	uxtb	r2, r2
 800f902:	485f      	ldr	r0, [pc, #380]	; (800fa80 <InitTaskRun+0x798>)
 800f904:	4798      	blx	r3
 800f906:	4b5f      	ldr	r3, [pc, #380]	; (800fa84 <InitTaskRun+0x79c>)
 800f908:	681b      	ldr	r3, [r3, #0]
 800f90a:	4798      	blx	r3

          /* first inform the AmanagedTaskEx that a transaction in the power mode state machine
           is going to begin.*/
          pxTask = ACGetFirstTask(&xContext);
 800f90c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800f910:	4618      	mov	r0, r3
 800f912:	f7ff fb17 	bl	800ef44 <ACGetFirstTask>
 800f916:	64f8      	str	r0, [r7, #76]	; 0x4c
          for (; pxTask!=NULL; pxTask=ACGetNextTask(&xContext, pxTask)) {
 800f918:	e01f      	b.n	800f95a <InitTaskRun+0x672>
            if (INIT_IS_KIND_OF_AMTEX(pxTask)) {
 800f91a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f91c:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 800f920:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800f924:	b2db      	uxtb	r3, r3
 800f926:	2b00      	cmp	r3, #0
 800f928:	d010      	beq.n	800f94c <InitTaskRun+0x664>
              xRes = AMTExOnEnterPowerMode((AManagedTaskEx*)pxTask, eActivePowerMode, ePowerMode);
 800f92a:	f897 2048 	ldrb.w	r2, [r7, #72]	; 0x48
 800f92e:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 800f932:	4619      	mov	r1, r3
 800f934:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800f936:	f7ff faa5 	bl	800ee84 <AMTExOnEnterPowerMode>
 800f93a:	4603      	mov	r3, r0
 800f93c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
              if (SYS_IS_ERROR_CODE(xRes)) {
 800f940:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800f944:	2b00      	cmp	r3, #0
 800f946:	d001      	beq.n	800f94c <InitTaskRun+0x664>
                sys_error_handler();
 800f948:	f7ff fa06 	bl	800ed58 <sys_error_handler>
          for (; pxTask!=NULL; pxTask=ACGetNextTask(&xContext, pxTask)) {
 800f94c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800f950:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800f952:	4618      	mov	r0, r3
 800f954:	f7ff fb0a 	bl	800ef6c <ACGetNextTask>
 800f958:	64f8      	str	r0, [r7, #76]	; 0x4c
 800f95a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f95c:	2b00      	cmp	r3, #0
 800f95e:	d1dc      	bne.n	800f91a <InitTaskRun+0x632>
              }
            }
          }

          uint16_t nTaskToDoPMSwitch = ACGetTaskCount(&xContext);
 800f960:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800f964:	4618      	mov	r0, r3
 800f966:	f7ff fad9 	bl	800ef1c <ACGetTaskCount>
 800f96a:	4603      	mov	r3, r0
 800f96c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
          /* then we do the power mode transaction for the task belonging to CLASS_0*/
          nTaskToDoPMSwitch -= InitTaskDoEnterPowerModeForPMClass(&xContext, E_PM_CLASS_0, eActivePowerMode, ePowerMode);
 800f970:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800f974:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 800f978:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 800f97c:	2100      	movs	r1, #0
 800f97e:	f000 f883 	bl	800fa88 <InitTaskDoEnterPowerModeForPMClass>
 800f982:	4603      	mov	r3, r0
 800f984:	461a      	mov	r2, r3
 800f986:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800f98a:	1a9b      	subs	r3, r3, r2
 800f98c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
          if (nTaskToDoPMSwitch > 0U) {
 800f990:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800f994:	2b00      	cmp	r3, #0
 800f996:	d00f      	beq.n	800f9b8 <InitTaskRun+0x6d0>
            /* then we do the power mode transaction for the task belonging to CLASS_1*/
            nTaskToDoPMSwitch -= InitTaskDoEnterPowerModeForPMClass(&xContext, E_PM_CLASS_1, eActivePowerMode, ePowerMode);
 800f998:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800f99c:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 800f9a0:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 800f9a4:	2101      	movs	r1, #1
 800f9a6:	f000 f86f 	bl	800fa88 <InitTaskDoEnterPowerModeForPMClass>
 800f9aa:	4603      	mov	r3, r0
 800f9ac:	461a      	mov	r2, r3
 800f9ae:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800f9b2:	1a9b      	subs	r3, r3, r2
 800f9b4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
          }
          if (nTaskToDoPMSwitch > 0U) {
 800f9b8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800f9bc:	2b00      	cmp	r3, #0
 800f9be:	d00f      	beq.n	800f9e0 <InitTaskRun+0x6f8>
            /* then we do the power mode transaction for the task belonging to CLASS_2*/
            nTaskToDoPMSwitch -= InitTaskDoEnterPowerModeForPMClass(&xContext, E_PM_CLASS_2, eActivePowerMode, ePowerMode);
 800f9c0:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800f9c4:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 800f9c8:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 800f9cc:	2102      	movs	r1, #2
 800f9ce:	f000 f85b 	bl	800fa88 <InitTaskDoEnterPowerModeForPMClass>
 800f9d2:	4603      	mov	r3, r0
 800f9d4:	461a      	mov	r2, r3
 800f9d6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800f9da:	1a9b      	subs	r3, r3, r2
 800f9dc:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
          }

          /* Enter the specified power mode*/
          IapmhDidEnterPowerMode(s_xTheSystem.m_pxAppPowerModeHelper, ePowerMode);
 800f9e0:	4b23      	ldr	r3, [pc, #140]	; (800fa70 <InitTaskRun+0x788>)
 800f9e2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800f9e6:	f897 2048 	ldrb.w	r2, [r7, #72]	; 0x48
 800f9ea:	4611      	mov	r1, r2
 800f9ec:	4618      	mov	r0, r3
 800f9ee:	f7ff fb68 	bl	800f0c2 <IapmhDidEnterPowerMode>

          pxTask = ACGetFirstTask(&xContext);
 800f9f2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800f9f6:	4618      	mov	r0, r3
 800f9f8:	f7ff faa4 	bl	800ef44 <ACGetFirstTask>
 800f9fc:	64f8      	str	r0, [r7, #76]	; 0x4c
          for (; pxTask!=NULL; pxTask=ACGetNextTask(&xContext, pxTask)) {
 800f9fe:	e019      	b.n	800fa34 <InitTaskRun+0x74c>
            pxTask->m_xStatus.nPowerModeSwitchDone = 0;
 800fa00:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800fa02:	f892 30c0 	ldrb.w	r3, [r2, #192]	; 0xc0
 800fa06:	f36f 0382 	bfc	r3, #2, #1
 800fa0a:	f882 30c0 	strb.w	r3, [r2, #192]	; 0xc0
            pxTask->m_xStatus.nPowerModeSwitchPending = 0;
 800fa0e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800fa10:	f892 30c0 	ldrb.w	r3, [r2, #192]	; 0xc0
 800fa14:	f36f 0341 	bfc	r3, #1, #1
 800fa18:	f882 30c0 	strb.w	r3, [r2, #192]	; 0xc0
            tx_thread_resume(&pxTask->m_xTaskHandle);
 800fa1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fa1e:	3304      	adds	r3, #4
 800fa20:	4618      	mov	r0, r3
 800fa22:	f003 fce1 	bl	80133e8 <_txe_thread_resume>
          for (; pxTask!=NULL; pxTask=ACGetNextTask(&xContext, pxTask)) {
 800fa26:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800fa2a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800fa2c:	4618      	mov	r0, r3
 800fa2e:	f7ff fa9d 	bl	800ef6c <ACGetNextTask>
 800fa32:	64f8      	str	r0, [r7, #76]	; 0x4c
 800fa34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fa36:	2b00      	cmp	r3, #0
 800fa38:	d1e2      	bne.n	800fa00 <InitTaskRun+0x718>
 800fa3a:	e6f0      	b.n	800f81e <InitTaskRun+0x536>
          }
        }
        else {
          /* check if the system is in a low power mode and it was waked up by a strange IRQ.*/
          if (IapmhIsLowPowerMode(s_xTheSystem.m_pxAppPowerModeHelper, eActivePowerMode)) {
 800fa3c:	4b0c      	ldr	r3, [pc, #48]	; (800fa70 <InitTaskRun+0x788>)
 800fa3e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800fa42:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 800fa46:	4611      	mov	r1, r2
 800fa48:	4618      	mov	r0, r3
 800fa4a:	f7ff fb5a 	bl	800f102 <IapmhIsLowPowerMode>
 800fa4e:	4603      	mov	r3, r0
 800fa50:	2b00      	cmp	r3, #0
 800fa52:	f43f aee4 	beq.w	800f81e <InitTaskRun+0x536>
            /* then put the system again in low power mode.*/
            IapmhDidEnterPowerMode(s_xTheSystem.m_pxAppPowerModeHelper, ePowerMode);
 800fa56:	4b06      	ldr	r3, [pc, #24]	; (800fa70 <InitTaskRun+0x788>)
 800fa58:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800fa5c:	f897 2048 	ldrb.w	r2, [r7, #72]	; 0x48
 800fa60:	4611      	mov	r1, r2
 800fa62:	4618      	mov	r0, r3
 800fa64:	f7ff fb2d 	bl	800f0c2 <IapmhDidEnterPowerMode>
    if (TX_SUCCESS == tx_queue_receive(&s_xTheSystem.m_xSysQueue, &xEvent, TX_WAIT_FOREVER)) {
 800fa68:	e6d9      	b.n	800f81e <InitTaskRun+0x536>
 800fa6a:	bf00      	nop
 800fa6c:	200007b4 	.word	0x200007b4
 800fa70:	20000704 	.word	0x20000704
 800fa74:	2000002c 	.word	0x2000002c
 800fa78:	20000030 	.word	0x20000030
 800fa7c:	20000038 	.word	0x20000038
 800fa80:	08026490 	.word	0x08026490
 800fa84:	20000034 	.word	0x20000034

0800fa88 <InitTaskDoEnterPowerModeForPMClass>:
      }
    }
  }
}

static uint16_t InitTaskDoEnterPowerModeForPMClass(ApplicationContext *pxContext, EPMClass ePowerModeClass, const EPowerMode eActivePowerMode, const EPowerMode eNewPowerMode) {
 800fa88:	b580      	push	{r7, lr}
 800fa8a:	b086      	sub	sp, #24
 800fa8c:	af00      	add	r7, sp, #0
 800fa8e:	6078      	str	r0, [r7, #4]
 800fa90:	4608      	mov	r0, r1
 800fa92:	4611      	mov	r1, r2
 800fa94:	461a      	mov	r2, r3
 800fa96:	4603      	mov	r3, r0
 800fa98:	70fb      	strb	r3, [r7, #3]
 800fa9a:	460b      	mov	r3, r1
 800fa9c:	70bb      	strb	r3, [r7, #2]
 800fa9e:	4613      	mov	r3, r2
 800faa0:	707b      	strb	r3, [r7, #1]
  /* Forward the request to all managed tasks*/
  AManagedTask *pTask = NULL;
 800faa2:	2300      	movs	r3, #0
 800faa4:	617b      	str	r3, [r7, #20]
  EPMClass eTaskPMClass;
  boolean_t bDelayPowerModeSwitch;
  uint16_t nTaskCount = 0;
 800faa6:	2300      	movs	r3, #0
 800faa8:	823b      	strh	r3, [r7, #16]

  do {
    bDelayPowerModeSwitch = FALSE;
 800faaa:	2300      	movs	r3, #0
 800faac:	74fb      	strb	r3, [r7, #19]
    pTask = ACGetFirstTask(pxContext);
 800faae:	6878      	ldr	r0, [r7, #4]
 800fab0:	f7ff fa48 	bl	800ef44 <ACGetFirstTask>
 800fab4:	6178      	str	r0, [r7, #20]
    for (; pTask!=NULL; pTask=ACGetNextTask(pxContext, pTask)) {
 800fab6:	e055      	b.n	800fb64 <InitTaskDoEnterPowerModeForPMClass+0xdc>

      /* check if the task is a AMTEx and, in case, if its power mode class is equal to ePowerModeClass*/
      eTaskPMClass = INIT_IS_KIND_OF_AMTEX(pTask) ? AMTExGetPMClass((AManagedTaskEx*)pTask) : E_PM_CLASS_0;
 800fab8:	697b      	ldr	r3, [r7, #20]
 800faba:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 800fabe:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800fac2:	b2db      	uxtb	r3, r3
 800fac4:	2b00      	cmp	r3, #0
 800fac6:	d004      	beq.n	800fad2 <InitTaskDoEnterPowerModeForPMClass+0x4a>
 800fac8:	6978      	ldr	r0, [r7, #20]
 800faca:	f7ff fa0f 	bl	800eeec <AMTExGetPMClass>
 800face:	4603      	mov	r3, r0
 800fad0:	e000      	b.n	800fad4 <InitTaskDoEnterPowerModeForPMClass+0x4c>
 800fad2:	2300      	movs	r3, #0
 800fad4:	73fb      	strb	r3, [r7, #15]
      if (eTaskPMClass == ePowerModeClass) {
 800fad6:	7bfa      	ldrb	r2, [r7, #15]
 800fad8:	78fb      	ldrb	r3, [r7, #3]
 800fada:	429a      	cmp	r2, r3
 800fadc:	d13d      	bne.n	800fb5a <InitTaskDoEnterPowerModeForPMClass+0xd2>
        /* notify the task that the power mode is changing,
         so the task will suspend.*/
        pTask->m_xStatus.nPowerModeSwitchPending = 1;
 800fade:	697a      	ldr	r2, [r7, #20]
 800fae0:	f892 30c0 	ldrb.w	r3, [r2, #192]	; 0xc0
 800fae4:	f043 0302 	orr.w	r3, r3, #2
 800fae8:	f882 30c0 	strb.w	r3, [r2, #192]	; 0xc0
        if (pTask->m_xStatus.nPowerModeSwitchDone == 0) {
 800faec:	697b      	ldr	r3, [r7, #20]
 800faee:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 800faf2:	f003 0304 	and.w	r3, r3, #4
 800faf6:	b2db      	uxtb	r3, r3
 800faf8:	2b00      	cmp	r3, #0
 800fafa:	d12e      	bne.n	800fb5a <InitTaskDoEnterPowerModeForPMClass+0xd2>
          if ((pTask->m_xStatus.nDelayPowerModeSwitch == 0)) {
 800fafc:	697b      	ldr	r3, [r7, #20]
 800fafe:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 800fb02:	f003 0301 	and.w	r3, r3, #1
 800fb06:	b2db      	uxtb	r3, r3
 800fb08:	2b00      	cmp	r3, #0
 800fb0a:	d117      	bne.n	800fb3c <InitTaskDoEnterPowerModeForPMClass+0xb4>

            AMTDoEnterPowerMode(pTask, eActivePowerMode, eNewPowerMode);
 800fb0c:	787a      	ldrb	r2, [r7, #1]
 800fb0e:	78bb      	ldrb	r3, [r7, #2]
 800fb10:	4619      	mov	r1, r3
 800fb12:	6978      	ldr	r0, [r7, #20]
 800fb14:	f7ff f958 	bl	800edc8 <AMTDoEnterPowerMode>
            pTask->m_xStatus.nPowerModeSwitchDone = 1;
 800fb18:	697a      	ldr	r2, [r7, #20]
 800fb1a:	f892 30c0 	ldrb.w	r3, [r2, #192]	; 0xc0
 800fb1e:	f043 0304 	orr.w	r3, r3, #4
 800fb22:	f882 30c0 	strb.w	r3, [r2, #192]	; 0xc0
            pTask->m_xStatus.nIsTaskStillRunning = 1;
 800fb26:	697a      	ldr	r2, [r7, #20]
 800fb28:	f892 30c0 	ldrb.w	r3, [r2, #192]	; 0xc0
 800fb2c:	f043 0308 	orr.w	r3, r3, #8
 800fb30:	f882 30c0 	strb.w	r3, [r2, #192]	; 0xc0
            nTaskCount++;
 800fb34:	8a3b      	ldrh	r3, [r7, #16]
 800fb36:	3301      	adds	r3, #1
 800fb38:	823b      	strh	r3, [r7, #16]
 800fb3a:	e00e      	b.n	800fb5a <InitTaskDoEnterPowerModeForPMClass+0xd2>
          }
          else {
            /* check if it is an Extended Managed Task*/
            if (pTask->m_xStatus.nReserved == 1U) {
 800fb3c:	697b      	ldr	r3, [r7, #20]
 800fb3e:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 800fb42:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800fb46:	b2db      	uxtb	r3, r3
 800fb48:	2b00      	cmp	r3, #0
 800fb4a:	d004      	beq.n	800fb56 <InitTaskDoEnterPowerModeForPMClass+0xce>
              // force the step execution to prepare the task for the power mode switch.
              AMTExForceExecuteStep((AManagedTaskEx*)pTask, eActivePowerMode);
 800fb4c:	78bb      	ldrb	r3, [r7, #2]
 800fb4e:	4619      	mov	r1, r3
 800fb50:	6978      	ldr	r0, [r7, #20]
 800fb52:	f7ff f96d 	bl	800ee30 <AMTExForceExecuteStep>
            }
            bDelayPowerModeSwitch = TRUE;
 800fb56:	2301      	movs	r3, #1
 800fb58:	74fb      	strb	r3, [r7, #19]
    for (; pTask!=NULL; pTask=ACGetNextTask(pxContext, pTask)) {
 800fb5a:	6979      	ldr	r1, [r7, #20]
 800fb5c:	6878      	ldr	r0, [r7, #4]
 800fb5e:	f7ff fa05 	bl	800ef6c <ACGetNextTask>
 800fb62:	6178      	str	r0, [r7, #20]
 800fb64:	697b      	ldr	r3, [r7, #20]
 800fb66:	2b00      	cmp	r3, #0
 800fb68:	d1a6      	bne.n	800fab8 <InitTaskDoEnterPowerModeForPMClass+0x30>
          }
        }
      }
    }

    if (bDelayPowerModeSwitch == TRUE) {
 800fb6a:	7cfb      	ldrb	r3, [r7, #19]
 800fb6c:	2b00      	cmp	r3, #0
 800fb6e:	d002      	beq.n	800fb76 <InitTaskDoEnterPowerModeForPMClass+0xee>
      tx_thread_sleep(SYS_MS_TO_TICKS(INIT_TASK_CFG_PM_SWITCH_DELAY_MS));
 800fb70:	2032      	movs	r0, #50	; 0x32
 800fb72:	f001 fef3 	bl	801195c <_tx_thread_sleep>
    }

  } while (bDelayPowerModeSwitch == TRUE);
 800fb76:	7cfb      	ldrb	r3, [r7, #19]
 800fb78:	2b00      	cmp	r3, #0
 800fb7a:	d196      	bne.n	800faaa <InitTaskDoEnterPowerModeForPMClass+0x22>

  return nTaskCount;
 800fb7c:	8a3b      	ldrh	r3, [r7, #16]
}
 800fb7e:	4618      	mov	r0, r3
 800fb80:	3718      	adds	r7, #24
 800fb82:	46bd      	mov	sp, r7
 800fb84:	bd80      	pop	{r7, pc}
	...

0800fb88 <tx_application_define>:

// ThreadX integration
// *******************

void tx_application_define(void *first_unused_memory) {
 800fb88:	b580      	push	{r7, lr}
 800fb8a:	b08e      	sub	sp, #56	; 0x38
 800fb8c:	af08      	add	r7, sp, #32
 800fb8e:	6078      	str	r0, [r7, #4]
  UINT nRes = TX_SUCCESS;
 800fb90:	2300      	movs	r3, #0
 800fb92:	617b      	str	r3, [r7, #20]
  // create the INIT task.
  s_xTheSystem.pvFirstUnusedMemory = first_unused_memory;
 800fb94:	4a19      	ldr	r2, [pc, #100]	; (800fbfc <tx_application_define+0x74>)
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
  nRes = tx_thread_create(&s_xTheSystem.m_xInitTask, "INIT", InitTaskRun, ELOOM_MAGIC_NUMBER, s_xTheSystem.pvFirstUnusedMemory, INIT_TASK_CFG_STACK_SIZE, INIT_TASK_CFG_PRIORITY, INIT_TASK_CFG_PRIORITY, TX_NO_TIME_SLICE, TX_AUTO_START);
 800fb9c:	4b17      	ldr	r3, [pc, #92]	; (800fbfc <tx_application_define+0x74>)
 800fb9e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800fba2:	22b0      	movs	r2, #176	; 0xb0
 800fba4:	9206      	str	r2, [sp, #24]
 800fba6:	2201      	movs	r2, #1
 800fba8:	9205      	str	r2, [sp, #20]
 800fbaa:	2200      	movs	r2, #0
 800fbac:	9204      	str	r2, [sp, #16]
 800fbae:	2200      	movs	r2, #0
 800fbb0:	9203      	str	r2, [sp, #12]
 800fbb2:	2200      	movs	r2, #0
 800fbb4:	9202      	str	r2, [sp, #8]
 800fbb6:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800fbba:	9201      	str	r2, [sp, #4]
 800fbbc:	9300      	str	r3, [sp, #0]
 800fbbe:	f243 23ae 	movw	r3, #12974	; 0x32ae
 800fbc2:	4a0f      	ldr	r2, [pc, #60]	; (800fc00 <tx_application_define+0x78>)
 800fbc4:	490f      	ldr	r1, [pc, #60]	; (800fc04 <tx_application_define+0x7c>)
 800fbc6:	480d      	ldr	r0, [pc, #52]	; (800fbfc <tx_application_define+0x74>)
 800fbc8:	f003 faf4 	bl	80131b4 <_txe_thread_create>
 800fbcc:	6178      	str	r0, [r7, #20]
  if (nRes != TX_SUCCESS) {
 800fbce:	697b      	ldr	r3, [r7, #20]
 800fbd0:	2b00      	cmp	r3, #0
 800fbd2:	d001      	beq.n	800fbd8 <tx_application_define+0x50>
    sys_error_handler();
 800fbd4:	f7ff f8c0 	bl	800ed58 <sys_error_handler>
  }
  uint32_t mem = (uint32_t)(INIT_TASK_CFG_STACK_SIZE * 4);
 800fbd8:	f44f 5396 	mov.w	r3, #4800	; 0x12c0
 800fbdc:	613b      	str	r3, [r7, #16]
  uint32_t p =  ((uint32_t)s_xTheSystem.pvFirstUnusedMemory) + mem;
 800fbde:	4b07      	ldr	r3, [pc, #28]	; (800fbfc <tx_application_define+0x74>)
 800fbe0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800fbe4:	461a      	mov	r2, r3
 800fbe6:	693b      	ldr	r3, [r7, #16]
 800fbe8:	4413      	add	r3, r2
 800fbea:	60fb      	str	r3, [r7, #12]
  s_xTheSystem.pvFirstUnusedMemory = (void *) p ;
 800fbec:	68fb      	ldr	r3, [r7, #12]
 800fbee:	4a03      	ldr	r2, [pc, #12]	; (800fbfc <tx_application_define+0x74>)
 800fbf0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
}
 800fbf4:	bf00      	nop
 800fbf6:	3718      	adds	r7, #24
 800fbf8:	46bd      	mov	sp, r7
 800fbfa:	bd80      	pop	{r7, pc}
 800fbfc:	20000704 	.word	0x20000704
 800fc00:	0800f2e9 	.word	0x0800f2e9
 800fc04:	080264b0 	.word	0x080264b0

0800fc08 <_tx_byte_allocate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr, ULONG memory_size,  ULONG wait_option)
{
 800fc08:	b580      	push	{r7, lr}
 800fc0a:	b094      	sub	sp, #80	; 0x50
 800fc0c:	af00      	add	r7, sp, #0
 800fc0e:	60f8      	str	r0, [r7, #12]
 800fc10:	60b9      	str	r1, [r7, #8]
 800fc12:	607a      	str	r2, [r7, #4]
 800fc14:	603b      	str	r3, [r7, #0]
#endif


    /* Round the memory size up to the next size that is evenly divisible by
       an ALIGN_TYPE (this is typically a 32-bit ULONG).  This guarantees proper alignment.  */
    memory_size = (((memory_size + (sizeof(ALIGN_TYPE)))-((ALIGN_TYPE) 1))/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 800fc16:	687b      	ldr	r3, [r7, #4]
 800fc18:	3303      	adds	r3, #3
 800fc1a:	f023 0303 	bic.w	r3, r3, #3
 800fc1e:	607b      	str	r3, [r7, #4]
__attribute__( ( always_inline ) ) static inline unsigned int __disable_interrupts(void)
{

unsigned int  primask_value;

    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800fc20:	f3ef 8310 	mrs	r3, PRIMASK
 800fc24:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile (" CPSID i" : : : "memory" );
 800fc26:	b672      	cpsid	i
    return(primask_value);
 800fc28:	6afb      	ldr	r3, [r7, #44]	; 0x2c

    /* Disable interrupts.  */
    TX_DISABLE
 800fc2a:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800fc2c:	4b54      	ldr	r3, [pc, #336]	; (800fd80 <_tx_byte_allocate+0x178>)
 800fc2e:	681b      	ldr	r3, [r3, #0]
 800fc30:	643b      	str	r3, [r7, #64]	; 0x40
    lower_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_LOWER_OFFSET));
    upper_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_UPPER_OFFSET));
#endif

    /* Set the search finished flag to false.  */
    finished =  TX_FALSE;
 800fc32:	2300      	movs	r3, #0
 800fc34:	647b      	str	r3, [r7, #68]	; 0x44
    /* Loop to handle cases where the owner of the pool changed.  */
    do
    {

        /* Indicate that this thread is the current owner.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 800fc36:	68fb      	ldr	r3, [r7, #12]
 800fc38:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800fc3a:	621a      	str	r2, [r3, #32]
 800fc3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fc3e:	627b      	str	r3, [r7, #36]	; 0x24
}

__attribute__( ( always_inline ) ) static inline void __restore_interrupts(unsigned int primask_value)
{

    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800fc40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc42:	f383 8810 	msr	PRIMASK, r3
}
 800fc46:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE

        /* At this point, the executing thread owns the pool and can perform a search
           for free memory.  */
        work_ptr =  _tx_byte_pool_search(pool_ptr, memory_size);
 800fc48:	6879      	ldr	r1, [r7, #4]
 800fc4a:	68f8      	ldr	r0, [r7, #12]
 800fc4c:	f000 f9ee 	bl	801002c <_tx_byte_pool_search>
 800fc50:	63f8      	str	r0, [r7, #60]	; 0x3c
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800fc52:	f3ef 8310 	mrs	r3, PRIMASK
 800fc56:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile (" CPSID i" : : : "memory" );
 800fc58:	b672      	cpsid	i
    return(primask_value);
 800fc5a:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Optional processing extension.  */
        TX_BYTE_ALLOCATE_EXTENSION

        /* Lockout interrupts.  */
        TX_DISABLE
 800fc5c:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* Determine if we are finished.  */
        if (work_ptr != TX_NULL)
 800fc5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fc60:	2b00      	cmp	r3, #0
 800fc62:	d002      	beq.n	800fc6a <_tx_byte_allocate+0x62>
        {
        
            /* Yes, we have found a block the search is finished.  */
            finished =  TX_TRUE;
 800fc64:	2301      	movs	r3, #1
 800fc66:	647b      	str	r3, [r7, #68]	; 0x44
 800fc68:	e006      	b.n	800fc78 <_tx_byte_allocate+0x70>
        }
        else
        {
        
            /* No block was found, does this thread still own the pool?  */
            if (pool_ptr -> tx_byte_pool_owner == thread_ptr)
 800fc6a:	68fb      	ldr	r3, [r7, #12]
 800fc6c:	6a1b      	ldr	r3, [r3, #32]
 800fc6e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800fc70:	429a      	cmp	r2, r3
 800fc72:	d101      	bne.n	800fc78 <_tx_byte_allocate+0x70>
            {
            
                /* Yes, then we have looked through the entire pool and haven't found the memory.  */
                finished =  TX_TRUE;
 800fc74:	2301      	movs	r3, #1
 800fc76:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }

    } while (finished == TX_FALSE);
 800fc78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fc7a:	2b00      	cmp	r3, #0
 800fc7c:	d0db      	beq.n	800fc36 <_tx_byte_allocate+0x2e>

    /* Copy the pointer into the return destination.  */
    *memory_ptr =  (VOID *) work_ptr;
 800fc7e:	68bb      	ldr	r3, [r7, #8]
 800fc80:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800fc82:	601a      	str	r2, [r3, #0]

    /* Determine if memory was found.  */
    if (work_ptr != TX_NULL)
 800fc84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fc86:	2b00      	cmp	r3, #0
 800fc88:	d008      	beq.n	800fc9c <_tx_byte_allocate+0x94>
 800fc8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fc8c:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800fc8e:	6a3b      	ldr	r3, [r7, #32]
 800fc90:	f383 8810 	msr	PRIMASK, r3
}
 800fc94:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE
        
        /* Set the status to success.  */
        status =  TX_SUCCESS;
 800fc96:	2300      	movs	r3, #0
 800fc98:	64bb      	str	r3, [r7, #72]	; 0x48
 800fc9a:	e06c      	b.n	800fd76 <_tx_byte_allocate+0x16e>
    {

        /* No memory of sufficient size was found...  */

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 800fc9c:	683b      	ldr	r3, [r7, #0]
 800fc9e:	2b00      	cmp	r3, #0
 800fca0:	d061      	beq.n	800fd66 <_tx_byte_allocate+0x15e>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 800fca2:	4b38      	ldr	r3, [pc, #224]	; (800fd84 <_tx_byte_allocate+0x17c>)
 800fca4:	681b      	ldr	r3, [r3, #0]
 800fca6:	2b00      	cmp	r3, #0
 800fca8:	d007      	beq.n	800fcba <_tx_byte_allocate+0xb2>
            {

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
                status =  TX_NO_MEMORY;
 800fcaa:	2310      	movs	r3, #16
 800fcac:	64bb      	str	r3, [r7, #72]	; 0x48
 800fcae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fcb0:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800fcb2:	69fb      	ldr	r3, [r7, #28]
 800fcb4:	f383 8810 	msr	PRIMASK, r3
}
 800fcb8:	e05d      	b.n	800fd76 <_tx_byte_allocate+0x16e>
                /* Increment the number of suspensions on this pool.  */
                pool_ptr -> tx_byte_pool_performance_suspension_count++;
#endif

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_byte_pool_cleanup);
 800fcba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fcbc:	4a32      	ldr	r2, [pc, #200]	; (800fd88 <_tx_byte_allocate+0x180>)
 800fcbe:	669a      	str	r2, [r3, #104]	; 0x68

                /* Setup cleanup information, i.e. this pool control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) pool_ptr;
 800fcc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fcc2:	68fa      	ldr	r2, [r7, #12]
 800fcc4:	66da      	str	r2, [r3, #108]	; 0x6c

                /* Save the return memory pointer address as well.  */
                thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) memory_ptr;
 800fcc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fcc8:	68ba      	ldr	r2, [r7, #8]
 800fcca:	67da      	str	r2, [r3, #124]	; 0x7c

                /* Save the byte size requested.  */
                thread_ptr -> tx_thread_suspend_info =  memory_size;
 800fccc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fcce:	687a      	ldr	r2, [r7, #4]
 800fcd0:	679a      	str	r2, [r3, #120]	; 0x78

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 800fcd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fcd4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800fcd8:	1c5a      	adds	r2, r3, #1
 800fcda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fcdc:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

                /* Pickup the number of suspended threads.  */
                suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 800fce0:	68fb      	ldr	r3, [r7, #12]
 800fce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fce4:	63bb      	str	r3, [r7, #56]	; 0x38

                /* Increment the suspension count.  */
                (pool_ptr -> tx_byte_pool_suspended_count)++;
 800fce6:	68fb      	ldr	r3, [r7, #12]
 800fce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fcea:	1c5a      	adds	r2, r3, #1
 800fcec:	68fb      	ldr	r3, [r7, #12]
 800fcee:	629a      	str	r2, [r3, #40]	; 0x28
            
                /* Setup suspension list.  */
                if (suspended_count == TX_NO_SUSPENSIONS)
 800fcf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcf2:	2b00      	cmp	r3, #0
 800fcf4:	d109      	bne.n	800fd0a <_tx_byte_allocate+0x102>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    pool_ptr -> tx_byte_pool_suspension_list =      thread_ptr;
 800fcf6:	68fb      	ldr	r3, [r7, #12]
 800fcf8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800fcfa:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 800fcfc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fcfe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800fd00:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 800fd02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fd04:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800fd06:	675a      	str	r2, [r3, #116]	; 0x74
 800fd08:	e011      	b.n	800fd2e <_tx_byte_allocate+0x126>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   pool_ptr -> tx_byte_pool_suspension_list;
 800fd0a:	68fb      	ldr	r3, [r7, #12]
 800fd0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd0e:	637b      	str	r3, [r7, #52]	; 0x34
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 800fd10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fd12:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fd14:	671a      	str	r2, [r3, #112]	; 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 800fd16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fd1a:	633b      	str	r3, [r7, #48]	; 0x30
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 800fd1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fd1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fd20:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 800fd22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd24:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800fd26:	671a      	str	r2, [r3, #112]	; 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 800fd28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd2a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800fd2c:	675a      	str	r2, [r3, #116]	; 0x74
                }

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =       TX_BYTE_MEMORY;
 800fd2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fd30:	2209      	movs	r2, #9
 800fd32:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800fd34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fd36:	2201      	movs	r2, #1
 800fd38:	639a      	str	r2, [r3, #56]	; 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 800fd3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fd3c:	683a      	ldr	r2, [r7, #0]
 800fd3e:	64da      	str	r2, [r3, #76]	; 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 800fd40:	4b10      	ldr	r3, [pc, #64]	; (800fd84 <_tx_byte_allocate+0x17c>)
 800fd42:	681b      	ldr	r3, [r3, #0]
 800fd44:	3301      	adds	r3, #1
 800fd46:	4a0f      	ldr	r2, [pc, #60]	; (800fd84 <_tx_byte_allocate+0x17c>)
 800fd48:	6013      	str	r3, [r2, #0]
 800fd4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fd4c:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800fd4e:	69bb      	ldr	r3, [r7, #24]
 800fd50:	f383 8810 	msr	PRIMASK, r3
}
 800fd54:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 800fd56:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800fd58:	f002 f852 	bl	8011e00 <_tx_thread_system_suspend>
                    *((ULONG *) (log_entry_ptr + TX_EL_EVENT_INFO_4_OFFSET)) =  (ULONG) *memory_ptr;
                }
#endif

                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 800fd5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fd5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fd62:	64bb      	str	r3, [r7, #72]	; 0x48
 800fd64:	e007      	b.n	800fd76 <_tx_byte_allocate+0x16e>
 800fd66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fd68:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800fd6a:	697b      	ldr	r3, [r7, #20]
 800fd6c:	f383 8810 	msr	PRIMASK, r3
}
 800fd70:	bf00      	nop
    
            /* Restore interrupts.  */
            TX_RESTORE

            /* Immediate return, return error completion.  */
            status =  TX_NO_MEMORY;
 800fd72:	2310      	movs	r3, #16
 800fd74:	64bb      	str	r3, [r7, #72]	; 0x48
        }
    }

    /* Return completion status.  */
    return(status);
 800fd76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800fd78:	4618      	mov	r0, r3
 800fd7a:	3750      	adds	r7, #80	; 0x50
 800fd7c:	46bd      	mov	sp, r7
 800fd7e:	bd80      	pop	{r7, pc}
 800fd80:	20026064 	.word	0x20026064
 800fd84:	200260fc 	.word	0x200260fc
 800fd88:	0800fd8d 	.word	0x0800fd8d

0800fd8c <_tx_byte_pool_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_byte_pool_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 800fd8c:	b580      	push	{r7, lr}
 800fd8e:	b08c      	sub	sp, #48	; 0x30
 800fd90:	af00      	add	r7, sp, #0
 800fd92:	6078      	str	r0, [r7, #4]
 800fd94:	6039      	str	r1, [r7, #0]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800fd96:	f3ef 8310 	mrs	r3, PRIMASK
 800fd9a:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800fd9c:	b672      	cpsid	i
    return(primask_value);
 800fd9e:	69bb      	ldr	r3, [r7, #24]

    
#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the byte pool.  */
    TX_DISABLE
 800fda0:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_byte_pool_cleanup))
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800fda6:	4a32      	ldr	r2, [pc, #200]	; (800fe70 <_tx_byte_pool_cleanup+0xe4>)
 800fda8:	4293      	cmp	r3, r2
 800fdaa:	d156      	bne.n	800fe5a <_tx_byte_pool_cleanup+0xce>
    {
    
        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800fdb2:	683a      	ldr	r2, [r7, #0]
 800fdb4:	429a      	cmp	r2, r3
 800fdb6:	d150      	bne.n	800fe5a <_tx_byte_pool_cleanup+0xce>
        {

            /* Setup pointer to byte pool control block.  */
            pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fdbc:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Check for a NULL byte pool pointer.  */
            if (pool_ptr != TX_NULL)
 800fdbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdc0:	2b00      	cmp	r3, #0
 800fdc2:	d04a      	beq.n	800fe5a <_tx_byte_pool_cleanup+0xce>
            {
            
                /* Check for valid pool ID.  */
                if (pool_ptr -> tx_byte_pool_id == TX_BYTE_POOL_ID)
 800fdc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdc6:	681b      	ldr	r3, [r3, #0]
 800fdc8:	4a2a      	ldr	r2, [pc, #168]	; (800fe74 <_tx_byte_pool_cleanup+0xe8>)
 800fdca:	4293      	cmp	r3, r2
 800fdcc:	d145      	bne.n	800fe5a <_tx_byte_pool_cleanup+0xce>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (pool_ptr -> tx_byte_pool_suspended_count != TX_NO_SUSPENSIONS)
 800fdce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fdd2:	2b00      	cmp	r3, #0
 800fdd4:	d041      	beq.n	800fe5a <_tx_byte_pool_cleanup+0xce>
                        /* Setup pointer to byte pool control block.  */
                        pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
#endif

                        /* Thread suspended for memory... Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	2200      	movs	r2, #0
 800fdda:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspension count.  */
                        pool_ptr -> tx_byte_pool_suspended_count--;
 800fddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fde0:	1e5a      	subs	r2, r3, #1
 800fde2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fde4:	629a      	str	r2, [r3, #40]	; 0x28
            
                        /* Pickup the suspended count.  */
                        suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 800fde6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fde8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fdea:	627b      	str	r3, [r7, #36]	; 0x24

                        /* Remove the suspended thread from the list.  */
    
                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 800fdec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdee:	2b00      	cmp	r3, #0
 800fdf0:	d103      	bne.n	800fdfa <_tx_byte_pool_cleanup+0x6e>
                        {

                            /* Yes, the only suspended thread.  */
    
                            /* Update the head pointer.  */
                            pool_ptr -> tx_byte_pool_suspension_list =  TX_NULL;
 800fdf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdf4:	2200      	movs	r2, #0
 800fdf6:	625a      	str	r2, [r3, #36]	; 0x24
 800fdf8:	e013      	b.n	800fe22 <_tx_byte_pool_cleanup+0x96>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 800fdfa:	687b      	ldr	r3, [r7, #4]
 800fdfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fdfe:	623b      	str	r3, [r7, #32]
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fe04:	61fb      	str	r3, [r7, #28]
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 800fe06:	6a3b      	ldr	r3, [r7, #32]
 800fe08:	69fa      	ldr	r2, [r7, #28]
 800fe0a:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 800fe0c:	69fb      	ldr	r3, [r7, #28]
 800fe0e:	6a3a      	ldr	r2, [r7, #32]
 800fe10:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (pool_ptr -> tx_byte_pool_suspension_list == thread_ptr)
 800fe12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe16:	687a      	ldr	r2, [r7, #4]
 800fe18:	429a      	cmp	r2, r3
 800fe1a:	d102      	bne.n	800fe22 <_tx_byte_pool_cleanup+0x96>
                            {
            
                                /* Update the list head pointer.  */
                                pool_ptr -> tx_byte_pool_suspension_list =      next_thread;
 800fe1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe1e:	6a3a      	ldr	r2, [r7, #32]
 800fe20:	625a      	str	r2, [r3, #36]	; 0x24
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_BYTE_MEMORY)
 800fe22:	687b      	ldr	r3, [r7, #4]
 800fe24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fe26:	2b09      	cmp	r3, #9
 800fe28:	d117      	bne.n	800fe5a <_tx_byte_pool_cleanup+0xce>
                            /* Increment the number of timeouts on this byte pool.  */
                            pool_ptr -> tx_byte_pool_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_MEMORY;
 800fe2a:	687b      	ldr	r3, [r7, #4]
 800fe2c:	2210      	movs	r2, #16
 800fe2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800fe32:	4b11      	ldr	r3, [pc, #68]	; (800fe78 <_tx_byte_pool_cleanup+0xec>)
 800fe34:	681b      	ldr	r3, [r3, #0]
 800fe36:	3301      	adds	r3, #1
 800fe38:	4a0f      	ldr	r2, [pc, #60]	; (800fe78 <_tx_byte_pool_cleanup+0xec>)
 800fe3a:	6013      	str	r3, [r2, #0]
 800fe3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe3e:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800fe40:	693b      	ldr	r3, [r7, #16]
 800fe42:	f383 8810 	msr	PRIMASK, r3
}
 800fe46:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 800fe48:	6878      	ldr	r0, [r7, #4]
 800fe4a:	f001 fecf 	bl	8011bec <_tx_thread_system_resume>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800fe4e:	f3ef 8310 	mrs	r3, PRIMASK
 800fe52:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800fe54:	b672      	cpsid	i
    return(primask_value);
 800fe56:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 800fe58:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fe5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe5c:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800fe5e:	68fb      	ldr	r3, [r7, #12]
 800fe60:	f383 8810 	msr	PRIMASK, r3
}
 800fe64:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800fe66:	bf00      	nop
 800fe68:	3730      	adds	r7, #48	; 0x30
 800fe6a:	46bd      	mov	sp, r7
 800fe6c:	bd80      	pop	{r7, pc}
 800fe6e:	bf00      	nop
 800fe70:	0800fd8d 	.word	0x0800fd8d
 800fe74:	42595445 	.word	0x42595445
 800fe78:	200260fc 	.word	0x200260fc

0800fe7c <_tx_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size)
{
 800fe7c:	b580      	push	{r7, lr}
 800fe7e:	b08e      	sub	sp, #56	; 0x38
 800fe80:	af00      	add	r7, sp, #0
 800fe82:	60f8      	str	r0, [r7, #12]
 800fe84:	60b9      	str	r1, [r7, #8]
 800fe86:	607a      	str	r2, [r7, #4]
 800fe88:	603b      	str	r3, [r7, #0]
TX_BYTE_POOL        *previous_pool;
ALIGN_TYPE          *free_ptr;


    /* Initialize the byte pool control block to all zeros.  */
    TX_MEMSET(pool_ptr, 0, (sizeof(TX_BYTE_POOL)));
 800fe8a:	2234      	movs	r2, #52	; 0x34
 800fe8c:	2100      	movs	r1, #0
 800fe8e:	68f8      	ldr	r0, [r7, #12]
 800fe90:	f013 fecb 	bl	8023c2a <memset>

    /* Round the pool size down to something that is evenly divisible by 
       an ULONG.  */
    pool_size =   (pool_size/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 800fe94:	683b      	ldr	r3, [r7, #0]
 800fe96:	f023 0303 	bic.w	r3, r3, #3
 800fe9a:	603b      	str	r3, [r7, #0]

    /* Setup the basic byte pool fields.  */
    pool_ptr -> tx_byte_pool_name =              name_ptr;
 800fe9c:	68fb      	ldr	r3, [r7, #12]
 800fe9e:	68ba      	ldr	r2, [r7, #8]
 800fea0:	605a      	str	r2, [r3, #4]

    /* Save the start and size of the pool.  */
    pool_ptr -> tx_byte_pool_start =   TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800fea2:	68fb      	ldr	r3, [r7, #12]
 800fea4:	687a      	ldr	r2, [r7, #4]
 800fea6:	619a      	str	r2, [r3, #24]
    pool_ptr -> tx_byte_pool_size =    pool_size;
 800fea8:	68fb      	ldr	r3, [r7, #12]
 800feaa:	683a      	ldr	r2, [r7, #0]
 800feac:	61da      	str	r2, [r3, #28]

    /* Setup memory list to the beginning as well as the search pointer.  */
    pool_ptr -> tx_byte_pool_list =    TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800feae:	68fb      	ldr	r3, [r7, #12]
 800feb0:	687a      	ldr	r2, [r7, #4]
 800feb2:	611a      	str	r2, [r3, #16]
    pool_ptr -> tx_byte_pool_search =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800feb4:	68fb      	ldr	r3, [r7, #12]
 800feb6:	687a      	ldr	r2, [r7, #4]
 800feb8:	615a      	str	r2, [r3, #20]

    /* Initially, the pool will have two blocks.  One large block at the 
       beginning that is available and a small allocated block at the end
       of the pool that is there just for the algorithm.  Be sure to count
       the available block's header in the available bytes count.  */
    pool_ptr -> tx_byte_pool_available =   pool_size - ((sizeof(VOID *)) + (sizeof(ALIGN_TYPE)));
 800feba:	683b      	ldr	r3, [r7, #0]
 800febc:	f1a3 0208 	sub.w	r2, r3, #8
 800fec0:	68fb      	ldr	r3, [r7, #12]
 800fec2:	609a      	str	r2, [r3, #8]
    pool_ptr -> tx_byte_pool_fragments =   ((UINT) 2);
 800fec4:	68fb      	ldr	r3, [r7, #12]
 800fec6:	2202      	movs	r2, #2
 800fec8:	60da      	str	r2, [r3, #12]
    /* Each block contains a "next" pointer that points to the next block in the pool followed by a ALIGN_TYPE
       field that contains either the constant TX_BYTE_BLOCK_FREE (if the block is free) or a pointer to the
       owning pool (if the block is allocated).  */
    
    /* Calculate the end of the pool's memory area.  */
    block_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =  TX_UCHAR_POINTER_ADD(block_ptr, pool_size);
 800fece:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fed0:	683b      	ldr	r3, [r7, #0]
 800fed2:	4413      	add	r3, r2
 800fed4:	637b      	str	r3, [r7, #52]	; 0x34

    /* Backup the end of the pool pointer and build the pre-allocated block.  */
    block_ptr =  TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(ALIGN_TYPE)));
 800fed6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fed8:	3b04      	subs	r3, #4
 800feda:	637b      	str	r3, [r7, #52]	; 0x34

    /* Cast the pool pointer into a ULONG.  */
    temp_ptr =             TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 800fedc:	68fb      	ldr	r3, [r7, #12]
 800fede:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 800fee0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fee2:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  temp_ptr;
 800fee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fee6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fee8:	601a      	str	r2, [r3, #0]

    block_ptr =            TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(UCHAR *)));
 800feea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800feec:	3b04      	subs	r3, #4
 800feee:	637b      	str	r3, [r7, #52]	; 0x34
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 800fef0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fef2:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800fef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fef6:	687a      	ldr	r2, [r7, #4]
 800fef8:	601a      	str	r2, [r3, #0]

    /* Now setup the large available block in the pool.  */
    temp_ptr =             TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(temp_ptr);
 800fefe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff00:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  block_ptr;
 800ff02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff04:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ff06:	601a      	str	r2, [r3, #0]
    block_ptr =            TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =            TX_UCHAR_POINTER_ADD(block_ptr, (sizeof(UCHAR *)));
 800ff0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff0e:	3304      	adds	r3, #4
 800ff10:	637b      	str	r3, [r7, #52]	; 0x34
    free_ptr =             TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(block_ptr);
 800ff12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff14:	62bb      	str	r3, [r7, #40]	; 0x28
    *free_ptr =            TX_BYTE_BLOCK_FREE;
 800ff16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff18:	4a1e      	ldr	r2, [pc, #120]	; (800ff94 <_tx_byte_pool_create+0x118>)
 800ff1a:	601a      	str	r2, [r3, #0]

    /* Clear the owner id.  */
    pool_ptr -> tx_byte_pool_owner =  TX_NULL;
 800ff1c:	68fb      	ldr	r3, [r7, #12]
 800ff1e:	2200      	movs	r2, #0
 800ff20:	621a      	str	r2, [r3, #32]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800ff22:	f3ef 8310 	mrs	r3, PRIMASK
 800ff26:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800ff28:	b672      	cpsid	i
    return(primask_value);
 800ff2a:	69bb      	ldr	r3, [r7, #24]

    /* Disable interrupts to place the byte pool on the created list.  */
    TX_DISABLE
 800ff2c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the byte pool ID to make it valid.  */
    pool_ptr -> tx_byte_pool_id =  TX_BYTE_POOL_ID;
 800ff2e:	68fb      	ldr	r3, [r7, #12]
 800ff30:	4a19      	ldr	r2, [pc, #100]	; (800ff98 <_tx_byte_pool_create+0x11c>)
 800ff32:	601a      	str	r2, [r3, #0]

    /* Place the byte pool on the list of created byte pools.  First,
       check for an empty list.  */
    if (_tx_byte_pool_created_count == TX_EMPTY)
 800ff34:	4b19      	ldr	r3, [pc, #100]	; (800ff9c <_tx_byte_pool_create+0x120>)
 800ff36:	681b      	ldr	r3, [r3, #0]
 800ff38:	2b00      	cmp	r3, #0
 800ff3a:	d109      	bne.n	800ff50 <_tx_byte_pool_create+0xd4>
    {

        /* The created byte pool list is empty.  Add byte pool to empty list.  */
        _tx_byte_pool_created_ptr =                  pool_ptr;
 800ff3c:	4a18      	ldr	r2, [pc, #96]	; (800ffa0 <_tx_byte_pool_create+0x124>)
 800ff3e:	68fb      	ldr	r3, [r7, #12]
 800ff40:	6013      	str	r3, [r2, #0]
        pool_ptr -> tx_byte_pool_created_next =      pool_ptr;
 800ff42:	68fb      	ldr	r3, [r7, #12]
 800ff44:	68fa      	ldr	r2, [r7, #12]
 800ff46:	62da      	str	r2, [r3, #44]	; 0x2c
        pool_ptr -> tx_byte_pool_created_previous =  pool_ptr;
 800ff48:	68fb      	ldr	r3, [r7, #12]
 800ff4a:	68fa      	ldr	r2, [r7, #12]
 800ff4c:	631a      	str	r2, [r3, #48]	; 0x30
 800ff4e:	e011      	b.n	800ff74 <_tx_byte_pool_create+0xf8>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_pool =      _tx_byte_pool_created_ptr;
 800ff50:	4b13      	ldr	r3, [pc, #76]	; (800ffa0 <_tx_byte_pool_create+0x124>)
 800ff52:	681b      	ldr	r3, [r3, #0]
 800ff54:	623b      	str	r3, [r7, #32]
        previous_pool =  next_pool -> tx_byte_pool_created_previous;
 800ff56:	6a3b      	ldr	r3, [r7, #32]
 800ff58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ff5a:	61fb      	str	r3, [r7, #28]

        /* Place the new byte pool in the list.  */
        next_pool -> tx_byte_pool_created_previous =  pool_ptr;
 800ff5c:	6a3b      	ldr	r3, [r7, #32]
 800ff5e:	68fa      	ldr	r2, [r7, #12]
 800ff60:	631a      	str	r2, [r3, #48]	; 0x30
        previous_pool -> tx_byte_pool_created_next =  pool_ptr;
 800ff62:	69fb      	ldr	r3, [r7, #28]
 800ff64:	68fa      	ldr	r2, [r7, #12]
 800ff66:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Setup this byte pool's created links.  */
        pool_ptr -> tx_byte_pool_created_previous =  previous_pool;
 800ff68:	68fb      	ldr	r3, [r7, #12]
 800ff6a:	69fa      	ldr	r2, [r7, #28]
 800ff6c:	631a      	str	r2, [r3, #48]	; 0x30
        pool_ptr -> tx_byte_pool_created_next =      next_pool;
 800ff6e:	68fb      	ldr	r3, [r7, #12]
 800ff70:	6a3a      	ldr	r2, [r7, #32]
 800ff72:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    /* Increment the number of created byte pools.  */
    _tx_byte_pool_created_count++;
 800ff74:	4b09      	ldr	r3, [pc, #36]	; (800ff9c <_tx_byte_pool_create+0x120>)
 800ff76:	681b      	ldr	r3, [r3, #0]
 800ff78:	3301      	adds	r3, #1
 800ff7a:	4a08      	ldr	r2, [pc, #32]	; (800ff9c <_tx_byte_pool_create+0x120>)
 800ff7c:	6013      	str	r3, [r2, #0]
 800ff7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff80:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800ff82:	697b      	ldr	r3, [r7, #20]
 800ff84:	f383 8810 	msr	PRIMASK, r3
}
 800ff88:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800ff8a:	2300      	movs	r3, #0
}
 800ff8c:	4618      	mov	r0, r3
 800ff8e:	3738      	adds	r7, #56	; 0x38
 800ff90:	46bd      	mov	sp, r7
 800ff92:	bd80      	pop	{r7, pc}
 800ff94:	ffffeeee 	.word	0xffffeeee
 800ff98:	42595445 	.word	0x42595445
 800ff9c:	20026058 	.word	0x20026058
 800ffa0:	20026054 	.word	0x20026054

0800ffa4 <_tx_byte_pool_info_get>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_pool_info_get(TX_BYTE_POOL *pool_ptr, CHAR **name, ULONG *available_bytes, 
                    ULONG *fragments, TX_THREAD **first_suspended, 
                    ULONG *suspended_count, TX_BYTE_POOL **next_pool)
{
 800ffa4:	b480      	push	{r7}
 800ffa6:	b089      	sub	sp, #36	; 0x24
 800ffa8:	af00      	add	r7, sp, #0
 800ffaa:	60f8      	str	r0, [r7, #12]
 800ffac:	60b9      	str	r1, [r7, #8]
 800ffae:	607a      	str	r2, [r7, #4]
 800ffb0:	603b      	str	r3, [r7, #0]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800ffb2:	f3ef 8310 	mrs	r3, PRIMASK
 800ffb6:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800ffb8:	b672      	cpsid	i
    return(primask_value);
 800ffba:	69bb      	ldr	r3, [r7, #24]

TX_INTERRUPT_SAVE_AREA


    /* Disable interrupts.  */
    TX_DISABLE
 800ffbc:	61fb      	str	r3, [r7, #28]

    /* Retrieve all the pertinent information and return it in the supplied
       destinations.  */

    /* Retrieve the name of the byte pool.  */
    if (name != TX_NULL)
 800ffbe:	68bb      	ldr	r3, [r7, #8]
 800ffc0:	2b00      	cmp	r3, #0
 800ffc2:	d003      	beq.n	800ffcc <_tx_byte_pool_info_get+0x28>
    {
    
        *name =  pool_ptr -> tx_byte_pool_name;
 800ffc4:	68fb      	ldr	r3, [r7, #12]
 800ffc6:	685a      	ldr	r2, [r3, #4]
 800ffc8:	68bb      	ldr	r3, [r7, #8]
 800ffca:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve the number of available bytes in the byte pool.  */
    if (available_bytes != TX_NULL)
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	2b00      	cmp	r3, #0
 800ffd0:	d003      	beq.n	800ffda <_tx_byte_pool_info_get+0x36>
    {
    
        *available_bytes =  pool_ptr -> tx_byte_pool_available;
 800ffd2:	68fb      	ldr	r3, [r7, #12]
 800ffd4:	689a      	ldr	r2, [r3, #8]
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve the total number of bytes in the byte pool.  */
    if (fragments != TX_NULL)
 800ffda:	683b      	ldr	r3, [r7, #0]
 800ffdc:	2b00      	cmp	r3, #0
 800ffde:	d003      	beq.n	800ffe8 <_tx_byte_pool_info_get+0x44>
    {
    
        *fragments =  (ULONG) pool_ptr -> tx_byte_pool_fragments;
 800ffe0:	68fb      	ldr	r3, [r7, #12]
 800ffe2:	68da      	ldr	r2, [r3, #12]
 800ffe4:	683b      	ldr	r3, [r7, #0]
 800ffe6:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve the first thread suspended on this byte pool.  */
    if (first_suspended != TX_NULL)
 800ffe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffea:	2b00      	cmp	r3, #0
 800ffec:	d003      	beq.n	800fff6 <_tx_byte_pool_info_get+0x52>
    {
    
        *first_suspended =  pool_ptr -> tx_byte_pool_suspension_list;
 800ffee:	68fb      	ldr	r3, [r7, #12]
 800fff0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fff4:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve the number of threads suspended on this byte pool.  */
    if (suspended_count != TX_NULL)
 800fff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fff8:	2b00      	cmp	r3, #0
 800fffa:	d003      	beq.n	8010004 <_tx_byte_pool_info_get+0x60>
    {
    
        *suspended_count =  (ULONG) pool_ptr -> tx_byte_pool_suspended_count;
 800fffc:	68fb      	ldr	r3, [r7, #12]
 800fffe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010002:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve the pointer to the next byte pool created.  */
    if (next_pool != TX_NULL)
 8010004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010006:	2b00      	cmp	r3, #0
 8010008:	d003      	beq.n	8010012 <_tx_byte_pool_info_get+0x6e>
    {
    
        *next_pool =  pool_ptr -> tx_byte_pool_created_next;
 801000a:	68fb      	ldr	r3, [r7, #12]
 801000c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801000e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010010:	601a      	str	r2, [r3, #0]
 8010012:	69fb      	ldr	r3, [r7, #28]
 8010014:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8010016:	697b      	ldr	r3, [r7, #20]
 8010018:	f383 8810 	msr	PRIMASK, r3
}
 801001c:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return completion status.  */
    return(TX_SUCCESS);
 801001e:	2300      	movs	r3, #0
}
 8010020:	4618      	mov	r0, r3
 8010022:	3724      	adds	r7, #36	; 0x24
 8010024:	46bd      	mov	sp, r7
 8010026:	f85d 7b04 	ldr.w	r7, [sp], #4
 801002a:	4770      	bx	lr

0801002c <_tx_byte_pool_search>:
/*                                            calculation,                */
/*                                            resulting in version 6.1.7  */
/*                                                                        */
/**************************************************************************/
UCHAR  *_tx_byte_pool_search(TX_BYTE_POOL *pool_ptr, ULONG memory_size)
{
 801002c:	b480      	push	{r7}
 801002e:	b095      	sub	sp, #84	; 0x54
 8010030:	af00      	add	r7, sp, #0
 8010032:	6078      	str	r0, [r7, #4]
 8010034:	6039      	str	r1, [r7, #0]
UCHAR           *next_ptr;
UCHAR           **this_block_link_ptr;
UCHAR           **next_block_link_ptr;
ULONG           available_bytes;
UINT            examine_blocks;
UINT            first_free_block_found =  TX_FALSE;
 8010036:	2300      	movs	r3, #0
 8010038:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 801003a:	f3ef 8310 	mrs	r3, PRIMASK
 801003e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8010040:	b672      	cpsid	i
    return(primask_value);
 8010042:	69fb      	ldr	r3, [r7, #28]
UCHAR           *work_ptr;
ULONG           total_theoretical_available;


    /* Disable interrupts.  */
    TX_DISABLE
 8010044:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* First, determine if there are enough bytes in the pool.  */
    /* Theoretical bytes available = free bytes + ((fragments-2) * overhead of each block) */
    total_theoretical_available = pool_ptr -> tx_byte_pool_available + ((pool_ptr -> tx_byte_pool_fragments - 2) * ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE))));
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	689a      	ldr	r2, [r3, #8]
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	68db      	ldr	r3, [r3, #12]
 801004e:	3b02      	subs	r3, #2
 8010050:	00db      	lsls	r3, r3, #3
 8010052:	4413      	add	r3, r2
 8010054:	63bb      	str	r3, [r7, #56]	; 0x38
    if (memory_size >= total_theoretical_available)
 8010056:	683a      	ldr	r2, [r7, #0]
 8010058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801005a:	429a      	cmp	r2, r3
 801005c:	d308      	bcc.n	8010070 <_tx_byte_pool_search+0x44>
 801005e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010060:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8010062:	69bb      	ldr	r3, [r7, #24]
 8010064:	f383 8810 	msr	PRIMASK, r3
}
 8010068:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Not enough memory, return a NULL pointer.  */
        current_ptr =  TX_NULL;
 801006a:	2300      	movs	r3, #0
 801006c:	64bb      	str	r3, [r7, #72]	; 0x48
 801006e:	e0db      	b.n	8010228 <_tx_byte_pool_search+0x1fc>
    }
    else
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 8010070:	4b71      	ldr	r3, [pc, #452]	; (8010238 <_tx_byte_pool_search+0x20c>)
 8010072:	681b      	ldr	r3, [r3, #0]
 8010074:	637b      	str	r3, [r7, #52]	; 0x34

        /* Setup ownership of the byte pool.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801007a:	621a      	str	r2, [r3, #32]

        /* Walk through the memory pool in search for a large enough block.  */
        current_ptr =      pool_ptr -> tx_byte_pool_search;
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	695b      	ldr	r3, [r3, #20]
 8010080:	64bb      	str	r3, [r7, #72]	; 0x48
        examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	68db      	ldr	r3, [r3, #12]
 8010086:	3301      	adds	r3, #1
 8010088:	643b      	str	r3, [r7, #64]	; 0x40
        available_bytes =  ((ULONG) 0);
 801008a:	2300      	movs	r3, #0
 801008c:	647b      	str	r3, [r7, #68]	; 0x44
            /* Increment the number of fragments searched on this pool.  */
            pool_ptr -> tx_byte_pool_performance_search_count++;
#endif

            /* Check to see if this block is free.  */
            work_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 801008e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010090:	3304      	adds	r3, #4
 8010092:	633b      	str	r3, [r7, #48]	; 0x30
            free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 8010094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010096:	62fb      	str	r3, [r7, #44]	; 0x2c
            if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 8010098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801009a:	681b      	ldr	r3, [r3, #0]
 801009c:	4a67      	ldr	r2, [pc, #412]	; (801023c <_tx_byte_pool_search+0x210>)
 801009e:	4293      	cmp	r3, r2
 80100a0:	d143      	bne.n	801012a <_tx_byte_pool_search+0xfe>
            {

                /* Determine if this is the first free block.  */
                if (first_free_block_found == TX_FALSE)
 80100a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80100a4:	2b00      	cmp	r3, #0
 80100a6:	d104      	bne.n	80100b2 <_tx_byte_pool_search+0x86>
                {
                    /* This is the first free block.  */
                    pool_ptr->tx_byte_pool_search =  current_ptr;
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80100ac:	615a      	str	r2, [r3, #20]

                    /* Set the flag to indicate we have found the first free
                       block.  */
                    first_free_block_found =  TX_TRUE;
 80100ae:	2301      	movs	r3, #1
 80100b0:	63fb      	str	r3, [r7, #60]	; 0x3c
                }

                /* Block is free, see if it is large enough.  */

                /* Pickup the next block's pointer.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 80100b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80100b4:	62bb      	str	r3, [r7, #40]	; 0x28
                next_ptr =             *this_block_link_ptr;
 80100b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80100b8:	681b      	ldr	r3, [r3, #0]
 80100ba:	627b      	str	r3, [r7, #36]	; 0x24

                /* Calculate the number of bytes available in this block.  */
                available_bytes =   TX_UCHAR_POINTER_DIF(next_ptr, current_ptr);
 80100bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80100be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80100c0:	1ad3      	subs	r3, r2, r3
 80100c2:	647b      	str	r3, [r7, #68]	; 0x44
                available_bytes =   available_bytes - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 80100c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80100c6:	3b08      	subs	r3, #8
 80100c8:	647b      	str	r3, [r7, #68]	; 0x44

                /* If this is large enough, we are done because our first-fit algorithm
                   has been satisfied!  */
                if (available_bytes >= memory_size)
 80100ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80100cc:	683b      	ldr	r3, [r7, #0]
 80100ce:	429a      	cmp	r2, r3
 80100d0:	d255      	bcs.n	801017e <_tx_byte_pool_search+0x152>
                }
                else
                {

                    /* Clear the available bytes variable.  */
                    available_bytes =  ((ULONG) 0);
 80100d2:	2300      	movs	r3, #0
 80100d4:	647b      	str	r3, [r7, #68]	; 0x44

                    /* Not enough memory, check to see if the neighbor is
                       free and can be merged.  */
                    work_ptr =  TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 80100d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100d8:	3304      	adds	r3, #4
 80100da:	633b      	str	r3, [r7, #48]	; 0x30
                    free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 80100dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100de:	62fb      	str	r3, [r7, #44]	; 0x2c
                    if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 80100e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100e2:	681b      	ldr	r3, [r3, #0]
 80100e4:	4a55      	ldr	r2, [pc, #340]	; (801023c <_tx_byte_pool_search+0x210>)
 80100e6:	4293      	cmp	r3, r2
 80100e8:	d113      	bne.n	8010112 <_tx_byte_pool_search+0xe6>
                    {

                        /* Yes, neighbor block can be merged!  This is quickly accomplished
                           by updating the current block with the next blocks pointer.  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 80100ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100ec:	623b      	str	r3, [r7, #32]
                        *this_block_link_ptr =  *next_block_link_ptr;
 80100ee:	6a3b      	ldr	r3, [r7, #32]
 80100f0:	681a      	ldr	r2, [r3, #0]
 80100f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80100f4:	601a      	str	r2, [r3, #0]

                        /* Reduce the fragment total.  We don't need to increase the bytes
                           available because all free headers are also included in the available
                           count.  */
                        pool_ptr -> tx_byte_pool_fragments--;
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	68db      	ldr	r3, [r3, #12]
 80100fa:	1e5a      	subs	r2, r3, #1
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	60da      	str	r2, [r3, #12]
                        /* Increment the number of blocks merged on this pool.  */
                        pool_ptr -> tx_byte_pool_performance_merge_count++;
#endif

                        /* See if the search pointer is affected.  */
                        if (pool_ptr -> tx_byte_pool_search ==  next_ptr)
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	695b      	ldr	r3, [r3, #20]
 8010104:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010106:	429a      	cmp	r2, r3
 8010108:	d114      	bne.n	8010134 <_tx_byte_pool_search+0x108>
                        {
                            /* Yes, update the search pointer.   */
                            pool_ptr -> tx_byte_pool_search =  current_ptr;
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801010e:	615a      	str	r2, [r3, #20]
 8010110:	e010      	b.n	8010134 <_tx_byte_pool_search+0x108>
                        }
                    }
                    else
                    {
                        /* Neighbor is not free so we can skip over it!  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 8010112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010114:	623b      	str	r3, [r7, #32]
                        current_ptr =  *next_block_link_ptr;
 8010116:	6a3b      	ldr	r3, [r7, #32]
 8010118:	681b      	ldr	r3, [r3, #0]
 801011a:	64bb      	str	r3, [r7, #72]	; 0x48

                        /* Decrement the examined block count to account for this one.  */
                        if (examine_blocks != ((UINT) 0))
 801011c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801011e:	2b00      	cmp	r3, #0
 8010120:	d008      	beq.n	8010134 <_tx_byte_pool_search+0x108>
                        {
                            examine_blocks--;
 8010122:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010124:	3b01      	subs	r3, #1
 8010126:	643b      	str	r3, [r7, #64]	; 0x40
 8010128:	e004      	b.n	8010134 <_tx_byte_pool_search+0x108>
            }
            else
            {

                /* Block is not free, move to next block.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 801012a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801012c:	62bb      	str	r3, [r7, #40]	; 0x28
                current_ptr =  *this_block_link_ptr;
 801012e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010130:	681b      	ldr	r3, [r3, #0]
 8010132:	64bb      	str	r3, [r7, #72]	; 0x48
            }

            /* Another block has been searched... decrement counter.  */
            if (examine_blocks != ((UINT) 0))
 8010134:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010136:	2b00      	cmp	r3, #0
 8010138:	d002      	beq.n	8010140 <_tx_byte_pool_search+0x114>
            {

                examine_blocks--;
 801013a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801013c:	3b01      	subs	r3, #1
 801013e:	643b      	str	r3, [r7, #64]	; 0x40
 8010140:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010142:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8010144:	693b      	ldr	r3, [r7, #16]
 8010146:	f383 8810 	msr	PRIMASK, r3
}
 801014a:	bf00      	nop
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 801014c:	f3ef 8310 	mrs	r3, PRIMASK
 8010150:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8010152:	b672      	cpsid	i
    return(primask_value);
 8010154:	697b      	ldr	r3, [r7, #20]

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts.  */
            TX_DISABLE
 8010156:	64fb      	str	r3, [r7, #76]	; 0x4c

            /* Determine if anything has changed in terms of pool ownership.  */
            if (pool_ptr -> tx_byte_pool_owner != thread_ptr)
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	6a1b      	ldr	r3, [r3, #32]
 801015c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801015e:	429a      	cmp	r2, r3
 8010160:	d009      	beq.n	8010176 <_tx_byte_pool_search+0x14a>
            {

                /* Pool changed ownership in the brief period interrupts were
                   enabled.  Reset the search.  */
                current_ptr =      pool_ptr -> tx_byte_pool_search;
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	695b      	ldr	r3, [r3, #20]
 8010166:	64bb      	str	r3, [r7, #72]	; 0x48
                examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	68db      	ldr	r3, [r3, #12]
 801016c:	3301      	adds	r3, #1
 801016e:	643b      	str	r3, [r7, #64]	; 0x40

                /* Setup our ownership again.  */
                pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010174:	621a      	str	r2, [r3, #32]
            }
        } while(examine_blocks != ((UINT) 0));
 8010176:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010178:	2b00      	cmp	r3, #0
 801017a:	d188      	bne.n	801008e <_tx_byte_pool_search+0x62>
 801017c:	e000      	b.n	8010180 <_tx_byte_pool_search+0x154>
                    break;
 801017e:	bf00      	nop

        /* Determine if a block was found.  If so, determine if it needs to be
           split.  */
        if (available_bytes != ((ULONG) 0))
 8010180:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010182:	2b00      	cmp	r3, #0
 8010184:	d048      	beq.n	8010218 <_tx_byte_pool_search+0x1ec>
        {

            /* Determine if we need to split this block.  */
            if ((available_bytes - memory_size) >= ((ULONG) TX_BYTE_BLOCK_MIN))
 8010186:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010188:	683b      	ldr	r3, [r7, #0]
 801018a:	1ad3      	subs	r3, r2, r3
 801018c:	2b13      	cmp	r3, #19
 801018e:	d91e      	bls.n	80101ce <_tx_byte_pool_search+0x1a2>
            {

                /* Split the block.  */
                next_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (memory_size + ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 8010190:	683b      	ldr	r3, [r7, #0]
 8010192:	3308      	adds	r3, #8
 8010194:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010196:	4413      	add	r3, r2
 8010198:	627b      	str	r3, [r7, #36]	; 0x24

                /* Setup the new free block.  */
                next_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 801019a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801019c:	623b      	str	r3, [r7, #32]
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 801019e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80101a0:	62bb      	str	r3, [r7, #40]	; 0x28
                *next_block_link_ptr =  *this_block_link_ptr;
 80101a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101a4:	681a      	ldr	r2, [r3, #0]
 80101a6:	6a3b      	ldr	r3, [r7, #32]
 80101a8:	601a      	str	r2, [r3, #0]
                work_ptr =              TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 80101aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101ac:	3304      	adds	r3, #4
 80101ae:	633b      	str	r3, [r7, #48]	; 0x30
                free_ptr =              TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 80101b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101b2:	62fb      	str	r3, [r7, #44]	; 0x2c
                *free_ptr =             TX_BYTE_BLOCK_FREE;
 80101b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101b6:	4a21      	ldr	r2, [pc, #132]	; (801023c <_tx_byte_pool_search+0x210>)
 80101b8:	601a      	str	r2, [r3, #0]

                /* Increase the total fragment counter.  */
                pool_ptr -> tx_byte_pool_fragments++;
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	68db      	ldr	r3, [r3, #12]
 80101be:	1c5a      	adds	r2, r3, #1
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	60da      	str	r2, [r3, #12]

                /* Update the current pointer to point at the newly created block.  */
                *this_block_link_ptr =  next_ptr;
 80101c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80101c8:	601a      	str	r2, [r3, #0]

                /* Set available equal to memory size for subsequent calculation.  */
                available_bytes =  memory_size;
 80101ca:	683b      	ldr	r3, [r7, #0]
 80101cc:	647b      	str	r3, [r7, #68]	; 0x44
                pool_ptr -> tx_byte_pool_performance_split_count++;
#endif
            }

            /* In any case, mark the current block as allocated.  */
            work_ptr =              TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 80101ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80101d0:	3304      	adds	r3, #4
 80101d2:	633b      	str	r3, [r7, #48]	; 0x30
            this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(work_ptr);
 80101d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101d6:	62bb      	str	r3, [r7, #40]	; 0x28
            *this_block_link_ptr =  TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 80101d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101da:	687a      	ldr	r2, [r7, #4]
 80101dc:	601a      	str	r2, [r3, #0]

            /* Reduce the number of available bytes in the pool.  */
            pool_ptr -> tx_byte_pool_available =  (pool_ptr -> tx_byte_pool_available - available_bytes) - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	689a      	ldr	r2, [r3, #8]
 80101e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80101e4:	1ad3      	subs	r3, r2, r3
 80101e6:	f1a3 0208 	sub.w	r2, r3, #8
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	609a      	str	r2, [r3, #8]

            /* Determine if the search pointer needs to be updated. This is only done
               if the search pointer matches the block to be returned.  */
            if (current_ptr == pool_ptr -> tx_byte_pool_search)
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	695b      	ldr	r3, [r3, #20]
 80101f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80101f4:	429a      	cmp	r2, r3
 80101f6:	d105      	bne.n	8010204 <_tx_byte_pool_search+0x1d8>
            {

                /* Yes, update the search pointer to the next block.  */
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 80101f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80101fa:	62bb      	str	r3, [r7, #40]	; 0x28
                pool_ptr -> tx_byte_pool_search =  *this_block_link_ptr;
 80101fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101fe:	681a      	ldr	r2, [r3, #0]
 8010200:	687b      	ldr	r3, [r7, #4]
 8010202:	615a      	str	r2, [r3, #20]
 8010204:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010206:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8010208:	68fb      	ldr	r3, [r7, #12]
 801020a:	f383 8810 	msr	PRIMASK, r3
}
 801020e:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Adjust the pointer for the application.  */
            current_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 8010210:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010212:	3308      	adds	r3, #8
 8010214:	64bb      	str	r3, [r7, #72]	; 0x48
 8010216:	e007      	b.n	8010228 <_tx_byte_pool_search+0x1fc>
 8010218:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801021a:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801021c:	68bb      	ldr	r3, [r7, #8]
 801021e:	f383 8810 	msr	PRIMASK, r3
}
 8010222:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Set current pointer to NULL to indicate nothing was found.  */
            current_ptr =  TX_NULL;
 8010224:	2300      	movs	r3, #0
 8010226:	64bb      	str	r3, [r7, #72]	; 0x48
        }
    }

    /* Return the search pointer.  */
    return(current_ptr);
 8010228:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 801022a:	4618      	mov	r0, r3
 801022c:	3754      	adds	r7, #84	; 0x54
 801022e:	46bd      	mov	sp, r7
 8010230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010234:	4770      	bx	lr
 8010236:	bf00      	nop
 8010238:	20026064 	.word	0x20026064
 801023c:	ffffeeee 	.word	0xffffeeee

08010240 <_tx_byte_release>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_release(VOID *memory_ptr)
{
 8010240:	b580      	push	{r7, lr}
 8010242:	b09a      	sub	sp, #104	; 0x68
 8010244:	af00      	add	r7, sp, #0
 8010246:	6078      	str	r0, [r7, #4]
UCHAR               **block_link_ptr;
UCHAR               **suspend_info_ptr;


    /* Default to successful status.  */
    status =  TX_SUCCESS;
 8010248:	2300      	movs	r3, #0
 801024a:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Set the pool pointer to NULL.  */
    pool_ptr =  TX_NULL;
 801024c:	2300      	movs	r3, #0
 801024e:	65fb      	str	r3, [r7, #92]	; 0x5c
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8010250:	f3ef 8310 	mrs	r3, PRIMASK
 8010254:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" CPSID i" : : : "memory" );
 8010256:	b672      	cpsid	i
    return(primask_value);
 8010258:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    /* Lockout interrupts.  */
    TX_DISABLE
 801025a:	667b      	str	r3, [r7, #100]	; 0x64

    /* Determine if the memory pointer is valid.  */
    work_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(memory_ptr);
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	65bb      	str	r3, [r7, #88]	; 0x58
    if (work_ptr != TX_NULL)
 8010260:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010262:	2b00      	cmp	r3, #0
 8010264:	d027      	beq.n	80102b6 <_tx_byte_release+0x76>
    {
        
        /* Back off the memory pointer to pickup its header.  */
        work_ptr =  TX_UCHAR_POINTER_SUB(work_ptr, ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE))));
 8010266:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010268:	3b08      	subs	r3, #8
 801026a:	65bb      	str	r3, [r7, #88]	; 0x58

        /* There is a pointer, pickup the pool pointer address.  */
        temp_ptr =  TX_UCHAR_POINTER_ADD(work_ptr, (sizeof(UCHAR *)));
 801026c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801026e:	3304      	adds	r3, #4
 8010270:	657b      	str	r3, [r7, #84]	; 0x54
        free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(temp_ptr);
 8010272:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010274:	653b      	str	r3, [r7, #80]	; 0x50
        if ((*free_ptr) != TX_BYTE_BLOCK_FREE)
 8010276:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010278:	681b      	ldr	r3, [r3, #0]
 801027a:	4a7c      	ldr	r2, [pc, #496]	; (801046c <_tx_byte_release+0x22c>)
 801027c:	4293      	cmp	r3, r2
 801027e:	d017      	beq.n	80102b0 <_tx_byte_release+0x70>
        {

            /* Pickup the pool pointer.  */
            temp_ptr =  TX_UCHAR_POINTER_ADD(work_ptr, (sizeof(UCHAR *)));
 8010280:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010282:	3304      	adds	r3, #4
 8010284:	657b      	str	r3, [r7, #84]	; 0x54
            byte_pool_ptr =  TX_UCHAR_TO_INDIRECT_BYTE_POOL_POINTER(temp_ptr);
 8010286:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010288:	64fb      	str	r3, [r7, #76]	; 0x4c
            pool_ptr =  *byte_pool_ptr;
 801028a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801028c:	681b      	ldr	r3, [r3, #0]
 801028e:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* See if we have a valid pool pointer.  */
            if (pool_ptr == TX_NULL)
 8010290:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010292:	2b00      	cmp	r3, #0
 8010294:	d102      	bne.n	801029c <_tx_byte_release+0x5c>
            {
                
                /* Return pointer error.  */
                status =  TX_PTR_ERROR;
 8010296:	2303      	movs	r3, #3
 8010298:	663b      	str	r3, [r7, #96]	; 0x60
 801029a:	e00e      	b.n	80102ba <_tx_byte_release+0x7a>
            }
            else
            {

                /* See if we have a valid pool.  */
                if (pool_ptr -> tx_byte_pool_id != TX_BYTE_POOL_ID)
 801029c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801029e:	681b      	ldr	r3, [r3, #0]
 80102a0:	4a73      	ldr	r2, [pc, #460]	; (8010470 <_tx_byte_release+0x230>)
 80102a2:	4293      	cmp	r3, r2
 80102a4:	d009      	beq.n	80102ba <_tx_byte_release+0x7a>
                {
                
                    /* Return pointer error.  */
                    status =  TX_PTR_ERROR;
 80102a6:	2303      	movs	r3, #3
 80102a8:	663b      	str	r3, [r7, #96]	; 0x60
                    
                    /* Reset the pool pointer is NULL.  */
                    pool_ptr =  TX_NULL;
 80102aa:	2300      	movs	r3, #0
 80102ac:	65fb      	str	r3, [r7, #92]	; 0x5c
 80102ae:	e004      	b.n	80102ba <_tx_byte_release+0x7a>
        }
        else
        {

            /* Return pointer error.  */
            status =  TX_PTR_ERROR;
 80102b0:	2303      	movs	r3, #3
 80102b2:	663b      	str	r3, [r7, #96]	; 0x60
 80102b4:	e001      	b.n	80102ba <_tx_byte_release+0x7a>
    }
    else
    {

        /* Return pointer error.  */
        status =  TX_PTR_ERROR;
 80102b6:	2303      	movs	r3, #3
 80102b8:	663b      	str	r3, [r7, #96]	; 0x60
    }

    /* Determine if the pointer is valid.  */
    if (pool_ptr == TX_NULL)
 80102ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80102bc:	2b00      	cmp	r3, #0
 80102be:	d105      	bne.n	80102cc <_tx_byte_release+0x8c>
 80102c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80102c2:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80102c4:	6a3b      	ldr	r3, [r7, #32]
 80102c6:	f383 8810 	msr	PRIMASK, r3
}
 80102ca:	e0c9      	b.n	8010460 <_tx_byte_release+0x220>
    {
    
        /* At this point, we know that the pointer is valid.  */

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 80102cc:	4b69      	ldr	r3, [pc, #420]	; (8010474 <_tx_byte_release+0x234>)
 80102ce:	681b      	ldr	r3, [r3, #0]
 80102d0:	64bb      	str	r3, [r7, #72]	; 0x48

        /* Indicate that this thread is the current owner.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 80102d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80102d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80102d6:	621a      	str	r2, [r3, #32]

        /* Log this kernel call.  */
        TX_EL_BYTE_RELEASE_INSERT

        /* Release the memory.  */
        temp_ptr =   TX_UCHAR_POINTER_ADD(work_ptr, (sizeof(UCHAR *)));
 80102d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80102da:	3304      	adds	r3, #4
 80102dc:	657b      	str	r3, [r7, #84]	; 0x54
        free_ptr =   TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(temp_ptr);
 80102de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80102e0:	653b      	str	r3, [r7, #80]	; 0x50
        *free_ptr =  TX_BYTE_BLOCK_FREE;
 80102e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80102e4:	4a61      	ldr	r2, [pc, #388]	; (801046c <_tx_byte_release+0x22c>)
 80102e6:	601a      	str	r2, [r3, #0]

        /* Update the number of available bytes in the pool.  */
        block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(work_ptr);
 80102e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80102ea:	647b      	str	r3, [r7, #68]	; 0x44
        next_block_ptr =  *block_link_ptr;
 80102ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80102ee:	681b      	ldr	r3, [r3, #0]
 80102f0:	643b      	str	r3, [r7, #64]	; 0x40
        pool_ptr -> tx_byte_pool_available =  
            pool_ptr -> tx_byte_pool_available + TX_UCHAR_POINTER_DIF(next_block_ptr, work_ptr);
 80102f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80102f4:	689b      	ldr	r3, [r3, #8]
 80102f6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80102f8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80102fa:	1a8a      	subs	r2, r1, r2
 80102fc:	441a      	add	r2, r3
        pool_ptr -> tx_byte_pool_available =  
 80102fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010300:	609a      	str	r2, [r3, #8]

        /* Determine if the free block is prior to current search pointer.  */
        if (work_ptr < (pool_ptr -> tx_byte_pool_search))
 8010302:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010304:	695b      	ldr	r3, [r3, #20]
 8010306:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010308:	429a      	cmp	r2, r3
 801030a:	d202      	bcs.n	8010312 <_tx_byte_release+0xd2>
        {

            /* Yes, update the search pointer to the released block.  */
            pool_ptr -> tx_byte_pool_search =  work_ptr;
 801030c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801030e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010310:	615a      	str	r2, [r3, #20]
        }

        /* Determine if there are threads suspended on this byte pool.  */
        if (pool_ptr -> tx_byte_pool_suspended_count != TX_NO_SUSPENSIONS)
 8010312:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010316:	2b00      	cmp	r3, #0
 8010318:	f000 809c 	beq.w	8010454 <_tx_byte_release+0x214>
        {
                
            /* Now examine the suspension list to find threads waiting for 
               memory.  Maybe it is now available!  */
            while (pool_ptr -> tx_byte_pool_suspended_count != TX_NO_SUSPENSIONS)
 801031c:	e08a      	b.n	8010434 <_tx_byte_release+0x1f4>
            {

                /* Pickup the first suspended thread pointer.  */
                susp_thread_ptr =  pool_ptr -> tx_byte_pool_suspension_list;
 801031e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010322:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* Pickup the size of the memory the thread is requesting.  */
                memory_size =  susp_thread_ptr -> tx_thread_suspend_info;
 8010324:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010326:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010328:	63bb      	str	r3, [r7, #56]	; 0x38
 801032a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801032c:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801032e:	69bb      	ldr	r3, [r7, #24]
 8010330:	f383 8810 	msr	PRIMASK, r3
}
 8010334:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* See if the request can be satisfied.  */
                work_ptr =  _tx_byte_pool_search(pool_ptr, memory_size);
 8010336:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010338:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 801033a:	f7ff fe77 	bl	801002c <_tx_byte_pool_search>
 801033e:	65b8      	str	r0, [r7, #88]	; 0x58
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8010340:	f3ef 8310 	mrs	r3, PRIMASK
 8010344:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8010346:	b672      	cpsid	i
    return(primask_value);
 8010348:	69fb      	ldr	r3, [r7, #28]

                /* Optional processing extension.  */
                TX_BYTE_RELEASE_EXTENSION

                /* Disable interrupts.  */
                TX_DISABLE
 801034a:	667b      	str	r3, [r7, #100]	; 0x64

                /* Indicate that this thread is the current owner.  */
                pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 801034c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801034e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010350:	621a      	str	r2, [r3, #32]

                /* If there is not enough memory, break this loop!  */
                if (work_ptr == TX_NULL)
 8010352:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010354:	2b00      	cmp	r3, #0
 8010356:	d073      	beq.n	8010440 <_tx_byte_release+0x200>
                  /* Break out of the loop.  */
                    break;
                }

                /* Check to make sure the thread is still suspended.  */
                if (susp_thread_ptr ==  pool_ptr -> tx_byte_pool_suspension_list)
 8010358:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801035a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801035c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801035e:	429a      	cmp	r2, r3
 8010360:	d145      	bne.n	80103ee <_tx_byte_release+0x1ae>
                {

                    /* Also, makes sure the memory size is the same.  */
                    if (susp_thread_ptr -> tx_thread_suspend_info == memory_size)
 8010362:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010364:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010366:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010368:	429a      	cmp	r2, r3
 801036a:	d140      	bne.n	80103ee <_tx_byte_release+0x1ae>
                    {
                  
                        /* Remove the suspended thread from the list.  */

                        /* Decrement the number of threads suspended.  */
                        pool_ptr -> tx_byte_pool_suspended_count--;
 801036c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801036e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010370:	1e5a      	subs	r2, r3, #1
 8010372:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010374:	629a      	str	r2, [r3, #40]	; 0x28

                        /* Pickup the suspended count.  */
                        suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 8010376:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801037a:	637b      	str	r3, [r7, #52]	; 0x34

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 801037c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801037e:	2b00      	cmp	r3, #0
 8010380:	d103      	bne.n	801038a <_tx_byte_release+0x14a>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            pool_ptr -> tx_byte_pool_suspension_list =  TX_NULL;
 8010382:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010384:	2200      	movs	r2, #0
 8010386:	625a      	str	r2, [r3, #36]	; 0x24
 8010388:	e00e      	b.n	80103a8 <_tx_byte_release+0x168>
                        {

                            /* At least one more thread is on the same expiration list.  */

                            /* Update the list head pointer.  */
                            next_thread =                                susp_thread_ptr -> tx_thread_suspended_next;
 801038a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801038c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801038e:	633b      	str	r3, [r7, #48]	; 0x30
                            pool_ptr -> tx_byte_pool_suspension_list =   next_thread;
 8010390:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010392:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010394:	625a      	str	r2, [r3, #36]	; 0x24

                            /* Update the links of the adjacent threads.  */
                            previous_thread =                              susp_thread_ptr -> tx_thread_suspended_previous;
 8010396:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010398:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801039a:	62fb      	str	r3, [r7, #44]	; 0x2c
                            next_thread -> tx_thread_suspended_previous =  previous_thread;
 801039c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801039e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80103a0:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =  next_thread;
 80103a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80103a6:	671a      	str	r2, [r3, #112]	; 0x70
                        }

                        /* Prepare for resumption of the thread.  */

                        /* Clear cleanup routine to avoid timeout.  */
                        susp_thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 80103a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80103aa:	2200      	movs	r2, #0
 80103ac:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Return this block pointer to the suspended thread waiting for
                           a block.  */
                        suspend_info_ptr =   TX_VOID_TO_INDIRECT_UCHAR_POINTER_CONVERT(susp_thread_ptr -> tx_thread_additional_suspend_info);
 80103ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80103b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80103b2:	62bb      	str	r3, [r7, #40]	; 0x28
                        *suspend_info_ptr =  work_ptr;
 80103b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80103b6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80103b8:	601a      	str	r2, [r3, #0]

                        /* Clear the memory pointer to indicate that it was given to the suspended thread.  */
                        work_ptr =  TX_NULL;
 80103ba:	2300      	movs	r3, #0
 80103bc:	65bb      	str	r3, [r7, #88]	; 0x58
                        
                        /* Put return status into the thread control block.  */
                        susp_thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 80103be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80103c0:	2200      	movs	r2, #0
 80103c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

                        /* Restore interrupts.  */
                        TX_RESTORE
#else
                        /* Temporarily disable preemption.  */
                        _tx_thread_preempt_disable++;
 80103c6:	4b2c      	ldr	r3, [pc, #176]	; (8010478 <_tx_byte_release+0x238>)
 80103c8:	681b      	ldr	r3, [r3, #0]
 80103ca:	3301      	adds	r3, #1
 80103cc:	4a2a      	ldr	r2, [pc, #168]	; (8010478 <_tx_byte_release+0x238>)
 80103ce:	6013      	str	r3, [r2, #0]
 80103d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80103d2:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80103d4:	693b      	ldr	r3, [r7, #16]
 80103d6:	f383 8810 	msr	PRIMASK, r3
}
 80103da:	bf00      	nop

                        /* Restore interrupts.  */
                        TX_RESTORE

                        /* Resume thread.  */
                        _tx_thread_system_resume(susp_thread_ptr);
 80103dc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80103de:	f001 fc05 	bl	8011bec <_tx_thread_system_resume>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80103e2:	f3ef 8310 	mrs	r3, PRIMASK
 80103e6:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" CPSID i" : : : "memory" );
 80103e8:	b672      	cpsid	i
    return(primask_value);
 80103ea:	697b      	ldr	r3, [r7, #20]
#endif

                        /* Lockout interrupts.  */
                        TX_DISABLE
 80103ec:	667b      	str	r3, [r7, #100]	; 0x64
                    }
                }
                    
                /* Determine if the memory was given to the suspended thread.  */
                if (work_ptr != TX_NULL)
 80103ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80103f0:	2b00      	cmp	r3, #0
 80103f2:	d01f      	beq.n	8010434 <_tx_byte_release+0x1f4>
                
                    /* No, it wasn't given to the suspended thread.  */

                    /* Put the memory back on the available list since this thread is no longer
                       suspended.  */
                    work_ptr =  TX_UCHAR_POINTER_SUB(work_ptr, (((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 80103f4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80103f6:	3b08      	subs	r3, #8
 80103f8:	65bb      	str	r3, [r7, #88]	; 0x58
                    temp_ptr =  TX_UCHAR_POINTER_ADD(work_ptr, (sizeof(UCHAR *)));
 80103fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80103fc:	3304      	adds	r3, #4
 80103fe:	657b      	str	r3, [r7, #84]	; 0x54
                    free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(temp_ptr);
 8010400:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010402:	653b      	str	r3, [r7, #80]	; 0x50
                    *free_ptr =  TX_BYTE_BLOCK_FREE;
 8010404:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010406:	4a19      	ldr	r2, [pc, #100]	; (801046c <_tx_byte_release+0x22c>)
 8010408:	601a      	str	r2, [r3, #0]

                    /* Update the number of available bytes in the pool.  */
                    block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(work_ptr);
 801040a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801040c:	647b      	str	r3, [r7, #68]	; 0x44
                    next_block_ptr =  *block_link_ptr;
 801040e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010410:	681b      	ldr	r3, [r3, #0]
 8010412:	643b      	str	r3, [r7, #64]	; 0x40
                    pool_ptr -> tx_byte_pool_available =  
                        pool_ptr -> tx_byte_pool_available + TX_UCHAR_POINTER_DIF(next_block_ptr, work_ptr);
 8010414:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010416:	689b      	ldr	r3, [r3, #8]
 8010418:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801041a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801041c:	1a8a      	subs	r2, r1, r2
 801041e:	441a      	add	r2, r3
                    pool_ptr -> tx_byte_pool_available =  
 8010420:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010422:	609a      	str	r2, [r3, #8]

                    /* Determine if the current pointer is before the search pointer.  */
                    if (work_ptr < (pool_ptr -> tx_byte_pool_search))
 8010424:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010426:	695b      	ldr	r3, [r3, #20]
 8010428:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801042a:	429a      	cmp	r2, r3
 801042c:	d202      	bcs.n	8010434 <_tx_byte_release+0x1f4>
                    {

                        /* Yes, update the search pointer.  */
                        pool_ptr -> tx_byte_pool_search =  work_ptr;
 801042e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010430:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010432:	615a      	str	r2, [r3, #20]
            while (pool_ptr -> tx_byte_pool_suspended_count != TX_NO_SUSPENSIONS)
 8010434:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010438:	2b00      	cmp	r3, #0
 801043a:	f47f af70 	bne.w	801031e <_tx_byte_release+0xde>
 801043e:	e000      	b.n	8010442 <_tx_byte_release+0x202>
                    break;
 8010440:	bf00      	nop
 8010442:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010444:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8010446:	68fb      	ldr	r3, [r7, #12]
 8010448:	f383 8810 	msr	PRIMASK, r3
}
 801044c:	bf00      	nop
            
            /* Restore interrupts.  */
            TX_RESTORE

            /* Check for preemption.  */
            _tx_thread_system_preempt_check();
 801044e:	f001 fb89 	bl	8011b64 <_tx_thread_system_preempt_check>
 8010452:	e005      	b.n	8010460 <_tx_byte_release+0x220>
 8010454:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010456:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8010458:	68bb      	ldr	r3, [r7, #8]
 801045a:	f383 8810 	msr	PRIMASK, r3
}
 801045e:	bf00      	nop
            TX_RESTORE
        }
    }

    /* Return completion status.  */
    return(status);
 8010460:	6e3b      	ldr	r3, [r7, #96]	; 0x60
}
 8010462:	4618      	mov	r0, r3
 8010464:	3768      	adds	r7, #104	; 0x68
 8010466:	46bd      	mov	sp, r7
 8010468:	bd80      	pop	{r7, pc}
 801046a:	bf00      	nop
 801046c:	ffffeeee 	.word	0xffffeeee
 8010470:	42595445 	.word	0x42595445
 8010474:	20026064 	.word	0x20026064
 8010478:	200260fc 	.word	0x200260fc

0801047c <_tx_initialize_high_level>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _tx_initialize_high_level(VOID)
{
 801047c:	b580      	push	{r7, lr}
 801047e:	af00      	add	r7, sp, #0

    /* Initialize the event log, if enabled.  */
    TX_EL_INITIALIZE

    /* Call the thread control initialization function.  */
    _tx_thread_initialize();
 8010480:	f001 f958 	bl	8011734 <_tx_thread_initialize>

#ifndef TX_NO_TIMER

    /* Call the timer control initialization function.  */
    _tx_timer_initialize();
 8010484:	f001 ffd0 	bl	8012428 <_tx_timer_initialize>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Call the semaphore initialization function.  */
    _tx_semaphore_initialize();
 8010488:	4b12      	ldr	r3, [pc, #72]	; (80104d4 <_tx_initialize_high_level+0x58>)
 801048a:	2200      	movs	r2, #0
 801048c:	601a      	str	r2, [r3, #0]
 801048e:	4b12      	ldr	r3, [pc, #72]	; (80104d8 <_tx_initialize_high_level+0x5c>)
 8010490:	2200      	movs	r2, #0
 8010492:	601a      	str	r2, [r3, #0]

    /* Call the queue initialization function.  */
    _tx_queue_initialize();
 8010494:	4b11      	ldr	r3, [pc, #68]	; (80104dc <_tx_initialize_high_level+0x60>)
 8010496:	2200      	movs	r2, #0
 8010498:	601a      	str	r2, [r3, #0]
 801049a:	4b11      	ldr	r3, [pc, #68]	; (80104e0 <_tx_initialize_high_level+0x64>)
 801049c:	2200      	movs	r2, #0
 801049e:	601a      	str	r2, [r3, #0]

    /* Call the event flag initialization function.  */
    _tx_event_flags_initialize();
 80104a0:	4b10      	ldr	r3, [pc, #64]	; (80104e4 <_tx_initialize_high_level+0x68>)
 80104a2:	2200      	movs	r2, #0
 80104a4:	601a      	str	r2, [r3, #0]
 80104a6:	4b10      	ldr	r3, [pc, #64]	; (80104e8 <_tx_initialize_high_level+0x6c>)
 80104a8:	2200      	movs	r2, #0
 80104aa:	601a      	str	r2, [r3, #0]

    /* Call the block pool initialization function.  */
    _tx_block_pool_initialize();
 80104ac:	4b0f      	ldr	r3, [pc, #60]	; (80104ec <_tx_initialize_high_level+0x70>)
 80104ae:	2200      	movs	r2, #0
 80104b0:	601a      	str	r2, [r3, #0]
 80104b2:	4b0f      	ldr	r3, [pc, #60]	; (80104f0 <_tx_initialize_high_level+0x74>)
 80104b4:	2200      	movs	r2, #0
 80104b6:	601a      	str	r2, [r3, #0]

    /* Call the byte pool initialization function.  */
    _tx_byte_pool_initialize();
 80104b8:	4b0e      	ldr	r3, [pc, #56]	; (80104f4 <_tx_initialize_high_level+0x78>)
 80104ba:	2200      	movs	r2, #0
 80104bc:	601a      	str	r2, [r3, #0]
 80104be:	4b0e      	ldr	r3, [pc, #56]	; (80104f8 <_tx_initialize_high_level+0x7c>)
 80104c0:	2200      	movs	r2, #0
 80104c2:	601a      	str	r2, [r3, #0]

    /* Call the mutex initialization function.  */
    _tx_mutex_initialize();
 80104c4:	4b0d      	ldr	r3, [pc, #52]	; (80104fc <_tx_initialize_high_level+0x80>)
 80104c6:	2200      	movs	r2, #0
 80104c8:	601a      	str	r2, [r3, #0]
 80104ca:	4b0d      	ldr	r3, [pc, #52]	; (8010500 <_tx_initialize_high_level+0x84>)
 80104cc:	2200      	movs	r2, #0
 80104ce:	601a      	str	r2, [r3, #0]
#endif
}
 80104d0:	bf00      	nop
 80104d2:	bd80      	pop	{r7, pc}
 80104d4:	2002602c 	.word	0x2002602c
 80104d8:	20026030 	.word	0x20026030
 80104dc:	20026034 	.word	0x20026034
 80104e0:	20026038 	.word	0x20026038
 80104e4:	2002603c 	.word	0x2002603c
 80104e8:	20026040 	.word	0x20026040
 80104ec:	2002604c 	.word	0x2002604c
 80104f0:	20026050 	.word	0x20026050
 80104f4:	20026054 	.word	0x20026054
 80104f8:	20026058 	.word	0x20026058
 80104fc:	20026044 	.word	0x20026044
 8010500:	20026048 	.word	0x20026048

08010504 <_tx_initialize_kernel_enter>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_initialize_kernel_enter(VOID)
{
 8010504:	b580      	push	{r7, lr}
 8010506:	af00      	add	r7, sp, #0

    /* Determine if the compiler has pre-initialized ThreadX.  */
    if (_tx_thread_system_state != TX_INITIALIZE_ALMOST_DONE)
 8010508:	4b10      	ldr	r3, [pc, #64]	; (801054c <_tx_initialize_kernel_enter+0x48>)
 801050a:	681b      	ldr	r3, [r3, #0]
 801050c:	f113 3f0f 	cmn.w	r3, #252645135	; 0xf0f0f0f
 8010510:	d00c      	beq.n	801052c <_tx_initialize_kernel_enter+0x28>
        /* No, the initialization still needs to take place.  */

        /* Ensure that the system state variable is set to indicate 
           initialization is in progress.  Note that this variable is 
           later used to represent interrupt nesting.  */
        _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 8010512:	4b0e      	ldr	r3, [pc, #56]	; (801054c <_tx_initialize_kernel_enter+0x48>)
 8010514:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 8010518:	601a      	str	r2, [r3, #0]
        /* Call any port specific preprocessing.  */
        TX_PORT_SPECIFIC_PRE_INITIALIZATION

        /* Invoke the low-level initialization to handle all processor specific
           initialization issues.  */
        _tx_initialize_low_level();
 801051a:	f7ef ff97 	bl	800044c <_tx_initialize_low_level>
    
        /* Invoke the high-level initialization to exercise all of the 
           ThreadX components and the application's initialization 
           function.  */
        _tx_initialize_high_level();
 801051e:	f7ff ffad 	bl	801047c <_tx_initialize_high_level>

        /* Call any port specific post-processing.  */
        TX_PORT_SPECIFIC_POST_INITIALIZATION
 8010522:	4b0b      	ldr	r3, [pc, #44]	; (8010550 <_tx_initialize_kernel_enter+0x4c>)
 8010524:	681b      	ldr	r3, [r3, #0]
 8010526:	3301      	adds	r3, #1
 8010528:	4a09      	ldr	r2, [pc, #36]	; (8010550 <_tx_initialize_kernel_enter+0x4c>)
 801052a:	6013      	str	r3, [r2, #0]
    TX_INITIALIZE_KERNEL_ENTER_EXTENSION

    /* Ensure that the system state variable is set to indicate 
       initialization is in progress.  Note that this variable is 
       later used to represent interrupt nesting.  */
    _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 801052c:	4b07      	ldr	r3, [pc, #28]	; (801054c <_tx_initialize_kernel_enter+0x48>)
 801052e:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 8010532:	601a      	str	r2, [r3, #0]

    /* Call the application provided initialization function.  Pass the
       first available memory address to it.  */
    tx_application_define(_tx_initialize_unused_memory);
 8010534:	4b07      	ldr	r3, [pc, #28]	; (8010554 <_tx_initialize_kernel_enter+0x50>)
 8010536:	681b      	ldr	r3, [r3, #0]
 8010538:	4618      	mov	r0, r3
 801053a:	f7ff fb25 	bl	800fb88 <tx_application_define>

    /* Set the system state in preparation for entering the thread 
       scheduler.  */
    _tx_thread_system_state =  TX_INITIALIZE_IS_FINISHED;
 801053e:	4b03      	ldr	r3, [pc, #12]	; (801054c <_tx_initialize_kernel_enter+0x48>)
 8010540:	2200      	movs	r2, #0
 8010542:	601a      	str	r2, [r3, #0]

    /* Call any port specific pre-scheduler processing.  */
    TX_PORT_SPECIFIC_PRE_SCHEDULER_INITIALIZATION

    /* Enter the scheduling loop to start executing threads!  */
    _tx_thread_schedule();
 8010544:	f7ef fe9e 	bl	8000284 <_tx_thread_schedule>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 8010548:	bf00      	nop
 801054a:	bd80      	pop	{r7, pc}
 801054c:	2000003c 	.word	0x2000003c
 8010550:	200260fc 	.word	0x200260fc
 8010554:	2002605c 	.word	0x2002605c

08010558 <_tx_queue_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_queue_cleanup(TX_THREAD  *thread_ptr, ULONG suspension_sequence)
{
 8010558:	b580      	push	{r7, lr}
 801055a:	b08c      	sub	sp, #48	; 0x30
 801055c:	af00      	add	r7, sp, #0
 801055e:	6078      	str	r0, [r7, #4]
 8010560:	6039      	str	r1, [r7, #0]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8010562:	f3ef 8310 	mrs	r3, PRIMASK
 8010566:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8010568:	b672      	cpsid	i
    return(primask_value);
 801056a:	69bb      	ldr	r3, [r7, #24]

    
#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the queue.  */
    TX_DISABLE
 801056c:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_queue_cleanup))
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010572:	4a36      	ldr	r2, [pc, #216]	; (801064c <_tx_queue_cleanup+0xf4>)
 8010574:	4293      	cmp	r3, r2
 8010576:	d15f      	bne.n	8010638 <_tx_queue_cleanup+0xe0>
    {
    
        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 8010578:	687b      	ldr	r3, [r7, #4]
 801057a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801057e:	683a      	ldr	r2, [r7, #0]
 8010580:	429a      	cmp	r2, r3
 8010582:	d159      	bne.n	8010638 <_tx_queue_cleanup+0xe0>
        {

            /* Setup pointer to queue control block.  */
            queue_ptr =  TX_VOID_TO_QUEUE_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010588:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Check for NULL queue pointer.  */
            if (queue_ptr != TX_NULL)
 801058a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801058c:	2b00      	cmp	r3, #0
 801058e:	d053      	beq.n	8010638 <_tx_queue_cleanup+0xe0>
            {

                /* Is the queue ID valid?  */
                if (queue_ptr -> tx_queue_id == TX_QUEUE_ID)
 8010590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010592:	681b      	ldr	r3, [r3, #0]
 8010594:	4a2e      	ldr	r2, [pc, #184]	; (8010650 <_tx_queue_cleanup+0xf8>)
 8010596:	4293      	cmp	r3, r2
 8010598:	d14e      	bne.n	8010638 <_tx_queue_cleanup+0xe0>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (queue_ptr -> tx_queue_suspended_count != TX_NO_SUSPENSIONS)
 801059a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801059c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801059e:	2b00      	cmp	r3, #0
 80105a0:	d04a      	beq.n	8010638 <_tx_queue_cleanup+0xe0>
#endif

                        /* Yes, we still have thread suspension!  */
    
                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 80105a2:	687b      	ldr	r3, [r7, #4]
 80105a4:	2200      	movs	r2, #0
 80105a6:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspended count.  */
                        queue_ptr -> tx_queue_suspended_count--;
 80105a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80105ac:	1e5a      	subs	r2, r3, #1
 80105ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105b0:	62da      	str	r2, [r3, #44]	; 0x2c

                        /* Pickup the suspended count.  */
                        suspended_count =  queue_ptr -> tx_queue_suspended_count;
 80105b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80105b6:	627b      	str	r3, [r7, #36]	; 0x24

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 80105b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105ba:	2b00      	cmp	r3, #0
 80105bc:	d103      	bne.n	80105c6 <_tx_queue_cleanup+0x6e>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 80105be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105c0:	2200      	movs	r2, #0
 80105c2:	629a      	str	r2, [r3, #40]	; 0x28
 80105c4:	e013      	b.n	80105ee <_tx_queue_cleanup+0x96>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 80105c6:	687b      	ldr	r3, [r7, #4]
 80105c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80105ca:	623b      	str	r3, [r7, #32]
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 80105cc:	687b      	ldr	r3, [r7, #4]
 80105ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80105d0:	61fb      	str	r3, [r7, #28]
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 80105d2:	6a3b      	ldr	r3, [r7, #32]
 80105d4:	69fa      	ldr	r2, [r7, #28]
 80105d6:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 80105d8:	69fb      	ldr	r3, [r7, #28]
 80105da:	6a3a      	ldr	r2, [r7, #32]
 80105dc:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (queue_ptr -> tx_queue_suspension_list == thread_ptr)
 80105de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80105e2:	687a      	ldr	r2, [r7, #4]
 80105e4:	429a      	cmp	r2, r3
 80105e6:	d102      	bne.n	80105ee <_tx_queue_cleanup+0x96>
                            {

                                /* Update the list head pointer.  */
                                queue_ptr -> tx_queue_suspension_list =         next_thread;
 80105e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105ea:	6a3a      	ldr	r2, [r7, #32]
 80105ec:	629a      	str	r2, [r3, #40]	; 0x28
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_QUEUE_SUSP)
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80105f2:	2b05      	cmp	r3, #5
 80105f4:	d120      	bne.n	8010638 <_tx_queue_cleanup+0xe0>
                            /* Increment the number of timeouts on this queue.  */
                            queue_ptr -> tx_queue_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            if (queue_ptr -> tx_queue_enqueued != TX_NO_MESSAGES)
 80105f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105f8:	691b      	ldr	r3, [r3, #16]
 80105fa:	2b00      	cmp	r3, #0
 80105fc:	d004      	beq.n	8010608 <_tx_queue_cleanup+0xb0>
                            {
            
                                /* Queue full timeout!  */
                                thread_ptr -> tx_thread_suspend_status =  TX_QUEUE_FULL;
 80105fe:	687b      	ldr	r3, [r7, #4]
 8010600:	220b      	movs	r2, #11
 8010602:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8010606:	e003      	b.n	8010610 <_tx_queue_cleanup+0xb8>
                            }
                            else
                            {
            
                                /* Queue empty timeout!  */
                                thread_ptr -> tx_thread_suspend_status =  TX_QUEUE_EMPTY;
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	220a      	movs	r2, #10
 801060c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8010610:	4b10      	ldr	r3, [pc, #64]	; (8010654 <_tx_queue_cleanup+0xfc>)
 8010612:	681b      	ldr	r3, [r3, #0]
 8010614:	3301      	adds	r3, #1
 8010616:	4a0f      	ldr	r2, [pc, #60]	; (8010654 <_tx_queue_cleanup+0xfc>)
 8010618:	6013      	str	r3, [r2, #0]
 801061a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801061c:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801061e:	693b      	ldr	r3, [r7, #16]
 8010620:	f383 8810 	msr	PRIMASK, r3
}
 8010624:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 8010626:	6878      	ldr	r0, [r7, #4]
 8010628:	f001 fae0 	bl	8011bec <_tx_thread_system_resume>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 801062c:	f3ef 8310 	mrs	r3, PRIMASK
 8010630:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8010632:	b672      	cpsid	i
    return(primask_value);
 8010634:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 8010636:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801063a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801063c:	68fb      	ldr	r3, [r7, #12]
 801063e:	f383 8810 	msr	PRIMASK, r3
}
 8010642:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8010644:	bf00      	nop
 8010646:	3730      	adds	r7, #48	; 0x30
 8010648:	46bd      	mov	sp, r7
 801064a:	bd80      	pop	{r7, pc}
 801064c:	08010559 	.word	0x08010559
 8010650:	51554555 	.word	0x51554555
 8010654:	200260fc 	.word	0x200260fc

08010658 <_tx_queue_create>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_queue_create(TX_QUEUE *queue_ptr, CHAR *name_ptr, UINT message_size, 
                        VOID *queue_start, ULONG queue_size)
{
 8010658:	b580      	push	{r7, lr}
 801065a:	b08c      	sub	sp, #48	; 0x30
 801065c:	af00      	add	r7, sp, #0
 801065e:	60f8      	str	r0, [r7, #12]
 8010660:	60b9      	str	r1, [r7, #8]
 8010662:	607a      	str	r2, [r7, #4]
 8010664:	603b      	str	r3, [r7, #0]
TX_QUEUE        *next_queue;
TX_QUEUE        *previous_queue;


    /* Initialize queue control block to all zeros.  */
    TX_MEMSET(queue_ptr, 0, (sizeof(TX_QUEUE)));
 8010666:	2238      	movs	r2, #56	; 0x38
 8010668:	2100      	movs	r1, #0
 801066a:	68f8      	ldr	r0, [r7, #12]
 801066c:	f013 fadd 	bl	8023c2a <memset>

    /* Setup the basic queue fields.  */
    queue_ptr -> tx_queue_name =             name_ptr;
 8010670:	68fb      	ldr	r3, [r7, #12]
 8010672:	68ba      	ldr	r2, [r7, #8]
 8010674:	605a      	str	r2, [r3, #4]
    
    /* Save the message size in the control block.  */
    queue_ptr -> tx_queue_message_size =  message_size;
 8010676:	68fb      	ldr	r3, [r7, #12]
 8010678:	687a      	ldr	r2, [r7, #4]
 801067a:	609a      	str	r2, [r3, #8]

    /* Determine how many messages will fit in the queue area and the number
       of ULONGs used.  */
    capacity =    (UINT) (queue_size / ((ULONG) (((ULONG) message_size) * (sizeof(ULONG)))));
 801067c:	687b      	ldr	r3, [r7, #4]
 801067e:	009b      	lsls	r3, r3, #2
 8010680:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010682:	fbb2 f3f3 	udiv	r3, r2, r3
 8010686:	62fb      	str	r3, [r7, #44]	; 0x2c
    used_words =  capacity * message_size;
 8010688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801068a:	687a      	ldr	r2, [r7, #4]
 801068c:	fb02 f303 	mul.w	r3, r2, r3
 8010690:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Save the starting address and calculate the ending address of 
       the queue.  Note that the ending address is really one past the
       end!  */
    queue_ptr -> tx_queue_start =  TX_VOID_TO_ULONG_POINTER_CONVERT(queue_start);
 8010692:	68fb      	ldr	r3, [r7, #12]
 8010694:	683a      	ldr	r2, [r7, #0]
 8010696:	619a      	str	r2, [r3, #24]
    queue_ptr -> tx_queue_end =    TX_ULONG_POINTER_ADD(queue_ptr -> tx_queue_start, used_words);
 8010698:	68fb      	ldr	r3, [r7, #12]
 801069a:	699a      	ldr	r2, [r3, #24]
 801069c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801069e:	009b      	lsls	r3, r3, #2
 80106a0:	441a      	add	r2, r3
 80106a2:	68fb      	ldr	r3, [r7, #12]
 80106a4:	61da      	str	r2, [r3, #28]

    /* Set the read and write pointers to the beginning of the queue
       area.  */
    queue_ptr -> tx_queue_read =   TX_VOID_TO_ULONG_POINTER_CONVERT(queue_start);
 80106a6:	68fb      	ldr	r3, [r7, #12]
 80106a8:	683a      	ldr	r2, [r7, #0]
 80106aa:	621a      	str	r2, [r3, #32]
    queue_ptr -> tx_queue_write =  TX_VOID_TO_ULONG_POINTER_CONVERT(queue_start);
 80106ac:	68fb      	ldr	r3, [r7, #12]
 80106ae:	683a      	ldr	r2, [r7, #0]
 80106b0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Setup the number of enqueued messages and the number of message
       slots available in the queue.  */
    queue_ptr -> tx_queue_available_storage =  (UINT) capacity;
 80106b2:	68fb      	ldr	r3, [r7, #12]
 80106b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80106b6:	615a      	str	r2, [r3, #20]
    queue_ptr -> tx_queue_capacity =           (UINT) capacity;
 80106b8:	68fb      	ldr	r3, [r7, #12]
 80106ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80106bc:	60da      	str	r2, [r3, #12]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80106be:	f3ef 8310 	mrs	r3, PRIMASK
 80106c2:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 80106c4:	b672      	cpsid	i
    return(primask_value);
 80106c6:	69bb      	ldr	r3, [r7, #24]

    /* Disable interrupts to put the queue on the created list.  */
    TX_DISABLE
 80106c8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the queue ID to make it valid.  */
    queue_ptr -> tx_queue_id =  TX_QUEUE_ID;
 80106ca:	68fb      	ldr	r3, [r7, #12]
 80106cc:	4a18      	ldr	r2, [pc, #96]	; (8010730 <_tx_queue_create+0xd8>)
 80106ce:	601a      	str	r2, [r3, #0]

    /* Place the queue on the list of created queues.  First,
       check for an empty list.  */
    if (_tx_queue_created_count == TX_EMPTY)
 80106d0:	4b18      	ldr	r3, [pc, #96]	; (8010734 <_tx_queue_create+0xdc>)
 80106d2:	681b      	ldr	r3, [r3, #0]
 80106d4:	2b00      	cmp	r3, #0
 80106d6:	d109      	bne.n	80106ec <_tx_queue_create+0x94>
    {

        /* The created queue list is empty.  Add queue to empty list.  */
        _tx_queue_created_ptr =                   queue_ptr;
 80106d8:	4a17      	ldr	r2, [pc, #92]	; (8010738 <_tx_queue_create+0xe0>)
 80106da:	68fb      	ldr	r3, [r7, #12]
 80106dc:	6013      	str	r3, [r2, #0]
        queue_ptr -> tx_queue_created_next =      queue_ptr;
 80106de:	68fb      	ldr	r3, [r7, #12]
 80106e0:	68fa      	ldr	r2, [r7, #12]
 80106e2:	631a      	str	r2, [r3, #48]	; 0x30
        queue_ptr -> tx_queue_created_previous =  queue_ptr;
 80106e4:	68fb      	ldr	r3, [r7, #12]
 80106e6:	68fa      	ldr	r2, [r7, #12]
 80106e8:	635a      	str	r2, [r3, #52]	; 0x34
 80106ea:	e011      	b.n	8010710 <_tx_queue_create+0xb8>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_queue =      _tx_queue_created_ptr;
 80106ec:	4b12      	ldr	r3, [pc, #72]	; (8010738 <_tx_queue_create+0xe0>)
 80106ee:	681b      	ldr	r3, [r3, #0]
 80106f0:	623b      	str	r3, [r7, #32]
        previous_queue =  next_queue -> tx_queue_created_previous;
 80106f2:	6a3b      	ldr	r3, [r7, #32]
 80106f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80106f6:	61fb      	str	r3, [r7, #28]

        /* Place the new queue in the list.  */
        next_queue -> tx_queue_created_previous =  queue_ptr;
 80106f8:	6a3b      	ldr	r3, [r7, #32]
 80106fa:	68fa      	ldr	r2, [r7, #12]
 80106fc:	635a      	str	r2, [r3, #52]	; 0x34
        previous_queue -> tx_queue_created_next =  queue_ptr;
 80106fe:	69fb      	ldr	r3, [r7, #28]
 8010700:	68fa      	ldr	r2, [r7, #12]
 8010702:	631a      	str	r2, [r3, #48]	; 0x30

        /* Setup this queues's created links.  */
        queue_ptr -> tx_queue_created_previous =  previous_queue;
 8010704:	68fb      	ldr	r3, [r7, #12]
 8010706:	69fa      	ldr	r2, [r7, #28]
 8010708:	635a      	str	r2, [r3, #52]	; 0x34
        queue_ptr -> tx_queue_created_next =      next_queue;
 801070a:	68fb      	ldr	r3, [r7, #12]
 801070c:	6a3a      	ldr	r2, [r7, #32]
 801070e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Increment the created queue count.  */
    _tx_queue_created_count++;
 8010710:	4b08      	ldr	r3, [pc, #32]	; (8010734 <_tx_queue_create+0xdc>)
 8010712:	681b      	ldr	r3, [r3, #0]
 8010714:	3301      	adds	r3, #1
 8010716:	4a07      	ldr	r2, [pc, #28]	; (8010734 <_tx_queue_create+0xdc>)
 8010718:	6013      	str	r3, [r2, #0]
 801071a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801071c:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801071e:	697b      	ldr	r3, [r7, #20]
 8010720:	f383 8810 	msr	PRIMASK, r3
}
 8010724:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8010726:	2300      	movs	r3, #0
}
 8010728:	4618      	mov	r0, r3
 801072a:	3730      	adds	r7, #48	; 0x30
 801072c:	46bd      	mov	sp, r7
 801072e:	bd80      	pop	{r7, pc}
 8010730:	51554555 	.word	0x51554555
 8010734:	20026038 	.word	0x20026038
 8010738:	20026034 	.word	0x20026034

0801073c <_tx_queue_flush>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_queue_flush(TX_QUEUE *queue_ptr)
{
 801073c:	b580      	push	{r7, lr}
 801073e:	b08c      	sub	sp, #48	; 0x30
 8010740:	af00      	add	r7, sp, #0
 8010742:	6078      	str	r0, [r7, #4]
UINT            suspended_count;
TX_THREAD       *thread_ptr;


    /* Initialize the suspended count and list.  */
    suspended_count =  TX_NO_SUSPENSIONS;
 8010744:	2300      	movs	r3, #0
 8010746:	62bb      	str	r3, [r7, #40]	; 0x28
    suspension_list =  TX_NULL;
 8010748:	2300      	movs	r3, #0
 801074a:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 801074c:	f3ef 8310 	mrs	r3, PRIMASK
 8010750:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8010752:	b672      	cpsid	i
    return(primask_value);
 8010754:	69fb      	ldr	r3, [r7, #28]

    /* Disable interrupts to reset various queue parameters.  */
    TX_DISABLE
 8010756:	623b      	str	r3, [r7, #32]

    /* Log this kernel call.  */
    TX_EL_QUEUE_FLUSH_INSERT

    /* Determine if there is something on the queue.  */
    if (queue_ptr -> tx_queue_enqueued != TX_NO_MESSAGES)
 8010758:	687b      	ldr	r3, [r7, #4]
 801075a:	691b      	ldr	r3, [r3, #16]
 801075c:	2b00      	cmp	r3, #0
 801075e:	d023      	beq.n	80107a8 <_tx_queue_flush+0x6c>
    {

        /* Yes, there is something in the queue.  */

        /* Reset the queue parameters to erase all of the queued messages.  */
        queue_ptr -> tx_queue_enqueued =           TX_NO_MESSAGES;
 8010760:	687b      	ldr	r3, [r7, #4]
 8010762:	2200      	movs	r2, #0
 8010764:	611a      	str	r2, [r3, #16]
        queue_ptr -> tx_queue_available_storage =  queue_ptr -> tx_queue_capacity;
 8010766:	687b      	ldr	r3, [r7, #4]
 8010768:	68da      	ldr	r2, [r3, #12]
 801076a:	687b      	ldr	r3, [r7, #4]
 801076c:	615a      	str	r2, [r3, #20]
        queue_ptr -> tx_queue_read =               queue_ptr -> tx_queue_start;
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	699a      	ldr	r2, [r3, #24]
 8010772:	687b      	ldr	r3, [r7, #4]
 8010774:	621a      	str	r2, [r3, #32]
        queue_ptr -> tx_queue_write =              queue_ptr -> tx_queue_start;
 8010776:	687b      	ldr	r3, [r7, #4]
 8010778:	699a      	ldr	r2, [r3, #24]
 801077a:	687b      	ldr	r3, [r7, #4]
 801077c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Now determine if there are any threads suspended on a full queue.  */
        if (queue_ptr -> tx_queue_suspended_count != TX_NO_SUSPENSIONS)
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010782:	2b00      	cmp	r3, #0
 8010784:	d010      	beq.n	80107a8 <_tx_queue_flush+0x6c>

            /* Yes, there are threads suspended on this queue, they must be 
               resumed!  */

            /* Copy the information into temporary variables.  */
            suspension_list =  queue_ptr -> tx_queue_suspension_list;
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801078a:	62fb      	str	r3, [r7, #44]	; 0x2c
            suspended_count =  queue_ptr -> tx_queue_suspended_count;
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010790:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Clear the queue variables.  */
            queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 8010792:	687b      	ldr	r3, [r7, #4]
 8010794:	2200      	movs	r2, #0
 8010796:	629a      	str	r2, [r3, #40]	; 0x28
            queue_ptr -> tx_queue_suspended_count =  TX_NO_SUSPENSIONS;
 8010798:	687b      	ldr	r3, [r7, #4]
 801079a:	2200      	movs	r2, #0
 801079c:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 801079e:	4b2a      	ldr	r3, [pc, #168]	; (8010848 <_tx_queue_flush+0x10c>)
 80107a0:	681b      	ldr	r3, [r3, #0]
 80107a2:	3301      	adds	r3, #1
 80107a4:	4a28      	ldr	r2, [pc, #160]	; (8010848 <_tx_queue_flush+0x10c>)
 80107a6:	6013      	str	r3, [r2, #0]
 80107a8:	6a3b      	ldr	r3, [r7, #32]
 80107aa:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80107ac:	69bb      	ldr	r3, [r7, #24]
 80107ae:	f383 8810 	msr	PRIMASK, r3
}
 80107b2:	bf00      	nop
    /* Restore interrupts.  */
    TX_RESTORE

    /* Walk through the queue list to resume any and all threads suspended
       on this queue.  */
    if (suspended_count != TX_NO_SUSPENSIONS)
 80107b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107b6:	2b00      	cmp	r3, #0
 80107b8:	d040      	beq.n	801083c <_tx_queue_flush+0x100>
    {

        /* Pickup the thread to resume.  */
        thread_ptr =  suspension_list;
 80107ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107bc:	627b      	str	r3, [r7, #36]	; 0x24
        while (suspended_count != ((ULONG) 0))
 80107be:	e025      	b.n	801080c <_tx_queue_flush+0xd0>
        {
        
            /* Decrement the suspension count.  */
            suspended_count--;
 80107c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107c2:	3b01      	subs	r3, #1
 80107c4:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Check for a NULL thread pointer.  */
            if (thread_ptr == TX_NULL)
 80107c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107c8:	2b00      	cmp	r3, #0
 80107ca:	d023      	beq.n	8010814 <_tx_queue_flush+0xd8>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80107cc:	f3ef 8310 	mrs	r3, PRIMASK
 80107d0:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" CPSID i" : : : "memory" );
 80107d2:	b672      	cpsid	i
    return(primask_value);
 80107d4:	693b      	ldr	r3, [r7, #16]
            }

            /* Resume the next suspended thread.  */
            
            /* Lockout interrupts.  */
            TX_DISABLE
 80107d6:	623b      	str	r3, [r7, #32]

            /* Clear the cleanup pointer, this prevents the timeout from doing 
               anything.  */
            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 80107d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107da:	2200      	movs	r2, #0
 80107dc:	669a      	str	r2, [r3, #104]	; 0x68

            /* Set the return status in the thread to TX_SUCCESS.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 80107de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107e0:	2200      	movs	r2, #0
 80107e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

            /* Move the thread pointer ahead.  */
            thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 80107e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80107ea:	627b      	str	r3, [r7, #36]	; 0x24
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Temporarily disable preemption again.  */
            _tx_thread_preempt_disable++;
 80107ec:	4b16      	ldr	r3, [pc, #88]	; (8010848 <_tx_queue_flush+0x10c>)
 80107ee:	681b      	ldr	r3, [r3, #0]
 80107f0:	3301      	adds	r3, #1
 80107f2:	4a15      	ldr	r2, [pc, #84]	; (8010848 <_tx_queue_flush+0x10c>)
 80107f4:	6013      	str	r3, [r2, #0]
 80107f6:	6a3b      	ldr	r3, [r7, #32]
 80107f8:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80107fa:	697b      	ldr	r3, [r7, #20]
 80107fc:	f383 8810 	msr	PRIMASK, r3
}
 8010800:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE
    
            /* Resume the thread.  */
            _tx_thread_system_resume(thread_ptr -> tx_thread_suspended_previous);
 8010802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010804:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010806:	4618      	mov	r0, r3
 8010808:	f001 f9f0 	bl	8011bec <_tx_thread_system_resume>
        while (suspended_count != ((ULONG) 0))
 801080c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801080e:	2b00      	cmp	r3, #0
 8010810:	d1d6      	bne.n	80107c0 <_tx_queue_flush+0x84>
 8010812:	e000      	b.n	8010816 <_tx_queue_flush+0xda>
                break;
 8010814:	bf00      	nop
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8010816:	f3ef 8310 	mrs	r3, PRIMASK
 801081a:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" CPSID i" : : : "memory" );
 801081c:	b672      	cpsid	i
    return(primask_value);
 801081e:	68bb      	ldr	r3, [r7, #8]
#endif
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8010820:	623b      	str	r3, [r7, #32]

        /* Restore previous preempt posture.  */
        _tx_thread_preempt_disable--;
 8010822:	4b09      	ldr	r3, [pc, #36]	; (8010848 <_tx_queue_flush+0x10c>)
 8010824:	681b      	ldr	r3, [r3, #0]
 8010826:	3b01      	subs	r3, #1
 8010828:	4a07      	ldr	r2, [pc, #28]	; (8010848 <_tx_queue_flush+0x10c>)
 801082a:	6013      	str	r3, [r2, #0]
 801082c:	6a3b      	ldr	r3, [r7, #32]
 801082e:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8010830:	68fb      	ldr	r3, [r7, #12]
 8010832:	f383 8810 	msr	PRIMASK, r3
}
 8010836:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8010838:	f001 f994 	bl	8011b64 <_tx_thread_system_preempt_check>
    }

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 801083c:	2300      	movs	r3, #0
}
 801083e:	4618      	mov	r0, r3
 8010840:	3730      	adds	r7, #48	; 0x30
 8010842:	46bd      	mov	sp, r7
 8010844:	bd80      	pop	{r7, pc}
 8010846:	bf00      	nop
 8010848:	200260fc 	.word	0x200260fc

0801084c <_tx_queue_front_send>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_queue_front_send(TX_QUEUE *queue_ptr, VOID *source_ptr, ULONG wait_option)
{
 801084c:	b580      	push	{r7, lr}
 801084e:	b094      	sub	sp, #80	; 0x50
 8010850:	af00      	add	r7, sp, #0
 8010852:	60f8      	str	r0, [r7, #12]
 8010854:	60b9      	str	r1, [r7, #8]
 8010856:	607a      	str	r2, [r7, #4]
VOID            (*queue_send_notify)(struct TX_QUEUE_STRUCT *notify_queue_ptr);
#endif


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 8010858:	2300      	movs	r3, #0
 801085a:	643b      	str	r3, [r7, #64]	; 0x40
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 801085c:	f3ef 8310 	mrs	r3, PRIMASK
 8010860:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile (" CPSID i" : : : "memory" );
 8010862:	b672      	cpsid	i
    return(primask_value);
 8010864:	6abb      	ldr	r3, [r7, #40]	; 0x28

    /* Disable interrupts to place message in the queue.  */
    TX_DISABLE
 8010866:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Log this kernel call.  */
    TX_EL_QUEUE_FRONT_SEND_INSERT

    /* Pickup the suspended count.  */
    suspended_count =  queue_ptr -> tx_queue_suspended_count;
 8010868:	68fb      	ldr	r3, [r7, #12]
 801086a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801086c:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Now check for room in the queue for placing the new message in front.  */
    if (queue_ptr -> tx_queue_available_storage != ((UINT) 0))
 801086e:	68fb      	ldr	r3, [r7, #12]
 8010870:	695b      	ldr	r3, [r3, #20]
 8010872:	2b00      	cmp	r3, #0
 8010874:	f000 80a9 	beq.w	80109ca <_tx_queue_front_send+0x17e>
    {

        /* Yes there is room in the queue. Now determine if there is a thread waiting 
           for a message.  */
        if (suspended_count == TX_NO_SUSPENSIONS)
 8010878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801087a:	2b00      	cmp	r3, #0
 801087c:	d14a      	bne.n	8010914 <_tx_queue_front_send+0xc8>

            /* Adjust the read pointer since we are adding to the front of the
               queue.  */

            /* See if the read pointer is at the beginning of the queue area.  */
            if (queue_ptr -> tx_queue_read == queue_ptr -> tx_queue_start)
 801087e:	68fb      	ldr	r3, [r7, #12]
 8010880:	6a1a      	ldr	r2, [r3, #32]
 8010882:	68fb      	ldr	r3, [r7, #12]
 8010884:	699b      	ldr	r3, [r3, #24]
 8010886:	429a      	cmp	r2, r3
 8010888:	d109      	bne.n	801089e <_tx_queue_front_send+0x52>
            {
            
                /* Adjust the read pointer to the last message at the end of the
                   queue.  */
                queue_ptr -> tx_queue_read =  TX_ULONG_POINTER_SUB(queue_ptr -> tx_queue_end, queue_ptr -> tx_queue_message_size);
 801088a:	68fb      	ldr	r3, [r7, #12]
 801088c:	69da      	ldr	r2, [r3, #28]
 801088e:	68fb      	ldr	r3, [r7, #12]
 8010890:	689b      	ldr	r3, [r3, #8]
 8010892:	009b      	lsls	r3, r3, #2
 8010894:	425b      	negs	r3, r3
 8010896:	441a      	add	r2, r3
 8010898:	68fb      	ldr	r3, [r7, #12]
 801089a:	621a      	str	r2, [r3, #32]
 801089c:	e008      	b.n	80108b0 <_tx_queue_front_send+0x64>
            }
            else
            {
            
                /* Not at the beginning of the queue, just move back one message.  */
                queue_ptr -> tx_queue_read =  TX_ULONG_POINTER_SUB(queue_ptr -> tx_queue_read, queue_ptr -> tx_queue_message_size);
 801089e:	68fb      	ldr	r3, [r7, #12]
 80108a0:	6a1a      	ldr	r2, [r3, #32]
 80108a2:	68fb      	ldr	r3, [r7, #12]
 80108a4:	689b      	ldr	r3, [r3, #8]
 80108a6:	009b      	lsls	r3, r3, #2
 80108a8:	425b      	negs	r3, r3
 80108aa:	441a      	add	r2, r3
 80108ac:	68fb      	ldr	r3, [r7, #12]
 80108ae:	621a      	str	r2, [r3, #32]
            }

            /* Simply place the message in the queue.  */
            
            /* Reduce the amount of available storage.  */
            queue_ptr -> tx_queue_available_storage--;
 80108b0:	68fb      	ldr	r3, [r7, #12]
 80108b2:	695b      	ldr	r3, [r3, #20]
 80108b4:	1e5a      	subs	r2, r3, #1
 80108b6:	68fb      	ldr	r3, [r7, #12]
 80108b8:	615a      	str	r2, [r3, #20]

            /* Increase the enqueued count.  */
            queue_ptr -> tx_queue_enqueued++;
 80108ba:	68fb      	ldr	r3, [r7, #12]
 80108bc:	691b      	ldr	r3, [r3, #16]
 80108be:	1c5a      	adds	r2, r3, #1
 80108c0:	68fb      	ldr	r3, [r7, #12]
 80108c2:	611a      	str	r2, [r3, #16]

            /* Setup source and destination pointers.  */
            source =       TX_VOID_TO_ULONG_POINTER_CONVERT(source_ptr);
 80108c4:	68bb      	ldr	r3, [r7, #8]
 80108c6:	64fb      	str	r3, [r7, #76]	; 0x4c
            destination =  queue_ptr -> tx_queue_read;
 80108c8:	68fb      	ldr	r3, [r7, #12]
 80108ca:	6a1b      	ldr	r3, [r3, #32]
 80108cc:	64bb      	str	r3, [r7, #72]	; 0x48
            size =         queue_ptr -> tx_queue_message_size;
 80108ce:	68fb      	ldr	r3, [r7, #12]
 80108d0:	689b      	ldr	r3, [r3, #8]
 80108d2:	647b      	str	r3, [r7, #68]	; 0x44

            /* Copy message. Note that the source and destination pointers are 
               incremented by the macro.  */
            TX_QUEUE_MESSAGE_COPY(source, destination, size)
 80108d4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80108d6:	1d13      	adds	r3, r2, #4
 80108d8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80108da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80108dc:	1d19      	adds	r1, r3, #4
 80108de:	64b9      	str	r1, [r7, #72]	; 0x48
 80108e0:	6812      	ldr	r2, [r2, #0]
 80108e2:	601a      	str	r2, [r3, #0]
 80108e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80108e6:	2b01      	cmp	r3, #1
 80108e8:	d90e      	bls.n	8010908 <_tx_queue_front_send+0xbc>
 80108ea:	e007      	b.n	80108fc <_tx_queue_front_send+0xb0>
 80108ec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80108ee:	1d13      	adds	r3, r2, #4
 80108f0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80108f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80108f4:	1d19      	adds	r1, r3, #4
 80108f6:	64b9      	str	r1, [r7, #72]	; 0x48
 80108f8:	6812      	ldr	r2, [r2, #0]
 80108fa:	601a      	str	r2, [r3, #0]
 80108fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80108fe:	3b01      	subs	r3, #1
 8010900:	647b      	str	r3, [r7, #68]	; 0x44
 8010902:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010904:	2b00      	cmp	r3, #0
 8010906:	d1f1      	bne.n	80108ec <_tx_queue_front_send+0xa0>
 8010908:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801090a:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801090c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801090e:	f383 8810 	msr	PRIMASK, r3
}
 8010912:	e0cb      	b.n	8010aac <_tx_queue_front_send+0x260>
        else
        {

            /* Thread suspended waiting for a message.  Remove it and copy this message
               into its storage area.  */
            thread_ptr =  queue_ptr -> tx_queue_suspension_list;
 8010914:	68fb      	ldr	r3, [r7, #12]
 8010916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010918:	637b      	str	r3, [r7, #52]	; 0x34

            /* See if this is the only suspended thread on the list.  */
            suspended_count--;
 801091a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801091c:	3b01      	subs	r3, #1
 801091e:	63bb      	str	r3, [r7, #56]	; 0x38
            if (suspended_count == TX_NO_SUSPENSIONS)
 8010920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010922:	2b00      	cmp	r3, #0
 8010924:	d103      	bne.n	801092e <_tx_queue_front_send+0xe2>
            {

                /* Yes, the only suspended thread.  */

                /* Update the head pointer.  */
                queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 8010926:	68fb      	ldr	r3, [r7, #12]
 8010928:	2200      	movs	r2, #0
 801092a:	629a      	str	r2, [r3, #40]	; 0x28
 801092c:	e012      	b.n	8010954 <_tx_queue_front_send+0x108>
            {

                /* At least one more thread is on the same expiration list.  */

                /* Update the list head pointer.  */
                queue_ptr -> tx_queue_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 801092e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010930:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8010932:	68fb      	ldr	r3, [r7, #12]
 8010934:	629a      	str	r2, [r3, #40]	; 0x28

                /* Update the links of the adjacent threads.  */
                next_thread =                            thread_ptr -> tx_thread_suspended_next;
 8010936:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010938:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801093a:	633b      	str	r3, [r7, #48]	; 0x30
                queue_ptr -> tx_queue_suspension_list =  next_thread;
 801093c:	68fb      	ldr	r3, [r7, #12]
 801093e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010940:	629a      	str	r2, [r3, #40]	; 0x28

                /* Update the links of the adjacent threads.  */
                previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8010942:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010944:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010946:	62fb      	str	r3, [r7, #44]	; 0x2c
                next_thread -> tx_thread_suspended_previous =   previous_thread;
 8010948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801094a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801094c:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   next_thread;
 801094e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010950:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010952:	671a      	str	r2, [r3, #112]	; 0x70
            }

            /* Decrement the suspension count.  */
            queue_ptr -> tx_queue_suspended_count =  suspended_count;
 8010954:	68fb      	ldr	r3, [r7, #12]
 8010956:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010958:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Prepare for resumption of the thread.  */

            /* Clear cleanup routine to avoid timeout.  */
            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 801095a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801095c:	2200      	movs	r2, #0
 801095e:	669a      	str	r2, [r3, #104]	; 0x68
            /* Pickup the notify callback routine for this queue.  */
            queue_send_notify =  queue_ptr -> tx_queue_send_notify;
#endif

            /* Setup source and destination pointers.  */
            source =       TX_VOID_TO_ULONG_POINTER_CONVERT(source_ptr);
 8010960:	68bb      	ldr	r3, [r7, #8]
 8010962:	64fb      	str	r3, [r7, #76]	; 0x4c
            destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 8010964:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010966:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010968:	64bb      	str	r3, [r7, #72]	; 0x48
            size =         queue_ptr -> tx_queue_message_size;
 801096a:	68fb      	ldr	r3, [r7, #12]
 801096c:	689b      	ldr	r3, [r3, #8]
 801096e:	647b      	str	r3, [r7, #68]	; 0x44

            /* Copy message. Note that the source and destination pointers are 
               incremented by the macro.  */
            TX_QUEUE_MESSAGE_COPY(source, destination, size)
 8010970:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010972:	1d13      	adds	r3, r2, #4
 8010974:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010976:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010978:	1d19      	adds	r1, r3, #4
 801097a:	64b9      	str	r1, [r7, #72]	; 0x48
 801097c:	6812      	ldr	r2, [r2, #0]
 801097e:	601a      	str	r2, [r3, #0]
 8010980:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010982:	2b01      	cmp	r3, #1
 8010984:	d90e      	bls.n	80109a4 <_tx_queue_front_send+0x158>
 8010986:	e007      	b.n	8010998 <_tx_queue_front_send+0x14c>
 8010988:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801098a:	1d13      	adds	r3, r2, #4
 801098c:	64fb      	str	r3, [r7, #76]	; 0x4c
 801098e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010990:	1d19      	adds	r1, r3, #4
 8010992:	64b9      	str	r1, [r7, #72]	; 0x48
 8010994:	6812      	ldr	r2, [r2, #0]
 8010996:	601a      	str	r2, [r3, #0]
 8010998:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801099a:	3b01      	subs	r3, #1
 801099c:	647b      	str	r3, [r7, #68]	; 0x44
 801099e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80109a0:	2b00      	cmp	r3, #0
 80109a2:	d1f1      	bne.n	8010988 <_tx_queue_front_send+0x13c>

            /* Put return status into the thread control block.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 80109a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80109a6:	2200      	movs	r2, #0
 80109a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 80109ac:	4b42      	ldr	r3, [pc, #264]	; (8010ab8 <_tx_queue_front_send+0x26c>)
 80109ae:	681b      	ldr	r3, [r3, #0]
 80109b0:	3301      	adds	r3, #1
 80109b2:	4a41      	ldr	r2, [pc, #260]	; (8010ab8 <_tx_queue_front_send+0x26c>)
 80109b4:	6013      	str	r3, [r2, #0]
 80109b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80109b8:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80109ba:	6a3b      	ldr	r3, [r7, #32]
 80109bc:	f383 8810 	msr	PRIMASK, r3
}
 80109c0:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Resume thread.  */
            _tx_thread_system_resume(thread_ptr);
 80109c2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80109c4:	f001 f912 	bl	8011bec <_tx_thread_system_resume>
 80109c8:	e070      	b.n	8010aac <_tx_queue_front_send+0x260>
#endif
        }
    }

    /* Determine if the caller has requested suspension.  */
    else if (wait_option != TX_NO_WAIT)
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	2b00      	cmp	r3, #0
 80109ce:	d065      	beq.n	8010a9c <_tx_queue_front_send+0x250>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 80109d0:	4b39      	ldr	r3, [pc, #228]	; (8010ab8 <_tx_queue_front_send+0x26c>)
 80109d2:	681b      	ldr	r3, [r3, #0]
 80109d4:	2b00      	cmp	r3, #0
 80109d6:	d008      	beq.n	80109ea <_tx_queue_front_send+0x19e>
 80109d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80109da:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80109dc:	69fb      	ldr	r3, [r7, #28]
 80109de:	f383 8810 	msr	PRIMASK, r3
}
 80109e2:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_QUEUE_FULL;
 80109e4:	230b      	movs	r3, #11
 80109e6:	643b      	str	r3, [r7, #64]	; 0x40
 80109e8:	e060      	b.n	8010aac <_tx_queue_front_send+0x260>
            /* Yes, suspension is requested.  */

            /* Prepare for suspension of this thread.  */
            
            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 80109ea:	4b34      	ldr	r3, [pc, #208]	; (8010abc <_tx_queue_front_send+0x270>)
 80109ec:	681b      	ldr	r3, [r3, #0]
 80109ee:	637b      	str	r3, [r7, #52]	; 0x34

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_queue_cleanup);
 80109f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80109f2:	4a33      	ldr	r2, [pc, #204]	; (8010ac0 <_tx_queue_front_send+0x274>)
 80109f4:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup cleanup information, i.e. this queue control
               block and the source pointer.  */
            thread_ptr -> tx_thread_suspend_control_block =    (VOID *) queue_ptr;
 80109f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80109f8:	68fa      	ldr	r2, [r7, #12]
 80109fa:	66da      	str	r2, [r3, #108]	; 0x6c
            thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) source_ptr;
 80109fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80109fe:	68ba      	ldr	r2, [r7, #8]
 8010a00:	67da      	str	r2, [r3, #124]	; 0x7c

            /* Set the flag to true to indicate a queue front send suspension.  */
            thread_ptr -> tx_thread_suspend_option =           TX_TRUE;
 8010a02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a04:	2201      	movs	r2, #1
 8010a06:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 8010a0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a0c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8010a10:	1c5a      	adds	r2, r3, #1
 8010a12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a14:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

            /* Place this thread at the front of the suspension list, since it is a
               queue front send suspension.  */
            if (suspended_count == TX_NO_SUSPENSIONS)
 8010a18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a1a:	2b00      	cmp	r3, #0
 8010a1c:	d109      	bne.n	8010a32 <_tx_queue_front_send+0x1e6>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                queue_ptr -> tx_queue_suspension_list =         thread_ptr;
 8010a1e:	68fb      	ldr	r3, [r7, #12]
 8010a20:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010a22:	629a      	str	r2, [r3, #40]	; 0x28
                thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 8010a24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a26:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010a28:	671a      	str	r2, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 8010a2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a2c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010a2e:	675a      	str	r2, [r3, #116]	; 0x74
 8010a30:	e014      	b.n	8010a5c <_tx_queue_front_send+0x210>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   queue_ptr -> tx_queue_suspension_list;
 8010a32:	68fb      	ldr	r3, [r7, #12]
 8010a34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010a36:	633b      	str	r3, [r7, #48]	; 0x30
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 8010a38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010a3c:	671a      	str	r2, [r3, #112]	; 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 8010a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010a42:	62fb      	str	r3, [r7, #44]	; 0x2c
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 8010a44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010a48:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 8010a4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a4c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010a4e:	671a      	str	r2, [r3, #112]	; 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 8010a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a52:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010a54:	675a      	str	r2, [r3, #116]	; 0x74

                /* Update the suspension list to put this thread in front, which will put
                   the message that was removed in the proper relative order when room is 
                   made in the queue.  */
                queue_ptr -> tx_queue_suspension_list =         thread_ptr;
 8010a56:	68fb      	ldr	r3, [r7, #12]
 8010a58:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010a5a:	629a      	str	r2, [r3, #40]	; 0x28
            }

            /* Increment the suspended thread count.  */
            queue_ptr -> tx_queue_suspended_count =  suspended_count + ((UINT) 1);
 8010a5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a5e:	1c5a      	adds	r2, r3, #1
 8010a60:	68fb      	ldr	r3, [r7, #12]
 8010a62:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_QUEUE_SUSP;
 8010a64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a66:	2205      	movs	r2, #5
 8010a68:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8010a6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a6c:	2201      	movs	r2, #1
 8010a6e:	639a      	str	r2, [r3, #56]	; 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 8010a70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a72:	687a      	ldr	r2, [r7, #4]
 8010a74:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8010a76:	4b10      	ldr	r3, [pc, #64]	; (8010ab8 <_tx_queue_front_send+0x26c>)
 8010a78:	681b      	ldr	r3, [r3, #0]
 8010a7a:	3301      	adds	r3, #1
 8010a7c:	4a0e      	ldr	r2, [pc, #56]	; (8010ab8 <_tx_queue_front_send+0x26c>)
 8010a7e:	6013      	str	r3, [r2, #0]
 8010a80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010a82:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8010a84:	69bb      	ldr	r3, [r7, #24]
 8010a86:	f383 8810 	msr	PRIMASK, r3
}
 8010a8a:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 8010a8c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010a8e:	f001 f9b7 	bl	8011e00 <_tx_thread_system_suspend>
                }
            }
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 8010a92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010a98:	643b      	str	r3, [r7, #64]	; 0x40
 8010a9a:	e007      	b.n	8010aac <_tx_queue_front_send+0x260>
 8010a9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010a9e:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8010aa0:	697b      	ldr	r3, [r7, #20]
 8010aa2:	f383 8810 	msr	PRIMASK, r3
}
 8010aa6:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* No room in queue and no suspension requested, return error completion.  */
        status =  TX_QUEUE_FULL;
 8010aa8:	230b      	movs	r3, #11
 8010aaa:	643b      	str	r3, [r7, #64]	; 0x40
    }

    /* Return completion status.  */
    return(status);
 8010aac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 8010aae:	4618      	mov	r0, r3
 8010ab0:	3750      	adds	r7, #80	; 0x50
 8010ab2:	46bd      	mov	sp, r7
 8010ab4:	bd80      	pop	{r7, pc}
 8010ab6:	bf00      	nop
 8010ab8:	200260fc 	.word	0x200260fc
 8010abc:	20026064 	.word	0x20026064
 8010ac0:	08010559 	.word	0x08010559

08010ac4 <_tx_queue_info_get>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_queue_info_get(TX_QUEUE *queue_ptr, CHAR **name, ULONG *enqueued, ULONG *available_storage,
                    TX_THREAD **first_suspended, ULONG *suspended_count, TX_QUEUE **next_queue)
{
 8010ac4:	b480      	push	{r7}
 8010ac6:	b089      	sub	sp, #36	; 0x24
 8010ac8:	af00      	add	r7, sp, #0
 8010aca:	60f8      	str	r0, [r7, #12]
 8010acc:	60b9      	str	r1, [r7, #8]
 8010ace:	607a      	str	r2, [r7, #4]
 8010ad0:	603b      	str	r3, [r7, #0]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8010ad2:	f3ef 8310 	mrs	r3, PRIMASK
 8010ad6:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8010ad8:	b672      	cpsid	i
    return(primask_value);
 8010ada:	69bb      	ldr	r3, [r7, #24]

TX_INTERRUPT_SAVE_AREA


    /* Disable interrupts.  */
    TX_DISABLE
 8010adc:	61fb      	str	r3, [r7, #28]

    /* Retrieve all the pertinent information and return it in the supplied
       destinations.  */

    /* Retrieve the name of the queue.  */
    if (name != TX_NULL)
 8010ade:	68bb      	ldr	r3, [r7, #8]
 8010ae0:	2b00      	cmp	r3, #0
 8010ae2:	d003      	beq.n	8010aec <_tx_queue_info_get+0x28>
    {
    
        *name =  queue_ptr -> tx_queue_name;
 8010ae4:	68fb      	ldr	r3, [r7, #12]
 8010ae6:	685a      	ldr	r2, [r3, #4]
 8010ae8:	68bb      	ldr	r3, [r7, #8]
 8010aea:	601a      	str	r2, [r3, #0]
    }
    
    /* Retrieve the number of messages currently in the queue.  */
    if (enqueued != TX_NULL)
 8010aec:	687b      	ldr	r3, [r7, #4]
 8010aee:	2b00      	cmp	r3, #0
 8010af0:	d003      	beq.n	8010afa <_tx_queue_info_get+0x36>
    {
    
        *enqueued =  (ULONG) queue_ptr -> tx_queue_enqueued;
 8010af2:	68fb      	ldr	r3, [r7, #12]
 8010af4:	691a      	ldr	r2, [r3, #16]
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	601a      	str	r2, [r3, #0]
    }
    
    /* Retrieve the number of messages that will still fit in the queue.  */
    if (available_storage != TX_NULL)
 8010afa:	683b      	ldr	r3, [r7, #0]
 8010afc:	2b00      	cmp	r3, #0
 8010afe:	d003      	beq.n	8010b08 <_tx_queue_info_get+0x44>
    {
    
        *available_storage =  (ULONG) queue_ptr -> tx_queue_available_storage;
 8010b00:	68fb      	ldr	r3, [r7, #12]
 8010b02:	695a      	ldr	r2, [r3, #20]
 8010b04:	683b      	ldr	r3, [r7, #0]
 8010b06:	601a      	str	r2, [r3, #0]
    }
    
    /* Retrieve the first thread suspended on this queue.  */
    if (first_suspended != TX_NULL)
 8010b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b0a:	2b00      	cmp	r3, #0
 8010b0c:	d003      	beq.n	8010b16 <_tx_queue_info_get+0x52>
    {
    
        *first_suspended =  queue_ptr -> tx_queue_suspension_list;
 8010b0e:	68fb      	ldr	r3, [r7, #12]
 8010b10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b14:	601a      	str	r2, [r3, #0]
    }
    
    /* Retrieve the number of threads suspended on this queue.  */
    if (suspended_count != TX_NULL)
 8010b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b18:	2b00      	cmp	r3, #0
 8010b1a:	d003      	beq.n	8010b24 <_tx_queue_info_get+0x60>
    {
    
        *suspended_count =  (ULONG) queue_ptr -> tx_queue_suspended_count;
 8010b1c:	68fb      	ldr	r3, [r7, #12]
 8010b1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010b20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b22:	601a      	str	r2, [r3, #0]
    }
    
    /* Retrieve the pointer to the next queue created.  */
    if (next_queue != TX_NULL)
 8010b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b26:	2b00      	cmp	r3, #0
 8010b28:	d003      	beq.n	8010b32 <_tx_queue_info_get+0x6e>
    {
    
        *next_queue =  queue_ptr -> tx_queue_created_next;
 8010b2a:	68fb      	ldr	r3, [r7, #12]
 8010b2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b30:	601a      	str	r2, [r3, #0]
 8010b32:	69fb      	ldr	r3, [r7, #28]
 8010b34:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8010b36:	697b      	ldr	r3, [r7, #20]
 8010b38:	f383 8810 	msr	PRIMASK, r3
}
 8010b3c:	bf00      	nop
    
    /* Restore interrupts.  */
    TX_RESTORE

    /* Return completion status.  */
    return(TX_SUCCESS);
 8010b3e:	2300      	movs	r3, #0
}
 8010b40:	4618      	mov	r0, r3
 8010b42:	3724      	adds	r7, #36	; 0x24
 8010b44:	46bd      	mov	sp, r7
 8010b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b4a:	4770      	bx	lr

08010b4c <_tx_queue_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_queue_receive(TX_QUEUE *queue_ptr, VOID *destination_ptr, ULONG wait_option)
{
 8010b4c:	b580      	push	{r7, lr}
 8010b4e:	b094      	sub	sp, #80	; 0x50
 8010b50:	af00      	add	r7, sp, #0
 8010b52:	60f8      	str	r0, [r7, #12]
 8010b54:	60b9      	str	r1, [r7, #8]
 8010b56:	607a      	str	r2, [r7, #4]
TX_THREAD       *previous_thread;
UINT            status;


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 8010b58:	2300      	movs	r3, #0
 8010b5a:	643b      	str	r3, [r7, #64]	; 0x40
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8010b5c:	f3ef 8310 	mrs	r3, PRIMASK
 8010b60:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile (" CPSID i" : : : "memory" );
 8010b62:	b672      	cpsid	i
    return(primask_value);
 8010b64:	6abb      	ldr	r3, [r7, #40]	; 0x28

    /* Disable interrupts to receive message from queue.  */
    TX_DISABLE
 8010b66:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Log this kernel call.  */
    TX_EL_QUEUE_RECEIVE_INSERT

    /* Pickup the thread suspension count.  */
    suspended_count =  queue_ptr -> tx_queue_suspended_count;
 8010b68:	68fb      	ldr	r3, [r7, #12]
 8010b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010b6c:	63bb      	str	r3, [r7, #56]	; 0x38
    
    /* Determine if there is anything in the queue.  */
    if (queue_ptr -> tx_queue_enqueued != TX_NO_MESSAGES)
 8010b6e:	68fb      	ldr	r3, [r7, #12]
 8010b70:	691b      	ldr	r3, [r3, #16]
 8010b72:	2b00      	cmp	r3, #0
 8010b74:	f000 8136 	beq.w	8010de4 <_tx_queue_receive+0x298>
    {

        /* Determine if there are any suspensions.  */
        if (suspended_count == TX_NO_SUSPENSIONS)
 8010b78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b7a:	2b00      	cmp	r3, #0
 8010b7c:	d13c      	bne.n	8010bf8 <_tx_queue_receive+0xac>
        {

            /* There is a message waiting in the queue and there are no suspensi.  */
            
            /* Setup source and destination pointers.  */
            source =       queue_ptr -> tx_queue_read;
 8010b7e:	68fb      	ldr	r3, [r7, #12]
 8010b80:	6a1b      	ldr	r3, [r3, #32]
 8010b82:	64fb      	str	r3, [r7, #76]	; 0x4c
            destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(destination_ptr);
 8010b84:	68bb      	ldr	r3, [r7, #8]
 8010b86:	64bb      	str	r3, [r7, #72]	; 0x48
            size =         queue_ptr -> tx_queue_message_size;
 8010b88:	68fb      	ldr	r3, [r7, #12]
 8010b8a:	689b      	ldr	r3, [r3, #8]
 8010b8c:	647b      	str	r3, [r7, #68]	; 0x44

            /* Copy message. Note that the source and destination pointers are 
               incremented by the macro.  */
            TX_QUEUE_MESSAGE_COPY(source, destination, size)
 8010b8e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010b90:	1d13      	adds	r3, r2, #4
 8010b92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010b94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010b96:	1d19      	adds	r1, r3, #4
 8010b98:	64b9      	str	r1, [r7, #72]	; 0x48
 8010b9a:	6812      	ldr	r2, [r2, #0]
 8010b9c:	601a      	str	r2, [r3, #0]
 8010b9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010ba0:	2b01      	cmp	r3, #1
 8010ba2:	d90e      	bls.n	8010bc2 <_tx_queue_receive+0x76>
 8010ba4:	e007      	b.n	8010bb6 <_tx_queue_receive+0x6a>
 8010ba6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010ba8:	1d13      	adds	r3, r2, #4
 8010baa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010bac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010bae:	1d19      	adds	r1, r3, #4
 8010bb0:	64b9      	str	r1, [r7, #72]	; 0x48
 8010bb2:	6812      	ldr	r2, [r2, #0]
 8010bb4:	601a      	str	r2, [r3, #0]
 8010bb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010bb8:	3b01      	subs	r3, #1
 8010bba:	647b      	str	r3, [r7, #68]	; 0x44
 8010bbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010bbe:	2b00      	cmp	r3, #0
 8010bc0:	d1f1      	bne.n	8010ba6 <_tx_queue_receive+0x5a>

            /* Determine if we are at the end.  */
            if (source == queue_ptr -> tx_queue_end)
 8010bc2:	68fb      	ldr	r3, [r7, #12]
 8010bc4:	69db      	ldr	r3, [r3, #28]
 8010bc6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010bc8:	429a      	cmp	r2, r3
 8010bca:	d102      	bne.n	8010bd2 <_tx_queue_receive+0x86>
            {

                /* Yes, wrap around to the beginning.  */
                source =  queue_ptr -> tx_queue_start;
 8010bcc:	68fb      	ldr	r3, [r7, #12]
 8010bce:	699b      	ldr	r3, [r3, #24]
 8010bd0:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
        
            /* Setup the queue read pointer.   */
            queue_ptr -> tx_queue_read =  source;
 8010bd2:	68fb      	ldr	r3, [r7, #12]
 8010bd4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010bd6:	621a      	str	r2, [r3, #32]
        
            /* Increase the amount of available storage.  */
            queue_ptr -> tx_queue_available_storage++;
 8010bd8:	68fb      	ldr	r3, [r7, #12]
 8010bda:	695b      	ldr	r3, [r3, #20]
 8010bdc:	1c5a      	adds	r2, r3, #1
 8010bde:	68fb      	ldr	r3, [r7, #12]
 8010be0:	615a      	str	r2, [r3, #20]

            /* Decrease the enqueued count.  */
            queue_ptr -> tx_queue_enqueued--;
 8010be2:	68fb      	ldr	r3, [r7, #12]
 8010be4:	691b      	ldr	r3, [r3, #16]
 8010be6:	1e5a      	subs	r2, r3, #1
 8010be8:	68fb      	ldr	r3, [r7, #12]
 8010bea:	611a      	str	r2, [r3, #16]
 8010bec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010bee:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8010bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bf2:	f383 8810 	msr	PRIMASK, r3
}
 8010bf6:	e163      	b.n	8010ec0 <_tx_queue_receive+0x374>
        {
        
            /* At this point we know the queue is full.  */

            /* Pickup thread suspension list head pointer.  */
            thread_ptr =  queue_ptr -> tx_queue_suspension_list;
 8010bf8:	68fb      	ldr	r3, [r7, #12]
 8010bfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010bfc:	637b      	str	r3, [r7, #52]	; 0x34

            /* Now determine if there is a queue front suspension active.   */
    
            /* Is the front suspension flag set?  */
            if (thread_ptr -> tx_thread_suspend_option == TX_TRUE)
 8010bfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010c00:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010c04:	2b01      	cmp	r3, #1
 8010c06:	d153      	bne.n	8010cb0 <_tx_queue_receive+0x164>
                /* Yes, a queue front suspension is present.  */

                /* Return the message associated with this suspension.  */

                /* Setup source and destination pointers.  */
                source =       TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 8010c08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010c0a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010c0c:	64fb      	str	r3, [r7, #76]	; 0x4c
                destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(destination_ptr);
 8010c0e:	68bb      	ldr	r3, [r7, #8]
 8010c10:	64bb      	str	r3, [r7, #72]	; 0x48
                size =         queue_ptr -> tx_queue_message_size;
 8010c12:	68fb      	ldr	r3, [r7, #12]
 8010c14:	689b      	ldr	r3, [r3, #8]
 8010c16:	647b      	str	r3, [r7, #68]	; 0x44

                /* Copy message. Note that the source and destination pointers are 
                   incremented by the macro.  */
                TX_QUEUE_MESSAGE_COPY(source, destination, size)
 8010c18:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010c1a:	1d13      	adds	r3, r2, #4
 8010c1c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010c1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010c20:	1d19      	adds	r1, r3, #4
 8010c22:	64b9      	str	r1, [r7, #72]	; 0x48
 8010c24:	6812      	ldr	r2, [r2, #0]
 8010c26:	601a      	str	r2, [r3, #0]
 8010c28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010c2a:	2b01      	cmp	r3, #1
 8010c2c:	d90e      	bls.n	8010c4c <_tx_queue_receive+0x100>
 8010c2e:	e007      	b.n	8010c40 <_tx_queue_receive+0xf4>
 8010c30:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010c32:	1d13      	adds	r3, r2, #4
 8010c34:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010c36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010c38:	1d19      	adds	r1, r3, #4
 8010c3a:	64b9      	str	r1, [r7, #72]	; 0x48
 8010c3c:	6812      	ldr	r2, [r2, #0]
 8010c3e:	601a      	str	r2, [r3, #0]
 8010c40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010c42:	3b01      	subs	r3, #1
 8010c44:	647b      	str	r3, [r7, #68]	; 0x44
 8010c46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010c48:	2b00      	cmp	r3, #0
 8010c4a:	d1f1      	bne.n	8010c30 <_tx_queue_receive+0xe4>

                /* Message is now in the caller's destination. See if this is the only suspended thread 
                   on the list.  */
                suspended_count--;
 8010c4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c4e:	3b01      	subs	r3, #1
 8010c50:	63bb      	str	r3, [r7, #56]	; 0x38
                if (suspended_count == TX_NO_SUSPENSIONS)
 8010c52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c54:	2b00      	cmp	r3, #0
 8010c56:	d103      	bne.n	8010c60 <_tx_queue_receive+0x114>
                {

                    /* Yes, the only suspended thread.  */

                    /* Update the head pointer.  */
                    queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 8010c58:	68fb      	ldr	r3, [r7, #12]
 8010c5a:	2200      	movs	r2, #0
 8010c5c:	629a      	str	r2, [r3, #40]	; 0x28
 8010c5e:	e00e      	b.n	8010c7e <_tx_queue_receive+0x132>
                {

                    /* At least one more thread is on the same expiration list.  */

                    /* Update the list head pointer.  */
                    next_thread =                            thread_ptr -> tx_thread_suspended_next;
 8010c60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010c62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010c64:	633b      	str	r3, [r7, #48]	; 0x30
                    queue_ptr -> tx_queue_suspension_list =  next_thread;
 8010c66:	68fb      	ldr	r3, [r7, #12]
 8010c68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010c6a:	629a      	str	r2, [r3, #40]	; 0x28

                    /* Update the links of the adjacent threads.  */
                    previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 8010c6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010c6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010c70:	62fb      	str	r3, [r7, #44]	; 0x2c
                    next_thread -> tx_thread_suspended_previous =  previous_thread;
 8010c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010c76:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =  next_thread;
 8010c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010c7c:	671a      	str	r2, [r3, #112]	; 0x70
                }

                /* Decrement the suspension count.  */
                queue_ptr -> tx_queue_suspended_count =  suspended_count;
 8010c7e:	68fb      	ldr	r3, [r7, #12]
 8010c80:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010c82:	62da      	str	r2, [r3, #44]	; 0x2c

                /* Prepare for resumption of the first thread.  */

                /* Clear cleanup routine to avoid timeout.  */
                thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8010c84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010c86:	2200      	movs	r2, #0
 8010c88:	669a      	str	r2, [r3, #104]	; 0x68

                /* Put return status into the thread control block.  */
                thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8010c8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010c8c:	2200      	movs	r2, #0
 8010c8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 8010c92:	4b8e      	ldr	r3, [pc, #568]	; (8010ecc <_tx_queue_receive+0x380>)
 8010c94:	681b      	ldr	r3, [r3, #0]
 8010c96:	3301      	adds	r3, #1
 8010c98:	4a8c      	ldr	r2, [pc, #560]	; (8010ecc <_tx_queue_receive+0x380>)
 8010c9a:	6013      	str	r3, [r2, #0]
 8010c9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010c9e:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8010ca0:	6a3b      	ldr	r3, [r7, #32]
 8010ca2:	f383 8810 	msr	PRIMASK, r3
}
 8010ca6:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Resume thread.  */
                _tx_thread_system_resume(thread_ptr);
 8010ca8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010caa:	f000 ff9f 	bl	8011bec <_tx_thread_system_resume>
 8010cae:	e107      	b.n	8010ec0 <_tx_queue_receive+0x374>
                /* At this point, we know that the queue is full and there 
                   are one or more threads suspended trying to send another
                   message to this queue.  */

                /* Setup source and destination pointers.  */
                source =       queue_ptr -> tx_queue_read;
 8010cb0:	68fb      	ldr	r3, [r7, #12]
 8010cb2:	6a1b      	ldr	r3, [r3, #32]
 8010cb4:	64fb      	str	r3, [r7, #76]	; 0x4c
                destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(destination_ptr);
 8010cb6:	68bb      	ldr	r3, [r7, #8]
 8010cb8:	64bb      	str	r3, [r7, #72]	; 0x48
                size =         queue_ptr -> tx_queue_message_size;
 8010cba:	68fb      	ldr	r3, [r7, #12]
 8010cbc:	689b      	ldr	r3, [r3, #8]
 8010cbe:	647b      	str	r3, [r7, #68]	; 0x44

                /* Copy message. Note that the source and destination pointers are 
                   incremented by the macro.  */
                TX_QUEUE_MESSAGE_COPY(source, destination, size)
 8010cc0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010cc2:	1d13      	adds	r3, r2, #4
 8010cc4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010cc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010cc8:	1d19      	adds	r1, r3, #4
 8010cca:	64b9      	str	r1, [r7, #72]	; 0x48
 8010ccc:	6812      	ldr	r2, [r2, #0]
 8010cce:	601a      	str	r2, [r3, #0]
 8010cd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010cd2:	2b01      	cmp	r3, #1
 8010cd4:	d90e      	bls.n	8010cf4 <_tx_queue_receive+0x1a8>
 8010cd6:	e007      	b.n	8010ce8 <_tx_queue_receive+0x19c>
 8010cd8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010cda:	1d13      	adds	r3, r2, #4
 8010cdc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010cde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010ce0:	1d19      	adds	r1, r3, #4
 8010ce2:	64b9      	str	r1, [r7, #72]	; 0x48
 8010ce4:	6812      	ldr	r2, [r2, #0]
 8010ce6:	601a      	str	r2, [r3, #0]
 8010ce8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010cea:	3b01      	subs	r3, #1
 8010cec:	647b      	str	r3, [r7, #68]	; 0x44
 8010cee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010cf0:	2b00      	cmp	r3, #0
 8010cf2:	d1f1      	bne.n	8010cd8 <_tx_queue_receive+0x18c>

                /* Determine if we are at the end.  */
                if (source == queue_ptr -> tx_queue_end)
 8010cf4:	68fb      	ldr	r3, [r7, #12]
 8010cf6:	69db      	ldr	r3, [r3, #28]
 8010cf8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010cfa:	429a      	cmp	r2, r3
 8010cfc:	d102      	bne.n	8010d04 <_tx_queue_receive+0x1b8>
                {

                    /* Yes, wrap around to the beginning.  */
                    source =  queue_ptr -> tx_queue_start;
 8010cfe:	68fb      	ldr	r3, [r7, #12]
 8010d00:	699b      	ldr	r3, [r3, #24]
 8010d02:	64fb      	str	r3, [r7, #76]	; 0x4c
                }

                /* Setup the queue read pointer.   */
                queue_ptr -> tx_queue_read =  source;
 8010d04:	68fb      	ldr	r3, [r7, #12]
 8010d06:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010d08:	621a      	str	r2, [r3, #32]
  
                /* Disable preemption.  */
                _tx_thread_preempt_disable++;
 8010d0a:	4b70      	ldr	r3, [pc, #448]	; (8010ecc <_tx_queue_receive+0x380>)
 8010d0c:	681b      	ldr	r3, [r3, #0]
 8010d0e:	3301      	adds	r3, #1
 8010d10:	4a6e      	ldr	r2, [pc, #440]	; (8010ecc <_tx_queue_receive+0x380>)
 8010d12:	6013      	str	r3, [r2, #0]
                /* Disable interrupts again.  */
                TX_DISABLE
#endif

                /* Decrement the preemption disable variable.  */
                _tx_thread_preempt_disable--;
 8010d14:	4b6d      	ldr	r3, [pc, #436]	; (8010ecc <_tx_queue_receive+0x380>)
 8010d16:	681b      	ldr	r3, [r3, #0]
 8010d18:	3b01      	subs	r3, #1
 8010d1a:	4a6c      	ldr	r2, [pc, #432]	; (8010ecc <_tx_queue_receive+0x380>)
 8010d1c:	6013      	str	r3, [r2, #0]

                /* Setup source and destination pointers.  */
                source =       TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 8010d1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010d22:	64fb      	str	r3, [r7, #76]	; 0x4c
                destination =  queue_ptr -> tx_queue_write;
 8010d24:	68fb      	ldr	r3, [r7, #12]
 8010d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010d28:	64bb      	str	r3, [r7, #72]	; 0x48
                size =         queue_ptr -> tx_queue_message_size;
 8010d2a:	68fb      	ldr	r3, [r7, #12]
 8010d2c:	689b      	ldr	r3, [r3, #8]
 8010d2e:	647b      	str	r3, [r7, #68]	; 0x44

                /* Copy message. Note that the source and destination pointers are 
                   incremented by the macro.  */
                TX_QUEUE_MESSAGE_COPY(source, destination, size)
 8010d30:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010d32:	1d13      	adds	r3, r2, #4
 8010d34:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010d36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010d38:	1d19      	adds	r1, r3, #4
 8010d3a:	64b9      	str	r1, [r7, #72]	; 0x48
 8010d3c:	6812      	ldr	r2, [r2, #0]
 8010d3e:	601a      	str	r2, [r3, #0]
 8010d40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010d42:	2b01      	cmp	r3, #1
 8010d44:	d90e      	bls.n	8010d64 <_tx_queue_receive+0x218>
 8010d46:	e007      	b.n	8010d58 <_tx_queue_receive+0x20c>
 8010d48:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010d4a:	1d13      	adds	r3, r2, #4
 8010d4c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010d4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010d50:	1d19      	adds	r1, r3, #4
 8010d52:	64b9      	str	r1, [r7, #72]	; 0x48
 8010d54:	6812      	ldr	r2, [r2, #0]
 8010d56:	601a      	str	r2, [r3, #0]
 8010d58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010d5a:	3b01      	subs	r3, #1
 8010d5c:	647b      	str	r3, [r7, #68]	; 0x44
 8010d5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010d60:	2b00      	cmp	r3, #0
 8010d62:	d1f1      	bne.n	8010d48 <_tx_queue_receive+0x1fc>

                /* Determine if we are at the end.  */
                if (destination == queue_ptr -> tx_queue_end)
 8010d64:	68fb      	ldr	r3, [r7, #12]
 8010d66:	69db      	ldr	r3, [r3, #28]
 8010d68:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010d6a:	429a      	cmp	r2, r3
 8010d6c:	d102      	bne.n	8010d74 <_tx_queue_receive+0x228>
                {
            
                    /* Yes, wrap around to the beginning.  */
                    destination =  queue_ptr -> tx_queue_start;
 8010d6e:	68fb      	ldr	r3, [r7, #12]
 8010d70:	699b      	ldr	r3, [r3, #24]
 8010d72:	64bb      	str	r3, [r7, #72]	; 0x48
                }

                /* Adjust the write pointer.  */
                queue_ptr -> tx_queue_write =  destination;
 8010d74:	68fb      	ldr	r3, [r7, #12]
 8010d76:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010d78:	625a      	str	r2, [r3, #36]	; 0x24

                /* Pickup thread pointer.  */
                thread_ptr =  queue_ptr -> tx_queue_suspension_list;
 8010d7a:	68fb      	ldr	r3, [r7, #12]
 8010d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010d7e:	637b      	str	r3, [r7, #52]	; 0x34

                /* Message is now in the queue.  See if this is the only suspended thread 
                   on the list.  */
                suspended_count--;
 8010d80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d82:	3b01      	subs	r3, #1
 8010d84:	63bb      	str	r3, [r7, #56]	; 0x38
                if (suspended_count == TX_NO_SUSPENSIONS)
 8010d86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d88:	2b00      	cmp	r3, #0
 8010d8a:	d103      	bne.n	8010d94 <_tx_queue_receive+0x248>
                {

                  /* Yes, the only suspended thread.  */

                    /* Update the head pointer.  */
                    queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 8010d8c:	68fb      	ldr	r3, [r7, #12]
 8010d8e:	2200      	movs	r2, #0
 8010d90:	629a      	str	r2, [r3, #40]	; 0x28
 8010d92:	e00e      	b.n	8010db2 <_tx_queue_receive+0x266>
                {

                    /* At least one more thread is on the same expiration list.  */

                    /* Update the list head pointer.  */
                    next_thread =                            thread_ptr -> tx_thread_suspended_next;
 8010d94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010d98:	633b      	str	r3, [r7, #48]	; 0x30
                    queue_ptr -> tx_queue_suspension_list =  next_thread;
 8010d9a:	68fb      	ldr	r3, [r7, #12]
 8010d9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010d9e:	629a      	str	r2, [r3, #40]	; 0x28

                    /* Update the links of the adjacent threads.  */
                    previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8010da0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010da2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010da4:	62fb      	str	r3, [r7, #44]	; 0x2c
                    next_thread -> tx_thread_suspended_previous =   previous_thread;
 8010da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010da8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010daa:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   next_thread;
 8010dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010dae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010db0:	671a      	str	r2, [r3, #112]	; 0x70
                }

                /* Decrement the suspension count.  */
                queue_ptr -> tx_queue_suspended_count =  suspended_count;
 8010db2:	68fb      	ldr	r3, [r7, #12]
 8010db4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010db6:	62da      	str	r2, [r3, #44]	; 0x2c

                /* Prepare for resumption of the first thread.  */

                /* Clear cleanup routine to avoid timeout.  */
                thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8010db8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010dba:	2200      	movs	r2, #0
 8010dbc:	669a      	str	r2, [r3, #104]	; 0x68

                /* Put return status into the thread control block.  */
                thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8010dbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010dc0:	2200      	movs	r2, #0
 8010dc2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 8010dc6:	4b41      	ldr	r3, [pc, #260]	; (8010ecc <_tx_queue_receive+0x380>)
 8010dc8:	681b      	ldr	r3, [r3, #0]
 8010dca:	3301      	adds	r3, #1
 8010dcc:	4a3f      	ldr	r2, [pc, #252]	; (8010ecc <_tx_queue_receive+0x380>)
 8010dce:	6013      	str	r3, [r2, #0]
 8010dd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010dd2:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8010dd4:	69fb      	ldr	r3, [r7, #28]
 8010dd6:	f383 8810 	msr	PRIMASK, r3
}
 8010dda:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Resume thread.  */
                _tx_thread_system_resume(thread_ptr);
 8010ddc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010dde:	f000 ff05 	bl	8011bec <_tx_thread_system_resume>
 8010de2:	e06d      	b.n	8010ec0 <_tx_queue_receive+0x374>
            }
        }
    }

    /* Determine if the request specifies suspension.  */
    else if (wait_option != TX_NO_WAIT)
 8010de4:	687b      	ldr	r3, [r7, #4]
 8010de6:	2b00      	cmp	r3, #0
 8010de8:	d062      	beq.n	8010eb0 <_tx_queue_receive+0x364>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 8010dea:	4b38      	ldr	r3, [pc, #224]	; (8010ecc <_tx_queue_receive+0x380>)
 8010dec:	681b      	ldr	r3, [r3, #0]
 8010dee:	2b00      	cmp	r3, #0
 8010df0:	d008      	beq.n	8010e04 <_tx_queue_receive+0x2b8>
 8010df2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010df4:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8010df6:	69bb      	ldr	r3, [r7, #24]
 8010df8:	f383 8810 	msr	PRIMASK, r3
}
 8010dfc:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE
           
            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_QUEUE_EMPTY;
 8010dfe:	230a      	movs	r3, #10
 8010e00:	643b      	str	r3, [r7, #64]	; 0x40
 8010e02:	e05d      	b.n	8010ec0 <_tx_queue_receive+0x374>
            /* Increment the number of empty suspensions on this queue.  */
            queue_ptr -> tx_queue_performance_empty_suspension_count++;
#endif
            
            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8010e04:	4b32      	ldr	r3, [pc, #200]	; (8010ed0 <_tx_queue_receive+0x384>)
 8010e06:	681b      	ldr	r3, [r3, #0]
 8010e08:	637b      	str	r3, [r7, #52]	; 0x34

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_queue_cleanup);
 8010e0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e0c:	4a31      	ldr	r2, [pc, #196]	; (8010ed4 <_tx_queue_receive+0x388>)
 8010e0e:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup cleanup information, i.e. this queue control
               block and the source pointer.  */
            thread_ptr -> tx_thread_suspend_control_block =    (VOID *) queue_ptr;
 8010e10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e12:	68fa      	ldr	r2, [r7, #12]
 8010e14:	66da      	str	r2, [r3, #108]	; 0x6c
            thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) destination_ptr;
 8010e16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e18:	68ba      	ldr	r2, [r7, #8]
 8010e1a:	67da      	str	r2, [r3, #124]	; 0x7c
            thread_ptr -> tx_thread_suspend_option =           TX_FALSE;
 8010e1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e1e:	2200      	movs	r2, #0
 8010e20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 8010e24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e26:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8010e2a:	1c5a      	adds	r2, r3, #1
 8010e2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e2e:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

            /* Setup suspension list.  */
            if (suspended_count == TX_NO_SUSPENSIONS)
 8010e32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e34:	2b00      	cmp	r3, #0
 8010e36:	d109      	bne.n	8010e4c <_tx_queue_receive+0x300>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                queue_ptr -> tx_queue_suspension_list =         thread_ptr;
 8010e38:	68fb      	ldr	r3, [r7, #12]
 8010e3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010e3c:	629a      	str	r2, [r3, #40]	; 0x28
                thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 8010e3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e40:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010e42:	671a      	str	r2, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 8010e44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010e48:	675a      	str	r2, [r3, #116]	; 0x74
 8010e4a:	e011      	b.n	8010e70 <_tx_queue_receive+0x324>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   queue_ptr -> tx_queue_suspension_list;
 8010e4c:	68fb      	ldr	r3, [r7, #12]
 8010e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010e50:	633b      	str	r3, [r7, #48]	; 0x30
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 8010e52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010e56:	671a      	str	r2, [r3, #112]	; 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 8010e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 8010e5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010e62:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 8010e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e66:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010e68:	671a      	str	r2, [r3, #112]	; 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 8010e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e6c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010e6e:	675a      	str	r2, [r3, #116]	; 0x74
            }

            /* Increment the suspended thread count.  */
            queue_ptr -> tx_queue_suspended_count =  suspended_count + ((UINT) 1);
 8010e70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e72:	1c5a      	adds	r2, r3, #1
 8010e74:	68fb      	ldr	r3, [r7, #12]
 8010e76:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_QUEUE_SUSP;
 8010e78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e7a:	2205      	movs	r2, #5
 8010e7c:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8010e7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e80:	2201      	movs	r2, #1
 8010e82:	639a      	str	r2, [r3, #56]	; 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 8010e84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e86:	687a      	ldr	r2, [r7, #4]
 8010e88:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8010e8a:	4b10      	ldr	r3, [pc, #64]	; (8010ecc <_tx_queue_receive+0x380>)
 8010e8c:	681b      	ldr	r3, [r3, #0]
 8010e8e:	3301      	adds	r3, #1
 8010e90:	4a0e      	ldr	r2, [pc, #56]	; (8010ecc <_tx_queue_receive+0x380>)
 8010e92:	6013      	str	r3, [r2, #0]
 8010e94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010e96:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8010e98:	697b      	ldr	r3, [r7, #20]
 8010e9a:	f383 8810 	msr	PRIMASK, r3
}
 8010e9e:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 8010ea0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010ea2:	f000 ffad 	bl	8011e00 <_tx_thread_system_suspend>
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 8010ea6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010ea8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010eac:	643b      	str	r3, [r7, #64]	; 0x40
 8010eae:	e007      	b.n	8010ec0 <_tx_queue_receive+0x374>
 8010eb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010eb2:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8010eb4:	693b      	ldr	r3, [r7, #16]
 8010eb6:	f383 8810 	msr	PRIMASK, r3
}
 8010eba:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE
           
        /* Immediate return, return error completion.  */
        status =  TX_QUEUE_EMPTY;
 8010ebc:	230a      	movs	r3, #10
 8010ebe:	643b      	str	r3, [r7, #64]	; 0x40
    }

    /* Return completion status.  */
    return(status);
 8010ec0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 8010ec2:	4618      	mov	r0, r3
 8010ec4:	3750      	adds	r7, #80	; 0x50
 8010ec6:	46bd      	mov	sp, r7
 8010ec8:	bd80      	pop	{r7, pc}
 8010eca:	bf00      	nop
 8010ecc:	200260fc 	.word	0x200260fc
 8010ed0:	20026064 	.word	0x20026064
 8010ed4:	08010559 	.word	0x08010559

08010ed8 <_tx_queue_send>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_queue_send(TX_QUEUE *queue_ptr, VOID *source_ptr, ULONG wait_option)
{
 8010ed8:	b580      	push	{r7, lr}
 8010eda:	b094      	sub	sp, #80	; 0x50
 8010edc:	af00      	add	r7, sp, #0
 8010ede:	60f8      	str	r0, [r7, #12]
 8010ee0:	60b9      	str	r1, [r7, #8]
 8010ee2:	607a      	str	r2, [r7, #4]
VOID            (*queue_send_notify)(struct TX_QUEUE_STRUCT *notify_queue_ptr);
#endif


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 8010ee4:	2300      	movs	r3, #0
 8010ee6:	643b      	str	r3, [r7, #64]	; 0x40
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8010ee8:	f3ef 8310 	mrs	r3, PRIMASK
 8010eec:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile (" CPSID i" : : : "memory" );
 8010eee:	b672      	cpsid	i
    return(primask_value);
 8010ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28

    /* Disable interrupts to place message in the queue.  */
    TX_DISABLE
 8010ef2:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Log this kernel call.  */
    TX_EL_QUEUE_SEND_INSERT

    /* Pickup the thread suspension count.  */
    suspended_count =  queue_ptr -> tx_queue_suspended_count;
 8010ef4:	68fb      	ldr	r3, [r7, #12]
 8010ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010ef8:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Determine if there is room in the queue.  */
    if (queue_ptr -> tx_queue_available_storage != TX_NO_MESSAGES)
 8010efa:	68fb      	ldr	r3, [r7, #12]
 8010efc:	695b      	ldr	r3, [r3, #20]
 8010efe:	2b00      	cmp	r3, #0
 8010f00:	f000 809b 	beq.w	801103a <_tx_queue_send+0x162>
    {

        /* There is room for the message in the queue.  */

        /* Determine if there are suspended on this queue.  */
        if (suspended_count == TX_NO_SUSPENSIONS)
 8010f04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f06:	2b00      	cmp	r3, #0
 8010f08:	d13c      	bne.n	8010f84 <_tx_queue_send+0xac>
        {
        
            /* No suspended threads, simply place the message in the queue.  */
            
            /* Reduce the amount of available storage.  */
            queue_ptr -> tx_queue_available_storage--;
 8010f0a:	68fb      	ldr	r3, [r7, #12]
 8010f0c:	695b      	ldr	r3, [r3, #20]
 8010f0e:	1e5a      	subs	r2, r3, #1
 8010f10:	68fb      	ldr	r3, [r7, #12]
 8010f12:	615a      	str	r2, [r3, #20]

            /* Increase the enqueued count.  */
            queue_ptr -> tx_queue_enqueued++;
 8010f14:	68fb      	ldr	r3, [r7, #12]
 8010f16:	691b      	ldr	r3, [r3, #16]
 8010f18:	1c5a      	adds	r2, r3, #1
 8010f1a:	68fb      	ldr	r3, [r7, #12]
 8010f1c:	611a      	str	r2, [r3, #16]

            /* Setup source and destination pointers.  */
            source =       TX_VOID_TO_ULONG_POINTER_CONVERT(source_ptr);
 8010f1e:	68bb      	ldr	r3, [r7, #8]
 8010f20:	64fb      	str	r3, [r7, #76]	; 0x4c
            destination =  queue_ptr -> tx_queue_write;
 8010f22:	68fb      	ldr	r3, [r7, #12]
 8010f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f26:	64bb      	str	r3, [r7, #72]	; 0x48
            size =         queue_ptr -> tx_queue_message_size;
 8010f28:	68fb      	ldr	r3, [r7, #12]
 8010f2a:	689b      	ldr	r3, [r3, #8]
 8010f2c:	647b      	str	r3, [r7, #68]	; 0x44

            /* Copy message. Note that the source and destination pointers are 
               incremented by the macro.  */
            TX_QUEUE_MESSAGE_COPY(source, destination, size)
 8010f2e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010f30:	1d13      	adds	r3, r2, #4
 8010f32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010f34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010f36:	1d19      	adds	r1, r3, #4
 8010f38:	64b9      	str	r1, [r7, #72]	; 0x48
 8010f3a:	6812      	ldr	r2, [r2, #0]
 8010f3c:	601a      	str	r2, [r3, #0]
 8010f3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010f40:	2b01      	cmp	r3, #1
 8010f42:	d90e      	bls.n	8010f62 <_tx_queue_send+0x8a>
 8010f44:	e007      	b.n	8010f56 <_tx_queue_send+0x7e>
 8010f46:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010f48:	1d13      	adds	r3, r2, #4
 8010f4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010f4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010f4e:	1d19      	adds	r1, r3, #4
 8010f50:	64b9      	str	r1, [r7, #72]	; 0x48
 8010f52:	6812      	ldr	r2, [r2, #0]
 8010f54:	601a      	str	r2, [r3, #0]
 8010f56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010f58:	3b01      	subs	r3, #1
 8010f5a:	647b      	str	r3, [r7, #68]	; 0x44
 8010f5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010f5e:	2b00      	cmp	r3, #0
 8010f60:	d1f1      	bne.n	8010f46 <_tx_queue_send+0x6e>

            /* Determine if we are at the end.  */
            if (destination == queue_ptr -> tx_queue_end)
 8010f62:	68fb      	ldr	r3, [r7, #12]
 8010f64:	69db      	ldr	r3, [r3, #28]
 8010f66:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010f68:	429a      	cmp	r2, r3
 8010f6a:	d102      	bne.n	8010f72 <_tx_queue_send+0x9a>
            {

                /* Yes, wrap around to the beginning.  */
                destination =  queue_ptr -> tx_queue_start;
 8010f6c:	68fb      	ldr	r3, [r7, #12]
 8010f6e:	699b      	ldr	r3, [r3, #24]
 8010f70:	64bb      	str	r3, [r7, #72]	; 0x48
            }

            /* Adjust the write pointer.  */
            queue_ptr -> tx_queue_write =  destination;
 8010f72:	68fb      	ldr	r3, [r7, #12]
 8010f74:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010f76:	625a      	str	r2, [r3, #36]	; 0x24
 8010f78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010f7a:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8010f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f7e:	f383 8810 	msr	PRIMASK, r3
}
 8010f82:	e0c8      	b.n	8011116 <_tx_queue_send+0x23e>
            /* There is a thread suspended on an empty queue. Simply 
               copy the message to the suspended thread's destination
               pointer.  */

            /* Pickup the head of the suspension list.  */
            thread_ptr =  queue_ptr -> tx_queue_suspension_list;
 8010f84:	68fb      	ldr	r3, [r7, #12]
 8010f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010f88:	637b      	str	r3, [r7, #52]	; 0x34

            /* See if this is the only suspended thread on the list.  */
            suspended_count--;
 8010f8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f8c:	3b01      	subs	r3, #1
 8010f8e:	63bb      	str	r3, [r7, #56]	; 0x38
            if (suspended_count == TX_NO_SUSPENSIONS)
 8010f90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f92:	2b00      	cmp	r3, #0
 8010f94:	d103      	bne.n	8010f9e <_tx_queue_send+0xc6>
            {

                /* Yes, the only suspended thread.  */

                /* Update the head pointer.  */
                queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 8010f96:	68fb      	ldr	r3, [r7, #12]
 8010f98:	2200      	movs	r2, #0
 8010f9a:	629a      	str	r2, [r3, #40]	; 0x28
 8010f9c:	e012      	b.n	8010fc4 <_tx_queue_send+0xec>
            {

                /* At least one more thread is on the same expiration list.  */

                /* Update the list head pointer.  */
                queue_ptr -> tx_queue_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 8010f9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010fa0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8010fa2:	68fb      	ldr	r3, [r7, #12]
 8010fa4:	629a      	str	r2, [r3, #40]	; 0x28

                /* Update the links of the adjacent threads.  */
                next_thread =                            thread_ptr -> tx_thread_suspended_next;
 8010fa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010fa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010faa:	633b      	str	r3, [r7, #48]	; 0x30
                queue_ptr -> tx_queue_suspension_list =  next_thread;
 8010fac:	68fb      	ldr	r3, [r7, #12]
 8010fae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010fb0:	629a      	str	r2, [r3, #40]	; 0x28

                /* Update the links of the adjacent threads.  */
                previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8010fb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010fb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010fb6:	62fb      	str	r3, [r7, #44]	; 0x2c
                next_thread -> tx_thread_suspended_previous =   previous_thread;
 8010fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010fbc:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   next_thread;
 8010fbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010fc2:	671a      	str	r2, [r3, #112]	; 0x70
            }

            /* Decrement the suspension count.  */
            queue_ptr -> tx_queue_suspended_count =  suspended_count;
 8010fc4:	68fb      	ldr	r3, [r7, #12]
 8010fc6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010fc8:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Prepare for resumption of the thread.  */

            /* Clear cleanup routine to avoid timeout.  */
            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8010fca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010fcc:	2200      	movs	r2, #0
 8010fce:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup source and destination pointers.  */
            source =       TX_VOID_TO_ULONG_POINTER_CONVERT(source_ptr);
 8010fd0:	68bb      	ldr	r3, [r7, #8]
 8010fd2:	64fb      	str	r3, [r7, #76]	; 0x4c
            destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 8010fd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010fd6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010fd8:	64bb      	str	r3, [r7, #72]	; 0x48
            size =         queue_ptr -> tx_queue_message_size;
 8010fda:	68fb      	ldr	r3, [r7, #12]
 8010fdc:	689b      	ldr	r3, [r3, #8]
 8010fde:	647b      	str	r3, [r7, #68]	; 0x44

            /* Copy message. Note that the source and destination pointers are 
               incremented by the macro.  */
            TX_QUEUE_MESSAGE_COPY(source, destination, size)
 8010fe0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010fe2:	1d13      	adds	r3, r2, #4
 8010fe4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010fe6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010fe8:	1d19      	adds	r1, r3, #4
 8010fea:	64b9      	str	r1, [r7, #72]	; 0x48
 8010fec:	6812      	ldr	r2, [r2, #0]
 8010fee:	601a      	str	r2, [r3, #0]
 8010ff0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010ff2:	2b01      	cmp	r3, #1
 8010ff4:	d90e      	bls.n	8011014 <_tx_queue_send+0x13c>
 8010ff6:	e007      	b.n	8011008 <_tx_queue_send+0x130>
 8010ff8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010ffa:	1d13      	adds	r3, r2, #4
 8010ffc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010ffe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011000:	1d19      	adds	r1, r3, #4
 8011002:	64b9      	str	r1, [r7, #72]	; 0x48
 8011004:	6812      	ldr	r2, [r2, #0]
 8011006:	601a      	str	r2, [r3, #0]
 8011008:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801100a:	3b01      	subs	r3, #1
 801100c:	647b      	str	r3, [r7, #68]	; 0x44
 801100e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011010:	2b00      	cmp	r3, #0
 8011012:	d1f1      	bne.n	8010ff8 <_tx_queue_send+0x120>

            /* Put return status into the thread control block.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8011014:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011016:	2200      	movs	r2, #0
 8011018:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 801101c:	4b40      	ldr	r3, [pc, #256]	; (8011120 <_tx_queue_send+0x248>)
 801101e:	681b      	ldr	r3, [r3, #0]
 8011020:	3301      	adds	r3, #1
 8011022:	4a3f      	ldr	r2, [pc, #252]	; (8011120 <_tx_queue_send+0x248>)
 8011024:	6013      	str	r3, [r2, #0]
 8011026:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011028:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801102a:	6a3b      	ldr	r3, [r7, #32]
 801102c:	f383 8810 	msr	PRIMASK, r3
}
 8011030:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Resume thread.  */
            _tx_thread_system_resume(thread_ptr);
 8011032:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8011034:	f000 fdda 	bl	8011bec <_tx_thread_system_resume>
 8011038:	e06d      	b.n	8011116 <_tx_queue_send+0x23e>
#endif
        }
    }
    
    /* At this point, the queue is full. Determine if suspension is requested.  */
    else if (wait_option != TX_NO_WAIT)
 801103a:	687b      	ldr	r3, [r7, #4]
 801103c:	2b00      	cmp	r3, #0
 801103e:	d062      	beq.n	8011106 <_tx_queue_send+0x22e>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 8011040:	4b37      	ldr	r3, [pc, #220]	; (8011120 <_tx_queue_send+0x248>)
 8011042:	681b      	ldr	r3, [r3, #0]
 8011044:	2b00      	cmp	r3, #0
 8011046:	d008      	beq.n	801105a <_tx_queue_send+0x182>
 8011048:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801104a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801104c:	69fb      	ldr	r3, [r7, #28]
 801104e:	f383 8810 	msr	PRIMASK, r3
}
 8011052:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_QUEUE_FULL;
 8011054:	230b      	movs	r3, #11
 8011056:	643b      	str	r3, [r7, #64]	; 0x40
 8011058:	e05d      	b.n	8011116 <_tx_queue_send+0x23e>
            /* Increment the number of full suspensions on this queue.  */
            queue_ptr -> tx_queue_performance_full_suspension_count++;
#endif
            
            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 801105a:	4b32      	ldr	r3, [pc, #200]	; (8011124 <_tx_queue_send+0x24c>)
 801105c:	681b      	ldr	r3, [r3, #0]
 801105e:	637b      	str	r3, [r7, #52]	; 0x34

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_queue_cleanup);
 8011060:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011062:	4a31      	ldr	r2, [pc, #196]	; (8011128 <_tx_queue_send+0x250>)
 8011064:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup cleanup information, i.e. this queue control
               block and the source pointer.  */
            thread_ptr -> tx_thread_suspend_control_block =    (VOID *) queue_ptr;
 8011066:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011068:	68fa      	ldr	r2, [r7, #12]
 801106a:	66da      	str	r2, [r3, #108]	; 0x6c
            thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) source_ptr;
 801106c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801106e:	68ba      	ldr	r2, [r7, #8]
 8011070:	67da      	str	r2, [r3, #124]	; 0x7c
            thread_ptr -> tx_thread_suspend_option =           TX_FALSE;
 8011072:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011074:	2200      	movs	r2, #0
 8011076:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 801107a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801107c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8011080:	1c5a      	adds	r2, r3, #1
 8011082:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011084:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

            /* Setup suspension list.  */
            if (suspended_count == TX_NO_SUSPENSIONS)
 8011088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801108a:	2b00      	cmp	r3, #0
 801108c:	d109      	bne.n	80110a2 <_tx_queue_send+0x1ca>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                queue_ptr -> tx_queue_suspension_list =         thread_ptr;
 801108e:	68fb      	ldr	r3, [r7, #12]
 8011090:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011092:	629a      	str	r2, [r3, #40]	; 0x28
                thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 8011094:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011096:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011098:	671a      	str	r2, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 801109a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801109c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801109e:	675a      	str	r2, [r3, #116]	; 0x74
 80110a0:	e011      	b.n	80110c6 <_tx_queue_send+0x1ee>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   queue_ptr -> tx_queue_suspension_list;
 80110a2:	68fb      	ldr	r3, [r7, #12]
 80110a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80110a6:	633b      	str	r3, [r7, #48]	; 0x30
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 80110a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80110aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80110ac:	671a      	str	r2, [r3, #112]	; 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 80110ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80110b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80110b2:	62fb      	str	r3, [r7, #44]	; 0x2c
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 80110b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80110b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80110b8:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 80110ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80110be:	671a      	str	r2, [r3, #112]	; 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 80110c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80110c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80110c4:	675a      	str	r2, [r3, #116]	; 0x74
            }

            /* Increment the suspended thread count.  */
            queue_ptr -> tx_queue_suspended_count =  suspended_count + ((UINT) 1);
 80110c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80110c8:	1c5a      	adds	r2, r3, #1
 80110ca:	68fb      	ldr	r3, [r7, #12]
 80110cc:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_QUEUE_SUSP;
 80110ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80110d0:	2205      	movs	r2, #5
 80110d2:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 80110d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80110d6:	2201      	movs	r2, #1
 80110d8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 80110da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80110dc:	687a      	ldr	r2, [r7, #4]
 80110de:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 80110e0:	4b0f      	ldr	r3, [pc, #60]	; (8011120 <_tx_queue_send+0x248>)
 80110e2:	681b      	ldr	r3, [r3, #0]
 80110e4:	3301      	adds	r3, #1
 80110e6:	4a0e      	ldr	r2, [pc, #56]	; (8011120 <_tx_queue_send+0x248>)
 80110e8:	6013      	str	r3, [r2, #0]
 80110ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80110ec:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80110ee:	69bb      	ldr	r3, [r7, #24]
 80110f0:	f383 8810 	msr	PRIMASK, r3
}
 80110f4:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 80110f6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80110f8:	f000 fe82 	bl	8011e00 <_tx_thread_system_suspend>
                }
            }
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 80110fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80110fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011102:	643b      	str	r3, [r7, #64]	; 0x40
 8011104:	e007      	b.n	8011116 <_tx_queue_send+0x23e>
 8011106:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011108:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801110a:	697b      	ldr	r3, [r7, #20]
 801110c:	f383 8810 	msr	PRIMASK, r3
}
 8011110:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return error completion.  */
        status =  TX_QUEUE_FULL;
 8011112:	230b      	movs	r3, #11
 8011114:	643b      	str	r3, [r7, #64]	; 0x40
    }

    /* Return completion status.  */
    return(status);
 8011116:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 8011118:	4618      	mov	r0, r3
 801111a:	3750      	adds	r7, #80	; 0x50
 801111c:	46bd      	mov	sp, r7
 801111e:	bd80      	pop	{r7, pc}
 8011120:	200260fc 	.word	0x200260fc
 8011124:	20026064 	.word	0x20026064
 8011128:	08010559 	.word	0x08010559

0801112c <_tx_semaphore_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_semaphore_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 801112c:	b580      	push	{r7, lr}
 801112e:	b08c      	sub	sp, #48	; 0x30
 8011130:	af00      	add	r7, sp, #0
 8011132:	6078      	str	r0, [r7, #4]
 8011134:	6039      	str	r1, [r7, #0]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8011136:	f3ef 8310 	mrs	r3, PRIMASK
 801113a:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 801113c:	b672      	cpsid	i
    return(primask_value);
 801113e:	69bb      	ldr	r3, [r7, #24]
    

#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the semaphore.  */
    TX_DISABLE
 8011140:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_semaphore_cleanup))
 8011142:	687b      	ldr	r3, [r7, #4]
 8011144:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011146:	4a32      	ldr	r2, [pc, #200]	; (8011210 <_tx_semaphore_cleanup+0xe4>)
 8011148:	4293      	cmp	r3, r2
 801114a:	d156      	bne.n	80111fa <_tx_semaphore_cleanup+0xce>
    {
    
        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 801114c:	687b      	ldr	r3, [r7, #4]
 801114e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8011152:	683a      	ldr	r2, [r7, #0]
 8011154:	429a      	cmp	r2, r3
 8011156:	d150      	bne.n	80111fa <_tx_semaphore_cleanup+0xce>
        {

            /* Setup pointer to semaphore control block.  */
            semaphore_ptr =  TX_VOID_TO_SEMAPHORE_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 8011158:	687b      	ldr	r3, [r7, #4]
 801115a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801115c:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Check for a NULL semaphore pointer.  */
            if (semaphore_ptr != TX_NULL)
 801115e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011160:	2b00      	cmp	r3, #0
 8011162:	d04a      	beq.n	80111fa <_tx_semaphore_cleanup+0xce>
            {

                /* Check for a valid semaphore ID.  */
                if (semaphore_ptr -> tx_semaphore_id == TX_SEMAPHORE_ID)
 8011164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011166:	681b      	ldr	r3, [r3, #0]
 8011168:	4a2a      	ldr	r2, [pc, #168]	; (8011214 <_tx_semaphore_cleanup+0xe8>)
 801116a:	4293      	cmp	r3, r2
 801116c:	d145      	bne.n	80111fa <_tx_semaphore_cleanup+0xce>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (semaphore_ptr -> tx_semaphore_suspended_count != TX_NO_SUSPENSIONS)
 801116e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011170:	691b      	ldr	r3, [r3, #16]
 8011172:	2b00      	cmp	r3, #0
 8011174:	d041      	beq.n	80111fa <_tx_semaphore_cleanup+0xce>
#endif
                
                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8011176:	687b      	ldr	r3, [r7, #4]
 8011178:	2200      	movs	r2, #0
 801117a:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspended count.  */
                        semaphore_ptr -> tx_semaphore_suspended_count--;
 801117c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801117e:	691b      	ldr	r3, [r3, #16]
 8011180:	1e5a      	subs	r2, r3, #1
 8011182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011184:	611a      	str	r2, [r3, #16]

                        /* Pickup the suspended count.  */
                        suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 8011186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011188:	691b      	ldr	r3, [r3, #16]
 801118a:	627b      	str	r3, [r7, #36]	; 0x24

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 801118c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801118e:	2b00      	cmp	r3, #0
 8011190:	d103      	bne.n	801119a <_tx_semaphore_cleanup+0x6e>
                        {

                            /* Yes, the only suspended thread.  */
    
                            /* Update the head pointer.  */
                            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 8011192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011194:	2200      	movs	r2, #0
 8011196:	60da      	str	r2, [r3, #12]
 8011198:	e013      	b.n	80111c2 <_tx_semaphore_cleanup+0x96>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 801119a:	687b      	ldr	r3, [r7, #4]
 801119c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801119e:	623b      	str	r3, [r7, #32]
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 80111a0:	687b      	ldr	r3, [r7, #4]
 80111a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80111a4:	61fb      	str	r3, [r7, #28]
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 80111a6:	6a3b      	ldr	r3, [r7, #32]
 80111a8:	69fa      	ldr	r2, [r7, #28]
 80111aa:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 80111ac:	69fb      	ldr	r3, [r7, #28]
 80111ae:	6a3a      	ldr	r2, [r7, #32]
 80111b0:	671a      	str	r2, [r3, #112]	; 0x70
            
                            /* Determine if we need to update the head pointer.  */
                            if (semaphore_ptr -> tx_semaphore_suspension_list == thread_ptr)
 80111b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111b4:	68db      	ldr	r3, [r3, #12]
 80111b6:	687a      	ldr	r2, [r7, #4]
 80111b8:	429a      	cmp	r2, r3
 80111ba:	d102      	bne.n	80111c2 <_tx_semaphore_cleanup+0x96>
                            {

                                /* Update the list head pointer.  */
                                semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 80111bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111be:	6a3a      	ldr	r2, [r7, #32]
 80111c0:	60da      	str	r2, [r3, #12]
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_SEMAPHORE_SUSP)
 80111c2:	687b      	ldr	r3, [r7, #4]
 80111c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80111c6:	2b06      	cmp	r3, #6
 80111c8:	d117      	bne.n	80111fa <_tx_semaphore_cleanup+0xce>
                            /* Increment the number of timeouts on this semaphore.  */
                            semaphore_ptr -> tx_semaphore_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_INSTANCE;
 80111ca:	687b      	ldr	r3, [r7, #4]
 80111cc:	220d      	movs	r2, #13
 80111ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 80111d2:	4b11      	ldr	r3, [pc, #68]	; (8011218 <_tx_semaphore_cleanup+0xec>)
 80111d4:	681b      	ldr	r3, [r3, #0]
 80111d6:	3301      	adds	r3, #1
 80111d8:	4a0f      	ldr	r2, [pc, #60]	; (8011218 <_tx_semaphore_cleanup+0xec>)
 80111da:	6013      	str	r3, [r2, #0]
 80111dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111de:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80111e0:	693b      	ldr	r3, [r7, #16]
 80111e2:	f383 8810 	msr	PRIMASK, r3
}
 80111e6:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 80111e8:	6878      	ldr	r0, [r7, #4]
 80111ea:	f000 fcff 	bl	8011bec <_tx_thread_system_resume>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80111ee:	f3ef 8310 	mrs	r3, PRIMASK
 80111f2:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" CPSID i" : : : "memory" );
 80111f4:	b672      	cpsid	i
    return(primask_value);
 80111f6:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 80111f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80111fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111fc:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80111fe:	68fb      	ldr	r3, [r7, #12]
 8011200:	f383 8810 	msr	PRIMASK, r3
}
 8011204:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8011206:	bf00      	nop
 8011208:	3730      	adds	r7, #48	; 0x30
 801120a:	46bd      	mov	sp, r7
 801120c:	bd80      	pop	{r7, pc}
 801120e:	bf00      	nop
 8011210:	0801112d 	.word	0x0801112d
 8011214:	53454d41 	.word	0x53454d41
 8011218:	200260fc 	.word	0x200260fc

0801121c <_tx_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count)
{
 801121c:	b580      	push	{r7, lr}
 801121e:	b08a      	sub	sp, #40	; 0x28
 8011220:	af00      	add	r7, sp, #0
 8011222:	60f8      	str	r0, [r7, #12]
 8011224:	60b9      	str	r1, [r7, #8]
 8011226:	607a      	str	r2, [r7, #4]
TX_SEMAPHORE    *next_semaphore;
TX_SEMAPHORE    *previous_semaphore;


    /* Initialize semaphore control block to all zeros.  */
    TX_MEMSET(semaphore_ptr, 0, (sizeof(TX_SEMAPHORE)));
 8011228:	221c      	movs	r2, #28
 801122a:	2100      	movs	r1, #0
 801122c:	68f8      	ldr	r0, [r7, #12]
 801122e:	f012 fcfc 	bl	8023c2a <memset>

    /* Setup the basic semaphore fields.  */
    semaphore_ptr -> tx_semaphore_name =             name_ptr;
 8011232:	68fb      	ldr	r3, [r7, #12]
 8011234:	68ba      	ldr	r2, [r7, #8]
 8011236:	605a      	str	r2, [r3, #4]
    semaphore_ptr -> tx_semaphore_count =            initial_count;
 8011238:	68fb      	ldr	r3, [r7, #12]
 801123a:	687a      	ldr	r2, [r7, #4]
 801123c:	609a      	str	r2, [r3, #8]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 801123e:	f3ef 8310 	mrs	r3, PRIMASK
 8011242:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8011244:	b672      	cpsid	i
    return(primask_value);
 8011246:	69bb      	ldr	r3, [r7, #24]
    
    /* Disable interrupts to place the semaphore on the created list.  */
    TX_DISABLE
 8011248:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the semaphore ID to make it valid.  */
    semaphore_ptr -> tx_semaphore_id =  TX_SEMAPHORE_ID;
 801124a:	68fb      	ldr	r3, [r7, #12]
 801124c:	4a18      	ldr	r2, [pc, #96]	; (80112b0 <_tx_semaphore_create+0x94>)
 801124e:	601a      	str	r2, [r3, #0]

    /* Place the semaphore on the list of created semaphores.  First,
       check for an empty list.  */
    if (_tx_semaphore_created_count == TX_EMPTY)
 8011250:	4b18      	ldr	r3, [pc, #96]	; (80112b4 <_tx_semaphore_create+0x98>)
 8011252:	681b      	ldr	r3, [r3, #0]
 8011254:	2b00      	cmp	r3, #0
 8011256:	d109      	bne.n	801126c <_tx_semaphore_create+0x50>
    {

        /* The created semaphore list is empty.  Add semaphore to empty list.  */
        _tx_semaphore_created_ptr =                       semaphore_ptr;
 8011258:	4a17      	ldr	r2, [pc, #92]	; (80112b8 <_tx_semaphore_create+0x9c>)
 801125a:	68fb      	ldr	r3, [r7, #12]
 801125c:	6013      	str	r3, [r2, #0]
        semaphore_ptr -> tx_semaphore_created_next =      semaphore_ptr;
 801125e:	68fb      	ldr	r3, [r7, #12]
 8011260:	68fa      	ldr	r2, [r7, #12]
 8011262:	615a      	str	r2, [r3, #20]
        semaphore_ptr -> tx_semaphore_created_previous =  semaphore_ptr;
 8011264:	68fb      	ldr	r3, [r7, #12]
 8011266:	68fa      	ldr	r2, [r7, #12]
 8011268:	619a      	str	r2, [r3, #24]
 801126a:	e011      	b.n	8011290 <_tx_semaphore_create+0x74>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_semaphore =      _tx_semaphore_created_ptr;
 801126c:	4b12      	ldr	r3, [pc, #72]	; (80112b8 <_tx_semaphore_create+0x9c>)
 801126e:	681b      	ldr	r3, [r3, #0]
 8011270:	623b      	str	r3, [r7, #32]
        previous_semaphore =  next_semaphore -> tx_semaphore_created_previous;
 8011272:	6a3b      	ldr	r3, [r7, #32]
 8011274:	699b      	ldr	r3, [r3, #24]
 8011276:	61fb      	str	r3, [r7, #28]

        /* Place the new semaphore in the list.  */
        next_semaphore -> tx_semaphore_created_previous =  semaphore_ptr;
 8011278:	6a3b      	ldr	r3, [r7, #32]
 801127a:	68fa      	ldr	r2, [r7, #12]
 801127c:	619a      	str	r2, [r3, #24]
        previous_semaphore -> tx_semaphore_created_next =  semaphore_ptr;
 801127e:	69fb      	ldr	r3, [r7, #28]
 8011280:	68fa      	ldr	r2, [r7, #12]
 8011282:	615a      	str	r2, [r3, #20]

        /* Setup this semaphore's next and previous created links.  */
        semaphore_ptr -> tx_semaphore_created_previous =  previous_semaphore;
 8011284:	68fb      	ldr	r3, [r7, #12]
 8011286:	69fa      	ldr	r2, [r7, #28]
 8011288:	619a      	str	r2, [r3, #24]
        semaphore_ptr -> tx_semaphore_created_next =      next_semaphore;
 801128a:	68fb      	ldr	r3, [r7, #12]
 801128c:	6a3a      	ldr	r2, [r7, #32]
 801128e:	615a      	str	r2, [r3, #20]
    }
    
    /* Increment the created count.  */
    _tx_semaphore_created_count++;
 8011290:	4b08      	ldr	r3, [pc, #32]	; (80112b4 <_tx_semaphore_create+0x98>)
 8011292:	681b      	ldr	r3, [r3, #0]
 8011294:	3301      	adds	r3, #1
 8011296:	4a07      	ldr	r2, [pc, #28]	; (80112b4 <_tx_semaphore_create+0x98>)
 8011298:	6013      	str	r3, [r2, #0]
 801129a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801129c:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801129e:	697b      	ldr	r3, [r7, #20]
 80112a0:	f383 8810 	msr	PRIMASK, r3
}
 80112a4:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 80112a6:	2300      	movs	r3, #0
}
 80112a8:	4618      	mov	r0, r3
 80112aa:	3728      	adds	r7, #40	; 0x28
 80112ac:	46bd      	mov	sp, r7
 80112ae:	bd80      	pop	{r7, pc}
 80112b0:	53454d41 	.word	0x53454d41
 80112b4:	20026030 	.word	0x20026030
 80112b8:	2002602c 	.word	0x2002602c

080112bc <_tx_semaphore_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 80112bc:	b580      	push	{r7, lr}
 80112be:	b08c      	sub	sp, #48	; 0x30
 80112c0:	af00      	add	r7, sp, #0
 80112c2:	6078      	str	r0, [r7, #4]
 80112c4:	6039      	str	r1, [r7, #0]
TX_THREAD       *previous_thread;
UINT            status;


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 80112c6:	2300      	movs	r3, #0
 80112c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80112ca:	f3ef 8310 	mrs	r3, PRIMASK
 80112ce:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 80112d0:	b672      	cpsid	i
    return(primask_value);
 80112d2:	69bb      	ldr	r3, [r7, #24]

    /* Disable interrupts to get an instance from the semaphore.  */
    TX_DISABLE
 80112d4:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_GET_INSERT

    /* Determine if there is an instance of the semaphore.  */
    if (semaphore_ptr -> tx_semaphore_count != ((ULONG) 0))
 80112d6:	687b      	ldr	r3, [r7, #4]
 80112d8:	689b      	ldr	r3, [r3, #8]
 80112da:	2b00      	cmp	r3, #0
 80112dc:	d00a      	beq.n	80112f4 <_tx_semaphore_get+0x38>
    {

        /* Decrement the semaphore count.  */
        semaphore_ptr -> tx_semaphore_count--;
 80112de:	687b      	ldr	r3, [r7, #4]
 80112e0:	689b      	ldr	r3, [r3, #8]
 80112e2:	1e5a      	subs	r2, r3, #1
 80112e4:	687b      	ldr	r3, [r7, #4]
 80112e6:	609a      	str	r2, [r3, #8]
 80112e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112ea:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80112ec:	697b      	ldr	r3, [r7, #20]
 80112ee:	f383 8810 	msr	PRIMASK, r3
}
 80112f2:	e068      	b.n	80113c6 <_tx_semaphore_get+0x10a>
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Determine if the request specifies suspension.  */
    else if (wait_option != TX_NO_WAIT)
 80112f4:	683b      	ldr	r3, [r7, #0]
 80112f6:	2b00      	cmp	r3, #0
 80112f8:	d05d      	beq.n	80113b6 <_tx_semaphore_get+0xfa>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 80112fa:	4b35      	ldr	r3, [pc, #212]	; (80113d0 <_tx_semaphore_get+0x114>)
 80112fc:	681b      	ldr	r3, [r3, #0]
 80112fe:	2b00      	cmp	r3, #0
 8011300:	d008      	beq.n	8011314 <_tx_semaphore_get+0x58>
 8011302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011304:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8011306:	693b      	ldr	r3, [r7, #16]
 8011308:	f383 8810 	msr	PRIMASK, r3
}
 801130c:	bf00      	nop
    
            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_NO_INSTANCE;
 801130e:	230d      	movs	r3, #13
 8011310:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011312:	e058      	b.n	80113c6 <_tx_semaphore_get+0x10a>
            /* Increment the number of suspensions on this semaphore.  */
            semaphore_ptr -> tx_semaphore_performance_suspension_count++;
#endif
            
            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8011314:	4b2f      	ldr	r3, [pc, #188]	; (80113d4 <_tx_semaphore_get+0x118>)
 8011316:	681b      	ldr	r3, [r3, #0]
 8011318:	627b      	str	r3, [r7, #36]	; 0x24

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_semaphore_cleanup);
 801131a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801131c:	4a2e      	ldr	r2, [pc, #184]	; (80113d8 <_tx_semaphore_get+0x11c>)
 801131e:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup cleanup information, i.e. this semaphore control
               block.  */
            thread_ptr -> tx_thread_suspend_control_block =  (VOID *) semaphore_ptr;
 8011320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011322:	687a      	ldr	r2, [r7, #4]
 8011324:	66da      	str	r2, [r3, #108]	; 0x6c

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 8011326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011328:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801132c:	1c5a      	adds	r2, r3, #1
 801132e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011330:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

            /* Setup suspension list.  */
            if (semaphore_ptr -> tx_semaphore_suspended_count == TX_NO_SUSPENSIONS)
 8011334:	687b      	ldr	r3, [r7, #4]
 8011336:	691b      	ldr	r3, [r3, #16]
 8011338:	2b00      	cmp	r3, #0
 801133a:	d109      	bne.n	8011350 <_tx_semaphore_get+0x94>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                semaphore_ptr -> tx_semaphore_suspension_list =         thread_ptr;
 801133c:	687b      	ldr	r3, [r7, #4]
 801133e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011340:	60da      	str	r2, [r3, #12]
                thread_ptr -> tx_thread_suspended_next =                thread_ptr;
 8011342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011344:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011346:	671a      	str	r2, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous =            thread_ptr;
 8011348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801134a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801134c:	675a      	str	r2, [r3, #116]	; 0x74
 801134e:	e011      	b.n	8011374 <_tx_semaphore_get+0xb8>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   semaphore_ptr -> tx_semaphore_suspension_list;
 8011350:	687b      	ldr	r3, [r7, #4]
 8011352:	68db      	ldr	r3, [r3, #12]
 8011354:	623b      	str	r3, [r7, #32]
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 8011356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011358:	6a3a      	ldr	r2, [r7, #32]
 801135a:	671a      	str	r2, [r3, #112]	; 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 801135c:	6a3b      	ldr	r3, [r7, #32]
 801135e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011360:	61fb      	str	r3, [r7, #28]
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 8011362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011364:	69fa      	ldr	r2, [r7, #28]
 8011366:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 8011368:	69fb      	ldr	r3, [r7, #28]
 801136a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801136c:	671a      	str	r2, [r3, #112]	; 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 801136e:	6a3b      	ldr	r3, [r7, #32]
 8011370:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011372:	675a      	str	r2, [r3, #116]	; 0x74
            }

            /* Increment the number of suspensions.  */
            semaphore_ptr -> tx_semaphore_suspended_count++;
 8011374:	687b      	ldr	r3, [r7, #4]
 8011376:	691b      	ldr	r3, [r3, #16]
 8011378:	1c5a      	adds	r2, r3, #1
 801137a:	687b      	ldr	r3, [r7, #4]
 801137c:	611a      	str	r2, [r3, #16]

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SEMAPHORE_SUSP;
 801137e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011380:	2206      	movs	r2, #6
 8011382:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8011384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011386:	2201      	movs	r2, #1
 8011388:	639a      	str	r2, [r3, #56]	; 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 801138a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801138c:	683a      	ldr	r2, [r7, #0]
 801138e:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8011390:	4b0f      	ldr	r3, [pc, #60]	; (80113d0 <_tx_semaphore_get+0x114>)
 8011392:	681b      	ldr	r3, [r3, #0]
 8011394:	3301      	adds	r3, #1
 8011396:	4a0e      	ldr	r2, [pc, #56]	; (80113d0 <_tx_semaphore_get+0x114>)
 8011398:	6013      	str	r3, [r2, #0]
 801139a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801139c:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801139e:	68fb      	ldr	r3, [r7, #12]
 80113a0:	f383 8810 	msr	PRIMASK, r3
}
 80113a4:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 80113a6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80113a8:	f000 fd2a 	bl	8011e00 <_tx_thread_system_suspend>
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 80113ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80113b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80113b4:	e007      	b.n	80113c6 <_tx_semaphore_get+0x10a>
 80113b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113b8:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80113ba:	68bb      	ldr	r3, [r7, #8]
 80113bc:	f383 8810 	msr	PRIMASK, r3
}
 80113c0:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Immediate return, return error completion.  */
        status =  TX_NO_INSTANCE;
 80113c2:	230d      	movs	r3, #13
 80113c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    /* Return completion status.  */
    return(status);
 80113c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80113c8:	4618      	mov	r0, r3
 80113ca:	3730      	adds	r7, #48	; 0x30
 80113cc:	46bd      	mov	sp, r7
 80113ce:	bd80      	pop	{r7, pc}
 80113d0:	200260fc 	.word	0x200260fc
 80113d4:	20026064 	.word	0x20026064
 80113d8:	0801112d 	.word	0x0801112d

080113dc <_tx_semaphore_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_put(TX_SEMAPHORE *semaphore_ptr)
{
 80113dc:	b580      	push	{r7, lr}
 80113de:	b08a      	sub	sp, #40	; 0x28
 80113e0:	af00      	add	r7, sp, #0
 80113e2:	6078      	str	r0, [r7, #4]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80113e4:	f3ef 8310 	mrs	r3, PRIMASK
 80113e8:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" CPSID i" : : : "memory" );
 80113ea:	b672      	cpsid	i
    return(primask_value);
 80113ec:	693b      	ldr	r3, [r7, #16]
TX_THREAD       *next_thread;
TX_THREAD       *previous_thread;


    /* Disable interrupts to put an instance back to the semaphore.  */
    TX_DISABLE
 80113ee:	627b      	str	r3, [r7, #36]	; 0x24

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_PUT_INSERT

    /* Pickup the number of suspended threads.  */
    suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 80113f0:	687b      	ldr	r3, [r7, #4]
 80113f2:	691b      	ldr	r3, [r3, #16]
 80113f4:	623b      	str	r3, [r7, #32]

    /* Determine if there are any threads suspended on the semaphore.  */
    if (suspended_count == TX_NO_SUSPENSIONS)
 80113f6:	6a3b      	ldr	r3, [r7, #32]
 80113f8:	2b00      	cmp	r3, #0
 80113fa:	d10a      	bne.n	8011412 <_tx_semaphore_put+0x36>
    {

        /* Increment the semaphore count.  */
        semaphore_ptr -> tx_semaphore_count++;
 80113fc:	687b      	ldr	r3, [r7, #4]
 80113fe:	689b      	ldr	r3, [r3, #8]
 8011400:	1c5a      	adds	r2, r3, #1
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	609a      	str	r2, [r3, #8]
 8011406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011408:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801140a:	68fb      	ldr	r3, [r7, #12]
 801140c:	f383 8810 	msr	PRIMASK, r3
}
 8011410:	e033      	b.n	801147a <_tx_semaphore_put+0x9e>
    {

        /* A thread is suspended on this semaphore.  */
        
        /* Pickup the pointer to the first suspended thread.  */
        thread_ptr =  semaphore_ptr -> tx_semaphore_suspension_list;
 8011412:	687b      	ldr	r3, [r7, #4]
 8011414:	68db      	ldr	r3, [r3, #12]
 8011416:	61fb      	str	r3, [r7, #28]

        /* Remove the suspended thread from the list.  */

        /* See if this is the only suspended thread on the list.  */
        suspended_count--;
 8011418:	6a3b      	ldr	r3, [r7, #32]
 801141a:	3b01      	subs	r3, #1
 801141c:	623b      	str	r3, [r7, #32]
        if (suspended_count == TX_NO_SUSPENSIONS)
 801141e:	6a3b      	ldr	r3, [r7, #32]
 8011420:	2b00      	cmp	r3, #0
 8011422:	d103      	bne.n	801142c <_tx_semaphore_put+0x50>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 8011424:	687b      	ldr	r3, [r7, #4]
 8011426:	2200      	movs	r2, #0
 8011428:	60da      	str	r2, [r3, #12]
 801142a:	e00e      	b.n	801144a <_tx_semaphore_put+0x6e>
        {

            /* At least one more thread is on the same expiration list.  */

            /* Update the list head pointer.  */
            next_thread =                                     thread_ptr -> tx_thread_suspended_next;
 801142c:	69fb      	ldr	r3, [r7, #28]
 801142e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011430:	61bb      	str	r3, [r7, #24]
            semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 8011432:	687b      	ldr	r3, [r7, #4]
 8011434:	69ba      	ldr	r2, [r7, #24]
 8011436:	60da      	str	r2, [r3, #12]

            /* Update the links of the adjacent threads.  */
            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8011438:	69fb      	ldr	r3, [r7, #28]
 801143a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801143c:	617b      	str	r3, [r7, #20]
            next_thread -> tx_thread_suspended_previous =   previous_thread;
 801143e:	69bb      	ldr	r3, [r7, #24]
 8011440:	697a      	ldr	r2, [r7, #20]
 8011442:	675a      	str	r2, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =   next_thread;
 8011444:	697b      	ldr	r3, [r7, #20]
 8011446:	69ba      	ldr	r2, [r7, #24]
 8011448:	671a      	str	r2, [r3, #112]	; 0x70
        }

        /* Decrement the suspension count.  */
        semaphore_ptr -> tx_semaphore_suspended_count =  suspended_count;
 801144a:	687b      	ldr	r3, [r7, #4]
 801144c:	6a3a      	ldr	r2, [r7, #32]
 801144e:	611a      	str	r2, [r3, #16]

        /* Prepare for resumption of the first thread.  */

        /* Clear cleanup routine to avoid timeout.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8011450:	69fb      	ldr	r3, [r7, #28]
 8011452:	2200      	movs	r2, #0
 8011454:	669a      	str	r2, [r3, #104]	; 0x68
        /* Pickup the application notify function.  */
        semaphore_put_notify =  semaphore_ptr -> tx_semaphore_put_notify;
#endif

        /* Put return status into the thread control block.  */
        thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8011456:	69fb      	ldr	r3, [r7, #28]
 8011458:	2200      	movs	r2, #0
 801145a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 801145e:	4b09      	ldr	r3, [pc, #36]	; (8011484 <_tx_semaphore_put+0xa8>)
 8011460:	681b      	ldr	r3, [r3, #0]
 8011462:	3301      	adds	r3, #1
 8011464:	4a07      	ldr	r2, [pc, #28]	; (8011484 <_tx_semaphore_put+0xa8>)
 8011466:	6013      	str	r3, [r2, #0]
 8011468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801146a:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801146c:	68bb      	ldr	r3, [r7, #8]
 801146e:	f383 8810 	msr	PRIMASK, r3
}
 8011472:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume thread.  */
        _tx_thread_system_resume(thread_ptr);
 8011474:	69f8      	ldr	r0, [r7, #28]
 8011476:	f000 fbb9 	bl	8011bec <_tx_thread_system_resume>
        }
#endif
    }

    /* Return successful completion.  */
    return(TX_SUCCESS);
 801147a:	2300      	movs	r3, #0
}
 801147c:	4618      	mov	r0, r3
 801147e:	3728      	adds	r7, #40	; 0x28
 8011480:	46bd      	mov	sp, r7
 8011482:	bd80      	pop	{r7, pc}
 8011484:	200260fc 	.word	0x200260fc

08011488 <_get_ipsr>:
{
 8011488:	b480      	push	{r7}
 801148a:	b083      	sub	sp, #12
 801148c:	af00      	add	r7, sp, #0
    __asm("MRS %[result], ipsr" : [result] "=r" (_ipsr) : );
 801148e:	f3ef 8305 	mrs	r3, IPSR
 8011492:	607b      	str	r3, [r7, #4]
    return _ipsr;
 8011494:	687b      	ldr	r3, [r7, #4]
}
 8011496:	4618      	mov	r0, r3
 8011498:	370c      	adds	r7, #12
 801149a:	46bd      	mov	sp, r7
 801149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114a0:	4770      	bx	lr
	...

080114a4 <_tx_thread_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, VOID (*entry_function)(ULONG id), ULONG entry_input,
                            VOID *stack_start, ULONG stack_size, UINT priority, UINT preempt_threshold,
                            ULONG time_slice, UINT auto_start)
{
 80114a4:	b580      	push	{r7, lr}
 80114a6:	b090      	sub	sp, #64	; 0x40
 80114a8:	af00      	add	r7, sp, #0
 80114aa:	60f8      	str	r0, [r7, #12]
 80114ac:	60b9      	str	r1, [r7, #8]
 80114ae:	607a      	str	r2, [r7, #4]
 80114b0:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA

TX_THREAD               *next_thread;
TX_THREAD               *previous_thread;
TX_THREAD               *saved_thread_ptr;
UINT                    saved_threshold =  ((UINT) 0);
 80114b2:	2300      	movs	r3, #0
 80114b4:	63bb      	str	r3, [r7, #56]	; 0x38
#ifndef TX_DISABLE_STACK_FILLING

    /* Set the thread stack to a pattern prior to creating the initial
       stack frame.  This pattern is used by the stack checking routines
       to see how much has been used.  */
    TX_MEMSET(stack_start, ((UCHAR) TX_STACK_FILL), stack_size);
 80114b6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80114b8:	21ef      	movs	r1, #239	; 0xef
 80114ba:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80114bc:	f012 fbb5 	bl	8023c2a <memset>

    /* Prepare the thread control block prior to placing it on the created
       list.  */

    /* Initialize thread control block to all zeros.  */
    TX_MEMSET(thread_ptr, 0, (sizeof(TX_THREAD)));
 80114c0:	22b0      	movs	r2, #176	; 0xb0
 80114c2:	2100      	movs	r1, #0
 80114c4:	68f8      	ldr	r0, [r7, #12]
 80114c6:	f012 fbb0 	bl	8023c2a <memset>

    /* Place the supplied parameters into the thread's control block.  */
    thread_ptr -> tx_thread_name =              name_ptr;
 80114ca:	68fb      	ldr	r3, [r7, #12]
 80114cc:	68ba      	ldr	r2, [r7, #8]
 80114ce:	629a      	str	r2, [r3, #40]	; 0x28
    thread_ptr -> tx_thread_entry =             entry_function;
 80114d0:	68fb      	ldr	r3, [r7, #12]
 80114d2:	687a      	ldr	r2, [r7, #4]
 80114d4:	645a      	str	r2, [r3, #68]	; 0x44
    thread_ptr -> tx_thread_entry_parameter =   entry_input;
 80114d6:	68fb      	ldr	r3, [r7, #12]
 80114d8:	683a      	ldr	r2, [r7, #0]
 80114da:	649a      	str	r2, [r3, #72]	; 0x48
    thread_ptr -> tx_thread_stack_start =       stack_start;
 80114dc:	68fb      	ldr	r3, [r7, #12]
 80114de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80114e0:	60da      	str	r2, [r3, #12]
    thread_ptr -> tx_thread_stack_size =        stack_size;
 80114e2:	68fb      	ldr	r3, [r7, #12]
 80114e4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80114e6:	615a      	str	r2, [r3, #20]
    thread_ptr -> tx_thread_priority =          priority;
 80114e8:	68fb      	ldr	r3, [r7, #12]
 80114ea:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80114ec:	62da      	str	r2, [r3, #44]	; 0x2c
    thread_ptr -> tx_thread_user_priority =     priority;
 80114ee:	68fb      	ldr	r3, [r7, #12]
 80114f0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80114f2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    thread_ptr -> tx_thread_time_slice =        time_slice;
 80114f6:	68fb      	ldr	r3, [r7, #12]
 80114f8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80114fa:	619a      	str	r2, [r3, #24]
    thread_ptr -> tx_thread_new_time_slice =    time_slice;
 80114fc:	68fb      	ldr	r3, [r7, #12]
 80114fe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011500:	61da      	str	r2, [r3, #28]
    thread_ptr -> tx_thread_inherit_priority =  ((UINT) TX_MAX_PRIORITIES);
 8011502:	68fb      	ldr	r3, [r7, #12]
 8011504:	2220      	movs	r2, #32
 8011506:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Calculate the end of the thread's stack area.  */
    temp_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 801150a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801150c:	637b      	str	r3, [r7, #52]	; 0x34
    temp_ptr =  (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG) 1))));
 801150e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011510:	3b01      	subs	r3, #1
 8011512:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011514:	4413      	add	r3, r2
 8011516:	637b      	str	r3, [r7, #52]	; 0x34
    thread_ptr -> tx_thread_stack_end =         TX_UCHAR_TO_VOID_POINTER_CONVERT(temp_ptr);
 8011518:	68fb      	ldr	r3, [r7, #12]
 801151a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801151c:	611a      	str	r2, [r3, #16]
    thread_ptr -> tx_thread_preempt_threshold =       preempt_threshold;
    thread_ptr -> tx_thread_user_preempt_threshold =  preempt_threshold;
#else

    /* Preemption-threshold is disabled, determine if preemption-threshold was required.  */
    if (priority != preempt_threshold)
 801151e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011520:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011522:	429a      	cmp	r2, r3
 8011524:	d007      	beq.n	8011536 <_tx_thread_create+0x92>
    {

        /* Preemption-threshold specified. Since specific preemption-threshold is not supported,
           disable all preemption.  */
        thread_ptr -> tx_thread_preempt_threshold =       ((UINT) 0);
 8011526:	68fb      	ldr	r3, [r7, #12]
 8011528:	2200      	movs	r2, #0
 801152a:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  ((UINT) 0);
 801152c:	68fb      	ldr	r3, [r7, #12]
 801152e:	2200      	movs	r2, #0
 8011530:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8011534:	e006      	b.n	8011544 <_tx_thread_create+0xa0>
    }
    else
    {

        /* Preemption-threshold is not specified, just setup with the priority.  */
        thread_ptr -> tx_thread_preempt_threshold =       priority;
 8011536:	68fb      	ldr	r3, [r7, #12]
 8011538:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801153a:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  priority;
 801153c:	68fb      	ldr	r3, [r7, #12]
 801153e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011540:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    }
#endif

    /* Now fill in the values that are required for thread initialization.  */
    thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 8011544:	68fb      	ldr	r3, [r7, #12]
 8011546:	2203      	movs	r2, #3
 8011548:	631a      	str	r2, [r3, #48]	; 0x30

    /* Setup the necessary fields in the thread timer block.  */
    TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 801154a:	68fb      	ldr	r3, [r7, #12]
 801154c:	4a46      	ldr	r2, [pc, #280]	; (8011668 <_tx_thread_create+0x1c4>)
 801154e:	655a      	str	r2, [r3, #84]	; 0x54
 8011550:	68fa      	ldr	r2, [r7, #12]
 8011552:	68fb      	ldr	r3, [r7, #12]
 8011554:	659a      	str	r2, [r3, #88]	; 0x58
    TX_THREAD_CREATE_INTERNAL_EXTENSION(thread_ptr)

    /* Call the target specific stack frame building routine to build the 
       thread's initial stack and to setup the actual stack pointer in the
       control block.  */
    _tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 8011556:	4945      	ldr	r1, [pc, #276]	; (801166c <_tx_thread_create+0x1c8>)
 8011558:	68f8      	ldr	r0, [r7, #12]
 801155a:	f7ee fefb 	bl	8000354 <_tx_thread_stack_build>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 801155e:	f3ef 8310 	mrs	r3, PRIMASK
 8011562:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" CPSID i" : : : "memory" );
 8011564:	b672      	cpsid	i
    return(primask_value);
 8011566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /* Setup the highest usage stack pointer.  */
    thread_ptr -> tx_thread_stack_highest_ptr =  thread_ptr -> tx_thread_stack_ptr;
#endif

    /* Prepare to make this thread a member of the created thread list.  */
    TX_DISABLE
 8011568:	633b      	str	r3, [r7, #48]	; 0x30

    /* Load the thread ID field in the thread control block.  */
    thread_ptr -> tx_thread_id =  TX_THREAD_ID;
 801156a:	68fb      	ldr	r3, [r7, #12]
 801156c:	4a40      	ldr	r2, [pc, #256]	; (8011670 <_tx_thread_create+0x1cc>)
 801156e:	601a      	str	r2, [r3, #0]

    /* Place the thread on the list of created threads.  First,
       check for an empty list.  */
    if (_tx_thread_created_count == TX_EMPTY)
 8011570:	4b40      	ldr	r3, [pc, #256]	; (8011674 <_tx_thread_create+0x1d0>)
 8011572:	681b      	ldr	r3, [r3, #0]
 8011574:	2b00      	cmp	r3, #0
 8011576:	d10b      	bne.n	8011590 <_tx_thread_create+0xec>
    {

        /* The created thread list is empty.  Add thread to empty list.  */
        _tx_thread_created_ptr =                    thread_ptr;
 8011578:	4a3f      	ldr	r2, [pc, #252]	; (8011678 <_tx_thread_create+0x1d4>)
 801157a:	68fb      	ldr	r3, [r7, #12]
 801157c:	6013      	str	r3, [r2, #0]
        thread_ptr -> tx_thread_created_next =      thread_ptr;
 801157e:	68fb      	ldr	r3, [r7, #12]
 8011580:	68fa      	ldr	r2, [r7, #12]
 8011582:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        thread_ptr -> tx_thread_created_previous =  thread_ptr;
 8011586:	68fb      	ldr	r3, [r7, #12]
 8011588:	68fa      	ldr	r2, [r7, #12]
 801158a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 801158e:	e016      	b.n	80115be <_tx_thread_create+0x11a>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_thread =  _tx_thread_created_ptr;
 8011590:	4b39      	ldr	r3, [pc, #228]	; (8011678 <_tx_thread_create+0x1d4>)
 8011592:	681b      	ldr	r3, [r3, #0]
 8011594:	62fb      	str	r3, [r7, #44]	; 0x2c
        previous_thread =  next_thread -> tx_thread_created_previous;
 8011596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011598:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801159c:	62bb      	str	r3, [r7, #40]	; 0x28

        /* Place the new thread in the list.  */
        next_thread -> tx_thread_created_previous =  thread_ptr;
 801159e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115a0:	68fa      	ldr	r2, [r7, #12]
 80115a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        previous_thread -> tx_thread_created_next =  thread_ptr;
 80115a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115a8:	68fa      	ldr	r2, [r7, #12]
 80115aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Setup this thread's created links.  */
        thread_ptr -> tx_thread_created_previous =  previous_thread;
 80115ae:	68fb      	ldr	r3, [r7, #12]
 80115b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80115b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        thread_ptr -> tx_thread_created_next =      next_thread;
 80115b6:	68fb      	ldr	r3, [r7, #12]
 80115b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80115ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }
    
    /* Increment the thread created count.  */
    _tx_thread_created_count++;
 80115be:	4b2d      	ldr	r3, [pc, #180]	; (8011674 <_tx_thread_create+0x1d0>)
 80115c0:	681b      	ldr	r3, [r3, #0]
 80115c2:	3301      	adds	r3, #1
 80115c4:	4a2b      	ldr	r2, [pc, #172]	; (8011674 <_tx_thread_create+0x1d0>)
 80115c6:	6013      	str	r3, [r2, #0]
    TX_EL_THREAD_CREATE_INSERT

#ifndef TX_NOT_INTERRUPTABLE

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 80115c8:	4b2c      	ldr	r3, [pc, #176]	; (801167c <_tx_thread_create+0x1d8>)
 80115ca:	681b      	ldr	r3, [r3, #0]
 80115cc:	3301      	adds	r3, #1
 80115ce:	4a2b      	ldr	r2, [pc, #172]	; (801167c <_tx_thread_create+0x1d8>)
 80115d0:	6013      	str	r3, [r2, #0]
#endif

    /* Determine if an automatic start was requested.  If so, call the resume
       thread function and then check for a preemption condition.  */
    if (auto_start == TX_AUTO_START)
 80115d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80115d4:	2b01      	cmp	r3, #1
 80115d6:	d128      	bne.n	801162a <_tx_thread_create+0x186>
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 80115d8:	f7ff ff56 	bl	8011488 <_get_ipsr>
 80115dc:	4602      	mov	r2, r0
 80115de:	4b28      	ldr	r3, [pc, #160]	; (8011680 <_tx_thread_create+0x1dc>)
 80115e0:	681b      	ldr	r3, [r3, #0]
 80115e2:	4313      	orrs	r3, r2
 80115e4:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 80115e8:	d30d      	bcc.n	8011606 <_tx_thread_create+0x162>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is 
               not required, since interrupts are assumed to be disabled during 
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 80115ea:	4b26      	ldr	r3, [pc, #152]	; (8011684 <_tx_thread_create+0x1e0>)
 80115ec:	681b      	ldr	r3, [r3, #0]
 80115ee:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 80115f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80115f2:	2b00      	cmp	r3, #0
 80115f4:	d009      	beq.n	801160a <_tx_thread_create+0x166>
            {
                
                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 80115f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80115f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80115fa:	63bb      	str	r3, [r7, #56]	; 0x38

                /* For initialization, temporarily set the preemption-threshold to the 
                   priority level to make sure the highest-priority thread runs once 
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 80115fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80115fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011600:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011602:	63da      	str	r2, [r3, #60]	; 0x3c
 8011604:	e001      	b.n	801160a <_tx_thread_create+0x166>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 8011606:	2300      	movs	r3, #0
 8011608:	63fb      	str	r3, [r7, #60]	; 0x3c
 801160a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801160c:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801160e:	6a3b      	ldr	r3, [r7, #32]
 8011610:	f383 8810 	msr	PRIMASK, r3
}
 8011614:	bf00      	nop

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Call the resume thread function to make this thread ready.  */
        _tx_thread_system_resume(thread_ptr);
 8011616:	68f8      	ldr	r0, [r7, #12]
 8011618:	f000 fae8 	bl	8011bec <_tx_thread_system_resume>
#endif
 
        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 801161c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801161e:	2b00      	cmp	r3, #0
 8011620:	d01c      	beq.n	801165c <_tx_thread_create+0x1b8>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 8011622:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011624:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011626:	63da      	str	r2, [r3, #60]	; 0x3c
 8011628:	e018      	b.n	801165c <_tx_thread_create+0x1b8>
 801162a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801162c:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801162e:	697b      	ldr	r3, [r7, #20]
 8011630:	f383 8810 	msr	PRIMASK, r3
}
 8011634:	bf00      	nop
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8011636:	f3ef 8310 	mrs	r3, PRIMASK
 801163a:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 801163c:	b672      	cpsid	i
    return(primask_value);
 801163e:	69bb      	ldr	r3, [r7, #24]

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Disable interrupts.  */
        TX_DISABLE
 8011640:	633b      	str	r3, [r7, #48]	; 0x30

        /* Re-enable preemption.  */
        _tx_thread_preempt_disable--;
 8011642:	4b0e      	ldr	r3, [pc, #56]	; (801167c <_tx_thread_create+0x1d8>)
 8011644:	681b      	ldr	r3, [r3, #0]
 8011646:	3b01      	subs	r3, #1
 8011648:	4a0c      	ldr	r2, [pc, #48]	; (801167c <_tx_thread_create+0x1d8>)
 801164a:	6013      	str	r3, [r2, #0]
 801164c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801164e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8011650:	69fb      	ldr	r3, [r7, #28]
 8011652:	f383 8810 	msr	PRIMASK, r3
}
 8011656:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8011658:	f000 fa84 	bl	8011b64 <_tx_thread_system_preempt_check>
#endif
    }

    /* Always return a success.  */
    return(TX_SUCCESS);
 801165c:	2300      	movs	r3, #0
}
 801165e:	4618      	mov	r0, r3
 8011660:	3740      	adds	r7, #64	; 0x40
 8011662:	46bd      	mov	sp, r7
 8011664:	bd80      	pop	{r7, pc}
 8011666:	bf00      	nop
 8011668:	080120c5 	.word	0x080120c5
 801166c:	080118b5 	.word	0x080118b5
 8011670:	54485244 	.word	0x54485244
 8011674:	20026070 	.word	0x20026070
 8011678:	2002606c 	.word	0x2002606c
 801167c:	200260fc 	.word	0x200260fc
 8011680:	2000003c 	.word	0x2000003c
 8011684:	20026068 	.word	0x20026068

08011688 <_tx_thread_info_get>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_info_get(TX_THREAD *thread_ptr, CHAR **name, UINT *state, ULONG *run_count, 
                UINT *priority, UINT *preemption_threshold, ULONG *time_slice, 
                TX_THREAD **next_thread, TX_THREAD **next_suspended_thread)
{
 8011688:	b480      	push	{r7}
 801168a:	b089      	sub	sp, #36	; 0x24
 801168c:	af00      	add	r7, sp, #0
 801168e:	60f8      	str	r0, [r7, #12]
 8011690:	60b9      	str	r1, [r7, #8]
 8011692:	607a      	str	r2, [r7, #4]
 8011694:	603b      	str	r3, [r7, #0]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8011696:	f3ef 8310 	mrs	r3, PRIMASK
 801169a:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 801169c:	b672      	cpsid	i
    return(primask_value);
 801169e:	69bb      	ldr	r3, [r7, #24]

TX_INTERRUPT_SAVE_AREA


    /* Disable interrupts.  */
    TX_DISABLE
 80116a0:	61fb      	str	r3, [r7, #28]

    /* Retrieve all the pertinent information and return it in the supplied
       destinations.  */

    /* Retrieve the name of the thread.  */
    if (name != TX_NULL)
 80116a2:	68bb      	ldr	r3, [r7, #8]
 80116a4:	2b00      	cmp	r3, #0
 80116a6:	d003      	beq.n	80116b0 <_tx_thread_info_get+0x28>
    {
    
        *name =  thread_ptr -> tx_thread_name;
 80116a8:	68fb      	ldr	r3, [r7, #12]
 80116aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80116ac:	68bb      	ldr	r3, [r7, #8]
 80116ae:	601a      	str	r2, [r3, #0]
    }
    
    /* Pickup the thread's current state.  */
    if (state != TX_NULL)
 80116b0:	687b      	ldr	r3, [r7, #4]
 80116b2:	2b00      	cmp	r3, #0
 80116b4:	d003      	beq.n	80116be <_tx_thread_info_get+0x36>
    {
    
        *state =  thread_ptr -> tx_thread_state;
 80116b6:	68fb      	ldr	r3, [r7, #12]
 80116b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80116ba:	687b      	ldr	r3, [r7, #4]
 80116bc:	601a      	str	r2, [r3, #0]
    }
    
    /* Pickup the number of times the thread has been scheduled.  */
    if (run_count != TX_NULL)
 80116be:	683b      	ldr	r3, [r7, #0]
 80116c0:	2b00      	cmp	r3, #0
 80116c2:	d003      	beq.n	80116cc <_tx_thread_info_get+0x44>
    {
    
        *run_count =  thread_ptr -> tx_thread_run_count;
 80116c4:	68fb      	ldr	r3, [r7, #12]
 80116c6:	685a      	ldr	r2, [r3, #4]
 80116c8:	683b      	ldr	r3, [r7, #0]
 80116ca:	601a      	str	r2, [r3, #0]
    }
    
    /* Pickup the thread's priority.  */
    if (priority != TX_NULL)
 80116cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80116ce:	2b00      	cmp	r3, #0
 80116d0:	d004      	beq.n	80116dc <_tx_thread_info_get+0x54>
    {
    
        *priority =  thread_ptr -> tx_thread_user_priority;
 80116d2:	68fb      	ldr	r3, [r7, #12]
 80116d4:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 80116d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80116da:	601a      	str	r2, [r3, #0]
    }
    
    /* Pickup the thread's preemption-threshold.  */
    if (preemption_threshold != TX_NULL)
 80116dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116de:	2b00      	cmp	r3, #0
 80116e0:	d004      	beq.n	80116ec <_tx_thread_info_get+0x64>
    {
    
        *preemption_threshold =  thread_ptr -> tx_thread_user_preempt_threshold;
 80116e2:	68fb      	ldr	r3, [r7, #12]
 80116e4:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80116e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116ea:	601a      	str	r2, [r3, #0]
    }
    
    /* Pickup the thread's current time-slice.  */
    if (time_slice != TX_NULL)
 80116ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116ee:	2b00      	cmp	r3, #0
 80116f0:	d003      	beq.n	80116fa <_tx_thread_info_get+0x72>
    {
    
        *time_slice =  thread_ptr -> tx_thread_time_slice;
 80116f2:	68fb      	ldr	r3, [r7, #12]
 80116f4:	699a      	ldr	r2, [r3, #24]
 80116f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116f8:	601a      	str	r2, [r3, #0]
    }
    
    /* Pickup the next created thread.  */
    if (next_thread != TX_NULL)
 80116fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80116fc:	2b00      	cmp	r3, #0
 80116fe:	d004      	beq.n	801170a <_tx_thread_info_get+0x82>
    {
    
        *next_thread =  thread_ptr -> tx_thread_created_next;
 8011700:	68fb      	ldr	r3, [r7, #12]
 8011702:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8011706:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011708:	601a      	str	r2, [r3, #0]
    }
    
    /* Pickup the next thread suspended.  */
    if (next_suspended_thread != TX_NULL)
 801170a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801170c:	2b00      	cmp	r3, #0
 801170e:	d003      	beq.n	8011718 <_tx_thread_info_get+0x90>
    {
    
        *next_suspended_thread =  thread_ptr -> tx_thread_suspended_next;
 8011710:	68fb      	ldr	r3, [r7, #12]
 8011712:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8011714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011716:	601a      	str	r2, [r3, #0]
 8011718:	69fb      	ldr	r3, [r7, #28]
 801171a:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801171c:	697b      	ldr	r3, [r7, #20]
 801171e:	f383 8810 	msr	PRIMASK, r3
}
 8011722:	bf00      	nop
    
    /* Restore interrupts.  */
    TX_RESTORE

    /* Return completion status.  */
    return(TX_SUCCESS);
 8011724:	2300      	movs	r3, #0
}
 8011726:	4618      	mov	r0, r3
 8011728:	3724      	adds	r7, #36	; 0x24
 801172a:	46bd      	mov	sp, r7
 801172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011730:	4770      	bx	lr
	...

08011734 <_tx_thread_initialize>:
/*                                            Execution Profile support,  */
/*                                            resulting in version 6.1.7  */   
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_initialize(VOID)
{
 8011734:	b580      	push	{r7, lr}
 8011736:	af00      	add	r7, sp, #0
       respectively.  */

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Set current thread pointer to NULL.  */
    TX_THREAD_SET_CURRENT(TX_NULL)
 8011738:	4b12      	ldr	r3, [pc, #72]	; (8011784 <_tx_thread_initialize+0x50>)
 801173a:	2200      	movs	r2, #0
 801173c:	601a      	str	r2, [r3, #0]

    /* Initialize the execute thread pointer to NULL.  */
    _tx_thread_execute_ptr =  TX_NULL;
 801173e:	4b12      	ldr	r3, [pc, #72]	; (8011788 <_tx_thread_initialize+0x54>)
 8011740:	2200      	movs	r2, #0
 8011742:	601a      	str	r2, [r3, #0]
 8011744:	4b11      	ldr	r3, [pc, #68]	; (801178c <_tx_thread_initialize+0x58>)
 8011746:	2200      	movs	r2, #0
 8011748:	601a      	str	r2, [r3, #0]
#endif
#endif

    /* Setup the highest priority variable to the max, indicating no thread is currently
       ready.  */
    _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 801174a:	4b11      	ldr	r3, [pc, #68]	; (8011790 <_tx_thread_initialize+0x5c>)
 801174c:	2220      	movs	r2, #32
 801174e:	601a      	str	r2, [r3, #0]


#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the array of priority head pointers.  */
    TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 8011750:	2280      	movs	r2, #128	; 0x80
 8011752:	2100      	movs	r1, #0
 8011754:	480f      	ldr	r0, [pc, #60]	; (8011794 <_tx_thread_initialize+0x60>)
 8011756:	f012 fa68 	bl	8023c2a <memset>

    /* Initialize the head pointer of the created threads list and the
       number of threads created.  */
    _tx_thread_created_ptr =        TX_NULL;
 801175a:	4b0f      	ldr	r3, [pc, #60]	; (8011798 <_tx_thread_initialize+0x64>)
 801175c:	2200      	movs	r2, #0
 801175e:	601a      	str	r2, [r3, #0]
    _tx_thread_created_count =      TX_EMPTY;
 8011760:	4b0e      	ldr	r3, [pc, #56]	; (801179c <_tx_thread_initialize+0x68>)
 8011762:	2200      	movs	r2, #0
 8011764:	601a      	str	r2, [r3, #0]

    /* Clear the global preempt disable variable.  */
    _tx_thread_preempt_disable =    ((UINT) 0);
 8011766:	4b0e      	ldr	r3, [pc, #56]	; (80117a0 <_tx_thread_initialize+0x6c>)
 8011768:	2200      	movs	r2, #0
 801176a:	601a      	str	r2, [r3, #0]

    /* Initialize the thread mutex release function pointer.  */
    _tx_thread_mutex_release =      TX_NULL;
 801176c:	4b0d      	ldr	r3, [pc, #52]	; (80117a4 <_tx_thread_initialize+0x70>)
 801176e:	2200      	movs	r2, #0
 8011770:	601a      	str	r2, [r3, #0]
#endif
#ifdef TX_DISABLE_REDUNDANT_CLEARING
                            | (((ULONG) 1) << 18)
#endif
#ifdef TX_DISABLE_NOTIFY_CALLBACKS
                            | (((ULONG) 1) << 17)
 8011772:	4b0d      	ldr	r3, [pc, #52]	; (80117a8 <_tx_thread_initialize+0x74>)
 8011774:	681b      	ldr	r3, [r3, #0]
 8011776:	f043 7385 	orr.w	r3, r3, #17432576	; 0x10a0000
    _tx_build_options =  _tx_build_options 
 801177a:	4a0b      	ldr	r2, [pc, #44]	; (80117a8 <_tx_thread_initialize+0x74>)
 801177c:	6013      	str	r3, [r2, #0]
#endif
#if TX_PORT_SPECIFIC_BUILD_OPTIONS != 0
                            | TX_PORT_SPECIFIC_BUILD_OPTIONS
#endif
                            ;
}
 801177e:	bf00      	nop
 8011780:	bd80      	pop	{r7, pc}
 8011782:	bf00      	nop
 8011784:	20026064 	.word	0x20026064
 8011788:	20026068 	.word	0x20026068
 801178c:	20026074 	.word	0x20026074
 8011790:	20026078 	.word	0x20026078
 8011794:	2002607c 	.word	0x2002607c
 8011798:	2002606c 	.word	0x2002606c
 801179c:	20026070 	.word	0x20026070
 80117a0:	200260fc 	.word	0x200260fc
 80117a4:	20026100 	.word	0x20026100
 80117a8:	20026104 	.word	0x20026104

080117ac <_get_ipsr>:
{
 80117ac:	b480      	push	{r7}
 80117ae:	b083      	sub	sp, #12
 80117b0:	af00      	add	r7, sp, #0
    __asm("MRS %[result], ipsr" : [result] "=r" (_ipsr) : );
 80117b2:	f3ef 8305 	mrs	r3, IPSR
 80117b6:	607b      	str	r3, [r7, #4]
    return _ipsr;
 80117b8:	687b      	ldr	r3, [r7, #4]
}
 80117ba:	4618      	mov	r0, r3
 80117bc:	370c      	adds	r7, #12
 80117be:	46bd      	mov	sp, r7
 80117c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117c4:	4770      	bx	lr
	...

080117c8 <_tx_thread_resume>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_resume(TX_THREAD *thread_ptr)
{
 80117c8:	b580      	push	{r7, lr}
 80117ca:	b08a      	sub	sp, #40	; 0x28
 80117cc:	af00      	add	r7, sp, #0
 80117ce:	6078      	str	r0, [r7, #4]

TX_INTERRUPT_SAVE_AREA

UINT        status;
TX_THREAD   *saved_thread_ptr;
UINT        saved_threshold =  ((UINT) 0);
 80117d0:	2300      	movs	r3, #0
 80117d2:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80117d4:	f3ef 8310 	mrs	r3, PRIMASK
 80117d8:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" CPSID i" : : : "memory" );
 80117da:	b672      	cpsid	i
    return(primask_value);
 80117dc:	697b      	ldr	r3, [r7, #20]
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 80117de:	61bb      	str	r3, [r7, #24]
    /* Log this kernel call.  */
    TX_EL_THREAD_RESUME_INSERT

    /* Determine if the thread is suspended or in the process of suspending.
       If so, call the thread resume processing.  */
    if (thread_ptr -> tx_thread_state == TX_SUSPENDED)
 80117e0:	687b      	ldr	r3, [r7, #4]
 80117e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80117e4:	2b03      	cmp	r3, #3
 80117e6:	d12e      	bne.n	8011846 <_tx_thread_resume+0x7e>
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 80117e8:	f7ff ffe0 	bl	80117ac <_get_ipsr>
 80117ec:	4602      	mov	r2, r0
 80117ee:	4b21      	ldr	r3, [pc, #132]	; (8011874 <_tx_thread_resume+0xac>)
 80117f0:	681b      	ldr	r3, [r3, #0]
 80117f2:	4313      	orrs	r3, r2
 80117f4:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 80117f8:	d30d      	bcc.n	8011816 <_tx_thread_resume+0x4e>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is 
               not required, since interrupts are assumed to be disabled during 
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 80117fa:	4b1f      	ldr	r3, [pc, #124]	; (8011878 <_tx_thread_resume+0xb0>)
 80117fc:	681b      	ldr	r3, [r3, #0]
 80117fe:	623b      	str	r3, [r7, #32]

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 8011800:	6a3b      	ldr	r3, [r7, #32]
 8011802:	2b00      	cmp	r3, #0
 8011804:	d009      	beq.n	801181a <_tx_thread_resume+0x52>
            {
                
                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 8011806:	6a3b      	ldr	r3, [r7, #32]
 8011808:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801180a:	61fb      	str	r3, [r7, #28]

                /* For initialization, temporarily set the preemption-threshold to the 
                   priority level to make sure the highest-priority thread runs once 
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 801180c:	6a3b      	ldr	r3, [r7, #32]
 801180e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011810:	6a3b      	ldr	r3, [r7, #32]
 8011812:	63da      	str	r2, [r3, #60]	; 0x3c
 8011814:	e001      	b.n	801181a <_tx_thread_resume+0x52>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 8011816:	2300      	movs	r3, #0
 8011818:	623b      	str	r3, [r7, #32]
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 801181a:	4b18      	ldr	r3, [pc, #96]	; (801187c <_tx_thread_resume+0xb4>)
 801181c:	681b      	ldr	r3, [r3, #0]
 801181e:	3301      	adds	r3, #1
 8011820:	4a16      	ldr	r2, [pc, #88]	; (801187c <_tx_thread_resume+0xb4>)
 8011822:	6013      	str	r3, [r2, #0]
 8011824:	69bb      	ldr	r3, [r7, #24]
 8011826:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8011828:	693b      	ldr	r3, [r7, #16]
 801182a:	f383 8810 	msr	PRIMASK, r3
}
 801182e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Call the actual resume service to resume the thread.  */
        _tx_thread_system_resume(thread_ptr);
 8011830:	6878      	ldr	r0, [r7, #4]
 8011832:	f000 f9db 	bl	8011bec <_tx_thread_system_resume>
#endif

        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 8011836:	6a3b      	ldr	r3, [r7, #32]
 8011838:	2b00      	cmp	r3, #0
 801183a:	d002      	beq.n	8011842 <_tx_thread_resume+0x7a>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 801183c:	6a3b      	ldr	r3, [r7, #32]
 801183e:	69fa      	ldr	r2, [r7, #28]
 8011840:	63da      	str	r2, [r3, #60]	; 0x3c
        /* Setup successful return status.  */
        status =  TX_SUCCESS;
#else

        /* Return successful completion.  */
        return(TX_SUCCESS);
 8011842:	2300      	movs	r3, #0
 8011844:	e012      	b.n	801186c <_tx_thread_resume+0xa4>
        
        /* Setup successful return status.  */
        status =  TX_SUCCESS;
#endif
    }
    else if (thread_ptr -> tx_thread_delayed_suspend == TX_TRUE)
 8011846:	687b      	ldr	r3, [r7, #4]
 8011848:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801184a:	2b01      	cmp	r3, #1
 801184c:	d105      	bne.n	801185a <_tx_thread_resume+0x92>
    {

        /* Clear the delayed suspension.  */
        thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 801184e:	687b      	ldr	r3, [r7, #4]
 8011850:	2200      	movs	r2, #0
 8011852:	635a      	str	r2, [r3, #52]	; 0x34

        /* Setup delayed suspend lifted return status.  */
        status =  TX_SUSPEND_LIFTED;
 8011854:	2319      	movs	r3, #25
 8011856:	627b      	str	r3, [r7, #36]	; 0x24
 8011858:	e001      	b.n	801185e <_tx_thread_resume+0x96>
    }
    else
    {

        /* Setup invalid resume return status.  */
        status =  TX_RESUME_ERROR;
 801185a:	2312      	movs	r3, #18
 801185c:	627b      	str	r3, [r7, #36]	; 0x24
 801185e:	69bb      	ldr	r3, [r7, #24]
 8011860:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8011862:	68fb      	ldr	r3, [r7, #12]
 8011864:	f383 8810 	msr	PRIMASK, r3
}
 8011868:	bf00      	nop
        }
    }
#endif

    /* Return completion status. */
    return(status);
 801186a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801186c:	4618      	mov	r0, r3
 801186e:	3728      	adds	r7, #40	; 0x28
 8011870:	46bd      	mov	sp, r7
 8011872:	bd80      	pop	{r7, pc}
 8011874:	2000003c 	.word	0x2000003c
 8011878:	20026068 	.word	0x20026068
 801187c:	200260fc 	.word	0x200260fc

08011880 <_get_control>:
{
 8011880:	b480      	push	{r7}
 8011882:	b083      	sub	sp, #12
 8011884:	af00      	add	r7, sp, #0
    __asm("MRS %[result], control" : [result] "=r" (_control) : );
 8011886:	f3ef 8314 	mrs	r3, CONTROL
 801188a:	607b      	str	r3, [r7, #4]
    return _control;
 801188c:	687b      	ldr	r3, [r7, #4]
}
 801188e:	4618      	mov	r0, r3
 8011890:	370c      	adds	r7, #12
 8011892:	46bd      	mov	sp, r7
 8011894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011898:	4770      	bx	lr

0801189a <_set_control>:
{
 801189a:	b480      	push	{r7}
 801189c:	b083      	sub	sp, #12
 801189e:	af00      	add	r7, sp, #0
 80118a0:	6078      	str	r0, [r7, #4]
    __asm("MSR control, %[input]" : : [input] "r" (_control));
 80118a2:	687b      	ldr	r3, [r7, #4]
 80118a4:	f383 8814 	msr	CONTROL, r3
}
 80118a8:	bf00      	nop
 80118aa:	370c      	adds	r7, #12
 80118ac:	46bd      	mov	sp, r7
 80118ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118b2:	4770      	bx	lr

080118b4 <_tx_thread_shell_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_shell_entry(VOID)
{
 80118b4:	b580      	push	{r7, lr}
 80118b6:	b086      	sub	sp, #24
 80118b8:	af00      	add	r7, sp, #0
VOID            (*entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type);
#endif


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 80118ba:	4b1e      	ldr	r3, [pc, #120]	; (8011934 <_tx_thread_shell_entry+0x80>)
 80118bc:	681b      	ldr	r3, [r3, #0]
 80118be:	617b      	str	r3, [r7, #20]
        (entry_exit_notify)(thread_ptr, TX_THREAD_ENTRY);
    }
#endif

    /* Call current thread's entry function.  */
    (thread_ptr -> tx_thread_entry) (thread_ptr -> tx_thread_entry_parameter);
 80118c0:	697b      	ldr	r3, [r7, #20]
 80118c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80118c4:	697a      	ldr	r2, [r7, #20]
 80118c6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80118c8:	4610      	mov	r0, r2
 80118ca:	4798      	blx	r3

    /* Suspend thread with a "completed" state.  */

    /* Determine if the application is using mutexes.  */
    if (_tx_thread_mutex_release != TX_NULL)
 80118cc:	4b1a      	ldr	r3, [pc, #104]	; (8011938 <_tx_thread_shell_entry+0x84>)
 80118ce:	681b      	ldr	r3, [r3, #0]
 80118d0:	2b00      	cmp	r3, #0
 80118d2:	d003      	beq.n	80118dc <_tx_thread_shell_entry+0x28>
    {

        /* Yes, call the mutex release function via a function pointer that 
           is setup during mutex initialization.  */
        (_tx_thread_mutex_release)(thread_ptr);
 80118d4:	4b18      	ldr	r3, [pc, #96]	; (8011938 <_tx_thread_shell_entry+0x84>)
 80118d6:	681b      	ldr	r3, [r3, #0]
 80118d8:	6978      	ldr	r0, [r7, #20]
 80118da:	4798      	blx	r3
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80118dc:	f3ef 8310 	mrs	r3, PRIMASK
 80118e0:	607b      	str	r3, [r7, #4]
    __asm__ volatile (" CPSID i" : : : "memory" );
 80118e2:	b672      	cpsid	i
    return(primask_value);
 80118e4:	687b      	ldr	r3, [r7, #4]
    }

    /* Lockout interrupts while the thread state is setup.  */
    TX_DISABLE
 80118e6:	613b      	str	r3, [r7, #16]
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
#endif

    /* Set the status to suspending, in order to indicate the suspension
       is in progress.  */
    thread_ptr -> tx_thread_state =  TX_COMPLETED;
 80118e8:	697b      	ldr	r3, [r7, #20]
 80118ea:	2201      	movs	r2, #1
 80118ec:	631a      	str	r2, [r3, #48]	; 0x30
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Set the suspending flag. */
    thread_ptr -> tx_thread_suspending =  TX_TRUE;
 80118ee:	697b      	ldr	r3, [r7, #20]
 80118f0:	2201      	movs	r2, #1
 80118f2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Setup for no timeout period.  */
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 80118f4:	697b      	ldr	r3, [r7, #20]
 80118f6:	2200      	movs	r2, #0
 80118f8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 80118fa:	4b10      	ldr	r3, [pc, #64]	; (801193c <_tx_thread_shell_entry+0x88>)
 80118fc:	681b      	ldr	r3, [r3, #0]
 80118fe:	3301      	adds	r3, #1
 8011900:	4a0e      	ldr	r2, [pc, #56]	; (801193c <_tx_thread_shell_entry+0x88>)
 8011902:	6013      	str	r3, [r2, #0]
 8011904:	693b      	ldr	r3, [r7, #16]
 8011906:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8011908:	68bb      	ldr	r3, [r7, #8]
 801190a:	f383 8810 	msr	PRIMASK, r3
}
 801190e:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Perform any additional activities for tool or user purpose.  */
    TX_THREAD_COMPLETED_EXTENSION(thread_ptr)
 8011910:	f7ff ffb6 	bl	8011880 <_get_control>
 8011914:	60f8      	str	r0, [r7, #12]
 8011916:	68fb      	ldr	r3, [r7, #12]
 8011918:	f023 0304 	bic.w	r3, r3, #4
 801191c:	60fb      	str	r3, [r7, #12]
 801191e:	68f8      	ldr	r0, [r7, #12]
 8011920:	f7ff ffbb 	bl	801189a <_set_control>
        (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
    }
#endif

    /* Call actual thread suspension routine.  */
    _tx_thread_system_suspend(thread_ptr);
 8011924:	6978      	ldr	r0, [r7, #20]
 8011926:	f000 fa6b 	bl	8011e00 <_tx_thread_system_suspend>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 801192a:	bf00      	nop
 801192c:	3718      	adds	r7, #24
 801192e:	46bd      	mov	sp, r7
 8011930:	bd80      	pop	{r7, pc}
 8011932:	bf00      	nop
 8011934:	20026064 	.word	0x20026064
 8011938:	20026100 	.word	0x20026100
 801193c:	200260fc 	.word	0x200260fc

08011940 <_get_ipsr>:
{
 8011940:	b480      	push	{r7}
 8011942:	b083      	sub	sp, #12
 8011944:	af00      	add	r7, sp, #0
    __asm("MRS %[result], ipsr" : [result] "=r" (_ipsr) : );
 8011946:	f3ef 8305 	mrs	r3, IPSR
 801194a:	607b      	str	r3, [r7, #4]
    return _ipsr;
 801194c:	687b      	ldr	r3, [r7, #4]
}
 801194e:	4618      	mov	r0, r3
 8011950:	370c      	adds	r7, #12
 8011952:	46bd      	mov	sp, r7
 8011954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011958:	4770      	bx	lr
	...

0801195c <_tx_thread_sleep>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_sleep(ULONG timer_ticks)
{
 801195c:	b580      	push	{r7, lr}
 801195e:	b08c      	sub	sp, #48	; 0x30
 8011960:	af00      	add	r7, sp, #0
 8011962:	6078      	str	r0, [r7, #4]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8011964:	f3ef 8310 	mrs	r3, PRIMASK
 8011968:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" CPSID i" : : : "memory" );
 801196a:	b672      	cpsid	i
    return(primask_value);
 801196c:	6a3b      	ldr	r3, [r7, #32]
UINT            status;
TX_THREAD       *thread_ptr;


    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 801196e:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8011970:	4b34      	ldr	r3, [pc, #208]	; (8011a44 <_tx_thread_sleep+0xe8>)
 8011972:	681b      	ldr	r3, [r3, #0]
 8011974:	627b      	str	r3, [r7, #36]	; 0x24

    /* Determine if this is a legal request.  */

    /* Is there a current thread?  */
    if (thread_ptr == TX_NULL)
 8011976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011978:	2b00      	cmp	r3, #0
 801197a:	d108      	bne.n	801198e <_tx_thread_sleep+0x32>
 801197c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801197e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8011980:	69fb      	ldr	r3, [r7, #28]
 8011982:	f383 8810 	msr	PRIMASK, r3
}
 8011986:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE
        
        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 8011988:	2313      	movs	r3, #19
 801198a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801198c:	e055      	b.n	8011a3a <_tx_thread_sleep+0xde>
    }
    
    /* Is the caller an ISR or Initialization?  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 801198e:	f7ff ffd7 	bl	8011940 <_get_ipsr>
 8011992:	4602      	mov	r2, r0
 8011994:	4b2c      	ldr	r3, [pc, #176]	; (8011a48 <_tx_thread_sleep+0xec>)
 8011996:	681b      	ldr	r3, [r3, #0]
 8011998:	4313      	orrs	r3, r2
 801199a:	2b00      	cmp	r3, #0
 801199c:	d008      	beq.n	80119b0 <_tx_thread_sleep+0x54>
 801199e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80119a0:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80119a2:	69bb      	ldr	r3, [r7, #24]
 80119a4:	f383 8810 	msr	PRIMASK, r3
}
 80119a8:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE
        
        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 80119aa:	2313      	movs	r3, #19
 80119ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80119ae:	e044      	b.n	8011a3a <_tx_thread_sleep+0xde>
    }

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Is the caller the system timer thread?  */
    else if (thread_ptr == &_tx_timer_thread)
 80119b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119b2:	4a26      	ldr	r2, [pc, #152]	; (8011a4c <_tx_thread_sleep+0xf0>)
 80119b4:	4293      	cmp	r3, r2
 80119b6:	d108      	bne.n	80119ca <_tx_thread_sleep+0x6e>
 80119b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80119ba:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80119bc:	697b      	ldr	r3, [r7, #20]
 80119be:	f383 8810 	msr	PRIMASK, r3
}
 80119c2:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE
        
        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 80119c4:	2313      	movs	r3, #19
 80119c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80119c8:	e037      	b.n	8011a3a <_tx_thread_sleep+0xde>
    }
#endif

    /* Determine if the requested number of ticks is zero.  */
    else if (timer_ticks == ((ULONG) 0))
 80119ca:	687b      	ldr	r3, [r7, #4]
 80119cc:	2b00      	cmp	r3, #0
 80119ce:	d108      	bne.n	80119e2 <_tx_thread_sleep+0x86>
 80119d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80119d2:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80119d4:	693b      	ldr	r3, [r7, #16]
 80119d6:	f383 8810 	msr	PRIMASK, r3
}
 80119da:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE
      
        /* Just return with a successful status.  */
        status =  TX_SUCCESS;
 80119dc:	2300      	movs	r3, #0
 80119de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80119e0:	e02b      	b.n	8011a3a <_tx_thread_sleep+0xde>
    }
    else
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 80119e2:	4b1b      	ldr	r3, [pc, #108]	; (8011a50 <_tx_thread_sleep+0xf4>)
 80119e4:	681b      	ldr	r3, [r3, #0]
 80119e6:	2b00      	cmp	r3, #0
 80119e8:	d008      	beq.n	80119fc <_tx_thread_sleep+0xa0>
 80119ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80119ec:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80119ee:	68fb      	ldr	r3, [r7, #12]
 80119f0:	f383 8810 	msr	PRIMASK, r3
}
 80119f4:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE
        
            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_CALLER_ERROR;
 80119f6:	2313      	movs	r3, #19
 80119f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80119fa:	e01e      	b.n	8011a3a <_tx_thread_sleep+0xde>
            TX_EL_THREAD_SLEEP_INSERT

            /* Suspend the current thread.  */

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SLEEP;
 80119fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119fe:	2204      	movs	r2, #4
 8011a00:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag. */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8011a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a04:	2201      	movs	r2, #1
 8011a06:	639a      	str	r2, [r3, #56]	; 0x38

            /* Initialize the status to successful.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8011a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a0a:	2200      	movs	r2, #0
 8011a0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  timer_ticks;
 8011a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a12:	687a      	ldr	r2, [r7, #4]
 8011a14:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8011a16:	4b0e      	ldr	r3, [pc, #56]	; (8011a50 <_tx_thread_sleep+0xf4>)
 8011a18:	681b      	ldr	r3, [r3, #0]
 8011a1a:	3301      	adds	r3, #1
 8011a1c:	4a0c      	ldr	r2, [pc, #48]	; (8011a50 <_tx_thread_sleep+0xf4>)
 8011a1e:	6013      	str	r3, [r2, #0]
 8011a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a22:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8011a24:	68bb      	ldr	r3, [r7, #8]
 8011a26:	f383 8810 	msr	PRIMASK, r3
}
 8011a2a:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 8011a2c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011a2e:	f000 f9e7 	bl	8011e00 <_tx_thread_system_suspend>
#endif

            /* Return status to the caller.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 8011a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011a38:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
    }
    
    /* Return completion status.  */
    return(status);
 8011a3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8011a3c:	4618      	mov	r0, r3
 8011a3e:	3730      	adds	r7, #48	; 0x30
 8011a40:	46bd      	mov	sp, r7
 8011a42:	bd80      	pop	{r7, pc}
 8011a44:	20026064 	.word	0x20026064
 8011a48:	2000003c 	.word	0x2000003c
 8011a4c:	200261ac 	.word	0x200261ac
 8011a50:	200260fc 	.word	0x200260fc

08011a54 <_get_ipsr>:
{
 8011a54:	b480      	push	{r7}
 8011a56:	b083      	sub	sp, #12
 8011a58:	af00      	add	r7, sp, #0
    __asm("MRS %[result], ipsr" : [result] "=r" (_ipsr) : );
 8011a5a:	f3ef 8305 	mrs	r3, IPSR
 8011a5e:	607b      	str	r3, [r7, #4]
    return _ipsr;
 8011a60:	687b      	ldr	r3, [r7, #4]
}
 8011a62:	4618      	mov	r0, r3
 8011a64:	370c      	adds	r7, #12
 8011a66:	46bd      	mov	sp, r7
 8011a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a6c:	4770      	bx	lr
	...

08011a70 <_tx_thread_suspend>:
/*                                            a MISRA compliance issue,   */
/*                                            resulting in version 6.1.1  */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_suspend(TX_THREAD *thread_ptr)
{
 8011a70:	b580      	push	{r7, lr}
 8011a72:	b088      	sub	sp, #32
 8011a74:	af00      	add	r7, sp, #0
 8011a76:	6078      	str	r0, [r7, #4]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8011a78:	f3ef 8310 	mrs	r3, PRIMASK
 8011a7c:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8011a7e:	b672      	cpsid	i
    return(primask_value);
 8011a80:	693b      	ldr	r3, [r7, #16]


#ifndef TX_INLINE_THREAD_RESUME_SUSPEND

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 8011a82:	61bb      	str	r3, [r7, #24]

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 8011a84:	4b2d      	ldr	r3, [pc, #180]	; (8011b3c <_tx_thread_suspend+0xcc>)
 8011a86:	681b      	ldr	r3, [r3, #0]
 8011a88:	617b      	str	r3, [r7, #20]

    /* Log this kernel call.  */
    TX_EL_THREAD_SUSPEND_INSERT

    /* Check the specified thread's current status.  */
    if (thread_ptr -> tx_thread_state == TX_READY)
 8011a8a:	687b      	ldr	r3, [r7, #4]
 8011a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011a8e:	2b00      	cmp	r3, #0
 8011a90:	d12f      	bne.n	8011af2 <_tx_thread_suspend+0x82>
    {

        /* Initialize status to success.  */
        status =  TX_SUCCESS;
 8011a92:	2300      	movs	r3, #0
 8011a94:	61fb      	str	r3, [r7, #28]

        /* Determine if we are in a thread context.  */
        if (TX_THREAD_GET_SYSTEM_STATE() == ((ULONG) 0))
 8011a96:	f7ff ffdd 	bl	8011a54 <_get_ipsr>
 8011a9a:	4602      	mov	r2, r0
 8011a9c:	4b28      	ldr	r3, [pc, #160]	; (8011b40 <_tx_thread_suspend+0xd0>)
 8011a9e:	681b      	ldr	r3, [r3, #0]
 8011aa0:	4313      	orrs	r3, r2
 8011aa2:	2b00      	cmp	r3, #0
 8011aa4:	d109      	bne.n	8011aba <_tx_thread_suspend+0x4a>
        {
        
            /* Yes, we are in a thread context.  */

            /* Determine if the current thread is also the suspending thread.  */
            if (current_thread == thread_ptr)
 8011aa6:	697a      	ldr	r2, [r7, #20]
 8011aa8:	687b      	ldr	r3, [r7, #4]
 8011aaa:	429a      	cmp	r2, r3
 8011aac:	d105      	bne.n	8011aba <_tx_thread_suspend+0x4a>
            {

                /* Now determine if the preempt disable flag is non-zero.  */
                if (_tx_thread_preempt_disable != ((UINT) 0))
 8011aae:	4b25      	ldr	r3, [pc, #148]	; (8011b44 <_tx_thread_suspend+0xd4>)
 8011ab0:	681b      	ldr	r3, [r3, #0]
 8011ab2:	2b00      	cmp	r3, #0
 8011ab4:	d001      	beq.n	8011aba <_tx_thread_suspend+0x4a>
                {

                    /* Current thread cannot suspend when the preempt disable flag is non-zero, 
                       return an error.  */
                    status =  TX_SUSPEND_ERROR;
 8011ab6:	2314      	movs	r3, #20
 8011ab8:	61fb      	str	r3, [r7, #28]
                }
            }
        }
        
        /* Determine if the status is still successful.  */
        if (status == TX_SUCCESS)
 8011aba:	69fb      	ldr	r3, [r7, #28]
 8011abc:	2b00      	cmp	r3, #0
 8011abe:	d132      	bne.n	8011b26 <_tx_thread_suspend+0xb6>
        {

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SUSPENDED;
 8011ac0:	687b      	ldr	r3, [r7, #4]
 8011ac2:	2203      	movs	r2, #3
 8011ac4:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag. */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8011ac6:	687b      	ldr	r3, [r7, #4]
 8011ac8:	2201      	movs	r2, #1
 8011aca:	639a      	str	r2, [r3, #56]	; 0x38

            /* Setup for no timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8011acc:	687b      	ldr	r3, [r7, #4]
 8011ace:	2200      	movs	r2, #0
 8011ad0:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8011ad2:	4b1c      	ldr	r3, [pc, #112]	; (8011b44 <_tx_thread_suspend+0xd4>)
 8011ad4:	681b      	ldr	r3, [r3, #0]
 8011ad6:	3301      	adds	r3, #1
 8011ad8:	4a1a      	ldr	r2, [pc, #104]	; (8011b44 <_tx_thread_suspend+0xd4>)
 8011ada:	6013      	str	r3, [r2, #0]
 8011adc:	69bb      	ldr	r3, [r7, #24]
 8011ade:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8011ae0:	68fb      	ldr	r3, [r7, #12]
 8011ae2:	f383 8810 	msr	PRIMASK, r3
}
 8011ae6:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 8011ae8:	6878      	ldr	r0, [r7, #4]
 8011aea:	f000 f989 	bl	8011e00 <_tx_thread_system_suspend>
            /* Return success.  */
            status =  TX_SUCCESS;
#else

            /* If MISRA is not enabled, return directly.  */
            return(TX_SUCCESS);
 8011aee:	2300      	movs	r3, #0
 8011af0:	e020      	b.n	8011b34 <_tx_thread_suspend+0xc4>
#endif
        }
    }
    else if (thread_ptr -> tx_thread_state == TX_TERMINATED)
 8011af2:	687b      	ldr	r3, [r7, #4]
 8011af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011af6:	2b02      	cmp	r3, #2
 8011af8:	d102      	bne.n	8011b00 <_tx_thread_suspend+0x90>
    {

        /* Thread is terminated.  */
        status =  TX_SUSPEND_ERROR;
 8011afa:	2314      	movs	r3, #20
 8011afc:	61fb      	str	r3, [r7, #28]
 8011afe:	e012      	b.n	8011b26 <_tx_thread_suspend+0xb6>
    }
    else if (thread_ptr -> tx_thread_state == TX_COMPLETED)
 8011b00:	687b      	ldr	r3, [r7, #4]
 8011b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011b04:	2b01      	cmp	r3, #1
 8011b06:	d102      	bne.n	8011b0e <_tx_thread_suspend+0x9e>
    {

        /* Thread is completed.  */
        status =  TX_SUSPEND_ERROR;
 8011b08:	2314      	movs	r3, #20
 8011b0a:	61fb      	str	r3, [r7, #28]
 8011b0c:	e00b      	b.n	8011b26 <_tx_thread_suspend+0xb6>
    }
    else if (thread_ptr -> tx_thread_state == TX_SUSPENDED)
 8011b0e:	687b      	ldr	r3, [r7, #4]
 8011b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011b12:	2b03      	cmp	r3, #3
 8011b14:	d102      	bne.n	8011b1c <_tx_thread_suspend+0xac>
    {

        /* Already suspended, just set status to success.  */
        status =  TX_SUCCESS;
 8011b16:	2300      	movs	r3, #0
 8011b18:	61fb      	str	r3, [r7, #28]
 8011b1a:	e004      	b.n	8011b26 <_tx_thread_suspend+0xb6>
    }
    else
    {

        /* Just set the delayed suspension flag.  */
        thread_ptr -> tx_thread_delayed_suspend =  TX_TRUE;
 8011b1c:	687b      	ldr	r3, [r7, #4]
 8011b1e:	2201      	movs	r2, #1
 8011b20:	635a      	str	r2, [r3, #52]	; 0x34

        /* Set status to success.  */
        status =  TX_SUCCESS;
 8011b22:	2300      	movs	r3, #0
 8011b24:	61fb      	str	r3, [r7, #28]
 8011b26:	69bb      	ldr	r3, [r7, #24]
 8011b28:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8011b2a:	68bb      	ldr	r3, [r7, #8]
 8011b2c:	f383 8810 	msr	PRIMASK, r3
}
 8011b30:	bf00      	nop
    /* Restore interrupts.  */
    TX_RESTORE

    /* Always return success, since this function does not perform error 
       checking.  */
    return(status);
 8011b32:	69fb      	ldr	r3, [r7, #28]
    TX_RESTORE

    /* Return completion status.  */
    return(status);
#endif
}
 8011b34:	4618      	mov	r0, r3
 8011b36:	3720      	adds	r7, #32
 8011b38:	46bd      	mov	sp, r7
 8011b3a:	bd80      	pop	{r7, pc}
 8011b3c:	20026064 	.word	0x20026064
 8011b40:	2000003c 	.word	0x2000003c
 8011b44:	200260fc 	.word	0x200260fc

08011b48 <_get_ipsr>:
{
 8011b48:	b480      	push	{r7}
 8011b4a:	b083      	sub	sp, #12
 8011b4c:	af00      	add	r7, sp, #0
    __asm("MRS %[result], ipsr" : [result] "=r" (_ipsr) : );
 8011b4e:	f3ef 8305 	mrs	r3, IPSR
 8011b52:	607b      	str	r3, [r7, #4]
    return _ipsr;
 8011b54:	687b      	ldr	r3, [r7, #4]
}
 8011b56:	4618      	mov	r0, r3
 8011b58:	370c      	adds	r7, #12
 8011b5a:	46bd      	mov	sp, r7
 8011b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b60:	4770      	bx	lr
	...

08011b64 <_tx_thread_system_preempt_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_preempt_check(VOID)
{
 8011b64:	b580      	push	{r7, lr}
 8011b66:	b086      	sub	sp, #24
 8011b68:	af00      	add	r7, sp, #0
TX_THREAD       *current_thread;
TX_THREAD       *thread_ptr;


    /* Combine the system state and preempt disable flags into one for comparison.  */
    TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8011b6a:	4b15      	ldr	r3, [pc, #84]	; (8011bc0 <_tx_thread_system_preempt_check+0x5c>)
 8011b6c:	681b      	ldr	r3, [r3, #0]
 8011b6e:	617b      	str	r3, [r7, #20]

    /* Determine if we are in a system state (ISR or Initialization) or internal preemption is disabled.  */
    if (combined_flags == ((ULONG) 0))
 8011b70:	697b      	ldr	r3, [r7, #20]
 8011b72:	2b00      	cmp	r3, #0
 8011b74:	d120      	bne.n	8011bb8 <_tx_thread_system_preempt_check+0x54>
    {
    
        /* No, at thread execution level so continue checking for preemption.  */

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 8011b76:	4b13      	ldr	r3, [pc, #76]	; (8011bc4 <_tx_thread_system_preempt_check+0x60>)
 8011b78:	681b      	ldr	r3, [r3, #0]
 8011b7a:	613b      	str	r3, [r7, #16]

        /* Pickup the next execute pointer.  */
        thread_ptr =  _tx_thread_execute_ptr;
 8011b7c:	4b12      	ldr	r3, [pc, #72]	; (8011bc8 <_tx_thread_system_preempt_check+0x64>)
 8011b7e:	681b      	ldr	r3, [r3, #0]
 8011b80:	60fb      	str	r3, [r7, #12]

        /* Determine if preemption should take place.  */
        if (current_thread != thread_ptr)
 8011b82:	693a      	ldr	r2, [r7, #16]
 8011b84:	68fb      	ldr	r3, [r7, #12]
 8011b86:	429a      	cmp	r2, r3
 8011b88:	d016      	beq.n	8011bb8 <_tx_thread_system_preempt_check+0x54>

__attribute__( ( always_inline ) ) static inline void _tx_thread_system_return_inline(void)
{
unsigned int interrupt_save;

    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8011b8a:	4b10      	ldr	r3, [pc, #64]	; (8011bcc <_tx_thread_system_preempt_check+0x68>)
 8011b8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011b90:	601a      	str	r2, [r3, #0]
    if (_get_ipsr() == 0)
 8011b92:	f7ff ffd9 	bl	8011b48 <_get_ipsr>
 8011b96:	4603      	mov	r3, r0
 8011b98:	2b00      	cmp	r3, #0
 8011b9a:	d10c      	bne.n	8011bb6 <_tx_thread_system_preempt_check+0x52>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8011b9c:	f3ef 8310 	mrs	r3, PRIMASK
 8011ba0:	60bb      	str	r3, [r7, #8]
    return(primask_value);
 8011ba2:	68bb      	ldr	r3, [r7, #8]
    {
        interrupt_save = __get_primask_value();
 8011ba4:	607b      	str	r3, [r7, #4]
    __asm__ volatile (" CPSIE  i": : : "memory" );
 8011ba6:	b662      	cpsie	i
}
 8011ba8:	bf00      	nop
 8011baa:	687b      	ldr	r3, [r7, #4]
 8011bac:	603b      	str	r3, [r7, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8011bae:	683b      	ldr	r3, [r7, #0]
 8011bb0:	f383 8810 	msr	PRIMASK, r3
}
 8011bb4:	bf00      	nop
        __enable_interrupts();
        __restore_interrupts(interrupt_save);
    }
}
 8011bb6:	bf00      	nop

            /* Return to the system so the higher priority thread can be scheduled.  */
            _tx_thread_system_return();
        }
    }
}
 8011bb8:	bf00      	nop
 8011bba:	3718      	adds	r7, #24
 8011bbc:	46bd      	mov	sp, r7
 8011bbe:	bd80      	pop	{r7, pc}
 8011bc0:	200260fc 	.word	0x200260fc
 8011bc4:	20026064 	.word	0x20026064
 8011bc8:	20026068 	.word	0x20026068
 8011bcc:	e000ed04 	.word	0xe000ed04

08011bd0 <_get_ipsr>:
{
 8011bd0:	b480      	push	{r7}
 8011bd2:	b083      	sub	sp, #12
 8011bd4:	af00      	add	r7, sp, #0
    __asm("MRS %[result], ipsr" : [result] "=r" (_ipsr) : );
 8011bd6:	f3ef 8305 	mrs	r3, IPSR
 8011bda:	607b      	str	r3, [r7, #4]
    return _ipsr;
 8011bdc:	687b      	ldr	r3, [r7, #4]
}
 8011bde:	4618      	mov	r0, r3
 8011be0:	370c      	adds	r7, #12
 8011be2:	46bd      	mov	sp, r7
 8011be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011be8:	4770      	bx	lr
	...

08011bec <_tx_thread_system_resume>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_resume(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 8011bec:	b580      	push	{r7, lr}
 8011bee:	b094      	sub	sp, #80	; 0x50
 8011bf0:	af00      	add	r7, sp, #0
 8011bf2:	6078      	str	r0, [r7, #4]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8011bf4:	f3ef 8310 	mrs	r3, PRIMASK
 8011bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile (" CPSID i" : : : "memory" );
 8011bfa:	b672      	cpsid	i
    return(primask_value);
 8011bfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 8011bfe:	64fb      	str	r3, [r7, #76]	; 0x4c

#ifndef TX_NO_TIMER

    /* Deactivate the timeout timer if necessary.  */
    if (thread_ptr -> tx_thread_timer.tx_timer_internal_list_head != TX_NULL)
 8011c00:	687b      	ldr	r3, [r7, #4]
 8011c02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011c04:	2b00      	cmp	r3, #0
 8011c06:	d005      	beq.n	8011c14 <_tx_thread_system_resume+0x28>
    {

        /* Deactivate the thread's timeout timer.  */
        _tx_timer_system_deactivate(&(thread_ptr -> tx_thread_timer));
 8011c08:	687b      	ldr	r3, [r7, #4]
 8011c0a:	334c      	adds	r3, #76	; 0x4c
 8011c0c:	4618      	mov	r0, r3
 8011c0e:	f000 fce9 	bl	80125e4 <_tx_timer_system_deactivate>
 8011c12:	e002      	b.n	8011c1a <_tx_thread_system_resume+0x2e>
    }
    else
    {

        /* Clear the remaining time to ensure timer doesn't get activated.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8011c14:	687b      	ldr	r3, [r7, #4]
 8011c16:	2200      	movs	r2, #0
 8011c18:	64da      	str	r2, [r3, #76]	; 0x4c
        time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 8011c1a:	4b6b      	ldr	r3, [pc, #428]	; (8011dc8 <_tx_thread_system_resume+0x1dc>)
 8011c1c:	681b      	ldr	r3, [r3, #0]
 8011c1e:	3b01      	subs	r3, #1
 8011c20:	4a69      	ldr	r2, [pc, #420]	; (8011dc8 <_tx_thread_system_resume+0x1dc>)
 8011c22:	6013      	str	r3, [r2, #0]

    /* Determine if the thread is in the process of suspending.  If so, the thread
       control block is already on the linked list so nothing needs to be done.  */
    if (thread_ptr -> tx_thread_suspending == TX_FALSE)
 8011c24:	687b      	ldr	r3, [r7, #4]
 8011c26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011c28:	2b00      	cmp	r3, #0
 8011c2a:	f040 8082 	bne.w	8011d32 <_tx_thread_system_resume+0x146>
    {

        /* Thread is not in the process of suspending. Now check to make sure the thread 
           has not already been resumed.  */
        if (thread_ptr -> tx_thread_state != TX_READY)
 8011c2e:	687b      	ldr	r3, [r7, #4]
 8011c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011c32:	2b00      	cmp	r3, #0
 8011c34:	f000 8096 	beq.w	8011d64 <_tx_thread_system_resume+0x178>
        {

            /* No, now check to see if the delayed suspension flag is set.  */
            if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 8011c38:	687b      	ldr	r3, [r7, #4]
 8011c3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011c3c:	2b00      	cmp	r3, #0
 8011c3e:	d171      	bne.n	8011d24 <_tx_thread_system_resume+0x138>
                /* Resume the thread!  */
                
                /* Make this thread ready.  */

                /* Change the state to ready.  */
                thread_ptr -> tx_thread_state =  TX_READY;
 8011c40:	687b      	ldr	r3, [r7, #4]
 8011c42:	2200      	movs	r2, #0
 8011c44:	631a      	str	r2, [r3, #48]	; 0x30

                /* Pickup priority of thread.  */
                priority =  thread_ptr -> tx_thread_priority;
 8011c46:	687b      	ldr	r3, [r7, #4]
 8011c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c4a:	64bb      	str	r3, [r7, #72]	; 0x48
                thread_ptr -> tx_thread_performance_resume_count++;
#endif

                /* Determine if there are other threads at this priority that are
                   ready.  */
                head_ptr =  _tx_thread_priority_list[priority];
 8011c4c:	4a5f      	ldr	r2, [pc, #380]	; (8011dcc <_tx_thread_system_resume+0x1e0>)
 8011c4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011c50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011c54:	647b      	str	r3, [r7, #68]	; 0x44
                if (head_ptr == TX_NULL)
 8011c56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011c58:	2b00      	cmp	r3, #0
 8011c5a:	d153      	bne.n	8011d04 <_tx_thread_system_resume+0x118>
                {

                    /* First thread at this priority ready.  Add to the front of the list.  */
                    _tx_thread_priority_list[priority] =       thread_ptr;
 8011c5c:	495b      	ldr	r1, [pc, #364]	; (8011dcc <_tx_thread_system_resume+0x1e0>)
 8011c5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011c60:	687a      	ldr	r2, [r7, #4]
 8011c62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    thread_ptr -> tx_thread_ready_next =       thread_ptr;
 8011c66:	687b      	ldr	r3, [r7, #4]
 8011c68:	687a      	ldr	r2, [r7, #4]
 8011c6a:	621a      	str	r2, [r3, #32]
                    thread_ptr -> tx_thread_ready_previous =   thread_ptr;
 8011c6c:	687b      	ldr	r3, [r7, #4]
 8011c6e:	687a      	ldr	r2, [r7, #4]
 8011c70:	625a      	str	r2, [r3, #36]	; 0x24
                    TX_DIV32_BIT_SET(priority, priority_bit)
                    _tx_thread_priority_map_active =  _tx_thread_priority_map_active | priority_bit;
#endif

                    /* Or in the thread's priority bit.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 8011c72:	2201      	movs	r2, #1
 8011c74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011c76:	fa02 f303 	lsl.w	r3, r2, r3
 8011c7a:	63fb      	str	r3, [r7, #60]	; 0x3c
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 8011c7c:	4b54      	ldr	r3, [pc, #336]	; (8011dd0 <_tx_thread_system_resume+0x1e4>)
 8011c7e:	681a      	ldr	r2, [r3, #0]
 8011c80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011c82:	4313      	orrs	r3, r2
 8011c84:	4a52      	ldr	r2, [pc, #328]	; (8011dd0 <_tx_thread_system_resume+0x1e4>)
 8011c86:	6013      	str	r3, [r2, #0]

                    /* Determine if this newly ready thread is the highest priority.  */
                    if (priority < _tx_thread_highest_priority)
 8011c88:	4b52      	ldr	r3, [pc, #328]	; (8011dd4 <_tx_thread_system_resume+0x1e8>)
 8011c8a:	681b      	ldr	r3, [r3, #0]
 8011c8c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011c8e:	429a      	cmp	r2, r3
 8011c90:	d268      	bcs.n	8011d64 <_tx_thread_system_resume+0x178>
                    {

                        /* A new highest priority thread is present. */

                        /* Update the highest priority variable.  */
                        _tx_thread_highest_priority =  priority;
 8011c92:	4a50      	ldr	r2, [pc, #320]	; (8011dd4 <_tx_thread_system_resume+0x1e8>)
 8011c94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011c96:	6013      	str	r3, [r2, #0]

                        /* Pickup the execute pointer. Since it is going to be referenced multiple
                           times, it is placed in a local variable.  */
                        execute_ptr =  _tx_thread_execute_ptr;
 8011c98:	4b4f      	ldr	r3, [pc, #316]	; (8011dd8 <_tx_thread_system_resume+0x1ec>)
 8011c9a:	681b      	ldr	r3, [r3, #0]
 8011c9c:	63bb      	str	r3, [r7, #56]	; 0x38
                        
                        /* Determine if no thread is currently executing.  */
                        if (execute_ptr == TX_NULL)
 8011c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ca0:	2b00      	cmp	r3, #0
 8011ca2:	d103      	bne.n	8011cac <_tx_thread_system_resume+0xc0>
                        {

                            /* Simply setup the execute pointer.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 8011ca4:	4a4c      	ldr	r2, [pc, #304]	; (8011dd8 <_tx_thread_system_resume+0x1ec>)
 8011ca6:	687b      	ldr	r3, [r7, #4]
 8011ca8:	6013      	str	r3, [r2, #0]
 8011caa:	e05b      	b.n	8011d64 <_tx_thread_system_resume+0x178>
                        {
                        
                            /* Another thread has been scheduled for execution.  */
               
                            /* Check to see if this is a higher priority thread and determine if preemption is allowed.  */
                            if (priority < execute_ptr -> tx_thread_preempt_threshold)
 8011cac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011cae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011cb0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011cb2:	429a      	cmp	r2, r3
 8011cb4:	d256      	bcs.n	8011d64 <_tx_thread_system_resume+0x178>
                                execute_ptr -> tx_thread_performance_last_preempting_thread =  thread_ptr;

#endif

                                /* Yes, modify the execute thread pointer.  */
                                _tx_thread_execute_ptr =  thread_ptr;
 8011cb6:	4a48      	ldr	r2, [pc, #288]	; (8011dd8 <_tx_thread_system_resume+0x1ec>)
 8011cb8:	687b      	ldr	r3, [r7, #4]
 8011cba:	6013      	str	r3, [r2, #0]
 8011cbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011cbe:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8011cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011cc2:	f383 8810 	msr	PRIMASK, r3
}
 8011cc6:	bf00      	nop
                                TX_THREAD_STACK_CHECK(thread_ptr)
#endif

                                /* Now determine if preemption should take place. This is only possible if the current thread pointer is
                                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8011cc8:	4b3f      	ldr	r3, [pc, #252]	; (8011dc8 <_tx_thread_system_resume+0x1dc>)
 8011cca:	681b      	ldr	r3, [r3, #0]
 8011ccc:	637b      	str	r3, [r7, #52]	; 0x34
                                if (combined_flags == ((ULONG) 0))
 8011cce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011cd0:	2b00      	cmp	r3, #0
 8011cd2:	d172      	bne.n	8011dba <_tx_thread_system_resume+0x1ce>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8011cd4:	4b41      	ldr	r3, [pc, #260]	; (8011ddc <_tx_thread_system_resume+0x1f0>)
 8011cd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011cda:	601a      	str	r2, [r3, #0]
    if (_get_ipsr() == 0)
 8011cdc:	f7ff ff78 	bl	8011bd0 <_get_ipsr>
 8011ce0:	4603      	mov	r3, r0
 8011ce2:	2b00      	cmp	r3, #0
 8011ce4:	d10c      	bne.n	8011d00 <_tx_thread_system_resume+0x114>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8011ce6:	f3ef 8310 	mrs	r3, PRIMASK
 8011cea:	627b      	str	r3, [r7, #36]	; 0x24
    return(primask_value);
 8011cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        interrupt_save = __get_primask_value();
 8011cee:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" CPSIE  i": : : "memory" );
 8011cf0:	b662      	cpsie	i
}
 8011cf2:	bf00      	nop
 8011cf4:	6a3b      	ldr	r3, [r7, #32]
 8011cf6:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8011cf8:	69fb      	ldr	r3, [r7, #28]
 8011cfa:	f383 8810 	msr	PRIMASK, r3
}
 8011cfe:	bf00      	nop
}
 8011d00:	bf00      	nop
                                    /* Preemption is needed - return to the system!  */
                                    _tx_thread_system_return();
                                }

                                /* Return in-line when MISRA is not enabled.  */
                                return;
 8011d02:	e05a      	b.n	8011dba <_tx_thread_system_resume+0x1ce>
                {

                    /* No, there are other threads at this priority already ready.  */

                    /* Just add this thread to the priority list.  */
                    tail_ptr =                                 head_ptr -> tx_thread_ready_previous;
 8011d04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d08:	643b      	str	r3, [r7, #64]	; 0x40
                    tail_ptr -> tx_thread_ready_next =         thread_ptr;
 8011d0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011d0c:	687a      	ldr	r2, [r7, #4]
 8011d0e:	621a      	str	r2, [r3, #32]
                    head_ptr -> tx_thread_ready_previous =     thread_ptr;
 8011d10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011d12:	687a      	ldr	r2, [r7, #4]
 8011d14:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_previous =   tail_ptr;
 8011d16:	687b      	ldr	r3, [r7, #4]
 8011d18:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011d1a:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_next =       head_ptr;
 8011d1c:	687b      	ldr	r3, [r7, #4]
 8011d1e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011d20:	621a      	str	r2, [r3, #32]
 8011d22:	e01f      	b.n	8011d64 <_tx_thread_system_resume+0x178>
            /* Else, delayed suspend flag was set.  */
            else
            {

                /* Clear the delayed suspend flag and change the state.  */
                thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 8011d24:	687b      	ldr	r3, [r7, #4]
 8011d26:	2200      	movs	r2, #0
 8011d28:	635a      	str	r2, [r3, #52]	; 0x34
                thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 8011d2a:	687b      	ldr	r3, [r7, #4]
 8011d2c:	2203      	movs	r2, #3
 8011d2e:	631a      	str	r2, [r3, #48]	; 0x30
 8011d30:	e018      	b.n	8011d64 <_tx_thread_system_resume+0x178>
        /* A resumption occurred in the middle of a previous thread suspension.  */
        
        /* Make sure the type of suspension under way is not a terminate or
           thread completion.  In either of these cases, do not void the 
           interrupted suspension processing.  */
        if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 8011d32:	687b      	ldr	r3, [r7, #4]
 8011d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011d36:	2b01      	cmp	r3, #1
 8011d38:	d014      	beq.n	8011d64 <_tx_thread_system_resume+0x178>
        {
            
            /* Make sure the thread isn't terminated.  */
            if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 8011d3a:	687b      	ldr	r3, [r7, #4]
 8011d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011d3e:	2b02      	cmp	r3, #2
 8011d40:	d010      	beq.n	8011d64 <_tx_thread_system_resume+0x178>
            {

                /* No, now check to see if the delayed suspension flag is set.  */
                if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 8011d42:	687b      	ldr	r3, [r7, #4]
 8011d44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011d46:	2b00      	cmp	r3, #0
 8011d48:	d106      	bne.n	8011d58 <_tx_thread_system_resume+0x16c>
                {

                    /* Clear the suspending flag.  */
                    thread_ptr -> tx_thread_suspending =   TX_FALSE;
 8011d4a:	687b      	ldr	r3, [r7, #4]
 8011d4c:	2200      	movs	r2, #0
 8011d4e:	639a      	str	r2, [r3, #56]	; 0x38

                    /* Restore the state to ready.  */
                    thread_ptr -> tx_thread_state =        TX_READY;
 8011d50:	687b      	ldr	r3, [r7, #4]
 8011d52:	2200      	movs	r2, #0
 8011d54:	631a      	str	r2, [r3, #48]	; 0x30
 8011d56:	e005      	b.n	8011d64 <_tx_thread_system_resume+0x178>
                }
                else
                {
                
                    /* Clear the delayed suspend flag and change the state.  */
                    thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 8011d58:	687b      	ldr	r3, [r7, #4]
 8011d5a:	2200      	movs	r2, #0
 8011d5c:	635a      	str	r2, [r3, #52]	; 0x34
                    thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 8011d5e:	687b      	ldr	r3, [r7, #4]
 8011d60:	2203      	movs	r2, #3
 8011d62:	631a      	str	r2, [r3, #48]	; 0x30
        }
    }
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 8011d64:	4b1e      	ldr	r3, [pc, #120]	; (8011de0 <_tx_thread_system_resume+0x1f4>)
 8011d66:	681b      	ldr	r3, [r3, #0]
 8011d68:	633b      	str	r3, [r7, #48]	; 0x30
 8011d6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011d6c:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8011d6e:	69bb      	ldr	r3, [r7, #24]
 8011d70:	f383 8810 	msr	PRIMASK, r3
}
 8011d74:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 8011d76:	4b18      	ldr	r3, [pc, #96]	; (8011dd8 <_tx_thread_system_resume+0x1ec>)
 8011d78:	681b      	ldr	r3, [r3, #0]
 8011d7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011d7c:	429a      	cmp	r2, r3
 8011d7e:	d01f      	beq.n	8011dc0 <_tx_thread_system_resume+0x1d4>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Now determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8011d80:	4b11      	ldr	r3, [pc, #68]	; (8011dc8 <_tx_thread_system_resume+0x1dc>)
 8011d82:	681b      	ldr	r3, [r3, #0]
 8011d84:	637b      	str	r3, [r7, #52]	; 0x34
        if (combined_flags == ((ULONG) 0))
 8011d86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011d88:	2b00      	cmp	r3, #0
 8011d8a:	d119      	bne.n	8011dc0 <_tx_thread_system_resume+0x1d4>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8011d8c:	4b13      	ldr	r3, [pc, #76]	; (8011ddc <_tx_thread_system_resume+0x1f0>)
 8011d8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011d92:	601a      	str	r2, [r3, #0]
    if (_get_ipsr() == 0)
 8011d94:	f7ff ff1c 	bl	8011bd0 <_get_ipsr>
 8011d98:	4603      	mov	r3, r0
 8011d9a:	2b00      	cmp	r3, #0
 8011d9c:	d10f      	bne.n	8011dbe <_tx_thread_system_resume+0x1d2>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8011d9e:	f3ef 8310 	mrs	r3, PRIMASK
 8011da2:	617b      	str	r3, [r7, #20]
    return(primask_value);
 8011da4:	697b      	ldr	r3, [r7, #20]
        interrupt_save = __get_primask_value();
 8011da6:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" CPSIE  i": : : "memory" );
 8011da8:	b662      	cpsie	i
}
 8011daa:	bf00      	nop
 8011dac:	693b      	ldr	r3, [r7, #16]
 8011dae:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8011db0:	68fb      	ldr	r3, [r7, #12]
 8011db2:	f383 8810 	msr	PRIMASK, r3
}
 8011db6:	bf00      	nop
}
 8011db8:	e001      	b.n	8011dbe <_tx_thread_system_resume+0x1d2>
                                return;
 8011dba:	bf00      	nop
 8011dbc:	e000      	b.n	8011dc0 <_tx_thread_system_resume+0x1d4>
 8011dbe:	bf00      	nop

            /* Preemption is needed - return to the system!  */
            _tx_thread_system_return();
        }
    }
}
 8011dc0:	3750      	adds	r7, #80	; 0x50
 8011dc2:	46bd      	mov	sp, r7
 8011dc4:	bd80      	pop	{r7, pc}
 8011dc6:	bf00      	nop
 8011dc8:	200260fc 	.word	0x200260fc
 8011dcc:	2002607c 	.word	0x2002607c
 8011dd0:	20026074 	.word	0x20026074
 8011dd4:	20026078 	.word	0x20026078
 8011dd8:	20026068 	.word	0x20026068
 8011ddc:	e000ed04 	.word	0xe000ed04
 8011de0:	20026064 	.word	0x20026064

08011de4 <_get_ipsr>:
{
 8011de4:	b480      	push	{r7}
 8011de6:	b083      	sub	sp, #12
 8011de8:	af00      	add	r7, sp, #0
    __asm("MRS %[result], ipsr" : [result] "=r" (_ipsr) : );
 8011dea:	f3ef 8305 	mrs	r3, IPSR
 8011dee:	607b      	str	r3, [r7, #4]
    return _ipsr;
 8011df0:	687b      	ldr	r3, [r7, #4]
}
 8011df2:	4618      	mov	r0, r3
 8011df4:	370c      	adds	r7, #12
 8011df6:	46bd      	mov	sp, r7
 8011df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dfc:	4770      	bx	lr
	...

08011e00 <_tx_thread_system_suspend>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_suspend(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 8011e00:	b580      	push	{r7, lr}
 8011e02:	b09a      	sub	sp, #104	; 0x68
 8011e04:	af00      	add	r7, sp, #0
 8011e06:	6078      	str	r0, [r7, #4]
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 8011e08:	4b7e      	ldr	r3, [pc, #504]	; (8012004 <_tx_thread_system_suspend+0x204>)
 8011e0a:	681b      	ldr	r3, [r3, #0]
 8011e0c:	667b      	str	r3, [r7, #100]	; 0x64
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8011e0e:	f3ef 8310 	mrs	r3, PRIMASK
 8011e12:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile (" CPSID i" : : : "memory" );
 8011e14:	b672      	cpsid	i
    return(primask_value);
 8011e16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 8011e18:	663b      	str	r3, [r7, #96]	; 0x60

#ifndef TX_NO_TIMER

    /* Is the current thread suspending?  */
    if (thread_ptr == current_thread)
 8011e1a:	687a      	ldr	r2, [r7, #4]
 8011e1c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011e1e:	429a      	cmp	r2, r3
 8011e20:	d112      	bne.n	8011e48 <_tx_thread_system_suspend+0x48>
    {

        /* Pickup the wait option.  */
        timeout =  thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks;
 8011e22:	687b      	ldr	r3, [r7, #4]
 8011e24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011e26:	65fb      	str	r3, [r7, #92]	; 0x5c

        /* Determine if an activation is needed.  */
        if (timeout != TX_NO_WAIT)
 8011e28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011e2a:	2b00      	cmp	r3, #0
 8011e2c:	d008      	beq.n	8011e40 <_tx_thread_system_suspend+0x40>
        {

            /* Make sure the suspension is not a wait-forever.  */
            if (timeout != TX_WAIT_FOREVER)
 8011e2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011e30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011e34:	d004      	beq.n	8011e40 <_tx_thread_system_suspend+0x40>
            {
            
                /* Activate the thread timer with the timeout value setup in the caller.  */
                _tx_timer_system_activate(&(thread_ptr -> tx_thread_timer));
 8011e36:	687b      	ldr	r3, [r7, #4]
 8011e38:	334c      	adds	r3, #76	; 0x4c
 8011e3a:	4618      	mov	r0, r3
 8011e3c:	f000 fb70 	bl	8012520 <_tx_timer_system_activate>
            }
        }

        /* Yes, reset time slice for current thread.  */
        _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 8011e40:	687b      	ldr	r3, [r7, #4]
 8011e42:	69db      	ldr	r3, [r3, #28]
 8011e44:	4a70      	ldr	r2, [pc, #448]	; (8012008 <_tx_thread_system_suspend+0x208>)
 8011e46:	6013      	str	r3, [r2, #0]
    }
#endif
    
    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 8011e48:	4b70      	ldr	r3, [pc, #448]	; (801200c <_tx_thread_system_suspend+0x20c>)
 8011e4a:	681b      	ldr	r3, [r3, #0]
 8011e4c:	3b01      	subs	r3, #1
 8011e4e:	4a6f      	ldr	r2, [pc, #444]	; (801200c <_tx_thread_system_suspend+0x20c>)
 8011e50:	6013      	str	r3, [r2, #0]
    _tx_thread_performance_suspend_count++;
#endif

    /* Check to make sure the thread suspending flag is still set.  If not, it
       has already been resumed.  */
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 8011e52:	687b      	ldr	r3, [r7, #4]
 8011e54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011e56:	2b01      	cmp	r3, #1
 8011e58:	f040 80a3 	bne.w	8011fa2 <_tx_thread_system_suspend+0x1a2>
            time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
        }
#endif

        /* Actually suspend this thread.  But first, clear the suspending flag.  */
        thread_ptr -> tx_thread_suspending =  TX_FALSE;
 8011e5c:	687b      	ldr	r3, [r7, #4]
 8011e5e:	2200      	movs	r2, #0
 8011e60:	639a      	str	r2, [r3, #56]	; 0x38

        /* Pickup priority of thread.  */
        priority =  thread_ptr -> tx_thread_priority;
 8011e62:	687b      	ldr	r3, [r7, #4]
 8011e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011e66:	65bb      	str	r3, [r7, #88]	; 0x58

        /* Pickup the next ready thread pointer.  */
        ready_next =      thread_ptr -> tx_thread_ready_next;
 8011e68:	687b      	ldr	r3, [r7, #4]
 8011e6a:	6a1b      	ldr	r3, [r3, #32]
 8011e6c:	657b      	str	r3, [r7, #84]	; 0x54

        /* Determine if there are other threads at this priority that are
           ready.  */
        if (ready_next != thread_ptr)
 8011e6e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011e70:	687b      	ldr	r3, [r7, #4]
 8011e72:	429a      	cmp	r2, r3
 8011e74:	d015      	beq.n	8011ea2 <_tx_thread_system_suspend+0xa2>
        {

            /* Yes, there are other threads at this priority ready.  */

            /* Pickup the previous ready thread pointer.  */
            ready_previous =  thread_ptr -> tx_thread_ready_previous;
 8011e76:	687b      	ldr	r3, [r7, #4]
 8011e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011e7a:	643b      	str	r3, [r7, #64]	; 0x40

            /* Just remove this thread from the priority list.  */
            ready_next -> tx_thread_ready_previous =    ready_previous;
 8011e7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011e7e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011e80:	625a      	str	r2, [r3, #36]	; 0x24
            ready_previous -> tx_thread_ready_next =    ready_next;
 8011e82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011e84:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011e86:	621a      	str	r2, [r3, #32]

            /* Determine if this is the head of the priority list.  */
            if (_tx_thread_priority_list[priority] == thread_ptr)
 8011e88:	4a61      	ldr	r2, [pc, #388]	; (8012010 <_tx_thread_system_suspend+0x210>)
 8011e8a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011e8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011e90:	687a      	ldr	r2, [r7, #4]
 8011e92:	429a      	cmp	r2, r3
 8011e94:	d155      	bne.n	8011f42 <_tx_thread_system_suspend+0x142>
            {

                /* Update the head pointer of this priority list.  */
                _tx_thread_priority_list[priority] =  ready_next;
 8011e96:	495e      	ldr	r1, [pc, #376]	; (8012010 <_tx_thread_system_suspend+0x210>)
 8011e98:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011e9a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011e9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8011ea0:	e04f      	b.n	8011f42 <_tx_thread_system_suspend+0x142>
        else
        {

            /* This is the only thread at this priority ready to run.  Set the head 
               pointer to NULL.  */
            _tx_thread_priority_list[priority] =    TX_NULL;
 8011ea2:	4a5b      	ldr	r2, [pc, #364]	; (8012010 <_tx_thread_system_suspend+0x210>)
 8011ea4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011ea6:	2100      	movs	r1, #0
 8011ea8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            /* Calculate the index into the bit map array.  */
            map_index =  priority/((UINT) 32);
#endif

            /* Clear this priority bit in the ready priority bit map.  */
            TX_MOD32_BIT_SET(priority, priority_bit)
 8011eac:	2201      	movs	r2, #1
 8011eae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8011eb4:	653b      	str	r3, [r7, #80]	; 0x50
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 8011eb6:	4b57      	ldr	r3, [pc, #348]	; (8012014 <_tx_thread_system_suspend+0x214>)
 8011eb8:	681a      	ldr	r2, [r3, #0]
 8011eba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011ebc:	43db      	mvns	r3, r3
 8011ebe:	4013      	ands	r3, r2
 8011ec0:	4a54      	ldr	r2, [pc, #336]	; (8012014 <_tx_thread_system_suspend+0x214>)
 8011ec2:	6013      	str	r3, [r2, #0]
            /* Calculate the base priority as well.  */
            base_priority =  map_index * ((UINT) 32);
#else

            /* Setup the base priority to zero.  */
            base_priority =   ((UINT) 0);
 8011ec4:	2300      	movs	r3, #0
 8011ec6:	64fb      	str	r3, [r7, #76]	; 0x4c
#endif

            /* Setup working variable for the priority map.  */
            priority_map =    _tx_thread_priority_maps[MAP_INDEX];
 8011ec8:	4b52      	ldr	r3, [pc, #328]	; (8012014 <_tx_thread_system_suspend+0x214>)
 8011eca:	681b      	ldr	r3, [r3, #0]
 8011ecc:	64bb      	str	r3, [r7, #72]	; 0x48

            /* Make a quick check for no other threads ready for execution.  */
            if (priority_map == ((ULONG) 0))
 8011ece:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011ed0:	2b00      	cmp	r3, #0
 8011ed2:	d129      	bne.n	8011f28 <_tx_thread_system_suspend+0x128>
            {

                /* Nothing else is ready.  Set highest priority and execute thread
                   accordingly.  */
                _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 8011ed4:	4b50      	ldr	r3, [pc, #320]	; (8012018 <_tx_thread_system_suspend+0x218>)
 8011ed6:	2220      	movs	r2, #32
 8011ed8:	601a      	str	r2, [r3, #0]
                _tx_thread_execute_ptr =       TX_NULL;
 8011eda:	4b50      	ldr	r3, [pc, #320]	; (801201c <_tx_thread_system_suspend+0x21c>)
 8011edc:	2200      	movs	r2, #0
 8011ede:	601a      	str	r2, [r3, #0]
 8011ee0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011ee2:	63bb      	str	r3, [r7, #56]	; 0x38
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8011ee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ee6:	f383 8810 	msr	PRIMASK, r3
}
 8011eea:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if preemption should take place. This is only possible if the current thread pointer is
                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8011eec:	4b47      	ldr	r3, [pc, #284]	; (801200c <_tx_thread_system_suspend+0x20c>)
 8011eee:	681b      	ldr	r3, [r3, #0]
 8011ef0:	647b      	str	r3, [r7, #68]	; 0x44
                if (combined_flags == ((ULONG) 0))
 8011ef2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011ef4:	2b00      	cmp	r3, #0
 8011ef6:	d17d      	bne.n	8011ff4 <_tx_thread_system_suspend+0x1f4>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8011ef8:	4b49      	ldr	r3, [pc, #292]	; (8012020 <_tx_thread_system_suspend+0x220>)
 8011efa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011efe:	601a      	str	r2, [r3, #0]
    if (_get_ipsr() == 0)
 8011f00:	f7ff ff70 	bl	8011de4 <_get_ipsr>
 8011f04:	4603      	mov	r3, r0
 8011f06:	2b00      	cmp	r3, #0
 8011f08:	d10c      	bne.n	8011f24 <_tx_thread_system_suspend+0x124>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8011f0a:	f3ef 8310 	mrs	r3, PRIMASK
 8011f0e:	637b      	str	r3, [r7, #52]	; 0x34
    return(primask_value);
 8011f10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        interrupt_save = __get_primask_value();
 8011f12:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile (" CPSIE  i": : : "memory" );
 8011f14:	b662      	cpsie	i
}
 8011f16:	bf00      	nop
 8011f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8011f1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f1e:	f383 8810 	msr	PRIMASK, r3
}
 8011f22:	bf00      	nop
}
 8011f24:	bf00      	nop
                    /* Preemption is needed - return to the system!  */
                    _tx_thread_system_return();
                }

                /* Return to caller.  */
                return;
 8011f26:	e065      	b.n	8011ff4 <_tx_thread_system_suspend+0x1f4>
            {
            
                /* Other threads at different priority levels are ready to run.  */
            
                /* Calculate the lowest bit set in the priority map. */
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 8011f28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011f2a:	fa93 f3a3 	rbit	r3, r3
 8011f2e:	64bb      	str	r3, [r7, #72]	; 0x48
 8011f30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011f32:	fab3 f383 	clz	r3, r3
 8011f36:	653b      	str	r3, [r7, #80]	; 0x50

                /* Setup the next highest priority variable.  */
                _tx_thread_highest_priority =  base_priority + ((UINT) priority_bit);
 8011f38:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011f3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011f3c:	4413      	add	r3, r2
 8011f3e:	4a36      	ldr	r2, [pc, #216]	; (8012018 <_tx_thread_system_suspend+0x218>)
 8011f40:	6013      	str	r3, [r2, #0]
            }
        }

        /* Determine if the suspending thread is the thread designated to execute.  */
        if (thread_ptr == _tx_thread_execute_ptr)
 8011f42:	4b36      	ldr	r3, [pc, #216]	; (801201c <_tx_thread_system_suspend+0x21c>)
 8011f44:	681b      	ldr	r3, [r3, #0]
 8011f46:	687a      	ldr	r2, [r7, #4]
 8011f48:	429a      	cmp	r2, r3
 8011f4a:	d12a      	bne.n	8011fa2 <_tx_thread_system_suspend+0x1a2>
        {

            /* Pickup the highest priority thread to execute.  */
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8011f4c:	4b32      	ldr	r3, [pc, #200]	; (8012018 <_tx_thread_system_suspend+0x218>)
 8011f4e:	681b      	ldr	r3, [r3, #0]
 8011f50:	4a2f      	ldr	r2, [pc, #188]	; (8012010 <_tx_thread_system_suspend+0x210>)
 8011f52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011f56:	4a31      	ldr	r2, [pc, #196]	; (801201c <_tx_thread_system_suspend+0x21c>)
 8011f58:	6013      	str	r3, [r2, #0]
 8011f5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011f5c:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8011f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f60:	f383 8810 	msr	PRIMASK, r3
}
 8011f64:	bf00      	nop
            /* Restore interrupts.  */
            TX_RESTORE

            /* Determine if preemption should take place. This is only possible if the current thread pointer is
               not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
            TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8011f66:	4b29      	ldr	r3, [pc, #164]	; (801200c <_tx_thread_system_suspend+0x20c>)
 8011f68:	681b      	ldr	r3, [r3, #0]
 8011f6a:	647b      	str	r3, [r7, #68]	; 0x44
            if (combined_flags == ((ULONG) 0))
 8011f6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011f6e:	2b00      	cmp	r3, #0
 8011f70:	d142      	bne.n	8011ff8 <_tx_thread_system_suspend+0x1f8>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8011f72:	4b2b      	ldr	r3, [pc, #172]	; (8012020 <_tx_thread_system_suspend+0x220>)
 8011f74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011f78:	601a      	str	r2, [r3, #0]
    if (_get_ipsr() == 0)
 8011f7a:	f7ff ff33 	bl	8011de4 <_get_ipsr>
 8011f7e:	4603      	mov	r3, r0
 8011f80:	2b00      	cmp	r3, #0
 8011f82:	d10c      	bne.n	8011f9e <_tx_thread_system_suspend+0x19e>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8011f84:	f3ef 8310 	mrs	r3, PRIMASK
 8011f88:	627b      	str	r3, [r7, #36]	; 0x24
    return(primask_value);
 8011f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        interrupt_save = __get_primask_value();
 8011f8c:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" CPSIE  i": : : "memory" );
 8011f8e:	b662      	cpsie	i
}
 8011f90:	bf00      	nop
 8011f92:	6a3b      	ldr	r3, [r7, #32]
 8011f94:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8011f96:	69fb      	ldr	r3, [r7, #28]
 8011f98:	f383 8810 	msr	PRIMASK, r3
}
 8011f9c:	bf00      	nop
}
 8011f9e:	bf00      	nop
                /* Preemption is needed - return to the system!  */
                _tx_thread_system_return();
            }

            /* Return to caller.  */
            return;
 8011fa0:	e02a      	b.n	8011ff8 <_tx_thread_system_suspend+0x1f8>
 8011fa2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011fa4:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8011fa6:	69bb      	ldr	r3, [r7, #24]
 8011fa8:	f383 8810 	msr	PRIMASK, r3
}
 8011fac:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 8011fae:	4b1b      	ldr	r3, [pc, #108]	; (801201c <_tx_thread_system_suspend+0x21c>)
 8011fb0:	681b      	ldr	r3, [r3, #0]
 8011fb2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8011fb4:	429a      	cmp	r2, r3
 8011fb6:	d021      	beq.n	8011ffc <_tx_thread_system_suspend+0x1fc>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8011fb8:	4b14      	ldr	r3, [pc, #80]	; (801200c <_tx_thread_system_suspend+0x20c>)
 8011fba:	681b      	ldr	r3, [r3, #0]
 8011fbc:	647b      	str	r3, [r7, #68]	; 0x44
        if (combined_flags == ((ULONG) 0))
 8011fbe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011fc0:	2b00      	cmp	r3, #0
 8011fc2:	d11b      	bne.n	8011ffc <_tx_thread_system_suspend+0x1fc>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8011fc4:	4b16      	ldr	r3, [pc, #88]	; (8012020 <_tx_thread_system_suspend+0x220>)
 8011fc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011fca:	601a      	str	r2, [r3, #0]
    if (_get_ipsr() == 0)
 8011fcc:	f7ff ff0a 	bl	8011de4 <_get_ipsr>
 8011fd0:	4603      	mov	r3, r0
 8011fd2:	2b00      	cmp	r3, #0
 8011fd4:	d10c      	bne.n	8011ff0 <_tx_thread_system_suspend+0x1f0>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8011fd6:	f3ef 8310 	mrs	r3, PRIMASK
 8011fda:	617b      	str	r3, [r7, #20]
    return(primask_value);
 8011fdc:	697b      	ldr	r3, [r7, #20]
        interrupt_save = __get_primask_value();
 8011fde:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" CPSIE  i": : : "memory" );
 8011fe0:	b662      	cpsie	i
}
 8011fe2:	bf00      	nop
 8011fe4:	693b      	ldr	r3, [r7, #16]
 8011fe6:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8011fe8:	68fb      	ldr	r3, [r7, #12]
 8011fea:	f383 8810 	msr	PRIMASK, r3
}
 8011fee:	bf00      	nop
}
 8011ff0:	bf00      	nop
            _tx_thread_system_return();
        }
    }

    /* Return to caller.  */
    return;
 8011ff2:	e003      	b.n	8011ffc <_tx_thread_system_suspend+0x1fc>
                return;
 8011ff4:	bf00      	nop
 8011ff6:	e002      	b.n	8011ffe <_tx_thread_system_suspend+0x1fe>
            return;
 8011ff8:	bf00      	nop
 8011ffa:	e000      	b.n	8011ffe <_tx_thread_system_suspend+0x1fe>
    return;
 8011ffc:	bf00      	nop
}
 8011ffe:	3768      	adds	r7, #104	; 0x68
 8012000:	46bd      	mov	sp, r7
 8012002:	bd80      	pop	{r7, pc}
 8012004:	20026064 	.word	0x20026064
 8012008:	20026668 	.word	0x20026668
 801200c:	200260fc 	.word	0x200260fc
 8012010:	2002607c 	.word	0x2002607c
 8012014:	20026074 	.word	0x20026074
 8012018:	20026078 	.word	0x20026078
 801201c:	20026068 	.word	0x20026068
 8012020:	e000ed04 	.word	0xe000ed04

08012024 <_tx_thread_time_slice>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_time_slice(VOID)
{
 8012024:	b480      	push	{r7}
 8012026:	b085      	sub	sp, #20
 8012028:	af00      	add	r7, sp, #0
ULONG           system_state;
UINT            preempt_disable;
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 801202a:	4b20      	ldr	r3, [pc, #128]	; (80120ac <_tx_thread_time_slice+0x88>)
 801202c:	681b      	ldr	r3, [r3, #0]
 801202e:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8012030:	f3ef 8310 	mrs	r3, PRIMASK
 8012034:	607b      	str	r3, [r7, #4]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8012036:	b672      	cpsid	i
    return(primask_value);
 8012038:	687b      	ldr	r3, [r7, #4]
    /* Set the next thread pointer to NULL.  */
    next_thread_ptr =  TX_NULL;
#endif

    /* Lockout interrupts while the time-slice is evaluated.  */
    TX_DISABLE
 801203a:	60bb      	str	r3, [r7, #8]

    /* Clear the expired time-slice flag.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 801203c:	4b1c      	ldr	r3, [pc, #112]	; (80120b0 <_tx_thread_time_slice+0x8c>)
 801203e:	2200      	movs	r2, #0
 8012040:	601a      	str	r2, [r3, #0]

    /* Make sure the thread pointer is valid.  */
    if (thread_ptr != TX_NULL)
 8012042:	68fb      	ldr	r3, [r7, #12]
 8012044:	2b00      	cmp	r3, #0
 8012046:	d024      	beq.n	8012092 <_tx_thread_time_slice+0x6e>
    {

        /* Make sure the thread is still active, i.e. not suspended.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 8012048:	68fb      	ldr	r3, [r7, #12]
 801204a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801204c:	2b00      	cmp	r3, #0
 801204e:	d120      	bne.n	8012092 <_tx_thread_time_slice+0x6e>
        {

            /* Setup a fresh time-slice for the thread.  */
            thread_ptr -> tx_thread_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 8012050:	68fb      	ldr	r3, [r7, #12]
 8012052:	69da      	ldr	r2, [r3, #28]
 8012054:	68fb      	ldr	r3, [r7, #12]
 8012056:	619a      	str	r2, [r3, #24]

            /* Reset the actual time-slice variable.  */
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;
 8012058:	68fb      	ldr	r3, [r7, #12]
 801205a:	699b      	ldr	r3, [r3, #24]
 801205c:	4a15      	ldr	r2, [pc, #84]	; (80120b4 <_tx_thread_time_slice+0x90>)
 801205e:	6013      	str	r3, [r2, #0]

            /* Determine if there is another thread at the same priority and preemption-threshold
               is not set.  Preemption-threshold overrides time-slicing.  */
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 8012060:	68fb      	ldr	r3, [r7, #12]
 8012062:	6a1b      	ldr	r3, [r3, #32]
 8012064:	68fa      	ldr	r2, [r7, #12]
 8012066:	429a      	cmp	r2, r3
 8012068:	d013      	beq.n	8012092 <_tx_thread_time_slice+0x6e>
            {

                /* Check to see if preemption-threshold is not being used.  */
                if (thread_ptr -> tx_thread_priority == thread_ptr -> tx_thread_preempt_threshold)
 801206a:	68fb      	ldr	r3, [r7, #12]
 801206c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801206e:	68fb      	ldr	r3, [r7, #12]
 8012070:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012072:	429a      	cmp	r2, r3
 8012074:	d10d      	bne.n	8012092 <_tx_thread_time_slice+0x6e>
                
                    /* Preemption-threshold is not being used by this thread.  */
        
                    /* There is another thread at this priority, make it the highest at
                       this priority level.  */
                    _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr -> tx_thread_ready_next;
 8012076:	68fb      	ldr	r3, [r7, #12]
 8012078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801207a:	68fa      	ldr	r2, [r7, #12]
 801207c:	6a12      	ldr	r2, [r2, #32]
 801207e:	490e      	ldr	r1, [pc, #56]	; (80120b8 <_tx_thread_time_slice+0x94>)
 8012080:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    
                    /* Designate the highest priority thread as the one to execute.  Don't use this 
                       thread's priority as an index just in case a higher priority thread is now 
                       ready!  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8012084:	4b0d      	ldr	r3, [pc, #52]	; (80120bc <_tx_thread_time_slice+0x98>)
 8012086:	681b      	ldr	r3, [r3, #0]
 8012088:	4a0b      	ldr	r2, [pc, #44]	; (80120b8 <_tx_thread_time_slice+0x94>)
 801208a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801208e:	4a0c      	ldr	r2, [pc, #48]	; (80120c0 <_tx_thread_time_slice+0x9c>)
 8012090:	6013      	str	r3, [r2, #0]
 8012092:	68bb      	ldr	r3, [r7, #8]
 8012094:	603b      	str	r3, [r7, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8012096:	683b      	ldr	r3, [r7, #0]
 8012098:	f383 8810 	msr	PRIMASK, r3
}
 801209c:	bf00      	nop

        /* Yes, check this thread's stack.  */
        TX_THREAD_STACK_CHECK(next_thread_ptr)
    }
#endif
}
 801209e:	bf00      	nop
 80120a0:	3714      	adds	r7, #20
 80120a2:	46bd      	mov	sp, r7
 80120a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120a8:	4770      	bx	lr
 80120aa:	bf00      	nop
 80120ac:	20026064 	.word	0x20026064
 80120b0:	2002610c 	.word	0x2002610c
 80120b4:	20026668 	.word	0x20026668
 80120b8:	2002607c 	.word	0x2002607c
 80120bc:	20026078 	.word	0x20026078
 80120c0:	20026068 	.word	0x20026068

080120c4 <_tx_thread_timeout>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_timeout(ULONG timeout_input)
{
 80120c4:	b580      	push	{r7, lr}
 80120c6:	b08a      	sub	sp, #40	; 0x28
 80120c8:	af00      	add	r7, sp, #0
 80120ca:	6078      	str	r0, [r7, #4]
VOID            (*suspend_cleanup)(struct TX_THREAD_STRUCT *suspend_thread_ptr, ULONG suspension_sequence);
ULONG           suspension_sequence;


    /* Pickup the thread pointer.  */
    TX_THREAD_TIMEOUT_POINTER_SETUP(thread_ptr)
 80120cc:	687b      	ldr	r3, [r7, #4]
 80120ce:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80120d0:	f3ef 8310 	mrs	r3, PRIMASK
 80120d4:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" CPSID i" : : : "memory" );
 80120d6:	b672      	cpsid	i
    return(primask_value);
 80120d8:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts.  */
    TX_DISABLE
 80120da:	623b      	str	r3, [r7, #32]

    /* Determine how the thread is currently suspended.  */
    if (thread_ptr -> tx_thread_state == TX_SLEEP)
 80120dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80120e0:	2b04      	cmp	r3, #4
 80120e2:	d10e      	bne.n	8012102 <_tx_thread_timeout+0x3e>
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Increment the disable preemption flag.  */
        _tx_thread_preempt_disable++;
 80120e4:	4b13      	ldr	r3, [pc, #76]	; (8012134 <_tx_thread_timeout+0x70>)
 80120e6:	681b      	ldr	r3, [r3, #0]
 80120e8:	3301      	adds	r3, #1
 80120ea:	4a12      	ldr	r2, [pc, #72]	; (8012134 <_tx_thread_timeout+0x70>)
 80120ec:	6013      	str	r3, [r2, #0]
 80120ee:	6a3b      	ldr	r3, [r7, #32]
 80120f0:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80120f2:	693b      	ldr	r3, [r7, #16]
 80120f4:	f383 8810 	msr	PRIMASK, r3
}
 80120f8:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Lift the suspension on the sleeping thread.  */
        _tx_thread_system_resume(thread_ptr);
 80120fa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80120fc:	f7ff fd76 	bl	8011bec <_tx_thread_system_resume>

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 8012100:	e013      	b.n	801212a <_tx_thread_timeout+0x66>
        suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 8012102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012104:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012106:	61fb      	str	r3, [r7, #28]
        suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 8012108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801210a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801210e:	61bb      	str	r3, [r7, #24]
 8012110:	6a3b      	ldr	r3, [r7, #32]
 8012112:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8012114:	68fb      	ldr	r3, [r7, #12]
 8012116:	f383 8810 	msr	PRIMASK, r3
}
 801211a:	bf00      	nop
        if (suspend_cleanup != TX_NULL)
 801211c:	69fb      	ldr	r3, [r7, #28]
 801211e:	2b00      	cmp	r3, #0
 8012120:	d003      	beq.n	801212a <_tx_thread_timeout+0x66>
            (suspend_cleanup)(thread_ptr, suspension_sequence);
 8012122:	69fb      	ldr	r3, [r7, #28]
 8012124:	69b9      	ldr	r1, [r7, #24]
 8012126:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012128:	4798      	blx	r3
}
 801212a:	bf00      	nop
 801212c:	3728      	adds	r7, #40	; 0x28
 801212e:	46bd      	mov	sp, r7
 8012130:	bd80      	pop	{r7, pc}
 8012132:	bf00      	nop
 8012134:	200260fc 	.word	0x200260fc

08012138 <_tx_timer_activate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_timer_activate(TX_TIMER *timer_ptr)
{
 8012138:	b580      	push	{r7, lr}
 801213a:	b086      	sub	sp, #24
 801213c:	af00      	add	r7, sp, #0
 801213e:	6078      	str	r0, [r7, #4]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8012140:	f3ef 8310 	mrs	r3, PRIMASK
 8012144:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8012146:	b672      	cpsid	i
    return(primask_value);
 8012148:	68fb      	ldr	r3, [r7, #12]

UINT        status;


    /* Disable interrupts to put the timer on the created list.  */
    TX_DISABLE
 801214a:	613b      	str	r3, [r7, #16]
    /* Log this kernel call.  */
    TX_EL_TIMER_ACTIVATE_INSERT
#endif

    /* Check for an already active timer.  */
    if (timer_ptr -> tx_timer_internal.tx_timer_internal_list_head != TX_NULL)
 801214c:	687b      	ldr	r3, [r7, #4]
 801214e:	6a1b      	ldr	r3, [r3, #32]
 8012150:	2b00      	cmp	r3, #0
 8012152:	d002      	beq.n	801215a <_tx_timer_activate+0x22>
    {

        /* Timer is already active, return an error.  */
        status =  TX_ACTIVATE_ERROR;
 8012154:	2317      	movs	r3, #23
 8012156:	617b      	str	r3, [r7, #20]
 8012158:	e00d      	b.n	8012176 <_tx_timer_activate+0x3e>
    }

    /* Check for a timer with a zero expiration.  */
    else if (timer_ptr -> tx_timer_internal.tx_timer_internal_remaining_ticks == ((ULONG) 0))
 801215a:	687b      	ldr	r3, [r7, #4]
 801215c:	689b      	ldr	r3, [r3, #8]
 801215e:	2b00      	cmp	r3, #0
 8012160:	d102      	bne.n	8012168 <_tx_timer_activate+0x30>
    {

        /* Timer is being activated with a zero expiration.  */
        status =  TX_ACTIVATE_ERROR;
 8012162:	2317      	movs	r3, #23
 8012164:	617b      	str	r3, [r7, #20]
 8012166:	e006      	b.n	8012176 <_tx_timer_activate+0x3e>
        /* Increment the number of activations on this timer.  */
        timer_ptr -> tx_timer_performance_activate_count++;
#endif

        /* Call actual activation function.  */
        _tx_timer_system_activate(&(timer_ptr -> tx_timer_internal));
 8012168:	687b      	ldr	r3, [r7, #4]
 801216a:	3308      	adds	r3, #8
 801216c:	4618      	mov	r0, r3
 801216e:	f000 f9d7 	bl	8012520 <_tx_timer_system_activate>

        /* Return a successful status.  */
        status =  TX_SUCCESS;
 8012172:	2300      	movs	r3, #0
 8012174:	617b      	str	r3, [r7, #20]
 8012176:	693b      	ldr	r3, [r7, #16]
 8012178:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801217a:	68bb      	ldr	r3, [r7, #8]
 801217c:	f383 8810 	msr	PRIMASK, r3
}
 8012180:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return completion status.  */
    return(status);
 8012182:	697b      	ldr	r3, [r7, #20]
}
 8012184:	4618      	mov	r0, r3
 8012186:	3718      	adds	r7, #24
 8012188:	46bd      	mov	sp, r7
 801218a:	bd80      	pop	{r7, pc}

0801218c <_tx_timer_change>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_timer_change(TX_TIMER *timer_ptr, ULONG initial_ticks, ULONG reschedule_ticks)
{
 801218c:	b480      	push	{r7}
 801218e:	b089      	sub	sp, #36	; 0x24
 8012190:	af00      	add	r7, sp, #0
 8012192:	60f8      	str	r0, [r7, #12]
 8012194:	60b9      	str	r1, [r7, #8]
 8012196:	607a      	str	r2, [r7, #4]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8012198:	f3ef 8310 	mrs	r3, PRIMASK
 801219c:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 801219e:	b672      	cpsid	i
    return(primask_value);
 80121a0:	69bb      	ldr	r3, [r7, #24]

TX_INTERRUPT_SAVE_AREA

    
    /* Disable interrupts to put the timer on the created list.  */
    TX_DISABLE
 80121a2:	61fb      	str	r3, [r7, #28]

    /* Log this kernel call.  */
    TX_EL_TIMER_CHANGE_INSERT

    /* Determine if the timer is active.  */
    if (timer_ptr -> tx_timer_internal.tx_timer_internal_list_head == TX_NULL)
 80121a4:	68fb      	ldr	r3, [r7, #12]
 80121a6:	6a1b      	ldr	r3, [r3, #32]
 80121a8:	2b00      	cmp	r3, #0
 80121aa:	d105      	bne.n	80121b8 <_tx_timer_change+0x2c>
    {
    
        /* Setup the new expiration fields.  */
        timer_ptr -> tx_timer_internal.tx_timer_internal_remaining_ticks =      initial_ticks;
 80121ac:	68fb      	ldr	r3, [r7, #12]
 80121ae:	68ba      	ldr	r2, [r7, #8]
 80121b0:	609a      	str	r2, [r3, #8]
        timer_ptr -> tx_timer_internal.tx_timer_internal_re_initialize_ticks =  reschedule_ticks;
 80121b2:	68fb      	ldr	r3, [r7, #12]
 80121b4:	687a      	ldr	r2, [r7, #4]
 80121b6:	60da      	str	r2, [r3, #12]
 80121b8:	69fb      	ldr	r3, [r7, #28]
 80121ba:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80121bc:	697b      	ldr	r3, [r7, #20]
 80121be:	f383 8810 	msr	PRIMASK, r3
}
 80121c2:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 80121c4:	2300      	movs	r3, #0
}
 80121c6:	4618      	mov	r0, r3
 80121c8:	3724      	adds	r7, #36	; 0x24
 80121ca:	46bd      	mov	sp, r7
 80121cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121d0:	4770      	bx	lr
	...

080121d4 <_tx_timer_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_timer_create(TX_TIMER *timer_ptr, CHAR *name_ptr, 
            VOID (*expiration_function)(ULONG id), ULONG expiration_input,
            ULONG initial_ticks, ULONG reschedule_ticks, UINT auto_activate)
{
 80121d4:	b580      	push	{r7, lr}
 80121d6:	b08a      	sub	sp, #40	; 0x28
 80121d8:	af00      	add	r7, sp, #0
 80121da:	60f8      	str	r0, [r7, #12]
 80121dc:	60b9      	str	r1, [r7, #8]
 80121de:	607a      	str	r2, [r7, #4]
 80121e0:	603b      	str	r3, [r7, #0]
TX_TIMER        *next_timer;
TX_TIMER        *previous_timer;


    /* Initialize timer control block to all zeros.  */
    TX_MEMSET(timer_ptr, 0, (sizeof(TX_TIMER)));
 80121e2:	222c      	movs	r2, #44	; 0x2c
 80121e4:	2100      	movs	r1, #0
 80121e6:	68f8      	ldr	r0, [r7, #12]
 80121e8:	f011 fd1f 	bl	8023c2a <memset>

    /* Setup the basic timer fields.  */
    timer_ptr -> tx_timer_name =                                            name_ptr;
 80121ec:	68fb      	ldr	r3, [r7, #12]
 80121ee:	68ba      	ldr	r2, [r7, #8]
 80121f0:	605a      	str	r2, [r3, #4]
    timer_ptr -> tx_timer_internal.tx_timer_internal_remaining_ticks =      initial_ticks;
 80121f2:	68fb      	ldr	r3, [r7, #12]
 80121f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80121f6:	609a      	str	r2, [r3, #8]
    timer_ptr -> tx_timer_internal.tx_timer_internal_re_initialize_ticks =  reschedule_ticks;
 80121f8:	68fb      	ldr	r3, [r7, #12]
 80121fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80121fc:	60da      	str	r2, [r3, #12]
    timer_ptr -> tx_timer_internal.tx_timer_internal_timeout_function =     expiration_function;
 80121fe:	68fb      	ldr	r3, [r7, #12]
 8012200:	687a      	ldr	r2, [r7, #4]
 8012202:	611a      	str	r2, [r3, #16]
    timer_ptr -> tx_timer_internal.tx_timer_internal_timeout_param =        expiration_input;
 8012204:	68fb      	ldr	r3, [r7, #12]
 8012206:	683a      	ldr	r2, [r7, #0]
 8012208:	615a      	str	r2, [r3, #20]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 801220a:	f3ef 8310 	mrs	r3, PRIMASK
 801220e:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8012210:	b672      	cpsid	i
    return(primask_value);
 8012212:	69bb      	ldr	r3, [r7, #24]
    
    /* Disable interrupts to put the timer on the created list.  */
    TX_DISABLE
 8012214:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the timer ID to make it valid.  */
    timer_ptr -> tx_timer_id =  TX_TIMER_ID;
 8012216:	68fb      	ldr	r3, [r7, #12]
 8012218:	4a1c      	ldr	r2, [pc, #112]	; (801228c <_tx_timer_create+0xb8>)
 801221a:	601a      	str	r2, [r3, #0]

    /* Place the timer on the list of created application timers.  First,
       check for an empty list.  */
    if (_tx_timer_created_count == TX_EMPTY)
 801221c:	4b1c      	ldr	r3, [pc, #112]	; (8012290 <_tx_timer_create+0xbc>)
 801221e:	681b      	ldr	r3, [r3, #0]
 8012220:	2b00      	cmp	r3, #0
 8012222:	d109      	bne.n	8012238 <_tx_timer_create+0x64>
    {

        /* The created timer list is empty.  Add timer to empty list.  */
        _tx_timer_created_ptr =                   timer_ptr;
 8012224:	4a1b      	ldr	r2, [pc, #108]	; (8012294 <_tx_timer_create+0xc0>)
 8012226:	68fb      	ldr	r3, [r7, #12]
 8012228:	6013      	str	r3, [r2, #0]
        timer_ptr -> tx_timer_created_next =      timer_ptr;
 801222a:	68fb      	ldr	r3, [r7, #12]
 801222c:	68fa      	ldr	r2, [r7, #12]
 801222e:	625a      	str	r2, [r3, #36]	; 0x24
        timer_ptr -> tx_timer_created_previous =  timer_ptr;
 8012230:	68fb      	ldr	r3, [r7, #12]
 8012232:	68fa      	ldr	r2, [r7, #12]
 8012234:	629a      	str	r2, [r3, #40]	; 0x28
 8012236:	e011      	b.n	801225c <_tx_timer_create+0x88>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_timer =  _tx_timer_created_ptr;
 8012238:	4b16      	ldr	r3, [pc, #88]	; (8012294 <_tx_timer_create+0xc0>)
 801223a:	681b      	ldr	r3, [r3, #0]
 801223c:	623b      	str	r3, [r7, #32]
        previous_timer =  next_timer -> tx_timer_created_previous;
 801223e:	6a3b      	ldr	r3, [r7, #32]
 8012240:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012242:	61fb      	str	r3, [r7, #28]

        /* Place the new timer in the list.  */
        next_timer -> tx_timer_created_previous =  timer_ptr;
 8012244:	6a3b      	ldr	r3, [r7, #32]
 8012246:	68fa      	ldr	r2, [r7, #12]
 8012248:	629a      	str	r2, [r3, #40]	; 0x28
        previous_timer -> tx_timer_created_next =    timer_ptr;
 801224a:	69fb      	ldr	r3, [r7, #28]
 801224c:	68fa      	ldr	r2, [r7, #12]
 801224e:	625a      	str	r2, [r3, #36]	; 0x24

        /* Setup this timer's created links.  */
        timer_ptr -> tx_timer_created_previous =  previous_timer;
 8012250:	68fb      	ldr	r3, [r7, #12]
 8012252:	69fa      	ldr	r2, [r7, #28]
 8012254:	629a      	str	r2, [r3, #40]	; 0x28
        timer_ptr -> tx_timer_created_next =      next_timer;
 8012256:	68fb      	ldr	r3, [r7, #12]
 8012258:	6a3a      	ldr	r2, [r7, #32]
 801225a:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Increment the number of created timers.  */
    _tx_timer_created_count++;
 801225c:	4b0c      	ldr	r3, [pc, #48]	; (8012290 <_tx_timer_create+0xbc>)
 801225e:	681b      	ldr	r3, [r3, #0]
 8012260:	3301      	adds	r3, #1
 8012262:	4a0b      	ldr	r2, [pc, #44]	; (8012290 <_tx_timer_create+0xbc>)
 8012264:	6013      	str	r3, [r2, #0]

    /* Log this kernel call.  */
    TX_EL_TIMER_CREATE_INSERT

    /* Determine if this timer needs to be activated.  */
    if (auto_activate == TX_AUTO_ACTIVATE)
 8012266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012268:	2b01      	cmp	r3, #1
 801226a:	d104      	bne.n	8012276 <_tx_timer_create+0xa2>
        /* Increment the number of activations on this timer.  */
        timer_ptr -> tx_timer_performance_activate_count++;
#endif

        /* Call actual activation function.  */
        _tx_timer_system_activate(&(timer_ptr -> tx_timer_internal));
 801226c:	68fb      	ldr	r3, [r7, #12]
 801226e:	3308      	adds	r3, #8
 8012270:	4618      	mov	r0, r3
 8012272:	f000 f955 	bl	8012520 <_tx_timer_system_activate>
 8012276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012278:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801227a:	697b      	ldr	r3, [r7, #20]
 801227c:	f383 8810 	msr	PRIMASK, r3
}
 8012280:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8012282:	2300      	movs	r3, #0
}
 8012284:	4618      	mov	r0, r3
 8012286:	3728      	adds	r7, #40	; 0x28
 8012288:	46bd      	mov	sp, r7
 801228a:	bd80      	pop	{r7, pc}
 801228c:	4154494d 	.word	0x4154494d
 8012290:	200261a4 	.word	0x200261a4
 8012294:	200261a0 	.word	0x200261a0

08012298 <_tx_timer_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_timer_deactivate(TX_TIMER *timer_ptr)
{
 8012298:	b480      	push	{r7}
 801229a:	b08d      	sub	sp, #52	; 0x34
 801229c:	af00      	add	r7, sp, #0
 801229e:	6078      	str	r0, [r7, #4]
ULONG               ticks_left;
UINT                active_timer_list;

    
    /* Setup internal timer pointer.  */
    internal_ptr =  &(timer_ptr -> tx_timer_internal);
 80122a0:	687b      	ldr	r3, [r7, #4]
 80122a2:	3308      	adds	r3, #8
 80122a4:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80122a6:	f3ef 8310 	mrs	r3, PRIMASK
 80122aa:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" CPSID i" : : : "memory" );
 80122ac:	b672      	cpsid	i
    return(primask_value);
 80122ae:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts while the remaining time before expiration is
       calculated.  */
    TX_DISABLE
 80122b0:	623b      	str	r3, [r7, #32]

    /* Log this kernel call.  */
    TX_EL_TIMER_DEACTIVATE_INSERT

    /* Pickup the list head.  */
    list_head =  internal_ptr -> tx_timer_internal_list_head;
 80122b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122b4:	699b      	ldr	r3, [r3, #24]
 80122b6:	61fb      	str	r3, [r7, #28]

    /* Is the timer active?  */
    if (list_head != TX_NULL)
 80122b8:	69fb      	ldr	r3, [r7, #28]
 80122ba:	2b00      	cmp	r3, #0
 80122bc:	d07f      	beq.n	80123be <_tx_timer_deactivate+0x126>
    {

        /* Default the active timer list flag to false.  */
        active_timer_list =  TX_FALSE;
 80122be:	2300      	movs	r3, #0
 80122c0:	62bb      	str	r3, [r7, #40]	; 0x28

        /* Determine if the head pointer is within the timer expiration list.  */
        if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(list_head) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_start))
 80122c2:	4b45      	ldr	r3, [pc, #276]	; (80123d8 <_tx_timer_deactivate+0x140>)
 80122c4:	681b      	ldr	r3, [r3, #0]
 80122c6:	69fa      	ldr	r2, [r7, #28]
 80122c8:	429a      	cmp	r2, r3
 80122ca:	d306      	bcc.n	80122da <_tx_timer_deactivate+0x42>
        {

            /* Now check to make sure the list head is before the end of the list.  */
            if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(list_head) < TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 80122cc:	4b43      	ldr	r3, [pc, #268]	; (80123dc <_tx_timer_deactivate+0x144>)
 80122ce:	681b      	ldr	r3, [r3, #0]
 80122d0:	69fa      	ldr	r2, [r7, #28]
 80122d2:	429a      	cmp	r2, r3
 80122d4:	d201      	bcs.n	80122da <_tx_timer_deactivate+0x42>
            {

                /* Set the active timer list flag to true.  */
                active_timer_list =  TX_TRUE;
 80122d6:	2301      	movs	r3, #1
 80122d8:	62bb      	str	r3, [r7, #40]	; 0x28
            }
        }
        
        /* Determine if the timer is on active timer list.  */
        if (active_timer_list == TX_TRUE)
 80122da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122dc:	2b01      	cmp	r3, #1
 80122de:	d12e      	bne.n	801233e <_tx_timer_deactivate+0xa6>

            /* Calculate the amount of time that has elapsed since the timer
               was activated.  */

            /* Is this timer's entry after the current timer pointer?  */
            if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(list_head) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_current_ptr))
 80122e0:	4b3f      	ldr	r3, [pc, #252]	; (80123e0 <_tx_timer_deactivate+0x148>)
 80122e2:	681b      	ldr	r3, [r3, #0]
 80122e4:	69fa      	ldr	r2, [r7, #28]
 80122e6:	429a      	cmp	r2, r3
 80122e8:	d307      	bcc.n	80122fa <_tx_timer_deactivate+0x62>
            {

                /* Calculate ticks left to expiration - just the difference between this 
                   timer's entry and the current timer pointer.  */
                ticks_left =  (ULONG) (TX_TIMER_POINTER_DIF(list_head,_tx_timer_current_ptr)) + ((ULONG) 1);
 80122ea:	4b3d      	ldr	r3, [pc, #244]	; (80123e0 <_tx_timer_deactivate+0x148>)
 80122ec:	681b      	ldr	r3, [r3, #0]
 80122ee:	69fa      	ldr	r2, [r7, #28]
 80122f0:	1ad3      	subs	r3, r2, r3
 80122f2:	109b      	asrs	r3, r3, #2
 80122f4:	3301      	adds	r3, #1
 80122f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80122f8:	e010      	b.n	801231c <_tx_timer_deactivate+0x84>
            }
            else
            {

                /* Calculate the ticks left with a wrapped list condition.  */
                ticks_left =  (ULONG) (TX_TIMER_POINTER_DIF(list_head,_tx_timer_list_start));
 80122fa:	4b37      	ldr	r3, [pc, #220]	; (80123d8 <_tx_timer_deactivate+0x140>)
 80122fc:	681b      	ldr	r3, [r3, #0]
 80122fe:	69fa      	ldr	r2, [r7, #28]
 8012300:	1ad3      	subs	r3, r2, r3
 8012302:	109b      	asrs	r3, r3, #2
 8012304:	62fb      	str	r3, [r7, #44]	; 0x2c
    
                ticks_left =  ticks_left + (ULONG) ((TX_TIMER_POINTER_DIF(_tx_timer_list_end, _tx_timer_current_ptr)) + ((ULONG) 1));
 8012306:	4b35      	ldr	r3, [pc, #212]	; (80123dc <_tx_timer_deactivate+0x144>)
 8012308:	681a      	ldr	r2, [r3, #0]
 801230a:	4b35      	ldr	r3, [pc, #212]	; (80123e0 <_tx_timer_deactivate+0x148>)
 801230c:	681b      	ldr	r3, [r3, #0]
 801230e:	1ad3      	subs	r3, r2, r3
 8012310:	109b      	asrs	r3, r3, #2
 8012312:	461a      	mov	r2, r3
 8012314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012316:	4413      	add	r3, r2
 8012318:	3301      	adds	r3, #1
 801231a:	62fb      	str	r3, [r7, #44]	; 0x2c
            }

            /* Adjust the remaining ticks accordingly.  */
            if (internal_ptr -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 801231c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801231e:	681b      	ldr	r3, [r3, #0]
 8012320:	2b20      	cmp	r3, #32
 8012322:	d908      	bls.n	8012336 <_tx_timer_deactivate+0x9e>
            {
            
                /* Subtract off the last full pass through the timer list and add the
                   time left.  */
                internal_ptr -> tx_timer_internal_remaining_ticks =  
                        (internal_ptr -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES) + ticks_left;
 8012324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012326:	681a      	ldr	r2, [r3, #0]
 8012328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801232a:	4413      	add	r3, r2
 801232c:	f1a3 0220 	sub.w	r2, r3, #32
                internal_ptr -> tx_timer_internal_remaining_ticks =  
 8012330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012332:	601a      	str	r2, [r3, #0]
 8012334:	e01c      	b.n	8012370 <_tx_timer_deactivate+0xd8>
            }
            else
            {
    
                /* Just put the ticks left into the timer's remaining ticks.  */
                internal_ptr -> tx_timer_internal_remaining_ticks =  ticks_left;
 8012336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012338:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801233a:	601a      	str	r2, [r3, #0]
 801233c:	e018      	b.n	8012370 <_tx_timer_deactivate+0xd8>
        }
        else
        {
        
            /* Determine if this is timer has just expired.  */
            if (_tx_timer_expired_timer_ptr != internal_ptr)
 801233e:	4b29      	ldr	r3, [pc, #164]	; (80123e4 <_tx_timer_deactivate+0x14c>)
 8012340:	681b      	ldr	r3, [r3, #0]
 8012342:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012344:	429a      	cmp	r2, r3
 8012346:	d00f      	beq.n	8012368 <_tx_timer_deactivate+0xd0>
            {
            
                /* No, it hasn't expired. Now check for remaining time greater than the list
                   size.  */
                if (internal_ptr -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 8012348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801234a:	681b      	ldr	r3, [r3, #0]
 801234c:	2b20      	cmp	r3, #32
 801234e:	d906      	bls.n	801235e <_tx_timer_deactivate+0xc6>
                {
                    
                    /* Adjust the remaining ticks.  */
                    internal_ptr -> tx_timer_internal_remaining_ticks =  
                                            internal_ptr -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 8012350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012352:	681b      	ldr	r3, [r3, #0]
 8012354:	f1a3 0220 	sub.w	r2, r3, #32
                    internal_ptr -> tx_timer_internal_remaining_ticks =  
 8012358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801235a:	601a      	str	r2, [r3, #0]
 801235c:	e008      	b.n	8012370 <_tx_timer_deactivate+0xd8>
                }
                else
                {
                
                    /* Set the remaining time to the reactivation time.  */
                    internal_ptr -> tx_timer_internal_remaining_ticks =  internal_ptr -> tx_timer_internal_re_initialize_ticks;
 801235e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012360:	685a      	ldr	r2, [r3, #4]
 8012362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012364:	601a      	str	r2, [r3, #0]
 8012366:	e003      	b.n	8012370 <_tx_timer_deactivate+0xd8>
            }
            else
            {
            
                /* Set the remaining time to the reactivation time.  */
                internal_ptr -> tx_timer_internal_remaining_ticks =  internal_ptr -> tx_timer_internal_re_initialize_ticks;
 8012368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801236a:	685a      	ldr	r2, [r3, #4]
 801236c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801236e:	601a      	str	r2, [r3, #0]
            }
        }
    
        /* Pickup the next timer.  */
        next_timer =  internal_ptr -> tx_timer_internal_active_next;
 8012370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012372:	691b      	ldr	r3, [r3, #16]
 8012374:	61bb      	str	r3, [r7, #24]

        /* See if this is the only timer in the list.  */
        if (internal_ptr == next_timer)
 8012376:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012378:	69bb      	ldr	r3, [r7, #24]
 801237a:	429a      	cmp	r2, r3
 801237c:	d108      	bne.n	8012390 <_tx_timer_deactivate+0xf8>
        {

            /* Yes, the only timer on the list.  */

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == internal_ptr)
 801237e:	69fb      	ldr	r3, [r7, #28]
 8012380:	681b      	ldr	r3, [r3, #0]
 8012382:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012384:	429a      	cmp	r2, r3
 8012386:	d117      	bne.n	80123b8 <_tx_timer_deactivate+0x120>
            {

                /* Update the head pointer.  */
                *(list_head) =  TX_NULL;
 8012388:	69fb      	ldr	r3, [r7, #28]
 801238a:	2200      	movs	r2, #0
 801238c:	601a      	str	r2, [r3, #0]
 801238e:	e013      	b.n	80123b8 <_tx_timer_deactivate+0x120>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   internal_ptr -> tx_timer_internal_active_previous;
 8012390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012392:	695b      	ldr	r3, [r3, #20]
 8012394:	617b      	str	r3, [r7, #20]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 8012396:	69bb      	ldr	r3, [r7, #24]
 8012398:	697a      	ldr	r2, [r7, #20]
 801239a:	615a      	str	r2, [r3, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 801239c:	697b      	ldr	r3, [r7, #20]
 801239e:	69ba      	ldr	r2, [r7, #24]
 80123a0:	611a      	str	r2, [r3, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == internal_ptr)
 80123a2:	69fb      	ldr	r3, [r7, #28]
 80123a4:	681b      	ldr	r3, [r3, #0]
 80123a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80123a8:	429a      	cmp	r2, r3
 80123aa:	d105      	bne.n	80123b8 <_tx_timer_deactivate+0x120>
            {

                /* Update the next timer in the list with the list head 
                   pointer.  */
                next_timer -> tx_timer_internal_list_head =  list_head;
 80123ac:	69bb      	ldr	r3, [r7, #24]
 80123ae:	69fa      	ldr	r2, [r7, #28]
 80123b0:	619a      	str	r2, [r3, #24]

                /* Update the head pointer.  */
                *(list_head) =  next_timer;
 80123b2:	69fb      	ldr	r3, [r7, #28]
 80123b4:	69ba      	ldr	r2, [r7, #24]
 80123b6:	601a      	str	r2, [r3, #0]
            }
        }

        /* Clear the timer's list head pointer.  */
        internal_ptr -> tx_timer_internal_list_head =  TX_NULL;
 80123b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123ba:	2200      	movs	r2, #0
 80123bc:	619a      	str	r2, [r3, #24]
 80123be:	6a3b      	ldr	r3, [r7, #32]
 80123c0:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80123c2:	68fb      	ldr	r3, [r7, #12]
 80123c4:	f383 8810 	msr	PRIMASK, r3
}
 80123c8:	bf00      	nop

    /* Restore interrupts to previous posture.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 80123ca:	2300      	movs	r3, #0
}
 80123cc:	4618      	mov	r0, r3
 80123ce:	3734      	adds	r7, #52	; 0x34
 80123d0:	46bd      	mov	sp, r7
 80123d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123d6:	4770      	bx	lr
 80123d8:	20026190 	.word	0x20026190
 80123dc:	20026194 	.word	0x20026194
 80123e0:	20026198 	.word	0x20026198
 80123e4:	200261a8 	.word	0x200261a8

080123e8 <_tx_timer_expiration_process>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_expiration_process(VOID)
{
 80123e8:	b580      	push	{r7, lr}
 80123ea:	b084      	sub	sp, #16
 80123ec:	af00      	add	r7, sp, #0
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80123ee:	f3ef 8310 	mrs	r3, PRIMASK
 80123f2:	607b      	str	r3, [r7, #4]
    __asm__ volatile (" CPSID i" : : : "memory" );
 80123f4:	b672      	cpsid	i
    return(primask_value);
 80123f6:	687b      	ldr	r3, [r7, #4]

    /* Don't process in the ISR, wakeup the system timer thread to process the 
       timer expiration.  */

    /* Disable interrupts.  */
    TX_DISABLE
 80123f8:	60fb      	str	r3, [r7, #12]
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Increment the preempt disable flag.  */
    _tx_thread_preempt_disable++;
 80123fa:	4b09      	ldr	r3, [pc, #36]	; (8012420 <_tx_timer_expiration_process+0x38>)
 80123fc:	681b      	ldr	r3, [r3, #0]
 80123fe:	3301      	adds	r3, #1
 8012400:	4a07      	ldr	r2, [pc, #28]	; (8012420 <_tx_timer_expiration_process+0x38>)
 8012402:	6013      	str	r3, [r2, #0]
 8012404:	68fb      	ldr	r3, [r7, #12]
 8012406:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8012408:	68bb      	ldr	r3, [r7, #8]
 801240a:	f383 8810 	msr	PRIMASK, r3
}
 801240e:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Call the system resume function to activate the timer thread.  */
    _tx_thread_system_resume(&_tx_timer_thread);
 8012410:	4804      	ldr	r0, [pc, #16]	; (8012424 <_tx_timer_expiration_process+0x3c>)
 8012412:	f7ff fbeb 	bl	8011bec <_tx_thread_system_resume>
    }
    
    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8012416:	bf00      	nop
 8012418:	3710      	adds	r7, #16
 801241a:	46bd      	mov	sp, r7
 801241c:	bd80      	pop	{r7, pc}
 801241e:	bf00      	nop
 8012420:	200260fc 	.word	0x200260fc
 8012424:	200261ac 	.word	0x200261ac

08012428 <_tx_timer_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_initialize(VOID)
{
 8012428:	b590      	push	{r4, r7, lr}
 801242a:	b089      	sub	sp, #36	; 0x24
 801242c:	af06      	add	r7, sp, #24
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the system clock to 0.  */
    _tx_timer_system_clock =  ((ULONG) 0);
 801242e:	4b28      	ldr	r3, [pc, #160]	; (80124d0 <_tx_timer_initialize+0xa8>)
 8012430:	2200      	movs	r2, #0
 8012432:	601a      	str	r2, [r3, #0]

    /* Initialize the time-slice value to 0 to make sure it is disabled.  */
    _tx_timer_time_slice =  ((ULONG) 0);
 8012434:	4b27      	ldr	r3, [pc, #156]	; (80124d4 <_tx_timer_initialize+0xac>)
 8012436:	2200      	movs	r2, #0
 8012438:	601a      	str	r2, [r3, #0]

    /* Clear the expired flags.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 801243a:	4b27      	ldr	r3, [pc, #156]	; (80124d8 <_tx_timer_initialize+0xb0>)
 801243c:	2200      	movs	r2, #0
 801243e:	601a      	str	r2, [r3, #0]
    _tx_timer_expired =             TX_FALSE;
 8012440:	4b26      	ldr	r3, [pc, #152]	; (80124dc <_tx_timer_initialize+0xb4>)
 8012442:	2200      	movs	r2, #0
 8012444:	601a      	str	r2, [r3, #0]

    /* Set the currently expired timer being processed pointer to NULL.  */
    _tx_timer_expired_timer_ptr =  TX_NULL;
 8012446:	4b26      	ldr	r3, [pc, #152]	; (80124e0 <_tx_timer_initialize+0xb8>)
 8012448:	2200      	movs	r2, #0
 801244a:	601a      	str	r2, [r3, #0]

    /* Initialize the thread and application timer management control structures.  */

    /* First, initialize the timer list.  */
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 801244c:	2280      	movs	r2, #128	; 0x80
 801244e:	2100      	movs	r1, #0
 8012450:	4824      	ldr	r0, [pc, #144]	; (80124e4 <_tx_timer_initialize+0xbc>)
 8012452:	f011 fbea 	bl	8023c2a <memset>
#endif

    /* Initialize all of the list pointers.  */
    _tx_timer_list_start =   &_tx_timer_list[0];
 8012456:	4b24      	ldr	r3, [pc, #144]	; (80124e8 <_tx_timer_initialize+0xc0>)
 8012458:	4a22      	ldr	r2, [pc, #136]	; (80124e4 <_tx_timer_initialize+0xbc>)
 801245a:	601a      	str	r2, [r3, #0]
    _tx_timer_current_ptr =  &_tx_timer_list[0];
 801245c:	4b23      	ldr	r3, [pc, #140]	; (80124ec <_tx_timer_initialize+0xc4>)
 801245e:	4a21      	ldr	r2, [pc, #132]	; (80124e4 <_tx_timer_initialize+0xbc>)
 8012460:	601a      	str	r2, [r3, #0]

    /* Set the timer list end pointer to one past the actual timer list.  This is done
       to make the timer interrupt handling in assembly language a little easier.  */
    _tx_timer_list_end =     &_tx_timer_list[TX_TIMER_ENTRIES-((ULONG) 1)];
 8012462:	4b23      	ldr	r3, [pc, #140]	; (80124f0 <_tx_timer_initialize+0xc8>)
 8012464:	4a23      	ldr	r2, [pc, #140]	; (80124f4 <_tx_timer_initialize+0xcc>)
 8012466:	601a      	str	r2, [r3, #0]
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 8012468:	4b21      	ldr	r3, [pc, #132]	; (80124f0 <_tx_timer_initialize+0xc8>)
 801246a:	681b      	ldr	r3, [r3, #0]
 801246c:	3304      	adds	r3, #4
 801246e:	4a20      	ldr	r2, [pc, #128]	; (80124f0 <_tx_timer_initialize+0xc8>)
 8012470:	6013      	str	r3, [r2, #0]

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Setup the variables associated with the system timer thread's stack and 
       priority.  */
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 8012472:	4b21      	ldr	r3, [pc, #132]	; (80124f8 <_tx_timer_initialize+0xd0>)
 8012474:	4a21      	ldr	r2, [pc, #132]	; (80124fc <_tx_timer_initialize+0xd4>)
 8012476:	601a      	str	r2, [r3, #0]
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 8012478:	4b21      	ldr	r3, [pc, #132]	; (8012500 <_tx_timer_initialize+0xd8>)
 801247a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801247e:	601a      	str	r2, [r3, #0]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 8012480:	4b20      	ldr	r3, [pc, #128]	; (8012504 <_tx_timer_initialize+0xdc>)
 8012482:	2200      	movs	r2, #0
 8012484:	601a      	str	r2, [r3, #0]
       low-level initialization component.  */
    do
    {
      
        /* Create the system timer thread.  */
        status =  _tx_thread_create(&_tx_timer_thread, 
 8012486:	4b1c      	ldr	r3, [pc, #112]	; (80124f8 <_tx_timer_initialize+0xd0>)
 8012488:	681b      	ldr	r3, [r3, #0]
 801248a:	4a1d      	ldr	r2, [pc, #116]	; (8012500 <_tx_timer_initialize+0xd8>)
 801248c:	6812      	ldr	r2, [r2, #0]
 801248e:	491d      	ldr	r1, [pc, #116]	; (8012504 <_tx_timer_initialize+0xdc>)
 8012490:	6809      	ldr	r1, [r1, #0]
 8012492:	481c      	ldr	r0, [pc, #112]	; (8012504 <_tx_timer_initialize+0xdc>)
 8012494:	6800      	ldr	r0, [r0, #0]
 8012496:	2400      	movs	r4, #0
 8012498:	9405      	str	r4, [sp, #20]
 801249a:	2400      	movs	r4, #0
 801249c:	9404      	str	r4, [sp, #16]
 801249e:	9003      	str	r0, [sp, #12]
 80124a0:	9102      	str	r1, [sp, #8]
 80124a2:	9201      	str	r2, [sp, #4]
 80124a4:	9300      	str	r3, [sp, #0]
 80124a6:	4b18      	ldr	r3, [pc, #96]	; (8012508 <_tx_timer_initialize+0xe0>)
 80124a8:	4a18      	ldr	r2, [pc, #96]	; (801250c <_tx_timer_initialize+0xe4>)
 80124aa:	4919      	ldr	r1, [pc, #100]	; (8012510 <_tx_timer_initialize+0xe8>)
 80124ac:	4819      	ldr	r0, [pc, #100]	; (8012514 <_tx_timer_initialize+0xec>)
 80124ae:	f7fe fff9 	bl	80114a4 <_tx_thread_create>
 80124b2:	6078      	str	r0, [r7, #4]
#endif

        /* Define timer initialize extension.  */
        TX_TIMER_INITIALIZE_EXTENSION(status)
        
    } while (status != TX_SUCCESS);
 80124b4:	687b      	ldr	r3, [r7, #4]
 80124b6:	2b00      	cmp	r3, #0
 80124b8:	d1e5      	bne.n	8012486 <_tx_timer_initialize+0x5e>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the head pointer of the created application timer list.  */
    _tx_timer_created_ptr =  TX_NULL;
 80124ba:	4b17      	ldr	r3, [pc, #92]	; (8012518 <_tx_timer_initialize+0xf0>)
 80124bc:	2200      	movs	r2, #0
 80124be:	601a      	str	r2, [r3, #0]

    /* Set the created count to zero.  */
    _tx_timer_created_count =  TX_EMPTY;
 80124c0:	4b16      	ldr	r3, [pc, #88]	; (801251c <_tx_timer_initialize+0xf4>)
 80124c2:	2200      	movs	r2, #0
 80124c4:	601a      	str	r2, [r3, #0]
    _tx_timer_performance_expiration_count =         ((ULONG) 0);
    _tx_timer_performance__expiration_adjust_count =  ((ULONG) 0);
#endif
#endif
#endif
}
 80124c6:	bf00      	nop
 80124c8:	370c      	adds	r7, #12
 80124ca:	46bd      	mov	sp, r7
 80124cc:	bd90      	pop	{r4, r7, pc}
 80124ce:	bf00      	nop
 80124d0:	20026108 	.word	0x20026108
 80124d4:	20026668 	.word	0x20026668
 80124d8:	2002610c 	.word	0x2002610c
 80124dc:	2002619c 	.word	0x2002619c
 80124e0:	200261a8 	.word	0x200261a8
 80124e4:	20026110 	.word	0x20026110
 80124e8:	20026190 	.word	0x20026190
 80124ec:	20026198 	.word	0x20026198
 80124f0:	20026194 	.word	0x20026194
 80124f4:	2002618c 	.word	0x2002618c
 80124f8:	2002625c 	.word	0x2002625c
 80124fc:	20026268 	.word	0x20026268
 8012500:	20026260 	.word	0x20026260
 8012504:	20026264 	.word	0x20026264
 8012508:	4154494d 	.word	0x4154494d
 801250c:	08012655 	.word	0x08012655
 8012510:	080264b8 	.word	0x080264b8
 8012514:	200261ac 	.word	0x200261ac
 8012518:	200261a0 	.word	0x200261a0
 801251c:	200261a4 	.word	0x200261a4

08012520 <_tx_timer_system_activate>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_activate(TX_TIMER_INTERNAL *timer_ptr)
{
 8012520:	b480      	push	{r7}
 8012522:	b089      	sub	sp, #36	; 0x24
 8012524:	af00      	add	r7, sp, #0
 8012526:	6078      	str	r0, [r7, #4]
ULONG                       remaining_ticks;
ULONG                       expiration_time;


    /* Pickup the remaining ticks.  */
    remaining_ticks =  timer_ptr -> tx_timer_internal_remaining_ticks;
 8012528:	687b      	ldr	r3, [r7, #4]
 801252a:	681b      	ldr	r3, [r3, #0]
 801252c:	617b      	str	r3, [r7, #20]

    /* Determine if there is a timer to activate.  */
    if (remaining_ticks != ((ULONG) 0))
 801252e:	697b      	ldr	r3, [r7, #20]
 8012530:	2b00      	cmp	r3, #0
 8012532:	d04a      	beq.n	80125ca <_tx_timer_system_activate+0xaa>
    {
    
        /* Determine if the timer is set to wait forever.  */
        if (remaining_ticks != TX_WAIT_FOREVER)
 8012534:	697b      	ldr	r3, [r7, #20]
 8012536:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801253a:	d046      	beq.n	80125ca <_tx_timer_system_activate+0xaa>
        {
    
            /* Valid timer activate request.  */

            /* Determine if the timer still needs activation.  */
            if (timer_ptr -> tx_timer_internal_list_head == TX_NULL)
 801253c:	687b      	ldr	r3, [r7, #4]
 801253e:	699b      	ldr	r3, [r3, #24]
 8012540:	2b00      	cmp	r3, #0
 8012542:	d142      	bne.n	80125ca <_tx_timer_system_activate+0xaa>
            {

                /* Activate the timer.  */

                /* Calculate the amount of time remaining for the timer.  */
                if (remaining_ticks > TX_TIMER_ENTRIES)
 8012544:	697b      	ldr	r3, [r7, #20]
 8012546:	2b20      	cmp	r3, #32
 8012548:	d902      	bls.n	8012550 <_tx_timer_system_activate+0x30>
                {

                    /* Set expiration time to the maximum number of entries.  */
                    expiration_time =  TX_TIMER_ENTRIES - ((ULONG) 1);
 801254a:	231f      	movs	r3, #31
 801254c:	61bb      	str	r3, [r7, #24]
 801254e:	e002      	b.n	8012556 <_tx_timer_system_activate+0x36>
                {

                    /* Timer value fits in the timer entries.  */

                    /* Set the expiration time.  */
                    expiration_time =  (remaining_ticks - ((ULONG) 1));
 8012550:	697b      	ldr	r3, [r7, #20]
 8012552:	3b01      	subs	r3, #1
 8012554:	61bb      	str	r3, [r7, #24]

                /* At this point, we are ready to put the timer on one of
                   the timer lists.  */
    
                /* Calculate the proper place for the timer.  */
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 8012556:	4b20      	ldr	r3, [pc, #128]	; (80125d8 <_tx_timer_system_activate+0xb8>)
 8012558:	681a      	ldr	r2, [r3, #0]
 801255a:	69bb      	ldr	r3, [r7, #24]
 801255c:	009b      	lsls	r3, r3, #2
 801255e:	4413      	add	r3, r2
 8012560:	61fb      	str	r3, [r7, #28]
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 8012562:	4b1e      	ldr	r3, [pc, #120]	; (80125dc <_tx_timer_system_activate+0xbc>)
 8012564:	681b      	ldr	r3, [r3, #0]
 8012566:	69fa      	ldr	r2, [r7, #28]
 8012568:	429a      	cmp	r2, r3
 801256a:	d30b      	bcc.n	8012584 <_tx_timer_system_activate+0x64>
                {

                    /* Wrap from the beginning of the list.  */
                    delta =  TX_TIMER_POINTER_DIF(timer_list, _tx_timer_list_end);
 801256c:	4b1b      	ldr	r3, [pc, #108]	; (80125dc <_tx_timer_system_activate+0xbc>)
 801256e:	681b      	ldr	r3, [r3, #0]
 8012570:	69fa      	ldr	r2, [r7, #28]
 8012572:	1ad3      	subs	r3, r2, r3
 8012574:	109b      	asrs	r3, r3, #2
 8012576:	613b      	str	r3, [r7, #16]
                    timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_list_start, delta);
 8012578:	4b19      	ldr	r3, [pc, #100]	; (80125e0 <_tx_timer_system_activate+0xc0>)
 801257a:	681a      	ldr	r2, [r3, #0]
 801257c:	693b      	ldr	r3, [r7, #16]
 801257e:	009b      	lsls	r3, r3, #2
 8012580:	4413      	add	r3, r2
 8012582:	61fb      	str	r3, [r7, #28]
                }
    
                /* Now put the timer on this list.  */
                if ((*timer_list) == TX_NULL)
 8012584:	69fb      	ldr	r3, [r7, #28]
 8012586:	681b      	ldr	r3, [r3, #0]
 8012588:	2b00      	cmp	r3, #0
 801258a:	d109      	bne.n	80125a0 <_tx_timer_system_activate+0x80>
                {
                
                    /* This list is NULL, just put the new timer on it.  */

                    /* Setup the links in this timer.  */
                    timer_ptr -> tx_timer_internal_active_next =      timer_ptr;
 801258c:	687b      	ldr	r3, [r7, #4]
 801258e:	687a      	ldr	r2, [r7, #4]
 8012590:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =  timer_ptr;
 8012592:	687b      	ldr	r3, [r7, #4]
 8012594:	687a      	ldr	r2, [r7, #4]
 8012596:	615a      	str	r2, [r3, #20]

                    /* Setup the list head pointer.  */
                    *timer_list =  timer_ptr;
 8012598:	69fb      	ldr	r3, [r7, #28]
 801259a:	687a      	ldr	r2, [r7, #4]
 801259c:	601a      	str	r2, [r3, #0]
 801259e:	e011      	b.n	80125c4 <_tx_timer_system_activate+0xa4>
                }
                else
                {

                    /* This list is not NULL, add current timer to the end. */
                    next_timer =                                        *timer_list;
 80125a0:	69fb      	ldr	r3, [r7, #28]
 80125a2:	681b      	ldr	r3, [r3, #0]
 80125a4:	60fb      	str	r3, [r7, #12]
                    previous_timer =                                    next_timer -> tx_timer_internal_active_previous;
 80125a6:	68fb      	ldr	r3, [r7, #12]
 80125a8:	695b      	ldr	r3, [r3, #20]
 80125aa:	60bb      	str	r3, [r7, #8]
                    previous_timer -> tx_timer_internal_active_next =   timer_ptr;
 80125ac:	68bb      	ldr	r3, [r7, #8]
 80125ae:	687a      	ldr	r2, [r7, #4]
 80125b0:	611a      	str	r2, [r3, #16]
                    next_timer -> tx_timer_internal_active_previous =   timer_ptr;
 80125b2:	68fb      	ldr	r3, [r7, #12]
 80125b4:	687a      	ldr	r2, [r7, #4]
 80125b6:	615a      	str	r2, [r3, #20]
                    timer_ptr -> tx_timer_internal_active_next =        next_timer;
 80125b8:	687b      	ldr	r3, [r7, #4]
 80125ba:	68fa      	ldr	r2, [r7, #12]
 80125bc:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =    previous_timer;
 80125be:	687b      	ldr	r3, [r7, #4]
 80125c0:	68ba      	ldr	r2, [r7, #8]
 80125c2:	615a      	str	r2, [r3, #20]
                }

                /* Setup list head pointer.  */
                timer_ptr -> tx_timer_internal_list_head =  timer_list;
 80125c4:	687b      	ldr	r3, [r7, #4]
 80125c6:	69fa      	ldr	r2, [r7, #28]
 80125c8:	619a      	str	r2, [r3, #24]
            }
        }
    }
}
 80125ca:	bf00      	nop
 80125cc:	3724      	adds	r7, #36	; 0x24
 80125ce:	46bd      	mov	sp, r7
 80125d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125d4:	4770      	bx	lr
 80125d6:	bf00      	nop
 80125d8:	20026198 	.word	0x20026198
 80125dc:	20026194 	.word	0x20026194
 80125e0:	20026190 	.word	0x20026190

080125e4 <_tx_timer_system_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_deactivate(TX_TIMER_INTERNAL *timer_ptr)
{
 80125e4:	b480      	push	{r7}
 80125e6:	b087      	sub	sp, #28
 80125e8:	af00      	add	r7, sp, #0
 80125ea:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL   *next_timer;
TX_TIMER_INTERNAL   *previous_timer;


    /* Pickup the list head pointer.  */
    list_head =  timer_ptr -> tx_timer_internal_list_head;
 80125ec:	687b      	ldr	r3, [r7, #4]
 80125ee:	699b      	ldr	r3, [r3, #24]
 80125f0:	617b      	str	r3, [r7, #20]

    /* Determine if the timer still needs deactivation.  */
    if (list_head != TX_NULL)
 80125f2:	697b      	ldr	r3, [r7, #20]
 80125f4:	2b00      	cmp	r3, #0
 80125f6:	d026      	beq.n	8012646 <_tx_timer_system_deactivate+0x62>
    {

        /* Deactivate the timer.  */

        /* Pickup the next active timer.  */
        next_timer =  timer_ptr -> tx_timer_internal_active_next;
 80125f8:	687b      	ldr	r3, [r7, #4]
 80125fa:	691b      	ldr	r3, [r3, #16]
 80125fc:	613b      	str	r3, [r7, #16]

        /* See if this is the only timer in the list.  */
        if (timer_ptr == next_timer)
 80125fe:	687a      	ldr	r2, [r7, #4]
 8012600:	693b      	ldr	r3, [r7, #16]
 8012602:	429a      	cmp	r2, r3
 8012604:	d108      	bne.n	8012618 <_tx_timer_system_deactivate+0x34>
        {

            /* Yes, the only timer on the list.  */

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 8012606:	697b      	ldr	r3, [r7, #20]
 8012608:	681b      	ldr	r3, [r3, #0]
 801260a:	687a      	ldr	r2, [r7, #4]
 801260c:	429a      	cmp	r2, r3
 801260e:	d117      	bne.n	8012640 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the head pointer.  */
                *(list_head) =  TX_NULL;
 8012610:	697b      	ldr	r3, [r7, #20]
 8012612:	2200      	movs	r2, #0
 8012614:	601a      	str	r2, [r3, #0]
 8012616:	e013      	b.n	8012640 <_tx_timer_system_deactivate+0x5c>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   timer_ptr -> tx_timer_internal_active_previous;
 8012618:	687b      	ldr	r3, [r7, #4]
 801261a:	695b      	ldr	r3, [r3, #20]
 801261c:	60fb      	str	r3, [r7, #12]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 801261e:	693b      	ldr	r3, [r7, #16]
 8012620:	68fa      	ldr	r2, [r7, #12]
 8012622:	615a      	str	r2, [r3, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 8012624:	68fb      	ldr	r3, [r7, #12]
 8012626:	693a      	ldr	r2, [r7, #16]
 8012628:	611a      	str	r2, [r3, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 801262a:	697b      	ldr	r3, [r7, #20]
 801262c:	681b      	ldr	r3, [r3, #0]
 801262e:	687a      	ldr	r2, [r7, #4]
 8012630:	429a      	cmp	r2, r3
 8012632:	d105      	bne.n	8012640 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the next timer in the list with the list head pointer.  */
                next_timer -> tx_timer_internal_list_head =  list_head;
 8012634:	693b      	ldr	r3, [r7, #16]
 8012636:	697a      	ldr	r2, [r7, #20]
 8012638:	619a      	str	r2, [r3, #24]

                /* Update the head pointer.  */
                *(list_head) =  next_timer;
 801263a:	697b      	ldr	r3, [r7, #20]
 801263c:	693a      	ldr	r2, [r7, #16]
 801263e:	601a      	str	r2, [r3, #0]
            }
        }

        /* Clear the timer's list head pointer.  */
        timer_ptr -> tx_timer_internal_list_head =  TX_NULL;
 8012640:	687b      	ldr	r3, [r7, #4]
 8012642:	2200      	movs	r2, #0
 8012644:	619a      	str	r2, [r3, #24]
    }
}
 8012646:	bf00      	nop
 8012648:	371c      	adds	r7, #28
 801264a:	46bd      	mov	sp, r7
 801264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012650:	4770      	bx	lr
	...

08012654 <_tx_timer_thread_entry>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
#ifndef TX_TIMER_PROCESS_IN_ISR
VOID  _tx_timer_thread_entry(ULONG timer_thread_input)
{
 8012654:	b580      	push	{r7, lr}
 8012656:	b094      	sub	sp, #80	; 0x50
 8012658:	af00      	add	r7, sp, #0
 801265a:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *reactivate_timer;
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *previous_timer;
TX_TIMER_INTERNAL           *current_timer;
VOID                        (*timeout_function)(ULONG id);
ULONG                       timeout_param =  ((ULONG) 0);
 801265c:	2300      	movs	r3, #0
 801265e:	647b      	str	r3, [r7, #68]	; 0x44
#endif


    /* Make sure the timer input is correct.  This also gets rid of the
       silly compiler warnings.  */
    if (timer_thread_input == TX_TIMER_ID)
 8012660:	687b      	ldr	r3, [r7, #4]
 8012662:	4a6e      	ldr	r2, [pc, #440]	; (801281c <_tx_timer_thread_entry+0x1c8>)
 8012664:	4293      	cmp	r3, r2
 8012666:	f040 80d5 	bne.w	8012814 <_tx_timer_thread_entry+0x1c0>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 801266a:	f3ef 8310 	mrs	r3, PRIMASK
 801266e:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile (" CPSID i" : : : "memory" );
 8012670:	b672      	cpsid	i
    return(primask_value);
 8012672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {

            /* First, move the current list pointer and clear the timer 
               expired value.  This allows the interrupt handling portion
               to continue looking for timer expirations.  */
            TX_DISABLE
 8012674:	64fb      	str	r3, [r7, #76]	; 0x4c

            /* Save the current timer expiration list pointer.  */
            expired_timers =  *_tx_timer_current_ptr;
 8012676:	4b6a      	ldr	r3, [pc, #424]	; (8012820 <_tx_timer_thread_entry+0x1cc>)
 8012678:	681b      	ldr	r3, [r3, #0]
 801267a:	681b      	ldr	r3, [r3, #0]
 801267c:	60fb      	str	r3, [r7, #12]

            /* Modify the head pointer in the first timer in the list, if there
               is one!  */
            if (expired_timers != TX_NULL)
 801267e:	68fb      	ldr	r3, [r7, #12]
 8012680:	2b00      	cmp	r3, #0
 8012682:	d003      	beq.n	801268c <_tx_timer_thread_entry+0x38>
            {
        
                expired_timers -> tx_timer_internal_list_head =  &expired_timers;
 8012684:	68fb      	ldr	r3, [r7, #12]
 8012686:	f107 020c 	add.w	r2, r7, #12
 801268a:	619a      	str	r2, [r3, #24]
            }

            /* Set the current list pointer to NULL.  */
            *_tx_timer_current_ptr =  TX_NULL;
 801268c:	4b64      	ldr	r3, [pc, #400]	; (8012820 <_tx_timer_thread_entry+0x1cc>)
 801268e:	681b      	ldr	r3, [r3, #0]
 8012690:	2200      	movs	r2, #0
 8012692:	601a      	str	r2, [r3, #0]

            /* Move the current pointer up one timer entry wrap if we get to 
               the end of the list.  */
            _tx_timer_current_ptr =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, 1);
 8012694:	4b62      	ldr	r3, [pc, #392]	; (8012820 <_tx_timer_thread_entry+0x1cc>)
 8012696:	681b      	ldr	r3, [r3, #0]
 8012698:	3304      	adds	r3, #4
 801269a:	4a61      	ldr	r2, [pc, #388]	; (8012820 <_tx_timer_thread_entry+0x1cc>)
 801269c:	6013      	str	r3, [r2, #0]
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 801269e:	4b60      	ldr	r3, [pc, #384]	; (8012820 <_tx_timer_thread_entry+0x1cc>)
 80126a0:	681a      	ldr	r2, [r3, #0]
 80126a2:	4b60      	ldr	r3, [pc, #384]	; (8012824 <_tx_timer_thread_entry+0x1d0>)
 80126a4:	681b      	ldr	r3, [r3, #0]
 80126a6:	429a      	cmp	r2, r3
 80126a8:	d103      	bne.n	80126b2 <_tx_timer_thread_entry+0x5e>
            {
        
                _tx_timer_current_ptr =  _tx_timer_list_start;
 80126aa:	4b5f      	ldr	r3, [pc, #380]	; (8012828 <_tx_timer_thread_entry+0x1d4>)
 80126ac:	681b      	ldr	r3, [r3, #0]
 80126ae:	4a5c      	ldr	r2, [pc, #368]	; (8012820 <_tx_timer_thread_entry+0x1cc>)
 80126b0:	6013      	str	r3, [r2, #0]
            }

            /* Clear the expired flag.  */
            _tx_timer_expired =  TX_FALSE;
 80126b2:	4b5e      	ldr	r3, [pc, #376]	; (801282c <_tx_timer_thread_entry+0x1d8>)
 80126b4:	2200      	movs	r2, #0
 80126b6:	601a      	str	r2, [r3, #0]
 80126b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80126ba:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80126bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126be:	f383 8810 	msr	PRIMASK, r3
}
 80126c2:	bf00      	nop
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80126c4:	f3ef 8310 	mrs	r3, PRIMASK
 80126c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile (" CPSID i" : : : "memory" );
 80126ca:	b672      	cpsid	i
    return(primask_value);
 80126cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 80126ce:	64fb      	str	r3, [r7, #76]	; 0x4c

            /* Next, process the expiration of the associated timers at this
               time slot.  */
            while (expired_timers != TX_NULL)
 80126d0:	e07b      	b.n	80127ca <_tx_timer_thread_entry+0x176>
            {

                /* Something is on the list.  Remove it and process the expiration.  */
                current_timer =  expired_timers;
 80126d2:	68fb      	ldr	r3, [r7, #12]
 80126d4:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* Pickup the next timer.  */
                next_timer =  expired_timers -> tx_timer_internal_active_next;
 80126d6:	68fb      	ldr	r3, [r7, #12]
 80126d8:	691b      	ldr	r3, [r3, #16]
 80126da:	63bb      	str	r3, [r7, #56]	; 0x38
            
                /* Set the reactivate_timer to NULL.  */
                reactivate_timer =  TX_NULL;
 80126dc:	2300      	movs	r3, #0
 80126de:	60bb      	str	r3, [r7, #8]

                /* Determine if this is the only timer.  */
                if (current_timer == next_timer)
 80126e0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80126e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126e4:	429a      	cmp	r2, r3
 80126e6:	d102      	bne.n	80126ee <_tx_timer_thread_entry+0x9a>
                {

                    /* Yes, this is the only timer in the list.  */

                    /* Set the head pointer to NULL.  */
                    expired_timers =  TX_NULL;
 80126e8:	2300      	movs	r3, #0
 80126ea:	60fb      	str	r3, [r7, #12]
 80126ec:	e00e      	b.n	801270c <_tx_timer_thread_entry+0xb8>
                {

                    /* No, not the only expired timer.  */
            
                    /* Remove this timer from the expired list.  */
                    previous_timer =                                   current_timer -> tx_timer_internal_active_previous;
 80126ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80126f0:	695b      	ldr	r3, [r3, #20]
 80126f2:	637b      	str	r3, [r7, #52]	; 0x34
                    next_timer -> tx_timer_internal_active_previous =  previous_timer;
 80126f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80126f8:	615a      	str	r2, [r3, #20]
                    previous_timer -> tx_timer_internal_active_next =  next_timer;
 80126fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80126fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80126fe:	611a      	str	r2, [r3, #16]

                    /* Modify the next timer's list head to point at the current list head.  */
                    next_timer -> tx_timer_internal_list_head =  &expired_timers;
 8012700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012702:	f107 020c 	add.w	r2, r7, #12
 8012706:	619a      	str	r2, [r3, #24]

                    /* Set the list head pointer.  */
                    expired_timers =  next_timer;
 8012708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801270a:	60fb      	str	r3, [r7, #12]

                /* In any case, the timer is now off of the expired list.  */

                /* Determine if the timer has expired or if it is just a really 
                   big timer that needs to be placed in the list again.  */
                if (current_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 801270c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801270e:	681b      	ldr	r3, [r3, #0]
 8012710:	2b20      	cmp	r3, #32
 8012712:	d911      	bls.n	8012738 <_tx_timer_thread_entry+0xe4>
                    }
#endif

                    /* Decrement the remaining ticks of the timer.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  
                            current_timer -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 8012714:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012716:	681b      	ldr	r3, [r3, #0]
 8012718:	f1a3 0220 	sub.w	r2, r3, #32
                    current_timer -> tx_timer_internal_remaining_ticks =  
 801271c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801271e:	601a      	str	r2, [r3, #0]
                
                    /* Set the timeout function to NULL in order to bypass the
                       expiration.  */
                    timeout_function =  TX_NULL;
 8012720:	2300      	movs	r3, #0
 8012722:	64bb      	str	r3, [r7, #72]	; 0x48

                    /* Make the timer appear that it is still active while interrupts
                       are enabled.  This will permit proper processing of a timer
                       deactivate from an ISR.  */
                    current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 8012724:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012726:	f107 0208 	add.w	r2, r7, #8
 801272a:	619a      	str	r2, [r3, #24]
                    current_timer -> tx_timer_internal_active_next =  current_timer;
 801272c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801272e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012730:	611a      	str	r2, [r3, #16]

                    /* Setup the temporary timer list head pointer.  */
                    reactivate_timer =  current_timer;
 8012732:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012734:	60bb      	str	r3, [r7, #8]
 8012736:	e01a      	b.n	801276e <_tx_timer_thread_entry+0x11a>
                    }
#endif
                  
                    /* Copy the calling function and ID into local variables before interrupts 
                       are re-enabled.  */
                    timeout_function =  current_timer -> tx_timer_internal_timeout_function;
 8012738:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801273a:	689b      	ldr	r3, [r3, #8]
 801273c:	64bb      	str	r3, [r7, #72]	; 0x48
                    timeout_param =     current_timer -> tx_timer_internal_timeout_param;
 801273e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012740:	68db      	ldr	r3, [r3, #12]
 8012742:	647b      	str	r3, [r7, #68]	; 0x44

                    /* Copy the reinitialize ticks into the remaining ticks.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  current_timer -> tx_timer_internal_re_initialize_ticks;
 8012744:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012746:	685a      	ldr	r2, [r3, #4]
 8012748:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801274a:	601a      	str	r2, [r3, #0]

                    /* Determine if the timer should be reactivated.  */
                    if (current_timer -> tx_timer_internal_remaining_ticks != ((ULONG) 0))
 801274c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801274e:	681b      	ldr	r3, [r3, #0]
 8012750:	2b00      	cmp	r3, #0
 8012752:	d009      	beq.n	8012768 <_tx_timer_thread_entry+0x114>

                        /* Make the timer appear that it is still active while processing
                           the expiration routine and with interrupts enabled.  This will 
                           permit proper processing of a timer deactivate from both the
                           expiration routine and an ISR.  */
                        current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 8012754:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012756:	f107 0208 	add.w	r2, r7, #8
 801275a:	619a      	str	r2, [r3, #24]
                        current_timer -> tx_timer_internal_active_next =  current_timer;
 801275c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801275e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012760:	611a      	str	r2, [r3, #16]
                        
                        /* Setup the temporary timer list head pointer.  */
                        reactivate_timer =  current_timer;
 8012762:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012764:	60bb      	str	r3, [r7, #8]
 8012766:	e002      	b.n	801276e <_tx_timer_thread_entry+0x11a>
                    else
                    {

                        /* Set the list pointer of this timer to NULL.  This is used to indicate
                           the timer is no longer active.  */
                        current_timer -> tx_timer_internal_list_head =  TX_NULL;
 8012768:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801276a:	2200      	movs	r2, #0
 801276c:	619a      	str	r2, [r3, #24]
                    }
                }

                /* Set pointer to indicate the expired timer that is currently being processed.  */
                _tx_timer_expired_timer_ptr =  current_timer;
 801276e:	4a30      	ldr	r2, [pc, #192]	; (8012830 <_tx_timer_thread_entry+0x1dc>)
 8012770:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012772:	6013      	str	r3, [r2, #0]
 8012774:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012776:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8012778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801277a:	f383 8810 	msr	PRIMASK, r3
}
 801277e:	bf00      	nop

                /* Restore interrupts for timer expiration call.  */
                TX_RESTORE

                /* Call the timer-expiration function, if non-NULL.  */
                if (timeout_function != TX_NULL)
 8012780:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012782:	2b00      	cmp	r3, #0
 8012784:	d002      	beq.n	801278c <_tx_timer_thread_entry+0x138>
                {
            
                    (timeout_function) (timeout_param);
 8012786:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012788:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801278a:	4798      	blx	r3
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 801278c:	f3ef 8310 	mrs	r3, PRIMASK
 8012790:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8012792:	b672      	cpsid	i
    return(primask_value);
 8012794:	6a3b      	ldr	r3, [r7, #32]
                }

                /* Lockout interrupts again.  */
                TX_DISABLE
 8012796:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Clear expired timer pointer.  */
                _tx_timer_expired_timer_ptr =  TX_NULL;
 8012798:	4b25      	ldr	r3, [pc, #148]	; (8012830 <_tx_timer_thread_entry+0x1dc>)
 801279a:	2200      	movs	r2, #0
 801279c:	601a      	str	r2, [r3, #0]

                /* Determine if the timer needs to be reactivated.  */
                if (reactivate_timer == current_timer)
 801279e:	68bb      	ldr	r3, [r7, #8]
 80127a0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80127a2:	429a      	cmp	r2, r3
 80127a4:	d105      	bne.n	80127b2 <_tx_timer_thread_entry+0x15e>
#else

                    /* Reactivate through the timer activate function.  */

                    /* Clear the list head for the timer activate call.  */
                    current_timer -> tx_timer_internal_list_head = TX_NULL;
 80127a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80127a8:	2200      	movs	r2, #0
 80127aa:	619a      	str	r2, [r3, #24]

                    /* Activate the current timer.  */
                    _tx_timer_system_activate(current_timer);
 80127ac:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80127ae:	f7ff feb7 	bl	8012520 <_tx_timer_system_activate>
 80127b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80127b4:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80127b6:	69bb      	ldr	r3, [r7, #24]
 80127b8:	f383 8810 	msr	PRIMASK, r3
}
 80127bc:	bf00      	nop
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80127be:	f3ef 8310 	mrs	r3, PRIMASK
 80127c2:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" CPSID i" : : : "memory" );
 80127c4:	b672      	cpsid	i
    return(primask_value);
 80127c6:	69fb      	ldr	r3, [r7, #28]

                /* Restore interrupts.  */
                TX_RESTORE

                /* Lockout interrupts again.  */
                TX_DISABLE
 80127c8:	64fb      	str	r3, [r7, #76]	; 0x4c
            while (expired_timers != TX_NULL)
 80127ca:	68fb      	ldr	r3, [r7, #12]
 80127cc:	2b00      	cmp	r3, #0
 80127ce:	d180      	bne.n	80126d2 <_tx_timer_thread_entry+0x7e>

            /* Finally, suspend this thread and wait for the next expiration.  */

            /* Determine if another expiration took place while we were in this
               thread.  If so, process another expiration.  */
            if (_tx_timer_expired == TX_FALSE)
 80127d0:	4b16      	ldr	r3, [pc, #88]	; (801282c <_tx_timer_thread_entry+0x1d8>)
 80127d2:	681b      	ldr	r3, [r3, #0]
 80127d4:	2b00      	cmp	r3, #0
 80127d6:	d116      	bne.n	8012806 <_tx_timer_thread_entry+0x1b2>
            {

                /* Otherwise, no timer expiration, so suspend the thread.  */

                /* Build pointer to the timer thread.  */
                thread_ptr =  &_tx_timer_thread;
 80127d8:	4b16      	ldr	r3, [pc, #88]	; (8012834 <_tx_timer_thread_entry+0x1e0>)
 80127da:	643b      	str	r3, [r7, #64]	; 0x40

                /* Set the status to suspending, in order to indicate the 
                   suspension is in progress.  */
                thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 80127dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80127de:	2203      	movs	r2, #3
 80127e0:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag. */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 80127e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80127e4:	2201      	movs	r2, #1
 80127e6:	639a      	str	r2, [r3, #56]	; 0x38

                /* Increment the preempt disable count prior to suspending.  */
                _tx_thread_preempt_disable++;
 80127e8:	4b13      	ldr	r3, [pc, #76]	; (8012838 <_tx_timer_thread_entry+0x1e4>)
 80127ea:	681b      	ldr	r3, [r3, #0]
 80127ec:	3301      	adds	r3, #1
 80127ee:	4a12      	ldr	r2, [pc, #72]	; (8012838 <_tx_timer_thread_entry+0x1e4>)
 80127f0:	6013      	str	r3, [r2, #0]
 80127f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80127f4:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80127f6:	697b      	ldr	r3, [r7, #20]
 80127f8:	f383 8810 	msr	PRIMASK, r3
}
 80127fc:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 80127fe:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8012800:	f7ff fafe 	bl	8011e00 <_tx_thread_system_suspend>
 8012804:	e731      	b.n	801266a <_tx_timer_thread_entry+0x16>
 8012806:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012808:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801280a:	693b      	ldr	r3, [r7, #16]
 801280c:	f383 8810 	msr	PRIMASK, r3
}
 8012810:	bf00      	nop
            TX_DISABLE
 8012812:	e72a      	b.n	801266a <_tx_timer_thread_entry+0x16>

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif

}
 8012814:	bf00      	nop
 8012816:	3750      	adds	r7, #80	; 0x50
 8012818:	46bd      	mov	sp, r7
 801281a:	bd80      	pop	{r7, pc}
 801281c:	4154494d 	.word	0x4154494d
 8012820:	20026198 	.word	0x20026198
 8012824:	20026194 	.word	0x20026194
 8012828:	20026190 	.word	0x20026190
 801282c:	2002619c 	.word	0x2002619c
 8012830:	200261a8 	.word	0x200261a8
 8012834:	200261ac 	.word	0x200261ac
 8012838:	200260fc 	.word	0x200260fc

0801283c <_get_ipsr>:
{
 801283c:	b480      	push	{r7}
 801283e:	b083      	sub	sp, #12
 8012840:	af00      	add	r7, sp, #0
    __asm("MRS %[result], ipsr" : [result] "=r" (_ipsr) : );
 8012842:	f3ef 8305 	mrs	r3, IPSR
 8012846:	607b      	str	r3, [r7, #4]
    return _ipsr;
 8012848:	687b      	ldr	r3, [r7, #4]
}
 801284a:	4618      	mov	r0, r3
 801284c:	370c      	adds	r7, #12
 801284e:	46bd      	mov	sp, r7
 8012850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012854:	4770      	bx	lr
	...

08012858 <_txe_byte_allocate>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr, 
                                    ULONG memory_size,  ULONG wait_option)
{
 8012858:	b580      	push	{r7, lr}
 801285a:	b086      	sub	sp, #24
 801285c:	af00      	add	r7, sp, #0
 801285e:	60f8      	str	r0, [r7, #12]
 8012860:	60b9      	str	r1, [r7, #8]
 8012862:	607a      	str	r2, [r7, #4]
 8012864:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8012866:	2300      	movs	r3, #0
 8012868:	617b      	str	r3, [r7, #20]

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 801286a:	68fb      	ldr	r3, [r7, #12]
 801286c:	2b00      	cmp	r3, #0
 801286e:	d102      	bne.n	8012876 <_txe_byte_allocate+0x1e>
    {
        
        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8012870:	2302      	movs	r3, #2
 8012872:	617b      	str	r3, [r7, #20]
 8012874:	e028      	b.n	80128c8 <_txe_byte_allocate+0x70>
    }
    
    /* Now check for invalid pool ID.  */
    else if  (pool_ptr -> tx_byte_pool_id != TX_BYTE_POOL_ID)
 8012876:	68fb      	ldr	r3, [r7, #12]
 8012878:	681b      	ldr	r3, [r3, #0]
 801287a:	4a2c      	ldr	r2, [pc, #176]	; (801292c <_txe_byte_allocate+0xd4>)
 801287c:	4293      	cmp	r3, r2
 801287e:	d002      	beq.n	8012886 <_txe_byte_allocate+0x2e>
    {
        
        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8012880:	2302      	movs	r3, #2
 8012882:	617b      	str	r3, [r7, #20]
 8012884:	e020      	b.n	80128c8 <_txe_byte_allocate+0x70>
    }

    /* Check for an invalid destination for return pointer.  */
    else if (memory_ptr == TX_NULL)
 8012886:	68bb      	ldr	r3, [r7, #8]
 8012888:	2b00      	cmp	r3, #0
 801288a:	d102      	bne.n	8012892 <_txe_byte_allocate+0x3a>
    {

        /* Null destination pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 801288c:	2303      	movs	r3, #3
 801288e:	617b      	str	r3, [r7, #20]
 8012890:	e01a      	b.n	80128c8 <_txe_byte_allocate+0x70>
    }

    /* Check for an invalid memory size.  */
    else if (memory_size == ((ULONG) 0))
 8012892:	687b      	ldr	r3, [r7, #4]
 8012894:	2b00      	cmp	r3, #0
 8012896:	d102      	bne.n	801289e <_txe_byte_allocate+0x46>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 8012898:	2305      	movs	r3, #5
 801289a:	617b      	str	r3, [r7, #20]
 801289c:	e014      	b.n	80128c8 <_txe_byte_allocate+0x70>
    }
    
    /* Determine if the size is greater than the pool size.  */
    else if (memory_size > pool_ptr -> tx_byte_pool_size)
 801289e:	68fb      	ldr	r3, [r7, #12]
 80128a0:	69db      	ldr	r3, [r3, #28]
 80128a2:	687a      	ldr	r2, [r7, #4]
 80128a4:	429a      	cmp	r2, r3
 80128a6:	d902      	bls.n	80128ae <_txe_byte_allocate+0x56>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 80128a8:	2305      	movs	r3, #5
 80128aa:	617b      	str	r3, [r7, #20]
 80128ac:	e00c      	b.n	80128c8 <_txe_byte_allocate+0x70>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of 
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 80128ae:	683b      	ldr	r3, [r7, #0]
 80128b0:	2b00      	cmp	r3, #0
 80128b2:	d009      	beq.n	80128c8 <_txe_byte_allocate+0x70>
        {

            /* Is call from ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80128b4:	f7ff ffc2 	bl	801283c <_get_ipsr>
 80128b8:	4602      	mov	r2, r0
 80128ba:	4b1d      	ldr	r3, [pc, #116]	; (8012930 <_txe_byte_allocate+0xd8>)
 80128bc:	681b      	ldr	r3, [r3, #0]
 80128be:	4313      	orrs	r3, r2
 80128c0:	2b00      	cmp	r3, #0
 80128c2:	d001      	beq.n	80128c8 <_txe_byte_allocate+0x70>
            {
        
                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 80128c4:	2304      	movs	r3, #4
 80128c6:	617b      	str	r3, [r7, #20]
        }
    }
#ifndef TX_TIMER_PROCESS_IN_ISR
    
    /* Check for timer execution.  */
    if (status == TX_SUCCESS)
 80128c8:	697b      	ldr	r3, [r7, #20]
 80128ca:	2b00      	cmp	r3, #0
 80128cc:	d108      	bne.n	80128e0 <_txe_byte_allocate+0x88>
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 80128ce:	4b19      	ldr	r3, [pc, #100]	; (8012934 <_txe_byte_allocate+0xdc>)
 80128d0:	681b      	ldr	r3, [r3, #0]
 80128d2:	613b      	str	r3, [r7, #16]

        /* Check for invalid caller of this function.  First check for a calling thread.  */
        if (thread_ptr == &_tx_timer_thread)
 80128d4:	693b      	ldr	r3, [r7, #16]
 80128d6:	4a18      	ldr	r2, [pc, #96]	; (8012938 <_txe_byte_allocate+0xe0>)
 80128d8:	4293      	cmp	r3, r2
 80128da:	d101      	bne.n	80128e0 <_txe_byte_allocate+0x88>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 80128dc:	2313      	movs	r3, #19
 80128de:	617b      	str	r3, [r7, #20]
        }
    }
#endif

    /* Is everything still okay?  */
    if (status == TX_SUCCESS)
 80128e0:	697b      	ldr	r3, [r7, #20]
 80128e2:	2b00      	cmp	r3, #0
 80128e4:	d112      	bne.n	801290c <_txe_byte_allocate+0xb4>
    {
    
        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80128e6:	f7ff ffa9 	bl	801283c <_get_ipsr>
 80128ea:	4602      	mov	r2, r0
 80128ec:	4b10      	ldr	r3, [pc, #64]	; (8012930 <_txe_byte_allocate+0xd8>)
 80128ee:	681b      	ldr	r3, [r3, #0]
 80128f0:	4313      	orrs	r3, r2
 80128f2:	2b00      	cmp	r3, #0
 80128f4:	d00a      	beq.n	801290c <_txe_byte_allocate+0xb4>
        {
    
            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 80128f6:	f7ff ffa1 	bl	801283c <_get_ipsr>
 80128fa:	4602      	mov	r2, r0
 80128fc:	4b0c      	ldr	r3, [pc, #48]	; (8012930 <_txe_byte_allocate+0xd8>)
 80128fe:	681b      	ldr	r3, [r3, #0]
 8012900:	4313      	orrs	r3, r2
 8012902:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8012906:	d201      	bcs.n	801290c <_txe_byte_allocate+0xb4>
            {
        
                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8012908:	2313      	movs	r3, #19
 801290a:	617b      	str	r3, [r7, #20]
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 801290c:	697b      	ldr	r3, [r7, #20]
 801290e:	2b00      	cmp	r3, #0
 8012910:	d106      	bne.n	8012920 <_txe_byte_allocate+0xc8>
    {

        /* Call actual byte memory allocate function.  */
        status =  _tx_byte_allocate(pool_ptr, memory_ptr, memory_size,  wait_option);
 8012912:	683b      	ldr	r3, [r7, #0]
 8012914:	687a      	ldr	r2, [r7, #4]
 8012916:	68b9      	ldr	r1, [r7, #8]
 8012918:	68f8      	ldr	r0, [r7, #12]
 801291a:	f7fd f975 	bl	800fc08 <_tx_byte_allocate>
 801291e:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 8012920:	697b      	ldr	r3, [r7, #20]
}
 8012922:	4618      	mov	r0, r3
 8012924:	3718      	adds	r7, #24
 8012926:	46bd      	mov	sp, r7
 8012928:	bd80      	pop	{r7, pc}
 801292a:	bf00      	nop
 801292c:	42595445 	.word	0x42595445
 8012930:	2000003c 	.word	0x2000003c
 8012934:	20026064 	.word	0x20026064
 8012938:	200261ac 	.word	0x200261ac

0801293c <_get_ipsr>:
{
 801293c:	b480      	push	{r7}
 801293e:	b083      	sub	sp, #12
 8012940:	af00      	add	r7, sp, #0
    __asm("MRS %[result], ipsr" : [result] "=r" (_ipsr) : );
 8012942:	f3ef 8305 	mrs	r3, IPSR
 8012946:	607b      	str	r3, [r7, #4]
    return _ipsr;
 8012948:	687b      	ldr	r3, [r7, #4]
}
 801294a:	4618      	mov	r0, r3
 801294c:	370c      	adds	r7, #12
 801294e:	46bd      	mov	sp, r7
 8012950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012954:	4770      	bx	lr
	...

08012958 <_txe_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 8012958:	b580      	push	{r7, lr}
 801295a:	b08e      	sub	sp, #56	; 0x38
 801295c:	af00      	add	r7, sp, #0
 801295e:	60f8      	str	r0, [r7, #12]
 8012960:	60b9      	str	r1, [r7, #8]
 8012962:	607a      	str	r2, [r7, #4]
 8012964:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8012966:	2300      	movs	r3, #0
 8012968:	637b      	str	r3, [r7, #52]	; 0x34

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 801296a:	68fb      	ldr	r3, [r7, #12]
 801296c:	2b00      	cmp	r3, #0
 801296e:	d102      	bne.n	8012976 <_txe_byte_pool_create+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8012970:	2302      	movs	r3, #2
 8012972:	637b      	str	r3, [r7, #52]	; 0x34
 8012974:	e06f      	b.n	8012a56 <_txe_byte_pool_create+0xfe>
    }

    /* Now see if the pool control block size is valid.  */
    else if (pool_control_block_size != (sizeof(TX_BYTE_POOL)))
 8012976:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012978:	2b34      	cmp	r3, #52	; 0x34
 801297a:	d002      	beq.n	8012982 <_txe_byte_pool_create+0x2a>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 801297c:	2302      	movs	r3, #2
 801297e:	637b      	str	r3, [r7, #52]	; 0x34
 8012980:	e069      	b.n	8012a56 <_txe_byte_pool_create+0xfe>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8012982:	f3ef 8310 	mrs	r3, PRIMASK
 8012986:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8012988:	b672      	cpsid	i
    return(primask_value);
 801298a:	69fb      	ldr	r3, [r7, #28]
    }
    else
    {
    
        /* Disable interrupts.  */
        TX_DISABLE
 801298c:	62bb      	str	r3, [r7, #40]	; 0x28

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 801298e:	4b39      	ldr	r3, [pc, #228]	; (8012a74 <_txe_byte_pool_create+0x11c>)
 8012990:	681b      	ldr	r3, [r3, #0]
 8012992:	3301      	adds	r3, #1
 8012994:	4a37      	ldr	r2, [pc, #220]	; (8012a74 <_txe_byte_pool_create+0x11c>)
 8012996:	6013      	str	r3, [r2, #0]
 8012998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801299a:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801299c:	6a3b      	ldr	r3, [r7, #32]
 801299e:	f383 8810 	msr	PRIMASK, r3
}
 80129a2:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_pool =   _tx_byte_pool_created_ptr;
 80129a4:	4b34      	ldr	r3, [pc, #208]	; (8012a78 <_txe_byte_pool_create+0x120>)
 80129a6:	681b      	ldr	r3, [r3, #0]
 80129a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 80129aa:	2300      	movs	r3, #0
 80129ac:	633b      	str	r3, [r7, #48]	; 0x30
 80129ae:	e009      	b.n	80129c4 <_txe_byte_pool_create+0x6c>
        {

            /* Determine if this byte pool matches the pool in the list.  */
            if (pool_ptr == next_pool)
 80129b0:	68fa      	ldr	r2, [r7, #12]
 80129b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129b4:	429a      	cmp	r2, r3
 80129b6:	d00b      	beq.n	80129d0 <_txe_byte_pool_create+0x78>
            }
            else
            {

                /* Move to the next pool.  */
                next_pool =  next_pool -> tx_byte_pool_created_next;
 80129b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80129bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 80129be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129c0:	3301      	adds	r3, #1
 80129c2:	633b      	str	r3, [r7, #48]	; 0x30
 80129c4:	4b2d      	ldr	r3, [pc, #180]	; (8012a7c <_txe_byte_pool_create+0x124>)
 80129c6:	681b      	ldr	r3, [r3, #0]
 80129c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80129ca:	429a      	cmp	r2, r3
 80129cc:	d3f0      	bcc.n	80129b0 <_txe_byte_pool_create+0x58>
 80129ce:	e000      	b.n	80129d2 <_txe_byte_pool_create+0x7a>
                break;
 80129d0:	bf00      	nop
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80129d2:	f3ef 8310 	mrs	r3, PRIMASK
 80129d6:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" CPSID i" : : : "memory" );
 80129d8:	b672      	cpsid	i
    return(primask_value);
 80129da:	697b      	ldr	r3, [r7, #20]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 80129dc:	62bb      	str	r3, [r7, #40]	; 0x28

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 80129de:	4b25      	ldr	r3, [pc, #148]	; (8012a74 <_txe_byte_pool_create+0x11c>)
 80129e0:	681b      	ldr	r3, [r3, #0]
 80129e2:	3b01      	subs	r3, #1
 80129e4:	4a23      	ldr	r2, [pc, #140]	; (8012a74 <_txe_byte_pool_create+0x11c>)
 80129e6:	6013      	str	r3, [r2, #0]
 80129e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129ea:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80129ec:	69bb      	ldr	r3, [r7, #24]
 80129ee:	f383 8810 	msr	PRIMASK, r3
}
 80129f2:	bf00      	nop
    
        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 80129f4:	f7ff f8b6 	bl	8011b64 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate pool.  */
        if (pool_ptr == next_pool)
 80129f8:	68fa      	ldr	r2, [r7, #12]
 80129fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129fc:	429a      	cmp	r2, r3
 80129fe:	d102      	bne.n	8012a06 <_txe_byte_pool_create+0xae>
        {

            /* Pool is already created, return appropriate error code.  */
            status =  TX_POOL_ERROR;
 8012a00:	2302      	movs	r3, #2
 8012a02:	637b      	str	r3, [r7, #52]	; 0x34
 8012a04:	e027      	b.n	8012a56 <_txe_byte_pool_create+0xfe>
        }

        /* Check for an invalid starting address.  */
        else if (pool_start == TX_NULL)
 8012a06:	687b      	ldr	r3, [r7, #4]
 8012a08:	2b00      	cmp	r3, #0
 8012a0a:	d102      	bne.n	8012a12 <_txe_byte_pool_create+0xba>
        {
    
            /* Null starting address pointer, return appropriate error.  */
            status =  TX_PTR_ERROR;
 8012a0c:	2303      	movs	r3, #3
 8012a0e:	637b      	str	r3, [r7, #52]	; 0x34
 8012a10:	e021      	b.n	8012a56 <_txe_byte_pool_create+0xfe>
        }

        /* Check for invalid pool size.  */
        else if (pool_size < TX_BYTE_POOL_MIN)
 8012a12:	683b      	ldr	r3, [r7, #0]
 8012a14:	2b63      	cmp	r3, #99	; 0x63
 8012a16:	d802      	bhi.n	8012a1e <_txe_byte_pool_create+0xc6>
        {

            /* Pool not big enough, return appropriate error.  */
            status =  TX_SIZE_ERROR;
 8012a18:	2305      	movs	r3, #5
 8012a1a:	637b      	str	r3, [r7, #52]	; 0x34
 8012a1c:	e01b      	b.n	8012a56 <_txe_byte_pool_create+0xfe>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8012a1e:	4b18      	ldr	r3, [pc, #96]	; (8012a80 <_txe_byte_pool_create+0x128>)
 8012a20:	681b      	ldr	r3, [r3, #0]
 8012a22:	627b      	str	r3, [r7, #36]	; 0x24

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 8012a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a26:	4a17      	ldr	r2, [pc, #92]	; (8012a84 <_txe_byte_pool_create+0x12c>)
 8012a28:	4293      	cmp	r3, r2
 8012a2a:	d101      	bne.n	8012a30 <_txe_byte_pool_create+0xd8>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8012a2c:	2313      	movs	r3, #19
 8012a2e:	637b      	str	r3, [r7, #52]	; 0x34
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8012a30:	f7ff ff84 	bl	801293c <_get_ipsr>
 8012a34:	4602      	mov	r2, r0
 8012a36:	4b14      	ldr	r3, [pc, #80]	; (8012a88 <_txe_byte_pool_create+0x130>)
 8012a38:	681b      	ldr	r3, [r3, #0]
 8012a3a:	4313      	orrs	r3, r2
 8012a3c:	2b00      	cmp	r3, #0
 8012a3e:	d00a      	beq.n	8012a56 <_txe_byte_pool_create+0xfe>
            {
    
                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8012a40:	f7ff ff7c 	bl	801293c <_get_ipsr>
 8012a44:	4602      	mov	r2, r0
 8012a46:	4b10      	ldr	r3, [pc, #64]	; (8012a88 <_txe_byte_pool_create+0x130>)
 8012a48:	681b      	ldr	r3, [r3, #0]
 8012a4a:	4313      	orrs	r3, r2
 8012a4c:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8012a50:	d201      	bcs.n	8012a56 <_txe_byte_pool_create+0xfe>
                {
        
                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 8012a52:	2313      	movs	r3, #19
 8012a54:	637b      	str	r3, [r7, #52]	; 0x34
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8012a56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012a58:	2b00      	cmp	r3, #0
 8012a5a:	d106      	bne.n	8012a6a <_txe_byte_pool_create+0x112>
    {

        /* Call actual byte pool create function.  */
        status =  _tx_byte_pool_create(pool_ptr, name_ptr, pool_start, pool_size);
 8012a5c:	683b      	ldr	r3, [r7, #0]
 8012a5e:	687a      	ldr	r2, [r7, #4]
 8012a60:	68b9      	ldr	r1, [r7, #8]
 8012a62:	68f8      	ldr	r0, [r7, #12]
 8012a64:	f7fd fa0a 	bl	800fe7c <_tx_byte_pool_create>
 8012a68:	6378      	str	r0, [r7, #52]	; 0x34
    }

    /* Return completion status.  */
    return(status);
 8012a6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8012a6c:	4618      	mov	r0, r3
 8012a6e:	3738      	adds	r7, #56	; 0x38
 8012a70:	46bd      	mov	sp, r7
 8012a72:	bd80      	pop	{r7, pc}
 8012a74:	200260fc 	.word	0x200260fc
 8012a78:	20026054 	.word	0x20026054
 8012a7c:	20026058 	.word	0x20026058
 8012a80:	20026064 	.word	0x20026064
 8012a84:	200261ac 	.word	0x200261ac
 8012a88:	2000003c 	.word	0x2000003c

08012a8c <_txe_byte_pool_info_get>:
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_pool_info_get(TX_BYTE_POOL *pool_ptr, CHAR **name, ULONG *available_bytes, 
                    ULONG *fragments, TX_THREAD **first_suspended, 
                    ULONG *suspended_count, TX_BYTE_POOL **next_pool)
{
 8012a8c:	b580      	push	{r7, lr}
 8012a8e:	b08a      	sub	sp, #40	; 0x28
 8012a90:	af04      	add	r7, sp, #16
 8012a92:	60f8      	str	r0, [r7, #12]
 8012a94:	60b9      	str	r1, [r7, #8]
 8012a96:	607a      	str	r2, [r7, #4]
 8012a98:	603b      	str	r3, [r7, #0]

UINT    status;


    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 8012a9a:	68fb      	ldr	r3, [r7, #12]
 8012a9c:	2b00      	cmp	r3, #0
 8012a9e:	d102      	bne.n	8012aa6 <_txe_byte_pool_info_get+0x1a>
    {

        /* Block pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8012aa0:	2302      	movs	r3, #2
 8012aa2:	617b      	str	r3, [r7, #20]
 8012aa4:	e014      	b.n	8012ad0 <_txe_byte_pool_info_get+0x44>
    }

    /* Now check for invalid pool ID.  */
    else if (pool_ptr -> tx_byte_pool_id != TX_BYTE_POOL_ID)
 8012aa6:	68fb      	ldr	r3, [r7, #12]
 8012aa8:	681b      	ldr	r3, [r3, #0]
 8012aaa:	4a0c      	ldr	r2, [pc, #48]	; (8012adc <_txe_byte_pool_info_get+0x50>)
 8012aac:	4293      	cmp	r3, r2
 8012aae:	d002      	beq.n	8012ab6 <_txe_byte_pool_info_get+0x2a>
    {

        /* Block pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8012ab0:	2302      	movs	r3, #2
 8012ab2:	617b      	str	r3, [r7, #20]
 8012ab4:	e00c      	b.n	8012ad0 <_txe_byte_pool_info_get+0x44>
    }
    else
    {

        /* Otherwise, call the actual byte pool information get service.  */
        status =  _tx_byte_pool_info_get(pool_ptr, name, available_bytes, 
 8012ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ab8:	9302      	str	r3, [sp, #8]
 8012aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012abc:	9301      	str	r3, [sp, #4]
 8012abe:	6a3b      	ldr	r3, [r7, #32]
 8012ac0:	9300      	str	r3, [sp, #0]
 8012ac2:	683b      	ldr	r3, [r7, #0]
 8012ac4:	687a      	ldr	r2, [r7, #4]
 8012ac6:	68b9      	ldr	r1, [r7, #8]
 8012ac8:	68f8      	ldr	r0, [r7, #12]
 8012aca:	f7fd fa6b 	bl	800ffa4 <_tx_byte_pool_info_get>
 8012ace:	6178      	str	r0, [r7, #20]
                            fragments, first_suspended, suspended_count, next_pool);
    }

    /* Return completion status.  */
    return(status);
 8012ad0:	697b      	ldr	r3, [r7, #20]
}
 8012ad2:	4618      	mov	r0, r3
 8012ad4:	3718      	adds	r7, #24
 8012ad6:	46bd      	mov	sp, r7
 8012ad8:	bd80      	pop	{r7, pc}
 8012ada:	bf00      	nop
 8012adc:	42595445 	.word	0x42595445

08012ae0 <_get_ipsr>:
{
 8012ae0:	b480      	push	{r7}
 8012ae2:	b083      	sub	sp, #12
 8012ae4:	af00      	add	r7, sp, #0
    __asm("MRS %[result], ipsr" : [result] "=r" (_ipsr) : );
 8012ae6:	f3ef 8305 	mrs	r3, IPSR
 8012aea:	607b      	str	r3, [r7, #4]
    return _ipsr;
 8012aec:	687b      	ldr	r3, [r7, #4]
}
 8012aee:	4618      	mov	r0, r3
 8012af0:	370c      	adds	r7, #12
 8012af2:	46bd      	mov	sp, r7
 8012af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012af8:	4770      	bx	lr
	...

08012afc <_txe_byte_release>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_release(VOID *memory_ptr)
{
 8012afc:	b580      	push	{r7, lr}
 8012afe:	b084      	sub	sp, #16
 8012b00:	af00      	add	r7, sp, #0
 8012b02:	6078      	str	r0, [r7, #4]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8012b04:	2300      	movs	r3, #0
 8012b06:	60fb      	str	r3, [r7, #12]

    /* First check the supplied memory pointer.  */
    if (memory_ptr == TX_NULL)
 8012b08:	687b      	ldr	r3, [r7, #4]
 8012b0a:	2b00      	cmp	r3, #0
 8012b0c:	d102      	bne.n	8012b14 <_txe_byte_release+0x18>
    {

        /* The byte memory pointer is invalid, return appropriate status.  */
        status =  TX_PTR_ERROR;
 8012b0e:	2303      	movs	r3, #3
 8012b10:	60fb      	str	r3, [r7, #12]
 8012b12:	e01b      	b.n	8012b4c <_txe_byte_release+0x50>
    {

#ifndef TX_TIMER_PROCESS_IN_ISR

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 8012b14:	4b13      	ldr	r3, [pc, #76]	; (8012b64 <_txe_byte_release+0x68>)
 8012b16:	681b      	ldr	r3, [r3, #0]
 8012b18:	60bb      	str	r3, [r7, #8]

        /* Check for invalid caller of this function.  First check for a calling thread.  */
        if (thread_ptr == &_tx_timer_thread)
 8012b1a:	68bb      	ldr	r3, [r7, #8]
 8012b1c:	4a12      	ldr	r2, [pc, #72]	; (8012b68 <_txe_byte_release+0x6c>)
 8012b1e:	4293      	cmp	r3, r2
 8012b20:	d101      	bne.n	8012b26 <_txe_byte_release+0x2a>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 8012b22:	2313      	movs	r3, #19
 8012b24:	60fb      	str	r3, [r7, #12]
        }
#endif

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8012b26:	f7ff ffdb 	bl	8012ae0 <_get_ipsr>
 8012b2a:	4602      	mov	r2, r0
 8012b2c:	4b0f      	ldr	r3, [pc, #60]	; (8012b6c <_txe_byte_release+0x70>)
 8012b2e:	681b      	ldr	r3, [r3, #0]
 8012b30:	4313      	orrs	r3, r2
 8012b32:	2b00      	cmp	r3, #0
 8012b34:	d00a      	beq.n	8012b4c <_txe_byte_release+0x50>
        {
    
            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8012b36:	f7ff ffd3 	bl	8012ae0 <_get_ipsr>
 8012b3a:	4602      	mov	r2, r0
 8012b3c:	4b0b      	ldr	r3, [pc, #44]	; (8012b6c <_txe_byte_release+0x70>)
 8012b3e:	681b      	ldr	r3, [r3, #0]
 8012b40:	4313      	orrs	r3, r2
 8012b42:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8012b46:	d201      	bcs.n	8012b4c <_txe_byte_release+0x50>
            {
        
                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8012b48:	2313      	movs	r3, #19
 8012b4a:	60fb      	str	r3, [r7, #12]
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8012b4c:	68fb      	ldr	r3, [r7, #12]
 8012b4e:	2b00      	cmp	r3, #0
 8012b50:	d103      	bne.n	8012b5a <_txe_byte_release+0x5e>
    {

        /* Call actual byte release function.  */
        status =  _tx_byte_release(memory_ptr);
 8012b52:	6878      	ldr	r0, [r7, #4]
 8012b54:	f7fd fb74 	bl	8010240 <_tx_byte_release>
 8012b58:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 8012b5a:	68fb      	ldr	r3, [r7, #12]
}
 8012b5c:	4618      	mov	r0, r3
 8012b5e:	3710      	adds	r7, #16
 8012b60:	46bd      	mov	sp, r7
 8012b62:	bd80      	pop	{r7, pc}
 8012b64:	20026064 	.word	0x20026064
 8012b68:	200261ac 	.word	0x200261ac
 8012b6c:	2000003c 	.word	0x2000003c

08012b70 <_get_ipsr>:
{
 8012b70:	b480      	push	{r7}
 8012b72:	b083      	sub	sp, #12
 8012b74:	af00      	add	r7, sp, #0
    __asm("MRS %[result], ipsr" : [result] "=r" (_ipsr) : );
 8012b76:	f3ef 8305 	mrs	r3, IPSR
 8012b7a:	607b      	str	r3, [r7, #4]
    return _ipsr;
 8012b7c:	687b      	ldr	r3, [r7, #4]
}
 8012b7e:	4618      	mov	r0, r3
 8012b80:	370c      	adds	r7, #12
 8012b82:	46bd      	mov	sp, r7
 8012b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b88:	4770      	bx	lr
	...

08012b8c <_txe_queue_create>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_queue_create(TX_QUEUE *queue_ptr, CHAR *name_ptr, UINT message_size, 
                        VOID *queue_start, ULONG queue_size, UINT queue_control_block_size)
{
 8012b8c:	b580      	push	{r7, lr}
 8012b8e:	b090      	sub	sp, #64	; 0x40
 8012b90:	af02      	add	r7, sp, #8
 8012b92:	60f8      	str	r0, [r7, #12]
 8012b94:	60b9      	str	r1, [r7, #8]
 8012b96:	607a      	str	r2, [r7, #4]
 8012b98:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8012b9a:	2300      	movs	r3, #0
 8012b9c:	637b      	str	r3, [r7, #52]	; 0x34

    /* Check for an invalid queue pointer.  */
    if (queue_ptr == TX_NULL)
 8012b9e:	68fb      	ldr	r3, [r7, #12]
 8012ba0:	2b00      	cmp	r3, #0
 8012ba2:	d102      	bne.n	8012baa <_txe_queue_create+0x1e>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 8012ba4:	2309      	movs	r3, #9
 8012ba6:	637b      	str	r3, [r7, #52]	; 0x34
 8012ba8:	e07d      	b.n	8012ca6 <_txe_queue_create+0x11a>
    }
    
    /* Now check for a valid control block size.  */
    else if (queue_control_block_size != (sizeof(TX_QUEUE)))
 8012baa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012bac:	2b38      	cmp	r3, #56	; 0x38
 8012bae:	d002      	beq.n	8012bb6 <_txe_queue_create+0x2a>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 8012bb0:	2309      	movs	r3, #9
 8012bb2:	637b      	str	r3, [r7, #52]	; 0x34
 8012bb4:	e077      	b.n	8012ca6 <_txe_queue_create+0x11a>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8012bb6:	f3ef 8310 	mrs	r3, PRIMASK
 8012bba:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8012bbc:	b672      	cpsid	i
    return(primask_value);
 8012bbe:	69fb      	ldr	r3, [r7, #28]
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8012bc0:	62bb      	str	r3, [r7, #40]	; 0x28

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8012bc2:	4b41      	ldr	r3, [pc, #260]	; (8012cc8 <_txe_queue_create+0x13c>)
 8012bc4:	681b      	ldr	r3, [r3, #0]
 8012bc6:	3301      	adds	r3, #1
 8012bc8:	4a3f      	ldr	r2, [pc, #252]	; (8012cc8 <_txe_queue_create+0x13c>)
 8012bca:	6013      	str	r3, [r2, #0]
 8012bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012bce:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8012bd0:	6a3b      	ldr	r3, [r7, #32]
 8012bd2:	f383 8810 	msr	PRIMASK, r3
}
 8012bd6:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_queue =   _tx_queue_created_ptr;
 8012bd8:	4b3c      	ldr	r3, [pc, #240]	; (8012ccc <_txe_queue_create+0x140>)
 8012bda:	681b      	ldr	r3, [r3, #0]
 8012bdc:	62fb      	str	r3, [r7, #44]	; 0x2c
        for (i = ((ULONG) 0); i < _tx_queue_created_count; i++)
 8012bde:	2300      	movs	r3, #0
 8012be0:	633b      	str	r3, [r7, #48]	; 0x30
 8012be2:	e009      	b.n	8012bf8 <_txe_queue_create+0x6c>
        {

            /* Determine if this queue matches the queue in the list.  */
            if (queue_ptr == next_queue)
 8012be4:	68fa      	ldr	r2, [r7, #12]
 8012be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012be8:	429a      	cmp	r2, r3
 8012bea:	d00b      	beq.n	8012c04 <_txe_queue_create+0x78>
            }
            else
            {
        
                /* Move to the next queue.  */
                next_queue =  next_queue -> tx_queue_created_next;
 8012bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
        for (i = ((ULONG) 0); i < _tx_queue_created_count; i++)
 8012bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012bf4:	3301      	adds	r3, #1
 8012bf6:	633b      	str	r3, [r7, #48]	; 0x30
 8012bf8:	4b35      	ldr	r3, [pc, #212]	; (8012cd0 <_txe_queue_create+0x144>)
 8012bfa:	681b      	ldr	r3, [r3, #0]
 8012bfc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012bfe:	429a      	cmp	r2, r3
 8012c00:	d3f0      	bcc.n	8012be4 <_txe_queue_create+0x58>
 8012c02:	e000      	b.n	8012c06 <_txe_queue_create+0x7a>
                break;
 8012c04:	bf00      	nop
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8012c06:	f3ef 8310 	mrs	r3, PRIMASK
 8012c0a:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8012c0c:	b672      	cpsid	i
    return(primask_value);
 8012c0e:	697b      	ldr	r3, [r7, #20]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8012c10:	62bb      	str	r3, [r7, #40]	; 0x28

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 8012c12:	4b2d      	ldr	r3, [pc, #180]	; (8012cc8 <_txe_queue_create+0x13c>)
 8012c14:	681b      	ldr	r3, [r3, #0]
 8012c16:	3b01      	subs	r3, #1
 8012c18:	4a2b      	ldr	r2, [pc, #172]	; (8012cc8 <_txe_queue_create+0x13c>)
 8012c1a:	6013      	str	r3, [r2, #0]
 8012c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c1e:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8012c20:	69bb      	ldr	r3, [r7, #24]
 8012c22:	f383 8810 	msr	PRIMASK, r3
}
 8012c26:	bf00      	nop
    
        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8012c28:	f7fe ff9c 	bl	8011b64 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate queue.  */
        if (queue_ptr == next_queue)
 8012c2c:	68fa      	ldr	r2, [r7, #12]
 8012c2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c30:	429a      	cmp	r2, r3
 8012c32:	d102      	bne.n	8012c3a <_txe_queue_create+0xae>
        {

            /* Queue is already created, return appropriate error code.  */
            status =  TX_QUEUE_ERROR;
 8012c34:	2309      	movs	r3, #9
 8012c36:	637b      	str	r3, [r7, #52]	; 0x34
 8012c38:	e035      	b.n	8012ca6 <_txe_queue_create+0x11a>
        }

        /* Check the starting address of the queue.  */
        else if (queue_start == TX_NULL)
 8012c3a:	683b      	ldr	r3, [r7, #0]
 8012c3c:	2b00      	cmp	r3, #0
 8012c3e:	d102      	bne.n	8012c46 <_txe_queue_create+0xba>
        {

            /* Invalid starting address of queue.  */
            status =  TX_PTR_ERROR;
 8012c40:	2303      	movs	r3, #3
 8012c42:	637b      	str	r3, [r7, #52]	; 0x34
 8012c44:	e02f      	b.n	8012ca6 <_txe_queue_create+0x11a>
        }

        /* Check for an invalid message size - less than 1.  */
        else if (message_size < TX_1_ULONG)
 8012c46:	687b      	ldr	r3, [r7, #4]
 8012c48:	2b00      	cmp	r3, #0
 8012c4a:	d102      	bne.n	8012c52 <_txe_queue_create+0xc6>
        {

            /* Invalid message size specified.  */
            status =  TX_SIZE_ERROR;
 8012c4c:	2305      	movs	r3, #5
 8012c4e:	637b      	str	r3, [r7, #52]	; 0x34
 8012c50:	e029      	b.n	8012ca6 <_txe_queue_create+0x11a>
        }
    
        /* Check for an invalid message size - greater than 16.  */
        else if (message_size > TX_16_ULONG)
 8012c52:	687b      	ldr	r3, [r7, #4]
 8012c54:	2b10      	cmp	r3, #16
 8012c56:	d902      	bls.n	8012c5e <_txe_queue_create+0xd2>
        {

            /* Invalid message size specified.  */
            status =  TX_SIZE_ERROR;
 8012c58:	2305      	movs	r3, #5
 8012c5a:	637b      	str	r3, [r7, #52]	; 0x34
 8012c5c:	e023      	b.n	8012ca6 <_txe_queue_create+0x11a>
        }

        /* Check on the queue size.  */
        else if ((queue_size/(sizeof(ULONG))) < message_size)
 8012c5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012c60:	089b      	lsrs	r3, r3, #2
 8012c62:	687a      	ldr	r2, [r7, #4]
 8012c64:	429a      	cmp	r2, r3
 8012c66:	d902      	bls.n	8012c6e <_txe_queue_create+0xe2>
        {

            /* Invalid queue size specified.  */
            status =  TX_SIZE_ERROR;
 8012c68:	2305      	movs	r3, #5
 8012c6a:	637b      	str	r3, [r7, #52]	; 0x34
 8012c6c:	e01b      	b.n	8012ca6 <_txe_queue_create+0x11a>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8012c6e:	4b19      	ldr	r3, [pc, #100]	; (8012cd4 <_txe_queue_create+0x148>)
 8012c70:	681b      	ldr	r3, [r3, #0]
 8012c72:	627b      	str	r3, [r7, #36]	; 0x24

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 8012c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c76:	4a18      	ldr	r2, [pc, #96]	; (8012cd8 <_txe_queue_create+0x14c>)
 8012c78:	4293      	cmp	r3, r2
 8012c7a:	d101      	bne.n	8012c80 <_txe_queue_create+0xf4>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8012c7c:	2313      	movs	r3, #19
 8012c7e:	637b      	str	r3, [r7, #52]	; 0x34
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8012c80:	f7ff ff76 	bl	8012b70 <_get_ipsr>
 8012c84:	4602      	mov	r2, r0
 8012c86:	4b15      	ldr	r3, [pc, #84]	; (8012cdc <_txe_queue_create+0x150>)
 8012c88:	681b      	ldr	r3, [r3, #0]
 8012c8a:	4313      	orrs	r3, r2
 8012c8c:	2b00      	cmp	r3, #0
 8012c8e:	d00a      	beq.n	8012ca6 <_txe_queue_create+0x11a>
            {
    
                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8012c90:	f7ff ff6e 	bl	8012b70 <_get_ipsr>
 8012c94:	4602      	mov	r2, r0
 8012c96:	4b11      	ldr	r3, [pc, #68]	; (8012cdc <_txe_queue_create+0x150>)
 8012c98:	681b      	ldr	r3, [r3, #0]
 8012c9a:	4313      	orrs	r3, r2
 8012c9c:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8012ca0:	d201      	bcs.n	8012ca6 <_txe_queue_create+0x11a>
                {
        
                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 8012ca2:	2313      	movs	r3, #19
 8012ca4:	637b      	str	r3, [r7, #52]	; 0x34
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8012ca6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012ca8:	2b00      	cmp	r3, #0
 8012caa:	d108      	bne.n	8012cbe <_txe_queue_create+0x132>
    {

        /* Call actual queue create function.  */
        status =  _tx_queue_create(queue_ptr, name_ptr, message_size, queue_start, queue_size);
 8012cac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012cae:	9300      	str	r3, [sp, #0]
 8012cb0:	683b      	ldr	r3, [r7, #0]
 8012cb2:	687a      	ldr	r2, [r7, #4]
 8012cb4:	68b9      	ldr	r1, [r7, #8]
 8012cb6:	68f8      	ldr	r0, [r7, #12]
 8012cb8:	f7fd fcce 	bl	8010658 <_tx_queue_create>
 8012cbc:	6378      	str	r0, [r7, #52]	; 0x34
    }

    /* Return completion status.  */
    return(status);
 8012cbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8012cc0:	4618      	mov	r0, r3
 8012cc2:	3738      	adds	r7, #56	; 0x38
 8012cc4:	46bd      	mov	sp, r7
 8012cc6:	bd80      	pop	{r7, pc}
 8012cc8:	200260fc 	.word	0x200260fc
 8012ccc:	20026034 	.word	0x20026034
 8012cd0:	20026038 	.word	0x20026038
 8012cd4:	20026064 	.word	0x20026064
 8012cd8:	200261ac 	.word	0x200261ac
 8012cdc:	2000003c 	.word	0x2000003c

08012ce0 <_txe_queue_flush>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_queue_flush(TX_QUEUE *queue_ptr)
{
 8012ce0:	b580      	push	{r7, lr}
 8012ce2:	b084      	sub	sp, #16
 8012ce4:	af00      	add	r7, sp, #0
 8012ce6:	6078      	str	r0, [r7, #4]

UINT        status;


    /* Check for an invalid queue pointer.  */
    if (queue_ptr == TX_NULL)
 8012ce8:	687b      	ldr	r3, [r7, #4]
 8012cea:	2b00      	cmp	r3, #0
 8012cec:	d102      	bne.n	8012cf4 <_txe_queue_flush+0x14>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 8012cee:	2309      	movs	r3, #9
 8012cf0:	60fb      	str	r3, [r7, #12]
 8012cf2:	e00b      	b.n	8012d0c <_txe_queue_flush+0x2c>
    }
    
    /* Now check for invalid queue ID.  */
    else if (queue_ptr -> tx_queue_id != TX_QUEUE_ID)
 8012cf4:	687b      	ldr	r3, [r7, #4]
 8012cf6:	681b      	ldr	r3, [r3, #0]
 8012cf8:	4a07      	ldr	r2, [pc, #28]	; (8012d18 <_txe_queue_flush+0x38>)
 8012cfa:	4293      	cmp	r3, r2
 8012cfc:	d002      	beq.n	8012d04 <_txe_queue_flush+0x24>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 8012cfe:	2309      	movs	r3, #9
 8012d00:	60fb      	str	r3, [r7, #12]
 8012d02:	e003      	b.n	8012d0c <_txe_queue_flush+0x2c>
    }
    else
    {

        /* Call actual queue flush function.  */
        status =  _tx_queue_flush(queue_ptr);
 8012d04:	6878      	ldr	r0, [r7, #4]
 8012d06:	f7fd fd19 	bl	801073c <_tx_queue_flush>
 8012d0a:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 8012d0c:	68fb      	ldr	r3, [r7, #12]
}
 8012d0e:	4618      	mov	r0, r3
 8012d10:	3710      	adds	r7, #16
 8012d12:	46bd      	mov	sp, r7
 8012d14:	bd80      	pop	{r7, pc}
 8012d16:	bf00      	nop
 8012d18:	51554555 	.word	0x51554555

08012d1c <_get_ipsr>:
{
 8012d1c:	b480      	push	{r7}
 8012d1e:	b083      	sub	sp, #12
 8012d20:	af00      	add	r7, sp, #0
    __asm("MRS %[result], ipsr" : [result] "=r" (_ipsr) : );
 8012d22:	f3ef 8305 	mrs	r3, IPSR
 8012d26:	607b      	str	r3, [r7, #4]
    return _ipsr;
 8012d28:	687b      	ldr	r3, [r7, #4]
}
 8012d2a:	4618      	mov	r0, r3
 8012d2c:	370c      	adds	r7, #12
 8012d2e:	46bd      	mov	sp, r7
 8012d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d34:	4770      	bx	lr
	...

08012d38 <_txe_queue_front_send>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_queue_front_send(TX_QUEUE *queue_ptr, VOID *source_ptr, ULONG wait_option)
{
 8012d38:	b580      	push	{r7, lr}
 8012d3a:	b086      	sub	sp, #24
 8012d3c:	af00      	add	r7, sp, #0
 8012d3e:	60f8      	str	r0, [r7, #12]
 8012d40:	60b9      	str	r1, [r7, #8]
 8012d42:	607a      	str	r2, [r7, #4]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8012d44:	2300      	movs	r3, #0
 8012d46:	617b      	str	r3, [r7, #20]

    /* Check for an invalid queue pointer.  */
    if (queue_ptr == TX_NULL)
 8012d48:	68fb      	ldr	r3, [r7, #12]
 8012d4a:	2b00      	cmp	r3, #0
 8012d4c:	d102      	bne.n	8012d54 <_txe_queue_front_send+0x1c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 8012d4e:	2309      	movs	r3, #9
 8012d50:	617b      	str	r3, [r7, #20]
 8012d52:	e024      	b.n	8012d9e <_txe_queue_front_send+0x66>
    }

    /* Now check for invalid queue ID.  */
    else if (queue_ptr -> tx_queue_id != TX_QUEUE_ID)
 8012d54:	68fb      	ldr	r3, [r7, #12]
 8012d56:	681b      	ldr	r3, [r3, #0]
 8012d58:	4a18      	ldr	r2, [pc, #96]	; (8012dbc <_txe_queue_front_send+0x84>)
 8012d5a:	4293      	cmp	r3, r2
 8012d5c:	d002      	beq.n	8012d64 <_txe_queue_front_send+0x2c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 8012d5e:	2309      	movs	r3, #9
 8012d60:	617b      	str	r3, [r7, #20]
 8012d62:	e01c      	b.n	8012d9e <_txe_queue_front_send+0x66>
    }

    /* Check for an invalid source for message.  */
    else if (source_ptr == TX_NULL)
 8012d64:	68bb      	ldr	r3, [r7, #8]
 8012d66:	2b00      	cmp	r3, #0
 8012d68:	d102      	bne.n	8012d70 <_txe_queue_front_send+0x38>
    {

        /* Null source pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 8012d6a:	2303      	movs	r3, #3
 8012d6c:	617b      	str	r3, [r7, #20]
 8012d6e:	e016      	b.n	8012d9e <_txe_queue_front_send+0x66>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of 
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 8012d70:	687b      	ldr	r3, [r7, #4]
 8012d72:	2b00      	cmp	r3, #0
 8012d74:	d013      	beq.n	8012d9e <_txe_queue_front_send+0x66>
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8012d76:	f7ff ffd1 	bl	8012d1c <_get_ipsr>
 8012d7a:	4602      	mov	r2, r0
 8012d7c:	4b10      	ldr	r3, [pc, #64]	; (8012dc0 <_txe_queue_front_send+0x88>)
 8012d7e:	681b      	ldr	r3, [r3, #0]
 8012d80:	4313      	orrs	r3, r2
 8012d82:	2b00      	cmp	r3, #0
 8012d84:	d002      	beq.n	8012d8c <_txe_queue_front_send+0x54>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 8012d86:	2304      	movs	r3, #4
 8012d88:	617b      	str	r3, [r7, #20]
 8012d8a:	e008      	b.n	8012d9e <_txe_queue_front_send+0x66>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {
            
                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 8012d8c:	4b0d      	ldr	r3, [pc, #52]	; (8012dc4 <_txe_queue_front_send+0x8c>)
 8012d8e:	681b      	ldr	r3, [r3, #0]
 8012d90:	613b      	str	r3, [r7, #16]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 8012d92:	693b      	ldr	r3, [r7, #16]
 8012d94:	4a0c      	ldr	r2, [pc, #48]	; (8012dc8 <_txe_queue_front_send+0x90>)
 8012d96:	4293      	cmp	r3, r2
 8012d98:	d101      	bne.n	8012d9e <_txe_queue_front_send+0x66>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 8012d9a:	2304      	movs	r3, #4
 8012d9c:	617b      	str	r3, [r7, #20]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8012d9e:	697b      	ldr	r3, [r7, #20]
 8012da0:	2b00      	cmp	r3, #0
 8012da2:	d105      	bne.n	8012db0 <_txe_queue_front_send+0x78>
    {

        /* Call actual queue front send function.  */
        status =  _tx_queue_front_send(queue_ptr, source_ptr, wait_option);
 8012da4:	687a      	ldr	r2, [r7, #4]
 8012da6:	68b9      	ldr	r1, [r7, #8]
 8012da8:	68f8      	ldr	r0, [r7, #12]
 8012daa:	f7fd fd4f 	bl	801084c <_tx_queue_front_send>
 8012dae:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 8012db0:	697b      	ldr	r3, [r7, #20]
}
 8012db2:	4618      	mov	r0, r3
 8012db4:	3718      	adds	r7, #24
 8012db6:	46bd      	mov	sp, r7
 8012db8:	bd80      	pop	{r7, pc}
 8012dba:	bf00      	nop
 8012dbc:	51554555 	.word	0x51554555
 8012dc0:	2000003c 	.word	0x2000003c
 8012dc4:	20026064 	.word	0x20026064
 8012dc8:	200261ac 	.word	0x200261ac

08012dcc <_txe_queue_info_get>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_queue_info_get(TX_QUEUE *queue_ptr, CHAR **name, ULONG *enqueued, ULONG *available_storage,
                    TX_THREAD **first_suspended, ULONG *suspended_count, TX_QUEUE **next_queue)
{
 8012dcc:	b580      	push	{r7, lr}
 8012dce:	b08a      	sub	sp, #40	; 0x28
 8012dd0:	af04      	add	r7, sp, #16
 8012dd2:	60f8      	str	r0, [r7, #12]
 8012dd4:	60b9      	str	r1, [r7, #8]
 8012dd6:	607a      	str	r2, [r7, #4]
 8012dd8:	603b      	str	r3, [r7, #0]

UINT    status;


    /* Check for an invalid queue pointer.  */
    if (queue_ptr == TX_NULL)
 8012dda:	68fb      	ldr	r3, [r7, #12]
 8012ddc:	2b00      	cmp	r3, #0
 8012dde:	d102      	bne.n	8012de6 <_txe_queue_info_get+0x1a>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 8012de0:	2309      	movs	r3, #9
 8012de2:	617b      	str	r3, [r7, #20]
 8012de4:	e014      	b.n	8012e10 <_txe_queue_info_get+0x44>
    }
    
    /* Now check for a valid queue ID.  */
    else if (queue_ptr -> tx_queue_id != TX_QUEUE_ID)
 8012de6:	68fb      	ldr	r3, [r7, #12]
 8012de8:	681b      	ldr	r3, [r3, #0]
 8012dea:	4a0c      	ldr	r2, [pc, #48]	; (8012e1c <_txe_queue_info_get+0x50>)
 8012dec:	4293      	cmp	r3, r2
 8012dee:	d002      	beq.n	8012df6 <_txe_queue_info_get+0x2a>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 8012df0:	2309      	movs	r3, #9
 8012df2:	617b      	str	r3, [r7, #20]
 8012df4:	e00c      	b.n	8012e10 <_txe_queue_info_get+0x44>
    }
    else
    {

        /* Otherwise, call the actual queue information get service.  */
        status =  _tx_queue_info_get(queue_ptr, name, enqueued, available_storage, first_suspended, 
 8012df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012df8:	9302      	str	r3, [sp, #8]
 8012dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012dfc:	9301      	str	r3, [sp, #4]
 8012dfe:	6a3b      	ldr	r3, [r7, #32]
 8012e00:	9300      	str	r3, [sp, #0]
 8012e02:	683b      	ldr	r3, [r7, #0]
 8012e04:	687a      	ldr	r2, [r7, #4]
 8012e06:	68b9      	ldr	r1, [r7, #8]
 8012e08:	68f8      	ldr	r0, [r7, #12]
 8012e0a:	f7fd fe5b 	bl	8010ac4 <_tx_queue_info_get>
 8012e0e:	6178      	str	r0, [r7, #20]
                                                                    suspended_count, next_queue);
    }

    /* Return completion status.  */
    return(status);
 8012e10:	697b      	ldr	r3, [r7, #20]
}
 8012e12:	4618      	mov	r0, r3
 8012e14:	3718      	adds	r7, #24
 8012e16:	46bd      	mov	sp, r7
 8012e18:	bd80      	pop	{r7, pc}
 8012e1a:	bf00      	nop
 8012e1c:	51554555 	.word	0x51554555

08012e20 <_get_ipsr>:
{
 8012e20:	b480      	push	{r7}
 8012e22:	b083      	sub	sp, #12
 8012e24:	af00      	add	r7, sp, #0
    __asm("MRS %[result], ipsr" : [result] "=r" (_ipsr) : );
 8012e26:	f3ef 8305 	mrs	r3, IPSR
 8012e2a:	607b      	str	r3, [r7, #4]
    return _ipsr;
 8012e2c:	687b      	ldr	r3, [r7, #4]
}
 8012e2e:	4618      	mov	r0, r3
 8012e30:	370c      	adds	r7, #12
 8012e32:	46bd      	mov	sp, r7
 8012e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e38:	4770      	bx	lr
	...

08012e3c <_txe_queue_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_queue_receive(TX_QUEUE *queue_ptr, VOID *destination_ptr, ULONG wait_option)
{
 8012e3c:	b580      	push	{r7, lr}
 8012e3e:	b086      	sub	sp, #24
 8012e40:	af00      	add	r7, sp, #0
 8012e42:	60f8      	str	r0, [r7, #12]
 8012e44:	60b9      	str	r1, [r7, #8]
 8012e46:	607a      	str	r2, [r7, #4]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8012e48:	2300      	movs	r3, #0
 8012e4a:	617b      	str	r3, [r7, #20]

    /* Check for an invalid queue pointer.  */
    if (queue_ptr == TX_NULL)
 8012e4c:	68fb      	ldr	r3, [r7, #12]
 8012e4e:	2b00      	cmp	r3, #0
 8012e50:	d102      	bne.n	8012e58 <_txe_queue_receive+0x1c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 8012e52:	2309      	movs	r3, #9
 8012e54:	617b      	str	r3, [r7, #20]
 8012e56:	e024      	b.n	8012ea2 <_txe_queue_receive+0x66>
    }
    
    /* Now check for invalid queue ID.  */
    else if (queue_ptr -> tx_queue_id != TX_QUEUE_ID)
 8012e58:	68fb      	ldr	r3, [r7, #12]
 8012e5a:	681b      	ldr	r3, [r3, #0]
 8012e5c:	4a18      	ldr	r2, [pc, #96]	; (8012ec0 <_txe_queue_receive+0x84>)
 8012e5e:	4293      	cmp	r3, r2
 8012e60:	d002      	beq.n	8012e68 <_txe_queue_receive+0x2c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 8012e62:	2309      	movs	r3, #9
 8012e64:	617b      	str	r3, [r7, #20]
 8012e66:	e01c      	b.n	8012ea2 <_txe_queue_receive+0x66>
    }

    /* Check for an invalid destination for message.  */
    else if (destination_ptr == TX_NULL)
 8012e68:	68bb      	ldr	r3, [r7, #8]
 8012e6a:	2b00      	cmp	r3, #0
 8012e6c:	d102      	bne.n	8012e74 <_txe_queue_receive+0x38>
    {

        /* Null destination pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 8012e6e:	2303      	movs	r3, #3
 8012e70:	617b      	str	r3, [r7, #20]
 8012e72:	e016      	b.n	8012ea2 <_txe_queue_receive+0x66>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of 
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 8012e74:	687b      	ldr	r3, [r7, #4]
 8012e76:	2b00      	cmp	r3, #0
 8012e78:	d013      	beq.n	8012ea2 <_txe_queue_receive+0x66>
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8012e7a:	f7ff ffd1 	bl	8012e20 <_get_ipsr>
 8012e7e:	4602      	mov	r2, r0
 8012e80:	4b10      	ldr	r3, [pc, #64]	; (8012ec4 <_txe_queue_receive+0x88>)
 8012e82:	681b      	ldr	r3, [r3, #0]
 8012e84:	4313      	orrs	r3, r2
 8012e86:	2b00      	cmp	r3, #0
 8012e88:	d002      	beq.n	8012e90 <_txe_queue_receive+0x54>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 8012e8a:	2304      	movs	r3, #4
 8012e8c:	617b      	str	r3, [r7, #20]
 8012e8e:	e008      	b.n	8012ea2 <_txe_queue_receive+0x66>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 8012e90:	4b0d      	ldr	r3, [pc, #52]	; (8012ec8 <_txe_queue_receive+0x8c>)
 8012e92:	681b      	ldr	r3, [r3, #0]
 8012e94:	613b      	str	r3, [r7, #16]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 8012e96:	693b      	ldr	r3, [r7, #16]
 8012e98:	4a0c      	ldr	r2, [pc, #48]	; (8012ecc <_txe_queue_receive+0x90>)
 8012e9a:	4293      	cmp	r3, r2
 8012e9c:	d101      	bne.n	8012ea2 <_txe_queue_receive+0x66>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 8012e9e:	2304      	movs	r3, #4
 8012ea0:	617b      	str	r3, [r7, #20]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8012ea2:	697b      	ldr	r3, [r7, #20]
 8012ea4:	2b00      	cmp	r3, #0
 8012ea6:	d105      	bne.n	8012eb4 <_txe_queue_receive+0x78>
    {

        /* Call actual queue receive function.  */
        status =  _tx_queue_receive(queue_ptr, destination_ptr, wait_option);
 8012ea8:	687a      	ldr	r2, [r7, #4]
 8012eaa:	68b9      	ldr	r1, [r7, #8]
 8012eac:	68f8      	ldr	r0, [r7, #12]
 8012eae:	f7fd fe4d 	bl	8010b4c <_tx_queue_receive>
 8012eb2:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 8012eb4:	697b      	ldr	r3, [r7, #20]
}
 8012eb6:	4618      	mov	r0, r3
 8012eb8:	3718      	adds	r7, #24
 8012eba:	46bd      	mov	sp, r7
 8012ebc:	bd80      	pop	{r7, pc}
 8012ebe:	bf00      	nop
 8012ec0:	51554555 	.word	0x51554555
 8012ec4:	2000003c 	.word	0x2000003c
 8012ec8:	20026064 	.word	0x20026064
 8012ecc:	200261ac 	.word	0x200261ac

08012ed0 <_get_ipsr>:
{
 8012ed0:	b480      	push	{r7}
 8012ed2:	b083      	sub	sp, #12
 8012ed4:	af00      	add	r7, sp, #0
    __asm("MRS %[result], ipsr" : [result] "=r" (_ipsr) : );
 8012ed6:	f3ef 8305 	mrs	r3, IPSR
 8012eda:	607b      	str	r3, [r7, #4]
    return _ipsr;
 8012edc:	687b      	ldr	r3, [r7, #4]
}
 8012ede:	4618      	mov	r0, r3
 8012ee0:	370c      	adds	r7, #12
 8012ee2:	46bd      	mov	sp, r7
 8012ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ee8:	4770      	bx	lr
	...

08012eec <_txe_queue_send>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_queue_send(TX_QUEUE *queue_ptr, VOID *source_ptr, ULONG wait_option)
{
 8012eec:	b580      	push	{r7, lr}
 8012eee:	b086      	sub	sp, #24
 8012ef0:	af00      	add	r7, sp, #0
 8012ef2:	60f8      	str	r0, [r7, #12]
 8012ef4:	60b9      	str	r1, [r7, #8]
 8012ef6:	607a      	str	r2, [r7, #4]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8012ef8:	2300      	movs	r3, #0
 8012efa:	617b      	str	r3, [r7, #20]

    /* Check for an invalid queue pointer.  */
    if (queue_ptr == TX_NULL)
 8012efc:	68fb      	ldr	r3, [r7, #12]
 8012efe:	2b00      	cmp	r3, #0
 8012f00:	d102      	bne.n	8012f08 <_txe_queue_send+0x1c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 8012f02:	2309      	movs	r3, #9
 8012f04:	617b      	str	r3, [r7, #20]
 8012f06:	e024      	b.n	8012f52 <_txe_queue_send+0x66>
    }
    
    /* Now check for invalid queue ID.  */
    else if (queue_ptr -> tx_queue_id != TX_QUEUE_ID)
 8012f08:	68fb      	ldr	r3, [r7, #12]
 8012f0a:	681b      	ldr	r3, [r3, #0]
 8012f0c:	4a18      	ldr	r2, [pc, #96]	; (8012f70 <_txe_queue_send+0x84>)
 8012f0e:	4293      	cmp	r3, r2
 8012f10:	d002      	beq.n	8012f18 <_txe_queue_send+0x2c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 8012f12:	2309      	movs	r3, #9
 8012f14:	617b      	str	r3, [r7, #20]
 8012f16:	e01c      	b.n	8012f52 <_txe_queue_send+0x66>
    }

    /* Check for an invalid source for message.  */
    else if (source_ptr == TX_NULL)
 8012f18:	68bb      	ldr	r3, [r7, #8]
 8012f1a:	2b00      	cmp	r3, #0
 8012f1c:	d102      	bne.n	8012f24 <_txe_queue_send+0x38>
    {

        /* Null source pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 8012f1e:	2303      	movs	r3, #3
 8012f20:	617b      	str	r3, [r7, #20]
 8012f22:	e016      	b.n	8012f52 <_txe_queue_send+0x66>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of 
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 8012f24:	687b      	ldr	r3, [r7, #4]
 8012f26:	2b00      	cmp	r3, #0
 8012f28:	d013      	beq.n	8012f52 <_txe_queue_send+0x66>
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8012f2a:	f7ff ffd1 	bl	8012ed0 <_get_ipsr>
 8012f2e:	4602      	mov	r2, r0
 8012f30:	4b10      	ldr	r3, [pc, #64]	; (8012f74 <_txe_queue_send+0x88>)
 8012f32:	681b      	ldr	r3, [r3, #0]
 8012f34:	4313      	orrs	r3, r2
 8012f36:	2b00      	cmp	r3, #0
 8012f38:	d002      	beq.n	8012f40 <_txe_queue_send+0x54>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 8012f3a:	2304      	movs	r3, #4
 8012f3c:	617b      	str	r3, [r7, #20]
 8012f3e:	e008      	b.n	8012f52 <_txe_queue_send+0x66>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {
    
                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 8012f40:	4b0d      	ldr	r3, [pc, #52]	; (8012f78 <_txe_queue_send+0x8c>)
 8012f42:	681b      	ldr	r3, [r3, #0]
 8012f44:	613b      	str	r3, [r7, #16]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 8012f46:	693b      	ldr	r3, [r7, #16]
 8012f48:	4a0c      	ldr	r2, [pc, #48]	; (8012f7c <_txe_queue_send+0x90>)
 8012f4a:	4293      	cmp	r3, r2
 8012f4c:	d101      	bne.n	8012f52 <_txe_queue_send+0x66>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 8012f4e:	2304      	movs	r3, #4
 8012f50:	617b      	str	r3, [r7, #20]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8012f52:	697b      	ldr	r3, [r7, #20]
 8012f54:	2b00      	cmp	r3, #0
 8012f56:	d105      	bne.n	8012f64 <_txe_queue_send+0x78>
    {

        /* Call actual queue send function.  */
        status =  _tx_queue_send(queue_ptr, source_ptr, wait_option);
 8012f58:	687a      	ldr	r2, [r7, #4]
 8012f5a:	68b9      	ldr	r1, [r7, #8]
 8012f5c:	68f8      	ldr	r0, [r7, #12]
 8012f5e:	f7fd ffbb 	bl	8010ed8 <_tx_queue_send>
 8012f62:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 8012f64:	697b      	ldr	r3, [r7, #20]
}
 8012f66:	4618      	mov	r0, r3
 8012f68:	3718      	adds	r7, #24
 8012f6a:	46bd      	mov	sp, r7
 8012f6c:	bd80      	pop	{r7, pc}
 8012f6e:	bf00      	nop
 8012f70:	51554555 	.word	0x51554555
 8012f74:	2000003c 	.word	0x2000003c
 8012f78:	20026064 	.word	0x20026064
 8012f7c:	200261ac 	.word	0x200261ac

08012f80 <_get_ipsr>:
{
 8012f80:	b480      	push	{r7}
 8012f82:	b083      	sub	sp, #12
 8012f84:	af00      	add	r7, sp, #0
    __asm("MRS %[result], ipsr" : [result] "=r" (_ipsr) : );
 8012f86:	f3ef 8305 	mrs	r3, IPSR
 8012f8a:	607b      	str	r3, [r7, #4]
    return _ipsr;
 8012f8c:	687b      	ldr	r3, [r7, #4]
}
 8012f8e:	4618      	mov	r0, r3
 8012f90:	370c      	adds	r7, #12
 8012f92:	46bd      	mov	sp, r7
 8012f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f98:	4770      	bx	lr
	...

08012f9c <_txe_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count, UINT semaphore_control_block_size)
{
 8012f9c:	b580      	push	{r7, lr}
 8012f9e:	b08e      	sub	sp, #56	; 0x38
 8012fa0:	af00      	add	r7, sp, #0
 8012fa2:	60f8      	str	r0, [r7, #12]
 8012fa4:	60b9      	str	r1, [r7, #8]
 8012fa6:	607a      	str	r2, [r7, #4]
 8012fa8:	603b      	str	r3, [r7, #0]
TX_THREAD           *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8012faa:	2300      	movs	r3, #0
 8012fac:	637b      	str	r3, [r7, #52]	; 0x34

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 8012fae:	68fb      	ldr	r3, [r7, #12]
 8012fb0:	2b00      	cmp	r3, #0
 8012fb2:	d102      	bne.n	8012fba <_txe_semaphore_create+0x1e>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8012fb4:	230c      	movs	r3, #12
 8012fb6:	637b      	str	r3, [r7, #52]	; 0x34
 8012fb8:	e050      	b.n	801305c <_txe_semaphore_create+0xc0>
    }

    /* Now check for a valid semaphore ID.  */
    else if (semaphore_control_block_size != (sizeof(TX_SEMAPHORE)))
 8012fba:	683b      	ldr	r3, [r7, #0]
 8012fbc:	2b1c      	cmp	r3, #28
 8012fbe:	d002      	beq.n	8012fc6 <_txe_semaphore_create+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8012fc0:	230c      	movs	r3, #12
 8012fc2:	637b      	str	r3, [r7, #52]	; 0x34
 8012fc4:	e04a      	b.n	801305c <_txe_semaphore_create+0xc0>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8012fc6:	f3ef 8310 	mrs	r3, PRIMASK
 8012fca:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8012fcc:	b672      	cpsid	i
    return(primask_value);
 8012fce:	69fb      	ldr	r3, [r7, #28]
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8012fd0:	62bb      	str	r3, [r7, #40]	; 0x28

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8012fd2:	4b34      	ldr	r3, [pc, #208]	; (80130a4 <_txe_semaphore_create+0x108>)
 8012fd4:	681b      	ldr	r3, [r3, #0]
 8012fd6:	3301      	adds	r3, #1
 8012fd8:	4a32      	ldr	r2, [pc, #200]	; (80130a4 <_txe_semaphore_create+0x108>)
 8012fda:	6013      	str	r3, [r2, #0]
 8012fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012fde:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8012fe0:	6a3b      	ldr	r3, [r7, #32]
 8012fe2:	f383 8810 	msr	PRIMASK, r3
}
 8012fe6:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_semaphore =  _tx_semaphore_created_ptr;
 8012fe8:	4b2f      	ldr	r3, [pc, #188]	; (80130a8 <_txe_semaphore_create+0x10c>)
 8012fea:	681b      	ldr	r3, [r3, #0]
 8012fec:	62fb      	str	r3, [r7, #44]	; 0x2c
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 8012fee:	2300      	movs	r3, #0
 8012ff0:	633b      	str	r3, [r7, #48]	; 0x30
 8012ff2:	e009      	b.n	8013008 <_txe_semaphore_create+0x6c>
        {

            /* Determine if this semaphore matches the current semaphore in the list.  */
            if (semaphore_ptr == next_semaphore)
 8012ff4:	68fa      	ldr	r2, [r7, #12]
 8012ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ff8:	429a      	cmp	r2, r3
 8012ffa:	d00b      	beq.n	8013014 <_txe_semaphore_create+0x78>
            }
            else
            {
            
                /* Move to next semaphore.  */
                next_semaphore =  next_semaphore -> tx_semaphore_created_next;
 8012ffc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ffe:	695b      	ldr	r3, [r3, #20]
 8013000:	62fb      	str	r3, [r7, #44]	; 0x2c
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 8013002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013004:	3301      	adds	r3, #1
 8013006:	633b      	str	r3, [r7, #48]	; 0x30
 8013008:	4b28      	ldr	r3, [pc, #160]	; (80130ac <_txe_semaphore_create+0x110>)
 801300a:	681b      	ldr	r3, [r3, #0]
 801300c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801300e:	429a      	cmp	r2, r3
 8013010:	d3f0      	bcc.n	8012ff4 <_txe_semaphore_create+0x58>
 8013012:	e000      	b.n	8013016 <_txe_semaphore_create+0x7a>
                break;
 8013014:	bf00      	nop
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8013016:	f3ef 8310 	mrs	r3, PRIMASK
 801301a:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" CPSID i" : : : "memory" );
 801301c:	b672      	cpsid	i
    return(primask_value);
 801301e:	697b      	ldr	r3, [r7, #20]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8013020:	62bb      	str	r3, [r7, #40]	; 0x28

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 8013022:	4b20      	ldr	r3, [pc, #128]	; (80130a4 <_txe_semaphore_create+0x108>)
 8013024:	681b      	ldr	r3, [r3, #0]
 8013026:	3b01      	subs	r3, #1
 8013028:	4a1e      	ldr	r2, [pc, #120]	; (80130a4 <_txe_semaphore_create+0x108>)
 801302a:	6013      	str	r3, [r2, #0]
 801302c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801302e:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8013030:	69bb      	ldr	r3, [r7, #24]
 8013032:	f383 8810 	msr	PRIMASK, r3
}
 8013036:	bf00      	nop
    
        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8013038:	f7fe fd94 	bl	8011b64 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate semaphore.  */
        if (semaphore_ptr == next_semaphore)
 801303c:	68fa      	ldr	r2, [r7, #12]
 801303e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013040:	429a      	cmp	r2, r3
 8013042:	d102      	bne.n	801304a <_txe_semaphore_create+0xae>
        {

            /* Semaphore is already created, return appropriate error code.  */
            status =  TX_SEMAPHORE_ERROR;
 8013044:	230c      	movs	r3, #12
 8013046:	637b      	str	r3, [r7, #52]	; 0x34
 8013048:	e008      	b.n	801305c <_txe_semaphore_create+0xc0>
#ifndef TX_TIMER_PROCESS_IN_ISR
        else
        {
        
            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 801304a:	4b19      	ldr	r3, [pc, #100]	; (80130b0 <_txe_semaphore_create+0x114>)
 801304c:	681b      	ldr	r3, [r3, #0]
 801304e:	627b      	str	r3, [r7, #36]	; 0x24

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 8013050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013052:	4a18      	ldr	r2, [pc, #96]	; (80130b4 <_txe_semaphore_create+0x118>)
 8013054:	4293      	cmp	r3, r2
 8013056:	d101      	bne.n	801305c <_txe_semaphore_create+0xc0>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8013058:	2313      	movs	r3, #19
 801305a:	637b      	str	r3, [r7, #52]	; 0x34
        }
#endif
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 801305c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801305e:	2b00      	cmp	r3, #0
 8013060:	d112      	bne.n	8013088 <_txe_semaphore_create+0xec>
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8013062:	f7ff ff8d 	bl	8012f80 <_get_ipsr>
 8013066:	4602      	mov	r2, r0
 8013068:	4b13      	ldr	r3, [pc, #76]	; (80130b8 <_txe_semaphore_create+0x11c>)
 801306a:	681b      	ldr	r3, [r3, #0]
 801306c:	4313      	orrs	r3, r2
 801306e:	2b00      	cmp	r3, #0
 8013070:	d00a      	beq.n	8013088 <_txe_semaphore_create+0xec>
        {
    
            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8013072:	f7ff ff85 	bl	8012f80 <_get_ipsr>
 8013076:	4602      	mov	r2, r0
 8013078:	4b0f      	ldr	r3, [pc, #60]	; (80130b8 <_txe_semaphore_create+0x11c>)
 801307a:	681b      	ldr	r3, [r3, #0]
 801307c:	4313      	orrs	r3, r2
 801307e:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8013082:	d201      	bcs.n	8013088 <_txe_semaphore_create+0xec>
            {
        
                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8013084:	2313      	movs	r3, #19
 8013086:	637b      	str	r3, [r7, #52]	; 0x34
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8013088:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801308a:	2b00      	cmp	r3, #0
 801308c:	d105      	bne.n	801309a <_txe_semaphore_create+0xfe>
    {

        /* Call actual semaphore create function.  */
        status =  _tx_semaphore_create(semaphore_ptr, name_ptr, initial_count);
 801308e:	687a      	ldr	r2, [r7, #4]
 8013090:	68b9      	ldr	r1, [r7, #8]
 8013092:	68f8      	ldr	r0, [r7, #12]
 8013094:	f7fe f8c2 	bl	801121c <_tx_semaphore_create>
 8013098:	6378      	str	r0, [r7, #52]	; 0x34
    }

    /* Return completion status.  */
    return(status);
 801309a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801309c:	4618      	mov	r0, r3
 801309e:	3738      	adds	r7, #56	; 0x38
 80130a0:	46bd      	mov	sp, r7
 80130a2:	bd80      	pop	{r7, pc}
 80130a4:	200260fc 	.word	0x200260fc
 80130a8:	2002602c 	.word	0x2002602c
 80130ac:	20026030 	.word	0x20026030
 80130b0:	20026064 	.word	0x20026064
 80130b4:	200261ac 	.word	0x200261ac
 80130b8:	2000003c 	.word	0x2000003c

080130bc <_get_ipsr>:
{
 80130bc:	b480      	push	{r7}
 80130be:	b083      	sub	sp, #12
 80130c0:	af00      	add	r7, sp, #0
    __asm("MRS %[result], ipsr" : [result] "=r" (_ipsr) : );
 80130c2:	f3ef 8305 	mrs	r3, IPSR
 80130c6:	607b      	str	r3, [r7, #4]
    return _ipsr;
 80130c8:	687b      	ldr	r3, [r7, #4]
}
 80130ca:	4618      	mov	r0, r3
 80130cc:	370c      	adds	r7, #12
 80130ce:	46bd      	mov	sp, r7
 80130d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130d4:	4770      	bx	lr
	...

080130d8 <_txe_semaphore_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 80130d8:	b580      	push	{r7, lr}
 80130da:	b084      	sub	sp, #16
 80130dc:	af00      	add	r7, sp, #0
 80130de:	6078      	str	r0, [r7, #4]
 80130e0:	6039      	str	r1, [r7, #0]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 80130e2:	2300      	movs	r3, #0
 80130e4:	60fb      	str	r3, [r7, #12]

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 80130e6:	687b      	ldr	r3, [r7, #4]
 80130e8:	2b00      	cmp	r3, #0
 80130ea:	d102      	bne.n	80130f2 <_txe_semaphore_get+0x1a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 80130ec:	230c      	movs	r3, #12
 80130ee:	60fb      	str	r3, [r7, #12]
 80130f0:	e01e      	b.n	8013130 <_txe_semaphore_get+0x58>
    }
    
    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 80130f2:	687b      	ldr	r3, [r7, #4]
 80130f4:	681b      	ldr	r3, [r3, #0]
 80130f6:	4a15      	ldr	r2, [pc, #84]	; (801314c <_txe_semaphore_get+0x74>)
 80130f8:	4293      	cmp	r3, r2
 80130fa:	d002      	beq.n	8013102 <_txe_semaphore_get+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 80130fc:	230c      	movs	r3, #12
 80130fe:	60fb      	str	r3, [r7, #12]
 8013100:	e016      	b.n	8013130 <_txe_semaphore_get+0x58>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of 
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 8013102:	683b      	ldr	r3, [r7, #0]
 8013104:	2b00      	cmp	r3, #0
 8013106:	d013      	beq.n	8013130 <_txe_semaphore_get+0x58>
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8013108:	f7ff ffd8 	bl	80130bc <_get_ipsr>
 801310c:	4602      	mov	r2, r0
 801310e:	4b10      	ldr	r3, [pc, #64]	; (8013150 <_txe_semaphore_get+0x78>)
 8013110:	681b      	ldr	r3, [r3, #0]
 8013112:	4313      	orrs	r3, r2
 8013114:	2b00      	cmp	r3, #0
 8013116:	d002      	beq.n	801311e <_txe_semaphore_get+0x46>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 8013118:	2304      	movs	r3, #4
 801311a:	60fb      	str	r3, [r7, #12]
 801311c:	e008      	b.n	8013130 <_txe_semaphore_get+0x58>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {
            
                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 801311e:	4b0d      	ldr	r3, [pc, #52]	; (8013154 <_txe_semaphore_get+0x7c>)
 8013120:	681b      	ldr	r3, [r3, #0]
 8013122:	60bb      	str	r3, [r7, #8]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 8013124:	68bb      	ldr	r3, [r7, #8]
 8013126:	4a0c      	ldr	r2, [pc, #48]	; (8013158 <_txe_semaphore_get+0x80>)
 8013128:	4293      	cmp	r3, r2
 801312a:	d101      	bne.n	8013130 <_txe_semaphore_get+0x58>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 801312c:	2304      	movs	r3, #4
 801312e:	60fb      	str	r3, [r7, #12]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8013130:	68fb      	ldr	r3, [r7, #12]
 8013132:	2b00      	cmp	r3, #0
 8013134:	d104      	bne.n	8013140 <_txe_semaphore_get+0x68>
    {

        /* Call actual get semaphore function.  */
        status =  _tx_semaphore_get(semaphore_ptr, wait_option);
 8013136:	6839      	ldr	r1, [r7, #0]
 8013138:	6878      	ldr	r0, [r7, #4]
 801313a:	f7fe f8bf 	bl	80112bc <_tx_semaphore_get>
 801313e:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 8013140:	68fb      	ldr	r3, [r7, #12]
}
 8013142:	4618      	mov	r0, r3
 8013144:	3710      	adds	r7, #16
 8013146:	46bd      	mov	sp, r7
 8013148:	bd80      	pop	{r7, pc}
 801314a:	bf00      	nop
 801314c:	53454d41 	.word	0x53454d41
 8013150:	2000003c 	.word	0x2000003c
 8013154:	20026064 	.word	0x20026064
 8013158:	200261ac 	.word	0x200261ac

0801315c <_txe_semaphore_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_put(TX_SEMAPHORE *semaphore_ptr)
{
 801315c:	b580      	push	{r7, lr}
 801315e:	b084      	sub	sp, #16
 8013160:	af00      	add	r7, sp, #0
 8013162:	6078      	str	r0, [r7, #4]

UINT        status;


    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 8013164:	687b      	ldr	r3, [r7, #4]
 8013166:	2b00      	cmp	r3, #0
 8013168:	d102      	bne.n	8013170 <_txe_semaphore_put+0x14>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 801316a:	230c      	movs	r3, #12
 801316c:	60fb      	str	r3, [r7, #12]
 801316e:	e00b      	b.n	8013188 <_txe_semaphore_put+0x2c>
    }
    
    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 8013170:	687b      	ldr	r3, [r7, #4]
 8013172:	681b      	ldr	r3, [r3, #0]
 8013174:	4a07      	ldr	r2, [pc, #28]	; (8013194 <_txe_semaphore_put+0x38>)
 8013176:	4293      	cmp	r3, r2
 8013178:	d002      	beq.n	8013180 <_txe_semaphore_put+0x24>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 801317a:	230c      	movs	r3, #12
 801317c:	60fb      	str	r3, [r7, #12]
 801317e:	e003      	b.n	8013188 <_txe_semaphore_put+0x2c>
    }
    else
    {

        /* Call actual put semaphore function.  */
        status =  _tx_semaphore_put(semaphore_ptr);
 8013180:	6878      	ldr	r0, [r7, #4]
 8013182:	f7fe f92b 	bl	80113dc <_tx_semaphore_put>
 8013186:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 8013188:	68fb      	ldr	r3, [r7, #12]
}
 801318a:	4618      	mov	r0, r3
 801318c:	3710      	adds	r7, #16
 801318e:	46bd      	mov	sp, r7
 8013190:	bd80      	pop	{r7, pc}
 8013192:	bf00      	nop
 8013194:	53454d41 	.word	0x53454d41

08013198 <_get_ipsr>:
{
 8013198:	b480      	push	{r7}
 801319a:	b083      	sub	sp, #12
 801319c:	af00      	add	r7, sp, #0
    __asm("MRS %[result], ipsr" : [result] "=r" (_ipsr) : );
 801319e:	f3ef 8305 	mrs	r3, IPSR
 80131a2:	607b      	str	r3, [r7, #4]
    return _ipsr;
 80131a4:	687b      	ldr	r3, [r7, #4]
}
 80131a6:	4618      	mov	r0, r3
 80131a8:	370c      	adds	r7, #12
 80131aa:	46bd      	mov	sp, r7
 80131ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131b0:	4770      	bx	lr
	...

080131b4 <_txe_thread_create>:
UINT    _txe_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, 
                VOID (*entry_function)(ULONG id), ULONG entry_input,
                VOID *stack_start, ULONG stack_size, 
                UINT priority, UINT preempt_threshold,
                ULONG time_slice, UINT auto_start, UINT thread_control_block_size)
{
 80131b4:	b580      	push	{r7, lr}
 80131b6:	b096      	sub	sp, #88	; 0x58
 80131b8:	af06      	add	r7, sp, #24
 80131ba:	60f8      	str	r0, [r7, #12]
 80131bc:	60b9      	str	r1, [r7, #8]
 80131be:	607a      	str	r2, [r7, #4]
 80131c0:	603b      	str	r3, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 80131c2:	2300      	movs	r3, #0
 80131c4:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 80131c6:	68fb      	ldr	r3, [r7, #12]
 80131c8:	2b00      	cmp	r3, #0
 80131ca:	d102      	bne.n	80131d2 <_txe_thread_create+0x1e>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 80131cc:	230e      	movs	r3, #14
 80131ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80131d0:	e0b5      	b.n	801333e <_txe_thread_create+0x18a>
    }

    /* Now check for invalid thread control block size.  */
    else if (thread_control_block_size != (sizeof(TX_THREAD)))
 80131d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80131d4:	2bb0      	cmp	r3, #176	; 0xb0
 80131d6:	d002      	beq.n	80131de <_txe_thread_create+0x2a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 80131d8:	230e      	movs	r3, #14
 80131da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80131dc:	e0af      	b.n	801333e <_txe_thread_create+0x18a>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80131de:	f3ef 8310 	mrs	r3, PRIMASK
 80131e2:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 80131e4:	b672      	cpsid	i
    return(primask_value);
 80131e6:	69bb      	ldr	r3, [r7, #24]
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 80131e8:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 80131ea:	4b62      	ldr	r3, [pc, #392]	; (8013374 <_txe_thread_create+0x1c0>)
 80131ec:	681b      	ldr	r3, [r3, #0]
 80131ee:	3301      	adds	r3, #1
 80131f0:	4a60      	ldr	r2, [pc, #384]	; (8013374 <_txe_thread_create+0x1c0>)
 80131f2:	6013      	str	r3, [r2, #0]
 80131f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131f6:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80131f8:	69fb      	ldr	r3, [r7, #28]
 80131fa:	f383 8810 	msr	PRIMASK, r3
}
 80131fe:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        break_flag =   TX_FALSE;
 8013200:	2300      	movs	r3, #0
 8013202:	63bb      	str	r3, [r7, #56]	; 0x38
        next_thread =  _tx_thread_created_ptr;
 8013204:	4b5c      	ldr	r3, [pc, #368]	; (8013378 <_txe_thread_create+0x1c4>)
 8013206:	681b      	ldr	r3, [r3, #0]
 8013208:	633b      	str	r3, [r7, #48]	; 0x30
        work_ptr =     TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 801320a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801320c:	62bb      	str	r3, [r7, #40]	; 0x28
        work_ptr =     TX_UCHAR_POINTER_ADD(work_ptr, (stack_size - ((ULONG) 1)));
 801320e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013210:	3b01      	subs	r3, #1
 8013212:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013214:	4413      	add	r3, r2
 8013216:	62bb      	str	r3, [r7, #40]	; 0x28
        stack_end =    TX_UCHAR_TO_VOID_POINTER_CONVERT(work_ptr);
 8013218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801321a:	627b      	str	r3, [r7, #36]	; 0x24
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 801321c:	2300      	movs	r3, #0
 801321e:	637b      	str	r3, [r7, #52]	; 0x34
 8013220:	e02b      	b.n	801327a <_txe_thread_create+0xc6>
        {
        
            /* Determine if this thread matches the thread in the list.  */
            if (thread_ptr == next_thread)
 8013222:	68fa      	ldr	r2, [r7, #12]
 8013224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013226:	429a      	cmp	r2, r3
 8013228:	d101      	bne.n	801322e <_txe_thread_create+0x7a>
            {
        
                /* Set the break flag.  */
                break_flag =  TX_TRUE;
 801322a:	2301      	movs	r3, #1
 801322c:	63bb      	str	r3, [r7, #56]	; 0x38
            }
            
            /* Determine if we need to break the loop.  */
            if (break_flag == TX_TRUE)
 801322e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013230:	2b01      	cmp	r3, #1
 8013232:	d028      	beq.n	8013286 <_txe_thread_create+0xd2>
                /* Yes, break out of the loop.  */
                break;
            }

            /* Check the stack pointer to see if it overlaps with this thread's stack.  */
            if (stack_start >= next_thread -> tx_thread_stack_start)
 8013234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013236:	68db      	ldr	r3, [r3, #12]
 8013238:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801323a:	429a      	cmp	r2, r3
 801323c:	d308      	bcc.n	8013250 <_txe_thread_create+0x9c>
            {

                if (stack_start < next_thread -> tx_thread_stack_end)
 801323e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013240:	691b      	ldr	r3, [r3, #16]
 8013242:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013244:	429a      	cmp	r2, r3
 8013246:	d203      	bcs.n	8013250 <_txe_thread_create+0x9c>
                {
        
                    /* This stack overlaps with an existing thread, clear the stack pointer to 
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 8013248:	2300      	movs	r3, #0
 801324a:	64bb      	str	r3, [r7, #72]	; 0x48
                    
                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 801324c:	2301      	movs	r3, #1
 801324e:	63bb      	str	r3, [r7, #56]	; 0x38
                }
            }

            /* Check the end of the stack to see if it is inside this thread's stack area as well.  */
            if (stack_end >= next_thread -> tx_thread_stack_start)
 8013250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013252:	68db      	ldr	r3, [r3, #12]
 8013254:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013256:	429a      	cmp	r2, r3
 8013258:	d308      	bcc.n	801326c <_txe_thread_create+0xb8>
            {

                if (stack_end < next_thread -> tx_thread_stack_end)
 801325a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801325c:	691b      	ldr	r3, [r3, #16]
 801325e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013260:	429a      	cmp	r2, r3
 8013262:	d203      	bcs.n	801326c <_txe_thread_create+0xb8>
                {
        
                    /* This stack overlaps with an existing thread, clear the stack pointer to 
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 8013264:	2300      	movs	r3, #0
 8013266:	64bb      	str	r3, [r7, #72]	; 0x48
                    
                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 8013268:	2301      	movs	r3, #1
 801326a:	63bb      	str	r3, [r7, #56]	; 0x38
                }
            }

            /* Move to the next thread.  */
            next_thread =  next_thread -> tx_thread_created_next;
 801326c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801326e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013272:	633b      	str	r3, [r7, #48]	; 0x30
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 8013274:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013276:	3301      	adds	r3, #1
 8013278:	637b      	str	r3, [r7, #52]	; 0x34
 801327a:	4b40      	ldr	r3, [pc, #256]	; (801337c <_txe_thread_create+0x1c8>)
 801327c:	681b      	ldr	r3, [r3, #0]
 801327e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013280:	429a      	cmp	r2, r3
 8013282:	d3ce      	bcc.n	8013222 <_txe_thread_create+0x6e>
 8013284:	e000      	b.n	8013288 <_txe_thread_create+0xd4>
                break;
 8013286:	bf00      	nop
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8013288:	f3ef 8310 	mrs	r3, PRIMASK
 801328c:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" CPSID i" : : : "memory" );
 801328e:	b672      	cpsid	i
    return(primask_value);
 8013290:	693b      	ldr	r3, [r7, #16]
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8013292:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 8013294:	4b37      	ldr	r3, [pc, #220]	; (8013374 <_txe_thread_create+0x1c0>)
 8013296:	681b      	ldr	r3, [r3, #0]
 8013298:	3b01      	subs	r3, #1
 801329a:	4a36      	ldr	r2, [pc, #216]	; (8013374 <_txe_thread_create+0x1c0>)
 801329c:	6013      	str	r3, [r2, #0]
 801329e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132a0:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80132a2:	697b      	ldr	r3, [r7, #20]
 80132a4:	f383 8810 	msr	PRIMASK, r3
}
 80132a8:	bf00      	nop
    
        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 80132aa:	f7fe fc5b 	bl	8011b64 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate thread.  */
        if (thread_ptr == next_thread)
 80132ae:	68fa      	ldr	r2, [r7, #12]
 80132b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132b2:	429a      	cmp	r2, r3
 80132b4:	d102      	bne.n	80132bc <_txe_thread_create+0x108>
        {

            /* Thread is already created, return appropriate error code.  */
            status =  TX_THREAD_ERROR;
 80132b6:	230e      	movs	r3, #14
 80132b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80132ba:	e040      	b.n	801333e <_txe_thread_create+0x18a>
        }

        /* Check for invalid starting address of stack.  */
        else if (stack_start == TX_NULL)
 80132bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80132be:	2b00      	cmp	r3, #0
 80132c0:	d102      	bne.n	80132c8 <_txe_thread_create+0x114>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 80132c2:	2303      	movs	r3, #3
 80132c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80132c6:	e03a      	b.n	801333e <_txe_thread_create+0x18a>
        }

        /* Check for invalid thread entry point.  */
        else if (entry_function == TX_NULL)
 80132c8:	687b      	ldr	r3, [r7, #4]
 80132ca:	2b00      	cmp	r3, #0
 80132cc:	d102      	bne.n	80132d4 <_txe_thread_create+0x120>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 80132ce:	2303      	movs	r3, #3
 80132d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80132d2:	e034      	b.n	801333e <_txe_thread_create+0x18a>
        }

        /* Check the stack size.  */
        else if (stack_size < ((ULONG) TX_MINIMUM_STACK))
 80132d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80132d6:	2bc7      	cmp	r3, #199	; 0xc7
 80132d8:	d802      	bhi.n	80132e0 <_txe_thread_create+0x12c>
        {

            /* Stack is not big enough, return appropriate error code.  */
            status =  TX_SIZE_ERROR;
 80132da:	2305      	movs	r3, #5
 80132dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80132de:	e02e      	b.n	801333e <_txe_thread_create+0x18a>
        }

        /* Check the priority specified.  */
        else if (priority >= ((UINT) TX_MAX_PRIORITIES))
 80132e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80132e2:	2b1f      	cmp	r3, #31
 80132e4:	d902      	bls.n	80132ec <_txe_thread_create+0x138>
        {

            /* Invalid priority selected, return appropriate error code.  */
            status =  TX_PRIORITY_ERROR;
 80132e6:	230f      	movs	r3, #15
 80132e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80132ea:	e028      	b.n	801333e <_txe_thread_create+0x18a>
        }

        /* Check preemption threshold. */
        else if (preempt_threshold > priority)
 80132ec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80132ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80132f0:	429a      	cmp	r2, r3
 80132f2:	d902      	bls.n	80132fa <_txe_thread_create+0x146>
        {

            /* Invalid preempt threshold, return appropriate error code.  */
            status =  TX_THRESH_ERROR;
 80132f4:	2318      	movs	r3, #24
 80132f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80132f8:	e021      	b.n	801333e <_txe_thread_create+0x18a>
        }

        /* Check the start selection.  */
        else if (auto_start > TX_AUTO_START)
 80132fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80132fc:	2b01      	cmp	r3, #1
 80132fe:	d902      	bls.n	8013306 <_txe_thread_create+0x152>
        {

            /* Invalid auto start selection, return appropriate error code.  */
            status =  TX_START_ERROR;
 8013300:	2310      	movs	r3, #16
 8013302:	63fb      	str	r3, [r7, #60]	; 0x3c
 8013304:	e01b      	b.n	801333e <_txe_thread_create+0x18a>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(current_thread)
 8013306:	4b1e      	ldr	r3, [pc, #120]	; (8013380 <_txe_thread_create+0x1cc>)
 8013308:	681b      	ldr	r3, [r3, #0]
 801330a:	623b      	str	r3, [r7, #32]

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (current_thread == &_tx_timer_thread)
 801330c:	6a3b      	ldr	r3, [r7, #32]
 801330e:	4a1d      	ldr	r2, [pc, #116]	; (8013384 <_txe_thread_create+0x1d0>)
 8013310:	4293      	cmp	r3, r2
 8013312:	d101      	bne.n	8013318 <_txe_thread_create+0x164>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8013314:	2313      	movs	r3, #19
 8013316:	63fb      	str	r3, [r7, #60]	; 0x3c
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8013318:	f7ff ff3e 	bl	8013198 <_get_ipsr>
 801331c:	4602      	mov	r2, r0
 801331e:	4b1a      	ldr	r3, [pc, #104]	; (8013388 <_txe_thread_create+0x1d4>)
 8013320:	681b      	ldr	r3, [r3, #0]
 8013322:	4313      	orrs	r3, r2
 8013324:	2b00      	cmp	r3, #0
 8013326:	d00a      	beq.n	801333e <_txe_thread_create+0x18a>
            {
    
                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8013328:	f7ff ff36 	bl	8013198 <_get_ipsr>
 801332c:	4602      	mov	r2, r0
 801332e:	4b16      	ldr	r3, [pc, #88]	; (8013388 <_txe_thread_create+0x1d4>)
 8013330:	681b      	ldr	r3, [r3, #0]
 8013332:	4313      	orrs	r3, r2
 8013334:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8013338:	d201      	bcs.n	801333e <_txe_thread_create+0x18a>
                {
            
                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 801333a:	2313      	movs	r3, #19
 801333c:	63fb      	str	r3, [r7, #60]	; 0x3c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 801333e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013340:	2b00      	cmp	r3, #0
 8013342:	d112      	bne.n	801336a <_txe_thread_create+0x1b6>
    {

        /* Call actual thread create function.  */
        status =  _tx_thread_create(thread_ptr, name_ptr, entry_function, entry_input,
 8013344:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013346:	9305      	str	r3, [sp, #20]
 8013348:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801334a:	9304      	str	r3, [sp, #16]
 801334c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801334e:	9303      	str	r3, [sp, #12]
 8013350:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013352:	9302      	str	r3, [sp, #8]
 8013354:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013356:	9301      	str	r3, [sp, #4]
 8013358:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801335a:	9300      	str	r3, [sp, #0]
 801335c:	683b      	ldr	r3, [r7, #0]
 801335e:	687a      	ldr	r2, [r7, #4]
 8013360:	68b9      	ldr	r1, [r7, #8]
 8013362:	68f8      	ldr	r0, [r7, #12]
 8013364:	f7fe f89e 	bl	80114a4 <_tx_thread_create>
 8013368:	63f8      	str	r0, [r7, #60]	; 0x3c
                        stack_start, stack_size, priority, preempt_threshold,
                        time_slice, auto_start);
    }

    /* Return completion status.  */
    return(status);
 801336a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 801336c:	4618      	mov	r0, r3
 801336e:	3740      	adds	r7, #64	; 0x40
 8013370:	46bd      	mov	sp, r7
 8013372:	bd80      	pop	{r7, pc}
 8013374:	200260fc 	.word	0x200260fc
 8013378:	2002606c 	.word	0x2002606c
 801337c:	20026070 	.word	0x20026070
 8013380:	20026064 	.word	0x20026064
 8013384:	200261ac 	.word	0x200261ac
 8013388:	2000003c 	.word	0x2000003c

0801338c <_txe_thread_info_get>:
/*                                                                        */
/**************************************************************************/
UINT  _txe_thread_info_get(TX_THREAD *thread_ptr, CHAR **name, UINT *state, ULONG *run_count, 
                UINT *priority, UINT *preemption_threshold, ULONG *time_slice, 
                TX_THREAD **next_thread, TX_THREAD **next_suspended_thread)
{
 801338c:	b580      	push	{r7, lr}
 801338e:	b08c      	sub	sp, #48	; 0x30
 8013390:	af06      	add	r7, sp, #24
 8013392:	60f8      	str	r0, [r7, #12]
 8013394:	60b9      	str	r1, [r7, #8]
 8013396:	607a      	str	r2, [r7, #4]
 8013398:	603b      	str	r3, [r7, #0]

UINT    status;


    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 801339a:	68fb      	ldr	r3, [r7, #12]
 801339c:	2b00      	cmp	r3, #0
 801339e:	d102      	bne.n	80133a6 <_txe_thread_info_get+0x1a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 80133a0:	230e      	movs	r3, #14
 80133a2:	617b      	str	r3, [r7, #20]
 80133a4:	e018      	b.n	80133d8 <_txe_thread_info_get+0x4c>
    }
    
    /* Now check for invalid thread ID.  */
    else if (thread_ptr -> tx_thread_id != TX_THREAD_ID)
 80133a6:	68fb      	ldr	r3, [r7, #12]
 80133a8:	681b      	ldr	r3, [r3, #0]
 80133aa:	4a0e      	ldr	r2, [pc, #56]	; (80133e4 <_txe_thread_info_get+0x58>)
 80133ac:	4293      	cmp	r3, r2
 80133ae:	d002      	beq.n	80133b6 <_txe_thread_info_get+0x2a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 80133b0:	230e      	movs	r3, #14
 80133b2:	617b      	str	r3, [r7, #20]
 80133b4:	e010      	b.n	80133d8 <_txe_thread_info_get+0x4c>
    }
    else
    {

        /* Call the actual thread information get service.  */
        status =  _tx_thread_info_get(thread_ptr, name, state, run_count, priority, preemption_threshold, 
 80133b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80133b8:	9304      	str	r3, [sp, #16]
 80133ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80133bc:	9303      	str	r3, [sp, #12]
 80133be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133c0:	9302      	str	r3, [sp, #8]
 80133c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133c4:	9301      	str	r3, [sp, #4]
 80133c6:	6a3b      	ldr	r3, [r7, #32]
 80133c8:	9300      	str	r3, [sp, #0]
 80133ca:	683b      	ldr	r3, [r7, #0]
 80133cc:	687a      	ldr	r2, [r7, #4]
 80133ce:	68b9      	ldr	r1, [r7, #8]
 80133d0:	68f8      	ldr	r0, [r7, #12]
 80133d2:	f7fe f959 	bl	8011688 <_tx_thread_info_get>
 80133d6:	6178      	str	r0, [r7, #20]
                            time_slice, next_thread, next_suspended_thread);
    }

    /* Return completion status.  */
    return(status);
 80133d8:	697b      	ldr	r3, [r7, #20]
}
 80133da:	4618      	mov	r0, r3
 80133dc:	3718      	adds	r7, #24
 80133de:	46bd      	mov	sp, r7
 80133e0:	bd80      	pop	{r7, pc}
 80133e2:	bf00      	nop
 80133e4:	54485244 	.word	0x54485244

080133e8 <_txe_thread_resume>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_thread_resume(TX_THREAD *thread_ptr)
{
 80133e8:	b580      	push	{r7, lr}
 80133ea:	b084      	sub	sp, #16
 80133ec:	af00      	add	r7, sp, #0
 80133ee:	6078      	str	r0, [r7, #4]

UINT    status;


    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 80133f0:	687b      	ldr	r3, [r7, #4]
 80133f2:	2b00      	cmp	r3, #0
 80133f4:	d102      	bne.n	80133fc <_txe_thread_resume+0x14>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 80133f6:	230e      	movs	r3, #14
 80133f8:	60fb      	str	r3, [r7, #12]
 80133fa:	e00b      	b.n	8013414 <_txe_thread_resume+0x2c>
    }
    
    /* Now check for invalid thread ID.  */
    else if (thread_ptr -> tx_thread_id != TX_THREAD_ID)
 80133fc:	687b      	ldr	r3, [r7, #4]
 80133fe:	681b      	ldr	r3, [r3, #0]
 8013400:	4a07      	ldr	r2, [pc, #28]	; (8013420 <_txe_thread_resume+0x38>)
 8013402:	4293      	cmp	r3, r2
 8013404:	d002      	beq.n	801340c <_txe_thread_resume+0x24>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8013406:	230e      	movs	r3, #14
 8013408:	60fb      	str	r3, [r7, #12]
 801340a:	e003      	b.n	8013414 <_txe_thread_resume+0x2c>
    }
    else
    {

        /* Call actual thread resume function.  */
        status =  _tx_thread_resume(thread_ptr);
 801340c:	6878      	ldr	r0, [r7, #4]
 801340e:	f7fe f9db 	bl	80117c8 <_tx_thread_resume>
 8013412:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 8013414:	68fb      	ldr	r3, [r7, #12]
}
 8013416:	4618      	mov	r0, r3
 8013418:	3710      	adds	r7, #16
 801341a:	46bd      	mov	sp, r7
 801341c:	bd80      	pop	{r7, pc}
 801341e:	bf00      	nop
 8013420:	54485244 	.word	0x54485244

08013424 <_txe_thread_suspend>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_thread_suspend(TX_THREAD *thread_ptr)
{
 8013424:	b580      	push	{r7, lr}
 8013426:	b084      	sub	sp, #16
 8013428:	af00      	add	r7, sp, #0
 801342a:	6078      	str	r0, [r7, #4]

UINT    status;


    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 801342c:	687b      	ldr	r3, [r7, #4]
 801342e:	2b00      	cmp	r3, #0
 8013430:	d102      	bne.n	8013438 <_txe_thread_suspend+0x14>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8013432:	230e      	movs	r3, #14
 8013434:	60fb      	str	r3, [r7, #12]
 8013436:	e00b      	b.n	8013450 <_txe_thread_suspend+0x2c>
    }

    /* Now check for invalid thread ID.  */
    else if (thread_ptr -> tx_thread_id != TX_THREAD_ID)
 8013438:	687b      	ldr	r3, [r7, #4]
 801343a:	681b      	ldr	r3, [r3, #0]
 801343c:	4a07      	ldr	r2, [pc, #28]	; (801345c <_txe_thread_suspend+0x38>)
 801343e:	4293      	cmp	r3, r2
 8013440:	d002      	beq.n	8013448 <_txe_thread_suspend+0x24>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8013442:	230e      	movs	r3, #14
 8013444:	60fb      	str	r3, [r7, #12]
 8013446:	e003      	b.n	8013450 <_txe_thread_suspend+0x2c>
    }
    else
    {

        /* Call actual thread suspend function.  */
        status =  _tx_thread_suspend(thread_ptr);
 8013448:	6878      	ldr	r0, [r7, #4]
 801344a:	f7fe fb11 	bl	8011a70 <_tx_thread_suspend>
 801344e:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 8013450:	68fb      	ldr	r3, [r7, #12]
}
 8013452:	4618      	mov	r0, r3
 8013454:	3710      	adds	r7, #16
 8013456:	46bd      	mov	sp, r7
 8013458:	bd80      	pop	{r7, pc}
 801345a:	bf00      	nop
 801345c:	54485244 	.word	0x54485244

08013460 <_txe_timer_activate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_timer_activate(TX_TIMER *timer_ptr)
{
 8013460:	b580      	push	{r7, lr}
 8013462:	b084      	sub	sp, #16
 8013464:	af00      	add	r7, sp, #0
 8013466:	6078      	str	r0, [r7, #4]

UINT    status;


    /* Check for an invalid timer pointer.  */
    if (timer_ptr == TX_NULL)
 8013468:	687b      	ldr	r3, [r7, #4]
 801346a:	2b00      	cmp	r3, #0
 801346c:	d102      	bne.n	8013474 <_txe_timer_activate+0x14>
    {
        /* Timer pointer is invalid, return appropriate error code.  */
        status =  TX_TIMER_ERROR;
 801346e:	2315      	movs	r3, #21
 8013470:	60fb      	str	r3, [r7, #12]
 8013472:	e00b      	b.n	801348c <_txe_timer_activate+0x2c>
    }
    
    /* Now check for invalid timer ID.  */
    else if (timer_ptr -> tx_timer_id != TX_TIMER_ID)
 8013474:	687b      	ldr	r3, [r7, #4]
 8013476:	681b      	ldr	r3, [r3, #0]
 8013478:	4a07      	ldr	r2, [pc, #28]	; (8013498 <_txe_timer_activate+0x38>)
 801347a:	4293      	cmp	r3, r2
 801347c:	d002      	beq.n	8013484 <_txe_timer_activate+0x24>
    {
        /* Timer pointer is invalid, return appropriate error code.  */
        status =  TX_TIMER_ERROR;
 801347e:	2315      	movs	r3, #21
 8013480:	60fb      	str	r3, [r7, #12]
 8013482:	e003      	b.n	801348c <_txe_timer_activate+0x2c>
    }
    else
    {

        /* Call actual application timer activate function.  */
        status =  _tx_timer_activate(timer_ptr);
 8013484:	6878      	ldr	r0, [r7, #4]
 8013486:	f7fe fe57 	bl	8012138 <_tx_timer_activate>
 801348a:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 801348c:	68fb      	ldr	r3, [r7, #12]
}
 801348e:	4618      	mov	r0, r3
 8013490:	3710      	adds	r7, #16
 8013492:	46bd      	mov	sp, r7
 8013494:	bd80      	pop	{r7, pc}
 8013496:	bf00      	nop
 8013498:	4154494d 	.word	0x4154494d

0801349c <_get_ipsr>:
{
 801349c:	b480      	push	{r7}
 801349e:	b083      	sub	sp, #12
 80134a0:	af00      	add	r7, sp, #0
    __asm("MRS %[result], ipsr" : [result] "=r" (_ipsr) : );
 80134a2:	f3ef 8305 	mrs	r3, IPSR
 80134a6:	607b      	str	r3, [r7, #4]
    return _ipsr;
 80134a8:	687b      	ldr	r3, [r7, #4]
}
 80134aa:	4618      	mov	r0, r3
 80134ac:	370c      	adds	r7, #12
 80134ae:	46bd      	mov	sp, r7
 80134b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134b4:	4770      	bx	lr
	...

080134b8 <_txe_timer_change>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_timer_change(TX_TIMER *timer_ptr, ULONG initial_ticks, ULONG reschedule_ticks)
{
 80134b8:	b580      	push	{r7, lr}
 80134ba:	b086      	sub	sp, #24
 80134bc:	af00      	add	r7, sp, #0
 80134be:	60f8      	str	r0, [r7, #12]
 80134c0:	60b9      	str	r1, [r7, #8]
 80134c2:	607a      	str	r2, [r7, #4]

UINT    status;


    /* Check for an invalid timer pointer.  */
    if (timer_ptr == TX_NULL)
 80134c4:	68fb      	ldr	r3, [r7, #12]
 80134c6:	2b00      	cmp	r3, #0
 80134c8:	d102      	bne.n	80134d0 <_txe_timer_change+0x18>
    {

        /* Timer pointer is invalid, return appropriate error code.  */
        status =  TX_TIMER_ERROR;
 80134ca:	2315      	movs	r3, #21
 80134cc:	617b      	str	r3, [r7, #20]
 80134ce:	e01f      	b.n	8013510 <_txe_timer_change+0x58>
    }
    
    /* Now check for invalid timer ID.  */
    else if (timer_ptr -> tx_timer_id != TX_TIMER_ID)
 80134d0:	68fb      	ldr	r3, [r7, #12]
 80134d2:	681b      	ldr	r3, [r3, #0]
 80134d4:	4a11      	ldr	r2, [pc, #68]	; (801351c <_txe_timer_change+0x64>)
 80134d6:	4293      	cmp	r3, r2
 80134d8:	d002      	beq.n	80134e0 <_txe_timer_change+0x28>
    {

        /* Timer pointer is invalid, return appropriate error code.  */
        status =  TX_TIMER_ERROR;
 80134da:	2315      	movs	r3, #21
 80134dc:	617b      	str	r3, [r7, #20]
 80134de:	e017      	b.n	8013510 <_txe_timer_change+0x58>
    }

    /* Check for an illegal initial tick value.  */
    else if (initial_ticks == ((ULONG) 0))
 80134e0:	68bb      	ldr	r3, [r7, #8]
 80134e2:	2b00      	cmp	r3, #0
 80134e4:	d102      	bne.n	80134ec <_txe_timer_change+0x34>
    {

        /* Invalid initial tick value, return appropriate error code.  */
        status =  TX_TICK_ERROR;
 80134e6:	2316      	movs	r3, #22
 80134e8:	617b      	str	r3, [r7, #20]
 80134ea:	e011      	b.n	8013510 <_txe_timer_change+0x58>
    }

    /* Check for invalid caller of this function.  */
    else if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 80134ec:	f7ff ffd6 	bl	801349c <_get_ipsr>
 80134f0:	4602      	mov	r2, r0
 80134f2:	4b0b      	ldr	r3, [pc, #44]	; (8013520 <_txe_timer_change+0x68>)
 80134f4:	681b      	ldr	r3, [r3, #0]
 80134f6:	4313      	orrs	r3, r2
 80134f8:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 80134fc:	d302      	bcc.n	8013504 <_txe_timer_change+0x4c>
    {

        /* Invalid caller of this function, return appropriate error code.  */
        status =  TX_CALLER_ERROR;
 80134fe:	2313      	movs	r3, #19
 8013500:	617b      	str	r3, [r7, #20]
 8013502:	e005      	b.n	8013510 <_txe_timer_change+0x58>
    }
    else
    {

        /* Call actual application timer function.  */
        status =  _tx_timer_change(timer_ptr, initial_ticks, reschedule_ticks);
 8013504:	687a      	ldr	r2, [r7, #4]
 8013506:	68b9      	ldr	r1, [r7, #8]
 8013508:	68f8      	ldr	r0, [r7, #12]
 801350a:	f7fe fe3f 	bl	801218c <_tx_timer_change>
 801350e:	6178      	str	r0, [r7, #20]
    }
    
    /* Return completion status.  */
    return(status);
 8013510:	697b      	ldr	r3, [r7, #20]
}
 8013512:	4618      	mov	r0, r3
 8013514:	3718      	adds	r7, #24
 8013516:	46bd      	mov	sp, r7
 8013518:	bd80      	pop	{r7, pc}
 801351a:	bf00      	nop
 801351c:	4154494d 	.word	0x4154494d
 8013520:	2000003c 	.word	0x2000003c

08013524 <_get_ipsr>:
{
 8013524:	b480      	push	{r7}
 8013526:	b083      	sub	sp, #12
 8013528:	af00      	add	r7, sp, #0
    __asm("MRS %[result], ipsr" : [result] "=r" (_ipsr) : );
 801352a:	f3ef 8305 	mrs	r3, IPSR
 801352e:	607b      	str	r3, [r7, #4]
    return _ipsr;
 8013530:	687b      	ldr	r3, [r7, #4]
}
 8013532:	4618      	mov	r0, r3
 8013534:	370c      	adds	r7, #12
 8013536:	46bd      	mov	sp, r7
 8013538:	f85d 7b04 	ldr.w	r7, [sp], #4
 801353c:	4770      	bx	lr
	...

08013540 <_txe_timer_create>:
/*                                                                        */
/**************************************************************************/
UINT  _txe_timer_create(TX_TIMER *timer_ptr, CHAR *name_ptr, 
            VOID (*expiration_function)(ULONG id), ULONG expiration_input,
            ULONG initial_ticks, ULONG reschedule_ticks, UINT auto_activate, UINT timer_control_block_size)
{
 8013540:	b580      	push	{r7, lr}
 8013542:	b092      	sub	sp, #72	; 0x48
 8013544:	af04      	add	r7, sp, #16
 8013546:	60f8      	str	r0, [r7, #12]
 8013548:	60b9      	str	r1, [r7, #8]
 801354a:	607a      	str	r2, [r7, #4]
 801354c:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 801354e:	2300      	movs	r3, #0
 8013550:	637b      	str	r3, [r7, #52]	; 0x34

    /* Check for a NULL timer pointer.  */
    if (timer_ptr == TX_NULL)
 8013552:	68fb      	ldr	r3, [r7, #12]
 8013554:	2b00      	cmp	r3, #0
 8013556:	d102      	bne.n	801355e <_txe_timer_create+0x1e>
    {

        /* Timer pointer is invalid, return appropriate error code.  */
        status =  TX_TIMER_ERROR;
 8013558:	2315      	movs	r3, #21
 801355a:	637b      	str	r3, [r7, #52]	; 0x34
 801355c:	e055      	b.n	801360a <_txe_timer_create+0xca>
    }
    
    /* Now check for invalid control block size.  */
    else if (timer_control_block_size != (sizeof(TX_TIMER)))
 801355e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013560:	2b2c      	cmp	r3, #44	; 0x2c
 8013562:	d002      	beq.n	801356a <_txe_timer_create+0x2a>
    {

        /* Timer pointer is invalid, return appropriate error code.  */
        status =  TX_TIMER_ERROR;
 8013564:	2315      	movs	r3, #21
 8013566:	637b      	str	r3, [r7, #52]	; 0x34
 8013568:	e04f      	b.n	801360a <_txe_timer_create+0xca>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 801356a:	f3ef 8310 	mrs	r3, PRIMASK
 801356e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8013570:	b672      	cpsid	i
    return(primask_value);
 8013572:	69fb      	ldr	r3, [r7, #28]
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8013574:	62bb      	str	r3, [r7, #40]	; 0x28

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8013576:	4b3f      	ldr	r3, [pc, #252]	; (8013674 <_txe_timer_create+0x134>)
 8013578:	681b      	ldr	r3, [r3, #0]
 801357a:	3301      	adds	r3, #1
 801357c:	4a3d      	ldr	r2, [pc, #244]	; (8013674 <_txe_timer_create+0x134>)
 801357e:	6013      	str	r3, [r2, #0]
 8013580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013582:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8013584:	6a3b      	ldr	r3, [r7, #32]
 8013586:	f383 8810 	msr	PRIMASK, r3
}
 801358a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_timer =  _tx_timer_created_ptr;
 801358c:	4b3a      	ldr	r3, [pc, #232]	; (8013678 <_txe_timer_create+0x138>)
 801358e:	681b      	ldr	r3, [r3, #0]
 8013590:	62fb      	str	r3, [r7, #44]	; 0x2c
        for (i = ((ULONG) 0); i < _tx_timer_created_count; i++)
 8013592:	2300      	movs	r3, #0
 8013594:	633b      	str	r3, [r7, #48]	; 0x30
 8013596:	e009      	b.n	80135ac <_txe_timer_create+0x6c>
        {

            /* Determine if this timer matches the current timer in the list.  */
            if (timer_ptr == next_timer)
 8013598:	68fa      	ldr	r2, [r7, #12]
 801359a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801359c:	429a      	cmp	r2, r3
 801359e:	d00b      	beq.n	80135b8 <_txe_timer_create+0x78>
            }
            else
            {
        
                /* Move to next timer.  */
                next_timer =  next_timer -> tx_timer_created_next;
 80135a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80135a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80135a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        for (i = ((ULONG) 0); i < _tx_timer_created_count; i++)
 80135a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135a8:	3301      	adds	r3, #1
 80135aa:	633b      	str	r3, [r7, #48]	; 0x30
 80135ac:	4b33      	ldr	r3, [pc, #204]	; (801367c <_txe_timer_create+0x13c>)
 80135ae:	681b      	ldr	r3, [r3, #0]
 80135b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80135b2:	429a      	cmp	r2, r3
 80135b4:	d3f0      	bcc.n	8013598 <_txe_timer_create+0x58>
 80135b6:	e000      	b.n	80135ba <_txe_timer_create+0x7a>
                break;
 80135b8:	bf00      	nop
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80135ba:	f3ef 8310 	mrs	r3, PRIMASK
 80135be:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" CPSID i" : : : "memory" );
 80135c0:	b672      	cpsid	i
    return(primask_value);
 80135c2:	697b      	ldr	r3, [r7, #20]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 80135c4:	62bb      	str	r3, [r7, #40]	; 0x28

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 80135c6:	4b2b      	ldr	r3, [pc, #172]	; (8013674 <_txe_timer_create+0x134>)
 80135c8:	681b      	ldr	r3, [r3, #0]
 80135ca:	3b01      	subs	r3, #1
 80135cc:	4a29      	ldr	r2, [pc, #164]	; (8013674 <_txe_timer_create+0x134>)
 80135ce:	6013      	str	r3, [r2, #0]
 80135d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80135d2:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80135d4:	69bb      	ldr	r3, [r7, #24]
 80135d6:	f383 8810 	msr	PRIMASK, r3
}
 80135da:	bf00      	nop
    
        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 80135dc:	f7fe fac2 	bl	8011b64 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate timer.  */
        if (timer_ptr == next_timer)
 80135e0:	68fa      	ldr	r2, [r7, #12]
 80135e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80135e4:	429a      	cmp	r2, r3
 80135e6:	d102      	bne.n	80135ee <_txe_timer_create+0xae>
        {

            /* Timer is already created, return appropriate error code.  */
            status =  TX_TIMER_ERROR;
 80135e8:	2315      	movs	r3, #21
 80135ea:	637b      	str	r3, [r7, #52]	; 0x34
 80135ec:	e00d      	b.n	801360a <_txe_timer_create+0xca>
        }

        /* Check for an illegal initial tick value.  */
        else if (initial_ticks == ((ULONG) 0))
 80135ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80135f0:	2b00      	cmp	r3, #0
 80135f2:	d102      	bne.n	80135fa <_txe_timer_create+0xba>
        {

            /* Invalid initial tick value, return appropriate error code.  */
            status =  TX_TICK_ERROR;
 80135f4:	2316      	movs	r3, #22
 80135f6:	637b      	str	r3, [r7, #52]	; 0x34
 80135f8:	e007      	b.n	801360a <_txe_timer_create+0xca>
        }
        else
        {

            /* Check for an illegal activation.  */
            if (auto_activate != TX_AUTO_ACTIVATE)
 80135fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80135fc:	2b01      	cmp	r3, #1
 80135fe:	d004      	beq.n	801360a <_txe_timer_create+0xca>
            {
    
                /* And activation is not the other value.  */
                if (auto_activate != TX_NO_ACTIVATE)
 8013600:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013602:	2b00      	cmp	r3, #0
 8013604:	d001      	beq.n	801360a <_txe_timer_create+0xca>
                {
        
                    /* Invalid activation selected, return appropriate error code.  */
                    status =  TX_ACTIVATE_ERROR;
 8013606:	2317      	movs	r3, #23
 8013608:	637b      	str	r3, [r7, #52]	; 0x34
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 801360a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801360c:	2b00      	cmp	r3, #0
 801360e:	d11b      	bne.n	8013648 <_txe_timer_create+0x108>
    {

#ifndef TX_TIMER_PROCESS_IN_ISR

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 8013610:	4b1b      	ldr	r3, [pc, #108]	; (8013680 <_txe_timer_create+0x140>)
 8013612:	681b      	ldr	r3, [r3, #0]
 8013614:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for invalid caller of this function.  First check for a calling thread.  */
        if (thread_ptr == &_tx_timer_thread)
 8013616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013618:	4a1a      	ldr	r2, [pc, #104]	; (8013684 <_txe_timer_create+0x144>)
 801361a:	4293      	cmp	r3, r2
 801361c:	d101      	bne.n	8013622 <_txe_timer_create+0xe2>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 801361e:	2313      	movs	r3, #19
 8013620:	637b      	str	r3, [r7, #52]	; 0x34
        }
#endif

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8013622:	f7ff ff7f 	bl	8013524 <_get_ipsr>
 8013626:	4602      	mov	r2, r0
 8013628:	4b17      	ldr	r3, [pc, #92]	; (8013688 <_txe_timer_create+0x148>)
 801362a:	681b      	ldr	r3, [r3, #0]
 801362c:	4313      	orrs	r3, r2
 801362e:	2b00      	cmp	r3, #0
 8013630:	d00a      	beq.n	8013648 <_txe_timer_create+0x108>
        {
    
            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8013632:	f7ff ff77 	bl	8013524 <_get_ipsr>
 8013636:	4602      	mov	r2, r0
 8013638:	4b13      	ldr	r3, [pc, #76]	; (8013688 <_txe_timer_create+0x148>)
 801363a:	681b      	ldr	r3, [r3, #0]
 801363c:	4313      	orrs	r3, r2
 801363e:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8013642:	d201      	bcs.n	8013648 <_txe_timer_create+0x108>
            {
        
                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8013644:	2313      	movs	r3, #19
 8013646:	637b      	str	r3, [r7, #52]	; 0x34
        }
    }


    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8013648:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801364a:	2b00      	cmp	r3, #0
 801364c:	d10c      	bne.n	8013668 <_txe_timer_create+0x128>
    {

        /* Call actual application timer create function.  */
        status =  _tx_timer_create(timer_ptr, name_ptr, expiration_function, expiration_input,
 801364e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013650:	9302      	str	r3, [sp, #8]
 8013652:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013654:	9301      	str	r3, [sp, #4]
 8013656:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013658:	9300      	str	r3, [sp, #0]
 801365a:	683b      	ldr	r3, [r7, #0]
 801365c:	687a      	ldr	r2, [r7, #4]
 801365e:	68b9      	ldr	r1, [r7, #8]
 8013660:	68f8      	ldr	r0, [r7, #12]
 8013662:	f7fe fdb7 	bl	80121d4 <_tx_timer_create>
 8013666:	6378      	str	r0, [r7, #52]	; 0x34
                                                    initial_ticks, reschedule_ticks, auto_activate);
    }

    /* Return completion status.  */
    return(status);
 8013668:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801366a:	4618      	mov	r0, r3
 801366c:	3738      	adds	r7, #56	; 0x38
 801366e:	46bd      	mov	sp, r7
 8013670:	bd80      	pop	{r7, pc}
 8013672:	bf00      	nop
 8013674:	200260fc 	.word	0x200260fc
 8013678:	200261a0 	.word	0x200261a0
 801367c:	200261a4 	.word	0x200261a4
 8013680:	20026064 	.word	0x20026064
 8013684:	200261ac 	.word	0x200261ac
 8013688:	2000003c 	.word	0x2000003c

0801368c <_txe_timer_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_timer_deactivate(TX_TIMER *timer_ptr)
{
 801368c:	b580      	push	{r7, lr}
 801368e:	b084      	sub	sp, #16
 8013690:	af00      	add	r7, sp, #0
 8013692:	6078      	str	r0, [r7, #4]

UINT    status;


    /* Check for an invalid timer pointer.  */
    if (timer_ptr == TX_NULL)
 8013694:	687b      	ldr	r3, [r7, #4]
 8013696:	2b00      	cmp	r3, #0
 8013698:	d102      	bne.n	80136a0 <_txe_timer_deactivate+0x14>
    {

        /* Timer pointer is invalid, return appropriate error code.  */
        status =  TX_TIMER_ERROR;
 801369a:	2315      	movs	r3, #21
 801369c:	60fb      	str	r3, [r7, #12]
 801369e:	e00b      	b.n	80136b8 <_txe_timer_deactivate+0x2c>
    }

    /* Now check for invalid timer ID.  */
    else if (timer_ptr -> tx_timer_id != TX_TIMER_ID)
 80136a0:	687b      	ldr	r3, [r7, #4]
 80136a2:	681b      	ldr	r3, [r3, #0]
 80136a4:	4a07      	ldr	r2, [pc, #28]	; (80136c4 <_txe_timer_deactivate+0x38>)
 80136a6:	4293      	cmp	r3, r2
 80136a8:	d002      	beq.n	80136b0 <_txe_timer_deactivate+0x24>
    {

        /* Timer pointer is invalid, return appropriate error code.  */
        status =  TX_TIMER_ERROR;
 80136aa:	2315      	movs	r3, #21
 80136ac:	60fb      	str	r3, [r7, #12]
 80136ae:	e003      	b.n	80136b8 <_txe_timer_deactivate+0x2c>
    }
    else
    {
    
        /* Call actual application timer deactivate function.  */
        status =  _tx_timer_deactivate(timer_ptr);
 80136b0:	6878      	ldr	r0, [r7, #4]
 80136b2:	f7fe fdf1 	bl	8012298 <_tx_timer_deactivate>
 80136b6:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 80136b8:	68fb      	ldr	r3, [r7, #12]
}
 80136ba:	4618      	mov	r0, r3
 80136bc:	3710      	adds	r7, #16
 80136be:	46bd      	mov	sp, r7
 80136c0:	bd80      	pop	{r7, pc}
 80136c2:	bf00      	nop
 80136c4:	4154494d 	.word	0x4154494d

080136c8 <HelloWorldTaskGetProcEvtListenerIF>:
  return _this->m_pxDriver;
}

SYS_DEFINE_STATIC_INLINE
IProcessEventListener* HelloWorldTaskGetProcEvtListenerIF(HelloWorldTask *_this)
{
 80136c8:	b580      	push	{r7, lr}
 80136ca:	b082      	sub	sp, #8
 80136cc:	af00      	add	r7, sp, #0
 80136ce:	6078      	str	r0, [r7, #4]
  assert_param(_this != NULL);
 80136d0:	687b      	ldr	r3, [r7, #4]
 80136d2:	2b00      	cmp	r3, #0
 80136d4:	d103      	bne.n	80136de <HelloWorldTaskGetProcEvtListenerIF+0x16>
 80136d6:	217b      	movs	r1, #123	; 0x7b
 80136d8:	4804      	ldr	r0, [pc, #16]	; (80136ec <HelloWorldTaskGetProcEvtListenerIF+0x24>)
 80136da:	f001 fde6 	bl	80152aa <assert_failed>

  return &_this->m_xDpuListenerIF;
 80136de:	687b      	ldr	r3, [r7, #4]
 80136e0:	33cc      	adds	r3, #204	; 0xcc
}
 80136e2:	4618      	mov	r0, r3
 80136e4:	3708      	adds	r7, #8
 80136e6:	46bd      	mov	sp, r7
 80136e8:	bd80      	pop	{r7, pc}
 80136ea:	bf00      	nop
 80136ec:	080264cc 	.word	0x080264cc

080136f0 <SysLoadApplicationContext>:

/* eLooM framework entry points definition */
/*******************************************/

sys_error_code_t SysLoadApplicationContext(ApplicationContext *pAppContext)
{
 80136f0:	b580      	push	{r7, lr}
 80136f2:	b084      	sub	sp, #16
 80136f4:	af00      	add	r7, sp, #0
 80136f6:	6078      	str	r0, [r7, #4]
  assert_param(pAppContext);
 80136f8:	687b      	ldr	r3, [r7, #4]
 80136fa:	2b00      	cmp	r3, #0
 80136fc:	d103      	bne.n	8013706 <SysLoadApplicationContext+0x16>
 80136fe:	2169      	movs	r1, #105	; 0x69
 8013700:	4829      	ldr	r0, [pc, #164]	; (80137a8 <SysLoadApplicationContext+0xb8>)
 8013702:	f001 fdd2 	bl	80152aa <assert_failed>
  sys_error_code_t xRes = SYS_NO_ERROR_CODE;
 8013706:	2300      	movs	r3, #0
 8013708:	81fb      	strh	r3, [r7, #14]

  // Allocate the task objects
  sSPIBusObj = SPIBusTaskAlloc(&MX_SPI2InitParams);
 801370a:	4828      	ldr	r0, [pc, #160]	; (80137ac <SysLoadApplicationContext+0xbc>)
 801370c:	f00c f97e 	bl	801fa0c <SPIBusTaskAlloc>
 8013710:	4603      	mov	r3, r0
 8013712:	4a27      	ldr	r2, [pc, #156]	; (80137b0 <SysLoadApplicationContext+0xc0>)
 8013714:	6013      	str	r3, [r2, #0]
  sISM330DHCXObj = ISM330DHCXTaskAlloc(&MX_GPIO_INT1_DHCXInitParams, &MX_GPIO_INT2_DHCXInitParams, &MX_GPIO_CS_DHCXInitParams, SPI_IF);
 8013716:	2300      	movs	r3, #0
 8013718:	4a26      	ldr	r2, [pc, #152]	; (80137b4 <SysLoadApplicationContext+0xc4>)
 801371a:	4927      	ldr	r1, [pc, #156]	; (80137b8 <SysLoadApplicationContext+0xc8>)
 801371c:	4827      	ldr	r0, [pc, #156]	; (80137bc <SysLoadApplicationContext+0xcc>)
 801371e:	f008 fbdf 	bl	801bee0 <ISM330DHCXTaskAlloc>
 8013722:	4603      	mov	r3, r0
 8013724:	4a26      	ldr	r2, [pc, #152]	; (80137c0 <SysLoadApplicationContext+0xd0>)
 8013726:	6013      	str	r3, [r2, #0]
  sIIS3DWBObj = IIS3DWBTaskAlloc(NULL, &MX_GPIO_CS_DWBInitParams, SPI_IF);
 8013728:	2200      	movs	r2, #0
 801372a:	4926      	ldr	r1, [pc, #152]	; (80137c4 <SysLoadApplicationContext+0xd4>)
 801372c:	2000      	movs	r0, #0
 801372e:	f006 feab 	bl	801a488 <IIS3DWBTaskAlloc>
 8013732:	4603      	mov	r3, r0
 8013734:	4a24      	ldr	r2, [pc, #144]	; (80137c8 <SysLoadApplicationContext+0xd8>)
 8013736:	6013      	str	r3, [r2, #0]

//  sUtilObj = SCLIUtilTaskAlloc(&MX_GPIO_PE1InitParams, NULL);
  sProcessTask = ProcessTaskAlloc();
 8013738:	f000 fdf6 	bl	8014328 <ProcessTaskAlloc>
 801373c:	4603      	mov	r3, r0
 801373e:	4a23      	ldr	r2, [pc, #140]	; (80137cc <SysLoadApplicationContext+0xdc>)
 8013740:	6013      	str	r3, [r2, #0]
  sHelloWorldObj = HelloWorldTaskAlloc(&MX_GPIO_UBInitParams);
 8013742:	4823      	ldr	r0, [pc, #140]	; (80137d0 <SysLoadApplicationContext+0xe0>)
 8013744:	f000 fae2 	bl	8013d0c <HelloWorldTaskAlloc>
 8013748:	4603      	mov	r3, r0
 801374a:	4a22      	ldr	r2, [pc, #136]	; (80137d4 <SysLoadApplicationContext+0xe4>)
 801374c:	6013      	str	r3, [r2, #0]

  // Add the task object to the context.
  xRes = ACAddTask(pAppContext, (AManagedTask*)sSPIBusObj);
 801374e:	4b18      	ldr	r3, [pc, #96]	; (80137b0 <SysLoadApplicationContext+0xc0>)
 8013750:	681b      	ldr	r3, [r3, #0]
 8013752:	4619      	mov	r1, r3
 8013754:	6878      	ldr	r0, [r7, #4]
 8013756:	f7fb f9bd 	bl	800ead4 <ACAddTask>
 801375a:	4603      	mov	r3, r0
 801375c:	81fb      	strh	r3, [r7, #14]
  xRes = ACAddTask(pAppContext, (AManagedTask*)sISM330DHCXObj);
 801375e:	4b18      	ldr	r3, [pc, #96]	; (80137c0 <SysLoadApplicationContext+0xd0>)
 8013760:	681b      	ldr	r3, [r3, #0]
 8013762:	4619      	mov	r1, r3
 8013764:	6878      	ldr	r0, [r7, #4]
 8013766:	f7fb f9b5 	bl	800ead4 <ACAddTask>
 801376a:	4603      	mov	r3, r0
 801376c:	81fb      	strh	r3, [r7, #14]
  xRes = ACAddTask(pAppContext, (AManagedTask*)sIIS3DWBObj);
 801376e:	4b16      	ldr	r3, [pc, #88]	; (80137c8 <SysLoadApplicationContext+0xd8>)
 8013770:	681b      	ldr	r3, [r3, #0]
 8013772:	4619      	mov	r1, r3
 8013774:	6878      	ldr	r0, [r7, #4]
 8013776:	f7fb f9ad 	bl	800ead4 <ACAddTask>
 801377a:	4603      	mov	r3, r0
 801377c:	81fb      	strh	r3, [r7, #14]
//  xRes = ACAddTask(pAppContext, (AManagedTask*)sUtilObj);
  xRes = ACAddTask(pAppContext, (AManagedTask*)sProcessTask);
 801377e:	4b13      	ldr	r3, [pc, #76]	; (80137cc <SysLoadApplicationContext+0xdc>)
 8013780:	681b      	ldr	r3, [r3, #0]
 8013782:	4619      	mov	r1, r3
 8013784:	6878      	ldr	r0, [r7, #4]
 8013786:	f7fb f9a5 	bl	800ead4 <ACAddTask>
 801378a:	4603      	mov	r3, r0
 801378c:	81fb      	strh	r3, [r7, #14]
  xRes = ACAddTask(pAppContext, sHelloWorldObj);
 801378e:	4b11      	ldr	r3, [pc, #68]	; (80137d4 <SysLoadApplicationContext+0xe4>)
 8013790:	681b      	ldr	r3, [r3, #0]
 8013792:	4619      	mov	r1, r3
 8013794:	6878      	ldr	r0, [r7, #4]
 8013796:	f7fb f99d 	bl	800ead4 <ACAddTask>
 801379a:	4603      	mov	r3, r0
 801379c:	81fb      	strh	r3, [r7, #14]

  /* Add the task object to the context. */
  return xRes;
 801379e:	89fb      	ldrh	r3, [r7, #14]
}
 80137a0:	4618      	mov	r0, r3
 80137a2:	3710      	adds	r7, #16
 80137a4:	46bd      	mov	sp, r7
 80137a6:	bd80      	pop	{r7, pc}
 80137a8:	080264ec 	.word	0x080264ec
 80137ac:	080357d8 	.word	0x080357d8
 80137b0:	20026674 	.word	0x20026674
 80137b4:	080357b8 	.word	0x080357b8
 80137b8:	080357a8 	.word	0x080357a8
 80137bc:	08035798 	.word	0x08035798
 80137c0:	20026678 	.word	0x20026678
 80137c4:	080357c8 	.word	0x080357c8
 80137c8:	2002667c 	.word	0x2002667c
 80137cc:	20026670 	.word	0x20026670
 80137d0:	08035788 	.word	0x08035788
 80137d4:	2002666c 	.word	0x2002666c

080137d8 <SysOnStartApplication>:

sys_error_code_t SysOnStartApplication(ApplicationContext *pAppContext)
{
 80137d8:	b590      	push	{r4, r7, lr}
 80137da:	b083      	sub	sp, #12
 80137dc:	af00      	add	r7, sp, #0
 80137de:	6078      	str	r0, [r7, #4]
  UNUSED(pAppContext);

  /* connect the sensors task to the SPI bus. */
  SPIBusTaskConnectDevice((SPIBusTask*)sSPIBusObj, (SPIBusIF*)ISM330DHCXTaskGetSensorIF((ISM330DHCXTask*)sISM330DHCXObj));
 80137e0:	4b14      	ldr	r3, [pc, #80]	; (8013834 <SysOnStartApplication+0x5c>)
 80137e2:	681c      	ldr	r4, [r3, #0]
 80137e4:	4b14      	ldr	r3, [pc, #80]	; (8013838 <SysOnStartApplication+0x60>)
 80137e6:	681b      	ldr	r3, [r3, #0]
 80137e8:	4618      	mov	r0, r3
 80137ea:	f008 fbc9 	bl	801bf80 <ISM330DHCXTaskGetSensorIF>
 80137ee:	4603      	mov	r3, r0
 80137f0:	4619      	mov	r1, r3
 80137f2:	4620      	mov	r0, r4
 80137f4:	f00c f922 	bl	801fa3c <SPIBusTaskConnectDevice>
  SPIBusTaskConnectDevice((SPIBusTask*)sSPIBusObj, (SPIBusIF*)IIS3DWBTaskGetSensorIF((IIS3DWBTask*)sIIS3DWBObj));
 80137f8:	4b0e      	ldr	r3, [pc, #56]	; (8013834 <SysOnStartApplication+0x5c>)
 80137fa:	681c      	ldr	r4, [r3, #0]
 80137fc:	4b0f      	ldr	r3, [pc, #60]	; (801383c <SysOnStartApplication+0x64>)
 80137fe:	681b      	ldr	r3, [r3, #0]
 8013800:	4618      	mov	r0, r3
 8013802:	f006 fe6f 	bl	801a4e4 <IIS3DWBTaskGetSensorIF>
 8013806:	4603      	mov	r3, r0
 8013808:	4619      	mov	r1, r3
 801380a:	4620      	mov	r0, r4
 801380c:	f00c f916 	bl	801fa3c <SPIBusTaskConnectDevice>
   * For simplicity, in this demo, the configuration of the sensors is done in the virtual function
   * ProcessTask::OnEnterTaskControlLoop() -> ProcessTask_vtblOnEnterTaskControlLoop()
   */

  /* connect the HelloWord task object to the Process task.*/
  ProcessTaskAddDPUListener((ProcessTask_t*)sProcessTask, HelloWorldTaskGetProcEvtListenerIF((HelloWorldTask*)sHelloWorldObj));
 8013810:	4b0b      	ldr	r3, [pc, #44]	; (8013840 <SysOnStartApplication+0x68>)
 8013812:	681c      	ldr	r4, [r3, #0]
 8013814:	4b0b      	ldr	r3, [pc, #44]	; (8013844 <SysOnStartApplication+0x6c>)
 8013816:	681b      	ldr	r3, [r3, #0]
 8013818:	4618      	mov	r0, r3
 801381a:	f7ff ff55 	bl	80136c8 <HelloWorldTaskGetProcEvtListenerIF>
 801381e:	4603      	mov	r3, r0
 8013820:	4619      	mov	r1, r3
 8013822:	4620      	mov	r0, r4
 8013824:	f000 fe28 	bl	8014478 <ProcessTaskAddDPUListener>

  return SYS_NO_ERROR_CODE;
 8013828:	2300      	movs	r3, #0
}
 801382a:	4618      	mov	r0, r3
 801382c:	370c      	adds	r7, #12
 801382e:	46bd      	mov	sp, r7
 8013830:	bd90      	pop	{r4, r7, pc}
 8013832:	bf00      	nop
 8013834:	20026674 	.word	0x20026674
 8013838:	20026678 	.word	0x20026678
 801383c:	2002667c 	.word	0x2002667c
 8013840:	20026670 	.word	0x20026670
 8013844:	2002666c 	.word	0x2002666c

08013848 <SysGetPowerModeHelper>:

  return s_pxErrDelegate;
}*/

IAppPowerModeHelper *SysGetPowerModeHelper(void)
{
 8013848:	b580      	push	{r7, lr}
 801384a:	af00      	add	r7, sp, #0
  // Install the application power mode helper.
  static IAppPowerModeHelper *s_pxPowerModeHelper = NULL;
  if (s_pxPowerModeHelper == NULL) {
 801384c:	4b06      	ldr	r3, [pc, #24]	; (8013868 <SysGetPowerModeHelper+0x20>)
 801384e:	681b      	ldr	r3, [r3, #0]
 8013850:	2b00      	cmp	r3, #0
 8013852:	d104      	bne.n	801385e <SysGetPowerModeHelper+0x16>
    s_pxPowerModeHelper = AppPowerModeHelperAlloc();
 8013854:	f000 f80a 	bl	801386c <AppPowerModeHelperAlloc>
 8013858:	4603      	mov	r3, r0
 801385a:	4a03      	ldr	r2, [pc, #12]	; (8013868 <SysGetPowerModeHelper+0x20>)
 801385c:	6013      	str	r3, [r2, #0]
  }

  return s_pxPowerModeHelper;
 801385e:	4b02      	ldr	r3, [pc, #8]	; (8013868 <SysGetPowerModeHelper+0x20>)
 8013860:	681b      	ldr	r3, [r3, #0]
}
 8013862:	4618      	mov	r0, r3
 8013864:	bd80      	pop	{r7, pc}
 8013866:	bf00      	nop
 8013868:	20026680 	.word	0x20026680

0801386c <AppPowerModeHelperAlloc>:

/* Public API definition */
/*************************/

IAppPowerModeHelper *AppPowerModeHelperAlloc(void)
{
 801386c:	b580      	push	{r7, lr}
 801386e:	b082      	sub	sp, #8
 8013870:	af00      	add	r7, sp, #0
  IAppPowerModeHelper *p_new_obj = (IAppPowerModeHelper*)SysAlloc(sizeof(AppPowerModeHelper));
 8013872:	2008      	movs	r0, #8
 8013874:	f7fb fd0c 	bl	800f290 <SysAlloc>
 8013878:	6078      	str	r0, [r7, #4]

  if (p_new_obj == NULL)
 801387a:	687b      	ldr	r3, [r7, #4]
 801387c:	2b00      	cmp	r3, #0
 801387e:	d103      	bne.n	8013888 <AppPowerModeHelperAlloc+0x1c>
  {
    SYS_SET_SERVICE_LEVEL_ERROR_CODE(SYS_OUT_OF_MEMORY_ERROR_CODE);
 8013880:	4b05      	ldr	r3, [pc, #20]	; (8013898 <AppPowerModeHelperAlloc+0x2c>)
 8013882:	2203      	movs	r2, #3
 8013884:	805a      	strh	r2, [r3, #2]
 8013886:	e002      	b.n	801388e <AppPowerModeHelperAlloc+0x22>
  }
  else
  {
    p_new_obj->vptr = &s_xAppPowerModeHelper_vtbl;
 8013888:	687b      	ldr	r3, [r7, #4]
 801388a:	4a04      	ldr	r2, [pc, #16]	; (801389c <AppPowerModeHelperAlloc+0x30>)
 801388c:	601a      	str	r2, [r3, #0]
  }

  return p_new_obj;
 801388e:	687b      	ldr	r3, [r7, #4]
}
 8013890:	4618      	mov	r0, r3
 8013892:	3708      	adds	r7, #8
 8013894:	46bd      	mov	sp, r7
 8013896:	bd80      	pop	{r7, pc}
 8013898:	20000700 	.word	0x20000700
 801389c:	08027cf0 	.word	0x08027cf0

080138a0 <AppPowerModeHelper_vtblInit>:

/* Virtual functions definition */
/********************************/

sys_error_code_t AppPowerModeHelper_vtblInit(IAppPowerModeHelper *_this)
{
 80138a0:	b580      	push	{r7, lr}
 80138a2:	b084      	sub	sp, #16
 80138a4:	af00      	add	r7, sp, #0
 80138a6:	6078      	str	r0, [r7, #4]
  assert_param(_this != NULL);
 80138a8:	687b      	ldr	r3, [r7, #4]
 80138aa:	2b00      	cmp	r3, #0
 80138ac:	d103      	bne.n	80138b6 <AppPowerModeHelper_vtblInit+0x16>
 80138ae:	2166      	movs	r1, #102	; 0x66
 80138b0:	4808      	ldr	r0, [pc, #32]	; (80138d4 <AppPowerModeHelper_vtblInit+0x34>)
 80138b2:	f001 fcfa 	bl	80152aa <assert_failed>
  sys_error_code_t res = SYS_NO_ERROR_CODE;
 80138b6:	2300      	movs	r3, #0
 80138b8:	81fb      	strh	r3, [r7, #14]
  AppPowerModeHelper *p_obj = (AppPowerModeHelper*)_this;
 80138ba:	687b      	ldr	r3, [r7, #4]
 80138bc:	60bb      	str	r3, [r7, #8]

  p_obj->status.active_power_mode = E_POWER_MODE_STATE1;
 80138be:	68bb      	ldr	r3, [r7, #8]
 80138c0:	2200      	movs	r2, #0
 80138c2:	711a      	strb	r2, [r3, #4]
  p_obj->previous_run_state = E_POWER_MODE_STATE1;
 80138c4:	68bb      	ldr	r3, [r7, #8]
 80138c6:	2200      	movs	r2, #0
 80138c8:	715a      	strb	r2, [r3, #5]

  return res;
 80138ca:	89fb      	ldrh	r3, [r7, #14]
}
 80138cc:	4618      	mov	r0, r3
 80138ce:	3710      	adds	r7, #16
 80138d0:	46bd      	mov	sp, r7
 80138d2:	bd80      	pop	{r7, pc}
 80138d4:	0802655c 	.word	0x0802655c

080138d8 <AppPowerModeHelper_vtblComputeNewPowerMode>:

EPowerMode AppPowerModeHelper_vtblComputeNewPowerMode(IAppPowerModeHelper *_this, const SysEvent event)
{
 80138d8:	b580      	push	{r7, lr}
 80138da:	b084      	sub	sp, #16
 80138dc:	af00      	add	r7, sp, #0
 80138de:	6078      	str	r0, [r7, #4]
 80138e0:	6039      	str	r1, [r7, #0]
  assert_param(_this != NULL);
 80138e2:	687b      	ldr	r3, [r7, #4]
 80138e4:	2b00      	cmp	r3, #0
 80138e6:	d103      	bne.n	80138f0 <AppPowerModeHelper_vtblComputeNewPowerMode+0x18>
 80138e8:	2172      	movs	r1, #114	; 0x72
 80138ea:	4830      	ldr	r0, [pc, #192]	; (80139ac <AppPowerModeHelper_vtblComputeNewPowerMode+0xd4>)
 80138ec:	f001 fcdd 	bl	80152aa <assert_failed>
  AppPowerModeHelper *p_obj = (AppPowerModeHelper*)_this;
 80138f0:	687b      	ldr	r3, [r7, #4]
 80138f2:	60bb      	str	r3, [r7, #8]

  EPowerMode power_mode = p_obj->status.active_power_mode;
 80138f4:	68bb      	ldr	r3, [r7, #8]
 80138f6:	791b      	ldrb	r3, [r3, #4]
 80138f8:	73fb      	strb	r3, [r7, #15]

  switch (event.xEvent.nSource)
 80138fa:	783b      	ldrb	r3, [r7, #0]
 80138fc:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8013900:	b2db      	uxtb	r3, r3
 8013902:	2b03      	cmp	r3, #3
 8013904:	d035      	beq.n	8013972 <AppPowerModeHelper_vtblComputeNewPowerMode+0x9a>
 8013906:	2b03      	cmp	r3, #3
 8013908:	dc22      	bgt.n	8013950 <AppPowerModeHelper_vtblComputeNewPowerMode+0x78>
 801390a:	2b01      	cmp	r3, #1
 801390c:	d002      	beq.n	8013914 <AppPowerModeHelper_vtblComputeNewPowerMode+0x3c>
 801390e:	2b02      	cmp	r3, #2
 8013910:	d018      	beq.n	8013944 <AppPowerModeHelper_vtblComputeNewPowerMode+0x6c>
 8013912:	e01d      	b.n	8013950 <AppPowerModeHelper_vtblComputeNewPowerMode+0x78>
  {
  case SYS_PM_EVT_SRC_PB:
    if (power_mode == E_POWER_MODE_STATE1)
 8013914:	7bfb      	ldrb	r3, [r7, #15]
 8013916:	2b00      	cmp	r3, #0
 8013918:	d108      	bne.n	801392c <AppPowerModeHelper_vtblComputeNewPowerMode+0x54>
    {
      /* new state depends on on the event parameter */
      if (event.xEvent.nParam == SYS_PM_EVT_PARAM_SHORT_PRESS)
 801391a:	783b      	ldrb	r3, [r7, #0]
 801391c:	f023 0307 	bic.w	r3, r3, #7
 8013920:	b2db      	uxtb	r3, r3
 8013922:	2b08      	cmp	r3, #8
 8013924:	d127      	bne.n	8013976 <AppPowerModeHelper_vtblComputeNewPowerMode+0x9e>
      {
        power_mode = E_POWER_MODE_SENSORS_ACTIVE;
 8013926:	2302      	movs	r3, #2
 8013928:	73fb      	strb	r3, [r7, #15]
    }
    else if (power_mode == E_POWER_MODE_SLEEP_1)
    {
      power_mode = E_POWER_MODE_STATE1;
    }
    break;
 801392a:	e024      	b.n	8013976 <AppPowerModeHelper_vtblComputeNewPowerMode+0x9e>
    else if (power_mode == E_POWER_MODE_SENSORS_ACTIVE)
 801392c:	7bfb      	ldrb	r3, [r7, #15]
 801392e:	2b02      	cmp	r3, #2
 8013930:	d102      	bne.n	8013938 <AppPowerModeHelper_vtblComputeNewPowerMode+0x60>
      power_mode = E_POWER_MODE_STATE1;
 8013932:	2300      	movs	r3, #0
 8013934:	73fb      	strb	r3, [r7, #15]
    break;
 8013936:	e01e      	b.n	8013976 <AppPowerModeHelper_vtblComputeNewPowerMode+0x9e>
    else if (power_mode == E_POWER_MODE_SLEEP_1)
 8013938:	7bfb      	ldrb	r3, [r7, #15]
 801393a:	2b01      	cmp	r3, #1
 801393c:	d11b      	bne.n	8013976 <AppPowerModeHelper_vtblComputeNewPowerMode+0x9e>
      power_mode = E_POWER_MODE_STATE1;
 801393e:	2300      	movs	r3, #0
 8013940:	73fb      	strb	r3, [r7, #15]
    break;
 8013942:	e018      	b.n	8013976 <AppPowerModeHelper_vtblComputeNewPowerMode+0x9e>
  case SYS_PM_EVT_SRC_CTRL:
    /* this DPU demo does not have an application controller object. */
    break;

  case SYS_PM_EVT_SRC_LP_TIMER:
    if (power_mode == E_POWER_MODE_STATE1)
 8013944:	7bfb      	ldrb	r3, [r7, #15]
 8013946:	2b00      	cmp	r3, #0
 8013948:	d117      	bne.n	801397a <AppPowerModeHelper_vtblComputeNewPowerMode+0xa2>
    {
      power_mode = E_POWER_MODE_SLEEP_1;
 801394a:	2301      	movs	r3, #1
 801394c:	73fb      	strb	r3, [r7, #15]
    }
    break;
 801394e:	e014      	b.n	801397a <AppPowerModeHelper_vtblComputeNewPowerMode+0xa2>

  default:

    SYS_DEBUGF(SYS_DBG_LEVEL_VERBOSE, ("PMH: wrong SysEvent.\r\n"));
 8013950:	4b17      	ldr	r3, [pc, #92]	; (80139b0 <AppPowerModeHelper_vtblComputeNewPowerMode+0xd8>)
 8013952:	781b      	ldrb	r3, [r3, #0]
 8013954:	2b01      	cmp	r3, #1
 8013956:	d809      	bhi.n	801396c <AppPowerModeHelper_vtblComputeNewPowerMode+0x94>
 8013958:	4b16      	ldr	r3, [pc, #88]	; (80139b4 <AppPowerModeHelper_vtblComputeNewPowerMode+0xdc>)
 801395a:	681b      	ldr	r3, [r3, #0]
 801395c:	4798      	blx	r3
 801395e:	4b16      	ldr	r3, [pc, #88]	; (80139b8 <AppPowerModeHelper_vtblComputeNewPowerMode+0xe0>)
 8013960:	681b      	ldr	r3, [r3, #0]
 8013962:	4816      	ldr	r0, [pc, #88]	; (80139bc <AppPowerModeHelper_vtblComputeNewPowerMode+0xe4>)
 8013964:	4798      	blx	r3
 8013966:	4b16      	ldr	r3, [pc, #88]	; (80139c0 <AppPowerModeHelper_vtblComputeNewPowerMode+0xe8>)
 8013968:	681b      	ldr	r3, [r3, #0]
 801396a:	4798      	blx	r3

    sys_error_handler();
 801396c:	f7fb f9f4 	bl	800ed58 <sys_error_handler>
    break;
 8013970:	e004      	b.n	801397c <AppPowerModeHelper_vtblComputeNewPowerMode+0xa4>
    break;
 8013972:	bf00      	nop
 8013974:	e002      	b.n	801397c <AppPowerModeHelper_vtblComputeNewPowerMode+0xa4>
    break;
 8013976:	bf00      	nop
 8013978:	e000      	b.n	801397c <AppPowerModeHelper_vtblComputeNewPowerMode+0xa4>
    break;
 801397a:	bf00      	nop
  }

#ifdef SYS_DEBUG
  SYS_DEBUGF(SYS_DBG_LEVEL_VERBOSE, ("PMH: new PM:%u-%u.\r\n", p_obj->status.active_power_mode, power_mode));
 801397c:	4b0c      	ldr	r3, [pc, #48]	; (80139b0 <AppPowerModeHelper_vtblComputeNewPowerMode+0xd8>)
 801397e:	781b      	ldrb	r3, [r3, #0]
 8013980:	2b01      	cmp	r3, #1
 8013982:	d80d      	bhi.n	80139a0 <AppPowerModeHelper_vtblComputeNewPowerMode+0xc8>
 8013984:	4b0b      	ldr	r3, [pc, #44]	; (80139b4 <AppPowerModeHelper_vtblComputeNewPowerMode+0xdc>)
 8013986:	681b      	ldr	r3, [r3, #0]
 8013988:	4798      	blx	r3
 801398a:	4b0b      	ldr	r3, [pc, #44]	; (80139b8 <AppPowerModeHelper_vtblComputeNewPowerMode+0xe0>)
 801398c:	681b      	ldr	r3, [r3, #0]
 801398e:	68ba      	ldr	r2, [r7, #8]
 8013990:	7912      	ldrb	r2, [r2, #4]
 8013992:	4611      	mov	r1, r2
 8013994:	7bfa      	ldrb	r2, [r7, #15]
 8013996:	480b      	ldr	r0, [pc, #44]	; (80139c4 <AppPowerModeHelper_vtblComputeNewPowerMode+0xec>)
 8013998:	4798      	blx	r3
 801399a:	4b09      	ldr	r3, [pc, #36]	; (80139c0 <AppPowerModeHelper_vtblComputeNewPowerMode+0xe8>)
 801399c:	681b      	ldr	r3, [r3, #0]
 801399e:	4798      	blx	r3
#endif

  return power_mode;
 80139a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80139a2:	4618      	mov	r0, r3
 80139a4:	3710      	adds	r7, #16
 80139a6:	46bd      	mov	sp, r7
 80139a8:	bd80      	pop	{r7, pc}
 80139aa:	bf00      	nop
 80139ac:	0802655c 	.word	0x0802655c
 80139b0:	2000002c 	.word	0x2000002c
 80139b4:	20000030 	.word	0x20000030
 80139b8:	20000038 	.word	0x20000038
 80139bc:	080265dc 	.word	0x080265dc
 80139c0:	20000034 	.word	0x20000034
 80139c4:	080265f4 	.word	0x080265f4

080139c8 <AppPowerModeHelper_vtblCheckPowerModeTransaction>:

boolean_t AppPowerModeHelper_vtblCheckPowerModeTransaction(IAppPowerModeHelper *_this, const EPowerMode active_power_mode, const EPowerMode new_power_mode)
{
 80139c8:	b580      	push	{r7, lr}
 80139ca:	b084      	sub	sp, #16
 80139cc:	af00      	add	r7, sp, #0
 80139ce:	6078      	str	r0, [r7, #4]
 80139d0:	460b      	mov	r3, r1
 80139d2:	70fb      	strb	r3, [r7, #3]
 80139d4:	4613      	mov	r3, r2
 80139d6:	70bb      	strb	r3, [r7, #2]
  UNUSED(_this);
  boolean_t res = FALSE;
 80139d8:	2300      	movs	r3, #0
 80139da:	73fb      	strb	r3, [r7, #15]

  switch(active_power_mode)
 80139dc:	78fb      	ldrb	r3, [r7, #3]
 80139de:	2b02      	cmp	r3, #2
 80139e0:	d00f      	beq.n	8013a02 <AppPowerModeHelper_vtblCheckPowerModeTransaction+0x3a>
 80139e2:	2b02      	cmp	r3, #2
 80139e4:	dc19      	bgt.n	8013a1a <AppPowerModeHelper_vtblCheckPowerModeTransaction+0x52>
 80139e6:	2b00      	cmp	r3, #0
 80139e8:	d002      	beq.n	80139f0 <AppPowerModeHelper_vtblCheckPowerModeTransaction+0x28>
 80139ea:	2b01      	cmp	r3, #1
 80139ec:	d00f      	beq.n	8013a0e <AppPowerModeHelper_vtblCheckPowerModeTransaction+0x46>
 80139ee:	e014      	b.n	8013a1a <AppPowerModeHelper_vtblCheckPowerModeTransaction+0x52>
  {
    case E_POWER_MODE_STATE1:
      if((new_power_mode == E_POWER_MODE_SENSORS_ACTIVE) || (new_power_mode == E_POWER_MODE_SLEEP_1))
 80139f0:	78bb      	ldrb	r3, [r7, #2]
 80139f2:	2b02      	cmp	r3, #2
 80139f4:	d002      	beq.n	80139fc <AppPowerModeHelper_vtblCheckPowerModeTransaction+0x34>
 80139f6:	78bb      	ldrb	r3, [r7, #2]
 80139f8:	2b01      	cmp	r3, #1
 80139fa:	d111      	bne.n	8013a20 <AppPowerModeHelper_vtblCheckPowerModeTransaction+0x58>
      {
        res = TRUE;
 80139fc:	2301      	movs	r3, #1
 80139fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8013a00:	e00e      	b.n	8013a20 <AppPowerModeHelper_vtblCheckPowerModeTransaction+0x58>
    case E_POWER_MODE_SENSORS_ACTIVE:
      if(new_power_mode == E_POWER_MODE_STATE1)
 8013a02:	78bb      	ldrb	r3, [r7, #2]
 8013a04:	2b00      	cmp	r3, #0
 8013a06:	d10d      	bne.n	8013a24 <AppPowerModeHelper_vtblCheckPowerModeTransaction+0x5c>
      {
        res = TRUE;
 8013a08:	2301      	movs	r3, #1
 8013a0a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8013a0c:	e00a      	b.n	8013a24 <AppPowerModeHelper_vtblCheckPowerModeTransaction+0x5c>
    case E_POWER_MODE_SLEEP_1:
      if(new_power_mode == E_POWER_MODE_STATE1)
 8013a0e:	78bb      	ldrb	r3, [r7, #2]
 8013a10:	2b00      	cmp	r3, #0
 8013a12:	d109      	bne.n	8013a28 <AppPowerModeHelper_vtblCheckPowerModeTransaction+0x60>
      {
        res = TRUE;
 8013a14:	2301      	movs	r3, #1
 8013a16:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8013a18:	e006      	b.n	8013a28 <AppPowerModeHelper_vtblCheckPowerModeTransaction+0x60>
    default:
      res = FALSE;
 8013a1a:	2300      	movs	r3, #0
 8013a1c:	73fb      	strb	r3, [r7, #15]
 8013a1e:	e004      	b.n	8013a2a <AppPowerModeHelper_vtblCheckPowerModeTransaction+0x62>
      break;
 8013a20:	bf00      	nop
 8013a22:	e002      	b.n	8013a2a <AppPowerModeHelper_vtblCheckPowerModeTransaction+0x62>
      break;
 8013a24:	bf00      	nop
 8013a26:	e000      	b.n	8013a2a <AppPowerModeHelper_vtblCheckPowerModeTransaction+0x62>
      break;
 8013a28:	bf00      	nop
  }
  if(res == FALSE)
 8013a2a:	7bfb      	ldrb	r3, [r7, #15]
 8013a2c:	f083 0301 	eor.w	r3, r3, #1
 8013a30:	b2db      	uxtb	r3, r3
 8013a32:	2b00      	cmp	r3, #0
 8013a34:	d011      	beq.n	8013a5a <AppPowerModeHelper_vtblCheckPowerModeTransaction+0x92>
  {
    SYS_DEBUGF(SYS_DBG_LEVEL_VERBOSE, ("PMH: ERR PM transaction %u -> %u\r\n", (uint8_t)active_power_mode, (uint8_t)new_power_mode));
 8013a36:	4b13      	ldr	r3, [pc, #76]	; (8013a84 <AppPowerModeHelper_vtblCheckPowerModeTransaction+0xbc>)
 8013a38:	781b      	ldrb	r3, [r3, #0]
 8013a3a:	2b01      	cmp	r3, #1
 8013a3c:	d80b      	bhi.n	8013a56 <AppPowerModeHelper_vtblCheckPowerModeTransaction+0x8e>
 8013a3e:	4b12      	ldr	r3, [pc, #72]	; (8013a88 <AppPowerModeHelper_vtblCheckPowerModeTransaction+0xc0>)
 8013a40:	681b      	ldr	r3, [r3, #0]
 8013a42:	4798      	blx	r3
 8013a44:	4b11      	ldr	r3, [pc, #68]	; (8013a8c <AppPowerModeHelper_vtblCheckPowerModeTransaction+0xc4>)
 8013a46:	681b      	ldr	r3, [r3, #0]
 8013a48:	78f9      	ldrb	r1, [r7, #3]
 8013a4a:	78ba      	ldrb	r2, [r7, #2]
 8013a4c:	4810      	ldr	r0, [pc, #64]	; (8013a90 <AppPowerModeHelper_vtblCheckPowerModeTransaction+0xc8>)
 8013a4e:	4798      	blx	r3
 8013a50:	4b10      	ldr	r3, [pc, #64]	; (8013a94 <AppPowerModeHelper_vtblCheckPowerModeTransaction+0xcc>)
 8013a52:	681b      	ldr	r3, [r3, #0]
 8013a54:	4798      	blx	r3

    sys_error_handler();
 8013a56:	f7fb f97f 	bl	800ed58 <sys_error_handler>
  }
  SYS_DEBUGF(SYS_DBG_LEVEL_VERBOSE, ("PMH: PM transaction %u -> %u\r\n", (uint8_t)active_power_mode, (uint8_t)new_power_mode));
 8013a5a:	4b0a      	ldr	r3, [pc, #40]	; (8013a84 <AppPowerModeHelper_vtblCheckPowerModeTransaction+0xbc>)
 8013a5c:	781b      	ldrb	r3, [r3, #0]
 8013a5e:	2b01      	cmp	r3, #1
 8013a60:	d80b      	bhi.n	8013a7a <AppPowerModeHelper_vtblCheckPowerModeTransaction+0xb2>
 8013a62:	4b09      	ldr	r3, [pc, #36]	; (8013a88 <AppPowerModeHelper_vtblCheckPowerModeTransaction+0xc0>)
 8013a64:	681b      	ldr	r3, [r3, #0]
 8013a66:	4798      	blx	r3
 8013a68:	4b08      	ldr	r3, [pc, #32]	; (8013a8c <AppPowerModeHelper_vtblCheckPowerModeTransaction+0xc4>)
 8013a6a:	681b      	ldr	r3, [r3, #0]
 8013a6c:	78f9      	ldrb	r1, [r7, #3]
 8013a6e:	78ba      	ldrb	r2, [r7, #2]
 8013a70:	4809      	ldr	r0, [pc, #36]	; (8013a98 <AppPowerModeHelper_vtblCheckPowerModeTransaction+0xd0>)
 8013a72:	4798      	blx	r3
 8013a74:	4b07      	ldr	r3, [pc, #28]	; (8013a94 <AppPowerModeHelper_vtblCheckPowerModeTransaction+0xcc>)
 8013a76:	681b      	ldr	r3, [r3, #0]
 8013a78:	4798      	blx	r3
  return res;
 8013a7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8013a7c:	4618      	mov	r0, r3
 8013a7e:	3710      	adds	r7, #16
 8013a80:	46bd      	mov	sp, r7
 8013a82:	bd80      	pop	{r7, pc}
 8013a84:	2000002c 	.word	0x2000002c
 8013a88:	20000030 	.word	0x20000030
 8013a8c:	20000038 	.word	0x20000038
 8013a90:	0802660c 	.word	0x0802660c
 8013a94:	20000034 	.word	0x20000034
 8013a98:	08026630 	.word	0x08026630

08013a9c <AppPowerModeHelper_vtblDidEnterPowerMode>:

sys_error_code_t AppPowerModeHelper_vtblDidEnterPowerMode(IAppPowerModeHelper *_this, EPowerMode power_mode)
{
 8013a9c:	b580      	push	{r7, lr}
 8013a9e:	b086      	sub	sp, #24
 8013aa0:	af00      	add	r7, sp, #0
 8013aa2:	6078      	str	r0, [r7, #4]
 8013aa4:	460b      	mov	r3, r1
 8013aa6:	70fb      	strb	r3, [r7, #3]
  assert_param(_this != NULL);
 8013aa8:	687b      	ldr	r3, [r7, #4]
 8013aaa:	2b00      	cmp	r3, #0
 8013aac:	d103      	bne.n	8013ab6 <AppPowerModeHelper_vtblDidEnterPowerMode+0x1a>
 8013aae:	21ce      	movs	r1, #206	; 0xce
 8013ab0:	483b      	ldr	r0, [pc, #236]	; (8013ba0 <AppPowerModeHelper_vtblDidEnterPowerMode+0x104>)
 8013ab2:	f001 fbfa 	bl	80152aa <assert_failed>
  sys_error_code_t res = SYS_NO_ERROR_CODE;
 8013ab6:	2300      	movs	r3, #0
 8013ab8:	82fb      	strh	r3, [r7, #22]
  AppPowerModeHelper *p_obj = (AppPowerModeHelper*)_this;
 8013aba:	687b      	ldr	r3, [r7, #4]
 8013abc:	613b      	str	r3, [r7, #16]

  p_obj->status.active_power_mode = power_mode;
 8013abe:	693b      	ldr	r3, [r7, #16]
 8013ac0:	78fa      	ldrb	r2, [r7, #3]
 8013ac2:	711a      	strb	r2, [r3, #4]

  switch (power_mode)
 8013ac4:	78fb      	ldrb	r3, [r7, #3]
 8013ac6:	2b02      	cmp	r3, #2
 8013ac8:	d04f      	beq.n	8013b6a <AppPowerModeHelper_vtblDidEnterPowerMode+0xce>
 8013aca:	2b02      	cmp	r3, #2
 8013acc:	dc5c      	bgt.n	8013b88 <AppPowerModeHelper_vtblDidEnterPowerMode+0xec>
 8013ace:	2b00      	cmp	r3, #0
 8013ad0:	d03c      	beq.n	8013b4c <AppPowerModeHelper_vtblDidEnterPowerMode+0xb0>
 8013ad2:	2b01      	cmp	r3, #1
 8013ad4:	d158      	bne.n	8013b88 <AppPowerModeHelper_vtblDidEnterPowerMode+0xec>
  {
  case E_POWER_MODE_SLEEP_1:

    /* before put the MCU in STOP check if there are event pending in the system queue*/

    SYS_DEBUGF(SYS_DBG_LEVEL_VERBOSE, ("PMH: try SLEEP_1\r\n"));
 8013ad6:	4b33      	ldr	r3, [pc, #204]	; (8013ba4 <AppPowerModeHelper_vtblDidEnterPowerMode+0x108>)
 8013ad8:	781b      	ldrb	r3, [r3, #0]
 8013ada:	2b01      	cmp	r3, #1
 8013adc:	d809      	bhi.n	8013af2 <AppPowerModeHelper_vtblDidEnterPowerMode+0x56>
 8013ade:	4b32      	ldr	r3, [pc, #200]	; (8013ba8 <AppPowerModeHelper_vtblDidEnterPowerMode+0x10c>)
 8013ae0:	681b      	ldr	r3, [r3, #0]
 8013ae2:	4798      	blx	r3
 8013ae4:	4b31      	ldr	r3, [pc, #196]	; (8013bac <AppPowerModeHelper_vtblDidEnterPowerMode+0x110>)
 8013ae6:	681b      	ldr	r3, [r3, #0]
 8013ae8:	4831      	ldr	r0, [pc, #196]	; (8013bb0 <AppPowerModeHelper_vtblDidEnterPowerMode+0x114>)
 8013aea:	4798      	blx	r3
 8013aec:	4b31      	ldr	r3, [pc, #196]	; (8013bb4 <AppPowerModeHelper_vtblDidEnterPowerMode+0x118>)
 8013aee:	681b      	ldr	r3, [r3, #0]
 8013af0:	4798      	blx	r3

    /* disable the IRQ*/
    __asm volatile ("cpsid i");
 8013af2:	b672      	cpsid	i

    /* reset the WWDG*/
    SysResetAEDCounter();
 8013af4:	f7fb fb98 	bl	800f228 <SysResetAEDCounter>

    if (!SysEventsPending())
 8013af8:	f7fb fba2 	bl	800f240 <SysEventsPending>
 8013afc:	4603      	mov	r3, r0
 8013afe:	f083 0301 	eor.w	r3, r3, #1
 8013b02:	b2db      	uxtb	r3, r3
 8013b04:	2b00      	cmp	r3, #0
 8013b06:	d01f      	beq.n	8013b48 <AppPowerModeHelper_vtblDidEnterPowerMode+0xac>
    {
      HAL_SuspendTick();
 8013b08:	f001 fc38 	bl	801537c <HAL_SuspendTick>
      /* there are no other message waiting so I can put the MCU in stop
       Enable Power Control clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8013b0c:	4b2a      	ldr	r3, [pc, #168]	; (8013bb8 <AppPowerModeHelper_vtblDidEnterPowerMode+0x11c>)
 8013b0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8013b12:	4a29      	ldr	r2, [pc, #164]	; (8013bb8 <AppPowerModeHelper_vtblDidEnterPowerMode+0x11c>)
 8013b14:	f043 0304 	orr.w	r3, r3, #4
 8013b18:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8013b1c:	4b26      	ldr	r3, [pc, #152]	; (8013bb8 <AppPowerModeHelper_vtblDidEnterPowerMode+0x11c>)
 8013b1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8013b22:	f003 0304 	and.w	r3, r3, #4
 8013b26:	60fb      	str	r3, [r7, #12]
 8013b28:	68fb      	ldr	r3, [r7, #12]

      /* Enter Stop Mode*/

      /* Disable all used wakeup sources: WKUP pin*/
      HAL_PWR_DisableWakeUpPin(PWR_WAKEUP_PIN2);
 8013b2a:	2002      	movs	r0, #2
 8013b2c:	f7f1 f816 	bl	8004b5c <HAL_PWR_DisableWakeUpPin>

//      __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);

      SystemClock_Backup();
 8013b30:	f001 fe3c 	bl	80157ac <SystemClock_Backup>
      HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8013b34:	2101      	movs	r1, #1
 8013b36:	2000      	movs	r0, #0
 8013b38:	f7f1 f982 	bl	8004e40 <HAL_PWR_EnterSTOPMode>

      /* The MCU has exited the STOP mode
       reset the WWDG*/
      SysResetAEDCounter();
 8013b3c:	f7fb fb74 	bl	800f228 <SysResetAEDCounter>

      /* Configures system clock after wake-up from STOP*/
      SystemClock_Restore();
 8013b40:	f001 fe4a 	bl	80157d8 <SystemClock_Restore>
      HAL_ResumeTick();
 8013b44:	f001 fc2c 	bl	80153a0 <HAL_ResumeTick>
    }

    /* enable the IRQ*/
    __asm volatile ("cpsie i");
 8013b48:	b662      	cpsie	i
    break;
 8013b4a:	e023      	b.n	8013b94 <AppPowerModeHelper_vtblDidEnterPowerMode+0xf8>

  case E_POWER_MODE_STATE1:

    SYS_DEBUGF(SYS_DBG_LEVEL_VERBOSE, ("PMH: STATE1\r\n"));
 8013b4c:	4b15      	ldr	r3, [pc, #84]	; (8013ba4 <AppPowerModeHelper_vtblDidEnterPowerMode+0x108>)
 8013b4e:	781b      	ldrb	r3, [r3, #0]
 8013b50:	2b01      	cmp	r3, #1
 8013b52:	d81c      	bhi.n	8013b8e <AppPowerModeHelper_vtblDidEnterPowerMode+0xf2>
 8013b54:	4b14      	ldr	r3, [pc, #80]	; (8013ba8 <AppPowerModeHelper_vtblDidEnterPowerMode+0x10c>)
 8013b56:	681b      	ldr	r3, [r3, #0]
 8013b58:	4798      	blx	r3
 8013b5a:	4b14      	ldr	r3, [pc, #80]	; (8013bac <AppPowerModeHelper_vtblDidEnterPowerMode+0x110>)
 8013b5c:	681b      	ldr	r3, [r3, #0]
 8013b5e:	4817      	ldr	r0, [pc, #92]	; (8013bbc <AppPowerModeHelper_vtblDidEnterPowerMode+0x120>)
 8013b60:	4798      	blx	r3
 8013b62:	4b14      	ldr	r3, [pc, #80]	; (8013bb4 <AppPowerModeHelper_vtblDidEnterPowerMode+0x118>)
 8013b64:	681b      	ldr	r3, [r3, #0]
 8013b66:	4798      	blx	r3
//    {
//      size_t nFreeHeapSize = xPortGetFreeHeapSize();
//      SYS_DEBUGF(SYS_DBG_LEVEL_SL, ("PMH: free heap = %i.\r\n", nFreeHeapSize));
//    }
//#endif
    break;
 8013b68:	e011      	b.n	8013b8e <AppPowerModeHelper_vtblDidEnterPowerMode+0xf2>

  case E_POWER_MODE_SENSORS_ACTIVE:

    SYS_DEBUGF(SYS_DBG_LEVEL_VERBOSE, ("PMH: SENSORS_ACTIVE\r\n"));
 8013b6a:	4b0e      	ldr	r3, [pc, #56]	; (8013ba4 <AppPowerModeHelper_vtblDidEnterPowerMode+0x108>)
 8013b6c:	781b      	ldrb	r3, [r3, #0]
 8013b6e:	2b01      	cmp	r3, #1
 8013b70:	d80f      	bhi.n	8013b92 <AppPowerModeHelper_vtblDidEnterPowerMode+0xf6>
 8013b72:	4b0d      	ldr	r3, [pc, #52]	; (8013ba8 <AppPowerModeHelper_vtblDidEnterPowerMode+0x10c>)
 8013b74:	681b      	ldr	r3, [r3, #0]
 8013b76:	4798      	blx	r3
 8013b78:	4b0c      	ldr	r3, [pc, #48]	; (8013bac <AppPowerModeHelper_vtblDidEnterPowerMode+0x110>)
 8013b7a:	681b      	ldr	r3, [r3, #0]
 8013b7c:	4810      	ldr	r0, [pc, #64]	; (8013bc0 <AppPowerModeHelper_vtblDidEnterPowerMode+0x124>)
 8013b7e:	4798      	blx	r3
 8013b80:	4b0c      	ldr	r3, [pc, #48]	; (8013bb4 <AppPowerModeHelper_vtblDidEnterPowerMode+0x118>)
 8013b82:	681b      	ldr	r3, [r3, #0]
 8013b84:	4798      	blx	r3
//    {
//      size_t nFreeHeapSize = xPortGetFreeHeapSize();
//      SYS_DEBUGF(SYS_DBG_LEVEL_SL, ("PMH: free heap = %i.\r\n", nFreeHeapSize));
//    }
//#endif
    break;
 8013b86:	e004      	b.n	8013b92 <AppPowerModeHelper_vtblDidEnterPowerMode+0xf6>

  default:
    sys_error_handler();
 8013b88:	f7fb f8e6 	bl	800ed58 <sys_error_handler>
    break;
 8013b8c:	e002      	b.n	8013b94 <AppPowerModeHelper_vtblDidEnterPowerMode+0xf8>
    break;
 8013b8e:	bf00      	nop
 8013b90:	e000      	b.n	8013b94 <AppPowerModeHelper_vtblDidEnterPowerMode+0xf8>
    break;
 8013b92:	bf00      	nop
  }

  return res;
 8013b94:	8afb      	ldrh	r3, [r7, #22]
}
 8013b96:	4618      	mov	r0, r3
 8013b98:	3718      	adds	r7, #24
 8013b9a:	46bd      	mov	sp, r7
 8013b9c:	bd80      	pop	{r7, pc}
 8013b9e:	bf00      	nop
 8013ba0:	0802655c 	.word	0x0802655c
 8013ba4:	2000002c 	.word	0x2000002c
 8013ba8:	20000030 	.word	0x20000030
 8013bac:	20000038 	.word	0x20000038
 8013bb0:	08026650 	.word	0x08026650
 8013bb4:	20000034 	.word	0x20000034
 8013bb8:	46020c00 	.word	0x46020c00
 8013bbc:	08026664 	.word	0x08026664
 8013bc0:	08026674 	.word	0x08026674

08013bc4 <AppPowerModeHelper_vtblGetActivePowerMode>:

EPowerMode AppPowerModeHelper_vtblGetActivePowerMode(IAppPowerModeHelper *_this)
{
 8013bc4:	b580      	push	{r7, lr}
 8013bc6:	b084      	sub	sp, #16
 8013bc8:	af00      	add	r7, sp, #0
 8013bca:	6078      	str	r0, [r7, #4]
  assert_param(_this);
 8013bcc:	687b      	ldr	r3, [r7, #4]
 8013bce:	2b00      	cmp	r3, #0
 8013bd0:	d104      	bne.n	8013bdc <AppPowerModeHelper_vtblGetActivePowerMode+0x18>
 8013bd2:	f44f 7191 	mov.w	r1, #290	; 0x122
 8013bd6:	4805      	ldr	r0, [pc, #20]	; (8013bec <AppPowerModeHelper_vtblGetActivePowerMode+0x28>)
 8013bd8:	f001 fb67 	bl	80152aa <assert_failed>
  AppPowerModeHelper *p_obj = (AppPowerModeHelper*)_this;
 8013bdc:	687b      	ldr	r3, [r7, #4]
 8013bde:	60fb      	str	r3, [r7, #12]

  return p_obj->status.active_power_mode;
 8013be0:	68fb      	ldr	r3, [r7, #12]
 8013be2:	791b      	ldrb	r3, [r3, #4]
}
 8013be4:	4618      	mov	r0, r3
 8013be6:	3710      	adds	r7, #16
 8013be8:	46bd      	mov	sp, r7
 8013bea:	bd80      	pop	{r7, pc}
 8013bec:	0802655c 	.word	0x0802655c

08013bf0 <AppPowerModeHelper_vtblGetPowerStatus>:

SysPowerStatus AppPowerModeHelper_vtblGetPowerStatus(IAppPowerModeHelper *_this)
{
 8013bf0:	b580      	push	{r7, lr}
 8013bf2:	b084      	sub	sp, #16
 8013bf4:	af00      	add	r7, sp, #0
 8013bf6:	6078      	str	r0, [r7, #4]
  assert_param(_this);
 8013bf8:	687b      	ldr	r3, [r7, #4]
 8013bfa:	2b00      	cmp	r3, #0
 8013bfc:	d104      	bne.n	8013c08 <AppPowerModeHelper_vtblGetPowerStatus+0x18>
 8013bfe:	f44f 7195 	mov.w	r1, #298	; 0x12a
 8013c02:	4805      	ldr	r0, [pc, #20]	; (8013c18 <AppPowerModeHelper_vtblGetPowerStatus+0x28>)
 8013c04:	f001 fb51 	bl	80152aa <assert_failed>
  AppPowerModeHelper *p_obj = (AppPowerModeHelper*)_this;
 8013c08:	687b      	ldr	r3, [r7, #4]
 8013c0a:	60fb      	str	r3, [r7, #12]

  return p_obj->status;
 8013c0c:	68fb      	ldr	r3, [r7, #12]
 8013c0e:	791b      	ldrb	r3, [r3, #4]
}
 8013c10:	4618      	mov	r0, r3
 8013c12:	3710      	adds	r7, #16
 8013c14:	46bd      	mov	sp, r7
 8013c16:	bd80      	pop	{r7, pc}
 8013c18:	0802655c 	.word	0x0802655c

08013c1c <AppPowerModeHelper_vtblIsLowPowerMode>:

boolean_t AppPowerModeHelper_vtblIsLowPowerMode(IAppPowerModeHelper *_this, const EPowerMode power_mode)
{
 8013c1c:	b480      	push	{r7}
 8013c1e:	b083      	sub	sp, #12
 8013c20:	af00      	add	r7, sp, #0
 8013c22:	6078      	str	r0, [r7, #4]
 8013c24:	460b      	mov	r3, r1
 8013c26:	70fb      	strb	r3, [r7, #3]
  UNUSED(_this);

  return power_mode == E_POWER_MODE_SLEEP_1 ? TRUE : FALSE;
 8013c28:	78fb      	ldrb	r3, [r7, #3]
 8013c2a:	2b01      	cmp	r3, #1
 8013c2c:	bf0c      	ite	eq
 8013c2e:	2301      	moveq	r3, #1
 8013c30:	2300      	movne	r3, #0
 8013c32:	b2db      	uxtb	r3, r3
}
 8013c34:	4618      	mov	r0, r3
 8013c36:	370c      	adds	r7, #12
 8013c38:	46bd      	mov	sp, r7
 8013c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c3e:	4770      	bx	lr

08013c40 <AMTInit>:
sys_error_code_t AMTInit(AManagedTask *_this) {
 8013c40:	b480      	push	{r7}
 8013c42:	b083      	sub	sp, #12
 8013c44:	af00      	add	r7, sp, #0
 8013c46:	6078      	str	r0, [r7, #4]
  _this->m_pNext = NULL;
 8013c48:	687b      	ldr	r3, [r7, #4]
 8013c4a:	2200      	movs	r2, #0
 8013c4c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  _this->m_pfPMState2FuncMap = NULL;
 8013c50:	687b      	ldr	r3, [r7, #4]
 8013c52:	2200      	movs	r2, #0
 8013c54:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
  _this->m_pPMState2PMStateMap = NULL;
 8013c58:	687b      	ldr	r3, [r7, #4]
 8013c5a:	2200      	movs	r2, #0
 8013c5c:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  _this->m_xStatus.nDelayPowerModeSwitch = 1;
 8013c60:	687a      	ldr	r2, [r7, #4]
 8013c62:	f892 30c0 	ldrb.w	r3, [r2, #192]	; 0xc0
 8013c66:	f043 0301 	orr.w	r3, r3, #1
 8013c6a:	f882 30c0 	strb.w	r3, [r2, #192]	; 0xc0
  _this->m_xStatus.nPowerModeSwitchPending = 0;
 8013c6e:	687a      	ldr	r2, [r7, #4]
 8013c70:	f892 30c0 	ldrb.w	r3, [r2, #192]	; 0xc0
 8013c74:	f36f 0341 	bfc	r3, #1, #1
 8013c78:	f882 30c0 	strb.w	r3, [r2, #192]	; 0xc0
  _this->m_xStatus.nPowerModeSwitchDone = 0;
 8013c7c:	687a      	ldr	r2, [r7, #4]
 8013c7e:	f892 30c0 	ldrb.w	r3, [r2, #192]	; 0xc0
 8013c82:	f36f 0382 	bfc	r3, #2, #1
 8013c86:	f882 30c0 	strb.w	r3, [r2, #192]	; 0xc0
  _this->m_xStatus.nIsTaskStillRunning = 0;
 8013c8a:	687a      	ldr	r2, [r7, #4]
 8013c8c:	f892 30c0 	ldrb.w	r3, [r2, #192]	; 0xc0
 8013c90:	f36f 03c3 	bfc	r3, #3, #1
 8013c94:	f882 30c0 	strb.w	r3, [r2, #192]	; 0xc0
  _this->m_xStatus.nErrorCount = 0;
 8013c98:	687a      	ldr	r2, [r7, #4]
 8013c9a:	f892 30c0 	ldrb.w	r3, [r2, #192]	; 0xc0
 8013c9e:	f36f 1305 	bfc	r3, #4, #2
 8013ca2:	f882 30c0 	strb.w	r3, [r2, #192]	; 0xc0
  _this->m_xStatus.nAutoStart = 0;
 8013ca6:	687a      	ldr	r2, [r7, #4]
 8013ca8:	f892 30c0 	ldrb.w	r3, [r2, #192]	; 0xc0
 8013cac:	f36f 1386 	bfc	r3, #6, #1
 8013cb0:	f882 30c0 	strb.w	r3, [r2, #192]	; 0xc0
  _this->m_xStatus.nReserved = 0;
 8013cb4:	687a      	ldr	r2, [r7, #4]
 8013cb6:	f892 30c0 	ldrb.w	r3, [r2, #192]	; 0xc0
 8013cba:	f36f 13c7 	bfc	r3, #7, #1
 8013cbe:	f882 30c0 	strb.w	r3, [r2, #192]	; 0xc0
  return SYS_NO_ERROR_CODE;
 8013cc2:	2300      	movs	r3, #0
}
 8013cc4:	4618      	mov	r0, r3
 8013cc6:	370c      	adds	r7, #12
 8013cc8:	46bd      	mov	sp, r7
 8013cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cce:	4770      	bx	lr

08013cd0 <IDrvInit>:

// Inline function definition.
// ***************************

SYS_DEFINE_STATIC_INLINE
sys_error_code_t IDrvInit(IDriver *_this, void *pParams) {
 8013cd0:	b580      	push	{r7, lr}
 8013cd2:	b082      	sub	sp, #8
 8013cd4:	af00      	add	r7, sp, #0
 8013cd6:	6078      	str	r0, [r7, #4]
 8013cd8:	6039      	str	r1, [r7, #0]
  return _this->vptr->Init(_this, pParams);
 8013cda:	687b      	ldr	r3, [r7, #4]
 8013cdc:	681b      	ldr	r3, [r3, #0]
 8013cde:	681b      	ldr	r3, [r3, #0]
 8013ce0:	6839      	ldr	r1, [r7, #0]
 8013ce2:	6878      	ldr	r0, [r7, #4]
 8013ce4:	4798      	blx	r3
 8013ce6:	4603      	mov	r3, r0
}
 8013ce8:	4618      	mov	r0, r3
 8013cea:	3708      	adds	r7, #8
 8013cec:	46bd      	mov	sp, r7
 8013cee:	bd80      	pop	{r7, pc}

08013cf0 <IDrvStart>:

SYS_DEFINE_STATIC_INLINE
sys_error_code_t IDrvStart(IDriver *_this) {
 8013cf0:	b580      	push	{r7, lr}
 8013cf2:	b082      	sub	sp, #8
 8013cf4:	af00      	add	r7, sp, #0
 8013cf6:	6078      	str	r0, [r7, #4]
  return _this->vptr->Start(_this);
 8013cf8:	687b      	ldr	r3, [r7, #4]
 8013cfa:	681b      	ldr	r3, [r3, #0]
 8013cfc:	685b      	ldr	r3, [r3, #4]
 8013cfe:	6878      	ldr	r0, [r7, #4]
 8013d00:	4798      	blx	r3
 8013d02:	4603      	mov	r3, r0
}
 8013d04:	4618      	mov	r0, r3
 8013d06:	3708      	adds	r7, #8
 8013d08:	46bd      	mov	sp, r7
 8013d0a:	bd80      	pop	{r7, pc}

08013d0c <HelloWorldTaskAlloc>:

// Public API definition
// *********************

AManagedTask *HelloWorldTaskAlloc(const void *p_mx_drv_cfg)
{
 8013d0c:	b580      	push	{r7, lr}
 8013d0e:	b082      	sub	sp, #8
 8013d10:	af00      	add	r7, sp, #0
 8013d12:	6078      	str	r0, [r7, #4]
  // In this application there is only one Keyboard task,
  // so this allocator implement the singleton design pattern.

  // Initialize the super class
  AMTInit(&s_xTaskObj.super);
 8013d14:	4809      	ldr	r0, [pc, #36]	; (8013d3c <HelloWorldTaskAlloc+0x30>)
 8013d16:	f7ff ff93 	bl	8013c40 <AMTInit>

  s_xTaskObj.super.vptr = &s_xTheClass.m_xVTBL;
 8013d1a:	4b08      	ldr	r3, [pc, #32]	; (8013d3c <HelloWorldTaskAlloc+0x30>)
 8013d1c:	4a08      	ldr	r2, [pc, #32]	; (8013d40 <HelloWorldTaskAlloc+0x34>)
 8013d1e:	601a      	str	r2, [r3, #0]

  s_xTaskObj.p_mx_drv_cfg = p_mx_drv_cfg;
 8013d20:	4a06      	ldr	r2, [pc, #24]	; (8013d3c <HelloWorldTaskAlloc+0x30>)
 8013d22:	687b      	ldr	r3, [r7, #4]
 8013d24:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8

  s_xTaskObj.m_xDpuListenerIF.vptr = &s_xTheClass.m_xProcListenerVTBL;
 8013d28:	4b04      	ldr	r3, [pc, #16]	; (8013d3c <HelloWorldTaskAlloc+0x30>)
 8013d2a:	4a06      	ldr	r2, [pc, #24]	; (8013d44 <HelloWorldTaskAlloc+0x38>)
 8013d2c:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

  return (AManagedTask*)&s_xTaskObj;
 8013d30:	4b02      	ldr	r3, [pc, #8]	; (8013d3c <HelloWorldTaskAlloc+0x30>)
}
 8013d32:	4618      	mov	r0, r3
 8013d34:	3708      	adds	r7, #8
 8013d36:	46bd      	mov	sp, r7
 8013d38:	bd80      	pop	{r7, pc}
 8013d3a:	bf00      	nop
 8013d3c:	20026684 	.word	0x20026684
 8013d40:	08027d0c 	.word	0x08027d0c
 8013d44:	08027d20 	.word	0x08027d20

08013d48 <HelloWorldTask_vtblHardwareInit>:

// AManagedTask virtual functions definition
// ***********************************************

sys_error_code_t HelloWorldTask_vtblHardwareInit(AManagedTask *_this, void *pParams)
{
 8013d48:	b580      	push	{r7, lr}
 8013d4a:	b086      	sub	sp, #24
 8013d4c:	af00      	add	r7, sp, #0
 8013d4e:	6078      	str	r0, [r7, #4]
 8013d50:	6039      	str	r1, [r7, #0]
  assert_param(_this != NULL);
 8013d52:	687b      	ldr	r3, [r7, #4]
 8013d54:	2b00      	cmp	r3, #0
 8013d56:	d103      	bne.n	8013d60 <HelloWorldTask_vtblHardwareInit+0x18>
 8013d58:	2191      	movs	r1, #145	; 0x91
 8013d5a:	4829      	ldr	r0, [pc, #164]	; (8013e00 <HelloWorldTask_vtblHardwareInit+0xb8>)
 8013d5c:	f001 faa5 	bl	80152aa <assert_failed>
  sys_error_code_t xRes = SYS_NO_ERROR_CODE;
 8013d60:	2300      	movs	r3, #0
 8013d62:	82fb      	strh	r3, [r7, #22]
  HelloWorldTask *pObj = (HelloWorldTask*) _this;
 8013d64:	687b      	ldr	r3, [r7, #4]
 8013d66:	613b      	str	r3, [r7, #16]

  if(pObj->p_mx_drv_cfg != NULL)
 8013d68:	693b      	ldr	r3, [r7, #16]
 8013d6a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8013d6e:	2b00      	cmp	r3, #0
 8013d70:	d041      	beq.n	8013df6 <HelloWorldTask_vtblHardwareInit+0xae>
  {
    pObj->m_pxDriver = PushButtonDrvAlloc();
 8013d72:	f001 fef1 	bl	8015b58 <PushButtonDrvAlloc>
 8013d76:	4602      	mov	r2, r0
 8013d78:	693b      	ldr	r3, [r7, #16]
 8013d7a:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    if(pObj->m_pxDriver == NULL)
 8013d7e:	693b      	ldr	r3, [r7, #16]
 8013d80:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8013d84:	2b00      	cmp	r3, #0
 8013d86:	d111      	bne.n	8013dac <HelloWorldTask_vtblHardwareInit+0x64>
    {
      SYS_DEBUGF(SYS_DBG_LEVEL_SEVERE, ("HW: unable to alloc driver object.\r\n"));
 8013d88:	4b1e      	ldr	r3, [pc, #120]	; (8013e04 <HelloWorldTask_vtblHardwareInit+0xbc>)
 8013d8a:	781b      	ldrb	r3, [r3, #0]
 8013d8c:	2b06      	cmp	r3, #6
 8013d8e:	d809      	bhi.n	8013da4 <HelloWorldTask_vtblHardwareInit+0x5c>
 8013d90:	4b1d      	ldr	r3, [pc, #116]	; (8013e08 <HelloWorldTask_vtblHardwareInit+0xc0>)
 8013d92:	681b      	ldr	r3, [r3, #0]
 8013d94:	4798      	blx	r3
 8013d96:	4b1d      	ldr	r3, [pc, #116]	; (8013e0c <HelloWorldTask_vtblHardwareInit+0xc4>)
 8013d98:	681b      	ldr	r3, [r3, #0]
 8013d9a:	481d      	ldr	r0, [pc, #116]	; (8013e10 <HelloWorldTask_vtblHardwareInit+0xc8>)
 8013d9c:	4798      	blx	r3
 8013d9e:	4b1d      	ldr	r3, [pc, #116]	; (8013e14 <HelloWorldTask_vtblHardwareInit+0xcc>)
 8013da0:	681b      	ldr	r3, [r3, #0]
 8013da2:	4798      	blx	r3
      xRes = SYS_GET_LAST_LOW_LEVEL_ERROR_CODE();
 8013da4:	4b1c      	ldr	r3, [pc, #112]	; (8013e18 <HelloWorldTask_vtblHardwareInit+0xd0>)
 8013da6:	881b      	ldrh	r3, [r3, #0]
 8013da8:	82fb      	strh	r3, [r7, #22]
 8013daa:	e024      	b.n	8013df6 <HelloWorldTask_vtblHardwareInit+0xae>
    }
    else
    {
      PushButtonDrvParams_t driver_cfg = {
 8013dac:	f107 0308 	add.w	r3, r7, #8
 8013db0:	2200      	movs	r2, #0
 8013db2:	601a      	str	r2, [r3, #0]
 8013db4:	605a      	str	r2, [r3, #4]
          .p_mx_gpio_cfg = (void*) pObj->p_mx_drv_cfg
 8013db6:	693b      	ldr	r3, [r7, #16]
 8013db8:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
      PushButtonDrvParams_t driver_cfg = {
 8013dbc:	60bb      	str	r3, [r7, #8]
      };
      xRes = IDrvInit((IDriver*) pObj->m_pxDriver, &driver_cfg);
 8013dbe:	693b      	ldr	r3, [r7, #16]
 8013dc0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8013dc4:	f107 0208 	add.w	r2, r7, #8
 8013dc8:	4611      	mov	r1, r2
 8013dca:	4618      	mov	r0, r3
 8013dcc:	f7ff ff80 	bl	8013cd0 <IDrvInit>
 8013dd0:	4603      	mov	r3, r0
 8013dd2:	82fb      	strh	r3, [r7, #22]
      if(SYS_IS_ERROR_CODE(xRes))
 8013dd4:	8afb      	ldrh	r3, [r7, #22]
 8013dd6:	2b00      	cmp	r3, #0
 8013dd8:	d00d      	beq.n	8013df6 <HelloWorldTask_vtblHardwareInit+0xae>
      {
        SYS_DEBUGF(SYS_DBG_LEVEL_SEVERE, ("HW: error during driver initialization\r\n"));
 8013dda:	4b0a      	ldr	r3, [pc, #40]	; (8013e04 <HelloWorldTask_vtblHardwareInit+0xbc>)
 8013ddc:	781b      	ldrb	r3, [r3, #0]
 8013dde:	2b06      	cmp	r3, #6
 8013de0:	d809      	bhi.n	8013df6 <HelloWorldTask_vtblHardwareInit+0xae>
 8013de2:	4b09      	ldr	r3, [pc, #36]	; (8013e08 <HelloWorldTask_vtblHardwareInit+0xc0>)
 8013de4:	681b      	ldr	r3, [r3, #0]
 8013de6:	4798      	blx	r3
 8013de8:	4b08      	ldr	r3, [pc, #32]	; (8013e0c <HelloWorldTask_vtblHardwareInit+0xc4>)
 8013dea:	681b      	ldr	r3, [r3, #0]
 8013dec:	480b      	ldr	r0, [pc, #44]	; (8013e1c <HelloWorldTask_vtblHardwareInit+0xd4>)
 8013dee:	4798      	blx	r3
 8013df0:	4b08      	ldr	r3, [pc, #32]	; (8013e14 <HelloWorldTask_vtblHardwareInit+0xcc>)
 8013df2:	681b      	ldr	r3, [r3, #0]
 8013df4:	4798      	blx	r3
      }
    }
  }
  return xRes;
 8013df6:	8afb      	ldrh	r3, [r7, #22]
}
 8013df8:	4618      	mov	r0, r3
 8013dfa:	3718      	adds	r7, #24
 8013dfc:	46bd      	mov	sp, r7
 8013dfe:	bd80      	pop	{r7, pc}
 8013e00:	0802668c 	.word	0x0802668c
 8013e04:	2000002c 	.word	0x2000002c
 8013e08:	20000030 	.word	0x20000030
 8013e0c:	20000038 	.word	0x20000038
 8013e10:	08026708 	.word	0x08026708
 8013e14:	20000034 	.word	0x20000034
 8013e18:	20000700 	.word	0x20000700
 8013e1c:	08026730 	.word	0x08026730

08013e20 <HelloWorldTask_vtblOnCreateTask>:
sys_error_code_t HelloWorldTask_vtblOnCreateTask(AManagedTask *_this, tx_entry_function_t *pTaskCode, CHAR **pName,
    VOID **pStackStart, ULONG *pStackDepth,
    UINT *pPriority, UINT *pPreemptThreshold,
    ULONG *pTimeSlice, ULONG *pAutoStart,
    ULONG *pParams)
{
 8013e20:	b580      	push	{r7, lr}
 8013e22:	b086      	sub	sp, #24
 8013e24:	af00      	add	r7, sp, #0
 8013e26:	60f8      	str	r0, [r7, #12]
 8013e28:	60b9      	str	r1, [r7, #8]
 8013e2a:	607a      	str	r2, [r7, #4]
 8013e2c:	603b      	str	r3, [r7, #0]
  assert_param(_this != NULL);
 8013e2e:	68fb      	ldr	r3, [r7, #12]
 8013e30:	2b00      	cmp	r3, #0
 8013e32:	d103      	bne.n	8013e3c <HelloWorldTask_vtblOnCreateTask+0x1c>
 8013e34:	21b2      	movs	r1, #178	; 0xb2
 8013e36:	4815      	ldr	r0, [pc, #84]	; (8013e8c <HelloWorldTask_vtblOnCreateTask+0x6c>)
 8013e38:	f001 fa37 	bl	80152aa <assert_failed>
  sys_error_code_t xRes = SYS_NO_ERROR_CODE;
 8013e3c:	2300      	movs	r3, #0
 8013e3e:	82fb      	strh	r3, [r7, #22]
//  HelloWorldTask *pObj = (HelloWorldTask*)_this;

  _this->m_pfPMState2FuncMap = s_xTheClass.m_pfPMState2FuncMap;
 8013e40:	68fb      	ldr	r3, [r7, #12]
 8013e42:	4a13      	ldr	r2, [pc, #76]	; (8013e90 <HelloWorldTask_vtblOnCreateTask+0x70>)
 8013e44:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

//  *pvTaskCode = HelloWorldTaskRun;
  *pTaskCode = AMTRun;
 8013e48:	68bb      	ldr	r3, [r7, #8]
 8013e4a:	4a12      	ldr	r2, [pc, #72]	; (8013e94 <HelloWorldTask_vtblOnCreateTask+0x74>)
 8013e4c:	601a      	str	r2, [r3, #0]
  *pName = "HW";
 8013e4e:	687b      	ldr	r3, [r7, #4]
 8013e50:	4a11      	ldr	r2, [pc, #68]	; (8013e98 <HelloWorldTask_vtblOnCreateTask+0x78>)
 8013e52:	601a      	str	r2, [r3, #0]
  *pStackStart = NULL; // allocate the task stack in the system memory pool.
 8013e54:	683b      	ldr	r3, [r7, #0]
 8013e56:	2200      	movs	r2, #0
 8013e58:	601a      	str	r2, [r3, #0]
  *pStackDepth = HW_TASK_CFG_STACK_DEPTH;
 8013e5a:	6a3b      	ldr	r3, [r7, #32]
 8013e5c:	f44f 62af 	mov.w	r2, #1400	; 0x578
 8013e60:	601a      	str	r2, [r3, #0]
  *pParams = (ULONG)_this;
 8013e62:	68fa      	ldr	r2, [r7, #12]
 8013e64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013e66:	601a      	str	r2, [r3, #0]
  *pPriority = HW_TASK_CFG_PRIORITY;
 8013e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e6a:	221e      	movs	r2, #30
 8013e6c:	601a      	str	r2, [r3, #0]
  *pPreemptThreshold = HW_TASK_CFG_PRIORITY;
 8013e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e70:	221e      	movs	r2, #30
 8013e72:	601a      	str	r2, [r3, #0]
  *pTimeSlice = TX_NO_TIME_SLICE;
 8013e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e76:	2200      	movs	r2, #0
 8013e78:	601a      	str	r2, [r3, #0]
  *pAutoStart = TX_AUTO_START;
 8013e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e7c:	2201      	movs	r2, #1
 8013e7e:	601a      	str	r2, [r3, #0]

  return xRes;
 8013e80:	8afb      	ldrh	r3, [r7, #22]
}
 8013e82:	4618      	mov	r0, r3
 8013e84:	3718      	adds	r7, #24
 8013e86:	46bd      	mov	sp, r7
 8013e88:	bd80      	pop	{r7, pc}
 8013e8a:	bf00      	nop
 8013e8c:	0802668c 	.word	0x0802668c
 8013e90:	08027d30 	.word	0x08027d30
 8013e94:	0800e755 	.word	0x0800e755
 8013e98:	0802675c 	.word	0x0802675c

08013e9c <HelloWorldTask_vtblDoEnterPowerMode>:

sys_error_code_t HelloWorldTask_vtblDoEnterPowerMode(AManagedTask *_this, const EPowerMode eActivePowerMode, const EPowerMode eNewPowerMode)
{
 8013e9c:	b580      	push	{r7, lr}
 8013e9e:	b084      	sub	sp, #16
 8013ea0:	af00      	add	r7, sp, #0
 8013ea2:	6078      	str	r0, [r7, #4]
 8013ea4:	460b      	mov	r3, r1
 8013ea6:	70fb      	strb	r3, [r7, #3]
 8013ea8:	4613      	mov	r3, r2
 8013eaa:	70bb      	strb	r3, [r7, #2]
  assert_param(_this);
 8013eac:	687b      	ldr	r3, [r7, #4]
 8013eae:	2b00      	cmp	r3, #0
 8013eb0:	d103      	bne.n	8013eba <HelloWorldTask_vtblDoEnterPowerMode+0x1e>
 8013eb2:	21c8      	movs	r1, #200	; 0xc8
 8013eb4:	4804      	ldr	r0, [pc, #16]	; (8013ec8 <HelloWorldTask_vtblDoEnterPowerMode+0x2c>)
 8013eb6:	f001 f9f8 	bl	80152aa <assert_failed>
  sys_error_code_t xRes = SYS_NO_ERROR_CODE;
 8013eba:	2300      	movs	r3, #0
 8013ebc:	81fb      	strh	r3, [r7, #14]

  return xRes;
 8013ebe:	89fb      	ldrh	r3, [r7, #14]
}
 8013ec0:	4618      	mov	r0, r3
 8013ec2:	3710      	adds	r7, #16
 8013ec4:	46bd      	mov	sp, r7
 8013ec6:	bd80      	pop	{r7, pc}
 8013ec8:	0802668c 	.word	0x0802668c

08013ecc <HelloWorldTask_vtblHandleError>:

sys_error_code_t HelloWorldTask_vtblHandleError(AManagedTask *_this, SysEvent xError)
{
 8013ecc:	b580      	push	{r7, lr}
 8013ece:	b084      	sub	sp, #16
 8013ed0:	af00      	add	r7, sp, #0
 8013ed2:	6078      	str	r0, [r7, #4]
 8013ed4:	6039      	str	r1, [r7, #0]
  assert_param(_this);
 8013ed6:	687b      	ldr	r3, [r7, #4]
 8013ed8:	2b00      	cmp	r3, #0
 8013eda:	d103      	bne.n	8013ee4 <HelloWorldTask_vtblHandleError+0x18>
 8013edc:	21d0      	movs	r1, #208	; 0xd0
 8013ede:	4805      	ldr	r0, [pc, #20]	; (8013ef4 <HelloWorldTask_vtblHandleError+0x28>)
 8013ee0:	f001 f9e3 	bl	80152aa <assert_failed>
  sys_error_code_t xRes = SYS_NO_ERROR_CODE;
 8013ee4:	2300      	movs	r3, #0
 8013ee6:	81fb      	strh	r3, [r7, #14]

  return xRes;
 8013ee8:	89fb      	ldrh	r3, [r7, #14]
}
 8013eea:	4618      	mov	r0, r3
 8013eec:	3710      	adds	r7, #16
 8013eee:	46bd      	mov	sp, r7
 8013ef0:	bd80      	pop	{r7, pc}
 8013ef2:	bf00      	nop
 8013ef4:	0802668c 	.word	0x0802668c

08013ef8 <HelloWorldTask_vtblOnEnterTaskControlLoop>:

sys_error_code_t HelloWorldTask_vtblOnEnterTaskControlLoop(AManagedTask *_this)
{
 8013ef8:	b580      	push	{r7, lr}
 8013efa:	b084      	sub	sp, #16
 8013efc:	af00      	add	r7, sp, #0
 8013efe:	6078      	str	r0, [r7, #4]
  assert_param(_this);
 8013f00:	687b      	ldr	r3, [r7, #4]
 8013f02:	2b00      	cmp	r3, #0
 8013f04:	d103      	bne.n	8013f0e <HelloWorldTask_vtblOnEnterTaskControlLoop+0x16>
 8013f06:	21d8      	movs	r1, #216	; 0xd8
 8013f08:	4812      	ldr	r0, [pc, #72]	; (8013f54 <HelloWorldTask_vtblOnEnterTaskControlLoop+0x5c>)
 8013f0a:	f001 f9ce 	bl	80152aa <assert_failed>
  sys_error_code_t xRes = SYS_NO_ERROR_CODE;
 8013f0e:	2300      	movs	r3, #0
 8013f10:	81fb      	strh	r3, [r7, #14]
  HelloWorldTask *p_obj = (HelloWorldTask*)_this;
 8013f12:	687b      	ldr	r3, [r7, #4]
 8013f14:	60bb      	str	r3, [r7, #8]

  SYS_DEBUGF(SYS_DBG_LEVEL_VERBOSE, ("HW: start.\r\n"));
 8013f16:	4b10      	ldr	r3, [pc, #64]	; (8013f58 <HelloWorldTask_vtblOnEnterTaskControlLoop+0x60>)
 8013f18:	781b      	ldrb	r3, [r3, #0]
 8013f1a:	2b01      	cmp	r3, #1
 8013f1c:	d809      	bhi.n	8013f32 <HelloWorldTask_vtblOnEnterTaskControlLoop+0x3a>
 8013f1e:	4b0f      	ldr	r3, [pc, #60]	; (8013f5c <HelloWorldTask_vtblOnEnterTaskControlLoop+0x64>)
 8013f20:	681b      	ldr	r3, [r3, #0]
 8013f22:	4798      	blx	r3
 8013f24:	4b0e      	ldr	r3, [pc, #56]	; (8013f60 <HelloWorldTask_vtblOnEnterTaskControlLoop+0x68>)
 8013f26:	681b      	ldr	r3, [r3, #0]
 8013f28:	480e      	ldr	r0, [pc, #56]	; (8013f64 <HelloWorldTask_vtblOnEnterTaskControlLoop+0x6c>)
 8013f2a:	4798      	blx	r3
 8013f2c:	4b0e      	ldr	r3, [pc, #56]	; (8013f68 <HelloWorldTask_vtblOnEnterTaskControlLoop+0x70>)
 8013f2e:	681b      	ldr	r3, [r3, #0]
 8013f30:	4798      	blx	r3

  if (p_obj->m_pxDriver != NULL)
 8013f32:	68bb      	ldr	r3, [r7, #8]
 8013f34:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8013f38:	2b00      	cmp	r3, #0
 8013f3a:	d005      	beq.n	8013f48 <HelloWorldTask_vtblOnEnterTaskControlLoop+0x50>
  {
    IDrvStart(p_obj->m_pxDriver);
 8013f3c:	68bb      	ldr	r3, [r7, #8]
 8013f3e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8013f42:	4618      	mov	r0, r3
 8013f44:	f7ff fed4 	bl	8013cf0 <IDrvStart>
  }

  return xRes;
 8013f48:	89fb      	ldrh	r3, [r7, #14]
}
 8013f4a:	4618      	mov	r0, r3
 8013f4c:	3710      	adds	r7, #16
 8013f4e:	46bd      	mov	sp, r7
 8013f50:	bd80      	pop	{r7, pc}
 8013f52:	bf00      	nop
 8013f54:	0802668c 	.word	0x0802668c
 8013f58:	2000002c 	.word	0x2000002c
 8013f5c:	20000030 	.word	0x20000030
 8013f60:	20000038 	.word	0x20000038
 8013f64:	08026760 	.word	0x08026760
 8013f68:	20000034 	.word	0x20000034

08013f6c <HelloWorldTaskExecuteStepRun>:

// Private function definition
// ***************************

static sys_error_code_t HelloWorldTaskExecuteStepRun(AManagedTask *_this)
{
 8013f6c:	b580      	push	{r7, lr}
 8013f6e:	b084      	sub	sp, #16
 8013f70:	af00      	add	r7, sp, #0
 8013f72:	6078      	str	r0, [r7, #4]
  assert_param(_this != NULL);
 8013f74:	687b      	ldr	r3, [r7, #4]
 8013f76:	2b00      	cmp	r3, #0
 8013f78:	d103      	bne.n	8013f82 <HelloWorldTaskExecuteStepRun+0x16>
 8013f7a:	21ec      	movs	r1, #236	; 0xec
 8013f7c:	480e      	ldr	r0, [pc, #56]	; (8013fb8 <HelloWorldTaskExecuteStepRun+0x4c>)
 8013f7e:	f001 f994 	bl	80152aa <assert_failed>
  sys_error_code_t xRes = SYS_NO_ERROR_CODE;
 8013f82:	2300      	movs	r3, #0
 8013f84:	81fb      	strh	r3, [r7, #14]

  tx_thread_sleep(1000);
 8013f86:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8013f8a:	f7fd fce7 	bl	801195c <_tx_thread_sleep>

  SYS_DEBUGF(SYS_DBG_LEVEL_VERBOSE, ("Hello STWIN.box!!\r\n"));
 8013f8e:	4b0b      	ldr	r3, [pc, #44]	; (8013fbc <HelloWorldTaskExecuteStepRun+0x50>)
 8013f90:	781b      	ldrb	r3, [r3, #0]
 8013f92:	2b01      	cmp	r3, #1
 8013f94:	d809      	bhi.n	8013faa <HelloWorldTaskExecuteStepRun+0x3e>
 8013f96:	4b0a      	ldr	r3, [pc, #40]	; (8013fc0 <HelloWorldTaskExecuteStepRun+0x54>)
 8013f98:	681b      	ldr	r3, [r3, #0]
 8013f9a:	4798      	blx	r3
 8013f9c:	4b09      	ldr	r3, [pc, #36]	; (8013fc4 <HelloWorldTaskExecuteStepRun+0x58>)
 8013f9e:	681b      	ldr	r3, [r3, #0]
 8013fa0:	4809      	ldr	r0, [pc, #36]	; (8013fc8 <HelloWorldTaskExecuteStepRun+0x5c>)
 8013fa2:	4798      	blx	r3
 8013fa4:	4b09      	ldr	r3, [pc, #36]	; (8013fcc <HelloWorldTaskExecuteStepRun+0x60>)
 8013fa6:	681b      	ldr	r3, [r3, #0]
 8013fa8:	4798      	blx	r3
  __NOP();
 8013faa:	bf00      	nop
  __NOP();
 8013fac:	bf00      	nop

  return xRes;
 8013fae:	89fb      	ldrh	r3, [r7, #14]
}
 8013fb0:	4618      	mov	r0, r3
 8013fb2:	3710      	adds	r7, #16
 8013fb4:	46bd      	mov	sp, r7
 8013fb6:	bd80      	pop	{r7, pc}
 8013fb8:	0802668c 	.word	0x0802668c
 8013fbc:	2000002c 	.word	0x2000002c
 8013fc0:	20000030 	.word	0x20000030
 8013fc4:	20000038 	.word	0x20000038
 8013fc8:	08026770 	.word	0x08026770
 8013fcc:	20000034 	.word	0x20000034

08013fd0 <HelloWorldTask_vtblOnProcessedDataReady>:

// IProcessEventListener virtual functions
//****************************************

sys_error_code_t HelloWorldTask_vtblOnProcessedDataReady(IEventListener *_this, const ProcessEvent *pxEvt)
{
 8013fd0:	b580      	push	{r7, lr}
 8013fd2:	b084      	sub	sp, #16
 8013fd4:	af00      	add	r7, sp, #0
 8013fd6:	6078      	str	r0, [r7, #4]
 8013fd8:	6039      	str	r1, [r7, #0]
  assert_param(_this != NULL);
 8013fda:	687b      	ldr	r3, [r7, #4]
 8013fdc:	2b00      	cmp	r3, #0
 8013fde:	d103      	bne.n	8013fe8 <HelloWorldTask_vtblOnProcessedDataReady+0x18>
 8013fe0:	21fd      	movs	r1, #253	; 0xfd
 8013fe2:	480d      	ldr	r0, [pc, #52]	; (8014018 <HelloWorldTask_vtblOnProcessedDataReady+0x48>)
 8013fe4:	f001 f961 	bl	80152aa <assert_failed>
  sys_error_code_t xRes = SYS_NO_ERROR_CODE;
 8013fe8:	2300      	movs	r3, #0
 8013fea:	81fb      	strh	r3, [r7, #14]
  HelloWorldTask *p_if_owner = (HelloWorldTask*)((uint32_t)_this - offsetof(HelloWorldTask, m_xDpuListenerIF));
 8013fec:	687b      	ldr	r3, [r7, #4]
 8013fee:	3bcc      	subs	r3, #204	; 0xcc
 8013ff0:	60bb      	str	r3, [r7, #8]
  UNUSED(p_if_owner);

  SYS_DEBUGF(SYS_DBG_LEVEL_VERBOSE, ("HW: observed new processed data.\r\n"));
 8013ff2:	4b0a      	ldr	r3, [pc, #40]	; (801401c <HelloWorldTask_vtblOnProcessedDataReady+0x4c>)
 8013ff4:	781b      	ldrb	r3, [r3, #0]
 8013ff6:	2b01      	cmp	r3, #1
 8013ff8:	d809      	bhi.n	801400e <HelloWorldTask_vtblOnProcessedDataReady+0x3e>
 8013ffa:	4b09      	ldr	r3, [pc, #36]	; (8014020 <HelloWorldTask_vtblOnProcessedDataReady+0x50>)
 8013ffc:	681b      	ldr	r3, [r3, #0]
 8013ffe:	4798      	blx	r3
 8014000:	4b08      	ldr	r3, [pc, #32]	; (8014024 <HelloWorldTask_vtblOnProcessedDataReady+0x54>)
 8014002:	681b      	ldr	r3, [r3, #0]
 8014004:	4808      	ldr	r0, [pc, #32]	; (8014028 <HelloWorldTask_vtblOnProcessedDataReady+0x58>)
 8014006:	4798      	blx	r3
 8014008:	4b08      	ldr	r3, [pc, #32]	; (801402c <HelloWorldTask_vtblOnProcessedDataReady+0x5c>)
 801400a:	681b      	ldr	r3, [r3, #0]
 801400c:	4798      	blx	r3

  return xRes;
 801400e:	89fb      	ldrh	r3, [r7, #14]
}
 8014010:	4618      	mov	r0, r3
 8014012:	3710      	adds	r7, #16
 8014014:	46bd      	mov	sp, r7
 8014016:	bd80      	pop	{r7, pc}
 8014018:	0802668c 	.word	0x0802668c
 801401c:	2000002c 	.word	0x2000002c
 8014020:	20000030 	.word	0x20000030
 8014024:	20000038 	.word	0x20000038
 8014028:	08026784 	.word	0x08026784
 801402c:	20000034 	.word	0x20000034

08014030 <HelloWorldTask_vtblOnStatusChange>:

// IListener virtual functions definition
//***************************************

sys_error_code_t HelloWorldTask_vtblOnStatusChange(IListener *_this)
{
 8014030:	b580      	push	{r7, lr}
 8014032:	b082      	sub	sp, #8
 8014034:	af00      	add	r7, sp, #0
 8014036:	6078      	str	r0, [r7, #4]
  assert_param(_this != NULL);
 8014038:	687b      	ldr	r3, [r7, #4]
 801403a:	2b00      	cmp	r3, #0
 801403c:	d104      	bne.n	8014048 <HelloWorldTask_vtblOnStatusChange+0x18>
 801403e:	f240 110d 	movw	r1, #269	; 0x10d
 8014042:	480b      	ldr	r0, [pc, #44]	; (8014070 <HelloWorldTask_vtblOnStatusChange+0x40>)
 8014044:	f001 f931 	bl	80152aa <assert_failed>

  SYS_DEBUGF(SYS_DBG_LEVEL_WARNING, ("HW: OnStatusChange not implemented.\r\n"));
 8014048:	4b0a      	ldr	r3, [pc, #40]	; (8014074 <HelloWorldTask_vtblOnStatusChange+0x44>)
 801404a:	781b      	ldrb	r3, [r3, #0]
 801404c:	2b05      	cmp	r3, #5
 801404e:	d809      	bhi.n	8014064 <HelloWorldTask_vtblOnStatusChange+0x34>
 8014050:	4b09      	ldr	r3, [pc, #36]	; (8014078 <HelloWorldTask_vtblOnStatusChange+0x48>)
 8014052:	681b      	ldr	r3, [r3, #0]
 8014054:	4798      	blx	r3
 8014056:	4b09      	ldr	r3, [pc, #36]	; (801407c <HelloWorldTask_vtblOnStatusChange+0x4c>)
 8014058:	681b      	ldr	r3, [r3, #0]
 801405a:	4809      	ldr	r0, [pc, #36]	; (8014080 <HelloWorldTask_vtblOnStatusChange+0x50>)
 801405c:	4798      	blx	r3
 801405e:	4b09      	ldr	r3, [pc, #36]	; (8014084 <HelloWorldTask_vtblOnStatusChange+0x54>)
 8014060:	681b      	ldr	r3, [r3, #0]
 8014062:	4798      	blx	r3

  return SYS_NO_ERROR_CODE;
 8014064:	2300      	movs	r3, #0
}
 8014066:	4618      	mov	r0, r3
 8014068:	3708      	adds	r7, #8
 801406a:	46bd      	mov	sp, r7
 801406c:	bd80      	pop	{r7, pc}
 801406e:	bf00      	nop
 8014070:	0802668c 	.word	0x0802668c
 8014074:	2000002c 	.word	0x2000002c
 8014078:	20000030 	.word	0x20000030
 801407c:	20000038 	.word	0x20000038
 8014080:	080267a8 	.word	0x080267a8
 8014084:	20000034 	.word	0x20000034

08014088 <HelloWorldTask_vtblSetOwner>:

// IEventListener virtual functions
//*********************************

void HelloWorldTask_vtblSetOwner(IEventListener *_this, void *pxOwner)
{
 8014088:	b580      	push	{r7, lr}
 801408a:	b082      	sub	sp, #8
 801408c:	af00      	add	r7, sp, #0
 801408e:	6078      	str	r0, [r7, #4]
 8014090:	6039      	str	r1, [r7, #0]
  assert_param(_this != NULL);
 8014092:	687b      	ldr	r3, [r7, #4]
 8014094:	2b00      	cmp	r3, #0
 8014096:	d104      	bne.n	80140a2 <HelloWorldTask_vtblSetOwner+0x1a>
 8014098:	f240 1119 	movw	r1, #281	; 0x119
 801409c:	480a      	ldr	r0, [pc, #40]	; (80140c8 <HelloWorldTask_vtblSetOwner+0x40>)
 801409e:	f001 f904 	bl	80152aa <assert_failed>
  UNUSED(pxOwner);

  SYS_DEBUGF(SYS_DBG_LEVEL_WARNING, ("HW: SetOwner not implemented.\r\n"));
 80140a2:	4b0a      	ldr	r3, [pc, #40]	; (80140cc <HelloWorldTask_vtblSetOwner+0x44>)
 80140a4:	781b      	ldrb	r3, [r3, #0]
 80140a6:	2b05      	cmp	r3, #5
 80140a8:	d809      	bhi.n	80140be <HelloWorldTask_vtblSetOwner+0x36>
 80140aa:	4b09      	ldr	r3, [pc, #36]	; (80140d0 <HelloWorldTask_vtblSetOwner+0x48>)
 80140ac:	681b      	ldr	r3, [r3, #0]
 80140ae:	4798      	blx	r3
 80140b0:	4b08      	ldr	r3, [pc, #32]	; (80140d4 <HelloWorldTask_vtblSetOwner+0x4c>)
 80140b2:	681b      	ldr	r3, [r3, #0]
 80140b4:	4808      	ldr	r0, [pc, #32]	; (80140d8 <HelloWorldTask_vtblSetOwner+0x50>)
 80140b6:	4798      	blx	r3
 80140b8:	4b08      	ldr	r3, [pc, #32]	; (80140dc <HelloWorldTask_vtblSetOwner+0x54>)
 80140ba:	681b      	ldr	r3, [r3, #0]
 80140bc:	4798      	blx	r3
}
 80140be:	bf00      	nop
 80140c0:	3708      	adds	r7, #8
 80140c2:	46bd      	mov	sp, r7
 80140c4:	bd80      	pop	{r7, pc}
 80140c6:	bf00      	nop
 80140c8:	0802668c 	.word	0x0802668c
 80140cc:	2000002c 	.word	0x2000002c
 80140d0:	20000030 	.word	0x20000030
 80140d4:	20000038 	.word	0x20000038
 80140d8:	080267d0 	.word	0x080267d0
 80140dc:	20000034 	.word	0x20000034

080140e0 <HelloWorldTask_vtblGetOwner>:

void *HelloWorldTask_vtblGetOwner(IEventListener *_this)
{
 80140e0:	b580      	push	{r7, lr}
 80140e2:	b082      	sub	sp, #8
 80140e4:	af00      	add	r7, sp, #0
 80140e6:	6078      	str	r0, [r7, #4]
  assert_param(_this != NULL);
 80140e8:	687b      	ldr	r3, [r7, #4]
 80140ea:	2b00      	cmp	r3, #0
 80140ec:	d104      	bne.n	80140f8 <HelloWorldTask_vtblGetOwner+0x18>
 80140ee:	f240 1121 	movw	r1, #289	; 0x121
 80140f2:	480b      	ldr	r0, [pc, #44]	; (8014120 <HelloWorldTask_vtblGetOwner+0x40>)
 80140f4:	f001 f8d9 	bl	80152aa <assert_failed>

  SYS_DEBUGF(SYS_DBG_LEVEL_WARNING, ("HW: GetOwner not implemented.\r\n"));
 80140f8:	4b0a      	ldr	r3, [pc, #40]	; (8014124 <HelloWorldTask_vtblGetOwner+0x44>)
 80140fa:	781b      	ldrb	r3, [r3, #0]
 80140fc:	2b05      	cmp	r3, #5
 80140fe:	d809      	bhi.n	8014114 <HelloWorldTask_vtblGetOwner+0x34>
 8014100:	4b09      	ldr	r3, [pc, #36]	; (8014128 <HelloWorldTask_vtblGetOwner+0x48>)
 8014102:	681b      	ldr	r3, [r3, #0]
 8014104:	4798      	blx	r3
 8014106:	4b09      	ldr	r3, [pc, #36]	; (801412c <HelloWorldTask_vtblGetOwner+0x4c>)
 8014108:	681b      	ldr	r3, [r3, #0]
 801410a:	4809      	ldr	r0, [pc, #36]	; (8014130 <HelloWorldTask_vtblGetOwner+0x50>)
 801410c:	4798      	blx	r3
 801410e:	4b09      	ldr	r3, [pc, #36]	; (8014134 <HelloWorldTask_vtblGetOwner+0x54>)
 8014110:	681b      	ldr	r3, [r3, #0]
 8014112:	4798      	blx	r3

  return NULL;
 8014114:	2300      	movs	r3, #0
}
 8014116:	4618      	mov	r0, r3
 8014118:	3708      	adds	r7, #8
 801411a:	46bd      	mov	sp, r7
 801411c:	bd80      	pop	{r7, pc}
 801411e:	bf00      	nop
 8014120:	0802668c 	.word	0x0802668c
 8014124:	2000002c 	.word	0x2000002c
 8014128:	20000030 	.word	0x20000030
 801412c:	20000038 	.word	0x20000038
 8014130:	080267f0 	.word	0x080267f0
 8014134:	20000034 	.word	0x20000034

08014138 <HW_PB_EXTI_Callback>:

/* CubeMX Integration */
/**********************/

void HW_PB_EXTI_Callback(uint16_t pin)
{
 8014138:	b580      	push	{r7, lr}
 801413a:	b084      	sub	sp, #16
 801413c:	af00      	add	r7, sp, #0
 801413e:	4603      	mov	r3, r0
 8014140:	80fb      	strh	r3, [r7, #6]
  /* anti debounch */
  static uint32_t t_start = 0;
  if(HAL_GetTick() - t_start > 10*HW_TASK_ANTI_DEBOUNCH_PERIOD_TICK)
 8014142:	f7ee fdc1 	bl	8002cc8 <HAL_GetTick>
 8014146:	4602      	mov	r2, r0
 8014148:	4b0a      	ldr	r3, [pc, #40]	; (8014174 <HW_PB_EXTI_Callback+0x3c>)
 801414a:	681b      	ldr	r3, [r3, #0]
 801414c:	1ad3      	subs	r3, r2, r3
 801414e:	2b46      	cmp	r3, #70	; 0x46
 8014150:	d90c      	bls.n	801416c <HW_PB_EXTI_Callback+0x34>
  {
    if(pin == USER_BUTTON_Pin)
 8014152:	88fb      	ldrh	r3, [r7, #6]
 8014154:	2b01      	cmp	r3, #1
 8014156:	d109      	bne.n	801416c <HW_PB_EXTI_Callback+0x34>
    {
      /* generate the system event to change the PM state*/
      SysEvent evt = {
 8014158:	2309      	movs	r3, #9
 801415a:	60fb      	str	r3, [r7, #12]
          .nRawEvent = SYS_PM_MAKE_EVENT(SYS_PM_EVT_SRC_PB, SYS_PM_EVT_PARAM_SHORT_PRESS)
      };
      SysPostPowerModeEvent(evt);
 801415c:	68f8      	ldr	r0, [r7, #12]
 801415e:	f7fb f811 	bl	800f184 <SysPostEvent>

      t_start = HAL_GetTick();
 8014162:	f7ee fdb1 	bl	8002cc8 <HAL_GetTick>
 8014166:	4603      	mov	r3, r0
 8014168:	4a02      	ldr	r2, [pc, #8]	; (8014174 <HW_PB_EXTI_Callback+0x3c>)
 801416a:	6013      	str	r3, [r2, #0]
    }
  }
}
 801416c:	bf00      	nop
 801416e:	3710      	adds	r7, #16
 8014170:	46bd      	mov	sp, r7
 8014172:	bd80      	pop	{r7, pc}
 8014174:	20026754 	.word	0x20026754

08014178 <AMTInitEx>:
sys_error_code_t AMTInitEx(AManagedTaskEx *_this) {
 8014178:	b480      	push	{r7}
 801417a:	b083      	sub	sp, #12
 801417c:	af00      	add	r7, sp, #0
 801417e:	6078      	str	r0, [r7, #4]
  _this->m_pNext = NULL;
 8014180:	687b      	ldr	r3, [r7, #4]
 8014182:	2200      	movs	r2, #0
 8014184:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  _this->m_pfPMState2FuncMap = NULL;
 8014188:	687b      	ldr	r3, [r7, #4]
 801418a:	2200      	movs	r2, #0
 801418c:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
  _this->m_pPMState2PMStateMap = NULL;
 8014190:	687b      	ldr	r3, [r7, #4]
 8014192:	2200      	movs	r2, #0
 8014194:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  _this->m_pfPMState2FuncMap = NULL;
 8014198:	687b      	ldr	r3, [r7, #4]
 801419a:	2200      	movs	r2, #0
 801419c:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
  _this->m_pPMState2PMStateMap = NULL;
 80141a0:	687b      	ldr	r3, [r7, #4]
 80141a2:	2200      	movs	r2, #0
 80141a4:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  _this->m_xStatus.nDelayPowerModeSwitch = 1;
 80141a8:	687a      	ldr	r2, [r7, #4]
 80141aa:	f892 30c0 	ldrb.w	r3, [r2, #192]	; 0xc0
 80141ae:	f043 0301 	orr.w	r3, r3, #1
 80141b2:	f882 30c0 	strb.w	r3, [r2, #192]	; 0xc0
  _this->m_xStatus.nPowerModeSwitchPending = 0;
 80141b6:	687a      	ldr	r2, [r7, #4]
 80141b8:	f892 30c0 	ldrb.w	r3, [r2, #192]	; 0xc0
 80141bc:	f36f 0341 	bfc	r3, #1, #1
 80141c0:	f882 30c0 	strb.w	r3, [r2, #192]	; 0xc0
  _this->m_xStatus.nPowerModeSwitchDone = 0;
 80141c4:	687a      	ldr	r2, [r7, #4]
 80141c6:	f892 30c0 	ldrb.w	r3, [r2, #192]	; 0xc0
 80141ca:	f36f 0382 	bfc	r3, #2, #1
 80141ce:	f882 30c0 	strb.w	r3, [r2, #192]	; 0xc0
  _this->m_xStatus.nIsTaskStillRunning = 0;
 80141d2:	687a      	ldr	r2, [r7, #4]
 80141d4:	f892 30c0 	ldrb.w	r3, [r2, #192]	; 0xc0
 80141d8:	f36f 03c3 	bfc	r3, #3, #1
 80141dc:	f882 30c0 	strb.w	r3, [r2, #192]	; 0xc0
  _this->m_xStatus.nErrorCount = 0;
 80141e0:	687a      	ldr	r2, [r7, #4]
 80141e2:	f892 30c0 	ldrb.w	r3, [r2, #192]	; 0xc0
 80141e6:	f36f 1305 	bfc	r3, #4, #2
 80141ea:	f882 30c0 	strb.w	r3, [r2, #192]	; 0xc0
  _this->m_xStatus.nAutoStart = 0;
 80141ee:	687a      	ldr	r2, [r7, #4]
 80141f0:	f892 30c0 	ldrb.w	r3, [r2, #192]	; 0xc0
 80141f4:	f36f 1386 	bfc	r3, #6, #1
 80141f8:	f882 30c0 	strb.w	r3, [r2, #192]	; 0xc0
  _this->m_xStatus.nReserved = 1; // this identifies the task as an AManagedTaskEx.
 80141fc:	687a      	ldr	r2, [r7, #4]
 80141fe:	f892 30c0 	ldrb.w	r3, [r2, #192]	; 0xc0
 8014202:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014206:	f882 30c0 	strb.w	r3, [r2, #192]	; 0xc0
  _this->m_xStatusEx.nIsWaitingNoTimeout = 0;
 801420a:	687a      	ldr	r2, [r7, #4]
 801420c:	f892 30c1 	ldrb.w	r3, [r2, #193]	; 0xc1
 8014210:	f36f 0300 	bfc	r3, #0, #1
 8014214:	f882 30c1 	strb.w	r3, [r2, #193]	; 0xc1
  _this->m_xStatusEx.nPowerModeClass = E_PM_CLASS_0;
 8014218:	687a      	ldr	r2, [r7, #4]
 801421a:	f892 30c1 	ldrb.w	r3, [r2, #193]	; 0xc1
 801421e:	f36f 0342 	bfc	r3, #1, #2
 8014222:	f882 30c1 	strb.w	r3, [r2, #193]	; 0xc1
  _this->m_xStatusEx.nUnused = 0;
 8014226:	687a      	ldr	r2, [r7, #4]
 8014228:	f892 30c1 	ldrb.w	r3, [r2, #193]	; 0xc1
 801422c:	f36f 03c6 	bfc	r3, #3, #4
 8014230:	f882 30c1 	strb.w	r3, [r2, #193]	; 0xc1
  _this->m_xStatusEx.nReserved = 0;
 8014234:	687a      	ldr	r2, [r7, #4]
 8014236:	f892 30c1 	ldrb.w	r3, [r2, #193]	; 0xc1
 801423a:	f36f 13c7 	bfc	r3, #7, #1
 801423e:	f882 30c1 	strb.w	r3, [r2, #193]	; 0xc1
  return SYS_NO_ERROR_CODE;
 8014242:	2300      	movs	r3, #0
}
 8014244:	4618      	mov	r0, r3
 8014246:	370c      	adds	r7, #12
 8014248:	46bd      	mov	sp, r7
 801424a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801424e:	4770      	bx	lr

08014250 <AMTExSetInactiveState>:
sys_error_code_t AMTExSetInactiveState(AManagedTaskEx *_this, boolean_t bBlockedSuspended) {
 8014250:	b580      	push	{r7, lr}
 8014252:	b082      	sub	sp, #8
 8014254:	af00      	add	r7, sp, #0
 8014256:	6078      	str	r0, [r7, #4]
 8014258:	460b      	mov	r3, r1
 801425a:	70fb      	strb	r3, [r7, #3]
  assert_param(_this);
 801425c:	687b      	ldr	r3, [r7, #4]
 801425e:	2b00      	cmp	r3, #0
 8014260:	d103      	bne.n	801426a <AMTExSetInactiveState+0x1a>
 8014262:	21a6      	movs	r1, #166	; 0xa6
 8014264:	4807      	ldr	r0, [pc, #28]	; (8014284 <AMTExSetInactiveState+0x34>)
 8014266:	f001 f820 	bl	80152aa <assert_failed>
  _this->m_xStatusEx.nIsWaitingNoTimeout = (uint8_t)bBlockedSuspended;
 801426a:	687a      	ldr	r2, [r7, #4]
 801426c:	f892 30c1 	ldrb.w	r3, [r2, #193]	; 0xc1
 8014270:	78f9      	ldrb	r1, [r7, #3]
 8014272:	f361 0300 	bfi	r3, r1, #0, #1
 8014276:	f882 30c1 	strb.w	r3, [r2, #193]	; 0xc1
  return SYS_NO_ERROR_CODE;
 801427a:	2300      	movs	r3, #0
}
 801427c:	4618      	mov	r0, r3
 801427e:	3708      	adds	r7, #8
 8014280:	46bd      	mov	sp, r7
 8014282:	bd80      	pop	{r7, pc}
 8014284:	08026810 	.word	0x08026810

08014288 <AMTExSetPMClass>:
sys_error_code_t AMTExSetPMClass(AManagedTaskEx *_this, EPMClass eNewPMClass) {
 8014288:	b580      	push	{r7, lr}
 801428a:	b082      	sub	sp, #8
 801428c:	af00      	add	r7, sp, #0
 801428e:	6078      	str	r0, [r7, #4]
 8014290:	460b      	mov	r3, r1
 8014292:	70fb      	strb	r3, [r7, #3]
  assert_param(_this);
 8014294:	687b      	ldr	r3, [r7, #4]
 8014296:	2b00      	cmp	r3, #0
 8014298:	d103      	bne.n	80142a2 <AMTExSetPMClass+0x1a>
 801429a:	21b6      	movs	r1, #182	; 0xb6
 801429c:	4809      	ldr	r0, [pc, #36]	; (80142c4 <AMTExSetPMClass+0x3c>)
 801429e:	f001 f804 	bl	80152aa <assert_failed>
  _this->m_xStatusEx.nPowerModeClass = (uint8_t)eNewPMClass;
 80142a2:	78fb      	ldrb	r3, [r7, #3]
 80142a4:	f003 0303 	and.w	r3, r3, #3
 80142a8:	b2d9      	uxtb	r1, r3
 80142aa:	687a      	ldr	r2, [r7, #4]
 80142ac:	f892 30c1 	ldrb.w	r3, [r2, #193]	; 0xc1
 80142b0:	f361 0342 	bfi	r3, r1, #1, #2
 80142b4:	f882 30c1 	strb.w	r3, [r2, #193]	; 0xc1
  return SYS_NO_ERROR_CODE;
 80142b8:	2300      	movs	r3, #0
}
 80142ba:	4618      	mov	r0, r3
 80142bc:	3708      	adds	r7, #8
 80142be:	46bd      	mov	sp, r7
 80142c0:	bd80      	pop	{r7, pc}
 80142c2:	bf00      	nop
 80142c4:	08026810 	.word	0x08026810

080142c8 <IEventSrcAddEventListener>:
sys_error_code_t IEventSrcInit(IEventSrc *this) {
	return this->vptr->Init(this);
}

SYS_DEFINE_STATIC_INLINE
sys_error_code_t IEventSrcAddEventListener(IEventSrc *this, IEventListener *pListener) {
 80142c8:	b580      	push	{r7, lr}
 80142ca:	b082      	sub	sp, #8
 80142cc:	af00      	add	r7, sp, #0
 80142ce:	6078      	str	r0, [r7, #4]
 80142d0:	6039      	str	r1, [r7, #0]
	return this->vptr->AddEventListener(this, pListener);
 80142d2:	687b      	ldr	r3, [r7, #4]
 80142d4:	681b      	ldr	r3, [r3, #0]
 80142d6:	685b      	ldr	r3, [r3, #4]
 80142d8:	6839      	ldr	r1, [r7, #0]
 80142da:	6878      	ldr	r0, [r7, #4]
 80142dc:	4798      	blx	r3
 80142de:	4603      	mov	r3, r0
}
 80142e0:	4618      	mov	r0, r3
 80142e2:	3708      	adds	r7, #8
 80142e4:	46bd      	mov	sp, r7
 80142e6:	bd80      	pop	{r7, pc}

080142e8 <IEventSrcRemoveEventListener>:

SYS_DEFINE_STATIC_INLINE
sys_error_code_t IEventSrcRemoveEventListener(IEventSrc *this, IEventListener *pListener) {
 80142e8:	b580      	push	{r7, lr}
 80142ea:	b082      	sub	sp, #8
 80142ec:	af00      	add	r7, sp, #0
 80142ee:	6078      	str	r0, [r7, #4]
 80142f0:	6039      	str	r1, [r7, #0]
	return this->vptr->RemoveEventListener(this, pListener);
 80142f2:	687b      	ldr	r3, [r7, #4]
 80142f4:	681b      	ldr	r3, [r3, #0]
 80142f6:	689b      	ldr	r3, [r3, #8]
 80142f8:	6839      	ldr	r1, [r7, #0]
 80142fa:	6878      	ldr	r0, [r7, #4]
 80142fc:	4798      	blx	r3
 80142fe:	4603      	mov	r3, r0
}
 8014300:	4618      	mov	r0, r3
 8014302:	3708      	adds	r7, #8
 8014304:	46bd      	mov	sp, r7
 8014306:	bd80      	pop	{r7, pc}

08014308 <ISourceGetFS>:
}

/**
 * @sa ISourceGetFS()
 */
static inline float ISourceGetFS(ISourceObservable *_this) {
 8014308:	b580      	push	{r7, lr}
 801430a:	b082      	sub	sp, #8
 801430c:	af00      	add	r7, sp, #0
 801430e:	6078      	str	r0, [r7, #4]
  return _this->vptr->SourceGetFS(_this );
 8014310:	687b      	ldr	r3, [r7, #4]
 8014312:	681b      	ldr	r3, [r3, #0]
 8014314:	68db      	ldr	r3, [r3, #12]
 8014316:	6878      	ldr	r0, [r7, #4]
 8014318:	4798      	blx	r3
 801431a:	eef0 7a40 	vmov.f32	s15, s0
}
 801431e:	eeb0 0a67 	vmov.f32	s0, s15
 8014322:	3708      	adds	r7, #8
 8014324:	46bd      	mov	sp, r7
 8014326:	bd80      	pop	{r7, pc}

08014328 <ProcessTaskAlloc>:

/* Public API definition */
/*************************/

AManagedTaskEx *ProcessTaskAlloc(void)
{
 8014328:	b580      	push	{r7, lr}
 801432a:	af00      	add	r7, sp, #0
  /* In this application there is only one Keyboard task,
   * so this allocator implement the singleton design pattern.
   */

  /* Initialize the super class */
  AMTInitEx(&sTaskObj.super);
 801432c:	4804      	ldr	r0, [pc, #16]	; (8014340 <ProcessTaskAlloc+0x18>)
 801432e:	f7ff ff23 	bl	8014178 <AMTInitEx>

  sTaskObj.super.vptr = &sTheClass.vtbl;;
 8014332:	4b03      	ldr	r3, [pc, #12]	; (8014340 <ProcessTaskAlloc+0x18>)
 8014334:	4a03      	ldr	r2, [pc, #12]	; (8014344 <ProcessTaskAlloc+0x1c>)
 8014336:	601a      	str	r2, [r3, #0]

  return (AManagedTaskEx*)&sTaskObj;
 8014338:	4b01      	ldr	r3, [pc, #4]	; (8014340 <ProcessTaskAlloc+0x18>)
}
 801433a:	4618      	mov	r0, r3
 801433c:	bd80      	pop	{r7, pc}
 801433e:	bf00      	nop
 8014340:	20026758 	.word	0x20026758
 8014344:	08027d48 	.word	0x08027d48

08014348 <ProcessTaskAttachToSensorEx>:

sys_error_code_t ProcessTaskAttachToSensorEx(ProcessTask_t *_this, ISourceObservable *p_sensor, uint16_t signal_size, uint8_t axes, uint8_t cb_items)
{
 8014348:	b590      	push	{r4, r7, lr}
 801434a:	b087      	sub	sp, #28
 801434c:	af00      	add	r7, sp, #0
 801434e:	60f8      	str	r0, [r7, #12]
 8014350:	60b9      	str	r1, [r7, #8]
 8014352:	4611      	mov	r1, r2
 8014354:	461a      	mov	r2, r3
 8014356:	460b      	mov	r3, r1
 8014358:	80fb      	strh	r3, [r7, #6]
 801435a:	4613      	mov	r3, r2
 801435c:	717b      	strb	r3, [r7, #5]
  assert_param(_this != NULL);
 801435e:	68fb      	ldr	r3, [r7, #12]
 8014360:	2b00      	cmp	r3, #0
 8014362:	d103      	bne.n	801436c <ProcessTaskAttachToSensorEx+0x24>
 8014364:	21bb      	movs	r1, #187	; 0xbb
 8014366:	4832      	ldr	r0, [pc, #200]	; (8014430 <ProcessTaskAttachToSensorEx+0xe8>)
 8014368:	f000 ff9f 	bl	80152aa <assert_failed>
  sys_error_code_t res = SYS_NO_ERROR_CODE;
 801436c:	2300      	movs	r3, #0
 801436e:	82fb      	strh	r3, [r7, #22]

  /* check if there is a sensor already attached */
  if (_this->p_dpu_buff != NULL)
 8014370:	68fb      	ldr	r3, [r7, #12]
 8014372:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8014376:	2b00      	cmp	r3, #0
 8014378:	d009      	beq.n	801438e <ProcessTaskAttachToSensorEx+0x46>
  {
    SysFree(_this->p_dpu_buff);
 801437a:	68fb      	ldr	r3, [r7, #12]
 801437c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8014380:	4618      	mov	r0, r3
 8014382:	f7fa ff9f 	bl	800f2c4 <SysFree>
    _this->p_dpu_buff = NULL;
 8014386:	68fb      	ldr	r3, [r7, #12]
 8014388:	2200      	movs	r2, #0
 801438a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  uint16_t buff_size = AiDPUSetStreamsParam(_this->p_dpu, signal_size, axes, cb_items);
 801438e:	68fb      	ldr	r3, [r7, #12]
 8014390:	f8d3 00fc 	ldr.w	r0, [r3, #252]	; 0xfc
 8014394:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8014398:	797a      	ldrb	r2, [r7, #5]
 801439a:	88f9      	ldrh	r1, [r7, #6]
 801439c:	f005 f982 	bl	80196a4 <AiDPUSetStreamsParam>
 80143a0:	4603      	mov	r3, r0
 80143a2:	82bb      	strh	r3, [r7, #20]
//  uint16_t buff_size = Dummy_DPUSetInputParam(_this->p_dpu, signal_size, axes, cb_items);

  _this->p_dpu_buff = SysAlloc(buff_size);
 80143a4:	8abb      	ldrh	r3, [r7, #20]
 80143a6:	4618      	mov	r0, r3
 80143a8:	f7fa ff72 	bl	800f290 <SysAlloc>
 80143ac:	4602      	mov	r2, r0
 80143ae:	68fb      	ldr	r3, [r7, #12]
 80143b0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  if (_this->p_dpu_buff != NULL)
 80143b4:	68fb      	ldr	r3, [r7, #12]
 80143b6:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80143ba:	2b00      	cmp	r3, #0
 80143bc:	d02d      	beq.n	801441a <ProcessTaskAttachToSensorEx+0xd2>
  {
    res = IDPU_AttachToSensor((IDPU*)_this->p_dpu, p_sensor, _this->p_dpu_buff);
 80143be:	68fb      	ldr	r3, [r7, #12]
 80143c0:	f8d3 00fc 	ldr.w	r0, [r3, #252]	; 0xfc
 80143c4:	68fb      	ldr	r3, [r7, #12]
 80143c6:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80143ca:	461a      	mov	r2, r3
 80143cc:	68b9      	ldr	r1, [r7, #8]
 80143ce:	f005 fdbc 	bl	8019f4a <IDPU_AttachToSensor>
 80143d2:	4603      	mov	r3, r0
 80143d4:	82fb      	strh	r3, [r7, #22]
    AiDPUSetSensitivity(_this->p_dpu, ISourceGetFS(p_sensor)*AI_LSB_16B);
 80143d6:	68fb      	ldr	r3, [r7, #12]
 80143d8:	f8d3 40fc 	ldr.w	r4, [r3, #252]	; 0xfc
 80143dc:	68b8      	ldr	r0, [r7, #8]
 80143de:	f7ff ff93 	bl	8014308 <ISourceGetFS>
 80143e2:	eef0 7a40 	vmov.f32	s15, s0
 80143e6:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8014434 <ProcessTaskAttachToSensorEx+0xec>
 80143ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80143ee:	eeb0 0a67 	vmov.f32	s0, s15
 80143f2:	4620      	mov	r0, r4
 80143f4:	f005 f936 	bl	8019664 <AiDPUSetSensitivity>
    SYS_DEBUGF(SYS_DBG_LEVEL_VERBOSE, ("PRC: DPU buffer = %i byte\r\n", buff_size));
 80143f8:	4b0f      	ldr	r3, [pc, #60]	; (8014438 <ProcessTaskAttachToSensorEx+0xf0>)
 80143fa:	781b      	ldrb	r3, [r3, #0]
 80143fc:	2b01      	cmp	r3, #1
 80143fe:	d811      	bhi.n	8014424 <ProcessTaskAttachToSensorEx+0xdc>
 8014400:	4b0e      	ldr	r3, [pc, #56]	; (801443c <ProcessTaskAttachToSensorEx+0xf4>)
 8014402:	681b      	ldr	r3, [r3, #0]
 8014404:	4798      	blx	r3
 8014406:	4b0e      	ldr	r3, [pc, #56]	; (8014440 <ProcessTaskAttachToSensorEx+0xf8>)
 8014408:	681b      	ldr	r3, [r3, #0]
 801440a:	8aba      	ldrh	r2, [r7, #20]
 801440c:	4611      	mov	r1, r2
 801440e:	480d      	ldr	r0, [pc, #52]	; (8014444 <ProcessTaskAttachToSensorEx+0xfc>)
 8014410:	4798      	blx	r3
 8014412:	4b0d      	ldr	r3, [pc, #52]	; (8014448 <ProcessTaskAttachToSensorEx+0x100>)
 8014414:	681b      	ldr	r3, [r3, #0]
 8014416:	4798      	blx	r3
 8014418:	e004      	b.n	8014424 <ProcessTaskAttachToSensorEx+0xdc>
  }
  else
  {
    res = SYS_OUT_OF_MEMORY_ERROR_CODE;
 801441a:	2303      	movs	r3, #3
 801441c:	82fb      	strh	r3, [r7, #22]
    SYS_SET_SERVICE_LEVEL_ERROR_CODE(SYS_OUT_OF_MEMORY_ERROR_CODE);
 801441e:	4b0b      	ldr	r3, [pc, #44]	; (801444c <ProcessTaskAttachToSensorEx+0x104>)
 8014420:	2203      	movs	r2, #3
 8014422:	805a      	strh	r2, [r3, #2]
  }

  return res;
 8014424:	8afb      	ldrh	r3, [r7, #22]
}
 8014426:	4618      	mov	r0, r3
 8014428:	371c      	adds	r7, #28
 801442a:	46bd      	mov	sp, r7
 801442c:	bd90      	pop	{r4, r7, pc}
 801442e:	bf00      	nop
 8014430:	0802685c 	.word	0x0802685c
 8014434:	38000000 	.word	0x38000000
 8014438:	2000002c 	.word	0x2000002c
 801443c:	20000030 	.word	0x20000030
 8014440:	20000038 	.word	0x20000038
 8014444:	080268d4 	.word	0x080268d4
 8014448:	20000034 	.word	0x20000034
 801444c:	20000700 	.word	0x20000700

08014450 <ProcessTaskAttachToSensor>:

sys_error_code_t ProcessTaskAttachToSensor(ProcessTask_t *_this, ISourceObservable *p_sensor, uint8_t cb_items)
{
 8014450:	b580      	push	{r7, lr}
 8014452:	b086      	sub	sp, #24
 8014454:	af02      	add	r7, sp, #8
 8014456:	60f8      	str	r0, [r7, #12]
 8014458:	60b9      	str	r1, [r7, #8]
 801445a:	4613      	mov	r3, r2
 801445c:	71fb      	strb	r3, [r7, #7]
  return ProcessTaskAttachToSensorEx(_this, p_sensor, PRC_TASK_CFG_DATA_INPUT_USER, PRC_TASK_CFG_AXIS_NUMBER, cb_items);
 801445e:	79fb      	ldrb	r3, [r7, #7]
 8014460:	9300      	str	r3, [sp, #0]
 8014462:	2303      	movs	r3, #3
 8014464:	221a      	movs	r2, #26
 8014466:	68b9      	ldr	r1, [r7, #8]
 8014468:	68f8      	ldr	r0, [r7, #12]
 801446a:	f7ff ff6d 	bl	8014348 <ProcessTaskAttachToSensorEx>
 801446e:	4603      	mov	r3, r0
}
 8014470:	4618      	mov	r0, r3
 8014472:	3710      	adds	r7, #16
 8014474:	46bd      	mov	sp, r7
 8014476:	bd80      	pop	{r7, pc}

08014478 <ProcessTaskAddDPUListener>:

sys_error_code_t ProcessTaskAddDPUListener(ProcessTask_t *_this, IProcessEventListener *p_listener)
{
 8014478:	b580      	push	{r7, lr}
 801447a:	b086      	sub	sp, #24
 801447c:	af00      	add	r7, sp, #0
 801447e:	6078      	str	r0, [r7, #4]
 8014480:	6039      	str	r1, [r7, #0]
  assert_param(_this != NULL);
 8014482:	687b      	ldr	r3, [r7, #4]
 8014484:	2b00      	cmp	r3, #0
 8014486:	d103      	bne.n	8014490 <ProcessTaskAddDPUListener+0x18>
 8014488:	21df      	movs	r1, #223	; 0xdf
 801448a:	4813      	ldr	r0, [pc, #76]	; (80144d8 <ProcessTaskAddDPUListener+0x60>)
 801448c:	f000 ff0d 	bl	80152aa <assert_failed>
  sys_error_code_t res = SYS_NO_ERROR_CODE;
 8014490:	2300      	movs	r3, #0
 8014492:	82fb      	strh	r3, [r7, #22]
  struct prcMessage_t msg = {
 8014494:	f107 030c 	add.w	r3, r7, #12
 8014498:	2200      	movs	r2, #0
 801449a:	601a      	str	r2, [r3, #0]
 801449c:	605a      	str	r2, [r3, #4]
 801449e:	2311      	movs	r3, #17
 80144a0:	733b      	strb	r3, [r7, #12]
 80144a2:	2306      	movs	r3, #6
 80144a4:	81fb      	strh	r3, [r7, #14]
      .msgId = APP_MESSAGE_ID_PRC,
      .cmd_id = PRC_CMD_ADD_DPU_LISTENER,
      .param = (uint32_t)p_listener
 80144a6:	683b      	ldr	r3, [r7, #0]
  struct prcMessage_t msg = {
 80144a8:	613b      	str	r3, [r7, #16]
  };

  if(tx_queue_send(&_this->in_queue, &msg, TX_NO_WAIT) != TX_SUCCESS)
 80144aa:	687b      	ldr	r3, [r7, #4]
 80144ac:	33c4      	adds	r3, #196	; 0xc4
 80144ae:	f107 010c 	add.w	r1, r7, #12
 80144b2:	2200      	movs	r2, #0
 80144b4:	4618      	mov	r0, r3
 80144b6:	f7fe fd19 	bl	8012eec <_txe_queue_send>
 80144ba:	4603      	mov	r3, r0
 80144bc:	2b00      	cmp	r3, #0
 80144be:	d006      	beq.n	80144ce <ProcessTaskAddDPUListener+0x56>
  {
    res = SYS_PRC_TASK_IN_QUEUE_FULL_ERROR_CODE;
 80144c0:	f640 039d 	movw	r3, #2205	; 0x89d
 80144c4:	82fb      	strh	r3, [r7, #22]
    SYS_SET_SERVICE_LEVEL_ERROR_CODE(SYS_PRC_TASK_IN_QUEUE_FULL_ERROR_CODE);
 80144c6:	4b05      	ldr	r3, [pc, #20]	; (80144dc <ProcessTaskAddDPUListener+0x64>)
 80144c8:	f640 029d 	movw	r2, #2205	; 0x89d
 80144cc:	805a      	strh	r2, [r3, #2]
  }

  return res;
 80144ce:	8afb      	ldrh	r3, [r7, #22]
}
 80144d0:	4618      	mov	r0, r3
 80144d2:	3718      	adds	r7, #24
 80144d4:	46bd      	mov	sp, r7
 80144d6:	bd80      	pop	{r7, pc}
 80144d8:	0802685c 	.word	0x0802685c
 80144dc:	20000700 	.word	0x20000700

080144e0 <ProcessTask_vtblHardwareInit>:

/* AManagedTask virtual functions definition */
/*********************************************/

sys_error_code_t ProcessTask_vtblHardwareInit(AManagedTask *_this, void *p_params)
{
 80144e0:	b580      	push	{r7, lr}
 80144e2:	b084      	sub	sp, #16
 80144e4:	af00      	add	r7, sp, #0
 80144e6:	6078      	str	r0, [r7, #4]
 80144e8:	6039      	str	r1, [r7, #0]
  assert_param(_this != NULL);
 80144ea:	687b      	ldr	r3, [r7, #4]
 80144ec:	2b00      	cmp	r3, #0
 80144ee:	d104      	bne.n	80144fa <ProcessTask_vtblHardwareInit+0x1a>
 80144f0:	f240 1109 	movw	r1, #265	; 0x109
 80144f4:	480c      	ldr	r0, [pc, #48]	; (8014528 <ProcessTask_vtblHardwareInit+0x48>)
 80144f6:	f000 fed8 	bl	80152aa <assert_failed>
  sys_error_code_t res = SYS_NO_ERROR_CODE;
 80144fa:	2300      	movs	r3, #0
 80144fc:	81fb      	strh	r3, [r7, #14]
/*  ProcessTask_t *p_obj = (ProcessTask_t*)_this; */

  __HAL_RCC_CRC_CLK_ENABLE();
 80144fe:	4b0b      	ldr	r3, [pc, #44]	; (801452c <ProcessTask_vtblHardwareInit+0x4c>)
 8014500:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014504:	4a09      	ldr	r2, [pc, #36]	; (801452c <ProcessTask_vtblHardwareInit+0x4c>)
 8014506:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 801450a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 801450e:	4b07      	ldr	r3, [pc, #28]	; (801452c <ProcessTask_vtblHardwareInit+0x4c>)
 8014510:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014514:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8014518:	60bb      	str	r3, [r7, #8]
 801451a:	68bb      	ldr	r3, [r7, #8]

  return res;
 801451c:	89fb      	ldrh	r3, [r7, #14]
}
 801451e:	4618      	mov	r0, r3
 8014520:	3710      	adds	r7, #16
 8014522:	46bd      	mov	sp, r7
 8014524:	bd80      	pop	{r7, pc}
 8014526:	bf00      	nop
 8014528:	0802685c 	.word	0x0802685c
 801452c:	46020c00 	.word	0x46020c00

08014530 <ProcessTask_vtblOnCreateTask>:
sys_error_code_t ProcessTask_vtblOnCreateTask(AManagedTask *_this, tx_entry_function_t *pTaskCode, CHAR **pName,
    VOID **pStackStart, ULONG *pStackDepth,
    UINT *pPriority, UINT *pPreemptThreshold,
    ULONG *pTimeSlice, ULONG *pAutoStart,
    ULONG *pParams)
{
 8014530:	b580      	push	{r7, lr}
 8014532:	b08c      	sub	sp, #48	; 0x30
 8014534:	af02      	add	r7, sp, #8
 8014536:	60f8      	str	r0, [r7, #12]
 8014538:	60b9      	str	r1, [r7, #8]
 801453a:	607a      	str	r2, [r7, #4]
 801453c:	603b      	str	r3, [r7, #0]
  assert_param(_this != NULL);
 801453e:	68fb      	ldr	r3, [r7, #12]
 8014540:	2b00      	cmp	r3, #0
 8014542:	d104      	bne.n	801454e <ProcessTask_vtblOnCreateTask+0x1e>
 8014544:	f44f 718c 	mov.w	r1, #280	; 0x118
 8014548:	4846      	ldr	r0, [pc, #280]	; (8014664 <ProcessTask_vtblOnCreateTask+0x134>)
 801454a:	f000 feae 	bl	80152aa <assert_failed>
  sys_error_code_t res = SYS_NO_ERROR_CODE;
 801454e:	2300      	movs	r3, #0
 8014550:	84fb      	strh	r3, [r7, #38]	; 0x26
  ProcessTask_t *p_obj = (ProcessTask_t*)_this;
 8014552:	68fb      	ldr	r3, [r7, #12]
 8014554:	623b      	str	r3, [r7, #32]
//  IDPU_RegisterNotifyCallback((IDPU*)p_obj->p_dpu, ProcessTaskDPUCallback, p_obj);
//  ADPU_SetTag((ADPU*)p_obj->p_dpu, PRC_TASK_DPU_TAG); //TODO: STF - what is its purpose?

  /* Initialize DPU */

  p_obj->p_dpu = (AiDPU_t*)SysAlloc(sizeof(AiDPU_t));
 8014556:	f44f 7090 	mov.w	r0, #288	; 0x120
 801455a:	f7fa fe99 	bl	800f290 <SysAlloc>
 801455e:	4602      	mov	r2, r0
 8014560:	6a3b      	ldr	r3, [r7, #32]
 8014562:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc

  IDPU * idpu = AiDPUStaticAlloc(p_obj->p_dpu);
 8014566:	6a3b      	ldr	r3, [r7, #32]
 8014568:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 801456c:	4618      	mov	r0, r3
 801456e:	f005 f863 	bl	8019638 <AiDPUStaticAlloc>
 8014572:	61f8      	str	r0, [r7, #28]
  res = IDPU_Init(idpu);
 8014574:	69f8      	ldr	r0, [r7, #28]
 8014576:	f005 fcda 	bl	8019f2e <IDPU_Init>
 801457a:	4603      	mov	r3, r0
 801457c:	84fb      	strh	r3, [r7, #38]	; 0x26
  IDPU_RegisterNotifyCallback((IDPU*)p_obj->p_dpu, ProcessTaskDPUCallback, p_obj);
 801457e:	6a3b      	ldr	r3, [r7, #32]
 8014580:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8014584:	6a3a      	ldr	r2, [r7, #32]
 8014586:	4938      	ldr	r1, [pc, #224]	; (8014668 <ProcessTask_vtblOnCreateTask+0x138>)
 8014588:	4618      	mov	r0, r3
 801458a:	f005 fd10 	bl	8019fae <IDPU_RegisterNotifyCallback>
  ADPU_SetTag((ADPU*)p_obj->p_dpu, PRC_TASK_DPU_TAG);
 801458e:	6a3b      	ldr	r3, [r7, #32]
 8014590:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8014594:	2130      	movs	r1, #48	; 0x30
 8014596:	4618      	mov	r0, r3
 8014598:	f004 f92e 	bl	80187f8 <ADPU_SetTag>

  /* Change the CLASS for the power mode switch because I want to do the transaction after all
     sensors task. */
  AMTExSetPMClass((AManagedTaskEx*)_this, E_PM_CLASS_1);
 801459c:	2101      	movs	r1, #1
 801459e:	68f8      	ldr	r0, [r7, #12]
 80145a0:	f7ff fe72 	bl	8014288 <AMTExSetPMClass>


  uint16_t item_size = PRC_TASK_CFG_IN_QUEUE_ITEM_SIZE;
 80145a4:	2308      	movs	r3, #8
 80145a6:	837b      	strh	r3, [r7, #26]
  VOID *pvQueueItemsBuff = SysAlloc(PRC_TASK_CFG_IN_QUEUE_LENGTH * item_size);
 80145a8:	8b7a      	ldrh	r2, [r7, #26]
 80145aa:	4613      	mov	r3, r2
 80145ac:	009b      	lsls	r3, r3, #2
 80145ae:	4413      	add	r3, r2
 80145b0:	005b      	lsls	r3, r3, #1
 80145b2:	4618      	mov	r0, r3
 80145b4:	f7fa fe6c 	bl	800f290 <SysAlloc>
 80145b8:	6178      	str	r0, [r7, #20]
  if(pvQueueItemsBuff == NULL)
 80145ba:	697b      	ldr	r3, [r7, #20]
 80145bc:	2b00      	cmp	r3, #0
 80145be:	d109      	bne.n	80145d4 <ProcessTask_vtblOnCreateTask+0xa4>
  {
    res = SYS_TASK_HEAP_OUT_OF_MEMORY_ERROR_CODE;
 80145c0:	f240 235a 	movw	r3, #602	; 0x25a
 80145c4:	84fb      	strh	r3, [r7, #38]	; 0x26
    SYS_SET_SERVICE_LEVEL_ERROR_CODE(res);
 80145c6:	4a29      	ldr	r2, [pc, #164]	; (801466c <ProcessTask_vtblOnCreateTask+0x13c>)
 80145c8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80145ca:	8053      	strh	r3, [r2, #2]
    sys_error_handler();
 80145cc:	f7fa fbc4 	bl	800ed58 <sys_error_handler>
    return res;
 80145d0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80145d2:	e042      	b.n	801465a <ProcessTask_vtblOnCreateTask+0x12a>
  }

  /* create the task input queue.*/
  if(TX_SUCCESS != tx_queue_create(&p_obj->in_queue, "ProcTask_Q", item_size/4, pvQueueItemsBuff, PRC_TASK_CFG_IN_QUEUE_LENGTH * item_size))
 80145d4:	6a3b      	ldr	r3, [r7, #32]
 80145d6:	f103 00c4 	add.w	r0, r3, #196	; 0xc4
 80145da:	8b7b      	ldrh	r3, [r7, #26]
 80145dc:	089b      	lsrs	r3, r3, #2
 80145de:	b29b      	uxth	r3, r3
 80145e0:	4619      	mov	r1, r3
 80145e2:	8b7a      	ldrh	r2, [r7, #26]
 80145e4:	4613      	mov	r3, r2
 80145e6:	009b      	lsls	r3, r3, #2
 80145e8:	4413      	add	r3, r2
 80145ea:	005b      	lsls	r3, r3, #1
 80145ec:	461a      	mov	r2, r3
 80145ee:	2338      	movs	r3, #56	; 0x38
 80145f0:	9301      	str	r3, [sp, #4]
 80145f2:	9200      	str	r2, [sp, #0]
 80145f4:	697b      	ldr	r3, [r7, #20]
 80145f6:	460a      	mov	r2, r1
 80145f8:	491d      	ldr	r1, [pc, #116]	; (8014670 <ProcessTask_vtblOnCreateTask+0x140>)
 80145fa:	f7fe fac7 	bl	8012b8c <_txe_queue_create>
 80145fe:	4603      	mov	r3, r0
 8014600:	2b00      	cmp	r3, #0
 8014602:	d009      	beq.n	8014618 <ProcessTask_vtblOnCreateTask+0xe8>
  {
    res = SYS_TASK_HEAP_OUT_OF_MEMORY_ERROR_CODE;
 8014604:	f240 235a 	movw	r3, #602	; 0x25a
 8014608:	84fb      	strh	r3, [r7, #38]	; 0x26
    SYS_SET_SERVICE_LEVEL_ERROR_CODE(res);
 801460a:	4a18      	ldr	r2, [pc, #96]	; (801466c <ProcessTask_vtblOnCreateTask+0x13c>)
 801460c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801460e:	8053      	strh	r3, [r2, #2]
    sys_error_handler();
 8014610:	f7fa fba2 	bl	800ed58 <sys_error_handler>
    return res;
 8014614:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8014616:	e020      	b.n	801465a <ProcessTask_vtblOnCreateTask+0x12a>
  }

  /* set the (PM_STATE, ExecuteStepFunc) map from the class object.  */
  _this->m_pfPMState2FuncMap = sTheClass.p_pm_state2func_map;
 8014618:	68fb      	ldr	r3, [r7, #12]
 801461a:	4a16      	ldr	r2, [pc, #88]	; (8014674 <ProcessTask_vtblOnCreateTask+0x144>)
 801461c:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

  *pTaskCode = AMTExRun;
 8014620:	68bb      	ldr	r3, [r7, #8]
 8014622:	4a15      	ldr	r2, [pc, #84]	; (8014678 <ProcessTask_vtblOnCreateTask+0x148>)
 8014624:	601a      	str	r2, [r3, #0]
  *pName = "PRCTask";
 8014626:	687b      	ldr	r3, [r7, #4]
 8014628:	4a14      	ldr	r2, [pc, #80]	; (801467c <ProcessTask_vtblOnCreateTask+0x14c>)
 801462a:	601a      	str	r2, [r3, #0]
  *pStackStart = NULL; // allocate the task stack in the system memory pool.
 801462c:	683b      	ldr	r3, [r7, #0]
 801462e:	2200      	movs	r2, #0
 8014630:	601a      	str	r2, [r3, #0]
  *pStackDepth = PRC_TASK_CFG_STACK_DEPTH;
 8014632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014634:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8014638:	601a      	str	r2, [r3, #0]
  *pParams = (ULONG) _this;
 801463a:	68fa      	ldr	r2, [r7, #12]
 801463c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801463e:	601a      	str	r2, [r3, #0]
  *pPriority = PRC_TASK_CFG_PRIORITY;
 8014640:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014642:	2207      	movs	r2, #7
 8014644:	601a      	str	r2, [r3, #0]
  *pPreemptThreshold = PRC_TASK_CFG_PRIORITY;
 8014646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014648:	2207      	movs	r2, #7
 801464a:	601a      	str	r2, [r3, #0]
  *pTimeSlice = TX_NO_TIME_SLICE;
 801464c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801464e:	2200      	movs	r2, #0
 8014650:	601a      	str	r2, [r3, #0]
  *pAutoStart = TX_AUTO_START;
 8014652:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014654:	2201      	movs	r2, #1
 8014656:	601a      	str	r2, [r3, #0]

  return res;
 8014658:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
 801465a:	4618      	mov	r0, r3
 801465c:	3728      	adds	r7, #40	; 0x28
 801465e:	46bd      	mov	sp, r7
 8014660:	bd80      	pop	{r7, pc}
 8014662:	bf00      	nop
 8014664:	0802685c 	.word	0x0802685c
 8014668:	08014c5d 	.word	0x08014c5d
 801466c:	20000700 	.word	0x20000700
 8014670:	080268f0 	.word	0x080268f0
 8014674:	08027d64 	.word	0x08027d64
 8014678:	0800e949 	.word	0x0800e949
 801467c:	080268fc 	.word	0x080268fc

08014680 <ProcessTask_vtblDoEnterPowerMode>:

sys_error_code_t ProcessTask_vtblDoEnterPowerMode(AManagedTask *_this, const EPowerMode active_power_mode, const EPowerMode new_power_mode)
{
 8014680:	b580      	push	{r7, lr}
 8014682:	b086      	sub	sp, #24
 8014684:	af00      	add	r7, sp, #0
 8014686:	6078      	str	r0, [r7, #4]
 8014688:	460b      	mov	r3, r1
 801468a:	70fb      	strb	r3, [r7, #3]
 801468c:	4613      	mov	r3, r2
 801468e:	70bb      	strb	r3, [r7, #2]
  assert_param(_this != NULL);
 8014690:	687b      	ldr	r3, [r7, #4]
 8014692:	2b00      	cmp	r3, #0
 8014694:	d104      	bne.n	80146a0 <ProcessTask_vtblDoEnterPowerMode+0x20>
 8014696:	f240 1161 	movw	r1, #353	; 0x161
 801469a:	4824      	ldr	r0, [pc, #144]	; (801472c <ProcessTask_vtblDoEnterPowerMode+0xac>)
 801469c:	f000 fe05 	bl	80152aa <assert_failed>
  sys_error_code_t res = SYS_NO_ERROR_CODE;
 80146a0:	2300      	movs	r3, #0
 80146a2:	82fb      	strh	r3, [r7, #22]
  ProcessTask_t *p_obj = (ProcessTask_t*)_this;
 80146a4:	687b      	ldr	r3, [r7, #4]
 80146a6:	613b      	str	r3, [r7, #16]

  struct prcMessage_t msg = {
 80146a8:	f107 0308 	add.w	r3, r7, #8
 80146ac:	2200      	movs	r2, #0
 80146ae:	601a      	str	r2, [r3, #0]
 80146b0:	605a      	str	r2, [r3, #4]
 80146b2:	2311      	movs	r3, #17
 80146b4:	723b      	strb	r3, [r7, #8]
      .msgId = APP_MESSAGE_ID_PRC
  };

  if (new_power_mode == E_POWER_MODE_STATE1)
 80146b6:	78bb      	ldrb	r3, [r7, #2]
 80146b8:	2b00      	cmp	r3, #0
 80146ba:	d121      	bne.n	8014700 <ProcessTask_vtblDoEnterPowerMode+0x80>
  {
    msg.cmd_id = PRC_CMD_STOP_PROCESSING;
 80146bc:	2302      	movs	r3, #2
 80146be:	817b      	strh	r3, [r7, #10]

    if(tx_queue_send(&p_obj->in_queue, &msg, AMT_MS_TO_TICKS(100)) != TX_SUCCESS)
 80146c0:	693b      	ldr	r3, [r7, #16]
 80146c2:	33c4      	adds	r3, #196	; 0xc4
 80146c4:	f107 0108 	add.w	r1, r7, #8
 80146c8:	2264      	movs	r2, #100	; 0x64
 80146ca:	4618      	mov	r0, r3
 80146cc:	f7fe fc0e 	bl	8012eec <_txe_queue_send>
 80146d0:	4603      	mov	r3, r0
 80146d2:	2b00      	cmp	r3, #0
 80146d4:	d014      	beq.n	8014700 <ProcessTask_vtblDoEnterPowerMode+0x80>
    {
      res = SYS_PRC_TASK_IN_QUEUE_FULL_ERROR_CODE;
 80146d6:	f640 039d 	movw	r3, #2205	; 0x89d
 80146da:	82fb      	strh	r3, [r7, #22]
      SYS_SET_SERVICE_LEVEL_ERROR_CODE(SYS_PRC_TASK_IN_QUEUE_FULL_ERROR_CODE);
 80146dc:	4b14      	ldr	r3, [pc, #80]	; (8014730 <ProcessTask_vtblDoEnterPowerMode+0xb0>)
 80146de:	f640 029d 	movw	r2, #2205	; 0x89d
 80146e2:	805a      	strh	r2, [r3, #2]

      SYS_DEBUGF(SYS_DBG_LEVEL_WARNING, ("PRC: input queue full!\r\n"));
 80146e4:	4b13      	ldr	r3, [pc, #76]	; (8014734 <ProcessTask_vtblDoEnterPowerMode+0xb4>)
 80146e6:	781b      	ldrb	r3, [r3, #0]
 80146e8:	2b05      	cmp	r3, #5
 80146ea:	d809      	bhi.n	8014700 <ProcessTask_vtblDoEnterPowerMode+0x80>
 80146ec:	4b12      	ldr	r3, [pc, #72]	; (8014738 <ProcessTask_vtblDoEnterPowerMode+0xb8>)
 80146ee:	681b      	ldr	r3, [r3, #0]
 80146f0:	4798      	blx	r3
 80146f2:	4b12      	ldr	r3, [pc, #72]	; (801473c <ProcessTask_vtblDoEnterPowerMode+0xbc>)
 80146f4:	681b      	ldr	r3, [r3, #0]
 80146f6:	4812      	ldr	r0, [pc, #72]	; (8014740 <ProcessTask_vtblDoEnterPowerMode+0xc0>)
 80146f8:	4798      	blx	r3
 80146fa:	4b12      	ldr	r3, [pc, #72]	; (8014744 <ProcessTask_vtblDoEnterPowerMode+0xc4>)
 80146fc:	681b      	ldr	r3, [r3, #0]
 80146fe:	4798      	blx	r3
    }
  }

  SYS_DEBUGF(SYS_DBG_LEVEL_VERBOSE, ("PRC: -> %d \r\n", (uint32_t)new_power_mode));
 8014700:	4b0c      	ldr	r3, [pc, #48]	; (8014734 <ProcessTask_vtblDoEnterPowerMode+0xb4>)
 8014702:	781b      	ldrb	r3, [r3, #0]
 8014704:	2b01      	cmp	r3, #1
 8014706:	d80b      	bhi.n	8014720 <ProcessTask_vtblDoEnterPowerMode+0xa0>
 8014708:	4b0b      	ldr	r3, [pc, #44]	; (8014738 <ProcessTask_vtblDoEnterPowerMode+0xb8>)
 801470a:	681b      	ldr	r3, [r3, #0]
 801470c:	4798      	blx	r3
 801470e:	4b0b      	ldr	r3, [pc, #44]	; (801473c <ProcessTask_vtblDoEnterPowerMode+0xbc>)
 8014710:	681b      	ldr	r3, [r3, #0]
 8014712:	78ba      	ldrb	r2, [r7, #2]
 8014714:	4611      	mov	r1, r2
 8014716:	480c      	ldr	r0, [pc, #48]	; (8014748 <ProcessTask_vtblDoEnterPowerMode+0xc8>)
 8014718:	4798      	blx	r3
 801471a:	4b0a      	ldr	r3, [pc, #40]	; (8014744 <ProcessTask_vtblDoEnterPowerMode+0xc4>)
 801471c:	681b      	ldr	r3, [r3, #0]
 801471e:	4798      	blx	r3

  return res;
 8014720:	8afb      	ldrh	r3, [r7, #22]
}
 8014722:	4618      	mov	r0, r3
 8014724:	3718      	adds	r7, #24
 8014726:	46bd      	mov	sp, r7
 8014728:	bd80      	pop	{r7, pc}
 801472a:	bf00      	nop
 801472c:	0802685c 	.word	0x0802685c
 8014730:	20000700 	.word	0x20000700
 8014734:	2000002c 	.word	0x2000002c
 8014738:	20000030 	.word	0x20000030
 801473c:	20000038 	.word	0x20000038
 8014740:	08026904 	.word	0x08026904
 8014744:	20000034 	.word	0x20000034
 8014748:	08026920 	.word	0x08026920

0801474c <ProcessTask_vtblHandleError>:

sys_error_code_t ProcessTask_vtblHandleError(AManagedTask *_this, SysEvent error)
{
 801474c:	b580      	push	{r7, lr}
 801474e:	b084      	sub	sp, #16
 8014750:	af00      	add	r7, sp, #0
 8014752:	6078      	str	r0, [r7, #4]
 8014754:	6039      	str	r1, [r7, #0]
  assert_param(_this != NULL);
 8014756:	687b      	ldr	r3, [r7, #4]
 8014758:	2b00      	cmp	r3, #0
 801475a:	d104      	bne.n	8014766 <ProcessTask_vtblHandleError+0x1a>
 801475c:	f240 117d 	movw	r1, #381	; 0x17d
 8014760:	4804      	ldr	r0, [pc, #16]	; (8014774 <ProcessTask_vtblHandleError+0x28>)
 8014762:	f000 fda2 	bl	80152aa <assert_failed>
  sys_error_code_t res = SYS_NO_ERROR_CODE;
 8014766:	2300      	movs	r3, #0
 8014768:	81fb      	strh	r3, [r7, #14]
  /*ProcessTask_t *p_obj = (ProcessTask_t*)_this;*/

  return res;
 801476a:	89fb      	ldrh	r3, [r7, #14]
}
 801476c:	4618      	mov	r0, r3
 801476e:	3710      	adds	r7, #16
 8014770:	46bd      	mov	sp, r7
 8014772:	bd80      	pop	{r7, pc}
 8014774:	0802685c 	.word	0x0802685c

08014778 <ProcessTask_vtblOnEnterTaskControlLoop>:

sys_error_code_t ProcessTask_vtblOnEnterTaskControlLoop(AManagedTask *_this)
{
 8014778:	b580      	push	{r7, lr}
 801477a:	b086      	sub	sp, #24
 801477c:	af00      	add	r7, sp, #0
 801477e:	6078      	str	r0, [r7, #4]
  assert_param(_this != NULL);
 8014780:	687b      	ldr	r3, [r7, #4]
 8014782:	2b00      	cmp	r3, #0
 8014784:	d104      	bne.n	8014790 <ProcessTask_vtblOnEnterTaskControlLoop+0x18>
 8014786:	f44f 71c3 	mov.w	r1, #390	; 0x186
 801478a:	4826      	ldr	r0, [pc, #152]	; (8014824 <ProcessTask_vtblOnEnterTaskControlLoop+0xac>)
 801478c:	f000 fd8d 	bl	80152aa <assert_failed>
  sys_error_code_t xRes = SYS_NO_ERROR_CODE;
 8014790:	2300      	movs	r3, #0
 8014792:	82fb      	strh	r3, [r7, #22]
  ProcessTask_t *p_obj = (ProcessTask_t*)_this;
 8014794:	687b      	ldr	r3, [r7, #4]
 8014796:	613b      	str	r3, [r7, #16]

  SYS_DEBUGF(SYS_DBG_LEVEL_VERBOSE, ("PRC: start.\r\n"));
 8014798:	4b23      	ldr	r3, [pc, #140]	; (8014828 <ProcessTask_vtblOnEnterTaskControlLoop+0xb0>)
 801479a:	781b      	ldrb	r3, [r3, #0]
 801479c:	2b01      	cmp	r3, #1
 801479e:	d809      	bhi.n	80147b4 <ProcessTask_vtblOnEnterTaskControlLoop+0x3c>
 80147a0:	4b22      	ldr	r3, [pc, #136]	; (801482c <ProcessTask_vtblOnEnterTaskControlLoop+0xb4>)
 80147a2:	681b      	ldr	r3, [r3, #0]
 80147a4:	4798      	blx	r3
 80147a6:	4b22      	ldr	r3, [pc, #136]	; (8014830 <ProcessTask_vtblOnEnterTaskControlLoop+0xb8>)
 80147a8:	681b      	ldr	r3, [r3, #0]
 80147aa:	4822      	ldr	r0, [pc, #136]	; (8014834 <ProcessTask_vtblOnEnterTaskControlLoop+0xbc>)
 80147ac:	4798      	blx	r3
 80147ae:	4b22      	ldr	r3, [pc, #136]	; (8014838 <ProcessTask_vtblOnEnterTaskControlLoop+0xc0>)
 80147b0:	681b      	ldr	r3, [r3, #0]
 80147b2:	4798      	blx	r3

  SYS_DEBUGF(SYS_DBG_LEVEL_VERBOSE, ("PRC: sensors configuration.\r\n"));
 80147b4:	4b1c      	ldr	r3, [pc, #112]	; (8014828 <ProcessTask_vtblOnEnterTaskControlLoop+0xb0>)
 80147b6:	781b      	ldrb	r3, [r3, #0]
 80147b8:	2b01      	cmp	r3, #1
 80147ba:	d809      	bhi.n	80147d0 <ProcessTask_vtblOnEnterTaskControlLoop+0x58>
 80147bc:	4b1b      	ldr	r3, [pc, #108]	; (801482c <ProcessTask_vtblOnEnterTaskControlLoop+0xb4>)
 80147be:	681b      	ldr	r3, [r3, #0]
 80147c0:	4798      	blx	r3
 80147c2:	4b1b      	ldr	r3, [pc, #108]	; (8014830 <ProcessTask_vtblOnEnterTaskControlLoop+0xb8>)
 80147c4:	681b      	ldr	r3, [r3, #0]
 80147c6:	481d      	ldr	r0, [pc, #116]	; (801483c <ProcessTask_vtblOnEnterTaskControlLoop+0xc4>)
 80147c8:	4798      	blx	r3
 80147ca:	4b1b      	ldr	r3, [pc, #108]	; (8014838 <ProcessTask_vtblOnEnterTaskControlLoop+0xc0>)
 80147cc:	681b      	ldr	r3, [r3, #0]
 80147ce:	4798      	blx	r3
  uint16_t active_sensor_id = SI_NULL_SENSOR_ID;
 80147d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80147d4:	81fb      	strh	r3, [r7, #14]
  ProcessTaskSetSensorsConfig(p_obj, &active_sensor_id);
 80147d6:	f107 030e 	add.w	r3, r7, #14
 80147da:	4619      	mov	r1, r3
 80147dc:	6938      	ldr	r0, [r7, #16]
 80147de:	f000 fac5 	bl	8014d6c <ProcessTaskSetSensorsConfig>

  SYS_DEBUGF(SYS_DBG_LEVEL_VERBOSE, ("PRC: connect to sensor %d.\r\n", active_sensor_id));
 80147e2:	4b11      	ldr	r3, [pc, #68]	; (8014828 <ProcessTask_vtblOnEnterTaskControlLoop+0xb0>)
 80147e4:	781b      	ldrb	r3, [r3, #0]
 80147e6:	2b01      	cmp	r3, #1
 80147e8:	d80b      	bhi.n	8014802 <ProcessTask_vtblOnEnterTaskControlLoop+0x8a>
 80147ea:	4b10      	ldr	r3, [pc, #64]	; (801482c <ProcessTask_vtblOnEnterTaskControlLoop+0xb4>)
 80147ec:	681b      	ldr	r3, [r3, #0]
 80147ee:	4798      	blx	r3
 80147f0:	4b0f      	ldr	r3, [pc, #60]	; (8014830 <ProcessTask_vtblOnEnterTaskControlLoop+0xb8>)
 80147f2:	681b      	ldr	r3, [r3, #0]
 80147f4:	89fa      	ldrh	r2, [r7, #14]
 80147f6:	4611      	mov	r1, r2
 80147f8:	4811      	ldr	r0, [pc, #68]	; (8014840 <ProcessTask_vtblOnEnterTaskControlLoop+0xc8>)
 80147fa:	4798      	blx	r3
 80147fc:	4b0e      	ldr	r3, [pc, #56]	; (8014838 <ProcessTask_vtblOnEnterTaskControlLoop+0xc0>)
 80147fe:	681b      	ldr	r3, [r3, #0]
 8014800:	4798      	blx	r3
  ProcessTaskAttachToSensor(p_obj, SMGetSensorObserver(active_sensor_id), 1);
 8014802:	89fb      	ldrh	r3, [r7, #14]
 8014804:	b2db      	uxtb	r3, r3
 8014806:	4618      	mov	r0, r3
 8014808:	f00b fcec 	bl	80201e4 <SMGetSensorObserver>
 801480c:	4603      	mov	r3, r0
 801480e:	2201      	movs	r2, #1
 8014810:	4619      	mov	r1, r3
 8014812:	6938      	ldr	r0, [r7, #16]
 8014814:	f7ff fe1c 	bl	8014450 <ProcessTaskAttachToSensor>
//  ProcessTaskAttachToSensor(p_obj, SMGetSensorObserver(active_sensor_id), 2);

  return xRes;
 8014818:	8afb      	ldrh	r3, [r7, #22]
}
 801481a:	4618      	mov	r0, r3
 801481c:	3718      	adds	r7, #24
 801481e:	46bd      	mov	sp, r7
 8014820:	bd80      	pop	{r7, pc}
 8014822:	bf00      	nop
 8014824:	0802685c 	.word	0x0802685c
 8014828:	2000002c 	.word	0x2000002c
 801482c:	20000030 	.word	0x20000030
 8014830:	20000038 	.word	0x20000038
 8014834:	08026930 	.word	0x08026930
 8014838:	20000034 	.word	0x20000034
 801483c:	08026940 	.word	0x08026940
 8014840:	08026960 	.word	0x08026960

08014844 <ProcessTask_vtblForceExecuteStep>:

/* AManagedTaskEx virtual functions definition */
/***********************************************/

sys_error_code_t ProcessTask_vtblForceExecuteStep(AManagedTaskEx *_this, EPowerMode active_power_mode)
{
 8014844:	b580      	push	{r7, lr}
 8014846:	b086      	sub	sp, #24
 8014848:	af00      	add	r7, sp, #0
 801484a:	6078      	str	r0, [r7, #4]
 801484c:	460b      	mov	r3, r1
 801484e:	70fb      	strb	r3, [r7, #3]
  assert_param(_this != NULL);
 8014850:	687b      	ldr	r3, [r7, #4]
 8014852:	2b00      	cmp	r3, #0
 8014854:	d104      	bne.n	8014860 <ProcessTask_vtblForceExecuteStep+0x1c>
 8014856:	f240 119d 	movw	r1, #413	; 0x19d
 801485a:	4819      	ldr	r0, [pc, #100]	; (80148c0 <ProcessTask_vtblForceExecuteStep+0x7c>)
 801485c:	f000 fd25 	bl	80152aa <assert_failed>
  sys_error_code_t res = SYS_NO_ERROR_CODE;
 8014860:	2300      	movs	r3, #0
 8014862:	82fb      	strh	r3, [r7, #22]
  ProcessTask_t *p_obj = (ProcessTask_t*)_this;
 8014864:	687b      	ldr	r3, [r7, #4]
 8014866:	613b      	str	r3, [r7, #16]

  struct prcMessage_t msg = {
 8014868:	f107 0308 	add.w	r3, r7, #8
 801486c:	2200      	movs	r2, #0
 801486e:	601a      	str	r2, [r3, #0]
 8014870:	605a      	str	r2, [r3, #4]
 8014872:	23fe      	movs	r3, #254	; 0xfe
 8014874:	723b      	strb	r3, [r7, #8]
      .msgId = APP_REPORT_ID_FORCE_STEP
  };
  if(TX_SUCCESS != tx_queue_front_send(&p_obj->in_queue, &msg, TX_NO_WAIT))
 8014876:	693b      	ldr	r3, [r7, #16]
 8014878:	33c4      	adds	r3, #196	; 0xc4
 801487a:	f107 0108 	add.w	r1, r7, #8
 801487e:	2200      	movs	r2, #0
 8014880:	4618      	mov	r0, r3
 8014882:	f7fe fa59 	bl	8012d38 <_txe_queue_front_send>
 8014886:	4603      	mov	r3, r0
 8014888:	2b00      	cmp	r3, #0
 801488a:	d014      	beq.n	80148b6 <ProcessTask_vtblForceExecuteStep+0x72>
  {
    res = SYS_PRC_TASK_IN_QUEUE_FULL_ERROR_CODE;
 801488c:	f640 039d 	movw	r3, #2205	; 0x89d
 8014890:	82fb      	strh	r3, [r7, #22]
    SYS_SET_SERVICE_LEVEL_ERROR_CODE(SYS_PRC_TASK_IN_QUEUE_FULL_ERROR_CODE);
 8014892:	4b0c      	ldr	r3, [pc, #48]	; (80148c4 <ProcessTask_vtblForceExecuteStep+0x80>)
 8014894:	f640 029d 	movw	r2, #2205	; 0x89d
 8014898:	805a      	strh	r2, [r3, #2]

    SYS_DEBUGF(SYS_DBG_LEVEL_WARNING, ("PRC: input queue full!\r\n"));
 801489a:	4b0b      	ldr	r3, [pc, #44]	; (80148c8 <ProcessTask_vtblForceExecuteStep+0x84>)
 801489c:	781b      	ldrb	r3, [r3, #0]
 801489e:	2b05      	cmp	r3, #5
 80148a0:	d809      	bhi.n	80148b6 <ProcessTask_vtblForceExecuteStep+0x72>
 80148a2:	4b0a      	ldr	r3, [pc, #40]	; (80148cc <ProcessTask_vtblForceExecuteStep+0x88>)
 80148a4:	681b      	ldr	r3, [r3, #0]
 80148a6:	4798      	blx	r3
 80148a8:	4b09      	ldr	r3, [pc, #36]	; (80148d0 <ProcessTask_vtblForceExecuteStep+0x8c>)
 80148aa:	681b      	ldr	r3, [r3, #0]
 80148ac:	4809      	ldr	r0, [pc, #36]	; (80148d4 <ProcessTask_vtblForceExecuteStep+0x90>)
 80148ae:	4798      	blx	r3
 80148b0:	4b09      	ldr	r3, [pc, #36]	; (80148d8 <ProcessTask_vtblForceExecuteStep+0x94>)
 80148b2:	681b      	ldr	r3, [r3, #0]
 80148b4:	4798      	blx	r3
  }

  return res;
 80148b6:	8afb      	ldrh	r3, [r7, #22]
}
 80148b8:	4618      	mov	r0, r3
 80148ba:	3718      	adds	r7, #24
 80148bc:	46bd      	mov	sp, r7
 80148be:	bd80      	pop	{r7, pc}
 80148c0:	0802685c 	.word	0x0802685c
 80148c4:	20000700 	.word	0x20000700
 80148c8:	2000002c 	.word	0x2000002c
 80148cc:	20000030 	.word	0x20000030
 80148d0:	20000038 	.word	0x20000038
 80148d4:	08026904 	.word	0x08026904
 80148d8:	20000034 	.word	0x20000034

080148dc <ProcessTask_vtblOnEnterPowerMode>:

sys_error_code_t ProcessTask_vtblOnEnterPowerMode(AManagedTaskEx *_this, const EPowerMode active_power_mode, const EPowerMode new_power_mode)
{
 80148dc:	b580      	push	{r7, lr}
 80148de:	b084      	sub	sp, #16
 80148e0:	af00      	add	r7, sp, #0
 80148e2:	6078      	str	r0, [r7, #4]
 80148e4:	460b      	mov	r3, r1
 80148e6:	70fb      	strb	r3, [r7, #3]
 80148e8:	4613      	mov	r3, r2
 80148ea:	70bb      	strb	r3, [r7, #2]
  assert_param(_this != NULL);
 80148ec:	687b      	ldr	r3, [r7, #4]
 80148ee:	2b00      	cmp	r3, #0
 80148f0:	d104      	bne.n	80148fc <ProcessTask_vtblOnEnterPowerMode+0x20>
 80148f2:	f240 11b1 	movw	r1, #433	; 0x1b1
 80148f6:	4805      	ldr	r0, [pc, #20]	; (801490c <ProcessTask_vtblOnEnterPowerMode+0x30>)
 80148f8:	f000 fcd7 	bl	80152aa <assert_failed>
  sys_error_code_t res = SYS_NO_ERROR_CODE;
 80148fc:	2300      	movs	r3, #0
 80148fe:	81fb      	strh	r3, [r7, #14]
/*  ProcessTask_t *p_obj = (ProcessTask_t*)_this; */

  return res;
 8014900:	89fb      	ldrh	r3, [r7, #14]
}
 8014902:	4618      	mov	r0, r3
 8014904:	3710      	adds	r7, #16
 8014906:	46bd      	mov	sp, r7
 8014908:	bd80      	pop	{r7, pc}
 801490a:	bf00      	nop
 801490c:	0802685c 	.word	0x0802685c

08014910 <ProcessTaskExecuteStepState1>:

/* Private function definition */
/*******************************/

static sys_error_code_t ProcessTaskExecuteStepState1(AManagedTask *_this)
{
 8014910:	b580      	push	{r7, lr}
 8014912:	b088      	sub	sp, #32
 8014914:	af00      	add	r7, sp, #0
 8014916:	6078      	str	r0, [r7, #4]
  assert_param(_this != NULL);
 8014918:	687b      	ldr	r3, [r7, #4]
 801491a:	2b00      	cmp	r3, #0
 801491c:	d104      	bne.n	8014928 <ProcessTaskExecuteStepState1+0x18>
 801491e:	f44f 71df 	mov.w	r1, #446	; 0x1be
 8014922:	485f      	ldr	r0, [pc, #380]	; (8014aa0 <ProcessTaskExecuteStepState1+0x190>)
 8014924:	f000 fcc1 	bl	80152aa <assert_failed>
  sys_error_code_t res = SYS_NO_ERROR_CODE;
 8014928:	2300      	movs	r3, #0
 801492a:	83fb      	strh	r3, [r7, #30]
  ProcessTask_t *p_obj = (ProcessTask_t*)_this;
 801492c:	687b      	ldr	r3, [r7, #4]
 801492e:	61bb      	str	r3, [r7, #24]
  struct prcMessage_t msg = {0};
 8014930:	f107 0308 	add.w	r3, r7, #8
 8014934:	2200      	movs	r2, #0
 8014936:	601a      	str	r2, [r3, #0]
 8014938:	605a      	str	r2, [r3, #4]

  AMTExSetInactiveState((AManagedTaskEx*)_this, TRUE);
 801493a:	2101      	movs	r1, #1
 801493c:	6878      	ldr	r0, [r7, #4]
 801493e:	f7ff fc87 	bl	8014250 <AMTExSetInactiveState>
  if(TX_SUCCESS == tx_queue_receive(&p_obj->in_queue, &msg, TX_WAIT_FOREVER))
 8014942:	69bb      	ldr	r3, [r7, #24]
 8014944:	33c4      	adds	r3, #196	; 0xc4
 8014946:	f107 0108 	add.w	r1, r7, #8
 801494a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801494e:	4618      	mov	r0, r3
 8014950:	f7fe fa74 	bl	8012e3c <_txe_queue_receive>
 8014954:	4603      	mov	r3, r0
 8014956:	2b00      	cmp	r3, #0
 8014958:	f040 809c 	bne.w	8014a94 <ProcessTaskExecuteStepState1+0x184>
  {
    AMTExSetInactiveState((AManagedTaskEx*)_this, FALSE);
 801495c:	2100      	movs	r1, #0
 801495e:	6878      	ldr	r0, [r7, #4]
 8014960:	f7ff fc76 	bl	8014250 <AMTExSetInactiveState>
    if (msg.msgId == APP_MESSAGE_ID_PRC)
 8014964:	7a3b      	ldrb	r3, [r7, #8]
 8014966:	2b11      	cmp	r3, #17
 8014968:	f040 808a 	bne.w	8014a80 <ProcessTaskExecuteStepState1+0x170>
    {
      switch (msg.cmd_id)
 801496c:	897b      	ldrh	r3, [r7, #10]
 801496e:	3b02      	subs	r3, #2
 8014970:	2b07      	cmp	r3, #7
 8014972:	d874      	bhi.n	8014a5e <ProcessTaskExecuteStepState1+0x14e>
 8014974:	a201      	add	r2, pc, #4	; (adr r2, 801497c <ProcessTaskExecuteStepState1+0x6c>)
 8014976:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801497a:	bf00      	nop
 801497c:	0801499d 	.word	0x0801499d
 8014980:	080149ab 	.word	0x080149ab
 8014984:	08014a5f 	.word	0x08014a5f
 8014988:	080149bf 	.word	0x080149bf
 801498c:	080149cf 	.word	0x080149cf
 8014990:	080149ed 	.word	0x080149ed
 8014994:	08014a0b 	.word	0x08014a0b
 8014998:	08014a35 	.word	0x08014a35
      {
        case PRC_CMD_STOP_PROCESSING:
          /* release the resource (also memory) allocated by the DPU.*/
          ADPU_Reset((ADPU*)p_obj->p_dpu);
 801499c:	69bb      	ldr	r3, [r7, #24]
 801499e:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 80149a2:	4618      	mov	r0, r3
 80149a4:	f003 ff5a 	bl	801885c <ADPU_Reset>
          break;
 80149a8:	e074      	b.n	8014a94 <ProcessTaskExecuteStepState1+0x184>

        case PRC_CMD_CONNECT_TO_SENSOR:
          res = ProcessTaskAttachToSensor(p_obj, (ISourceObservable*)msg.param, msg.sparam);
 80149aa:	68fb      	ldr	r3, [r7, #12]
 80149ac:	4619      	mov	r1, r3
 80149ae:	7a7b      	ldrb	r3, [r7, #9]
 80149b0:	461a      	mov	r2, r3
 80149b2:	69b8      	ldr	r0, [r7, #24]
 80149b4:	f7ff fd4c 	bl	8014450 <ProcessTaskAttachToSensor>
 80149b8:	4603      	mov	r3, r0
 80149ba:	83fb      	strh	r3, [r7, #30]
          break;
 80149bc:	e06a      	b.n	8014a94 <ProcessTaskExecuteStepState1+0x184>

        case PRC_CMD_DETACH_FROM_SENSOR:
          res = ProcessTaskDetachFromSensor(p_obj, (ISourceObservable*)msg.param);
 80149be:	68fb      	ldr	r3, [r7, #12]
 80149c0:	4619      	mov	r1, r3
 80149c2:	69b8      	ldr	r0, [r7, #24]
 80149c4:	f000 f97a 	bl	8014cbc <ProcessTaskDetachFromSensor>
 80149c8:	4603      	mov	r3, r0
 80149ca:	83fb      	strh	r3, [r7, #30]
          break;
 80149cc:	e062      	b.n	8014a94 <ProcessTaskExecuteStepState1+0x184>

        case PRC_CMD_ADD_DPU_LISTENER:
        {
          IEventSrc *p_evt_src = ADPU_GetEventSrcIF((ADPU*)p_obj->p_dpu);
 80149ce:	69bb      	ldr	r3, [r7, #24]
 80149d0:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 80149d4:	4618      	mov	r0, r3
 80149d6:	f003 fefb 	bl	80187d0 <ADPU_GetEventSrcIF>
 80149da:	6138      	str	r0, [r7, #16]
          res = IEventSrcAddEventListener(p_evt_src, (IEventListener*)msg.param);
 80149dc:	68fb      	ldr	r3, [r7, #12]
 80149de:	4619      	mov	r1, r3
 80149e0:	6938      	ldr	r0, [r7, #16]
 80149e2:	f7ff fc71 	bl	80142c8 <IEventSrcAddEventListener>
 80149e6:	4603      	mov	r3, r0
 80149e8:	83fb      	strh	r3, [r7, #30]
        }
        break;
 80149ea:	e053      	b.n	8014a94 <ProcessTaskExecuteStepState1+0x184>

        case PRC_CMD_REMOVE_DPU_LISTENER:
        {
          IEventSrc *p_evt_src = ADPU_GetEventSrcIF((ADPU*)p_obj->p_dpu);
 80149ec:	69bb      	ldr	r3, [r7, #24]
 80149ee:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 80149f2:	4618      	mov	r0, r3
 80149f4:	f003 feec 	bl	80187d0 <ADPU_GetEventSrcIF>
 80149f8:	6178      	str	r0, [r7, #20]
          res = IEventSrcRemoveEventListener(p_evt_src, (IEventListener*)msg.param);
 80149fa:	68fb      	ldr	r3, [r7, #12]
 80149fc:	4619      	mov	r1, r3
 80149fe:	6978      	ldr	r0, [r7, #20]
 8014a00:	f7ff fc72 	bl	80142e8 <IEventSrcRemoveEventListener>
 8014a04:	4603      	mov	r3, r0
 8014a06:	83fb      	strh	r3, [r7, #30]
        }
        break;
 8014a08:	e044      	b.n	8014a94 <ProcessTaskExecuteStepState1+0x184>

        case PRC_CMD_SUSPEND_DPU:
          ADPU_Suspend((ADPU*)p_obj->p_dpu);
 8014a0a:	69bb      	ldr	r3, [r7, #24]
 8014a0c:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8014a10:	4618      	mov	r0, r3
 8014a12:	f003 ffe1 	bl	80189d8 <ADPU_Suspend>
          SYS_DEBUGF(SYS_DBG_LEVEL_VERBOSE, ("PRC: suspend DPU\r\n"));
 8014a16:	4b23      	ldr	r3, [pc, #140]	; (8014aa4 <ProcessTaskExecuteStepState1+0x194>)
 8014a18:	781b      	ldrb	r3, [r3, #0]
 8014a1a:	2b01      	cmp	r3, #1
 8014a1c:	d835      	bhi.n	8014a8a <ProcessTaskExecuteStepState1+0x17a>
 8014a1e:	4b22      	ldr	r3, [pc, #136]	; (8014aa8 <ProcessTaskExecuteStepState1+0x198>)
 8014a20:	681b      	ldr	r3, [r3, #0]
 8014a22:	4798      	blx	r3
 8014a24:	4b21      	ldr	r3, [pc, #132]	; (8014aac <ProcessTaskExecuteStepState1+0x19c>)
 8014a26:	681b      	ldr	r3, [r3, #0]
 8014a28:	4821      	ldr	r0, [pc, #132]	; (8014ab0 <ProcessTaskExecuteStepState1+0x1a0>)
 8014a2a:	4798      	blx	r3
 8014a2c:	4b21      	ldr	r3, [pc, #132]	; (8014ab4 <ProcessTaskExecuteStepState1+0x1a4>)
 8014a2e:	681b      	ldr	r3, [r3, #0]
 8014a30:	4798      	blx	r3
          break;
 8014a32:	e02a      	b.n	8014a8a <ProcessTaskExecuteStepState1+0x17a>

        case PRC_CMD_RESUME_DPU:
          ADPU_Resume((ADPU*)p_obj->p_dpu);
 8014a34:	69bb      	ldr	r3, [r7, #24]
 8014a36:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8014a3a:	4618      	mov	r0, r3
 8014a3c:	f003 ffb2 	bl	80189a4 <ADPU_Resume>
          SYS_DEBUGF(SYS_DBG_LEVEL_VERBOSE, ("PRC: resume DPU\r\n"));
 8014a40:	4b18      	ldr	r3, [pc, #96]	; (8014aa4 <ProcessTaskExecuteStepState1+0x194>)
 8014a42:	781b      	ldrb	r3, [r3, #0]
 8014a44:	2b01      	cmp	r3, #1
 8014a46:	d822      	bhi.n	8014a8e <ProcessTaskExecuteStepState1+0x17e>
 8014a48:	4b17      	ldr	r3, [pc, #92]	; (8014aa8 <ProcessTaskExecuteStepState1+0x198>)
 8014a4a:	681b      	ldr	r3, [r3, #0]
 8014a4c:	4798      	blx	r3
 8014a4e:	4b17      	ldr	r3, [pc, #92]	; (8014aac <ProcessTaskExecuteStepState1+0x19c>)
 8014a50:	681b      	ldr	r3, [r3, #0]
 8014a52:	4819      	ldr	r0, [pc, #100]	; (8014ab8 <ProcessTaskExecuteStepState1+0x1a8>)
 8014a54:	4798      	blx	r3
 8014a56:	4b17      	ldr	r3, [pc, #92]	; (8014ab4 <ProcessTaskExecuteStepState1+0x1a4>)
 8014a58:	681b      	ldr	r3, [r3, #0]
 8014a5a:	4798      	blx	r3
          break;
 8014a5c:	e017      	b.n	8014a8e <ProcessTaskExecuteStepState1+0x17e>

        default:
          SYS_DEBUGF(SYS_DBG_LEVEL_VERBOSE, ("PRC: unexpected command ID:0x%x\r\n", msg.cmd_id));
 8014a5e:	4b11      	ldr	r3, [pc, #68]	; (8014aa4 <ProcessTaskExecuteStepState1+0x194>)
 8014a60:	781b      	ldrb	r3, [r3, #0]
 8014a62:	2b01      	cmp	r3, #1
 8014a64:	d815      	bhi.n	8014a92 <ProcessTaskExecuteStepState1+0x182>
 8014a66:	4b10      	ldr	r3, [pc, #64]	; (8014aa8 <ProcessTaskExecuteStepState1+0x198>)
 8014a68:	681b      	ldr	r3, [r3, #0]
 8014a6a:	4798      	blx	r3
 8014a6c:	4b0f      	ldr	r3, [pc, #60]	; (8014aac <ProcessTaskExecuteStepState1+0x19c>)
 8014a6e:	681b      	ldr	r3, [r3, #0]
 8014a70:	897a      	ldrh	r2, [r7, #10]
 8014a72:	4611      	mov	r1, r2
 8014a74:	4811      	ldr	r0, [pc, #68]	; (8014abc <ProcessTaskExecuteStepState1+0x1ac>)
 8014a76:	4798      	blx	r3
 8014a78:	4b0e      	ldr	r3, [pc, #56]	; (8014ab4 <ProcessTaskExecuteStepState1+0x1a4>)
 8014a7a:	681b      	ldr	r3, [r3, #0]
 8014a7c:	4798      	blx	r3
          break;
 8014a7e:	e008      	b.n	8014a92 <ProcessTaskExecuteStepState1+0x182>
        }
    }
    else if (msg.msgId == APP_REPORT_ID_FORCE_STEP)
 8014a80:	7a3b      	ldrb	r3, [r7, #8]
 8014a82:	2bfe      	cmp	r3, #254	; 0xfe
 8014a84:	d106      	bne.n	8014a94 <ProcessTaskExecuteStepState1+0x184>
    {
      /* we need only to resume the task because of a power mode switch pending. */
      __NOP();
 8014a86:	bf00      	nop
 8014a88:	e004      	b.n	8014a94 <ProcessTaskExecuteStepState1+0x184>
          break;
 8014a8a:	bf00      	nop
 8014a8c:	e002      	b.n	8014a94 <ProcessTaskExecuteStepState1+0x184>
          break;
 8014a8e:	bf00      	nop
 8014a90:	e000      	b.n	8014a94 <ProcessTaskExecuteStepState1+0x184>
          break;
 8014a92:	bf00      	nop
    }
  }

  return res;
 8014a94:	8bfb      	ldrh	r3, [r7, #30]
}
 8014a96:	4618      	mov	r0, r3
 8014a98:	3720      	adds	r7, #32
 8014a9a:	46bd      	mov	sp, r7
 8014a9c:	bd80      	pop	{r7, pc}
 8014a9e:	bf00      	nop
 8014aa0:	0802685c 	.word	0x0802685c
 8014aa4:	2000002c 	.word	0x2000002c
 8014aa8:	20000030 	.word	0x20000030
 8014aac:	20000038 	.word	0x20000038
 8014ab0:	08026980 	.word	0x08026980
 8014ab4:	20000034 	.word	0x20000034
 8014ab8:	08026994 	.word	0x08026994
 8014abc:	080269a8 	.word	0x080269a8

08014ac0 <ProcessTaskExecuteStepSensorsActive>:

static sys_error_code_t ProcessTaskExecuteStepSensorsActive(AManagedTask *_this)
{
 8014ac0:	b580      	push	{r7, lr}
 8014ac2:	b086      	sub	sp, #24
 8014ac4:	af00      	add	r7, sp, #0
 8014ac6:	6078      	str	r0, [r7, #4]
  assert_param(_this != NULL);
 8014ac8:	687b      	ldr	r3, [r7, #4]
 8014aca:	2b00      	cmp	r3, #0
 8014acc:	d104      	bne.n	8014ad8 <ProcessTaskExecuteStepSensorsActive+0x18>
 8014ace:	f240 2101 	movw	r1, #513	; 0x201
 8014ad2:	4859      	ldr	r0, [pc, #356]	; (8014c38 <ProcessTaskExecuteStepSensorsActive+0x178>)
 8014ad4:	f000 fbe9 	bl	80152aa <assert_failed>
  sys_error_code_t res = SYS_NO_ERROR_CODE;
 8014ad8:	2300      	movs	r3, #0
 8014ada:	82fb      	strh	r3, [r7, #22]
  ProcessTask_t *p_obj = (ProcessTask_t*)_this;
 8014adc:	687b      	ldr	r3, [r7, #4]
 8014ade:	613b      	str	r3, [r7, #16]

  struct prcMessage_t msg = {0};
 8014ae0:	f107 0308 	add.w	r3, r7, #8
 8014ae4:	2200      	movs	r2, #0
 8014ae6:	601a      	str	r2, [r3, #0]
 8014ae8:	605a      	str	r2, [r3, #4]

  AMTExSetInactiveState((AManagedTaskEx*)_this, TRUE);
 8014aea:	2101      	movs	r1, #1
 8014aec:	6878      	ldr	r0, [r7, #4]
 8014aee:	f7ff fbaf 	bl	8014250 <AMTExSetInactiveState>
  if(TX_SUCCESS == tx_queue_receive(&p_obj->in_queue, &msg, TX_WAIT_FOREVER))
 8014af2:	693b      	ldr	r3, [r7, #16]
 8014af4:	33c4      	adds	r3, #196	; 0xc4
 8014af6:	f107 0108 	add.w	r1, r7, #8
 8014afa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014afe:	4618      	mov	r0, r3
 8014b00:	f7fe f99c 	bl	8012e3c <_txe_queue_receive>
 8014b04:	4603      	mov	r3, r0
 8014b06:	2b00      	cmp	r3, #0
 8014b08:	f040 8090 	bne.w	8014c2c <ProcessTaskExecuteStepSensorsActive+0x16c>
  {
    AMTExSetInactiveState((AManagedTaskEx*)_this, FALSE);
 8014b0c:	2100      	movs	r1, #0
 8014b0e:	6878      	ldr	r0, [r7, #4]
 8014b10:	f7ff fb9e 	bl	8014250 <AMTExSetInactiveState>
    if (msg.msgId == APP_MESSAGE_ID_PRC)
 8014b14:	7a3b      	ldrb	r3, [r7, #8]
 8014b16:	2b11      	cmp	r3, #17
 8014b18:	d17c      	bne.n	8014c14 <ProcessTaskExecuteStepSensorsActive+0x154>
    {
      switch (msg.cmd_id)
 8014b1a:	897b      	ldrh	r3, [r7, #10]
 8014b1c:	3b01      	subs	r3, #1
 8014b1e:	2b08      	cmp	r3, #8
 8014b20:	d867      	bhi.n	8014bf2 <ProcessTaskExecuteStepSensorsActive+0x132>
 8014b22:	a201      	add	r2, pc, #4	; (adr r2, 8014b28 <ProcessTaskExecuteStepSensorsActive+0x68>)
 8014b24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014b28:	08014b4d 	.word	0x08014b4d
 8014b2c:	08014bf3 	.word	0x08014bf3
 8014b30:	08014b7b 	.word	0x08014b7b
 8014b34:	08014bf3 	.word	0x08014bf3
 8014b38:	08014b8f 	.word	0x08014b8f
 8014b3c:	08014bf3 	.word	0x08014bf3
 8014b40:	08014bf3 	.word	0x08014bf3
 8014b44:	08014b9f 	.word	0x08014b9f
 8014b48:	08014bc9 	.word	0x08014bc9
      {
        case PRC_CMD_NEW_DATA_READY:

          res = IDPU_Process((IDPU*)p_obj->p_dpu);
 8014b4c:	693b      	ldr	r3, [r7, #16]
 8014b4e:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8014b52:	4618      	mov	r0, r3
 8014b54:	f005 fa3d 	bl	8019fd2 <IDPU_Process>
 8014b58:	4603      	mov	r3, r0
 8014b5a:	82fb      	strh	r3, [r7, #22]

          SYS_DEBUGF(SYS_DBG_LEVEL_VERBOSE, ("PRC: processed new data.\r\n"));
 8014b5c:	4b37      	ldr	r3, [pc, #220]	; (8014c3c <ProcessTaskExecuteStepSensorsActive+0x17c>)
 8014b5e:	781b      	ldrb	r3, [r3, #0]
 8014b60:	2b01      	cmp	r3, #1
 8014b62:	d85c      	bhi.n	8014c1e <ProcessTaskExecuteStepSensorsActive+0x15e>
 8014b64:	4b36      	ldr	r3, [pc, #216]	; (8014c40 <ProcessTaskExecuteStepSensorsActive+0x180>)
 8014b66:	681b      	ldr	r3, [r3, #0]
 8014b68:	4798      	blx	r3
 8014b6a:	4b36      	ldr	r3, [pc, #216]	; (8014c44 <ProcessTaskExecuteStepSensorsActive+0x184>)
 8014b6c:	681b      	ldr	r3, [r3, #0]
 8014b6e:	4836      	ldr	r0, [pc, #216]	; (8014c48 <ProcessTaskExecuteStepSensorsActive+0x188>)
 8014b70:	4798      	blx	r3
 8014b72:	4b36      	ldr	r3, [pc, #216]	; (8014c4c <ProcessTaskExecuteStepSensorsActive+0x18c>)
 8014b74:	681b      	ldr	r3, [r3, #0]
 8014b76:	4798      	blx	r3
          break;
 8014b78:	e051      	b.n	8014c1e <ProcessTaskExecuteStepSensorsActive+0x15e>

        case PRC_CMD_CONNECT_TO_SENSOR:
          res = ProcessTaskAttachToSensor(p_obj, (ISourceObservable*)msg.param, msg.sparam);
 8014b7a:	68fb      	ldr	r3, [r7, #12]
 8014b7c:	4619      	mov	r1, r3
 8014b7e:	7a7b      	ldrb	r3, [r7, #9]
 8014b80:	461a      	mov	r2, r3
 8014b82:	6938      	ldr	r0, [r7, #16]
 8014b84:	f7ff fc64 	bl	8014450 <ProcessTaskAttachToSensor>
 8014b88:	4603      	mov	r3, r0
 8014b8a:	82fb      	strh	r3, [r7, #22]
          break;
 8014b8c:	e04e      	b.n	8014c2c <ProcessTaskExecuteStepSensorsActive+0x16c>

        case PRC_CMD_DETACH_FROM_SENSOR:
          res = ProcessTaskDetachFromSensor(p_obj, (ISourceObservable*)msg.param);
 8014b8e:	68fb      	ldr	r3, [r7, #12]
 8014b90:	4619      	mov	r1, r3
 8014b92:	6938      	ldr	r0, [r7, #16]
 8014b94:	f000 f892 	bl	8014cbc <ProcessTaskDetachFromSensor>
 8014b98:	4603      	mov	r3, r0
 8014b9a:	82fb      	strh	r3, [r7, #22]
          break;
 8014b9c:	e046      	b.n	8014c2c <ProcessTaskExecuteStepSensorsActive+0x16c>

        case PRC_CMD_SUSPEND_DPU:
          ADPU_Suspend((ADPU*)p_obj->p_dpu);
 8014b9e:	693b      	ldr	r3, [r7, #16]
 8014ba0:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8014ba4:	4618      	mov	r0, r3
 8014ba6:	f003 ff17 	bl	80189d8 <ADPU_Suspend>
          SYS_DEBUGF(SYS_DBG_LEVEL_VERBOSE, ("PRC: suspend DPU\r\n"));
 8014baa:	4b24      	ldr	r3, [pc, #144]	; (8014c3c <ProcessTaskExecuteStepSensorsActive+0x17c>)
 8014bac:	781b      	ldrb	r3, [r3, #0]
 8014bae:	2b01      	cmp	r3, #1
 8014bb0:	d837      	bhi.n	8014c22 <ProcessTaskExecuteStepSensorsActive+0x162>
 8014bb2:	4b23      	ldr	r3, [pc, #140]	; (8014c40 <ProcessTaskExecuteStepSensorsActive+0x180>)
 8014bb4:	681b      	ldr	r3, [r3, #0]
 8014bb6:	4798      	blx	r3
 8014bb8:	4b22      	ldr	r3, [pc, #136]	; (8014c44 <ProcessTaskExecuteStepSensorsActive+0x184>)
 8014bba:	681b      	ldr	r3, [r3, #0]
 8014bbc:	4824      	ldr	r0, [pc, #144]	; (8014c50 <ProcessTaskExecuteStepSensorsActive+0x190>)
 8014bbe:	4798      	blx	r3
 8014bc0:	4b22      	ldr	r3, [pc, #136]	; (8014c4c <ProcessTaskExecuteStepSensorsActive+0x18c>)
 8014bc2:	681b      	ldr	r3, [r3, #0]
 8014bc4:	4798      	blx	r3
          break;
 8014bc6:	e02c      	b.n	8014c22 <ProcessTaskExecuteStepSensorsActive+0x162>

        case PRC_CMD_RESUME_DPU:
          ADPU_Resume((ADPU*)p_obj->p_dpu);
 8014bc8:	693b      	ldr	r3, [r7, #16]
 8014bca:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8014bce:	4618      	mov	r0, r3
 8014bd0:	f003 fee8 	bl	80189a4 <ADPU_Resume>
          SYS_DEBUGF(SYS_DBG_LEVEL_VERBOSE, ("PRC: resume DPU\r\n"));
 8014bd4:	4b19      	ldr	r3, [pc, #100]	; (8014c3c <ProcessTaskExecuteStepSensorsActive+0x17c>)
 8014bd6:	781b      	ldrb	r3, [r3, #0]
 8014bd8:	2b01      	cmp	r3, #1
 8014bda:	d824      	bhi.n	8014c26 <ProcessTaskExecuteStepSensorsActive+0x166>
 8014bdc:	4b18      	ldr	r3, [pc, #96]	; (8014c40 <ProcessTaskExecuteStepSensorsActive+0x180>)
 8014bde:	681b      	ldr	r3, [r3, #0]
 8014be0:	4798      	blx	r3
 8014be2:	4b18      	ldr	r3, [pc, #96]	; (8014c44 <ProcessTaskExecuteStepSensorsActive+0x184>)
 8014be4:	681b      	ldr	r3, [r3, #0]
 8014be6:	481b      	ldr	r0, [pc, #108]	; (8014c54 <ProcessTaskExecuteStepSensorsActive+0x194>)
 8014be8:	4798      	blx	r3
 8014bea:	4b18      	ldr	r3, [pc, #96]	; (8014c4c <ProcessTaskExecuteStepSensorsActive+0x18c>)
 8014bec:	681b      	ldr	r3, [r3, #0]
 8014bee:	4798      	blx	r3
          break;
 8014bf0:	e019      	b.n	8014c26 <ProcessTaskExecuteStepSensorsActive+0x166>

        default:
          SYS_DEBUGF(SYS_DBG_LEVEL_VERBOSE, ("PRC: unexpected command ID:0x%x\r\n", msg.cmd_id));
 8014bf2:	4b12      	ldr	r3, [pc, #72]	; (8014c3c <ProcessTaskExecuteStepSensorsActive+0x17c>)
 8014bf4:	781b      	ldrb	r3, [r3, #0]
 8014bf6:	2b01      	cmp	r3, #1
 8014bf8:	d817      	bhi.n	8014c2a <ProcessTaskExecuteStepSensorsActive+0x16a>
 8014bfa:	4b11      	ldr	r3, [pc, #68]	; (8014c40 <ProcessTaskExecuteStepSensorsActive+0x180>)
 8014bfc:	681b      	ldr	r3, [r3, #0]
 8014bfe:	4798      	blx	r3
 8014c00:	4b10      	ldr	r3, [pc, #64]	; (8014c44 <ProcessTaskExecuteStepSensorsActive+0x184>)
 8014c02:	681b      	ldr	r3, [r3, #0]
 8014c04:	897a      	ldrh	r2, [r7, #10]
 8014c06:	4611      	mov	r1, r2
 8014c08:	4813      	ldr	r0, [pc, #76]	; (8014c58 <ProcessTaskExecuteStepSensorsActive+0x198>)
 8014c0a:	4798      	blx	r3
 8014c0c:	4b0f      	ldr	r3, [pc, #60]	; (8014c4c <ProcessTaskExecuteStepSensorsActive+0x18c>)
 8014c0e:	681b      	ldr	r3, [r3, #0]
 8014c10:	4798      	blx	r3
          break;
 8014c12:	e00a      	b.n	8014c2a <ProcessTaskExecuteStepSensorsActive+0x16a>
      }
    }
    else if (msg.msgId == APP_REPORT_ID_FORCE_STEP)
 8014c14:	7a3b      	ldrb	r3, [r7, #8]
 8014c16:	2bfe      	cmp	r3, #254	; 0xfe
 8014c18:	d108      	bne.n	8014c2c <ProcessTaskExecuteStepSensorsActive+0x16c>
    {
      /* we need only to resume the task because of a power mode switch pending. */
      __NOP();
 8014c1a:	bf00      	nop
 8014c1c:	e006      	b.n	8014c2c <ProcessTaskExecuteStepSensorsActive+0x16c>
          break;
 8014c1e:	bf00      	nop
 8014c20:	e004      	b.n	8014c2c <ProcessTaskExecuteStepSensorsActive+0x16c>
          break;
 8014c22:	bf00      	nop
 8014c24:	e002      	b.n	8014c2c <ProcessTaskExecuteStepSensorsActive+0x16c>
          break;
 8014c26:	bf00      	nop
 8014c28:	e000      	b.n	8014c2c <ProcessTaskExecuteStepSensorsActive+0x16c>
          break;
 8014c2a:	bf00      	nop
    }
  }

  return res;
 8014c2c:	8afb      	ldrh	r3, [r7, #22]
}
 8014c2e:	4618      	mov	r0, r3
 8014c30:	3718      	adds	r7, #24
 8014c32:	46bd      	mov	sp, r7
 8014c34:	bd80      	pop	{r7, pc}
 8014c36:	bf00      	nop
 8014c38:	0802685c 	.word	0x0802685c
 8014c3c:	2000002c 	.word	0x2000002c
 8014c40:	20000030 	.word	0x20000030
 8014c44:	20000038 	.word	0x20000038
 8014c48:	080269cc 	.word	0x080269cc
 8014c4c:	20000034 	.word	0x20000034
 8014c50:	08026980 	.word	0x08026980
 8014c54:	08026994 	.word	0x08026994
 8014c58:	080269a8 	.word	0x080269a8

08014c5c <ProcessTaskDPUCallback>:

static void ProcessTaskDPUCallback(IDPU *_this, void* p_param)
{
 8014c5c:	b580      	push	{r7, lr}
 8014c5e:	b086      	sub	sp, #24
 8014c60:	af00      	add	r7, sp, #0
 8014c62:	6078      	str	r0, [r7, #4]
 8014c64:	6039      	str	r1, [r7, #0]
  assert_param(_this != NULL);
 8014c66:	687b      	ldr	r3, [r7, #4]
 8014c68:	2b00      	cmp	r3, #0
 8014c6a:	d104      	bne.n	8014c76 <ProcessTaskDPUCallback+0x1a>
 8014c6c:	f240 2139 	movw	r1, #569	; 0x239
 8014c70:	4810      	ldr	r0, [pc, #64]	; (8014cb4 <ProcessTaskDPUCallback+0x58>)
 8014c72:	f000 fb1a 	bl	80152aa <assert_failed>
  ProcessTask_t *p_obj = (ProcessTask_t*)p_param;
 8014c76:	683b      	ldr	r3, [r7, #0]
 8014c78:	617b      	str	r3, [r7, #20]

  struct prcMessage_t msg = {
 8014c7a:	f107 030c 	add.w	r3, r7, #12
 8014c7e:	2200      	movs	r2, #0
 8014c80:	601a      	str	r2, [r3, #0]
 8014c82:	605a      	str	r2, [r3, #4]
 8014c84:	2311      	movs	r3, #17
 8014c86:	733b      	strb	r3, [r7, #12]
 8014c88:	2301      	movs	r3, #1
 8014c8a:	81fb      	strh	r3, [r7, #14]
      .msgId = APP_MESSAGE_ID_PRC,
      .cmd_id = PRC_CMD_NEW_DATA_READY
  };

  if(TX_SUCCESS != tx_queue_send(&p_obj->in_queue, &msg, AMT_MS_TO_TICKS(100)))
 8014c8c:	697b      	ldr	r3, [r7, #20]
 8014c8e:	33c4      	adds	r3, #196	; 0xc4
 8014c90:	f107 010c 	add.w	r1, r7, #12
 8014c94:	2264      	movs	r2, #100	; 0x64
 8014c96:	4618      	mov	r0, r3
 8014c98:	f7fe f928 	bl	8012eec <_txe_queue_send>
 8014c9c:	4603      	mov	r3, r0
 8014c9e:	2b00      	cmp	r3, #0
 8014ca0:	d003      	beq.n	8014caa <ProcessTaskDPUCallback+0x4e>
  {
    SYS_SET_SERVICE_LEVEL_ERROR_CODE(SYS_PRC_TASK_IN_QUEUE_FULL_ERROR_CODE);
 8014ca2:	4b05      	ldr	r3, [pc, #20]	; (8014cb8 <ProcessTaskDPUCallback+0x5c>)
 8014ca4:	f640 029d 	movw	r2, #2205	; 0x89d
 8014ca8:	805a      	strh	r2, [r3, #2]
    // this function is private and the caller will ignore this return code.
  }
}
 8014caa:	bf00      	nop
 8014cac:	3718      	adds	r7, #24
 8014cae:	46bd      	mov	sp, r7
 8014cb0:	bd80      	pop	{r7, pc}
 8014cb2:	bf00      	nop
 8014cb4:	0802685c 	.word	0x0802685c
 8014cb8:	20000700 	.word	0x20000700

08014cbc <ProcessTaskDetachFromSensor>:

static sys_error_code_t ProcessTaskDetachFromSensor(ProcessTask_t *_this, ISourceObservable *p_sensor)
{
 8014cbc:	b580      	push	{r7, lr}
 8014cbe:	b084      	sub	sp, #16
 8014cc0:	af00      	add	r7, sp, #0
 8014cc2:	6078      	str	r0, [r7, #4]
 8014cc4:	6039      	str	r1, [r7, #0]
  assert_param(_this != NULL);
 8014cc6:	687b      	ldr	r3, [r7, #4]
 8014cc8:	2b00      	cmp	r3, #0
 8014cca:	d104      	bne.n	8014cd6 <ProcessTaskDetachFromSensor+0x1a>
 8014ccc:	f240 214a 	movw	r1, #586	; 0x24a
 8014cd0:	481f      	ldr	r0, [pc, #124]	; (8014d50 <ProcessTaskDetachFromSensor+0x94>)
 8014cd2:	f000 faea 	bl	80152aa <assert_failed>
  assert_param(p_sensor != NULL);
 8014cd6:	683b      	ldr	r3, [r7, #0]
 8014cd8:	2b00      	cmp	r3, #0
 8014cda:	d104      	bne.n	8014ce6 <ProcessTaskDetachFromSensor+0x2a>
 8014cdc:	f240 214b 	movw	r1, #587	; 0x24b
 8014ce0:	481b      	ldr	r0, [pc, #108]	; (8014d50 <ProcessTaskDetachFromSensor+0x94>)
 8014ce2:	f000 fae2 	bl	80152aa <assert_failed>
  sys_error_code_t res = SYS_NO_ERROR_CODE;
 8014ce6:	2300      	movs	r3, #0
 8014ce8:	81fb      	strh	r3, [r7, #14]

  if (_this->p_dpu_buff != NULL)
 8014cea:	687b      	ldr	r3, [r7, #4]
 8014cec:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8014cf0:	2b00      	cmp	r3, #0
 8014cf2:	d017      	beq.n	8014d24 <ProcessTaskDetachFromSensor+0x68>
  {
    SysFree(_this->p_dpu_buff);
 8014cf4:	687b      	ldr	r3, [r7, #4]
 8014cf6:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8014cfa:	4618      	mov	r0, r3
 8014cfc:	f7fa fae2 	bl	800f2c4 <SysFree>
    _this->p_dpu_buff = NULL;
 8014d00:	687b      	ldr	r3, [r7, #4]
 8014d02:	2200      	movs	r2, #0
 8014d04:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

    SYS_DEBUGF(SYS_DBG_LEVEL_VERBOSE, ("PRC: free DPU buffer\r\n"));
 8014d08:	4b12      	ldr	r3, [pc, #72]	; (8014d54 <ProcessTaskDetachFromSensor+0x98>)
 8014d0a:	781b      	ldrb	r3, [r3, #0]
 8014d0c:	2b01      	cmp	r3, #1
 8014d0e:	d809      	bhi.n	8014d24 <ProcessTaskDetachFromSensor+0x68>
 8014d10:	4b11      	ldr	r3, [pc, #68]	; (8014d58 <ProcessTaskDetachFromSensor+0x9c>)
 8014d12:	681b      	ldr	r3, [r3, #0]
 8014d14:	4798      	blx	r3
 8014d16:	4b11      	ldr	r3, [pc, #68]	; (8014d5c <ProcessTaskDetachFromSensor+0xa0>)
 8014d18:	681b      	ldr	r3, [r3, #0]
 8014d1a:	4811      	ldr	r0, [pc, #68]	; (8014d60 <ProcessTaskDetachFromSensor+0xa4>)
 8014d1c:	4798      	blx	r3
 8014d1e:	4b11      	ldr	r3, [pc, #68]	; (8014d64 <ProcessTaskDetachFromSensor+0xa8>)
 8014d20:	681b      	ldr	r3, [r3, #0]
 8014d22:	4798      	blx	r3
  }
  AiDPUSetSensitivity(_this->p_dpu, 0.0F);
 8014d24:	687b      	ldr	r3, [r7, #4]
 8014d26:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8014d2a:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 8014d68 <ProcessTaskDetachFromSensor+0xac>
 8014d2e:	4618      	mov	r0, r3
 8014d30:	f004 fc98 	bl	8019664 <AiDPUSetSensitivity>
  res = IDPU_DetachFromSensor((IDPU*)_this->p_dpu, p_sensor);
 8014d34:	687b      	ldr	r3, [r7, #4]
 8014d36:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8014d3a:	6839      	ldr	r1, [r7, #0]
 8014d3c:	4618      	mov	r0, r3
 8014d3e:	f005 f916 	bl	8019f6e <IDPU_DetachFromSensor>
 8014d42:	4603      	mov	r3, r0
 8014d44:	81fb      	strh	r3, [r7, #14]

  return res;
 8014d46:	89fb      	ldrh	r3, [r7, #14]
}
 8014d48:	4618      	mov	r0, r3
 8014d4a:	3710      	adds	r7, #16
 8014d4c:	46bd      	mov	sp, r7
 8014d4e:	bd80      	pop	{r7, pc}
 8014d50:	0802685c 	.word	0x0802685c
 8014d54:	2000002c 	.word	0x2000002c
 8014d58:	20000030 	.word	0x20000030
 8014d5c:	20000038 	.word	0x20000038
 8014d60:	080269e8 	.word	0x080269e8
 8014d64:	20000034 	.word	0x20000034
 8014d68:	00000000 	.word	0x00000000

08014d6c <ProcessTaskSetSensorsConfig>:

static sys_error_code_t ProcessTaskSetSensorsConfig(ProcessTask_t *_this, uint16_t *p_active_sensor_id)
{
 8014d6c:	b580      	push	{r7, lr}
 8014d6e:	b08a      	sub	sp, #40	; 0x28
 8014d70:	af00      	add	r7, sp, #0
 8014d72:	6078      	str	r0, [r7, #4]
 8014d74:	6039      	str	r1, [r7, #0]
  assert_param(_this != NULL);
 8014d76:	687b      	ldr	r3, [r7, #4]
 8014d78:	2b00      	cmp	r3, #0
 8014d7a:	d104      	bne.n	8014d86 <ProcessTaskSetSensorsConfig+0x1a>
 8014d7c:	f240 215d 	movw	r1, #605	; 0x25d
 8014d80:	482a      	ldr	r0, [pc, #168]	; (8014e2c <ProcessTaskSetSensorsConfig+0xc0>)
 8014d82:	f000 fa92 	bl	80152aa <assert_failed>
  sys_error_code_t res = SYS_NO_ERROR_CODE;
 8014d86:	2300      	movs	r3, #0
 8014d88:	84fb      	strh	r3, [r7, #38]	; 0x26
  uint16_t sensor_id;
  SensorManager_t *p_sm = SMGetSensorManager();
 8014d8a:	f00b fb25 	bl	80203d8 <SMGetSensorManager>
 8014d8e:	6238      	str	r0, [r7, #32]

  /* first disable all sensors.*/
  SIterator_t iterator;
  sensor_id = SI_NULL_SENSOR_ID;
 8014d90:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014d94:	83fb      	strh	r3, [r7, #30]
  SIInit(&iterator, p_sm);
 8014d96:	f107 0314 	add.w	r3, r7, #20
 8014d9a:	6a39      	ldr	r1, [r7, #32]
 8014d9c:	4618      	mov	r0, r3
 8014d9e:	f00b fe19 	bl	80209d4 <SIInit>
  while (SIHasNext(&iterator))
 8014da2:	e00b      	b.n	8014dbc <ProcessTaskSetSensorsConfig+0x50>
  {
    sensor_id = SINext(&iterator);
 8014da4:	f107 0314 	add.w	r3, r7, #20
 8014da8:	4618      	mov	r0, r3
 8014daa:	f00b fe59 	bl	8020a60 <SINext>
 8014dae:	4603      	mov	r3, r0
 8014db0:	83fb      	strh	r3, [r7, #30]
    SMSensorDisable(sensor_id);
 8014db2:	8bfb      	ldrh	r3, [r7, #30]
 8014db4:	b2db      	uxtb	r3, r3
 8014db6:	4618      	mov	r0, r3
 8014db8:	f00b fab2 	bl	8020320 <SMSensorDisable>
  while (SIHasNext(&iterator))
 8014dbc:	f107 0314 	add.w	r3, r7, #20
 8014dc0:	4618      	mov	r0, r3
 8014dc2:	f00b fe33 	bl	8020a2c <SIHasNext>
 8014dc6:	4603      	mov	r3, r0
 8014dc8:	2b00      	cmp	r3, #0
 8014dca:	d1eb      	bne.n	8014da4 <ProcessTaskSetSensorsConfig+0x38>
  }

  /*configure only one sensor*/
  SQuery_t query;
  SQInit(&query, p_sm);
 8014dcc:	f107 030c 	add.w	r3, r7, #12
 8014dd0:	6a39      	ldr	r1, [r7, #32]
 8014dd2:	4618      	mov	r0, r3
 8014dd4:	f00b fe66 	bl	8020aa4 <SQInit>
  sensor_id = SQNextByNameAndType(&query, "ism330dhcx",  COM_TYPE_ACC);
 8014dd8:	f107 030c 	add.w	r3, r7, #12
 8014ddc:	2201      	movs	r2, #1
 8014dde:	4914      	ldr	r1, [pc, #80]	; (8014e30 <ProcessTaskSetSensorsConfig+0xc4>)
 8014de0:	4618      	mov	r0, r3
 8014de2:	f00b fe77 	bl	8020ad4 <SQNextByNameAndType>
 8014de6:	4603      	mov	r3, r0
 8014de8:	83fb      	strh	r3, [r7, #30]
  if (sensor_id != SI_NULL_SENSOR_ID)
 8014dea:	8bfb      	ldrh	r3, [r7, #30]
 8014dec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014df0:	4293      	cmp	r3, r2
 8014df2:	d012      	beq.n	8014e1a <ProcessTaskSetSensorsConfig+0xae>
  {
    SMSensorEnable(sensor_id);
 8014df4:	8bfb      	ldrh	r3, [r7, #30]
 8014df6:	b2db      	uxtb	r3, r3
 8014df8:	4618      	mov	r0, r3
 8014dfa:	f00b fa69 	bl	80202d0 <SMSensorEnable>
    SMSensorSetODR(sensor_id, 26.0);
 8014dfe:	8bfb      	ldrh	r3, [r7, #30]
 8014e00:	b2db      	uxtb	r3, r3
 8014e02:	eeb3 0a0a 	vmov.f32	s0, #58	; 0x41d00000  26.0
 8014e06:	4618      	mov	r0, r3
 8014e08:	f00b fa0a 	bl	8020220 <SMSensorSetODR>
    SMSensorSetFS(sensor_id, 4.0);
 8014e0c:	8bfb      	ldrh	r3, [r7, #30]
 8014e0e:	b2db      	uxtb	r3, r3
 8014e10:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 8014e14:	4618      	mov	r0, r3
 8014e16:	f00b fa2f 	bl	8020278 <SMSensorSetFS>
  }

  *p_active_sensor_id = sensor_id;
 8014e1a:	683b      	ldr	r3, [r7, #0]
 8014e1c:	8bfa      	ldrh	r2, [r7, #30]
 8014e1e:	801a      	strh	r2, [r3, #0]

  return res;
 8014e20:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
 8014e22:	4618      	mov	r0, r3
 8014e24:	3728      	adds	r7, #40	; 0x28
 8014e26:	46bd      	mov	sp, r7
 8014e28:	bd80      	pop	{r7, pc}
 8014e2a:	bf00      	nop
 8014e2c:	0802685c 	.word	0x0802685c
 8014e30:	08026a00 	.word	0x08026a00

08014e34 <iir_direct2_init>:


void iir_direct2_init(IIRFilterDirect2 * filter,
                      const float * a, const float * b, const float * z,
                      float first)
{
 8014e34:	b480      	push	{r7}
 8014e36:	b089      	sub	sp, #36	; 0x24
 8014e38:	af00      	add	r7, sp, #0
 8014e3a:	6178      	str	r0, [r7, #20]
 8014e3c:	6139      	str	r1, [r7, #16]
 8014e3e:	60fa      	str	r2, [r7, #12]
 8014e40:	60bb      	str	r3, [r7, #8]
 8014e42:	ed87 0a01 	vstr	s0, [r7, #4]
  filter->a = a;
 8014e46:	697b      	ldr	r3, [r7, #20]
 8014e48:	693a      	ldr	r2, [r7, #16]
 8014e4a:	611a      	str	r2, [r3, #16]
  filter->b = b;
 8014e4c:	697b      	ldr	r3, [r7, #20]
 8014e4e:	68fa      	ldr	r2, [r7, #12]
 8014e50:	615a      	str	r2, [r3, #20]

  if (z)
 8014e52:	68bb      	ldr	r3, [r7, #8]
 8014e54:	2b00      	cmp	r3, #0
 8014e56:	d024      	beq.n	8014ea2 <iir_direct2_init+0x6e>
  {
    float scale = (first == 0.0f) ? 1.0f : first;
 8014e58:	edd7 7a01 	vldr	s15, [r7, #4]
 8014e5c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8014e60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014e64:	d001      	beq.n	8014e6a <iir_direct2_init+0x36>
 8014e66:	687b      	ldr	r3, [r7, #4]
 8014e68:	e001      	b.n	8014e6e <iir_direct2_init+0x3a>
 8014e6a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8014e6e:	61bb      	str	r3, [r7, #24]
    for (int i = 0; i < FILT_ORDER; ++i) filter->z[i] = scale * z[i];
 8014e70:	2300      	movs	r3, #0
 8014e72:	61fb      	str	r3, [r7, #28]
 8014e74:	e012      	b.n	8014e9c <iir_direct2_init+0x68>
 8014e76:	69fb      	ldr	r3, [r7, #28]
 8014e78:	009b      	lsls	r3, r3, #2
 8014e7a:	68ba      	ldr	r2, [r7, #8]
 8014e7c:	4413      	add	r3, r2
 8014e7e:	ed93 7a00 	vldr	s14, [r3]
 8014e82:	edd7 7a06 	vldr	s15, [r7, #24]
 8014e86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014e8a:	697a      	ldr	r2, [r7, #20]
 8014e8c:	69fb      	ldr	r3, [r7, #28]
 8014e8e:	009b      	lsls	r3, r3, #2
 8014e90:	4413      	add	r3, r2
 8014e92:	edc3 7a00 	vstr	s15, [r3]
 8014e96:	69fb      	ldr	r3, [r7, #28]
 8014e98:	3301      	adds	r3, #1
 8014e9a:	61fb      	str	r3, [r7, #28]
 8014e9c:	69fb      	ldr	r3, [r7, #28]
 8014e9e:	2b03      	cmp	r3, #3
 8014ea0:	dde9      	ble.n	8014e76 <iir_direct2_init+0x42>
  }
}
 8014ea2:	bf00      	nop
 8014ea4:	3724      	adds	r7, #36	; 0x24
 8014ea6:	46bd      	mov	sp, r7
 8014ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014eac:	4770      	bx	lr

08014eae <iir_direct2_filter>:


float iir_direct2_filter(IIRFilterDirect2 * filter, float x)
{
 8014eae:	b480      	push	{r7}
 8014eb0:	b085      	sub	sp, #20
 8014eb2:	af00      	add	r7, sp, #0
 8014eb4:	6078      	str	r0, [r7, #4]
 8014eb6:	ed87 0a00 	vstr	s0, [r7]
  float filtered = filter->b[0] * x + filter->z[0];
 8014eba:	687b      	ldr	r3, [r7, #4]
 8014ebc:	695b      	ldr	r3, [r3, #20]
 8014ebe:	ed93 7a00 	vldr	s14, [r3]
 8014ec2:	edd7 7a00 	vldr	s15, [r7]
 8014ec6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8014eca:	687b      	ldr	r3, [r7, #4]
 8014ecc:	edd3 7a00 	vldr	s15, [r3]
 8014ed0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014ed4:	edc7 7a02 	vstr	s15, [r7, #8]

  for (int i = 1; i < FILT_ORDER; ++i) {
 8014ed8:	2301      	movs	r3, #1
 8014eda:	60fb      	str	r3, [r7, #12]
 8014edc:	e029      	b.n	8014f32 <iir_direct2_filter+0x84>
    filter->z[i-1] = filter->z[i] + filter->b[i] * x - filter->a[i]*filtered;
 8014ede:	687a      	ldr	r2, [r7, #4]
 8014ee0:	68fb      	ldr	r3, [r7, #12]
 8014ee2:	009b      	lsls	r3, r3, #2
 8014ee4:	4413      	add	r3, r2
 8014ee6:	ed93 7a00 	vldr	s14, [r3]
 8014eea:	687b      	ldr	r3, [r7, #4]
 8014eec:	695a      	ldr	r2, [r3, #20]
 8014eee:	68fb      	ldr	r3, [r7, #12]
 8014ef0:	009b      	lsls	r3, r3, #2
 8014ef2:	4413      	add	r3, r2
 8014ef4:	edd3 6a00 	vldr	s13, [r3]
 8014ef8:	edd7 7a00 	vldr	s15, [r7]
 8014efc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8014f00:	ee37 7a27 	vadd.f32	s14, s14, s15
 8014f04:	687b      	ldr	r3, [r7, #4]
 8014f06:	691a      	ldr	r2, [r3, #16]
 8014f08:	68fb      	ldr	r3, [r7, #12]
 8014f0a:	009b      	lsls	r3, r3, #2
 8014f0c:	4413      	add	r3, r2
 8014f0e:	edd3 6a00 	vldr	s13, [r3]
 8014f12:	edd7 7a02 	vldr	s15, [r7, #8]
 8014f16:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8014f1a:	68fb      	ldr	r3, [r7, #12]
 8014f1c:	3b01      	subs	r3, #1
 8014f1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014f22:	687a      	ldr	r2, [r7, #4]
 8014f24:	009b      	lsls	r3, r3, #2
 8014f26:	4413      	add	r3, r2
 8014f28:	edc3 7a00 	vstr	s15, [r3]
  for (int i = 1; i < FILT_ORDER; ++i) {
 8014f2c:	68fb      	ldr	r3, [r7, #12]
 8014f2e:	3301      	adds	r3, #1
 8014f30:	60fb      	str	r3, [r7, #12]
 8014f32:	68fb      	ldr	r3, [r7, #12]
 8014f34:	2b03      	cmp	r3, #3
 8014f36:	ddd2      	ble.n	8014ede <iir_direct2_filter+0x30>
  }
  filter->z[FILT_ORDER-1] = filter->b[FILT_ORDER] * x -
 8014f38:	687b      	ldr	r3, [r7, #4]
 8014f3a:	695b      	ldr	r3, [r3, #20]
 8014f3c:	3310      	adds	r3, #16
 8014f3e:	ed93 7a00 	vldr	s14, [r3]
 8014f42:	edd7 7a00 	vldr	s15, [r7]
 8014f46:	ee27 7a27 	vmul.f32	s14, s14, s15
                            filter->a[FILT_ORDER] * filtered;
 8014f4a:	687b      	ldr	r3, [r7, #4]
 8014f4c:	691b      	ldr	r3, [r3, #16]
 8014f4e:	3310      	adds	r3, #16
 8014f50:	edd3 6a00 	vldr	s13, [r3]
 8014f54:	edd7 7a02 	vldr	s15, [r7, #8]
 8014f58:	ee66 7aa7 	vmul.f32	s15, s13, s15
  filter->z[FILT_ORDER-1] = filter->b[FILT_ORDER] * x -
 8014f5c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014f60:	687b      	ldr	r3, [r7, #4]
 8014f62:	edc3 7a03 	vstr	s15, [r3, #12]

  return filtered;
 8014f66:	68bb      	ldr	r3, [r7, #8]
 8014f68:	ee07 3a90 	vmov	s15, r3
}
 8014f6c:	eeb0 0a67 	vmov.f32	s0, s15
 8014f70:	3714      	adds	r7, #20
 8014f72:	46bd      	mov	sp, r7
 8014f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f78:	4770      	bx	lr
	...

08014f7c <dynamic_acceleration>:


void dynamic_acceleration(float acc_x, float acc_y, float acc_z,
                          float * dyn_x, float * dyn_y, float * dyn_z)
{
 8014f7c:	b580      	push	{r7, lr}
 8014f7e:	b086      	sub	sp, #24
 8014f80:	af00      	add	r7, sp, #0
 8014f82:	ed87 0a05 	vstr	s0, [r7, #20]
 8014f86:	edc7 0a04 	vstr	s1, [r7, #16]
 8014f8a:	ed87 1a03 	vstr	s2, [r7, #12]
 8014f8e:	60b8      	str	r0, [r7, #8]
 8014f90:	6079      	str	r1, [r7, #4]
 8014f92:	603a      	str	r2, [r7, #0]
  static IIRFilterDirect2 grav_x_filter, grav_y_filter, grav_z_filter;
  static int first_sample = 1;

  if (first_sample) {
 8014f94:	4b20      	ldr	r3, [pc, #128]	; (8015018 <dynamic_acceleration+0x9c>)
 8014f96:	681b      	ldr	r3, [r3, #0]
 8014f98:	2b00      	cmp	r3, #0
 8014f9a:	d01a      	beq.n	8014fd2 <dynamic_acceleration+0x56>
    iir_direct2_init(&grav_x_filter, kGravityHighPassA, kGravityHighPassB,
 8014f9c:	ed97 0a05 	vldr	s0, [r7, #20]
 8014fa0:	4b1e      	ldr	r3, [pc, #120]	; (801501c <dynamic_acceleration+0xa0>)
 8014fa2:	4a1f      	ldr	r2, [pc, #124]	; (8015020 <dynamic_acceleration+0xa4>)
 8014fa4:	491f      	ldr	r1, [pc, #124]	; (8015024 <dynamic_acceleration+0xa8>)
 8014fa6:	4820      	ldr	r0, [pc, #128]	; (8015028 <dynamic_acceleration+0xac>)
 8014fa8:	f7ff ff44 	bl	8014e34 <iir_direct2_init>
                     kGravityHighPassInit, acc_x);
    iir_direct2_init(&grav_y_filter, kGravityHighPassA, kGravityHighPassB,
 8014fac:	ed97 0a04 	vldr	s0, [r7, #16]
 8014fb0:	4b1a      	ldr	r3, [pc, #104]	; (801501c <dynamic_acceleration+0xa0>)
 8014fb2:	4a1b      	ldr	r2, [pc, #108]	; (8015020 <dynamic_acceleration+0xa4>)
 8014fb4:	491b      	ldr	r1, [pc, #108]	; (8015024 <dynamic_acceleration+0xa8>)
 8014fb6:	481d      	ldr	r0, [pc, #116]	; (801502c <dynamic_acceleration+0xb0>)
 8014fb8:	f7ff ff3c 	bl	8014e34 <iir_direct2_init>
                     kGravityHighPassInit, acc_y);
    iir_direct2_init(&grav_z_filter, kGravityHighPassA, kGravityHighPassB,
 8014fbc:	ed97 0a03 	vldr	s0, [r7, #12]
 8014fc0:	4b16      	ldr	r3, [pc, #88]	; (801501c <dynamic_acceleration+0xa0>)
 8014fc2:	4a17      	ldr	r2, [pc, #92]	; (8015020 <dynamic_acceleration+0xa4>)
 8014fc4:	4917      	ldr	r1, [pc, #92]	; (8015024 <dynamic_acceleration+0xa8>)
 8014fc6:	481a      	ldr	r0, [pc, #104]	; (8015030 <dynamic_acceleration+0xb4>)
 8014fc8:	f7ff ff34 	bl	8014e34 <iir_direct2_init>
                     kGravityHighPassInit, acc_z);
    first_sample = 0;
 8014fcc:	4b12      	ldr	r3, [pc, #72]	; (8015018 <dynamic_acceleration+0x9c>)
 8014fce:	2200      	movs	r2, #0
 8014fd0:	601a      	str	r2, [r3, #0]
  }

  *dyn_x = iir_direct2_filter(&grav_x_filter, acc_x);
 8014fd2:	ed97 0a05 	vldr	s0, [r7, #20]
 8014fd6:	4814      	ldr	r0, [pc, #80]	; (8015028 <dynamic_acceleration+0xac>)
 8014fd8:	f7ff ff69 	bl	8014eae <iir_direct2_filter>
 8014fdc:	eef0 7a40 	vmov.f32	s15, s0
 8014fe0:	68bb      	ldr	r3, [r7, #8]
 8014fe2:	edc3 7a00 	vstr	s15, [r3]
  *dyn_y = iir_direct2_filter(&grav_y_filter, acc_y);
 8014fe6:	ed97 0a04 	vldr	s0, [r7, #16]
 8014fea:	4810      	ldr	r0, [pc, #64]	; (801502c <dynamic_acceleration+0xb0>)
 8014fec:	f7ff ff5f 	bl	8014eae <iir_direct2_filter>
 8014ff0:	eef0 7a40 	vmov.f32	s15, s0
 8014ff4:	687b      	ldr	r3, [r7, #4]
 8014ff6:	edc3 7a00 	vstr	s15, [r3]
  *dyn_z = iir_direct2_filter(&grav_z_filter, acc_z);
 8014ffa:	ed97 0a03 	vldr	s0, [r7, #12]
 8014ffe:	480c      	ldr	r0, [pc, #48]	; (8015030 <dynamic_acceleration+0xb4>)
 8015000:	f7ff ff55 	bl	8014eae <iir_direct2_filter>
 8015004:	eef0 7a40 	vmov.f32	s15, s0
 8015008:	683b      	ldr	r3, [r7, #0]
 801500a:	edc3 7a00 	vstr	s15, [r3]
}
 801500e:	bf00      	nop
 8015010:	3718      	adds	r7, #24
 8015012:	46bd      	mov	sp, r7
 8015014:	bd80      	pop	{r7, pc}
 8015016:	bf00      	nop
 8015018:	20000040 	.word	0x20000040
 801501c:	08027db8 	.word	0x08027db8
 8015020:	08027da4 	.word	0x08027da4
 8015024:	08027d90 	.word	0x08027d90
 8015028:	2002685c 	.word	0x2002685c
 801502c:	20026874 	.word	0x20026874
 8015030:	2002688c 	.word	0x2002688c

08015034 <gravity_suppress_rotate>:
* @brief  Remove gravity from acceleration raw data
* @param  HAR_input_t Acceleration value (x/y/z)
* @retval HAR_input_t Acceleration value filtered (x/y/z)
*/
GRAV_input_t gravity_suppress_rotate(GRAV_input_t * data)
{
 8015034:	b580      	push	{r7, lr}
 8015036:	b09a      	sub	sp, #104	; 0x68
 8015038:	af00      	add	r7, sp, #0
 801503a:	6178      	str	r0, [r7, #20]
  float dyn_x, dyn_y, dyn_z;
  dynamic_acceleration(data->AccX, data->AccY, data->AccZ, &dyn_x, &dyn_y, &dyn_z);
 801503c:	697b      	ldr	r3, [r7, #20]
 801503e:	edd3 7a00 	vldr	s15, [r3]
 8015042:	697b      	ldr	r3, [r7, #20]
 8015044:	ed93 7a01 	vldr	s14, [r3, #4]
 8015048:	697b      	ldr	r3, [r7, #20]
 801504a:	edd3 6a02 	vldr	s13, [r3, #8]
 801504e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8015052:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8015056:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801505a:	4618      	mov	r0, r3
 801505c:	eeb0 1a66 	vmov.f32	s2, s13
 8015060:	eef0 0a47 	vmov.f32	s1, s14
 8015064:	eeb0 0a67 	vmov.f32	s0, s15
 8015068:	f7ff ff88 	bl	8014f7c <dynamic_acceleration>

  /* gravity versor */
  float grav_x = data->AccX - dyn_x;
 801506c:	697b      	ldr	r3, [r7, #20]
 801506e:	ed93 7a00 	vldr	s14, [r3]
 8015072:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8015076:	ee77 7a67 	vsub.f32	s15, s14, s15
 801507a:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
  float grav_y = data->AccY - dyn_y;
 801507e:	697b      	ldr	r3, [r7, #20]
 8015080:	ed93 7a01 	vldr	s14, [r3, #4]
 8015084:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8015088:	ee77 7a67 	vsub.f32	s15, s14, s15
 801508c:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
  float grav_z = data->AccZ - dyn_z;
 8015090:	697b      	ldr	r3, [r7, #20]
 8015092:	ed93 7a02 	vldr	s14, [r3, #8]
 8015096:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 801509a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801509e:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c

  float grav_m = grav_x * grav_x + grav_y * grav_y + grav_z * grav_z;
 80150a2:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80150a6:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80150aa:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80150ae:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80150b2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80150b6:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80150ba:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80150be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80150c2:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
  float sqrt_grav_m = sqrtf(grav_m);
 80150c6:	ed97 0a16 	vldr	s0, [r7, #88]	; 0x58
 80150ca:	f00f ff1b 	bl	8024f04 <sqrtf>
 80150ce:	ed87 0a15 	vstr	s0, [r7, #84]	; 0x54
  grav_m = 1.0f / sqrt_grav_m;
 80150d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80150d6:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80150da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80150de:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
  grav_x *= grav_m, grav_y *= grav_m, grav_z *= grav_m;
 80150e2:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 80150e6:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80150ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80150ee:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
 80150f2:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80150f6:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80150fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80150fe:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
 8015102:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8015106:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 801510a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801510e:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c

  float sqrt_for_sin = sqrtf(1.0f - grav_z*grav_z);
 8015112:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8015116:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801511a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801511e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015122:	eeb0 0a67 	vmov.f32	s0, s15
 8015126:	f00f feed 	bl	8024f04 <sqrtf>
 801512a:	ed87 0a14 	vstr	s0, [r7, #80]	; 0x50
  float sin_theta = sqrt_for_sin, cos_theta = -grav_z;
 801512e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015130:	64fb      	str	r3, [r7, #76]	; 0x4c
 8015132:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8015136:	eef1 7a67 	vneg.f32	s15, s15
 801513a:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

  /* rotation axis: v = [-grav_y, grav_x, 0] / sin */
  float v_x = -grav_y / sin_theta, v_y = grav_x / sin_theta;
 801513e:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8015142:	eef1 6a67 	vneg.f32	s13, s15
 8015146:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 801514a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801514e:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
 8015152:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 8015156:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 801515a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801515e:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
  float v_factor = (v_x * dyn_x + v_y * dyn_y) * (1 - cos_theta);
 8015162:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8015166:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 801516a:	ee27 7a27 	vmul.f32	s14, s14, s15
 801516e:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8015172:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8015176:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801517a:	ee37 7a27 	vadd.f32	s14, s14, s15
 801517e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8015182:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8015186:	ee76 7ae7 	vsub.f32	s15, s13, s15
 801518a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801518e:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
  /*
   * Rodrigues' formula for rotations (a is the dynamic acceleration dyn)
   * a' = a * cos + (v x a) * sin + v * (v . a) * (1 - cos)
   */
  GRAV_input_t out;
  out.AccX = dyn_x * cos_theta + v_y * dyn_z * sin_theta + v_x * v_factor;
 8015192:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8015196:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 801519a:	ee27 7a27 	vmul.f32	s14, s14, s15
 801519e:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80151a2:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80151a6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80151aa:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80151ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80151b2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80151b6:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 80151ba:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80151be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80151c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80151c6:	edc7 7a06 	vstr	s15, [r7, #24]
  out.AccY = dyn_y * cos_theta - v_x * dyn_z * sin_theta + v_y * v_factor;
 80151ca:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80151ce:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80151d2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80151d6:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80151da:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80151de:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80151e2:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80151e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80151ea:	ee37 7a67 	vsub.f32	s14, s14, s15
 80151ee:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 80151f2:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80151f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80151fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80151fe:	edc7 7a07 	vstr	s15, [r7, #28]
  out.AccZ = dyn_z * cos_theta + (v_x * dyn_y - v_y * dyn_x) * sin_theta;
 8015202:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8015206:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 801520a:	ee27 7a27 	vmul.f32	s14, s14, s15
 801520e:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8015212:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8015216:	ee66 6aa7 	vmul.f32	s13, s13, s15
 801521a:	ed97 6a0b 	vldr	s12, [r7, #44]	; 0x2c
 801521e:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8015222:	ee66 7a27 	vmul.f32	s15, s12, s15
 8015226:	ee76 6ae7 	vsub.f32	s13, s13, s15
 801522a:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 801522e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8015232:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015236:	edc7 7a08 	vstr	s15, [r7, #32]
  return out;
 801523a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801523e:	f107 0218 	add.w	r2, r7, #24
 8015242:	ca07      	ldmia	r2, {r0, r1, r2}
 8015244:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8015248:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801524a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801524c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801524e:	ee06 1a90 	vmov	s13, r1
 8015252:	ee07 2a10 	vmov	s14, r2
 8015256:	ee07 3a90 	vmov	s15, r3
}
 801525a:	eeb0 0a66 	vmov.f32	s0, s13
 801525e:	eef0 0a47 	vmov.f32	s1, s14
 8015262:	eeb0 1a67 	vmov.f32	s2, s15
 8015266:	3768      	adds	r7, #104	; 0x68
 8015268:	46bd      	mov	sp, r7
 801526a:	bd80      	pop	{r7, pc}

0801526c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 801526c:	b580      	push	{r7, lr}
 801526e:	af00      	add	r7, sp, #0
  // System initialization

  SysInit(FALSE);
 8015270:	2000      	movs	r0, #0
 8015272:	f7f9 ff59 	bl	800f128 <SysInit>

  tx_kernel_enter();
 8015276:	f7fb f945 	bl	8010504 <_tx_initialize_kernel_enter>

  while (1);
 801527a:	e7fe      	b.n	801527a <main+0xe>

0801527c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 801527c:	b580      	push	{r7, lr}
 801527e:	b082      	sub	sp, #8
 8015280:	af00      	add	r7, sp, #0
 8015282:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8015284:	687b      	ldr	r3, [r7, #4]
 8015286:	681b      	ldr	r3, [r3, #0]
 8015288:	4a04      	ldr	r2, [pc, #16]	; (801529c <HAL_TIM_PeriodElapsedCallback+0x20>)
 801528a:	4293      	cmp	r3, r2
 801528c:	d101      	bne.n	8015292 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 801528e:	f7ed fd07 	bl	8002ca0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8015292:	bf00      	nop
 8015294:	3708      	adds	r7, #8
 8015296:	46bd      	mov	sp, r7
 8015298:	bd80      	pop	{r7, pc}
 801529a:	bf00      	nop
 801529c:	40001000 	.word	0x40001000

080152a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80152a0:	b480      	push	{r7}
 80152a2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80152a4:	b672      	cpsid	i
}
 80152a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80152a8:	e7fe      	b.n	80152a8 <Error_Handler+0x8>

080152aa <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 80152aa:	b480      	push	{r7}
 80152ac:	b083      	sub	sp, #12
 80152ae:	af00      	add	r7, sp, #0
 80152b0:	6078      	str	r0, [r7, #4]
 80152b2:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 80152b4:	bf00      	nop
 80152b6:	370c      	adds	r7, #12
 80152b8:	46bd      	mov	sp, r7
 80152ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152be:	4770      	bx	lr

080152c0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80152c0:	b580      	push	{r7, lr}
 80152c2:	b08c      	sub	sp, #48	; 0x30
 80152c4:	af00      	add	r7, sp, #0
 80152c6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80152c8:	2300      	movs	r3, #0
 80152ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80152cc:	2300      	movs	r3, #0
 80152ce:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;

  /*TODO: fix a bug in the code generated by CubeMX: */
  /* even if the SYSTICK priority is set to 14 in CubeMX, here, with this */
  /* .ioc it is TickPriority == 16 */
  if (TickPriority > 15U)
 80152d0:	687b      	ldr	r3, [r7, #4]
 80152d2:	2b0f      	cmp	r3, #15
 80152d4:	d901      	bls.n	80152da <HAL_InitTick+0x1a>
  {
    TickPriority = TICK_INT_PRIORITY;
 80152d6:	230f      	movs	r3, #15
 80152d8:	607b      	str	r3, [r7, #4]
  }
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority ,0);
 80152da:	2200      	movs	r2, #0
 80152dc:	6879      	ldr	r1, [r7, #4]
 80152de:	2031      	movs	r0, #49	; 0x31
 80152e0:	f7ed fe42 	bl	8002f68 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_IRQn);
 80152e4:	2031      	movs	r0, #49	; 0x31
 80152e6:	f7ed fe69 	bl	8002fbc <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80152ea:	4b20      	ldr	r3, [pc, #128]	; (801536c <HAL_InitTick+0xac>)
 80152ec:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80152f0:	4a1e      	ldr	r2, [pc, #120]	; (801536c <HAL_InitTick+0xac>)
 80152f2:	f043 0310 	orr.w	r3, r3, #16
 80152f6:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80152fa:	4b1c      	ldr	r3, [pc, #112]	; (801536c <HAL_InitTick+0xac>)
 80152fc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8015300:	f003 0310 	and.w	r3, r3, #16
 8015304:	60bb      	str	r3, [r7, #8]
 8015306:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8015308:	f107 020c 	add.w	r2, r7, #12
 801530c:	f107 0310 	add.w	r3, r7, #16
 8015310:	4611      	mov	r1, r2
 8015312:	4618      	mov	r0, r3
 8015314:	f7f1 fd4e 	bl	8006db4 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8015318:	f7f1 fbf4 	bl	8006b04 <HAL_RCC_GetPCLK1Freq>
 801531c:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 801531e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015320:	4a13      	ldr	r2, [pc, #76]	; (8015370 <HAL_InitTick+0xb0>)
 8015322:	fba2 2303 	umull	r2, r3, r2, r3
 8015326:	0c9b      	lsrs	r3, r3, #18
 8015328:	3b01      	subs	r3, #1
 801532a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 801532c:	4b11      	ldr	r3, [pc, #68]	; (8015374 <HAL_InitTick+0xb4>)
 801532e:	4a12      	ldr	r2, [pc, #72]	; (8015378 <HAL_InitTick+0xb8>)
 8015330:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8015332:	4b10      	ldr	r3, [pc, #64]	; (8015374 <HAL_InitTick+0xb4>)
 8015334:	f240 32e7 	movw	r2, #999	; 0x3e7
 8015338:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 801533a:	4a0e      	ldr	r2, [pc, #56]	; (8015374 <HAL_InitTick+0xb4>)
 801533c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801533e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8015340:	4b0c      	ldr	r3, [pc, #48]	; (8015374 <HAL_InitTick+0xb4>)
 8015342:	2200      	movs	r2, #0
 8015344:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8015346:	4b0b      	ldr	r3, [pc, #44]	; (8015374 <HAL_InitTick+0xb4>)
 8015348:	2200      	movs	r2, #0
 801534a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 801534c:	4809      	ldr	r0, [pc, #36]	; (8015374 <HAL_InitTick+0xb4>)
 801534e:	f7f7 f9c3 	bl	800c6d8 <HAL_TIM_Base_Init>
 8015352:	4603      	mov	r3, r0
 8015354:	2b00      	cmp	r3, #0
 8015356:	d104      	bne.n	8015362 <HAL_InitTick+0xa2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8015358:	4806      	ldr	r0, [pc, #24]	; (8015374 <HAL_InitTick+0xb4>)
 801535a:	f7f7 fb2b 	bl	800c9b4 <HAL_TIM_Base_Start_IT>
 801535e:	4603      	mov	r3, r0
 8015360:	e000      	b.n	8015364 <HAL_InitTick+0xa4>
  }

  /* Return function status */
  return HAL_ERROR;
 8015362:	2301      	movs	r3, #1
}
 8015364:	4618      	mov	r0, r3
 8015366:	3730      	adds	r7, #48	; 0x30
 8015368:	46bd      	mov	sp, r7
 801536a:	bd80      	pop	{r7, pc}
 801536c:	46020c00 	.word	0x46020c00
 8015370:	431bde83 	.word	0x431bde83
 8015374:	200268a4 	.word	0x200268a4
 8015378:	40001000 	.word	0x40001000

0801537c <HAL_SuspendTick>:
  * @note   Disable the tick increment by disabling TIM6 update interrupt.
  * @param  None
  * @retval None
  */
void HAL_SuspendTick(void)
{
 801537c:	b480      	push	{r7}
 801537e:	af00      	add	r7, sp, #0
  /* Disable TIM6 update Interrupt */
  __HAL_TIM_DISABLE_IT(&htim6, TIM_IT_UPDATE);
 8015380:	4b06      	ldr	r3, [pc, #24]	; (801539c <HAL_SuspendTick+0x20>)
 8015382:	681b      	ldr	r3, [r3, #0]
 8015384:	68da      	ldr	r2, [r3, #12]
 8015386:	4b05      	ldr	r3, [pc, #20]	; (801539c <HAL_SuspendTick+0x20>)
 8015388:	681b      	ldr	r3, [r3, #0]
 801538a:	f022 0201 	bic.w	r2, r2, #1
 801538e:	60da      	str	r2, [r3, #12]
}
 8015390:	bf00      	nop
 8015392:	46bd      	mov	sp, r7
 8015394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015398:	4770      	bx	lr
 801539a:	bf00      	nop
 801539c:	200268a4 	.word	0x200268a4

080153a0 <HAL_ResumeTick>:
  * @note   Enable the tick increment by Enabling TIM6 update interrupt.
  * @param  None
  * @retval None
  */
void HAL_ResumeTick(void)
{
 80153a0:	b480      	push	{r7}
 80153a2:	af00      	add	r7, sp, #0
  /* Enable TIM6 Update interrupt */
  __HAL_TIM_ENABLE_IT(&htim6, TIM_IT_UPDATE);
 80153a4:	4b06      	ldr	r3, [pc, #24]	; (80153c0 <HAL_ResumeTick+0x20>)
 80153a6:	681b      	ldr	r3, [r3, #0]
 80153a8:	68da      	ldr	r2, [r3, #12]
 80153aa:	4b05      	ldr	r3, [pc, #20]	; (80153c0 <HAL_ResumeTick+0x20>)
 80153ac:	681b      	ldr	r3, [r3, #0]
 80153ae:	f042 0201 	orr.w	r2, r2, #1
 80153b2:	60da      	str	r2, [r3, #12]
}
 80153b4:	bf00      	nop
 80153b6:	46bd      	mov	sp, r7
 80153b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153bc:	4770      	bx	lr
 80153be:	bf00      	nop
 80153c0:	200268a4 	.word	0x200268a4

080153c4 <ExtiDefISR>:

EXTI_DECLARE_PIN2F_MAP()

/* USER CODE BEGIN EV */
void ExtiDefISR()
{
 80153c4:	b580      	push	{r7, lr}
 80153c6:	b082      	sub	sp, #8
 80153c8:	af00      	add	r7, sp, #0
  EXTIPin2CallbckMap xMap = EXTI_GET_P2F_MAP();
 80153ca:	4b21      	ldr	r3, [pc, #132]	; (8015450 <ExtiDefISR+0x8c>)
 80153cc:	603b      	str	r3, [r7, #0]
  for(int i = 0; xMap[i].pfCallback != NULL; i++)
 80153ce:	2300      	movs	r3, #0
 80153d0:	607b      	str	r3, [r7, #4]
 80153d2:	e030      	b.n	8015436 <ExtiDefISR+0x72>
  {
    if(__HAL_GPIO_EXTI_GET_IT(xMap[i].nPin))
 80153d4:	4b1f      	ldr	r3, [pc, #124]	; (8015454 <ExtiDefISR+0x90>)
 80153d6:	68db      	ldr	r3, [r3, #12]
 80153d8:	687a      	ldr	r2, [r7, #4]
 80153da:	00d2      	lsls	r2, r2, #3
 80153dc:	6839      	ldr	r1, [r7, #0]
 80153de:	440a      	add	r2, r1
 80153e0:	8812      	ldrh	r2, [r2, #0]
 80153e2:	4013      	ands	r3, r2
 80153e4:	2b00      	cmp	r3, #0
 80153e6:	d109      	bne.n	80153fc <ExtiDefISR+0x38>
 80153e8:	4b1a      	ldr	r3, [pc, #104]	; (8015454 <ExtiDefISR+0x90>)
 80153ea:	691b      	ldr	r3, [r3, #16]
 80153ec:	687a      	ldr	r2, [r7, #4]
 80153ee:	00d2      	lsls	r2, r2, #3
 80153f0:	6839      	ldr	r1, [r7, #0]
 80153f2:	440a      	add	r2, r1
 80153f4:	8812      	ldrh	r2, [r2, #0]
 80153f6:	4013      	ands	r3, r2
 80153f8:	2b00      	cmp	r3, #0
 80153fa:	d019      	beq.n	8015430 <ExtiDefISR+0x6c>
    {
      /* EXTI line interrupt detected */
      __HAL_GPIO_EXTI_CLEAR_IT(xMap[i].nPin);
 80153fc:	687b      	ldr	r3, [r7, #4]
 80153fe:	00db      	lsls	r3, r3, #3
 8015400:	683a      	ldr	r2, [r7, #0]
 8015402:	4413      	add	r3, r2
 8015404:	881a      	ldrh	r2, [r3, #0]
 8015406:	4b13      	ldr	r3, [pc, #76]	; (8015454 <ExtiDefISR+0x90>)
 8015408:	60da      	str	r2, [r3, #12]
 801540a:	687b      	ldr	r3, [r7, #4]
 801540c:	00db      	lsls	r3, r3, #3
 801540e:	683a      	ldr	r2, [r7, #0]
 8015410:	4413      	add	r3, r2
 8015412:	881a      	ldrh	r2, [r3, #0]
 8015414:	4b0f      	ldr	r3, [pc, #60]	; (8015454 <ExtiDefISR+0x90>)
 8015416:	611a      	str	r2, [r3, #16]
      xMap[i].pfCallback(xMap[i].nPin);
 8015418:	687b      	ldr	r3, [r7, #4]
 801541a:	00db      	lsls	r3, r3, #3
 801541c:	683a      	ldr	r2, [r7, #0]
 801541e:	4413      	add	r3, r2
 8015420:	685b      	ldr	r3, [r3, #4]
 8015422:	687a      	ldr	r2, [r7, #4]
 8015424:	00d2      	lsls	r2, r2, #3
 8015426:	6839      	ldr	r1, [r7, #0]
 8015428:	440a      	add	r2, r1
 801542a:	8812      	ldrh	r2, [r2, #0]
 801542c:	4610      	mov	r0, r2
 801542e:	4798      	blx	r3
  for(int i = 0; xMap[i].pfCallback != NULL; i++)
 8015430:	687b      	ldr	r3, [r7, #4]
 8015432:	3301      	adds	r3, #1
 8015434:	607b      	str	r3, [r7, #4]
 8015436:	687b      	ldr	r3, [r7, #4]
 8015438:	00db      	lsls	r3, r3, #3
 801543a:	683a      	ldr	r2, [r7, #0]
 801543c:	4413      	add	r3, r2
 801543e:	685b      	ldr	r3, [r3, #4]
 8015440:	2b00      	cmp	r3, #0
 8015442:	d1c7      	bne.n	80153d4 <ExtiDefISR+0x10>
    }
  }
}
 8015444:	bf00      	nop
 8015446:	bf00      	nop
 8015448:	3708      	adds	r7, #8
 801544a:	46bd      	mov	sp, r7
 801544c:	bd80      	pop	{r7, pc}
 801544e:	bf00      	nop
 8015450:	08027d70 	.word	0x08027d70
 8015454:	46022000 	.word	0x46022000

08015458 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8015458:	b480      	push	{r7}
 801545a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 801545c:	e7fe      	b.n	801545c <NMI_Handler+0x4>

0801545e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 801545e:	b480      	push	{r7}
 8015460:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8015462:	e7fe      	b.n	8015462 <HardFault_Handler+0x4>

08015464 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8015464:	b480      	push	{r7}
 8015466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8015468:	e7fe      	b.n	8015468 <MemManage_Handler+0x4>

0801546a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 801546a:	b480      	push	{r7}
 801546c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 801546e:	e7fe      	b.n	801546e <BusFault_Handler+0x4>

08015470 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8015470:	b480      	push	{r7}
 8015472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8015474:	e7fe      	b.n	8015474 <UsageFault_Handler+0x4>

08015476 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8015476:	b480      	push	{r7}
 8015478:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 801547a:	bf00      	nop
 801547c:	46bd      	mov	sp, r7
 801547e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015482:	4770      	bx	lr

08015484 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8015484:	b580      	push	{r7, lr}
 8015486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8015488:	4802      	ldr	r0, [pc, #8]	; (8015494 <TIM6_IRQHandler+0x10>)
 801548a:	f7f7 fbb5 	bl	800cbf8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 801548e:	bf00      	nop
 8015490:	bd80      	pop	{r7, pc}
 8015492:	bf00      	nop
 8015494:	200268a4 	.word	0x200268a4

08015498 <EXTI0_IRQHandler>:

/**
 * @brief This function handles EXTI Line0 interrupt.
 */
void EXTI0_IRQHandler(void)
{
 8015498:	b580      	push	{r7, lr}
 801549a:	af00      	add	r7, sp, #0
  ExtiDefISR();
 801549c:	f7ff ff92 	bl	80153c4 <ExtiDefISR>
}
 80154a0:	bf00      	nop
 80154a2:	bd80      	pop	{r7, pc}

080154a4 <EXTI8_IRQHandler>:

/**
 * @brief This function handles EXTI Line0 interrupt.
 */
void EXTI8_IRQHandler(void)
{
 80154a4:	b580      	push	{r7, lr}
 80154a6:	af00      	add	r7, sp, #0
  ExtiDefISR();
 80154a8:	f7ff ff8c 	bl	80153c4 <ExtiDefISR>
}
 80154ac:	bf00      	nop
 80154ae:	bd80      	pop	{r7, pc}

080154b0 <EXTI15_IRQHandler>:

/**
 * @brief This function handles EXTI Line0 interrupt.
 */
void EXTI15_IRQHandler(void)
{
 80154b0:	b580      	push	{r7, lr}
 80154b2:	af00      	add	r7, sp, #0
  ExtiDefISR();
 80154b4:	f7ff ff86 	bl	80153c4 <ExtiDefISR>
}
 80154b8:	bf00      	nop
 80154ba:	bd80      	pop	{r7, pc}

080154bc <GPDMA1_Channel0_IRQHandler>:

/**
 * @brief This function handles GPDMA1 Channel 0 global interrupt.
 */
void GPDMA1_Channel0_IRQHandler(void)
{
 80154bc:	b580      	push	{r7, lr}
 80154be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 0 */

  /* USER CODE END GPDMA1_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel0);
 80154c0:	4802      	ldr	r0, [pc, #8]	; (80154cc <GPDMA1_Channel0_IRQHandler+0x10>)
 80154c2:	f7ee f98a 	bl	80037da <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 1 */

  /* USER CODE END GPDMA1_Channel0_IRQn 1 */
}
 80154c6:	bf00      	nop
 80154c8:	bd80      	pop	{r7, pc}
 80154ca:	bf00      	nop
 80154cc:	20039634 	.word	0x20039634

080154d0 <GPDMA1_Channel1_IRQHandler>:

/**
 * @brief This function handles GPDMA1 Channel 1 global interrupt.
 */
void GPDMA1_Channel1_IRQHandler(void)
{
 80154d0:	b580      	push	{r7, lr}
 80154d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel1_IRQn 0 */

  /* USER CODE END GPDMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel1);
 80154d4:	4802      	ldr	r0, [pc, #8]	; (80154e0 <GPDMA1_Channel1_IRQHandler+0x10>)
 80154d6:	f7ee f980 	bl	80037da <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel1_IRQn 1 */

  /* USER CODE END GPDMA1_Channel1_IRQn 1 */
}
 80154da:	bf00      	nop
 80154dc:	bd80      	pop	{r7, pc}
 80154de:	bf00      	nop
 80154e0:	200395bc 	.word	0x200395bc

080154e4 <SPI2_IRQHandler>:


void SPI2_IRQHandler(void)
{
 80154e4:	b580      	push	{r7, lr}
 80154e6:	af00      	add	r7, sp, #0
  HAL_SPI_IRQHandler(&hspi2);
 80154e8:	4802      	ldr	r0, [pc, #8]	; (80154f4 <SPI2_IRQHandler+0x10>)
 80154ea:	f7f6 fbdf 	bl	800bcac <HAL_SPI_IRQHandler>
}
 80154ee:	bf00      	nop
 80154f0:	bd80      	pop	{r7, pc}
 80154f2:	bf00      	nop
 80154f4:	20039504 	.word	0x20039504

080154f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80154f8:	b580      	push	{r7, lr}
 80154fa:	b0d2      	sub	sp, #328	; 0x148
 80154fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80154fe:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8015502:	2260      	movs	r2, #96	; 0x60
 8015504:	2100      	movs	r1, #0
 8015506:	4618      	mov	r0, r3
 8015508:	f00e fb8f 	bl	8023c2a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 801550c:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8015510:	2200      	movs	r2, #0
 8015512:	601a      	str	r2, [r3, #0]
 8015514:	605a      	str	r2, [r3, #4]
 8015516:	609a      	str	r2, [r3, #8]
 8015518:	60da      	str	r2, [r3, #12]
 801551a:	611a      	str	r2, [r3, #16]
 801551c:	615a      	str	r2, [r3, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 801551e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8015522:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8015526:	4618      	mov	r0, r3
 8015528:	23c8      	movs	r3, #200	; 0xc8
 801552a:	461a      	mov	r2, r3
 801552c:	2100      	movs	r1, #0
 801552e:	f00e fb7c 	bl	8023c2a <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8015532:	4b9d      	ldr	r3, [pc, #628]	; (80157a8 <SystemClock_Config+0x2b0>)
 8015534:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8015538:	4a9b      	ldr	r2, [pc, #620]	; (80157a8 <SystemClock_Config+0x2b0>)
 801553a:	f043 0304 	orr.w	r3, r3, #4
 801553e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8015542:	4b99      	ldr	r3, [pc, #612]	; (80157a8 <SystemClock_Config+0x2b0>)
 8015544:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8015548:	f003 0204 	and.w	r2, r3, #4
 801554c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8015550:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8015554:	601a      	str	r2, [r3, #0]
 8015556:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 801555a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 801555e:	681b      	ldr	r3, [r3, #0]
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8015560:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 8015564:	f7ef fca2 	bl	8004eac <HAL_PWREx_ControlVoltageScaling>
 8015568:	4603      	mov	r3, r0
 801556a:	2b00      	cmp	r3, #0
 801556c:	d001      	beq.n	8015572 <SystemClock_Config+0x7a>
  {
    sys_error_handler();
 801556e:	f7f9 fbf3 	bl	800ed58 <sys_error_handler>
  }
  __HAL_RCC_PWR_CLK_DISABLE();
 8015572:	4b8d      	ldr	r3, [pc, #564]	; (80157a8 <SystemClock_Config+0x2b0>)
 8015574:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8015578:	4a8b      	ldr	r2, [pc, #556]	; (80157a8 <SystemClock_Config+0x2b0>)
 801557a:	f023 0304 	bic.w	r3, r3, #4
 801557e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_MSI
 8015582:	2333      	movs	r3, #51	; 0x33
 8015584:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
                              |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8015588:	f44f 7380 	mov.w	r3, #256	; 0x100
 801558c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8015590:	2310      	movs	r3, #16
 8015592:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8015596:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 801559a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 801559e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80155a2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80155a6:	2301      	movs	r3, #1
 80155a8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80155ac:	2310      	movs	r3, #16
 80155ae:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
 80155b2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80155b6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80155ba:	2302      	movs	r3, #2
 80155bc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80155c0:	2303      	movs	r3, #3
 80155c2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 80155c6:	2300      	movs	r3, #0
 80155c8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80155cc:	2301      	movs	r3, #1
 80155ce:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLN = 10;
 80155d2:	230a      	movs	r3, #10
 80155d4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  RCC_OscInitStruct.PLL.PLLP = 2;
 80155d8:	2302      	movs	r3, #2
 80155da:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80155de:	2302      	movs	r3, #2
 80155e0:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  RCC_OscInitStruct.PLL.PLLR = 1;
 80155e4:	2301      	movs	r3, #1
 80155e6:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 80155ea:	230c      	movs	r3, #12
 80155ec:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80155f0:	2300      	movs	r3, #0
 80155f2:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80155f6:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80155fa:	4618      	mov	r0, r3
 80155fc:	f7ef fd1c 	bl	8005038 <HAL_RCC_OscConfig>
 8015600:	4603      	mov	r3, r0
 8015602:	2b00      	cmp	r3, #0
 8015604:	d001      	beq.n	801560a <SystemClock_Config+0x112>
  {
    sys_error_handler();
 8015606:	f7f9 fba7 	bl	800ed58 <sys_error_handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 801560a:	231f      	movs	r3, #31
 801560c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8015610:	2303      	movs	r3, #3
 8015612:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8015616:	2300      	movs	r3, #0
 8015618:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 801561c:	2300      	movs	r3, #0
 801561e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8015622:	2300      	movs	r3, #0
 8015624:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8015628:	2300      	movs	r3, #0
 801562a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 801562e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8015632:	2104      	movs	r1, #4
 8015634:	4618      	mov	r0, r3
 8015636:	f7f0 fe03 	bl	8006240 <HAL_RCC_ClockConfig>
 801563a:	4603      	mov	r3, r0
 801563c:	2b00      	cmp	r3, #0
 801563e:	d001      	beq.n	8015644 <SystemClock_Config+0x14c>
  {
    sys_error_handler();
 8015640:	f7f9 fb8a 	bl	800ed58 <sys_error_handler>
  }

  __HAL_RCC_PWR_CLK_DISABLE();
 8015644:	4b58      	ldr	r3, [pc, #352]	; (80157a8 <SystemClock_Config+0x2b0>)
 8015646:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801564a:	4a57      	ldr	r2, [pc, #348]	; (80157a8 <SystemClock_Config+0x2b0>)
 801564c:	f023 0304 	bic.w	r3, r3, #4
 8015650:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC|RCC_PERIPHCLK_DAC1
 8015654:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8015658:	f5a3 71a0 	sub.w	r1, r3, #320	; 0x140
 801565c:	a350      	add	r3, pc, #320	; (adr r3, 80157a0 <SystemClock_Config+0x2a8>)
 801565e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015662:	e9c1 2300 	strd	r2, r3, [r1]
                                      |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C2
                                      |RCC_PERIPHCLK_I2C3|RCC_PERIPHCLK_MDF1
                                      |RCC_PERIPHCLK_SPI1|RCC_PERIPHCLK_SPI2
                                      |RCC_PERIPHCLK_SPI3;
  PeriphClkInit.Spi1ClockSelection = RCC_SPI1CLKSOURCE_SYSCLK;
 8015666:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 801566a:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 801566e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8015672:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  PeriphClkInit.Spi2ClockSelection = RCC_SPI2CLKSOURCE_PCLK1;
 8015676:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 801567a:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 801567e:	2200      	movs	r2, #0
 8015680:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
  PeriphClkInit.Spi3ClockSelection = RCC_SPI3CLKSOURCE_SYSCLK;
 8015684:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8015688:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 801568c:	2208      	movs	r2, #8
 801568e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  PeriphClkInit.Mdf1ClockSelection = RCC_MDF1CLKSOURCE_HCLK;
 8015692:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8015696:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 801569a:	2200      	movs	r2, #0
 801569c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80156a0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80156a4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80156a8:	2200      	movs	r2, #0
 80156aa:	669a      	str	r2, [r3, #104]	; 0x68
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80156ac:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80156b0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80156b4:	2200      	movs	r2, #0
 80156b6:	66da      	str	r2, [r3, #108]	; 0x6c
  PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK3;
 80156b8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80156bc:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80156c0:	2200      	movs	r2, #0
 80156c2:	671a      	str	r2, [r3, #112]	; 0x70
  PeriphClkInit.Dac1ClockSelection = RCC_DAC1CLKSOURCE_LSI;
 80156c4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80156c8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80156cc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80156d0:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_PLL2;
 80156d4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80156d8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80156dc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80156e0:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  PeriphClkInit.PLL2.PLL2Source = RCC_PLLSOURCE_HSE;
 80156e4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80156e8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80156ec:	2203      	movs	r2, #3
 80156ee:	609a      	str	r2, [r3, #8]
  PeriphClkInit.PLL2.PLL2M = 2;
 80156f0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80156f4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80156f8:	2202      	movs	r2, #2
 80156fa:	60da      	str	r2, [r3, #12]
  PeriphClkInit.PLL2.PLL2N = 48;
 80156fc:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8015700:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8015704:	2230      	movs	r2, #48	; 0x30
 8015706:	611a      	str	r2, [r3, #16]
  PeriphClkInit.PLL2.PLL2P = 2;
 8015708:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 801570c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8015710:	2202      	movs	r2, #2
 8015712:	615a      	str	r2, [r3, #20]
  PeriphClkInit.PLL2.PLL2Q = 7;
 8015714:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8015718:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 801571c:	2207      	movs	r2, #7
 801571e:	619a      	str	r2, [r3, #24]
  PeriphClkInit.PLL2.PLL2R = 25;
 8015720:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8015724:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8015728:	2219      	movs	r2, #25
 801572a:	61da      	str	r2, [r3, #28]
  PeriphClkInit.PLL2.PLL2RGE = RCC_PLLVCIRANGE_1;
 801572c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8015730:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8015734:	220c      	movs	r2, #12
 8015736:	621a      	str	r2, [r3, #32]
  PeriphClkInit.PLL2.PLL2FRACN = 0;
 8015738:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 801573c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8015740:	2200      	movs	r2, #0
 8015742:	625a      	str	r2, [r3, #36]	; 0x24
  PeriphClkInit.PLL2.PLL2ClockOut = RCC_PLL2_DIVR;
 8015744:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8015748:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 801574c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8015750:	629a      	str	r2, [r3, #40]	; 0x28

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8015752:	f107 0308 	add.w	r3, r7, #8
 8015756:	4618      	mov	r0, r3
 8015758:	f7f1 fbfa 	bl	8006f50 <HAL_RCCEx_PeriphCLKConfig>
 801575c:	4603      	mov	r3, r0
 801575e:	2b00      	cmp	r3, #0
 8015760:	d001      	beq.n	8015766 <SystemClock_Config+0x26e>
  {
    sys_error_handler();
 8015762:	f7f9 faf9 	bl	800ed58 <sys_error_handler>
  }


  __HAL_RCC_PWR_CLK_ENABLE();
 8015766:	4b10      	ldr	r3, [pc, #64]	; (80157a8 <SystemClock_Config+0x2b0>)
 8015768:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801576c:	4a0e      	ldr	r2, [pc, #56]	; (80157a8 <SystemClock_Config+0x2b0>)
 801576e:	f043 0304 	orr.w	r3, r3, #4
 8015772:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8015776:	4b0c      	ldr	r3, [pc, #48]	; (80157a8 <SystemClock_Config+0x2b0>)
 8015778:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801577c:	f003 0204 	and.w	r2, r3, #4
 8015780:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8015784:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8015788:	601a      	str	r2, [r3, #0]
 801578a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 801578e:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8015792:	681b      	ldr	r3, [r3, #0]
}
 8015794:	bf00      	nop
 8015796:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 801579a:	46bd      	mov	sp, r7
 801579c:	bd80      	pop	{r7, pc}
 801579e:	bf00      	nop
 80157a0:	138181c0 	.word	0x138181c0
 80157a4:	00000000 	.word	0x00000000
 80157a8:	46020c00 	.word	0x46020c00

080157ac <SystemClock_Backup>:
//
//  __HAL_RCC_PWR_CLK_ENABLE();
//}

void SystemClock_Backup(void)
{
 80157ac:	b580      	push	{r7, lr}
 80157ae:	af00      	add	r7, sp, #0
  HAL_RCC_GetOscConfig(&(system_clock.osc));
 80157b0:	4805      	ldr	r0, [pc, #20]	; (80157c8 <SystemClock_Backup+0x1c>)
 80157b2:	f7f1 f9e3 	bl	8006b7c <HAL_RCC_GetOscConfig>
  HAL_RCC_GetClockConfig(&(system_clock.clock), &(system_clock.latency));
 80157b6:	4905      	ldr	r1, [pc, #20]	; (80157cc <SystemClock_Backup+0x20>)
 80157b8:	4805      	ldr	r0, [pc, #20]	; (80157d0 <SystemClock_Backup+0x24>)
 80157ba:	f7f1 fafb 	bl	8006db4 <HAL_RCC_GetClockConfig>
  HAL_RCCEx_GetPeriphCLKConfig(&(system_clock.periph_clock));
 80157be:	4805      	ldr	r0, [pc, #20]	; (80157d4 <SystemClock_Backup+0x28>)
 80157c0:	f7f2 fd08 	bl	80081d4 <HAL_RCCEx_GetPeriphCLKConfig>
}
 80157c4:	bf00      	nop
 80157c6:	bd80      	pop	{r7, pc}
 80157c8:	20026974 	.word	0x20026974
 80157cc:	20026970 	.word	0x20026970
 80157d0:	200269d4 	.word	0x200269d4
 80157d4:	200269f0 	.word	0x200269f0

080157d8 <SystemClock_Restore>:
  * @brief  Restore original clock parameters
  * @retval Process result
  *         @arg SMPS_OK or SMPS_KO
  */
void SystemClock_Restore(void)
{
 80157d8:	b580      	push	{r7, lr}
 80157da:	af00      	add	r7, sp, #0
   * NOTE:
   *   Do not change or update the base-clock source (e.g. MSI and LSE)
   */

//  if(HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
  if(HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80157dc:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 80157e0:	f7ef fb64 	bl	8004eac <HAL_PWREx_ControlVoltageScaling>
 80157e4:	4603      	mov	r3, r0
 80157e6:	2b00      	cmp	r3, #0
 80157e8:	d001      	beq.n	80157ee <SystemClock_Restore+0x16>
  {
    sys_error_handler();
 80157ea:	f7f9 fab5 	bl	800ed58 <sys_error_handler>
  }

//  if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL) {
  if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80157ee:	4b0d      	ldr	r3, [pc, #52]	; (8015824 <SystemClock_Restore+0x4c>)
 80157f0:	69db      	ldr	r3, [r3, #28]
 80157f2:	f003 030c 	and.w	r3, r3, #12
 80157f6:	2b0c      	cmp	r3, #12
 80157f8:	d007      	beq.n	801580a <SystemClock_Restore+0x32>
  {
    if(HAL_RCC_OscConfig(&(system_clock.osc)) != HAL_OK)
 80157fa:	480b      	ldr	r0, [pc, #44]	; (8015828 <SystemClock_Restore+0x50>)
 80157fc:	f7ef fc1c 	bl	8005038 <HAL_RCC_OscConfig>
 8015800:	4603      	mov	r3, r0
 8015802:	2b00      	cmp	r3, #0
 8015804:	d001      	beq.n	801580a <SystemClock_Restore+0x32>
    {
      sys_error_handler();
 8015806:	f7f9 faa7 	bl	800ed58 <sys_error_handler>
    }
  }

  if(HAL_RCC_ClockConfig(&(system_clock.clock), system_clock.latency) != HAL_OK)
 801580a:	4b08      	ldr	r3, [pc, #32]	; (801582c <SystemClock_Restore+0x54>)
 801580c:	681b      	ldr	r3, [r3, #0]
 801580e:	4619      	mov	r1, r3
 8015810:	4807      	ldr	r0, [pc, #28]	; (8015830 <SystemClock_Restore+0x58>)
 8015812:	f7f0 fd15 	bl	8006240 <HAL_RCC_ClockConfig>
 8015816:	4603      	mov	r3, r0
 8015818:	2b00      	cmp	r3, #0
 801581a:	d001      	beq.n	8015820 <SystemClock_Restore+0x48>
  {
    sys_error_handler();
 801581c:	f7f9 fa9c 	bl	800ed58 <sys_error_handler>
  }
}
 8015820:	bf00      	nop
 8015822:	bd80      	pop	{r7, pc}
 8015824:	46020c00 	.word	0x46020c00
 8015828:	20026974 	.word	0x20026974
 801582c:	20026970 	.word	0x20026970
 8015830:	200269d4 	.word	0x200269d4

08015834 <SysPowerConfig>:

void SysPowerConfig()
{
 8015834:	b580      	push	{r7, lr}
 8015836:	b090      	sub	sp, #64	; 0x40
 8015838:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801583a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801583e:	2200      	movs	r2, #0
 8015840:	601a      	str	r2, [r3, #0]
 8015842:	605a      	str	r2, [r3, #4]
 8015844:	609a      	str	r2, [r3, #8]
 8015846:	60da      	str	r2, [r3, #12]
 8015848:	611a      	str	r2, [r3, #16]

  // Enable Power Clock
  __HAL_RCC_PWR_CLK_ENABLE();
 801584a:	4b77      	ldr	r3, [pc, #476]	; (8015a28 <SysPowerConfig+0x1f4>)
 801584c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8015850:	4a75      	ldr	r2, [pc, #468]	; (8015a28 <SysPowerConfig+0x1f4>)
 8015852:	f043 0304 	orr.w	r3, r3, #4
 8015856:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 801585a:	4b73      	ldr	r3, [pc, #460]	; (8015a28 <SysPowerConfig+0x1f4>)
 801585c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8015860:	f003 0304 	and.w	r3, r3, #4
 8015864:	62bb      	str	r3, [r7, #40]	; 0x28
 8015866:	6abb      	ldr	r3, [r7, #40]	; 0x28

  // Select MSI as system clock source after Wake Up from Stop mode
  __HAL_RCC_WAKEUPSTOP_CLK_CONFIG(RCC_STOP_WAKEUPCLOCK_MSI);
 8015868:	4b6f      	ldr	r3, [pc, #444]	; (8015a28 <SysPowerConfig+0x1f4>)
 801586a:	69db      	ldr	r3, [r3, #28]
 801586c:	4a6e      	ldr	r2, [pc, #440]	; (8015a28 <SysPowerConfig+0x1f4>)
 801586e:	f023 0310 	bic.w	r3, r3, #16
 8015872:	61d3      	str	r3, [r2, #28]


  // This function is called in the early step of the system initialization.
  // All the PINs used by the application are reconfigured later by the application tasks.
  HAL_PWREx_EnableIO2VM();
 8015874:	f7ef fbc0 	bl	8004ff8 <HAL_PWREx_EnableIO2VM>
  while(!(PWR->SVMCR & PWR_SVMCR_IO2VMEN));
 8015878:	bf00      	nop
 801587a:	4b6c      	ldr	r3, [pc, #432]	; (8015a2c <SysPowerConfig+0x1f8>)
 801587c:	691b      	ldr	r3, [r3, #16]
 801587e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8015882:	2b00      	cmp	r3, #0
 8015884:	d0f9      	beq.n	801587a <SysPowerConfig+0x46>
  HAL_PWREx_EnableVddIO2();
 8015886:	f7ef fba7 	bl	8004fd8 <HAL_PWREx_EnableVddIO2>
  while(!(PWR->SVMSR & PWR_SVMSR_VDDIO2RDY));
 801588a:	bf00      	nop
 801588c:	4b67      	ldr	r3, [pc, #412]	; (8015a2c <SysPowerConfig+0x1f8>)
 801588e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015890:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8015894:	2b00      	cmp	r3, #0
 8015896:	d0f9      	beq.n	801588c <SysPowerConfig+0x58>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8015898:	4b63      	ldr	r3, [pc, #396]	; (8015a28 <SysPowerConfig+0x1f4>)
 801589a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801589e:	4a62      	ldr	r2, [pc, #392]	; (8015a28 <SysPowerConfig+0x1f4>)
 80158a0:	f043 0301 	orr.w	r3, r3, #1
 80158a4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80158a8:	4b5f      	ldr	r3, [pc, #380]	; (8015a28 <SysPowerConfig+0x1f4>)
 80158aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80158ae:	f003 0301 	and.w	r3, r3, #1
 80158b2:	627b      	str	r3, [r7, #36]	; 0x24
 80158b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80158b6:	4b5c      	ldr	r3, [pc, #368]	; (8015a28 <SysPowerConfig+0x1f4>)
 80158b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80158bc:	4a5a      	ldr	r2, [pc, #360]	; (8015a28 <SysPowerConfig+0x1f4>)
 80158be:	f043 0302 	orr.w	r3, r3, #2
 80158c2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80158c6:	4b58      	ldr	r3, [pc, #352]	; (8015a28 <SysPowerConfig+0x1f4>)
 80158c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80158cc:	f003 0302 	and.w	r3, r3, #2
 80158d0:	623b      	str	r3, [r7, #32]
 80158d2:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80158d4:	4b54      	ldr	r3, [pc, #336]	; (8015a28 <SysPowerConfig+0x1f4>)
 80158d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80158da:	4a53      	ldr	r2, [pc, #332]	; (8015a28 <SysPowerConfig+0x1f4>)
 80158dc:	f043 0304 	orr.w	r3, r3, #4
 80158e0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80158e4:	4b50      	ldr	r3, [pc, #320]	; (8015a28 <SysPowerConfig+0x1f4>)
 80158e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80158ea:	f003 0304 	and.w	r3, r3, #4
 80158ee:	61fb      	str	r3, [r7, #28]
 80158f0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80158f2:	4b4d      	ldr	r3, [pc, #308]	; (8015a28 <SysPowerConfig+0x1f4>)
 80158f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80158f8:	4a4b      	ldr	r2, [pc, #300]	; (8015a28 <SysPowerConfig+0x1f4>)
 80158fa:	f043 0308 	orr.w	r3, r3, #8
 80158fe:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8015902:	4b49      	ldr	r3, [pc, #292]	; (8015a28 <SysPowerConfig+0x1f4>)
 8015904:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8015908:	f003 0308 	and.w	r3, r3, #8
 801590c:	61bb      	str	r3, [r7, #24]
 801590e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8015910:	4b45      	ldr	r3, [pc, #276]	; (8015a28 <SysPowerConfig+0x1f4>)
 8015912:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8015916:	4a44      	ldr	r2, [pc, #272]	; (8015a28 <SysPowerConfig+0x1f4>)
 8015918:	f043 0310 	orr.w	r3, r3, #16
 801591c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8015920:	4b41      	ldr	r3, [pc, #260]	; (8015a28 <SysPowerConfig+0x1f4>)
 8015922:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8015926:	f003 0310 	and.w	r3, r3, #16
 801592a:	617b      	str	r3, [r7, #20]
 801592c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 801592e:	4b3e      	ldr	r3, [pc, #248]	; (8015a28 <SysPowerConfig+0x1f4>)
 8015930:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8015934:	4a3c      	ldr	r2, [pc, #240]	; (8015a28 <SysPowerConfig+0x1f4>)
 8015936:	f043 0320 	orr.w	r3, r3, #32
 801593a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 801593e:	4b3a      	ldr	r3, [pc, #232]	; (8015a28 <SysPowerConfig+0x1f4>)
 8015940:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8015944:	f003 0320 	and.w	r3, r3, #32
 8015948:	613b      	str	r3, [r7, #16]
 801594a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 801594c:	4b36      	ldr	r3, [pc, #216]	; (8015a28 <SysPowerConfig+0x1f4>)
 801594e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8015952:	4a35      	ldr	r2, [pc, #212]	; (8015a28 <SysPowerConfig+0x1f4>)
 8015954:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015958:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 801595c:	4b32      	ldr	r3, [pc, #200]	; (8015a28 <SysPowerConfig+0x1f4>)
 801595e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8015962:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015966:	60fb      	str	r3, [r7, #12]
 8015968:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 801596a:	4b2f      	ldr	r3, [pc, #188]	; (8015a28 <SysPowerConfig+0x1f4>)
 801596c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8015970:	4a2d      	ldr	r2, [pc, #180]	; (8015a28 <SysPowerConfig+0x1f4>)
 8015972:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015976:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 801597a:	4b2b      	ldr	r3, [pc, #172]	; (8015a28 <SysPowerConfig+0x1f4>)
 801597c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8015980:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015984:	60bb      	str	r3, [r7, #8]
 8015986:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8015988:	4b27      	ldr	r3, [pc, #156]	; (8015a28 <SysPowerConfig+0x1f4>)
 801598a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801598e:	4a26      	ldr	r2, [pc, #152]	; (8015a28 <SysPowerConfig+0x1f4>)
 8015990:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8015994:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8015998:	4b23      	ldr	r3, [pc, #140]	; (8015a28 <SysPowerConfig+0x1f4>)
 801599a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801599e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80159a2:	607b      	str	r3, [r7, #4]
 80159a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, CS_DHCX_Pin | CS_DLPC_Pin, GPIO_PIN_SET);
 80159a6:	2201      	movs	r2, #1
 80159a8:	f248 0140 	movw	r1, #32832	; 0x8040
 80159ac:	4820      	ldr	r0, [pc, #128]	; (8015a30 <SysPowerConfig+0x1fc>)
 80159ae:	f7ef f8a5 	bl	8004afc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_ICLX_GPIO_Port, CS_ICLX_Pin, GPIO_PIN_SET);
 80159b2:	2201      	movs	r2, #1
 80159b4:	2180      	movs	r1, #128	; 0x80
 80159b6:	481f      	ldr	r0, [pc, #124]	; (8015a34 <SysPowerConfig+0x200>)
 80159b8:	f7ef f8a0 	bl	8004afc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_DWB_GPIO_Port, CS_DWB_Pin, GPIO_PIN_SET);
 80159bc:	2201      	movs	r2, #1
 80159be:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80159c2:	481d      	ldr	r0, [pc, #116]	; (8015a38 <SysPowerConfig+0x204>)
 80159c4:	f7ef f89a 	bl	8004afc <HAL_GPIO_WritePin>

  GPIO_InitStruct.Pin = CS_DHCX_Pin|CS_DLPC_Pin;
 80159c8:	f248 0340 	movw	r3, #32832	; 0x8040
 80159cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80159ce:	2301      	movs	r3, #1
 80159d0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80159d2:	2300      	movs	r3, #0
 80159d4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80159d6:	2300      	movs	r3, #0
 80159d8:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80159da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80159de:	4619      	mov	r1, r3
 80159e0:	4813      	ldr	r0, [pc, #76]	; (8015a30 <SysPowerConfig+0x1fc>)
 80159e2:	f7ee fc5f 	bl	80042a4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = CS_ICLX_Pin;
 80159e6:	2380      	movs	r3, #128	; 0x80
 80159e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80159ea:	2301      	movs	r3, #1
 80159ec:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80159ee:	2300      	movs	r3, #0
 80159f0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80159f2:	2300      	movs	r3, #0
 80159f4:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(CS_ICLX_GPIO_Port, &GPIO_InitStruct);
 80159f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80159fa:	4619      	mov	r1, r3
 80159fc:	480d      	ldr	r0, [pc, #52]	; (8015a34 <SysPowerConfig+0x200>)
 80159fe:	f7ee fc51 	bl	80042a4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = CS_DWB_Pin;
 8015a02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8015a06:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8015a08:	2301      	movs	r3, #1
 8015a0a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015a0c:	2300      	movs	r3, #0
 8015a0e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8015a10:	2300      	movs	r3, #0
 8015a12:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(CS_DWB_GPIO_Port, &GPIO_InitStruct);
 8015a14:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8015a18:	4619      	mov	r1, r3
 8015a1a:	4807      	ldr	r0, [pc, #28]	; (8015a38 <SysPowerConfig+0x204>)
 8015a1c:	f7ee fc42 	bl	80042a4 <HAL_GPIO_Init>
//  __HAL_RCC_GPIOH_CLK_DISABLE();
//  __HAL_RCC_GPIOI_CLK_DISABLE();
//
//  HAL_PWREx_DisableVddIO2();
//  HAL_PWREx_DisableIO2VM();
}
 8015a20:	bf00      	nop
 8015a22:	3740      	adds	r7, #64	; 0x40
 8015a24:	46bd      	mov	sp, r7
 8015a26:	bd80      	pop	{r7, pc}
 8015a28:	46020c00 	.word	0x46020c00
 8015a2c:	46020800 	.word	0x46020800
 8015a30:	42021c00 	.word	0x42021c00
 8015a34:	42022000 	.word	0x42022000
 8015a38:	42021400 	.word	0x42021400

08015a3c <HAL_MspInit>:

/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8015a3c:	b580      	push	{r7, lr}
 8015a3e:	b082      	sub	sp, #8
 8015a40:	af00      	add	r7, sp, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8015a42:	4b28      	ldr	r3, [pc, #160]	; (8015ae4 <HAL_MspInit+0xa8>)
 8015a44:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8015a48:	4a26      	ldr	r2, [pc, #152]	; (8015ae4 <HAL_MspInit+0xa8>)
 8015a4a:	f043 0302 	orr.w	r3, r3, #2
 8015a4e:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 8015a52:	4b24      	ldr	r3, [pc, #144]	; (8015ae4 <HAL_MspInit+0xa8>)
 8015a54:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8015a58:	f003 0302 	and.w	r3, r3, #2
 8015a5c:	607b      	str	r3, [r7, #4]
 8015a5e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8015a60:	4b20      	ldr	r3, [pc, #128]	; (8015ae4 <HAL_MspInit+0xa8>)
 8015a62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8015a66:	4a1f      	ldr	r2, [pc, #124]	; (8015ae4 <HAL_MspInit+0xa8>)
 8015a68:	f043 0304 	orr.w	r3, r3, #4
 8015a6c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8015a70:	4b1c      	ldr	r3, [pc, #112]	; (8015ae4 <HAL_MspInit+0xa8>)
 8015a72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8015a76:	f003 0304 	and.w	r3, r3, #4
 8015a7a:	603b      	str	r3, [r7, #0]
 8015a7c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8015a7e:	2003      	movs	r0, #3
 8015a80:	f7ed fa52 	bl	8002f28 <HAL_NVIC_SetPriorityGrouping>

  // Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  HAL_PWREx_DisableUCPDDeadBattery();
 8015a84:	f7ef fac8 	bl	8005018 <HAL_PWREx_DisableUCPDDeadBattery>

  // System interrupt init
  // MemoryManagement_IRQn interrupt configuration
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8015a88:	2200      	movs	r2, #0
 8015a8a:	2100      	movs	r1, #0
 8015a8c:	f06f 000b 	mvn.w	r0, #11
 8015a90:	f7ed fa6a 	bl	8002f68 <HAL_NVIC_SetPriority>
  // BusFault_IRQn interrupt configuration
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8015a94:	2200      	movs	r2, #0
 8015a96:	2100      	movs	r1, #0
 8015a98:	f06f 000a 	mvn.w	r0, #10
 8015a9c:	f7ed fa64 	bl	8002f68 <HAL_NVIC_SetPriority>
  // UsageFault_IRQn interrupt configuration
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8015aa0:	2200      	movs	r2, #0
 8015aa2:	2100      	movs	r1, #0
 8015aa4:	f06f 0009 	mvn.w	r0, #9
 8015aa8:	f7ed fa5e 	bl	8002f68 <HAL_NVIC_SetPriority>
  // SVCall_IRQn interrupt configuration
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8015aac:	2200      	movs	r2, #0
 8015aae:	2100      	movs	r1, #0
 8015ab0:	f06f 0004 	mvn.w	r0, #4
 8015ab4:	f7ed fa58 	bl	8002f68 <HAL_NVIC_SetPriority>
  // DebugMonitor_IRQn interrupt configuration
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8015ab8:	2200      	movs	r2, #0
 8015aba:	2100      	movs	r1, #0
 8015abc:	f06f 0003 	mvn.w	r0, #3
 8015ac0:	f7ed fa52 	bl	8002f68 <HAL_NVIC_SetPriority>
  // PendSV_IRQn interrupt configuration
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8015ac4:	2200      	movs	r2, #0
 8015ac6:	210f      	movs	r1, #15
 8015ac8:	f06f 0001 	mvn.w	r0, #1
 8015acc:	f7ed fa4c 	bl	8002f68 <HAL_NVIC_SetPriority>
  // SysTick_IRQn interrupt configuration
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8015ad0:	2200      	movs	r2, #0
 8015ad2:	210f      	movs	r1, #15
 8015ad4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015ad8:	f7ed fa46 	bl	8002f68 <HAL_NVIC_SetPriority>
}
 8015adc:	bf00      	nop
 8015ade:	3708      	adds	r7, #8
 8015ae0:	46bd      	mov	sp, r7
 8015ae2:	bd80      	pop	{r7, pc}
 8015ae4:	46020c00 	.word	0x46020c00

08015ae8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8015ae8:	b480      	push	{r7}
 8015aea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8015aec:	4b18      	ldr	r3, [pc, #96]	; (8015b50 <SystemInit+0x68>)
 8015aee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8015af2:	4a17      	ldr	r2, [pc, #92]	; (8015b50 <SystemInit+0x68>)
 8015af4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8015af8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8015afc:	4b15      	ldr	r3, [pc, #84]	; (8015b54 <SystemInit+0x6c>)
 8015afe:	2201      	movs	r2, #1
 8015b00:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8015b02:	4b14      	ldr	r3, [pc, #80]	; (8015b54 <SystemInit+0x6c>)
 8015b04:	2200      	movs	r2, #0
 8015b06:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8015b08:	4b12      	ldr	r3, [pc, #72]	; (8015b54 <SystemInit+0x6c>)
 8015b0a:	2200      	movs	r2, #0
 8015b0c:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8015b0e:	4b11      	ldr	r3, [pc, #68]	; (8015b54 <SystemInit+0x6c>)
 8015b10:	2200      	movs	r2, #0
 8015b12:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8015b14:	4b0f      	ldr	r3, [pc, #60]	; (8015b54 <SystemInit+0x6c>)
 8015b16:	681b      	ldr	r3, [r3, #0]
 8015b18:	4a0e      	ldr	r2, [pc, #56]	; (8015b54 <SystemInit+0x6c>)
 8015b1a:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8015b1e:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8015b22:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8015b24:	4b0b      	ldr	r3, [pc, #44]	; (8015b54 <SystemInit+0x6c>)
 8015b26:	2200      	movs	r2, #0
 8015b28:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8015b2a:	4b0a      	ldr	r3, [pc, #40]	; (8015b54 <SystemInit+0x6c>)
 8015b2c:	681b      	ldr	r3, [r3, #0]
 8015b2e:	4a09      	ldr	r2, [pc, #36]	; (8015b54 <SystemInit+0x6c>)
 8015b30:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8015b34:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8015b36:	4b07      	ldr	r3, [pc, #28]	; (8015b54 <SystemInit+0x6c>)
 8015b38:	2200      	movs	r2, #0
 8015b3a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8015b3c:	4b04      	ldr	r3, [pc, #16]	; (8015b50 <SystemInit+0x68>)
 8015b3e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8015b42:	609a      	str	r2, [r3, #8]
  #endif
}
 8015b44:	bf00      	nop
 8015b46:	46bd      	mov	sp, r7
 8015b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b4c:	4770      	bx	lr
 8015b4e:	bf00      	nop
 8015b50:	e000ed00 	.word	0xe000ed00
 8015b54:	46020c00 	.word	0x46020c00

08015b58 <PushButtonDrvAlloc>:

/* IDriver virtual functions definition */
/****************************************/

IDriver *PushButtonDrvAlloc(void)
{
 8015b58:	b580      	push	{r7, lr}
 8015b5a:	b082      	sub	sp, #8
 8015b5c:	af00      	add	r7, sp, #0
  IDriver *p_new_obj = (IDriver*)SysAlloc(sizeof(PushButtonDrv_t));
 8015b5e:	200c      	movs	r0, #12
 8015b60:	f7f9 fb96 	bl	800f290 <SysAlloc>
 8015b64:	6078      	str	r0, [r7, #4]

  if (p_new_obj == NULL) {
 8015b66:	687b      	ldr	r3, [r7, #4]
 8015b68:	2b00      	cmp	r3, #0
 8015b6a:	d103      	bne.n	8015b74 <PushButtonDrvAlloc+0x1c>
    SYS_SET_LOW_LEVEL_ERROR_CODE(SYS_OUT_OF_MEMORY_ERROR_CODE);
 8015b6c:	4b05      	ldr	r3, [pc, #20]	; (8015b84 <PushButtonDrvAlloc+0x2c>)
 8015b6e:	2203      	movs	r2, #3
 8015b70:	801a      	strh	r2, [r3, #0]
 8015b72:	e002      	b.n	8015b7a <PushButtonDrvAlloc+0x22>
    SYS_DEBUGF(SYS_DBG_LEVEL_WARNING, ("PushButtonDrv - alloc failed.\r\n"));
  }
  else {
    p_new_obj->vptr = &sTheClass.vptr; //&sPushButtonDrv_vtbl;
 8015b74:	687b      	ldr	r3, [r7, #4]
 8015b76:	4a04      	ldr	r2, [pc, #16]	; (8015b88 <PushButtonDrvAlloc+0x30>)
 8015b78:	601a      	str	r2, [r3, #0]
  }

  return p_new_obj;
 8015b7a:	687b      	ldr	r3, [r7, #4]
}
 8015b7c:	4618      	mov	r0, r3
 8015b7e:	3708      	adds	r7, #8
 8015b80:	46bd      	mov	sp, r7
 8015b82:	bd80      	pop	{r7, pc}
 8015b84:	20000700 	.word	0x20000700
 8015b88:	20000048 	.word	0x20000048

08015b8c <PushButtonDrv_vtblInit>:

sys_error_code_t PushButtonDrv_vtblInit(IDriver *_this, void *p_params)
{
 8015b8c:	b580      	push	{r7, lr}
 8015b8e:	b084      	sub	sp, #16
 8015b90:	af00      	add	r7, sp, #0
 8015b92:	6078      	str	r0, [r7, #4]
 8015b94:	6039      	str	r1, [r7, #0]
  assert_param(_this != NULL);
 8015b96:	687b      	ldr	r3, [r7, #4]
 8015b98:	2b00      	cmp	r3, #0
 8015b9a:	d103      	bne.n	8015ba4 <PushButtonDrv_vtblInit+0x18>
 8015b9c:	2144      	movs	r1, #68	; 0x44
 8015b9e:	480d      	ldr	r0, [pc, #52]	; (8015bd4 <PushButtonDrv_vtblInit+0x48>)
 8015ba0:	f7ff fb83 	bl	80152aa <assert_failed>
  assert_param(p_params != NULL);
 8015ba4:	683b      	ldr	r3, [r7, #0]
 8015ba6:	2b00      	cmp	r3, #0
 8015ba8:	d103      	bne.n	8015bb2 <PushButtonDrv_vtblInit+0x26>
 8015baa:	2145      	movs	r1, #69	; 0x45
 8015bac:	4809      	ldr	r0, [pc, #36]	; (8015bd4 <PushButtonDrv_vtblInit+0x48>)
 8015bae:	f7ff fb7c 	bl	80152aa <assert_failed>
  sys_error_code_t res = SYS_NO_ERROR_CODE;
 8015bb2:	2300      	movs	r3, #0
 8015bb4:	81fb      	strh	r3, [r7, #14]
  PushButtonDrv_t *p_obj = (PushButtonDrv_t*)_this;
 8015bb6:	687b      	ldr	r3, [r7, #4]
 8015bb8:	60bb      	str	r3, [r7, #8]
  p_obj->mx_handle.p_mx_gpio_cfg = ((PushButtonDrvParams_t*)p_params)->p_mx_gpio_cfg;
 8015bba:	683b      	ldr	r3, [r7, #0]
 8015bbc:	681a      	ldr	r2, [r3, #0]
 8015bbe:	68bb      	ldr	r3, [r7, #8]
 8015bc0:	605a      	str	r2, [r3, #4]

  p_obj->mx_handle.p_mx_gpio_cfg->p_mx_init_f();
 8015bc2:	68bb      	ldr	r3, [r7, #8]
 8015bc4:	685b      	ldr	r3, [r3, #4]
 8015bc6:	681b      	ldr	r3, [r3, #0]
 8015bc8:	4798      	blx	r3

  return res;
 8015bca:	89fb      	ldrh	r3, [r7, #14]
}
 8015bcc:	4618      	mov	r0, r3
 8015bce:	3710      	adds	r7, #16
 8015bd0:	46bd      	mov	sp, r7
 8015bd2:	bd80      	pop	{r7, pc}
 8015bd4:	08026a0c 	.word	0x08026a0c

08015bd8 <PushButtonDrv_vtblStart>:

sys_error_code_t PushButtonDrv_vtblStart(IDriver *_this)
{
 8015bd8:	b580      	push	{r7, lr}
 8015bda:	b084      	sub	sp, #16
 8015bdc:	af00      	add	r7, sp, #0
 8015bde:	6078      	str	r0, [r7, #4]
  assert_param(_this != NULL);
 8015be0:	687b      	ldr	r3, [r7, #4]
 8015be2:	2b00      	cmp	r3, #0
 8015be4:	d103      	bne.n	8015bee <PushButtonDrv_vtblStart+0x16>
 8015be6:	2151      	movs	r1, #81	; 0x51
 8015be8:	4809      	ldr	r0, [pc, #36]	; (8015c10 <PushButtonDrv_vtblStart+0x38>)
 8015bea:	f7ff fb5e 	bl	80152aa <assert_failed>
  sys_error_code_t res = SYS_NO_ERROR_CODE;
 8015bee:	2300      	movs	r3, #0
 8015bf0:	81fb      	strh	r3, [r7, #14]
  PushButtonDrv_t *p_obj = (PushButtonDrv_t*)_this;
 8015bf2:	687b      	ldr	r3, [r7, #4]
 8015bf4:	60bb      	str	r3, [r7, #8]

  HAL_NVIC_EnableIRQ(p_obj->mx_handle.p_mx_gpio_cfg->irq_n);
 8015bf6:	68bb      	ldr	r3, [r7, #8]
 8015bf8:	685b      	ldr	r3, [r3, #4]
 8015bfa:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8015bfe:	4618      	mov	r0, r3
 8015c00:	f7ed f9dc 	bl	8002fbc <HAL_NVIC_EnableIRQ>

  return res;
 8015c04:	89fb      	ldrh	r3, [r7, #14]
}
 8015c06:	4618      	mov	r0, r3
 8015c08:	3710      	adds	r7, #16
 8015c0a:	46bd      	mov	sp, r7
 8015c0c:	bd80      	pop	{r7, pc}
 8015c0e:	bf00      	nop
 8015c10:	08026a0c 	.word	0x08026a0c

08015c14 <PushButtonDrv_vtblStop>:

sys_error_code_t PushButtonDrv_vtblStop(IDriver *_this)
{
 8015c14:	b580      	push	{r7, lr}
 8015c16:	b084      	sub	sp, #16
 8015c18:	af00      	add	r7, sp, #0
 8015c1a:	6078      	str	r0, [r7, #4]
  assert_param(_this != NULL);
 8015c1c:	687b      	ldr	r3, [r7, #4]
 8015c1e:	2b00      	cmp	r3, #0
 8015c20:	d103      	bne.n	8015c2a <PushButtonDrv_vtblStop+0x16>
 8015c22:	215c      	movs	r1, #92	; 0x5c
 8015c24:	4809      	ldr	r0, [pc, #36]	; (8015c4c <PushButtonDrv_vtblStop+0x38>)
 8015c26:	f7ff fb40 	bl	80152aa <assert_failed>
  sys_error_code_t res = SYS_NO_ERROR_CODE;
 8015c2a:	2300      	movs	r3, #0
 8015c2c:	81fb      	strh	r3, [r7, #14]
  PushButtonDrv_t *p_obj = (PushButtonDrv_t*)_this;
 8015c2e:	687b      	ldr	r3, [r7, #4]
 8015c30:	60bb      	str	r3, [r7, #8]

  HAL_NVIC_DisableIRQ(p_obj->mx_handle.p_mx_gpio_cfg->irq_n);
 8015c32:	68bb      	ldr	r3, [r7, #8]
 8015c34:	685b      	ldr	r3, [r3, #4]
 8015c36:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8015c3a:	4618      	mov	r0, r3
 8015c3c:	f7ed f9d6 	bl	8002fec <HAL_NVIC_DisableIRQ>

  return res;
 8015c40:	89fb      	ldrh	r3, [r7, #14]
}
 8015c42:	4618      	mov	r0, r3
 8015c44:	3710      	adds	r7, #16
 8015c46:	46bd      	mov	sp, r7
 8015c48:	bd80      	pop	{r7, pc}
 8015c4a:	bf00      	nop
 8015c4c:	08026a0c 	.word	0x08026a0c

08015c50 <PushButtonDrv_vtblDoEnterPowerMode>:

sys_error_code_t PushButtonDrv_vtblDoEnterPowerMode(IDriver *_this, const EPowerMode active_power_mode, const EPowerMode new_power_mode)
{
 8015c50:	b580      	push	{r7, lr}
 8015c52:	b084      	sub	sp, #16
 8015c54:	af00      	add	r7, sp, #0
 8015c56:	6078      	str	r0, [r7, #4]
 8015c58:	460b      	mov	r3, r1
 8015c5a:	70fb      	strb	r3, [r7, #3]
 8015c5c:	4613      	mov	r3, r2
 8015c5e:	70bb      	strb	r3, [r7, #2]
  assert_param(_this != NULL);
 8015c60:	687b      	ldr	r3, [r7, #4]
 8015c62:	2b00      	cmp	r3, #0
 8015c64:	d103      	bne.n	8015c6e <PushButtonDrv_vtblDoEnterPowerMode+0x1e>
 8015c66:	2167      	movs	r1, #103	; 0x67
 8015c68:	4804      	ldr	r0, [pc, #16]	; (8015c7c <PushButtonDrv_vtblDoEnterPowerMode+0x2c>)
 8015c6a:	f7ff fb1e 	bl	80152aa <assert_failed>
  sys_error_code_t res = SYS_NO_ERROR_CODE;
 8015c6e:	2300      	movs	r3, #0
 8015c70:	81fb      	strh	r3, [r7, #14]
/*  PushButtonDrv_t *p_obj = (PushButtonDrv_t*)_this; */

  return res;
 8015c72:	89fb      	ldrh	r3, [r7, #14]
}
 8015c74:	4618      	mov	r0, r3
 8015c76:	3710      	adds	r7, #16
 8015c78:	46bd      	mov	sp, r7
 8015c7a:	bd80      	pop	{r7, pc}
 8015c7c:	08026a0c 	.word	0x08026a0c

08015c80 <PushButtonDrv_vtblReset>:

sys_error_code_t PushButtonDrv_vtblReset(IDriver *_this, void *p_params)
{
 8015c80:	b580      	push	{r7, lr}
 8015c82:	b084      	sub	sp, #16
 8015c84:	af00      	add	r7, sp, #0
 8015c86:	6078      	str	r0, [r7, #4]
 8015c88:	6039      	str	r1, [r7, #0]
  assert_param(_this != NULL);
 8015c8a:	687b      	ldr	r3, [r7, #4]
 8015c8c:	2b00      	cmp	r3, #0
 8015c8e:	d103      	bne.n	8015c98 <PushButtonDrv_vtblReset+0x18>
 8015c90:	2170      	movs	r1, #112	; 0x70
 8015c92:	4805      	ldr	r0, [pc, #20]	; (8015ca8 <PushButtonDrv_vtblReset+0x28>)
 8015c94:	f7ff fb09 	bl	80152aa <assert_failed>
  sys_error_code_t res = SYS_NO_ERROR_CODE;
 8015c98:	2300      	movs	r3, #0
 8015c9a:	81fb      	strh	r3, [r7, #14]
/*  PushButtonDrv_t *p_obj = (PushButtonDrv_t*)_this; */

  return res;
 8015c9c:	89fb      	ldrh	r3, [r7, #14]
}
 8015c9e:	4618      	mov	r0, r3
 8015ca0:	3710      	adds	r7, #16
 8015ca2:	46bd      	mov	sp, r7
 8015ca4:	bd80      	pop	{r7, pc}
 8015ca6:	bf00      	nop
 8015ca8:	08026a0c 	.word	0x08026a0c

08015cac <ai_logging_create_shape_1d>:
  shape->n_shape = 0;
  shape->shapes[AI_LOGGING_SHAPES_WIDTH] = 1;
  shape->shapes[AI_LOGGING_SHAPES_HEIGHT] = 1;
}
void ai_logging_create_shape_1d(ai_logging_shape *shape, uint16_t dim_x)
{
 8015cac:	b480      	push	{r7}
 8015cae:	b083      	sub	sp, #12
 8015cb0:	af00      	add	r7, sp, #0
 8015cb2:	6078      	str	r0, [r7, #4]
 8015cb4:	460b      	mov	r3, r1
 8015cb6:	807b      	strh	r3, [r7, #2]
  shape->n_shape = 1;
 8015cb8:	687b      	ldr	r3, [r7, #4]
 8015cba:	2201      	movs	r2, #1
 8015cbc:	801a      	strh	r2, [r3, #0]
  shape->shapes[AI_LOGGING_SHAPES_WIDTH] = dim_x;
 8015cbe:	687b      	ldr	r3, [r7, #4]
 8015cc0:	887a      	ldrh	r2, [r7, #2]
 8015cc2:	805a      	strh	r2, [r3, #2]
  shape->shapes[AI_LOGGING_SHAPES_HEIGHT] = 1;
 8015cc4:	687b      	ldr	r3, [r7, #4]
 8015cc6:	2201      	movs	r2, #1
 8015cc8:	809a      	strh	r2, [r3, #4]

}
 8015cca:	bf00      	nop
 8015ccc:	370c      	adds	r7, #12
 8015cce:	46bd      	mov	sp, r7
 8015cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cd4:	4770      	bx	lr

08015cd6 <ai_logging_create_shape_2d>:
void ai_logging_create_shape_2d(ai_logging_shape *shape, uint16_t dim_x, uint16_t dim_y)
{
 8015cd6:	b480      	push	{r7}
 8015cd8:	b083      	sub	sp, #12
 8015cda:	af00      	add	r7, sp, #0
 8015cdc:	6078      	str	r0, [r7, #4]
 8015cde:	460b      	mov	r3, r1
 8015ce0:	807b      	strh	r3, [r7, #2]
 8015ce2:	4613      	mov	r3, r2
 8015ce4:	803b      	strh	r3, [r7, #0]
  shape->n_shape = 2;
 8015ce6:	687b      	ldr	r3, [r7, #4]
 8015ce8:	2202      	movs	r2, #2
 8015cea:	801a      	strh	r2, [r3, #0]
  shape->shapes[AI_LOGGING_SHAPES_WIDTH] = dim_x;
 8015cec:	687b      	ldr	r3, [r7, #4]
 8015cee:	887a      	ldrh	r2, [r7, #2]
 8015cf0:	805a      	strh	r2, [r3, #2]
  shape->shapes[AI_LOGGING_SHAPES_HEIGHT] = dim_y;
 8015cf2:	687b      	ldr	r3, [r7, #4]
 8015cf4:	883a      	ldrh	r2, [r7, #0]
 8015cf6:	809a      	strh	r2, [r3, #4]
}
 8015cf8:	bf00      	nop
 8015cfa:	370c      	adds	r7, #12
 8015cfc:	46bd      	mov	sp, r7
 8015cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d02:	4770      	bx	lr

08015d04 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8015d04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8015d3c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8015d08:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8015d0a:	e003      	b.n	8015d14 <LoopCopyDataInit>

08015d0c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8015d0c:	4b0c      	ldr	r3, [pc, #48]	; (8015d40 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8015d0e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8015d10:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8015d12:	3104      	adds	r1, #4

08015d14 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8015d14:	480b      	ldr	r0, [pc, #44]	; (8015d44 <LoopForever+0xa>)
	ldr	r3, =_edata
 8015d16:	4b0c      	ldr	r3, [pc, #48]	; (8015d48 <LoopForever+0xe>)
	adds	r2, r0, r1
 8015d18:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8015d1a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8015d1c:	d3f6      	bcc.n	8015d0c <CopyDataInit>
	ldr	r2, =_sbss
 8015d1e:	4a0b      	ldr	r2, [pc, #44]	; (8015d4c <LoopForever+0x12>)
	b	LoopFillZerobss
 8015d20:	e002      	b.n	8015d28 <LoopFillZerobss>

08015d22 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8015d22:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8015d24:	f842 3b04 	str.w	r3, [r2], #4

08015d28 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8015d28:	4b09      	ldr	r3, [pc, #36]	; (8015d50 <LoopForever+0x16>)
	cmp	r2, r3
 8015d2a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8015d2c:	d3f9      	bcc.n	8015d22 <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8015d2e:	f7ff fedb 	bl	8015ae8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8015d32:	f00d ff35 	bl	8023ba0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8015d36:	f7ff fa99 	bl	801526c <main>

08015d3a <LoopForever>:

LoopForever:
    b LoopForever
 8015d3a:	e7fe      	b.n	8015d3a <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8015d3c:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8015d40:	08035fcc 	.word	0x08035fcc
	ldr	r0, =_sdata
 8015d44:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8015d48:	200006bc 	.word	0x200006bc
	ldr	r2, =_sbss
 8015d4c:	200006c0 	.word	0x200006c0
	ldr	r3, = _ebss
 8015d50:	2003ad14 	.word	0x2003ad14

08015d54 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8015d54:	e7fe      	b.n	8015d54 <ADC1_IRQHandler>

08015d56 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8015d56:	b480      	push	{r7}
 8015d58:	af00      	add	r7, sp, #0
	return 1;
 8015d5a:	2301      	movs	r3, #1
}
 8015d5c:	4618      	mov	r0, r3
 8015d5e:	46bd      	mov	sp, r7
 8015d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d64:	4770      	bx	lr

08015d66 <_kill>:

int _kill(int pid, int sig)
{
 8015d66:	b580      	push	{r7, lr}
 8015d68:	b082      	sub	sp, #8
 8015d6a:	af00      	add	r7, sp, #0
 8015d6c:	6078      	str	r0, [r7, #4]
 8015d6e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8015d70:	f00d fe90 	bl	8023a94 <__errno>
 8015d74:	4603      	mov	r3, r0
 8015d76:	2216      	movs	r2, #22
 8015d78:	601a      	str	r2, [r3, #0]
	return -1;
 8015d7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8015d7e:	4618      	mov	r0, r3
 8015d80:	3708      	adds	r7, #8
 8015d82:	46bd      	mov	sp, r7
 8015d84:	bd80      	pop	{r7, pc}

08015d86 <_exit>:

void _exit (int status)
{
 8015d86:	b580      	push	{r7, lr}
 8015d88:	b082      	sub	sp, #8
 8015d8a:	af00      	add	r7, sp, #0
 8015d8c:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8015d8e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8015d92:	6878      	ldr	r0, [r7, #4]
 8015d94:	f7ff ffe7 	bl	8015d66 <_kill>
	while (1) {}		/* Make sure we hang here */
 8015d98:	e7fe      	b.n	8015d98 <_exit+0x12>

08015d9a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8015d9a:	b580      	push	{r7, lr}
 8015d9c:	b086      	sub	sp, #24
 8015d9e:	af00      	add	r7, sp, #0
 8015da0:	60f8      	str	r0, [r7, #12]
 8015da2:	60b9      	str	r1, [r7, #8]
 8015da4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8015da6:	2300      	movs	r3, #0
 8015da8:	617b      	str	r3, [r7, #20]
 8015daa:	e00a      	b.n	8015dc2 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8015dac:	e000      	b.n	8015db0 <_read+0x16>
 8015dae:	bf00      	nop
 8015db0:	4601      	mov	r1, r0
 8015db2:	68bb      	ldr	r3, [r7, #8]
 8015db4:	1c5a      	adds	r2, r3, #1
 8015db6:	60ba      	str	r2, [r7, #8]
 8015db8:	b2ca      	uxtb	r2, r1
 8015dba:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8015dbc:	697b      	ldr	r3, [r7, #20]
 8015dbe:	3301      	adds	r3, #1
 8015dc0:	617b      	str	r3, [r7, #20]
 8015dc2:	697a      	ldr	r2, [r7, #20]
 8015dc4:	687b      	ldr	r3, [r7, #4]
 8015dc6:	429a      	cmp	r2, r3
 8015dc8:	dbf0      	blt.n	8015dac <_read+0x12>
	}

return len;
 8015dca:	687b      	ldr	r3, [r7, #4]
}
 8015dcc:	4618      	mov	r0, r3
 8015dce:	3718      	adds	r7, #24
 8015dd0:	46bd      	mov	sp, r7
 8015dd2:	bd80      	pop	{r7, pc}

08015dd4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8015dd4:	b580      	push	{r7, lr}
 8015dd6:	b086      	sub	sp, #24
 8015dd8:	af00      	add	r7, sp, #0
 8015dda:	60f8      	str	r0, [r7, #12]
 8015ddc:	60b9      	str	r1, [r7, #8]
 8015dde:	607a      	str	r2, [r7, #4]
  int DataIdx;

  /* Check for the command to flush all handles */
  if (file == -1)
 8015de0:	68fb      	ldr	r3, [r7, #12]
 8015de2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015de6:	d101      	bne.n	8015dec <_write+0x18>
  {
    return 0;
 8015de8:	2300      	movs	r3, #0
 8015dea:	e023      	b.n	8015e34 <_write+0x60>
  }

  /* Only write to stdout (1) and stderr (2), otherwise return failure */
  if (file != 1 && file != 2){
 8015dec:	68fb      	ldr	r3, [r7, #12]
 8015dee:	2b01      	cmp	r3, #1
 8015df0:	d005      	beq.n	8015dfe <_write+0x2a>
 8015df2:	68fb      	ldr	r3, [r7, #12]
 8015df4:	2b02      	cmp	r3, #2
 8015df6:	d002      	beq.n	8015dfe <_write+0x2a>
    return -1;
 8015df8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015dfc:	e01a      	b.n	8015e34 <_write+0x60>
  }
#if defined(DEGUG) || defined(SYS_DEBUG)
  if (file == 2)
 8015dfe:	68fb      	ldr	r3, [r7, #12]
 8015e00:	2b02      	cmp	r3, #2
 8015e02:	d105      	bne.n	8015e10 <_write+0x3c>
  {
    /* remap the stderr on the console */
    return __io_write_in_console(ptr, len);
 8015e04:	6879      	ldr	r1, [r7, #4]
 8015e06:	68b8      	ldr	r0, [r7, #8]
 8015e08:	e000      	b.n	8015e0c <_write+0x38>
 8015e0a:	bf00      	nop
 8015e0c:	4603      	mov	r3, r0
 8015e0e:	e011      	b.n	8015e34 <_write+0x60>
  }
  else
  {
    for (DataIdx = 0; DataIdx < len; DataIdx++)
 8015e10:	2300      	movs	r3, #0
 8015e12:	617b      	str	r3, [r7, #20]
 8015e14:	e009      	b.n	8015e2a <_write+0x56>
    {
      __io_putchar( *ptr++ );
 8015e16:	68bb      	ldr	r3, [r7, #8]
 8015e18:	1c5a      	adds	r2, r3, #1
 8015e1a:	60ba      	str	r2, [r7, #8]
 8015e1c:	781b      	ldrb	r3, [r3, #0]
 8015e1e:	4618      	mov	r0, r3
 8015e20:	f7f8 ff82 	bl	800ed28 <__io_putchar>
    for (DataIdx = 0; DataIdx < len; DataIdx++)
 8015e24:	697b      	ldr	r3, [r7, #20]
 8015e26:	3301      	adds	r3, #1
 8015e28:	617b      	str	r3, [r7, #20]
 8015e2a:	697a      	ldr	r2, [r7, #20]
 8015e2c:	687b      	ldr	r3, [r7, #4]
 8015e2e:	429a      	cmp	r2, r3
 8015e30:	dbf1      	blt.n	8015e16 <_write+0x42>
    /* remap the stdout on the console */
    return __io_write_in_console(ptr, len);
  }
#endif

  return len;
 8015e32:	687b      	ldr	r3, [r7, #4]
}
 8015e34:	4618      	mov	r0, r3
 8015e36:	3718      	adds	r7, #24
 8015e38:	46bd      	mov	sp, r7
 8015e3a:	bd80      	pop	{r7, pc}

08015e3c <_close>:

int _close(int file)
{
 8015e3c:	b480      	push	{r7}
 8015e3e:	b083      	sub	sp, #12
 8015e40:	af00      	add	r7, sp, #0
 8015e42:	6078      	str	r0, [r7, #4]
	return -1;
 8015e44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8015e48:	4618      	mov	r0, r3
 8015e4a:	370c      	adds	r7, #12
 8015e4c:	46bd      	mov	sp, r7
 8015e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e52:	4770      	bx	lr

08015e54 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8015e54:	b480      	push	{r7}
 8015e56:	b083      	sub	sp, #12
 8015e58:	af00      	add	r7, sp, #0
 8015e5a:	6078      	str	r0, [r7, #4]
 8015e5c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8015e5e:	683b      	ldr	r3, [r7, #0]
 8015e60:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8015e64:	605a      	str	r2, [r3, #4]
	return 0;
 8015e66:	2300      	movs	r3, #0
}
 8015e68:	4618      	mov	r0, r3
 8015e6a:	370c      	adds	r7, #12
 8015e6c:	46bd      	mov	sp, r7
 8015e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e72:	4770      	bx	lr

08015e74 <_isatty>:

int _isatty(int file)
{
 8015e74:	b480      	push	{r7}
 8015e76:	b083      	sub	sp, #12
 8015e78:	af00      	add	r7, sp, #0
 8015e7a:	6078      	str	r0, [r7, #4]
	return 1;
 8015e7c:	2301      	movs	r3, #1
}
 8015e7e:	4618      	mov	r0, r3
 8015e80:	370c      	adds	r7, #12
 8015e82:	46bd      	mov	sp, r7
 8015e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e88:	4770      	bx	lr

08015e8a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8015e8a:	b480      	push	{r7}
 8015e8c:	b085      	sub	sp, #20
 8015e8e:	af00      	add	r7, sp, #0
 8015e90:	60f8      	str	r0, [r7, #12]
 8015e92:	60b9      	str	r1, [r7, #8]
 8015e94:	607a      	str	r2, [r7, #4]
	return 0;
 8015e96:	2300      	movs	r3, #0
}
 8015e98:	4618      	mov	r0, r3
 8015e9a:	3714      	adds	r7, #20
 8015e9c:	46bd      	mov	sp, r7
 8015e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ea2:	4770      	bx	lr

08015ea4 <aiBootstrap>:
  ai_handle handle;
  ai_network_report report;
} net_exec_ctx[AI_MNETWORK_NUMBER] = {0};

static int aiBootstrap(struct ai_network_exec_ctx *ctx, const char *nn_name)
{
 8015ea4:	b580      	push	{r7, lr}
 8015ea6:	b084      	sub	sp, #16
 8015ea8:	af00      	add	r7, sp, #0
 8015eaa:	6078      	str	r0, [r7, #4]
 8015eac:	6039      	str	r1, [r7, #0]
  ai_error err;

  /* Creating the instance of the  network ------------------------- */
  LC_PRINT("Creating the network \"%s\"..\r\n", nn_name);
 8015eae:	4b48      	ldr	r3, [pc, #288]	; (8015fd0 <aiBootstrap+0x12c>)
 8015eb0:	681b      	ldr	r3, [r3, #0]
 8015eb2:	683a      	ldr	r2, [r7, #0]
 8015eb4:	4947      	ldr	r1, [pc, #284]	; (8015fd4 <aiBootstrap+0x130>)
 8015eb6:	4618      	mov	r0, r3
 8015eb8:	f00d fdf2 	bl	8023aa0 <fiprintf>

  err = ai_mnetwork_create(nn_name, &ctx->handle, NULL);
 8015ebc:	687b      	ldr	r3, [r7, #4]
 8015ebe:	2200      	movs	r2, #0
 8015ec0:	4619      	mov	r1, r3
 8015ec2:	6838      	ldr	r0, [r7, #0]
 8015ec4:	f000 ff58 	bl	8016d78 <ai_mnetwork_create>
 8015ec8:	4603      	mov	r3, r0
 8015eca:	60fb      	str	r3, [r7, #12]
  if (err.type) {
 8015ecc:	7b3b      	ldrb	r3, [r7, #12]
 8015ece:	2b00      	cmp	r3, #0
 8015ed0:	d006      	beq.n	8015ee0 <aiBootstrap+0x3c>
    aiLogErr(err, "ai_mnetwork_create");
 8015ed2:	4941      	ldr	r1, [pc, #260]	; (8015fd8 <aiBootstrap+0x134>)
 8015ed4:	68f8      	ldr	r0, [r7, #12]
 8015ed6:	f000 fabf 	bl	8016458 <aiLogErr>
    return -1;
 8015eda:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015ede:	e072      	b.n	8015fc6 <aiBootstrap+0x122>
  }

  /* Initialize the instance --------------------------------------- */
  LC_PRINT("Initializing the network\r\n");
 8015ee0:	4b3b      	ldr	r3, [pc, #236]	; (8015fd0 <aiBootstrap+0x12c>)
 8015ee2:	681b      	ldr	r3, [r3, #0]
 8015ee4:	221a      	movs	r2, #26
 8015ee6:	2101      	movs	r1, #1
 8015ee8:	483c      	ldr	r0, [pc, #240]	; (8015fdc <aiBootstrap+0x138>)
 8015eea:	f00d fe4b 	bl	8023b84 <fwrite>

  if (!ai_mnetwork_get_report(ctx->handle, &ctx->report)) {
 8015eee:	687b      	ldr	r3, [r7, #4]
 8015ef0:	681a      	ldr	r2, [r3, #0]
 8015ef2:	687b      	ldr	r3, [r7, #4]
 8015ef4:	3304      	adds	r3, #4
 8015ef6:	4619      	mov	r1, r3
 8015ef8:	4610      	mov	r0, r2
 8015efa:	f000 ffcb 	bl	8016e94 <ai_mnetwork_get_report>
 8015efe:	4603      	mov	r3, r0
 8015f00:	f083 0301 	eor.w	r3, r3, #1
 8015f04:	b2db      	uxtb	r3, r3
 8015f06:	2b00      	cmp	r3, #0
 8015f08:	d015      	beq.n	8015f36 <aiBootstrap+0x92>
    err = ai_mnetwork_get_error(ctx->handle);
 8015f0a:	687b      	ldr	r3, [r7, #4]
 8015f0c:	681b      	ldr	r3, [r3, #0]
 8015f0e:	4618      	mov	r0, r3
 8015f10:	f000 ffdb 	bl	8016eca <ai_mnetwork_get_error>
 8015f14:	4603      	mov	r3, r0
 8015f16:	60fb      	str	r3, [r7, #12]
    aiLogErr(err, "ai_mnetwork_get_info");
 8015f18:	4931      	ldr	r1, [pc, #196]	; (8015fe0 <aiBootstrap+0x13c>)
 8015f1a:	68f8      	ldr	r0, [r7, #12]
 8015f1c:	f000 fa9c 	bl	8016458 <aiLogErr>
    ai_mnetwork_destroy(ctx->handle);
 8015f20:	687b      	ldr	r3, [r7, #4]
 8015f22:	681b      	ldr	r3, [r3, #0]
 8015f24:	4618      	mov	r0, r3
 8015f26:	f000 ff93 	bl	8016e50 <ai_mnetwork_destroy>
    ctx->handle = AI_HANDLE_NULL;
 8015f2a:	687b      	ldr	r3, [r7, #4]
 8015f2c:	2200      	movs	r2, #0
 8015f2e:	601a      	str	r2, [r3, #0]
    return -2;
 8015f30:	f06f 0301 	mvn.w	r3, #1
 8015f34:	e047      	b.n	8015fc6 <aiBootstrap+0x122>
  }

  if (!ai_mnetwork_init(ctx->handle)) {
 8015f36:	687b      	ldr	r3, [r7, #4]
 8015f38:	681b      	ldr	r3, [r3, #0]
 8015f3a:	4618      	mov	r0, r3
 8015f3c:	f000 ffe5 	bl	8016f0a <ai_mnetwork_init>
 8015f40:	4603      	mov	r3, r0
 8015f42:	f083 0301 	eor.w	r3, r3, #1
 8015f46:	b2db      	uxtb	r3, r3
 8015f48:	2b00      	cmp	r3, #0
 8015f4a:	d015      	beq.n	8015f78 <aiBootstrap+0xd4>
    err = ai_mnetwork_get_error(ctx->handle);
 8015f4c:	687b      	ldr	r3, [r7, #4]
 8015f4e:	681b      	ldr	r3, [r3, #0]
 8015f50:	4618      	mov	r0, r3
 8015f52:	f000 ffba 	bl	8016eca <ai_mnetwork_get_error>
 8015f56:	4603      	mov	r3, r0
 8015f58:	60fb      	str	r3, [r7, #12]
    aiLogErr(err, "ai_mnetwork_init");
 8015f5a:	4922      	ldr	r1, [pc, #136]	; (8015fe4 <aiBootstrap+0x140>)
 8015f5c:	68f8      	ldr	r0, [r7, #12]
 8015f5e:	f000 fa7b 	bl	8016458 <aiLogErr>
    ai_mnetwork_destroy(ctx->handle);
 8015f62:	687b      	ldr	r3, [r7, #4]
 8015f64:	681b      	ldr	r3, [r3, #0]
 8015f66:	4618      	mov	r0, r3
 8015f68:	f000 ff72 	bl	8016e50 <ai_mnetwork_destroy>
    ctx->handle = AI_HANDLE_NULL;
 8015f6c:	687b      	ldr	r3, [r7, #4]
 8015f6e:	2200      	movs	r2, #0
 8015f70:	601a      	str	r2, [r3, #0]
    return -4;
 8015f72:	f06f 0303 	mvn.w	r3, #3
 8015f76:	e026      	b.n	8015fc6 <aiBootstrap+0x122>
  }

  /* Display the network info -------------------------------------- */
  if (ai_mnetwork_get_report(ctx->handle, &ctx->report)) {
 8015f78:	687b      	ldr	r3, [r7, #4]
 8015f7a:	681a      	ldr	r2, [r3, #0]
 8015f7c:	687b      	ldr	r3, [r7, #4]
 8015f7e:	3304      	adds	r3, #4
 8015f80:	4619      	mov	r1, r3
 8015f82:	4610      	mov	r0, r2
 8015f84:	f000 ff86 	bl	8016e94 <ai_mnetwork_get_report>
 8015f88:	4603      	mov	r3, r0
 8015f8a:	2b00      	cmp	r3, #0
 8015f8c:	d006      	beq.n	8015f9c <aiBootstrap+0xf8>
    aiPrintNetworkInfo(&ctx->report);
 8015f8e:	687b      	ldr	r3, [r7, #4]
 8015f90:	3304      	adds	r3, #4
 8015f92:	4618      	mov	r0, r3
 8015f94:	f000 fd20 	bl	80169d8 <aiPrintNetworkInfo>
    ai_mnetwork_destroy(ctx->handle);
    ctx->handle = AI_HANDLE_NULL;
    return -2;
  }

  return 0;
 8015f98:	2300      	movs	r3, #0
 8015f9a:	e014      	b.n	8015fc6 <aiBootstrap+0x122>
    err = ai_mnetwork_get_error(ctx->handle);
 8015f9c:	687b      	ldr	r3, [r7, #4]
 8015f9e:	681b      	ldr	r3, [r3, #0]
 8015fa0:	4618      	mov	r0, r3
 8015fa2:	f000 ff92 	bl	8016eca <ai_mnetwork_get_error>
 8015fa6:	4603      	mov	r3, r0
 8015fa8:	60fb      	str	r3, [r7, #12]
    aiLogErr(err, "ai_mnetwork_get_info");
 8015faa:	490d      	ldr	r1, [pc, #52]	; (8015fe0 <aiBootstrap+0x13c>)
 8015fac:	68f8      	ldr	r0, [r7, #12]
 8015fae:	f000 fa53 	bl	8016458 <aiLogErr>
    ai_mnetwork_destroy(ctx->handle);
 8015fb2:	687b      	ldr	r3, [r7, #4]
 8015fb4:	681b      	ldr	r3, [r3, #0]
 8015fb6:	4618      	mov	r0, r3
 8015fb8:	f000 ff4a 	bl	8016e50 <ai_mnetwork_destroy>
    ctx->handle = AI_HANDLE_NULL;
 8015fbc:	687b      	ldr	r3, [r7, #4]
 8015fbe:	2200      	movs	r2, #0
 8015fc0:	601a      	str	r2, [r3, #0]
    return -2;
 8015fc2:	f06f 0301 	mvn.w	r3, #1
}
 8015fc6:	4618      	mov	r0, r3
 8015fc8:	3710      	adds	r7, #16
 8015fca:	46bd      	mov	sp, r7
 8015fcc:	bd80      	pop	{r7, pc}
 8015fce:	bf00      	nop
 8015fd0:	20026ab8 	.word	0x20026ab8
 8015fd4:	08026a90 	.word	0x08026a90
 8015fd8:	08026ab0 	.word	0x08026ab0
 8015fdc:	08026ac4 	.word	0x08026ac4
 8015fe0:	08026ae0 	.word	0x08026ae0
 8015fe4:	08026af8 	.word	0x08026af8

08015fe8 <aiInit>:

int aiInit(const char* nn_name)
{
 8015fe8:	b580      	push	{r7, lr}
 8015fea:	b084      	sub	sp, #16
 8015fec:	af00      	add	r7, sp, #0
 8015fee:	6078      	str	r0, [r7, #4]
  int res = -1;
 8015ff0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015ff4:	60fb      	str	r3, [r7, #12]
  plcPrintFile = stdout;
 8015ff6:	4b1b      	ldr	r3, [pc, #108]	; (8016064 <aiInit+0x7c>)
 8015ff8:	681b      	ldr	r3, [r3, #0]
 8015ffa:	689b      	ldr	r3, [r3, #8]
 8015ffc:	4a1a      	ldr	r2, [pc, #104]	; (8016068 <aiInit+0x80>)
 8015ffe:	6013      	str	r3, [r2, #0]

  aiPlatformVersion();
 8016000:	f000 fa10 	bl	8016424 <aiPlatformVersion>

  /* Reset the contexts -------------------------------------------- */

  if (strncmp(nn_name,AI_HAR_NETWORK_MODEL_NAME, 10)==0)  {
 8016004:	220a      	movs	r2, #10
 8016006:	4919      	ldr	r1, [pc, #100]	; (801606c <aiInit+0x84>)
 8016008:	6878      	ldr	r0, [r7, #4]
 801600a:	f00e fa0f 	bl	802442c <strncmp>
 801600e:	4603      	mov	r3, r0
 8016010:	2b00      	cmp	r3, #0
 8016012:	d108      	bne.n	8016026 <aiInit+0x3e>
	 net_exec_ctx[AI_HAR_NETWORK_CTX_IDX].handle = AI_HANDLE_NULL;
 8016014:	4b16      	ldr	r3, [pc, #88]	; (8016070 <aiInit+0x88>)
 8016016:	2200      	movs	r2, #0
 8016018:	601a      	str	r2, [r3, #0]
	 res = aiBootstrap(&net_exec_ctx[AI_HAR_NETWORK_CTX_IDX],nn_name) ;
 801601a:	6879      	ldr	r1, [r7, #4]
 801601c:	4814      	ldr	r0, [pc, #80]	; (8016070 <aiInit+0x88>)
 801601e:	f7ff ff41 	bl	8015ea4 <aiBootstrap>
 8016022:	60f8      	str	r0, [r7, #12]
 8016024:	e018      	b.n	8016058 <aiInit+0x70>
  }
  else if (strncmp(nn_name,AI_USC_NETWORK_MODEL_NAME, 10)==0){
 8016026:	220a      	movs	r2, #10
 8016028:	4912      	ldr	r1, [pc, #72]	; (8016074 <aiInit+0x8c>)
 801602a:	6878      	ldr	r0, [r7, #4]
 801602c:	f00e f9fe 	bl	802442c <strncmp>
 8016030:	4603      	mov	r3, r0
 8016032:	2b00      	cmp	r3, #0
 8016034:	d109      	bne.n	801604a <aiInit+0x62>
	 net_exec_ctx[AI_USC_NETWORK_CTX_IDX].handle = AI_HANDLE_NULL;
 8016036:	4b0e      	ldr	r3, [pc, #56]	; (8016070 <aiInit+0x88>)
 8016038:	2200      	movs	r2, #0
 801603a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	 res = aiBootstrap(&net_exec_ctx[AI_USC_NETWORK_CTX_IDX],nn_name) ;
 801603e:	6879      	ldr	r1, [r7, #4]
 8016040:	480d      	ldr	r0, [pc, #52]	; (8016078 <aiInit+0x90>)
 8016042:	f7ff ff2f 	bl	8015ea4 <aiBootstrap>
 8016046:	60f8      	str	r0, [r7, #12]
 8016048:	e006      	b.n	8016058 <aiInit+0x70>
  }
  else  {
	LC_PRINT("\r\nAI Error : Did not Found network \"%s\"\r\n", nn_name);
 801604a:	4b07      	ldr	r3, [pc, #28]	; (8016068 <aiInit+0x80>)
 801604c:	681b      	ldr	r3, [r3, #0]
 801604e:	687a      	ldr	r2, [r7, #4]
 8016050:	490a      	ldr	r1, [pc, #40]	; (801607c <aiInit+0x94>)
 8016052:	4618      	mov	r0, r3
 8016054:	f00d fd24 	bl	8023aa0 <fiprintf>
  }
  return res;
 8016058:	68fb      	ldr	r3, [r7, #12]
}
 801605a:	4618      	mov	r0, r3
 801605c:	3710      	adds	r7, #16
 801605e:	46bd      	mov	sp, r7
 8016060:	bd80      	pop	{r7, pc}
 8016062:	bf00      	nop
 8016064:	20000658 	.word	0x20000658
 8016068:	20026ab8 	.word	0x20026ab8
 801606c:	08026b0c 	.word	0x08026b0c
 8016070:	20026adc 	.word	0x20026adc
 8016074:	08026b18 	.word	0x08026b18
 8016078:	20026b5c 	.word	0x20026b5c
 801607c:	08026b24 	.word	0x08026b24

08016080 <aiProcess>:
	net_exec_ctx[AI_USC_NETWORK_CTX_IDX].handle = AI_HANDLE_NULL;
  }
}

int aiProcess(const char* nn_name, float * p_inData, float p_out_data[2])
{
 8016080:	b5b0      	push	{r4, r5, r7, lr}
 8016082:	b0a6      	sub	sp, #152	; 0x98
 8016084:	af00      	add	r7, sp, #0
 8016086:	60f8      	str	r0, [r7, #12]
 8016088:	60b9      	str	r1, [r7, #8]
 801608a:	607a      	str	r2, [r7, #4]
  int idx; /* only one fixed network */

  ai_buffer ai_input;
  ai_buffer ai_output[AI_MNETWORK_OUT_NUM_MAX];

  if (strncmp(nn_name,AI_HAR_NETWORK_MODEL_NAME, 10)==0){
 801608c:	220a      	movs	r2, #10
 801608e:	49a3      	ldr	r1, [pc, #652]	; (801631c <aiProcess+0x29c>)
 8016090:	68f8      	ldr	r0, [r7, #12]
 8016092:	f00e f9cb 	bl	802442c <strncmp>
 8016096:	4603      	mov	r3, r0
 8016098:	2b00      	cmp	r3, #0
 801609a:	d103      	bne.n	80160a4 <aiProcess+0x24>
	idx = AI_HAR_NETWORK_CTX_IDX;
 801609c:	2300      	movs	r3, #0
 801609e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80160a2:	e00e      	b.n	80160c2 <aiProcess+0x42>
  }
  else if (strncmp(nn_name,AI_USC_NETWORK_MODEL_NAME, 10)==0){
 80160a4:	220a      	movs	r2, #10
 80160a6:	499e      	ldr	r1, [pc, #632]	; (8016320 <aiProcess+0x2a0>)
 80160a8:	68f8      	ldr	r0, [r7, #12]
 80160aa:	f00e f9bf 	bl	802442c <strncmp>
 80160ae:	4603      	mov	r3, r0
 80160b0:	2b00      	cmp	r3, #0
 80160b2:	d103      	bne.n	80160bc <aiProcess+0x3c>
	idx = AI_USC_NETWORK_CTX_IDX;
 80160b4:	2301      	movs	r3, #1
 80160b6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80160ba:	e002      	b.n	80160c2 <aiProcess+0x42>
  }
  else return -1;
 80160bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80160c0:	e19f      	b.n	8016402 <aiProcess+0x382>

  if(net_exec_ctx[idx].handle == AI_HANDLE_NULL)
 80160c2:	4a98      	ldr	r2, [pc, #608]	; (8016324 <aiProcess+0x2a4>)
 80160c4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80160c8:	01db      	lsls	r3, r3, #7
 80160ca:	4413      	add	r3, r2
 80160cc:	681b      	ldr	r3, [r3, #0]
 80160ce:	2b00      	cmp	r3, #0
 80160d0:	d109      	bne.n	80160e6 <aiProcess+0x66>
  {
	LC_PRINT("E: network handle is NULL\r\n");
 80160d2:	4b95      	ldr	r3, [pc, #596]	; (8016328 <aiProcess+0x2a8>)
 80160d4:	681b      	ldr	r3, [r3, #0]
 80160d6:	221b      	movs	r2, #27
 80160d8:	2101      	movs	r1, #1
 80160da:	4894      	ldr	r0, [pc, #592]	; (801632c <aiProcess+0x2ac>)
 80160dc:	f00d fd52 	bl	8023b84 <fwrite>
    return -1;
 80160e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80160e4:	e18d      	b.n	8016402 <aiProcess+0x382>
  }
  if ((net_exec_ctx[idx].report.n_inputs > AI_MNETWORK_IN_NUM) ||
 80160e6:	4a8f      	ldr	r2, [pc, #572]	; (8016324 <aiProcess+0x2a4>)
 80160e8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80160ec:	01db      	lsls	r3, r3, #7
 80160ee:	4413      	add	r3, r2
 80160f0:	3334      	adds	r3, #52	; 0x34
 80160f2:	881b      	ldrh	r3, [r3, #0]
 80160f4:	2b01      	cmp	r3, #1
 80160f6:	d808      	bhi.n	801610a <aiProcess+0x8a>
	  (net_exec_ctx[idx].report.n_outputs > AI_MNETWORK_OUT_NUM))
 80160f8:	4a8a      	ldr	r2, [pc, #552]	; (8016324 <aiProcess+0x2a4>)
 80160fa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80160fe:	01db      	lsls	r3, r3, #7
 8016100:	4413      	add	r3, r2
 8016102:	3336      	adds	r3, #54	; 0x36
 8016104:	881b      	ldrh	r3, [r3, #0]
  if ((net_exec_ctx[idx].report.n_inputs > AI_MNETWORK_IN_NUM) ||
 8016106:	2b02      	cmp	r3, #2
 8016108:	d90c      	bls.n	8016124 <aiProcess+0xa4>
  {
	LC_PRINT("E: AI_MNETWORK_IN/OUT_NUM definition are incoherent\r\n");
 801610a:	4b87      	ldr	r3, [pc, #540]	; (8016328 <aiProcess+0x2a8>)
 801610c:	681b      	ldr	r3, [r3, #0]
 801610e:	2235      	movs	r2, #53	; 0x35
 8016110:	2101      	movs	r1, #1
 8016112:	4887      	ldr	r0, [pc, #540]	; (8016330 <aiProcess+0x2b0>)
 8016114:	f00d fd36 	bl	8023b84 <fwrite>
	HAL_Delay(100);
 8016118:	2064      	movs	r0, #100	; 0x64
 801611a:	f7ec fde1 	bl	8002ce0 <HAL_Delay>
	return -1;
 801611e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016122:	e16e      	b.n	8016402 <aiProcess+0x382>
  }

  /* we are dealing only with  1/1 or 1/2 networks  */
  ai_input          = net_exec_ctx[idx].report.inputs[0];
 8016124:	4a7f      	ldr	r2, [pc, #508]	; (8016324 <aiProcess+0x2a4>)
 8016126:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801612a:	01db      	lsls	r3, r3, #7
 801612c:	4413      	add	r3, r2
 801612e:	3338      	adds	r3, #56	; 0x38
 8016130:	681b      	ldr	r3, [r3, #0]
 8016132:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 8016136:	461d      	mov	r5, r3
 8016138:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801613a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801613c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8016140:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ai_input.data     = AI_HANDLE_PTR(p_inData);
 8016144:	68bb      	ldr	r3, [r7, #8]
 8016146:	653b      	str	r3, [r7, #80]	; 0x50
  ai_output[0]      = net_exec_ctx[idx].report.outputs[0];
 8016148:	4a76      	ldr	r2, [pc, #472]	; (8016324 <aiProcess+0x2a4>)
 801614a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801614e:	01db      	lsls	r3, r3, #7
 8016150:	4413      	add	r3, r2
 8016152:	333c      	adds	r3, #60	; 0x3c
 8016154:	681b      	ldr	r3, [r3, #0]
 8016156:	f107 0414 	add.w	r4, r7, #20
 801615a:	461d      	mov	r5, r3
 801615c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801615e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016160:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8016164:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ai_output[0].data = AI_HANDLE_PTR(data_outs[0]);
 8016168:	4b72      	ldr	r3, [pc, #456]	; (8016334 <aiProcess+0x2b4>)
 801616a:	681b      	ldr	r3, [r3, #0]
 801616c:	61bb      	str	r3, [r7, #24]
  if (net_exec_ctx[idx].report.n_outputs == 2)
 801616e:	4a6d      	ldr	r2, [pc, #436]	; (8016324 <aiProcess+0x2a4>)
 8016170:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8016174:	01db      	lsls	r3, r3, #7
 8016176:	4413      	add	r3, r2
 8016178:	3336      	adds	r3, #54	; 0x36
 801617a:	881b      	ldrh	r3, [r3, #0]
 801617c:	2b02      	cmp	r3, #2
 801617e:	d113      	bne.n	80161a8 <aiProcess+0x128>
  {
	ai_output[1]      = net_exec_ctx[idx].report.outputs[1];
 8016180:	4a68      	ldr	r2, [pc, #416]	; (8016324 <aiProcess+0x2a4>)
 8016182:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8016186:	01db      	lsls	r3, r3, #7
 8016188:	4413      	add	r3, r2
 801618a:	333c      	adds	r3, #60	; 0x3c
 801618c:	681b      	ldr	r3, [r3, #0]
 801618e:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8016192:	f103 051c 	add.w	r5, r3, #28
 8016196:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016198:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801619a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801619e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	ai_output[1].data = AI_HANDLE_PTR(data_outs[1]);
 80161a2:	4b64      	ldr	r3, [pc, #400]	; (8016334 <aiProcess+0x2b4>)
 80161a4:	685b      	ldr	r3, [r3, #4]
 80161a6:	637b      	str	r3, [r7, #52]	; 0x34
  }

  batch = ai_mnetwork_run(net_exec_ctx[idx].handle, &ai_input, ai_output);
 80161a8:	4a5e      	ldr	r2, [pc, #376]	; (8016324 <aiProcess+0x2a4>)
 80161aa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80161ae:	01db      	lsls	r3, r3, #7
 80161b0:	4413      	add	r3, r2
 80161b2:	681b      	ldr	r3, [r3, #0]
 80161b4:	f107 0214 	add.w	r2, r7, #20
 80161b8:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 80161bc:	4618      	mov	r0, r3
 80161be:	f000 fedf 	bl	8016f80 <ai_mnetwork_run>
 80161c2:	67b8      	str	r0, [r7, #120]	; 0x78
  if (batch != 1) {
 80161c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80161c6:	2b01      	cmp	r3, #1
 80161c8:	d00d      	beq.n	80161e6 <aiProcess+0x166>
    aiLogErr(ai_mnetwork_get_error(net_exec_ctx[idx].handle),"ai_mnetwork_run");
 80161ca:	4a56      	ldr	r2, [pc, #344]	; (8016324 <aiProcess+0x2a4>)
 80161cc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80161d0:	01db      	lsls	r3, r3, #7
 80161d2:	4413      	add	r3, r2
 80161d4:	681b      	ldr	r3, [r3, #0]
 80161d6:	4618      	mov	r0, r3
 80161d8:	f000 fe77 	bl	8016eca <ai_mnetwork_get_error>
 80161dc:	4603      	mov	r3, r0
 80161de:	4956      	ldr	r1, [pc, #344]	; (8016338 <aiProcess+0x2b8>)
 80161e0:	4618      	mov	r0, r3
 80161e2:	f000 f939 	bl	8016458 <aiLogErr>
  }
  if (AI_HAR_NETWORK_CTX_IDX == idx )
 80161e6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80161ea:	2b00      	cmp	r3, #0
 80161ec:	d16f      	bne.n	80162ce <aiProcess+0x24e>
  {
    /* check correct init  */
    if( net_exec_ctx[idx].report.n_outputs == 2)
 80161ee:	4a4d      	ldr	r2, [pc, #308]	; (8016324 <aiProcess+0x2a4>)
 80161f0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80161f4:	01db      	lsls	r3, r3, #7
 80161f6:	4413      	add	r3, r2
 80161f8:	3336      	adds	r3, #54	; 0x36
 80161fa:	881b      	ldrh	r3, [r3, #0]
 80161fc:	2b02      	cmp	r3, #2
 80161fe:	d116      	bne.n	801622e <aiProcess+0x1ae>
    {
	  float *p_out0 = (float*) ai_output[0].data;
 8016200:	69bb      	ldr	r3, [r7, #24]
 8016202:	66fb      	str	r3, [r7, #108]	; 0x6c
	  float *p_out1 = (float*) ai_output[1].data;
 8016204:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016206:	66bb      	str	r3, [r7, #104]	; 0x68

	  p_out_data[0] = p_out0[0];
 8016208:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801620a:	681a      	ldr	r2, [r3, #0]
 801620c:	687b      	ldr	r3, [r7, #4]
 801620e:	601a      	str	r2, [r3, #0]
	  p_out_data[1] = p_out1[(int) p_out0[0]];
 8016210:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016212:	edd3 7a00 	vldr	s15, [r3]
 8016216:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801621a:	ee17 3a90 	vmov	r3, s15
 801621e:	009b      	lsls	r3, r3, #2
 8016220:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8016222:	441a      	add	r2, r3
 8016224:	687b      	ldr	r3, [r7, #4]
 8016226:	3304      	adds	r3, #4
 8016228:	6812      	ldr	r2, [r2, #0]
 801622a:	601a      	str	r2, [r3, #0]
 801622c:	e0e8      	b.n	8016400 <aiProcess+0x380>
    }
    else if(net_exec_ctx[idx].report.n_outputs == 1)
 801622e:	4a3d      	ldr	r2, [pc, #244]	; (8016324 <aiProcess+0x2a4>)
 8016230:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8016234:	01db      	lsls	r3, r3, #7
 8016236:	4413      	add	r3, r2
 8016238:	3336      	adds	r3, #54	; 0x36
 801623a:	881b      	ldrh	r3, [r3, #0]
 801623c:	2b01      	cmp	r3, #1
 801623e:	f040 80df 	bne.w	8016400 <aiProcess+0x380>
    {
	  float *p_out0 = (float*) ai_output[0].data;
 8016242:	69bb      	ldr	r3, [r7, #24]
 8016244:	673b      	str	r3, [r7, #112]	; 0x70
	  float max_out = *p_out0;
 8016246:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8016248:	681b      	ldr	r3, [r3, #0]
 801624a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	  int max_idx = 0;
 801624e:	2300      	movs	r3, #0
 8016250:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	  for(int i = 1; i < AI_BUFFER_SIZE(&ai_output[0]); i++)
 8016254:	2301      	movs	r3, #1
 8016256:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 801625a:	e01e      	b.n	801629a <aiProcess+0x21a>
	  {
	    if(p_out0[i] > max_out)
 801625c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8016260:	009b      	lsls	r3, r3, #2
 8016262:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8016264:	4413      	add	r3, r2
 8016266:	edd3 7a00 	vldr	s15, [r3]
 801626a:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 801626e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016272:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016276:	d50b      	bpl.n	8016290 <aiProcess+0x210>
		{
		  max_idx = i;
 8016278:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801627c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		  max_out = p_out0[i];
 8016280:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8016284:	009b      	lsls	r3, r3, #2
 8016286:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8016288:	4413      	add	r3, r2
 801628a:	681b      	ldr	r3, [r3, #0]
 801628c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	  for(int i = 1; i < AI_BUFFER_SIZE(&ai_output[0]); i++)
 8016290:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8016294:	3301      	adds	r3, #1
 8016296:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 801629a:	f107 0314 	add.w	r3, r7, #20
 801629e:	2101      	movs	r1, #1
 80162a0:	4618      	mov	r0, r3
 80162a2:	f00a fc6b 	bl	8020b7c <ai_buffer_get_size>
 80162a6:	4602      	mov	r2, r0
 80162a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80162ac:	429a      	cmp	r2, r3
 80162ae:	d8d5      	bhi.n	801625c <aiProcess+0x1dc>
		}
	  }
	  p_out_data[0] = max_idx;
 80162b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80162b4:	ee07 3a90 	vmov	s15, r3
 80162b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80162bc:	687b      	ldr	r3, [r7, #4]
 80162be:	edc3 7a00 	vstr	s15, [r3]
	  p_out_data[1] = max_out;
 80162c2:	687b      	ldr	r3, [r7, #4]
 80162c4:	3304      	adds	r3, #4
 80162c6:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80162ca:	601a      	str	r2, [r3, #0]
 80162cc:	e098      	b.n	8016400 <aiProcess+0x380>
    }
  }
  else if (AI_USC_NETWORK_CTX_IDX == idx )
 80162ce:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80162d2:	2b01      	cmp	r3, #1
 80162d4:	f040 8094 	bne.w	8016400 <aiProcess+0x380>
  {
	  float *p_out0 = (float*) ai_output[0].data;
 80162d8:	69bb      	ldr	r3, [r7, #24]
 80162da:	677b      	str	r3, [r7, #116]	; 0x74
	  float max_out = *p_out0;
 80162dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80162de:	681b      	ldr	r3, [r3, #0]
 80162e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	  int max_idx = 0;
 80162e4:	2300      	movs	r3, #0
 80162e6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	  SYS_DEBUGF(SYS_DBG_LEVEL_VERBOSE, ("%f\t",p_out0[0]));
 80162ea:	4b14      	ldr	r3, [pc, #80]	; (801633c <aiProcess+0x2bc>)
 80162ec:	781b      	ldrb	r3, [r3, #0]
 80162ee:	2b01      	cmp	r3, #1
 80162f0:	d810      	bhi.n	8016314 <aiProcess+0x294>
 80162f2:	4b13      	ldr	r3, [pc, #76]	; (8016340 <aiProcess+0x2c0>)
 80162f4:	681b      	ldr	r3, [r3, #0]
 80162f6:	4798      	blx	r3
 80162f8:	4b12      	ldr	r3, [pc, #72]	; (8016344 <aiProcess+0x2c4>)
 80162fa:	681c      	ldr	r4, [r3, #0]
 80162fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80162fe:	681b      	ldr	r3, [r3, #0]
 8016300:	4618      	mov	r0, r3
 8016302:	f7ea fa55 	bl	80007b0 <__aeabi_f2d>
 8016306:	4602      	mov	r2, r0
 8016308:	460b      	mov	r3, r1
 801630a:	480f      	ldr	r0, [pc, #60]	; (8016348 <aiProcess+0x2c8>)
 801630c:	47a0      	blx	r4
 801630e:	4b0f      	ldr	r3, [pc, #60]	; (801634c <aiProcess+0x2cc>)
 8016310:	681b      	ldr	r3, [r3, #0]
 8016312:	4798      	blx	r3
	  for(int i = 1; i < AI_BUFFER_SIZE(&ai_output[0]); i++)
 8016314:	2301      	movs	r3, #1
 8016316:	67fb      	str	r3, [r7, #124]	; 0x7c
 8016318:	e04c      	b.n	80163b4 <aiProcess+0x334>
 801631a:	bf00      	nop
 801631c:	08026b0c 	.word	0x08026b0c
 8016320:	08026b18 	.word	0x08026b18
 8016324:	20026adc 	.word	0x20026adc
 8016328:	20026ab8 	.word	0x20026ab8
 801632c:	08026b78 	.word	0x08026b78
 8016330:	08026b94 	.word	0x08026b94
 8016334:	2000005c 	.word	0x2000005c
 8016338:	08026bcc 	.word	0x08026bcc
 801633c:	2000002c 	.word	0x2000002c
 8016340:	20000030 	.word	0x20000030
 8016344:	20000038 	.word	0x20000038
 8016348:	08026bdc 	.word	0x08026bdc
 801634c:	20000034 	.word	0x20000034
	  {
	    SYS_DEBUGF(SYS_DBG_LEVEL_VERBOSE, ("%f\t",p_out0[i]));
 8016350:	4b2e      	ldr	r3, [pc, #184]	; (801640c <aiProcess+0x38c>)
 8016352:	781b      	ldrb	r3, [r3, #0]
 8016354:	2b01      	cmp	r3, #1
 8016356:	d813      	bhi.n	8016380 <aiProcess+0x300>
 8016358:	4b2d      	ldr	r3, [pc, #180]	; (8016410 <aiProcess+0x390>)
 801635a:	681b      	ldr	r3, [r3, #0]
 801635c:	4798      	blx	r3
 801635e:	4b2d      	ldr	r3, [pc, #180]	; (8016414 <aiProcess+0x394>)
 8016360:	681c      	ldr	r4, [r3, #0]
 8016362:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8016364:	009b      	lsls	r3, r3, #2
 8016366:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8016368:	4413      	add	r3, r2
 801636a:	681b      	ldr	r3, [r3, #0]
 801636c:	4618      	mov	r0, r3
 801636e:	f7ea fa1f 	bl	80007b0 <__aeabi_f2d>
 8016372:	4602      	mov	r2, r0
 8016374:	460b      	mov	r3, r1
 8016376:	4828      	ldr	r0, [pc, #160]	; (8016418 <aiProcess+0x398>)
 8016378:	47a0      	blx	r4
 801637a:	4b28      	ldr	r3, [pc, #160]	; (801641c <aiProcess+0x39c>)
 801637c:	681b      	ldr	r3, [r3, #0]
 801637e:	4798      	blx	r3
	    if(p_out0[i] > max_out)
 8016380:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8016382:	009b      	lsls	r3, r3, #2
 8016384:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8016386:	4413      	add	r3, r2
 8016388:	edd3 7a00 	vldr	s15, [r3]
 801638c:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 8016390:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016394:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016398:	d509      	bpl.n	80163ae <aiProcess+0x32e>
		{
		  max_idx = i;
 801639a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801639c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
		  max_out = p_out0[i];
 80163a0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80163a2:	009b      	lsls	r3, r3, #2
 80163a4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80163a6:	4413      	add	r3, r2
 80163a8:	681b      	ldr	r3, [r3, #0]
 80163aa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	  for(int i = 1; i < AI_BUFFER_SIZE(&ai_output[0]); i++)
 80163ae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80163b0:	3301      	adds	r3, #1
 80163b2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80163b4:	f107 0314 	add.w	r3, r7, #20
 80163b8:	2101      	movs	r1, #1
 80163ba:	4618      	mov	r0, r3
 80163bc:	f00a fbde 	bl	8020b7c <ai_buffer_get_size>
 80163c0:	4602      	mov	r2, r0
 80163c2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80163c4:	429a      	cmp	r2, r3
 80163c6:	d8c3      	bhi.n	8016350 <aiProcess+0x2d0>
		}
 	  }
	  SYS_DEBUGF(SYS_DBG_LEVEL_VERBOSE, ("\n\r"));
 80163c8:	4b10      	ldr	r3, [pc, #64]	; (801640c <aiProcess+0x38c>)
 80163ca:	781b      	ldrb	r3, [r3, #0]
 80163cc:	2b01      	cmp	r3, #1
 80163ce:	d809      	bhi.n	80163e4 <aiProcess+0x364>
 80163d0:	4b0f      	ldr	r3, [pc, #60]	; (8016410 <aiProcess+0x390>)
 80163d2:	681b      	ldr	r3, [r3, #0]
 80163d4:	4798      	blx	r3
 80163d6:	4b0f      	ldr	r3, [pc, #60]	; (8016414 <aiProcess+0x394>)
 80163d8:	681b      	ldr	r3, [r3, #0]
 80163da:	4811      	ldr	r0, [pc, #68]	; (8016420 <aiProcess+0x3a0>)
 80163dc:	4798      	blx	r3
 80163de:	4b0f      	ldr	r3, [pc, #60]	; (801641c <aiProcess+0x39c>)
 80163e0:	681b      	ldr	r3, [r3, #0]
 80163e2:	4798      	blx	r3
	  p_out_data[0] = (float) max_idx;
 80163e4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80163e8:	ee07 3a90 	vmov	s15, r3
 80163ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80163f0:	687b      	ldr	r3, [r7, #4]
 80163f2:	edc3 7a00 	vstr	s15, [r3]
	  p_out_data[1] = max_out;
 80163f6:	687b      	ldr	r3, [r7, #4]
 80163f8:	3304      	adds	r3, #4
 80163fa:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80163fe:	601a      	str	r2, [r3, #0]
  }
  return 0;
 8016400:	2300      	movs	r3, #0
}
 8016402:	4618      	mov	r0, r3
 8016404:	3798      	adds	r7, #152	; 0x98
 8016406:	46bd      	mov	sp, r7
 8016408:	bdb0      	pop	{r4, r5, r7, pc}
 801640a:	bf00      	nop
 801640c:	2000002c 	.word	0x2000002c
 8016410:	20000030 	.word	0x20000030
 8016414:	20000038 	.word	0x20000038
 8016418:	08026bdc 	.word	0x08026bdc
 801641c:	20000034 	.word	0x20000034
 8016420:	08026be0 	.word	0x08026be0

08016424 <aiPlatformVersion>:
//#include <aiTestUtility.h>

#include <ai_platform_interface.h>

void aiPlatformVersion(void)
{
 8016424:	b580      	push	{r7, lr}
 8016426:	b084      	sub	sp, #16
 8016428:	af04      	add	r7, sp, #16
  LC_PRINT("\r\nAI platform (API %d.%d.%d - RUNTIME %d.%d.%d)\r\n",
 801642a:	4b09      	ldr	r3, [pc, #36]	; (8016450 <aiPlatformVersion+0x2c>)
 801642c:	6818      	ldr	r0, [r3, #0]
 801642e:	2300      	movs	r3, #0
 8016430:	9303      	str	r3, [sp, #12]
 8016432:	2301      	movs	r3, #1
 8016434:	9302      	str	r3, [sp, #8]
 8016436:	2307      	movs	r3, #7
 8016438:	9301      	str	r3, [sp, #4]
 801643a:	2300      	movs	r3, #0
 801643c:	9300      	str	r3, [sp, #0]
 801643e:	2302      	movs	r3, #2
 8016440:	2201      	movs	r2, #1
 8016442:	4904      	ldr	r1, [pc, #16]	; (8016454 <aiPlatformVersion+0x30>)
 8016444:	f00d fb2c 	bl	8023aa0 <fiprintf>
      AI_PLATFORM_API_MINOR,
      AI_PLATFORM_API_MICRO,
      AI_PLATFORM_RUNTIME_MAJOR,
      AI_PLATFORM_RUNTIME_MINOR,
      AI_PLATFORM_RUNTIME_MICRO);
}
 8016448:	bf00      	nop
 801644a:	46bd      	mov	sp, r7
 801644c:	bd80      	pop	{r7, pc}
 801644e:	bf00      	nop
 8016450:	20026ab8 	.word	0x20026ab8
 8016454:	08026c10 	.word	0x08026c10

08016458 <aiLogErr>:

void aiLogErr(const ai_error err, const char *fct)
{
 8016458:	b580      	push	{r7, lr}
 801645a:	b084      	sub	sp, #16
 801645c:	af02      	add	r7, sp, #8
 801645e:	6078      	str	r0, [r7, #4]
 8016460:	6039      	str	r1, [r7, #0]
  if (fct)
 8016462:	683b      	ldr	r3, [r7, #0]
 8016464:	2b00      	cmp	r3, #0
 8016466:	d00d      	beq.n	8016484 <aiLogErr+0x2c>
    LC_PRINT("E: AI error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 8016468:	4b0d      	ldr	r3, [pc, #52]	; (80164a0 <aiLogErr+0x48>)
 801646a:	6818      	ldr	r0, [r3, #0]
 801646c:	793b      	ldrb	r3, [r7, #4]
 801646e:	461a      	mov	r2, r3
 8016470:	687b      	ldr	r3, [r7, #4]
 8016472:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8016476:	9300      	str	r3, [sp, #0]
 8016478:	4613      	mov	r3, r2
 801647a:	683a      	ldr	r2, [r7, #0]
 801647c:	4909      	ldr	r1, [pc, #36]	; (80164a4 <aiLogErr+0x4c>)
 801647e:	f00d fb0f 	bl	8023aa0 <fiprintf>
        err.type, err.code);
  else
    LC_PRINT("E: AI error - type=0x%02x code=0x%02x\r\n", err.type, err.code);
}
 8016482:	e009      	b.n	8016498 <aiLogErr+0x40>
    LC_PRINT("E: AI error - type=0x%02x code=0x%02x\r\n", err.type, err.code);
 8016484:	4b06      	ldr	r3, [pc, #24]	; (80164a0 <aiLogErr+0x48>)
 8016486:	6818      	ldr	r0, [r3, #0]
 8016488:	793b      	ldrb	r3, [r7, #4]
 801648a:	461a      	mov	r2, r3
 801648c:	687b      	ldr	r3, [r7, #4]
 801648e:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8016492:	4905      	ldr	r1, [pc, #20]	; (80164a8 <aiLogErr+0x50>)
 8016494:	f00d fb04 	bl	8023aa0 <fiprintf>
}
 8016498:	bf00      	nop
 801649a:	3708      	adds	r7, #8
 801649c:	46bd      	mov	sp, r7
 801649e:	bd80      	pop	{r7, pc}
 80164a0:	20026ab8 	.word	0x20026ab8
 80164a4:	08026c44 	.word	0x08026c44
 80164a8:	08026c74 	.word	0x08026c74

080164ac <aiPrintDataType>:


static inline void aiPrintDataType(const ai_buffer_format fmt)
{
 80164ac:	b580      	push	{r7, lr}
 80164ae:	b082      	sub	sp, #8
 80164b0:	af00      	add	r7, sp, #0
 80164b2:	6078      	str	r0, [r7, #4]
    if (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_FLOAT)
 80164b4:	687b      	ldr	r3, [r7, #4]
 80164b6:	145b      	asrs	r3, r3, #17
 80164b8:	f003 030f 	and.w	r3, r3, #15
 80164bc:	2b01      	cmp	r3, #1
 80164be:	d10a      	bne.n	80164d6 <aiPrintDataType+0x2a>
      LC_PRINT("float%d", (int)AI_BUFFER_FMT_GET_BITS(fmt));
 80164c0:	4b18      	ldr	r3, [pc, #96]	; (8016524 <aiPrintDataType+0x78>)
 80164c2:	6818      	ldr	r0, [r3, #0]
 80164c4:	687b      	ldr	r3, [r7, #4]
 80164c6:	11db      	asrs	r3, r3, #7
 80164c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80164cc:	461a      	mov	r2, r3
 80164ce:	4916      	ldr	r1, [pc, #88]	; (8016528 <aiPrintDataType+0x7c>)
 80164d0:	f00d fae6 	bl	8023aa0 <fiprintf>
      LC_PRINT("bool%d", (int)AI_BUFFER_FMT_GET_BITS(fmt));
    } else { /* integer type */
      LC_PRINT("%s%d", AI_BUFFER_FMT_GET_SIGN(fmt)?"i":"u",
            (int)AI_BUFFER_FMT_GET_BITS(fmt));
    }
}
 80164d4:	e021      	b.n	801651a <aiPrintDataType+0x6e>
    else if (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_BOOL) {
 80164d6:	687b      	ldr	r3, [r7, #4]
 80164d8:	145b      	asrs	r3, r3, #17
 80164da:	f003 030f 	and.w	r3, r3, #15
 80164de:	2b03      	cmp	r3, #3
 80164e0:	d10a      	bne.n	80164f8 <aiPrintDataType+0x4c>
      LC_PRINT("bool%d", (int)AI_BUFFER_FMT_GET_BITS(fmt));
 80164e2:	4b10      	ldr	r3, [pc, #64]	; (8016524 <aiPrintDataType+0x78>)
 80164e4:	6818      	ldr	r0, [r3, #0]
 80164e6:	687b      	ldr	r3, [r7, #4]
 80164e8:	11db      	asrs	r3, r3, #7
 80164ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80164ee:	461a      	mov	r2, r3
 80164f0:	490e      	ldr	r1, [pc, #56]	; (801652c <aiPrintDataType+0x80>)
 80164f2:	f00d fad5 	bl	8023aa0 <fiprintf>
}
 80164f6:	e010      	b.n	801651a <aiPrintDataType+0x6e>
      LC_PRINT("%s%d", AI_BUFFER_FMT_GET_SIGN(fmt)?"i":"u",
 80164f8:	4b0a      	ldr	r3, [pc, #40]	; (8016524 <aiPrintDataType+0x78>)
 80164fa:	6818      	ldr	r0, [r3, #0]
 80164fc:	687b      	ldr	r3, [r7, #4]
 80164fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8016502:	2b00      	cmp	r3, #0
 8016504:	d001      	beq.n	801650a <aiPrintDataType+0x5e>
 8016506:	4a0a      	ldr	r2, [pc, #40]	; (8016530 <aiPrintDataType+0x84>)
 8016508:	e000      	b.n	801650c <aiPrintDataType+0x60>
 801650a:	4a0a      	ldr	r2, [pc, #40]	; (8016534 <aiPrintDataType+0x88>)
 801650c:	687b      	ldr	r3, [r7, #4]
 801650e:	11db      	asrs	r3, r3, #7
 8016510:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016514:	4908      	ldr	r1, [pc, #32]	; (8016538 <aiPrintDataType+0x8c>)
 8016516:	f00d fac3 	bl	8023aa0 <fiprintf>
}
 801651a:	bf00      	nop
 801651c:	3708      	adds	r7, #8
 801651e:	46bd      	mov	sp, r7
 8016520:	bd80      	pop	{r7, pc}
 8016522:	bf00      	nop
 8016524:	20026ab8 	.word	0x20026ab8
 8016528:	08026c9c 	.word	0x08026c9c
 801652c:	08026ca4 	.word	0x08026ca4
 8016530:	08026cac 	.word	0x08026cac
 8016534:	08026cb0 	.word	0x08026cb0
 8016538:	08026cb4 	.word	0x08026cb4

0801653c <aiPrintBufferInfo>:


void aiPrintBufferInfo(const ai_buffer *buffer)
{
 801653c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801653e:	b08f      	sub	sp, #60	; 0x3c
 8016540:	af04      	add	r7, sp, #16
 8016542:	60f8      	str	r0, [r7, #12]
  const ai_buffer_format fmt = buffer->format;
 8016544:	68fb      	ldr	r3, [r7, #12]
 8016546:	681b      	ldr	r3, [r3, #0]
 8016548:	623b      	str	r3, [r7, #32]
  /* shape + nb elem */
  LC_PRINT("(%lu,%lu,%lu,%d) %d/",
 801654a:	4b85      	ldr	r3, [pc, #532]	; (8016760 <aiPrintBufferInfo+0x224>)
 801654c:	681d      	ldr	r5, [r3, #0]
 801654e:	68fb      	ldr	r3, [r7, #12]
 8016550:	699b      	ldr	r3, [r3, #24]
 8016552:	681e      	ldr	r6, [r3, #0]
 8016554:	68fb      	ldr	r3, [r7, #12]
 8016556:	699b      	ldr	r3, [r3, #24]
 8016558:	330c      	adds	r3, #12
 801655a:	681b      	ldr	r3, [r3, #0]
 801655c:	60bb      	str	r3, [r7, #8]
 801655e:	68fb      	ldr	r3, [r7, #12]
 8016560:	699b      	ldr	r3, [r3, #24]
 8016562:	3308      	adds	r3, #8
 8016564:	681c      	ldr	r4, [r3, #0]
 8016566:	68fb      	ldr	r3, [r7, #12]
 8016568:	699b      	ldr	r3, [r3, #24]
 801656a:	3304      	adds	r3, #4
 801656c:	681b      	ldr	r3, [r3, #0]
 801656e:	607b      	str	r3, [r7, #4]
 8016570:	2101      	movs	r1, #1
 8016572:	68f8      	ldr	r0, [r7, #12]
 8016574:	f00a fb02 	bl	8020b7c <ai_buffer_get_size>
 8016578:	4603      	mov	r3, r0
 801657a:	9302      	str	r3, [sp, #8]
 801657c:	687a      	ldr	r2, [r7, #4]
 801657e:	9201      	str	r2, [sp, #4]
 8016580:	9400      	str	r4, [sp, #0]
 8016582:	68bb      	ldr	r3, [r7, #8]
 8016584:	4632      	mov	r2, r6
 8016586:	4977      	ldr	r1, [pc, #476]	; (8016764 <aiPrintBufferInfo+0x228>)
 8016588:	4628      	mov	r0, r5
 801658a:	f00d fa89 	bl	8023aa0 <fiprintf>
      AI_BUFFER_SHAPE_ELEM(buffer, AI_SHAPE_WIDTH),
      (int)AI_BUFFER_SHAPE_ELEM(buffer, AI_SHAPE_CHANNEL),
      (int)AI_BUFFER_SIZE(buffer)
  );
  /* type (+meta_data) */
  aiPrintDataType(fmt);
 801658e:	6a38      	ldr	r0, [r7, #32]
 8016590:	f7ff ff8c 	bl	80164ac <aiPrintDataType>
  /* quantized info if available */
  if (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_Q) {
 8016594:	6a3b      	ldr	r3, [r7, #32]
 8016596:	145b      	asrs	r3, r3, #17
 8016598:	f003 030f 	and.w	r3, r3, #15
 801659c:	2b02      	cmp	r3, #2
 801659e:	f040 81dc 	bne.w	801695a <aiPrintBufferInfo+0x41e>
    if (AI_BUFFER_META_INFO_INTQ(buffer->meta_info)) {
 80165a2:	68fb      	ldr	r3, [r7, #12]
 80165a4:	689b      	ldr	r3, [r3, #8]
 80165a6:	2b00      	cmp	r3, #0
 80165a8:	f000 81ac 	beq.w	8016904 <aiPrintBufferInfo+0x3c8>
 80165ac:	68fb      	ldr	r3, [r7, #12]
 80165ae:	689b      	ldr	r3, [r3, #8]
 80165b0:	681b      	ldr	r3, [r3, #0]
 80165b2:	f003 0301 	and.w	r3, r3, #1
 80165b6:	2b00      	cmp	r3, #0
 80165b8:	f000 81a4 	beq.w	8016904 <aiPrintBufferInfo+0x3c8>
 80165bc:	68fb      	ldr	r3, [r7, #12]
 80165be:	689b      	ldr	r3, [r3, #8]
 80165c0:	685b      	ldr	r3, [r3, #4]
 80165c2:	2b00      	cmp	r3, #0
 80165c4:	f000 819e 	beq.w	8016904 <aiPrintBufferInfo+0x3c8>
      ai_u16 s_ = AI_BUFFER_META_INFO_INTQ_GET_SIZE(buffer->meta_info);
 80165c8:	68fb      	ldr	r3, [r7, #12]
 80165ca:	689b      	ldr	r3, [r3, #8]
 80165cc:	2b00      	cmp	r3, #0
 80165ce:	d01d      	beq.n	801660c <aiPrintBufferInfo+0xd0>
 80165d0:	68fb      	ldr	r3, [r7, #12]
 80165d2:	689b      	ldr	r3, [r3, #8]
 80165d4:	681b      	ldr	r3, [r3, #0]
 80165d6:	f003 0301 	and.w	r3, r3, #1
 80165da:	2b00      	cmp	r3, #0
 80165dc:	d016      	beq.n	801660c <aiPrintBufferInfo+0xd0>
 80165de:	68fb      	ldr	r3, [r7, #12]
 80165e0:	689b      	ldr	r3, [r3, #8]
 80165e2:	685b      	ldr	r3, [r3, #4]
 80165e4:	2b00      	cmp	r3, #0
 80165e6:	d011      	beq.n	801660c <aiPrintBufferInfo+0xd0>
 80165e8:	68fb      	ldr	r3, [r7, #12]
 80165ea:	689b      	ldr	r3, [r3, #8]
 80165ec:	2b00      	cmp	r3, #0
 80165ee:	d00a      	beq.n	8016606 <aiPrintBufferInfo+0xca>
 80165f0:	68fb      	ldr	r3, [r7, #12]
 80165f2:	689b      	ldr	r3, [r3, #8]
 80165f4:	681b      	ldr	r3, [r3, #0]
 80165f6:	f003 0301 	and.w	r3, r3, #1
 80165fa:	2b00      	cmp	r3, #0
 80165fc:	d003      	beq.n	8016606 <aiPrintBufferInfo+0xca>
 80165fe:	68fb      	ldr	r3, [r7, #12]
 8016600:	689b      	ldr	r3, [r3, #8]
 8016602:	685b      	ldr	r3, [r3, #4]
 8016604:	e000      	b.n	8016608 <aiPrintBufferInfo+0xcc>
 8016606:	2300      	movs	r3, #0
 8016608:	885b      	ldrh	r3, [r3, #2]
 801660a:	e000      	b.n	801660e <aiPrintBufferInfo+0xd2>
 801660c:	2300      	movs	r3, #0
 801660e:	83fb      	strh	r3, [r7, #30]
      const int max_ = s_> 4?4:s_;
 8016610:	8bfb      	ldrh	r3, [r7, #30]
 8016612:	2b04      	cmp	r3, #4
 8016614:	bf28      	it	cs
 8016616:	2304      	movcs	r3, #4
 8016618:	b29b      	uxth	r3, r3
 801661a:	61bb      	str	r3, [r7, #24]
      LC_PRINT(" %d:", s_);
 801661c:	4b50      	ldr	r3, [pc, #320]	; (8016760 <aiPrintBufferInfo+0x224>)
 801661e:	681b      	ldr	r3, [r3, #0]
 8016620:	8bfa      	ldrh	r2, [r7, #30]
 8016622:	4951      	ldr	r1, [pc, #324]	; (8016768 <aiPrintBufferInfo+0x22c>)
 8016624:	4618      	mov	r0, r3
 8016626:	f00d fa3b 	bl	8023aa0 <fiprintf>
      for (int idx=0; idx<max_; idx++) {
 801662a:	2300      	movs	r3, #0
 801662c:	627b      	str	r3, [r7, #36]	; 0x24
 801662e:	e157      	b.n	80168e0 <aiPrintBufferInfo+0x3a4>
        ai_float scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(buffer->meta_info, idx);
 8016630:	68fb      	ldr	r3, [r7, #12]
 8016632:	689b      	ldr	r3, [r3, #8]
 8016634:	2b00      	cmp	r3, #0
 8016636:	d05d      	beq.n	80166f4 <aiPrintBufferInfo+0x1b8>
 8016638:	68fb      	ldr	r3, [r7, #12]
 801663a:	689b      	ldr	r3, [r3, #8]
 801663c:	681b      	ldr	r3, [r3, #0]
 801663e:	f003 0301 	and.w	r3, r3, #1
 8016642:	2b00      	cmp	r3, #0
 8016644:	d056      	beq.n	80166f4 <aiPrintBufferInfo+0x1b8>
 8016646:	68fb      	ldr	r3, [r7, #12]
 8016648:	689b      	ldr	r3, [r3, #8]
 801664a:	685b      	ldr	r3, [r3, #4]
 801664c:	2b00      	cmp	r3, #0
 801664e:	d051      	beq.n	80166f4 <aiPrintBufferInfo+0x1b8>
 8016650:	68fb      	ldr	r3, [r7, #12]
 8016652:	689b      	ldr	r3, [r3, #8]
 8016654:	2b00      	cmp	r3, #0
 8016656:	d04a      	beq.n	80166ee <aiPrintBufferInfo+0x1b2>
 8016658:	68fb      	ldr	r3, [r7, #12]
 801665a:	689b      	ldr	r3, [r3, #8]
 801665c:	681b      	ldr	r3, [r3, #0]
 801665e:	f003 0301 	and.w	r3, r3, #1
 8016662:	2b00      	cmp	r3, #0
 8016664:	d043      	beq.n	80166ee <aiPrintBufferInfo+0x1b2>
 8016666:	68fb      	ldr	r3, [r7, #12]
 8016668:	689b      	ldr	r3, [r3, #8]
 801666a:	685b      	ldr	r3, [r3, #4]
 801666c:	2b00      	cmp	r3, #0
 801666e:	d03e      	beq.n	80166ee <aiPrintBufferInfo+0x1b2>
 8016670:	68fb      	ldr	r3, [r7, #12]
 8016672:	689b      	ldr	r3, [r3, #8]
 8016674:	2b00      	cmp	r3, #0
 8016676:	d00a      	beq.n	801668e <aiPrintBufferInfo+0x152>
 8016678:	68fb      	ldr	r3, [r7, #12]
 801667a:	689b      	ldr	r3, [r3, #8]
 801667c:	681b      	ldr	r3, [r3, #0]
 801667e:	f003 0301 	and.w	r3, r3, #1
 8016682:	2b00      	cmp	r3, #0
 8016684:	d003      	beq.n	801668e <aiPrintBufferInfo+0x152>
 8016686:	68fb      	ldr	r3, [r7, #12]
 8016688:	689b      	ldr	r3, [r3, #8]
 801668a:	685b      	ldr	r3, [r3, #4]
 801668c:	e000      	b.n	8016690 <aiPrintBufferInfo+0x154>
 801668e:	2300      	movs	r3, #0
 8016690:	685b      	ldr	r3, [r3, #4]
 8016692:	2b00      	cmp	r3, #0
 8016694:	d02b      	beq.n	80166ee <aiPrintBufferInfo+0x1b2>
 8016696:	68fb      	ldr	r3, [r7, #12]
 8016698:	689b      	ldr	r3, [r3, #8]
 801669a:	2b00      	cmp	r3, #0
 801669c:	d00a      	beq.n	80166b4 <aiPrintBufferInfo+0x178>
 801669e:	68fb      	ldr	r3, [r7, #12]
 80166a0:	689b      	ldr	r3, [r3, #8]
 80166a2:	681b      	ldr	r3, [r3, #0]
 80166a4:	f003 0301 	and.w	r3, r3, #1
 80166a8:	2b00      	cmp	r3, #0
 80166aa:	d003      	beq.n	80166b4 <aiPrintBufferInfo+0x178>
 80166ac:	68fb      	ldr	r3, [r7, #12]
 80166ae:	689b      	ldr	r3, [r3, #8]
 80166b0:	685b      	ldr	r3, [r3, #4]
 80166b2:	e000      	b.n	80166b6 <aiPrintBufferInfo+0x17a>
 80166b4:	2300      	movs	r3, #0
 80166b6:	885b      	ldrh	r3, [r3, #2]
 80166b8:	461a      	mov	r2, r3
 80166ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80166bc:	4293      	cmp	r3, r2
 80166be:	da16      	bge.n	80166ee <aiPrintBufferInfo+0x1b2>
 80166c0:	68fb      	ldr	r3, [r7, #12]
 80166c2:	689b      	ldr	r3, [r3, #8]
 80166c4:	2b00      	cmp	r3, #0
 80166c6:	d00a      	beq.n	80166de <aiPrintBufferInfo+0x1a2>
 80166c8:	68fb      	ldr	r3, [r7, #12]
 80166ca:	689b      	ldr	r3, [r3, #8]
 80166cc:	681b      	ldr	r3, [r3, #0]
 80166ce:	f003 0301 	and.w	r3, r3, #1
 80166d2:	2b00      	cmp	r3, #0
 80166d4:	d003      	beq.n	80166de <aiPrintBufferInfo+0x1a2>
 80166d6:	68fb      	ldr	r3, [r7, #12]
 80166d8:	689b      	ldr	r3, [r3, #8]
 80166da:	685b      	ldr	r3, [r3, #4]
 80166dc:	e000      	b.n	80166e0 <aiPrintBufferInfo+0x1a4>
 80166de:	2300      	movs	r3, #0
 80166e0:	685b      	ldr	r3, [r3, #4]
 80166e2:	681a      	ldr	r2, [r3, #0]
 80166e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80166e6:	009b      	lsls	r3, r3, #2
 80166e8:	4413      	add	r3, r2
 80166ea:	681b      	ldr	r3, [r3, #0]
 80166ec:	e004      	b.n	80166f8 <aiPrintBufferInfo+0x1bc>
 80166ee:	f04f 0300 	mov.w	r3, #0
 80166f2:	e001      	b.n	80166f8 <aiPrintBufferInfo+0x1bc>
 80166f4:	f04f 0300 	mov.w	r3, #0
 80166f8:	617b      	str	r3, [r7, #20]
        int zero_point = AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(buffer->meta_info, idx);
 80166fa:	68fb      	ldr	r3, [r7, #12]
 80166fc:	689b      	ldr	r3, [r3, #8]
 80166fe:	2b00      	cmp	r3, #0
 8016700:	f000 80dc 	beq.w	80168bc <aiPrintBufferInfo+0x380>
 8016704:	68fb      	ldr	r3, [r7, #12]
 8016706:	689b      	ldr	r3, [r3, #8]
 8016708:	681b      	ldr	r3, [r3, #0]
 801670a:	f003 0301 	and.w	r3, r3, #1
 801670e:	2b00      	cmp	r3, #0
 8016710:	f000 80d4 	beq.w	80168bc <aiPrintBufferInfo+0x380>
 8016714:	68fb      	ldr	r3, [r7, #12]
 8016716:	689b      	ldr	r3, [r3, #8]
 8016718:	685b      	ldr	r3, [r3, #4]
 801671a:	2b00      	cmp	r3, #0
 801671c:	f000 80ce 	beq.w	80168bc <aiPrintBufferInfo+0x380>
 8016720:	68fb      	ldr	r3, [r7, #12]
 8016722:	689b      	ldr	r3, [r3, #8]
 8016724:	2b00      	cmp	r3, #0
 8016726:	d077      	beq.n	8016818 <aiPrintBufferInfo+0x2dc>
 8016728:	68fb      	ldr	r3, [r7, #12]
 801672a:	689b      	ldr	r3, [r3, #8]
 801672c:	681b      	ldr	r3, [r3, #0]
 801672e:	f003 0301 	and.w	r3, r3, #1
 8016732:	2b00      	cmp	r3, #0
 8016734:	d070      	beq.n	8016818 <aiPrintBufferInfo+0x2dc>
 8016736:	68fb      	ldr	r3, [r7, #12]
 8016738:	689b      	ldr	r3, [r3, #8]
 801673a:	685b      	ldr	r3, [r3, #4]
 801673c:	2b00      	cmp	r3, #0
 801673e:	d06b      	beq.n	8016818 <aiPrintBufferInfo+0x2dc>
 8016740:	68fb      	ldr	r3, [r7, #12]
 8016742:	689b      	ldr	r3, [r3, #8]
 8016744:	2b00      	cmp	r3, #0
 8016746:	d011      	beq.n	801676c <aiPrintBufferInfo+0x230>
 8016748:	68fb      	ldr	r3, [r7, #12]
 801674a:	689b      	ldr	r3, [r3, #8]
 801674c:	681b      	ldr	r3, [r3, #0]
 801674e:	f003 0301 	and.w	r3, r3, #1
 8016752:	2b00      	cmp	r3, #0
 8016754:	d00a      	beq.n	801676c <aiPrintBufferInfo+0x230>
 8016756:	68fb      	ldr	r3, [r7, #12]
 8016758:	689b      	ldr	r3, [r3, #8]
 801675a:	685b      	ldr	r3, [r3, #4]
 801675c:	e007      	b.n	801676e <aiPrintBufferInfo+0x232>
 801675e:	bf00      	nop
 8016760:	20026ab8 	.word	0x20026ab8
 8016764:	08026cbc 	.word	0x08026cbc
 8016768:	08026cd4 	.word	0x08026cd4
 801676c:	2300      	movs	r3, #0
 801676e:	881b      	ldrh	r3, [r3, #0]
 8016770:	f003 0302 	and.w	r3, r3, #2
 8016774:	2b00      	cmp	r3, #0
 8016776:	d04f      	beq.n	8016818 <aiPrintBufferInfo+0x2dc>
 8016778:	68fb      	ldr	r3, [r7, #12]
 801677a:	689b      	ldr	r3, [r3, #8]
 801677c:	2b00      	cmp	r3, #0
 801677e:	d049      	beq.n	8016814 <aiPrintBufferInfo+0x2d8>
 8016780:	68fb      	ldr	r3, [r7, #12]
 8016782:	689b      	ldr	r3, [r3, #8]
 8016784:	681b      	ldr	r3, [r3, #0]
 8016786:	f003 0301 	and.w	r3, r3, #1
 801678a:	2b00      	cmp	r3, #0
 801678c:	d042      	beq.n	8016814 <aiPrintBufferInfo+0x2d8>
 801678e:	68fb      	ldr	r3, [r7, #12]
 8016790:	689b      	ldr	r3, [r3, #8]
 8016792:	685b      	ldr	r3, [r3, #4]
 8016794:	2b00      	cmp	r3, #0
 8016796:	d03d      	beq.n	8016814 <aiPrintBufferInfo+0x2d8>
 8016798:	68fb      	ldr	r3, [r7, #12]
 801679a:	689b      	ldr	r3, [r3, #8]
 801679c:	2b00      	cmp	r3, #0
 801679e:	d00a      	beq.n	80167b6 <aiPrintBufferInfo+0x27a>
 80167a0:	68fb      	ldr	r3, [r7, #12]
 80167a2:	689b      	ldr	r3, [r3, #8]
 80167a4:	681b      	ldr	r3, [r3, #0]
 80167a6:	f003 0301 	and.w	r3, r3, #1
 80167aa:	2b00      	cmp	r3, #0
 80167ac:	d003      	beq.n	80167b6 <aiPrintBufferInfo+0x27a>
 80167ae:	68fb      	ldr	r3, [r7, #12]
 80167b0:	689b      	ldr	r3, [r3, #8]
 80167b2:	685b      	ldr	r3, [r3, #4]
 80167b4:	e000      	b.n	80167b8 <aiPrintBufferInfo+0x27c>
 80167b6:	2300      	movs	r3, #0
 80167b8:	685b      	ldr	r3, [r3, #4]
 80167ba:	2b00      	cmp	r3, #0
 80167bc:	d02a      	beq.n	8016814 <aiPrintBufferInfo+0x2d8>
 80167be:	68fb      	ldr	r3, [r7, #12]
 80167c0:	689b      	ldr	r3, [r3, #8]
 80167c2:	2b00      	cmp	r3, #0
 80167c4:	d00a      	beq.n	80167dc <aiPrintBufferInfo+0x2a0>
 80167c6:	68fb      	ldr	r3, [r7, #12]
 80167c8:	689b      	ldr	r3, [r3, #8]
 80167ca:	681b      	ldr	r3, [r3, #0]
 80167cc:	f003 0301 	and.w	r3, r3, #1
 80167d0:	2b00      	cmp	r3, #0
 80167d2:	d003      	beq.n	80167dc <aiPrintBufferInfo+0x2a0>
 80167d4:	68fb      	ldr	r3, [r7, #12]
 80167d6:	689b      	ldr	r3, [r3, #8]
 80167d8:	685b      	ldr	r3, [r3, #4]
 80167da:	e000      	b.n	80167de <aiPrintBufferInfo+0x2a2>
 80167dc:	2300      	movs	r3, #0
 80167de:	885b      	ldrh	r3, [r3, #2]
 80167e0:	461a      	mov	r2, r3
 80167e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80167e4:	4293      	cmp	r3, r2
 80167e6:	da15      	bge.n	8016814 <aiPrintBufferInfo+0x2d8>
 80167e8:	68fb      	ldr	r3, [r7, #12]
 80167ea:	689b      	ldr	r3, [r3, #8]
 80167ec:	2b00      	cmp	r3, #0
 80167ee:	d00a      	beq.n	8016806 <aiPrintBufferInfo+0x2ca>
 80167f0:	68fb      	ldr	r3, [r7, #12]
 80167f2:	689b      	ldr	r3, [r3, #8]
 80167f4:	681b      	ldr	r3, [r3, #0]
 80167f6:	f003 0301 	and.w	r3, r3, #1
 80167fa:	2b00      	cmp	r3, #0
 80167fc:	d003      	beq.n	8016806 <aiPrintBufferInfo+0x2ca>
 80167fe:	68fb      	ldr	r3, [r7, #12]
 8016800:	689b      	ldr	r3, [r3, #8]
 8016802:	685b      	ldr	r3, [r3, #4]
 8016804:	e000      	b.n	8016808 <aiPrintBufferInfo+0x2cc>
 8016806:	2300      	movs	r3, #0
 8016808:	685b      	ldr	r3, [r3, #4]
 801680a:	685a      	ldr	r2, [r3, #4]
 801680c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801680e:	4413      	add	r3, r2
 8016810:	781b      	ldrb	r3, [r3, #0]
 8016812:	e052      	b.n	80168ba <aiPrintBufferInfo+0x37e>
 8016814:	2300      	movs	r3, #0
 8016816:	e050      	b.n	80168ba <aiPrintBufferInfo+0x37e>
 8016818:	68fb      	ldr	r3, [r7, #12]
 801681a:	689b      	ldr	r3, [r3, #8]
 801681c:	2b00      	cmp	r3, #0
 801681e:	d04a      	beq.n	80168b6 <aiPrintBufferInfo+0x37a>
 8016820:	68fb      	ldr	r3, [r7, #12]
 8016822:	689b      	ldr	r3, [r3, #8]
 8016824:	681b      	ldr	r3, [r3, #0]
 8016826:	f003 0301 	and.w	r3, r3, #1
 801682a:	2b00      	cmp	r3, #0
 801682c:	d043      	beq.n	80168b6 <aiPrintBufferInfo+0x37a>
 801682e:	68fb      	ldr	r3, [r7, #12]
 8016830:	689b      	ldr	r3, [r3, #8]
 8016832:	685b      	ldr	r3, [r3, #4]
 8016834:	2b00      	cmp	r3, #0
 8016836:	d03e      	beq.n	80168b6 <aiPrintBufferInfo+0x37a>
 8016838:	68fb      	ldr	r3, [r7, #12]
 801683a:	689b      	ldr	r3, [r3, #8]
 801683c:	2b00      	cmp	r3, #0
 801683e:	d00a      	beq.n	8016856 <aiPrintBufferInfo+0x31a>
 8016840:	68fb      	ldr	r3, [r7, #12]
 8016842:	689b      	ldr	r3, [r3, #8]
 8016844:	681b      	ldr	r3, [r3, #0]
 8016846:	f003 0301 	and.w	r3, r3, #1
 801684a:	2b00      	cmp	r3, #0
 801684c:	d003      	beq.n	8016856 <aiPrintBufferInfo+0x31a>
 801684e:	68fb      	ldr	r3, [r7, #12]
 8016850:	689b      	ldr	r3, [r3, #8]
 8016852:	685b      	ldr	r3, [r3, #4]
 8016854:	e000      	b.n	8016858 <aiPrintBufferInfo+0x31c>
 8016856:	2300      	movs	r3, #0
 8016858:	685b      	ldr	r3, [r3, #4]
 801685a:	2b00      	cmp	r3, #0
 801685c:	d02b      	beq.n	80168b6 <aiPrintBufferInfo+0x37a>
 801685e:	68fb      	ldr	r3, [r7, #12]
 8016860:	689b      	ldr	r3, [r3, #8]
 8016862:	2b00      	cmp	r3, #0
 8016864:	d00a      	beq.n	801687c <aiPrintBufferInfo+0x340>
 8016866:	68fb      	ldr	r3, [r7, #12]
 8016868:	689b      	ldr	r3, [r3, #8]
 801686a:	681b      	ldr	r3, [r3, #0]
 801686c:	f003 0301 	and.w	r3, r3, #1
 8016870:	2b00      	cmp	r3, #0
 8016872:	d003      	beq.n	801687c <aiPrintBufferInfo+0x340>
 8016874:	68fb      	ldr	r3, [r7, #12]
 8016876:	689b      	ldr	r3, [r3, #8]
 8016878:	685b      	ldr	r3, [r3, #4]
 801687a:	e000      	b.n	801687e <aiPrintBufferInfo+0x342>
 801687c:	2300      	movs	r3, #0
 801687e:	885b      	ldrh	r3, [r3, #2]
 8016880:	461a      	mov	r2, r3
 8016882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016884:	4293      	cmp	r3, r2
 8016886:	da16      	bge.n	80168b6 <aiPrintBufferInfo+0x37a>
 8016888:	68fb      	ldr	r3, [r7, #12]
 801688a:	689b      	ldr	r3, [r3, #8]
 801688c:	2b00      	cmp	r3, #0
 801688e:	d00a      	beq.n	80168a6 <aiPrintBufferInfo+0x36a>
 8016890:	68fb      	ldr	r3, [r7, #12]
 8016892:	689b      	ldr	r3, [r3, #8]
 8016894:	681b      	ldr	r3, [r3, #0]
 8016896:	f003 0301 	and.w	r3, r3, #1
 801689a:	2b00      	cmp	r3, #0
 801689c:	d003      	beq.n	80168a6 <aiPrintBufferInfo+0x36a>
 801689e:	68fb      	ldr	r3, [r7, #12]
 80168a0:	689b      	ldr	r3, [r3, #8]
 80168a2:	685b      	ldr	r3, [r3, #4]
 80168a4:	e000      	b.n	80168a8 <aiPrintBufferInfo+0x36c>
 80168a6:	2300      	movs	r3, #0
 80168a8:	685b      	ldr	r3, [r3, #4]
 80168aa:	685a      	ldr	r2, [r3, #4]
 80168ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80168ae:	4413      	add	r3, r2
 80168b0:	f993 3000 	ldrsb.w	r3, [r3]
 80168b4:	e001      	b.n	80168ba <aiPrintBufferInfo+0x37e>
 80168b6:	2300      	movs	r3, #0
 80168b8:	e001      	b.n	80168be <aiPrintBufferInfo+0x382>
 80168ba:	e000      	b.n	80168be <aiPrintBufferInfo+0x382>
 80168bc:	2300      	movs	r3, #0
 80168be:	613b      	str	r3, [r7, #16]
        LC_PRINT("(%f,%d),", scale, zero_point);
 80168c0:	4b3d      	ldr	r3, [pc, #244]	; (80169b8 <aiPrintBufferInfo+0x47c>)
 80168c2:	681c      	ldr	r4, [r3, #0]
 80168c4:	6978      	ldr	r0, [r7, #20]
 80168c6:	f7e9 ff73 	bl	80007b0 <__aeabi_f2d>
 80168ca:	4602      	mov	r2, r0
 80168cc:	460b      	mov	r3, r1
 80168ce:	6939      	ldr	r1, [r7, #16]
 80168d0:	9100      	str	r1, [sp, #0]
 80168d2:	493a      	ldr	r1, [pc, #232]	; (80169bc <aiPrintBufferInfo+0x480>)
 80168d4:	4620      	mov	r0, r4
 80168d6:	f00d f8e3 	bl	8023aa0 <fiprintf>
      for (int idx=0; idx<max_; idx++) {
 80168da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80168dc:	3301      	adds	r3, #1
 80168de:	627b      	str	r3, [r7, #36]	; 0x24
 80168e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80168e2:	69bb      	ldr	r3, [r7, #24]
 80168e4:	429a      	cmp	r2, r3
 80168e6:	f6ff aea3 	blt.w	8016630 <aiPrintBufferInfo+0xf4>
      }
      LC_PRINT((s_ > max_)?"..":"");
 80168ea:	4b33      	ldr	r3, [pc, #204]	; (80169b8 <aiPrintBufferInfo+0x47c>)
 80168ec:	6818      	ldr	r0, [r3, #0]
 80168ee:	8bfb      	ldrh	r3, [r7, #30]
 80168f0:	69ba      	ldr	r2, [r7, #24]
 80168f2:	429a      	cmp	r2, r3
 80168f4:	da01      	bge.n	80168fa <aiPrintBufferInfo+0x3be>
 80168f6:	4b32      	ldr	r3, [pc, #200]	; (80169c0 <aiPrintBufferInfo+0x484>)
 80168f8:	e000      	b.n	80168fc <aiPrintBufferInfo+0x3c0>
 80168fa:	4b32      	ldr	r3, [pc, #200]	; (80169c4 <aiPrintBufferInfo+0x488>)
 80168fc:	4619      	mov	r1, r3
 80168fe:	f00d f8cf 	bl	8023aa0 <fiprintf>
    if (AI_BUFFER_META_INFO_INTQ(buffer->meta_info)) {
 8016902:	e02a      	b.n	801695a <aiPrintBufferInfo+0x41e>
    } else if (AI_BUFFER_FMT_GET_BITS(fmt) < 8) {
 8016904:	6a3b      	ldr	r3, [r7, #32]
 8016906:	11db      	asrs	r3, r3, #7
 8016908:	f003 0378 	and.w	r3, r3, #120	; 0x78
 801690c:	2b00      	cmp	r3, #0
 801690e:	d10a      	bne.n	8016926 <aiPrintBufferInfo+0x3ea>
      /* lower of 8b format */
      LC_PRINT(" int32-%db", (int)AI_BUFFER_FMT_GET_BITS(fmt));
 8016910:	4b29      	ldr	r3, [pc, #164]	; (80169b8 <aiPrintBufferInfo+0x47c>)
 8016912:	6818      	ldr	r0, [r3, #0]
 8016914:	6a3b      	ldr	r3, [r7, #32]
 8016916:	11db      	asrs	r3, r3, #7
 8016918:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801691c:	461a      	mov	r2, r3
 801691e:	492a      	ldr	r1, [pc, #168]	; (80169c8 <aiPrintBufferInfo+0x48c>)
 8016920:	f00d f8be 	bl	8023aa0 <fiprintf>
 8016924:	e019      	b.n	801695a <aiPrintBufferInfo+0x41e>
    } else {
      LC_PRINT(" Q%d.%d",
 8016926:	4b24      	ldr	r3, [pc, #144]	; (80169b8 <aiPrintBufferInfo+0x47c>)
 8016928:	6818      	ldr	r0, [r3, #0]
 801692a:	6a3b      	ldr	r3, [r7, #32]
 801692c:	11db      	asrs	r3, r3, #7
 801692e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8016932:	6a3b      	ldr	r3, [r7, #32]
 8016934:	b2db      	uxtb	r3, r3
 8016936:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801693a:	f1a3 0140 	sub.w	r1, r3, #64	; 0x40
 801693e:	6a3b      	ldr	r3, [r7, #32]
 8016940:	15db      	asrs	r3, r3, #23
 8016942:	f003 0301 	and.w	r3, r3, #1
 8016946:	440b      	add	r3, r1
 8016948:	1ad2      	subs	r2, r2, r3
 801694a:	6a3b      	ldr	r3, [r7, #32]
 801694c:	b2db      	uxtb	r3, r3
 801694e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016952:	3b40      	subs	r3, #64	; 0x40
 8016954:	491d      	ldr	r1, [pc, #116]	; (80169cc <aiPrintBufferInfo+0x490>)
 8016956:	f00d f8a3 	bl	8023aa0 <fiprintf>
          AI_BUFFER_FMT_GET_FBITS(fmt)
      );
    }
  }
  /* @ + size in bytes */
  if (buffer->data)
 801695a:	68fb      	ldr	r3, [r7, #12]
 801695c:	685b      	ldr	r3, [r3, #4]
 801695e:	2b00      	cmp	r3, #0
 8016960:	d014      	beq.n	801698c <aiPrintBufferInfo+0x450>
    LC_PRINT(" @0x%X/%d",
 8016962:	4b15      	ldr	r3, [pc, #84]	; (80169b8 <aiPrintBufferInfo+0x47c>)
 8016964:	681c      	ldr	r4, [r3, #0]
 8016966:	68fb      	ldr	r3, [r7, #12]
 8016968:	685b      	ldr	r3, [r3, #4]
 801696a:	461d      	mov	r5, r3
 801696c:	2101      	movs	r1, #1
 801696e:	68f8      	ldr	r0, [r7, #12]
 8016970:	f00a f904 	bl	8020b7c <ai_buffer_get_size>
 8016974:	4603      	mov	r3, r0
 8016976:	6a39      	ldr	r1, [r7, #32]
 8016978:	4618      	mov	r0, r3
 801697a:	f00a f92f 	bl	8020bdc <ai_buffer_get_byte_size>
 801697e:	4603      	mov	r3, r0
 8016980:	462a      	mov	r2, r5
 8016982:	4913      	ldr	r1, [pc, #76]	; (80169d0 <aiPrintBufferInfo+0x494>)
 8016984:	4620      	mov	r0, r4
 8016986:	f00d f88b 	bl	8023aa0 <fiprintf>
    );
  else
    LC_PRINT(" (User Domain)/%d",
        (int)AI_BUFFER_BYTE_SIZE(AI_BUFFER_SIZE(buffer), fmt)
    );
}
 801698a:	e010      	b.n	80169ae <aiPrintBufferInfo+0x472>
    LC_PRINT(" (User Domain)/%d",
 801698c:	4b0a      	ldr	r3, [pc, #40]	; (80169b8 <aiPrintBufferInfo+0x47c>)
 801698e:	681c      	ldr	r4, [r3, #0]
 8016990:	2101      	movs	r1, #1
 8016992:	68f8      	ldr	r0, [r7, #12]
 8016994:	f00a f8f2 	bl	8020b7c <ai_buffer_get_size>
 8016998:	4603      	mov	r3, r0
 801699a:	6a39      	ldr	r1, [r7, #32]
 801699c:	4618      	mov	r0, r3
 801699e:	f00a f91d 	bl	8020bdc <ai_buffer_get_byte_size>
 80169a2:	4603      	mov	r3, r0
 80169a4:	461a      	mov	r2, r3
 80169a6:	490b      	ldr	r1, [pc, #44]	; (80169d4 <aiPrintBufferInfo+0x498>)
 80169a8:	4620      	mov	r0, r4
 80169aa:	f00d f879 	bl	8023aa0 <fiprintf>
}
 80169ae:	bf00      	nop
 80169b0:	372c      	adds	r7, #44	; 0x2c
 80169b2:	46bd      	mov	sp, r7
 80169b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80169b6:	bf00      	nop
 80169b8:	20026ab8 	.word	0x20026ab8
 80169bc:	08026cdc 	.word	0x08026cdc
 80169c0:	08026ce8 	.word	0x08026ce8
 80169c4:	08026cec 	.word	0x08026cec
 80169c8:	08026cf0 	.word	0x08026cf0
 80169cc:	08026cfc 	.word	0x08026cfc
 80169d0:	08026d04 	.word	0x08026d04
 80169d4:	08026d10 	.word	0x08026d10

080169d8 <aiPrintNetworkInfo>:

void aiPrintNetworkInfo(const ai_network_report* report)
{
 80169d8:	b580      	push	{r7, lr}
 80169da:	b08a      	sub	sp, #40	; 0x28
 80169dc:	af02      	add	r7, sp, #8
 80169de:	6078      	str	r0, [r7, #4]
  LC_PRINT("Network informations...\r\n");
 80169e0:	4b90      	ldr	r3, [pc, #576]	; (8016c24 <aiPrintNetworkInfo+0x24c>)
 80169e2:	681b      	ldr	r3, [r3, #0]
 80169e4:	2219      	movs	r2, #25
 80169e6:	2101      	movs	r1, #1
 80169e8:	488f      	ldr	r0, [pc, #572]	; (8016c28 <aiPrintNetworkInfo+0x250>)
 80169ea:	f00d f8cb 	bl	8023b84 <fwrite>
  LC_PRINT(" model name         : %s\r\n", report->model_name);
 80169ee:	4b8d      	ldr	r3, [pc, #564]	; (8016c24 <aiPrintNetworkInfo+0x24c>)
 80169f0:	6818      	ldr	r0, [r3, #0]
 80169f2:	687b      	ldr	r3, [r7, #4]
 80169f4:	681b      	ldr	r3, [r3, #0]
 80169f6:	461a      	mov	r2, r3
 80169f8:	498c      	ldr	r1, [pc, #560]	; (8016c2c <aiPrintNetworkInfo+0x254>)
 80169fa:	f00d f851 	bl	8023aa0 <fiprintf>
  LC_PRINT(" model signature    : %s\r\n", report->model_signature);
 80169fe:	4b89      	ldr	r3, [pc, #548]	; (8016c24 <aiPrintNetworkInfo+0x24c>)
 8016a00:	6818      	ldr	r0, [r3, #0]
 8016a02:	687b      	ldr	r3, [r7, #4]
 8016a04:	685b      	ldr	r3, [r3, #4]
 8016a06:	461a      	mov	r2, r3
 8016a08:	4989      	ldr	r1, [pc, #548]	; (8016c30 <aiPrintNetworkInfo+0x258>)
 8016a0a:	f00d f849 	bl	8023aa0 <fiprintf>
  LC_PRINT(" model datetime     : %s\r\n", report->model_datetime);
 8016a0e:	4b85      	ldr	r3, [pc, #532]	; (8016c24 <aiPrintNetworkInfo+0x24c>)
 8016a10:	6818      	ldr	r0, [r3, #0]
 8016a12:	687b      	ldr	r3, [r7, #4]
 8016a14:	689b      	ldr	r3, [r3, #8]
 8016a16:	461a      	mov	r2, r3
 8016a18:	4986      	ldr	r1, [pc, #536]	; (8016c34 <aiPrintNetworkInfo+0x25c>)
 8016a1a:	f00d f841 	bl	8023aa0 <fiprintf>
  LC_PRINT(" compile datetime   : %s\r\n", report->compile_datetime);
 8016a1e:	4b81      	ldr	r3, [pc, #516]	; (8016c24 <aiPrintNetworkInfo+0x24c>)
 8016a20:	6818      	ldr	r0, [r3, #0]
 8016a22:	687b      	ldr	r3, [r7, #4]
 8016a24:	68db      	ldr	r3, [r3, #12]
 8016a26:	461a      	mov	r2, r3
 8016a28:	4983      	ldr	r1, [pc, #524]	; (8016c38 <aiPrintNetworkInfo+0x260>)
 8016a2a:	f00d f839 	bl	8023aa0 <fiprintf>
  LC_PRINT(" runtime version    : %d.%d.%d\r\n",
 8016a2e:	4b7d      	ldr	r3, [pc, #500]	; (8016c24 <aiPrintNetworkInfo+0x24c>)
 8016a30:	6818      	ldr	r0, [r3, #0]
 8016a32:	687b      	ldr	r3, [r7, #4]
 8016a34:	7d1b      	ldrb	r3, [r3, #20]
 8016a36:	461a      	mov	r2, r3
 8016a38:	687b      	ldr	r3, [r7, #4]
 8016a3a:	7d5b      	ldrb	r3, [r3, #21]
 8016a3c:	4619      	mov	r1, r3
 8016a3e:	687b      	ldr	r3, [r7, #4]
 8016a40:	7d9b      	ldrb	r3, [r3, #22]
 8016a42:	9300      	str	r3, [sp, #0]
 8016a44:	460b      	mov	r3, r1
 8016a46:	497d      	ldr	r1, [pc, #500]	; (8016c3c <aiPrintNetworkInfo+0x264>)
 8016a48:	f00d f82a 	bl	8023aa0 <fiprintf>
      report->runtime_version.major,
      report->runtime_version.minor,
      report->runtime_version.micro);
  if (report->tool_revision[0])
 8016a4c:	687b      	ldr	r3, [r7, #4]
 8016a4e:	699b      	ldr	r3, [r3, #24]
 8016a50:	781b      	ldrb	r3, [r3, #0]
 8016a52:	2b00      	cmp	r3, #0
 8016a54:	d00e      	beq.n	8016a74 <aiPrintNetworkInfo+0x9c>
    LC_PRINT(" Tool revision      : %s\r\n", (report->tool_revision[0])?report->tool_revision:"");
 8016a56:	4b73      	ldr	r3, [pc, #460]	; (8016c24 <aiPrintNetworkInfo+0x24c>)
 8016a58:	6818      	ldr	r0, [r3, #0]
 8016a5a:	687b      	ldr	r3, [r7, #4]
 8016a5c:	699b      	ldr	r3, [r3, #24]
 8016a5e:	781b      	ldrb	r3, [r3, #0]
 8016a60:	2b00      	cmp	r3, #0
 8016a62:	d002      	beq.n	8016a6a <aiPrintNetworkInfo+0x92>
 8016a64:	687b      	ldr	r3, [r7, #4]
 8016a66:	699b      	ldr	r3, [r3, #24]
 8016a68:	e000      	b.n	8016a6c <aiPrintNetworkInfo+0x94>
 8016a6a:	4b75      	ldr	r3, [pc, #468]	; (8016c40 <aiPrintNetworkInfo+0x268>)
 8016a6c:	461a      	mov	r2, r3
 8016a6e:	4975      	ldr	r1, [pc, #468]	; (8016c44 <aiPrintNetworkInfo+0x26c>)
 8016a70:	f00d f816 	bl	8023aa0 <fiprintf>
  LC_PRINT(" tools version      : %d.%d.%d\r\n",
 8016a74:	4b6b      	ldr	r3, [pc, #428]	; (8016c24 <aiPrintNetworkInfo+0x24c>)
 8016a76:	6818      	ldr	r0, [r3, #0]
 8016a78:	687b      	ldr	r3, [r7, #4]
 8016a7a:	7f1b      	ldrb	r3, [r3, #28]
 8016a7c:	461a      	mov	r2, r3
 8016a7e:	687b      	ldr	r3, [r7, #4]
 8016a80:	7f5b      	ldrb	r3, [r3, #29]
 8016a82:	4619      	mov	r1, r3
 8016a84:	687b      	ldr	r3, [r7, #4]
 8016a86:	7f9b      	ldrb	r3, [r3, #30]
 8016a88:	9300      	str	r3, [sp, #0]
 8016a8a:	460b      	mov	r3, r1
 8016a8c:	496e      	ldr	r1, [pc, #440]	; (8016c48 <aiPrintNetworkInfo+0x270>)
 8016a8e:	f00d f807 	bl	8023aa0 <fiprintf>
      report->tool_version.major,
      report->tool_version.minor,
      report->tool_version.micro);
  LC_PRINT(" complexity         : %lu MACC\r\n", (unsigned long)report->n_macc);
 8016a92:	4b64      	ldr	r3, [pc, #400]	; (8016c24 <aiPrintNetworkInfo+0x24c>)
 8016a94:	6818      	ldr	r0, [r3, #0]
 8016a96:	687b      	ldr	r3, [r7, #4]
 8016a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016a9a:	461a      	mov	r2, r3
 8016a9c:	496b      	ldr	r1, [pc, #428]	; (8016c4c <aiPrintNetworkInfo+0x274>)
 8016a9e:	f00c ffff 	bl	8023aa0 <fiprintf>
  LC_PRINT(" c-nodes            : %d\r\n", (int)report->n_nodes);
 8016aa2:	4b60      	ldr	r3, [pc, #384]	; (8016c24 <aiPrintNetworkInfo+0x24c>)
 8016aa4:	6818      	ldr	r0, [r3, #0]
 8016aa6:	687b      	ldr	r3, [r7, #4]
 8016aa8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016aaa:	461a      	mov	r2, r3
 8016aac:	4968      	ldr	r1, [pc, #416]	; (8016c50 <aiPrintNetworkInfo+0x278>)
 8016aae:	f00c fff7 	bl	8023aa0 <fiprintf>

  LC_PRINT(" map_activations    : %d\r\n", report->map_activations.size);
 8016ab2:	4b5c      	ldr	r3, [pc, #368]	; (8016c24 <aiPrintNetworkInfo+0x24c>)
 8016ab4:	6818      	ldr	r0, [r3, #0]
 8016ab6:	687b      	ldr	r3, [r7, #4]
 8016ab8:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8016abc:	461a      	mov	r2, r3
 8016abe:	4965      	ldr	r1, [pc, #404]	; (8016c54 <aiPrintNetworkInfo+0x27c>)
 8016ac0:	f00c ffee 	bl	8023aa0 <fiprintf>
  for (int idx=0; idx<report->map_activations.size;idx++) {
 8016ac4:	2300      	movs	r3, #0
 8016ac6:	61fb      	str	r3, [r7, #28]
 8016ac8:	e01c      	b.n	8016b04 <aiPrintNetworkInfo+0x12c>
      const ai_buffer *buffer = &report->map_activations.buffer[idx];
 8016aca:	687b      	ldr	r3, [r7, #4]
 8016acc:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8016ace:	69fa      	ldr	r2, [r7, #28]
 8016ad0:	4613      	mov	r3, r2
 8016ad2:	00db      	lsls	r3, r3, #3
 8016ad4:	1a9b      	subs	r3, r3, r2
 8016ad6:	009b      	lsls	r3, r3, #2
 8016ad8:	440b      	add	r3, r1
 8016ada:	60bb      	str	r3, [r7, #8]
      LC_PRINT("  [%d] ", idx);
 8016adc:	4b51      	ldr	r3, [pc, #324]	; (8016c24 <aiPrintNetworkInfo+0x24c>)
 8016ade:	681b      	ldr	r3, [r3, #0]
 8016ae0:	69fa      	ldr	r2, [r7, #28]
 8016ae2:	495d      	ldr	r1, [pc, #372]	; (8016c58 <aiPrintNetworkInfo+0x280>)
 8016ae4:	4618      	mov	r0, r3
 8016ae6:	f00c ffdb 	bl	8023aa0 <fiprintf>
      aiPrintBufferInfo(buffer);
 8016aea:	68b8      	ldr	r0, [r7, #8]
 8016aec:	f7ff fd26 	bl	801653c <aiPrintBufferInfo>
      LC_PRINT("\r\n");
 8016af0:	4b4c      	ldr	r3, [pc, #304]	; (8016c24 <aiPrintNetworkInfo+0x24c>)
 8016af2:	681b      	ldr	r3, [r3, #0]
 8016af4:	2202      	movs	r2, #2
 8016af6:	2101      	movs	r1, #1
 8016af8:	4858      	ldr	r0, [pc, #352]	; (8016c5c <aiPrintNetworkInfo+0x284>)
 8016afa:	f00d f843 	bl	8023b84 <fwrite>
  for (int idx=0; idx<report->map_activations.size;idx++) {
 8016afe:	69fb      	ldr	r3, [r7, #28]
 8016b00:	3301      	adds	r3, #1
 8016b02:	61fb      	str	r3, [r7, #28]
 8016b04:	687b      	ldr	r3, [r7, #4]
 8016b06:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8016b0a:	461a      	mov	r2, r3
 8016b0c:	69fb      	ldr	r3, [r7, #28]
 8016b0e:	4293      	cmp	r3, r2
 8016b10:	dbdb      	blt.n	8016aca <aiPrintNetworkInfo+0xf2>
  }

  LC_PRINT(" map_weights        : %d\r\n", report->map_weights.size);
 8016b12:	4b44      	ldr	r3, [pc, #272]	; (8016c24 <aiPrintNetworkInfo+0x24c>)
 8016b14:	6818      	ldr	r0, [r3, #0]
 8016b16:	687b      	ldr	r3, [r7, #4]
 8016b18:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8016b1c:	461a      	mov	r2, r3
 8016b1e:	4950      	ldr	r1, [pc, #320]	; (8016c60 <aiPrintNetworkInfo+0x288>)
 8016b20:	f00c ffbe 	bl	8023aa0 <fiprintf>
  for (int idx=0; idx<report->map_weights.size;idx++) {
 8016b24:	2300      	movs	r3, #0
 8016b26:	61bb      	str	r3, [r7, #24]
 8016b28:	e01c      	b.n	8016b64 <aiPrintNetworkInfo+0x18c>
      const ai_buffer *buffer = &report->map_weights.buffer[idx];
 8016b2a:	687b      	ldr	r3, [r7, #4]
 8016b2c:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8016b2e:	69ba      	ldr	r2, [r7, #24]
 8016b30:	4613      	mov	r3, r2
 8016b32:	00db      	lsls	r3, r3, #3
 8016b34:	1a9b      	subs	r3, r3, r2
 8016b36:	009b      	lsls	r3, r3, #2
 8016b38:	440b      	add	r3, r1
 8016b3a:	60fb      	str	r3, [r7, #12]
      LC_PRINT("  [%d] ", idx);
 8016b3c:	4b39      	ldr	r3, [pc, #228]	; (8016c24 <aiPrintNetworkInfo+0x24c>)
 8016b3e:	681b      	ldr	r3, [r3, #0]
 8016b40:	69ba      	ldr	r2, [r7, #24]
 8016b42:	4945      	ldr	r1, [pc, #276]	; (8016c58 <aiPrintNetworkInfo+0x280>)
 8016b44:	4618      	mov	r0, r3
 8016b46:	f00c ffab 	bl	8023aa0 <fiprintf>
      aiPrintBufferInfo(buffer);
 8016b4a:	68f8      	ldr	r0, [r7, #12]
 8016b4c:	f7ff fcf6 	bl	801653c <aiPrintBufferInfo>
      LC_PRINT("\r\n");
 8016b50:	4b34      	ldr	r3, [pc, #208]	; (8016c24 <aiPrintNetworkInfo+0x24c>)
 8016b52:	681b      	ldr	r3, [r3, #0]
 8016b54:	2202      	movs	r2, #2
 8016b56:	2101      	movs	r1, #1
 8016b58:	4840      	ldr	r0, [pc, #256]	; (8016c5c <aiPrintNetworkInfo+0x284>)
 8016b5a:	f00d f813 	bl	8023b84 <fwrite>
  for (int idx=0; idx<report->map_weights.size;idx++) {
 8016b5e:	69bb      	ldr	r3, [r7, #24]
 8016b60:	3301      	adds	r3, #1
 8016b62:	61bb      	str	r3, [r7, #24]
 8016b64:	687b      	ldr	r3, [r7, #4]
 8016b66:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8016b6a:	461a      	mov	r2, r3
 8016b6c:	69bb      	ldr	r3, [r7, #24]
 8016b6e:	4293      	cmp	r3, r2
 8016b70:	dbdb      	blt.n	8016b2a <aiPrintNetworkInfo+0x152>
  }

  LC_PRINT(" n_inputs/n_outputs : %u/%u\r\n", report->n_inputs,
 8016b72:	4b2c      	ldr	r3, [pc, #176]	; (8016c24 <aiPrintNetworkInfo+0x24c>)
 8016b74:	6818      	ldr	r0, [r3, #0]
 8016b76:	687b      	ldr	r3, [r7, #4]
 8016b78:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8016b7a:	461a      	mov	r2, r3
 8016b7c:	687b      	ldr	r3, [r7, #4]
 8016b7e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016b80:	4938      	ldr	r1, [pc, #224]	; (8016c64 <aiPrintNetworkInfo+0x28c>)
 8016b82:	f00c ff8d 	bl	8023aa0 <fiprintf>
          report->n_outputs);

  for (int i=0; i<report->n_inputs; i++) {
 8016b86:	2300      	movs	r3, #0
 8016b88:	617b      	str	r3, [r7, #20]
 8016b8a:	e01b      	b.n	8016bc4 <aiPrintNetworkInfo+0x1ec>
    // LC_PRINT("  I[%d] %s\r\n", i, aiGetBufferDesc(&report->inputs[i]));
    LC_PRINT("  I[%d] ", i);
 8016b8c:	4b25      	ldr	r3, [pc, #148]	; (8016c24 <aiPrintNetworkInfo+0x24c>)
 8016b8e:	681b      	ldr	r3, [r3, #0]
 8016b90:	697a      	ldr	r2, [r7, #20]
 8016b92:	4935      	ldr	r1, [pc, #212]	; (8016c68 <aiPrintNetworkInfo+0x290>)
 8016b94:	4618      	mov	r0, r3
 8016b96:	f00c ff83 	bl	8023aa0 <fiprintf>
    aiPrintBufferInfo(&report->inputs[i]);
 8016b9a:	687b      	ldr	r3, [r7, #4]
 8016b9c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8016b9e:	697a      	ldr	r2, [r7, #20]
 8016ba0:	4613      	mov	r3, r2
 8016ba2:	00db      	lsls	r3, r3, #3
 8016ba4:	1a9b      	subs	r3, r3, r2
 8016ba6:	009b      	lsls	r3, r3, #2
 8016ba8:	440b      	add	r3, r1
 8016baa:	4618      	mov	r0, r3
 8016bac:	f7ff fcc6 	bl	801653c <aiPrintBufferInfo>
    LC_PRINT("\r\n");
 8016bb0:	4b1c      	ldr	r3, [pc, #112]	; (8016c24 <aiPrintNetworkInfo+0x24c>)
 8016bb2:	681b      	ldr	r3, [r3, #0]
 8016bb4:	2202      	movs	r2, #2
 8016bb6:	2101      	movs	r1, #1
 8016bb8:	4828      	ldr	r0, [pc, #160]	; (8016c5c <aiPrintNetworkInfo+0x284>)
 8016bba:	f00c ffe3 	bl	8023b84 <fwrite>
  for (int i=0; i<report->n_inputs; i++) {
 8016bbe:	697b      	ldr	r3, [r7, #20]
 8016bc0:	3301      	adds	r3, #1
 8016bc2:	617b      	str	r3, [r7, #20]
 8016bc4:	687b      	ldr	r3, [r7, #4]
 8016bc6:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8016bc8:	461a      	mov	r2, r3
 8016bca:	697b      	ldr	r3, [r7, #20]
 8016bcc:	4293      	cmp	r3, r2
 8016bce:	dbdd      	blt.n	8016b8c <aiPrintNetworkInfo+0x1b4>
  }

  for (int i=0; i<report->n_outputs; i++) {
 8016bd0:	2300      	movs	r3, #0
 8016bd2:	613b      	str	r3, [r7, #16]
 8016bd4:	e01b      	b.n	8016c0e <aiPrintNetworkInfo+0x236>
    //LC_PRINT("  O[%d] %s\r\n", i, aiGetBufferDesc(&report->outputs[i]));
    LC_PRINT("  O[%d] ", i);
 8016bd6:	4b13      	ldr	r3, [pc, #76]	; (8016c24 <aiPrintNetworkInfo+0x24c>)
 8016bd8:	681b      	ldr	r3, [r3, #0]
 8016bda:	693a      	ldr	r2, [r7, #16]
 8016bdc:	4923      	ldr	r1, [pc, #140]	; (8016c6c <aiPrintNetworkInfo+0x294>)
 8016bde:	4618      	mov	r0, r3
 8016be0:	f00c ff5e 	bl	8023aa0 <fiprintf>
    aiPrintBufferInfo(&report->outputs[i]);
 8016be4:	687b      	ldr	r3, [r7, #4]
 8016be6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8016be8:	693a      	ldr	r2, [r7, #16]
 8016bea:	4613      	mov	r3, r2
 8016bec:	00db      	lsls	r3, r3, #3
 8016bee:	1a9b      	subs	r3, r3, r2
 8016bf0:	009b      	lsls	r3, r3, #2
 8016bf2:	440b      	add	r3, r1
 8016bf4:	4618      	mov	r0, r3
 8016bf6:	f7ff fca1 	bl	801653c <aiPrintBufferInfo>
    LC_PRINT("\r\n");
 8016bfa:	4b0a      	ldr	r3, [pc, #40]	; (8016c24 <aiPrintNetworkInfo+0x24c>)
 8016bfc:	681b      	ldr	r3, [r3, #0]
 8016bfe:	2202      	movs	r2, #2
 8016c00:	2101      	movs	r1, #1
 8016c02:	4816      	ldr	r0, [pc, #88]	; (8016c5c <aiPrintNetworkInfo+0x284>)
 8016c04:	f00c ffbe 	bl	8023b84 <fwrite>
  for (int i=0; i<report->n_outputs; i++) {
 8016c08:	693b      	ldr	r3, [r7, #16]
 8016c0a:	3301      	adds	r3, #1
 8016c0c:	613b      	str	r3, [r7, #16]
 8016c0e:	687b      	ldr	r3, [r7, #4]
 8016c10:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016c12:	461a      	mov	r2, r3
 8016c14:	693b      	ldr	r3, [r7, #16]
 8016c16:	4293      	cmp	r3, r2
 8016c18:	dbdd      	blt.n	8016bd6 <aiPrintNetworkInfo+0x1fe>
  }
}
 8016c1a:	bf00      	nop
 8016c1c:	bf00      	nop
 8016c1e:	3720      	adds	r7, #32
 8016c20:	46bd      	mov	sp, r7
 8016c22:	bd80      	pop	{r7, pc}
 8016c24:	20026ab8 	.word	0x20026ab8
 8016c28:	08026d24 	.word	0x08026d24
 8016c2c:	08026d40 	.word	0x08026d40
 8016c30:	08026d5c 	.word	0x08026d5c
 8016c34:	08026d78 	.word	0x08026d78
 8016c38:	08026d94 	.word	0x08026d94
 8016c3c:	08026db0 	.word	0x08026db0
 8016c40:	08026cec 	.word	0x08026cec
 8016c44:	08026dd4 	.word	0x08026dd4
 8016c48:	08026df0 	.word	0x08026df0
 8016c4c:	08026e14 	.word	0x08026e14
 8016c50:	08026e38 	.word	0x08026e38
 8016c54:	08026e54 	.word	0x08026e54
 8016c58:	08026e70 	.word	0x08026e70
 8016c5c:	08026e78 	.word	0x08026e78
 8016c60:	08026e7c 	.word	0x08026e7c
 8016c64:	08026e98 	.word	0x08026e98
 8016c68:	08026eb8 	.word	0x08026eb8
 8016c6c:	08026ec4 	.word	0x08026ec4

08016c70 <ai_mnetwork_is_valid>:
AI_STATIC struct network_instance gnetworks[AI_MNETWORK_NUMBER] = {0};

AI_DECLARE_STATIC
ai_bool ai_mnetwork_is_valid(const char* name,
        const ai_network_entry_t *entry)
{
 8016c70:	b590      	push	{r4, r7, lr}
 8016c72:	b083      	sub	sp, #12
 8016c74:	af00      	add	r7, sp, #0
 8016c76:	6078      	str	r0, [r7, #4]
 8016c78:	6039      	str	r1, [r7, #0]
    if (name && (strlen(entry->name) == strlen(name)) &&
 8016c7a:	687b      	ldr	r3, [r7, #4]
 8016c7c:	2b00      	cmp	r3, #0
 8016c7e:	d01d      	beq.n	8016cbc <ai_mnetwork_is_valid+0x4c>
 8016c80:	683b      	ldr	r3, [r7, #0]
 8016c82:	681b      	ldr	r3, [r3, #0]
 8016c84:	4618      	mov	r0, r3
 8016c86:	f7e9 fc27 	bl	80004d8 <strlen>
 8016c8a:	4604      	mov	r4, r0
 8016c8c:	6878      	ldr	r0, [r7, #4]
 8016c8e:	f7e9 fc23 	bl	80004d8 <strlen>
 8016c92:	4603      	mov	r3, r0
 8016c94:	429c      	cmp	r4, r3
 8016c96:	d111      	bne.n	8016cbc <ai_mnetwork_is_valid+0x4c>
            (strncmp(entry->name, name, strlen(entry->name)) == 0))
 8016c98:	683b      	ldr	r3, [r7, #0]
 8016c9a:	681c      	ldr	r4, [r3, #0]
 8016c9c:	683b      	ldr	r3, [r7, #0]
 8016c9e:	681b      	ldr	r3, [r3, #0]
 8016ca0:	4618      	mov	r0, r3
 8016ca2:	f7e9 fc19 	bl	80004d8 <strlen>
 8016ca6:	4603      	mov	r3, r0
 8016ca8:	461a      	mov	r2, r3
 8016caa:	6879      	ldr	r1, [r7, #4]
 8016cac:	4620      	mov	r0, r4
 8016cae:	f00d fbbd 	bl	802442c <strncmp>
 8016cb2:	4603      	mov	r3, r0
    if (name && (strlen(entry->name) == strlen(name)) &&
 8016cb4:	2b00      	cmp	r3, #0
 8016cb6:	d101      	bne.n	8016cbc <ai_mnetwork_is_valid+0x4c>
        return true;
 8016cb8:	2301      	movs	r3, #1
 8016cba:	e000      	b.n	8016cbe <ai_mnetwork_is_valid+0x4e>
    return false;
 8016cbc:	2300      	movs	r3, #0
}
 8016cbe:	4618      	mov	r0, r3
 8016cc0:	370c      	adds	r7, #12
 8016cc2:	46bd      	mov	sp, r7
 8016cc4:	bd90      	pop	{r4, r7, pc}
	...

08016cc8 <ai_mnetwork_handle>:

AI_DECLARE_STATIC
struct network_instance *ai_mnetwork_handle(struct network_instance *inst)
{
 8016cc8:	b480      	push	{r7}
 8016cca:	b085      	sub	sp, #20
 8016ccc:	af00      	add	r7, sp, #0
 8016cce:	6078      	str	r0, [r7, #4]
    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
 8016cd0:	2300      	movs	r3, #0
 8016cd2:	60fb      	str	r3, [r7, #12]
 8016cd4:	e01d      	b.n	8016d12 <ai_mnetwork_handle+0x4a>
        if ((inst) && (&gnetworks[i] == inst))
 8016cd6:	687b      	ldr	r3, [r7, #4]
 8016cd8:	2b00      	cmp	r3, #0
 8016cda:	d008      	beq.n	8016cee <ai_mnetwork_handle+0x26>
 8016cdc:	68fb      	ldr	r3, [r7, #12]
 8016cde:	019b      	lsls	r3, r3, #6
 8016ce0:	4a11      	ldr	r2, [pc, #68]	; (8016d28 <ai_mnetwork_handle+0x60>)
 8016ce2:	4413      	add	r3, r2
 8016ce4:	687a      	ldr	r2, [r7, #4]
 8016ce6:	429a      	cmp	r2, r3
 8016ce8:	d101      	bne.n	8016cee <ai_mnetwork_handle+0x26>
            return inst;
 8016cea:	687b      	ldr	r3, [r7, #4]
 8016cec:	e015      	b.n	8016d1a <ai_mnetwork_handle+0x52>
        else if ((!inst) && (gnetworks[i].entry == NULL))
 8016cee:	687b      	ldr	r3, [r7, #4]
 8016cf0:	2b00      	cmp	r3, #0
 8016cf2:	d10b      	bne.n	8016d0c <ai_mnetwork_handle+0x44>
 8016cf4:	4a0c      	ldr	r2, [pc, #48]	; (8016d28 <ai_mnetwork_handle+0x60>)
 8016cf6:	68fb      	ldr	r3, [r7, #12]
 8016cf8:	019b      	lsls	r3, r3, #6
 8016cfa:	4413      	add	r3, r2
 8016cfc:	681b      	ldr	r3, [r3, #0]
 8016cfe:	2b00      	cmp	r3, #0
 8016d00:	d104      	bne.n	8016d0c <ai_mnetwork_handle+0x44>
            return &gnetworks[i];
 8016d02:	68fb      	ldr	r3, [r7, #12]
 8016d04:	019b      	lsls	r3, r3, #6
 8016d06:	4a08      	ldr	r2, [pc, #32]	; (8016d28 <ai_mnetwork_handle+0x60>)
 8016d08:	4413      	add	r3, r2
 8016d0a:	e006      	b.n	8016d1a <ai_mnetwork_handle+0x52>
    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
 8016d0c:	68fb      	ldr	r3, [r7, #12]
 8016d0e:	3301      	adds	r3, #1
 8016d10:	60fb      	str	r3, [r7, #12]
 8016d12:	68fb      	ldr	r3, [r7, #12]
 8016d14:	2b00      	cmp	r3, #0
 8016d16:	ddde      	ble.n	8016cd6 <ai_mnetwork_handle+0xe>
    }
    return NULL;
 8016d18:	2300      	movs	r3, #0
}
 8016d1a:	4618      	mov	r0, r3
 8016d1c:	3714      	adds	r7, #20
 8016d1e:	46bd      	mov	sp, r7
 8016d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d24:	4770      	bx	lr
 8016d26:	bf00      	nop
 8016d28:	20039424 	.word	0x20039424

08016d2c <ai_mnetwork_release_handle>:

AI_DECLARE_STATIC
void ai_mnetwork_release_handle(struct network_instance *inst)
{
 8016d2c:	b480      	push	{r7}
 8016d2e:	b085      	sub	sp, #20
 8016d30:	af00      	add	r7, sp, #0
 8016d32:	6078      	str	r0, [r7, #4]
    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
 8016d34:	2300      	movs	r3, #0
 8016d36:	60fb      	str	r3, [r7, #12]
 8016d38:	e013      	b.n	8016d62 <ai_mnetwork_release_handle+0x36>
        if ((inst) && (&gnetworks[i] == inst)) {
 8016d3a:	687b      	ldr	r3, [r7, #4]
 8016d3c:	2b00      	cmp	r3, #0
 8016d3e:	d00d      	beq.n	8016d5c <ai_mnetwork_release_handle+0x30>
 8016d40:	68fb      	ldr	r3, [r7, #12]
 8016d42:	019b      	lsls	r3, r3, #6
 8016d44:	4a0b      	ldr	r2, [pc, #44]	; (8016d74 <ai_mnetwork_release_handle+0x48>)
 8016d46:	4413      	add	r3, r2
 8016d48:	687a      	ldr	r2, [r7, #4]
 8016d4a:	429a      	cmp	r2, r3
 8016d4c:	d106      	bne.n	8016d5c <ai_mnetwork_release_handle+0x30>
            gnetworks[i].entry = NULL;
 8016d4e:	4a09      	ldr	r2, [pc, #36]	; (8016d74 <ai_mnetwork_release_handle+0x48>)
 8016d50:	68fb      	ldr	r3, [r7, #12]
 8016d52:	019b      	lsls	r3, r3, #6
 8016d54:	4413      	add	r3, r2
 8016d56:	2200      	movs	r2, #0
 8016d58:	601a      	str	r2, [r3, #0]
            return;
 8016d5a:	e005      	b.n	8016d68 <ai_mnetwork_release_handle+0x3c>
    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
 8016d5c:	68fb      	ldr	r3, [r7, #12]
 8016d5e:	3301      	adds	r3, #1
 8016d60:	60fb      	str	r3, [r7, #12]
 8016d62:	68fb      	ldr	r3, [r7, #12]
 8016d64:	2b00      	cmp	r3, #0
 8016d66:	dde8      	ble.n	8016d3a <ai_mnetwork_release_handle+0xe>
        }
    }
}
 8016d68:	3714      	adds	r7, #20
 8016d6a:	46bd      	mov	sp, r7
 8016d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d70:	4770      	bx	lr
 8016d72:	bf00      	nop
 8016d74:	20039424 	.word	0x20039424

08016d78 <ai_mnetwork_create>:
}

AI_API_ENTRY
ai_error ai_mnetwork_create(const char *name, ai_handle* network,
        const ai_buffer* network_config)
{
 8016d78:	b580      	push	{r7, lr}
 8016d7a:	b08a      	sub	sp, #40	; 0x28
 8016d7c:	af00      	add	r7, sp, #0
 8016d7e:	60f8      	str	r0, [r7, #12]
 8016d80:	60b9      	str	r1, [r7, #8]
 8016d82:	607a      	str	r2, [r7, #4]
    const ai_network_entry_t *entry;
    const ai_network_entry_t *found = NULL;
 8016d84:	2300      	movs	r3, #0
 8016d86:	627b      	str	r3, [r7, #36]	; 0x24
    ai_error err;
    struct network_instance *inst = ai_mnetwork_handle(NULL);
 8016d88:	2000      	movs	r0, #0
 8016d8a:	f7ff ff9d 	bl	8016cc8 <ai_mnetwork_handle>
 8016d8e:	61f8      	str	r0, [r7, #28]

    if (!inst) {
 8016d90:	69fb      	ldr	r3, [r7, #28]
 8016d92:	2b00      	cmp	r3, #0
 8016d94:	d108      	bne.n	8016da8 <ai_mnetwork_create+0x30>
        err.type = AI_ERROR_ALLOCATION_FAILED;
 8016d96:	2331      	movs	r3, #49	; 0x31
 8016d98:	753b      	strb	r3, [r7, #20]
        err.code = AI_ERROR_CODE_NETWORK;
 8016d9a:	697b      	ldr	r3, [r7, #20]
 8016d9c:	2210      	movs	r2, #16
 8016d9e:	f362 231f 	bfi	r3, r2, #8, #24
 8016da2:	617b      	str	r3, [r7, #20]
        return err;
 8016da4:	697b      	ldr	r3, [r7, #20]
 8016da6:	e04c      	b.n	8016e42 <ai_mnetwork_create+0xca>
    }

    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
 8016da8:	2300      	movs	r3, #0
 8016daa:	623b      	str	r3, [r7, #32]
 8016dac:	e013      	b.n	8016dd6 <ai_mnetwork_create+0x5e>
        entry = &networks[i];
 8016dae:	6a3b      	ldr	r3, [r7, #32]
 8016db0:	222c      	movs	r2, #44	; 0x2c
 8016db2:	fb02 f303 	mul.w	r3, r2, r3
 8016db6:	4a25      	ldr	r2, [pc, #148]	; (8016e4c <ai_mnetwork_create+0xd4>)
 8016db8:	4413      	add	r3, r2
 8016dba:	61bb      	str	r3, [r7, #24]
        if (ai_mnetwork_is_valid(name, entry)) {
 8016dbc:	69b9      	ldr	r1, [r7, #24]
 8016dbe:	68f8      	ldr	r0, [r7, #12]
 8016dc0:	f7ff ff56 	bl	8016c70 <ai_mnetwork_is_valid>
 8016dc4:	4603      	mov	r3, r0
 8016dc6:	2b00      	cmp	r3, #0
 8016dc8:	d002      	beq.n	8016dd0 <ai_mnetwork_create+0x58>
            found = entry;
 8016dca:	69bb      	ldr	r3, [r7, #24]
 8016dcc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8016dce:	e005      	b.n	8016ddc <ai_mnetwork_create+0x64>
    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
 8016dd0:	6a3b      	ldr	r3, [r7, #32]
 8016dd2:	3301      	adds	r3, #1
 8016dd4:	623b      	str	r3, [r7, #32]
 8016dd6:	6a3b      	ldr	r3, [r7, #32]
 8016dd8:	2b00      	cmp	r3, #0
 8016dda:	dde8      	ble.n	8016dae <ai_mnetwork_create+0x36>
        }
    }

    if (!found) {
 8016ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016dde:	2b00      	cmp	r3, #0
 8016de0:	d108      	bne.n	8016df4 <ai_mnetwork_create+0x7c>
        err.type = AI_ERROR_INVALID_PARAM;
 8016de2:	2314      	movs	r3, #20
 8016de4:	753b      	strb	r3, [r7, #20]
        err.code = AI_ERROR_CODE_NETWORK;
 8016de6:	697b      	ldr	r3, [r7, #20]
 8016de8:	2210      	movs	r2, #16
 8016dea:	f362 231f 	bfi	r3, r2, #8, #24
 8016dee:	617b      	str	r3, [r7, #20]
        return err;
 8016df0:	697b      	ldr	r3, [r7, #20]
 8016df2:	e026      	b.n	8016e42 <ai_mnetwork_create+0xca>
    }

    if (network_config == NULL)
 8016df4:	687b      	ldr	r3, [r7, #4]
 8016df6:	2b00      	cmp	r3, #0
 8016df8:	d109      	bne.n	8016e0e <ai_mnetwork_create+0x96>
        err = found->ai_create(network, found->config);
 8016dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016dfc:	691b      	ldr	r3, [r3, #16]
 8016dfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016e00:	6852      	ldr	r2, [r2, #4]
 8016e02:	4611      	mov	r1, r2
 8016e04:	68b8      	ldr	r0, [r7, #8]
 8016e06:	4798      	blx	r3
 8016e08:	4603      	mov	r3, r0
 8016e0a:	617b      	str	r3, [r7, #20]
 8016e0c:	e006      	b.n	8016e1c <ai_mnetwork_create+0xa4>
    else
        err = found->ai_create(network, network_config);
 8016e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e10:	691b      	ldr	r3, [r3, #16]
 8016e12:	6879      	ldr	r1, [r7, #4]
 8016e14:	68b8      	ldr	r0, [r7, #8]
 8016e16:	4798      	blx	r3
 8016e18:	4603      	mov	r3, r0
 8016e1a:	617b      	str	r3, [r7, #20]
    if ((err.code == AI_ERROR_CODE_NONE) && (err.type == AI_ERROR_NONE)) {
 8016e1c:	697b      	ldr	r3, [r7, #20]
 8016e1e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8016e22:	2b00      	cmp	r3, #0
 8016e24:	d10c      	bne.n	8016e40 <ai_mnetwork_create+0xc8>
 8016e26:	7d3b      	ldrb	r3, [r7, #20]
 8016e28:	2b00      	cmp	r3, #0
 8016e2a:	d109      	bne.n	8016e40 <ai_mnetwork_create+0xc8>
        inst->entry = found;
 8016e2c:	69fb      	ldr	r3, [r7, #28]
 8016e2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016e30:	601a      	str	r2, [r3, #0]
        inst->handle = *network;
 8016e32:	68bb      	ldr	r3, [r7, #8]
 8016e34:	681a      	ldr	r2, [r3, #0]
 8016e36:	69fb      	ldr	r3, [r7, #28]
 8016e38:	605a      	str	r2, [r3, #4]
        *network = (ai_handle*)inst;
 8016e3a:	68bb      	ldr	r3, [r7, #8]
 8016e3c:	69fa      	ldr	r2, [r7, #28]
 8016e3e:	601a      	str	r2, [r3, #0]
    }

    return err;
 8016e40:	697b      	ldr	r3, [r7, #20]
}
 8016e42:	4618      	mov	r0, r3
 8016e44:	3728      	adds	r7, #40	; 0x28
 8016e46:	46bd      	mov	sp, r7
 8016e48:	bd80      	pop	{r7, pc}
 8016e4a:	bf00      	nop
 8016e4c:	08027e20 	.word	0x08027e20

08016e50 <ai_mnetwork_destroy>:

AI_API_ENTRY
ai_handle ai_mnetwork_destroy(ai_handle network)
{
 8016e50:	b580      	push	{r7, lr}
 8016e52:	b084      	sub	sp, #16
 8016e54:	af00      	add	r7, sp, #0
 8016e56:	6078      	str	r0, [r7, #4]
    struct network_instance *inn;
    inn =  ai_mnetwork_handle((struct network_instance *)network);
 8016e58:	6878      	ldr	r0, [r7, #4]
 8016e5a:	f7ff ff35 	bl	8016cc8 <ai_mnetwork_handle>
 8016e5e:	60f8      	str	r0, [r7, #12]
    if (inn) {
 8016e60:	68fb      	ldr	r3, [r7, #12]
 8016e62:	2b00      	cmp	r3, #0
 8016e64:	d011      	beq.n	8016e8a <ai_mnetwork_destroy+0x3a>
        ai_handle hdl = inn->entry->ai_destroy(inn->handle);
 8016e66:	68fb      	ldr	r3, [r7, #12]
 8016e68:	681b      	ldr	r3, [r3, #0]
 8016e6a:	699b      	ldr	r3, [r3, #24]
 8016e6c:	68fa      	ldr	r2, [r7, #12]
 8016e6e:	6852      	ldr	r2, [r2, #4]
 8016e70:	4610      	mov	r0, r2
 8016e72:	4798      	blx	r3
 8016e74:	60b8      	str	r0, [r7, #8]
        if (hdl != inn->handle) {
 8016e76:	68fb      	ldr	r3, [r7, #12]
 8016e78:	685b      	ldr	r3, [r3, #4]
 8016e7a:	68ba      	ldr	r2, [r7, #8]
 8016e7c:	429a      	cmp	r2, r3
 8016e7e:	d004      	beq.n	8016e8a <ai_mnetwork_destroy+0x3a>
            ai_mnetwork_release_handle(inn);
 8016e80:	68f8      	ldr	r0, [r7, #12]
 8016e82:	f7ff ff53 	bl	8016d2c <ai_mnetwork_release_handle>
            network = AI_HANDLE_NULL;
 8016e86:	2300      	movs	r3, #0
 8016e88:	607b      	str	r3, [r7, #4]
        }
    }
    return network;
 8016e8a:	687b      	ldr	r3, [r7, #4]
}
 8016e8c:	4618      	mov	r0, r3
 8016e8e:	3710      	adds	r7, #16
 8016e90:	46bd      	mov	sp, r7
 8016e92:	bd80      	pop	{r7, pc}

08016e94 <ai_mnetwork_get_report>:

AI_API_ENTRY
ai_bool ai_mnetwork_get_report(ai_handle network, ai_network_report* report)
{
 8016e94:	b580      	push	{r7, lr}
 8016e96:	b084      	sub	sp, #16
 8016e98:	af00      	add	r7, sp, #0
 8016e9a:	6078      	str	r0, [r7, #4]
 8016e9c:	6039      	str	r1, [r7, #0]
    struct network_instance *inn;
    inn =  ai_mnetwork_handle((struct network_instance *)network);
 8016e9e:	6878      	ldr	r0, [r7, #4]
 8016ea0:	f7ff ff12 	bl	8016cc8 <ai_mnetwork_handle>
 8016ea4:	60f8      	str	r0, [r7, #12]
    if (inn)
 8016ea6:	68fb      	ldr	r3, [r7, #12]
 8016ea8:	2b00      	cmp	r3, #0
 8016eaa:	d009      	beq.n	8016ec0 <ai_mnetwork_get_report+0x2c>
        return inn->entry->ai_get_report(inn->handle, report);
 8016eac:	68fb      	ldr	r3, [r7, #12]
 8016eae:	681b      	ldr	r3, [r3, #0]
 8016eb0:	68db      	ldr	r3, [r3, #12]
 8016eb2:	68fa      	ldr	r2, [r7, #12]
 8016eb4:	6852      	ldr	r2, [r2, #4]
 8016eb6:	6839      	ldr	r1, [r7, #0]
 8016eb8:	4610      	mov	r0, r2
 8016eba:	4798      	blx	r3
 8016ebc:	4603      	mov	r3, r0
 8016ebe:	e000      	b.n	8016ec2 <ai_mnetwork_get_report+0x2e>
    else
        return false;
 8016ec0:	2300      	movs	r3, #0
}
 8016ec2:	4618      	mov	r0, r3
 8016ec4:	3710      	adds	r7, #16
 8016ec6:	46bd      	mov	sp, r7
 8016ec8:	bd80      	pop	{r7, pc}

08016eca <ai_mnetwork_get_error>:

AI_API_ENTRY
ai_error ai_mnetwork_get_error(ai_handle network)
{
 8016eca:	b580      	push	{r7, lr}
 8016ecc:	b084      	sub	sp, #16
 8016ece:	af00      	add	r7, sp, #0
 8016ed0:	6078      	str	r0, [r7, #4]
    struct network_instance *inn;
    ai_error err;
    err.type = AI_ERROR_INVALID_PARAM;
 8016ed2:	2314      	movs	r3, #20
 8016ed4:	723b      	strb	r3, [r7, #8]
    err.code = AI_ERROR_CODE_NETWORK;
 8016ed6:	68bb      	ldr	r3, [r7, #8]
 8016ed8:	2210      	movs	r2, #16
 8016eda:	f362 231f 	bfi	r3, r2, #8, #24
 8016ede:	60bb      	str	r3, [r7, #8]

    inn =  ai_mnetwork_handle((struct network_instance *)network);
 8016ee0:	6878      	ldr	r0, [r7, #4]
 8016ee2:	f7ff fef1 	bl	8016cc8 <ai_mnetwork_handle>
 8016ee6:	60f8      	str	r0, [r7, #12]
    if (inn)
 8016ee8:	68fb      	ldr	r3, [r7, #12]
 8016eea:	2b00      	cmp	r3, #0
 8016eec:	d008      	beq.n	8016f00 <ai_mnetwork_get_error+0x36>
        return inn->entry->ai_get_error(inn->handle);
 8016eee:	68fb      	ldr	r3, [r7, #12]
 8016ef0:	681b      	ldr	r3, [r3, #0]
 8016ef2:	695b      	ldr	r3, [r3, #20]
 8016ef4:	68fa      	ldr	r2, [r7, #12]
 8016ef6:	6852      	ldr	r2, [r2, #4]
 8016ef8:	4610      	mov	r0, r2
 8016efa:	4798      	blx	r3
 8016efc:	4603      	mov	r3, r0
 8016efe:	e000      	b.n	8016f02 <ai_mnetwork_get_error+0x38>
    else
        return err;
 8016f00:	68bb      	ldr	r3, [r7, #8]
}
 8016f02:	4618      	mov	r0, r3
 8016f04:	3710      	adds	r7, #16
 8016f06:	46bd      	mov	sp, r7
 8016f08:	bd80      	pop	{r7, pc}

08016f0a <ai_mnetwork_init>:

AI_API_ENTRY
ai_bool ai_mnetwork_init(ai_handle network)
{
 8016f0a:	b580      	push	{r7, lr}
 8016f0c:	b092      	sub	sp, #72	; 0x48
 8016f0e:	af00      	add	r7, sp, #0
 8016f10:	6078      	str	r0, [r7, #4]
    struct network_instance *inn;
    ai_network_params par;

    inn =  ai_mnetwork_handle((struct network_instance *)network);
 8016f12:	6878      	ldr	r0, [r7, #4]
 8016f14:	f7ff fed8 	bl	8016cc8 <ai_mnetwork_handle>
 8016f18:	6438      	str	r0, [r7, #64]	; 0x40
    if (inn) {
 8016f1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016f1c:	2b00      	cmp	r3, #0
 8016f1e:	d02a      	beq.n	8016f76 <ai_mnetwork_init+0x6c>
        inn->entry->ai_data_params_get(&par);
 8016f20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016f22:	681b      	ldr	r3, [r3, #0]
 8016f24:	689b      	ldr	r3, [r3, #8]
 8016f26:	f107 0208 	add.w	r2, r7, #8
 8016f2a:	4610      	mov	r0, r2
 8016f2c:	4798      	blx	r3
        for (int idx=0; idx < par.map_activations.size; idx++)
 8016f2e:	2300      	movs	r3, #0
 8016f30:	647b      	str	r3, [r7, #68]	; 0x44
 8016f32:	e010      	b.n	8016f56 <ai_mnetwork_init+0x4c>
          AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&par.map_activations, idx, inn->entry->activations[idx]);
 8016f34:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8016f36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016f38:	681b      	ldr	r3, [r3, #0]
 8016f3a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8016f3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016f3e:	009b      	lsls	r3, r3, #2
 8016f40:	4413      	add	r3, r2
 8016f42:	681a      	ldr	r2, [r3, #0]
 8016f44:	f107 0308 	add.w	r3, r7, #8
 8016f48:	330c      	adds	r3, #12
 8016f4a:	4618      	mov	r0, r3
 8016f4c:	f009 fe58 	bl	8020c00 <ai_buffer_array_item_set_address>
        for (int idx=0; idx < par.map_activations.size; idx++)
 8016f50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016f52:	3301      	adds	r3, #1
 8016f54:	647b      	str	r3, [r7, #68]	; 0x44
 8016f56:	8afb      	ldrh	r3, [r7, #22]
 8016f58:	461a      	mov	r2, r3
 8016f5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016f5c:	4293      	cmp	r3, r2
 8016f5e:	dbe9      	blt.n	8016f34 <ai_mnetwork_init+0x2a>
        return inn->entry->ai_init(inn->handle, &par);
 8016f60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016f62:	681b      	ldr	r3, [r3, #0]
 8016f64:	69db      	ldr	r3, [r3, #28]
 8016f66:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8016f68:	6852      	ldr	r2, [r2, #4]
 8016f6a:	f107 0108 	add.w	r1, r7, #8
 8016f6e:	4610      	mov	r0, r2
 8016f70:	4798      	blx	r3
 8016f72:	4603      	mov	r3, r0
 8016f74:	e000      	b.n	8016f78 <ai_mnetwork_init+0x6e>
    }
    else
        return false;
 8016f76:	2300      	movs	r3, #0
}
 8016f78:	4618      	mov	r0, r3
 8016f7a:	3748      	adds	r7, #72	; 0x48
 8016f7c:	46bd      	mov	sp, r7
 8016f7e:	bd80      	pop	{r7, pc}

08016f80 <ai_mnetwork_run>:

AI_API_ENTRY
ai_i32 ai_mnetwork_run(ai_handle network, const ai_buffer* input,
        ai_buffer* output)
{
 8016f80:	b580      	push	{r7, lr}
 8016f82:	b086      	sub	sp, #24
 8016f84:	af00      	add	r7, sp, #0
 8016f86:	60f8      	str	r0, [r7, #12]
 8016f88:	60b9      	str	r1, [r7, #8]
 8016f8a:	607a      	str	r2, [r7, #4]
    struct network_instance* inn;
    inn =  ai_mnetwork_handle((struct network_instance *)network);
 8016f8c:	68f8      	ldr	r0, [r7, #12]
 8016f8e:	f7ff fe9b 	bl	8016cc8 <ai_mnetwork_handle>
 8016f92:	6178      	str	r0, [r7, #20]
    if (inn)
 8016f94:	697b      	ldr	r3, [r7, #20]
 8016f96:	2b00      	cmp	r3, #0
 8016f98:	d009      	beq.n	8016fae <ai_mnetwork_run+0x2e>
        return inn->entry->ai_run(inn->handle, input, output);
 8016f9a:	697b      	ldr	r3, [r7, #20]
 8016f9c:	681b      	ldr	r3, [r3, #0]
 8016f9e:	6a1b      	ldr	r3, [r3, #32]
 8016fa0:	697a      	ldr	r2, [r7, #20]
 8016fa2:	6850      	ldr	r0, [r2, #4]
 8016fa4:	687a      	ldr	r2, [r7, #4]
 8016fa6:	68b9      	ldr	r1, [r7, #8]
 8016fa8:	4798      	blx	r3
 8016faa:	4603      	mov	r3, r0
 8016fac:	e000      	b.n	8016fb0 <ai_mnetwork_run+0x30>
    else
        return 0;
 8016fae:	2300      	movs	r3, #0
}
 8016fb0:	4618      	mov	r0, r3
 8016fb2:	3718      	adds	r7, #24
 8016fb4:	46bd      	mov	sp, r7
 8016fb6:	bd80      	pop	{r7, pc}

08016fb8 <har_network_configure_activations>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool har_network_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 8016fb8:	b580      	push	{r7, lr}
 8016fba:	b084      	sub	sp, #16
 8016fbc:	af00      	add	r7, sp, #0
 8016fbe:	6078      	str	r0, [r7, #4]
 8016fc0:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  ai_ptr activations_map[1] = AI_C_ARRAY_INIT;
 8016fc2:	2300      	movs	r3, #0
 8016fc4:	60fb      	str	r3, [r7, #12]

  if (ai_platform_get_activations_map(activations_map, 1, params)) {
 8016fc6:	f107 030c 	add.w	r3, r7, #12
 8016fca:	683a      	ldr	r2, [r7, #0]
 8016fcc:	2101      	movs	r1, #1
 8016fce:	4618      	mov	r0, r3
 8016fd0:	f009 fe7c 	bl	8020ccc <ai_platform_get_activations_map>
 8016fd4:	4603      	mov	r3, r0
 8016fd6:	2b00      	cmp	r3, #0
 8016fd8:	d00f      	beq.n	8016ffa <har_network_configure_activations+0x42>
    /* Updating activations (byte) offsets */
    variable_output_array.data = AI_PTR(activations_map[0] + 0);
 8016fda:	68fb      	ldr	r3, [r7, #12]
 8016fdc:	4a0c      	ldr	r2, [pc, #48]	; (8017010 <har_network_configure_activations+0x58>)
 8016fde:	6093      	str	r3, [r2, #8]
    variable_output_array.data_start = AI_PTR(activations_map[0] + 0);
 8016fe0:	68fb      	ldr	r3, [r7, #12]
 8016fe2:	4a0b      	ldr	r2, [pc, #44]	; (8017010 <har_network_configure_activations+0x58>)
 8016fe4:	60d3      	str	r3, [r2, #12]
    label_scratch0_array.data = AI_PTR(activations_map[0] + 96);
 8016fe6:	68fb      	ldr	r3, [r7, #12]
 8016fe8:	3360      	adds	r3, #96	; 0x60
 8016fea:	4a0a      	ldr	r2, [pc, #40]	; (8017014 <har_network_configure_activations+0x5c>)
 8016fec:	6093      	str	r3, [r2, #8]
    label_scratch0_array.data_start = AI_PTR(activations_map[0] + 96);
 8016fee:	68fb      	ldr	r3, [r7, #12]
 8016ff0:	3360      	adds	r3, #96	; 0x60
 8016ff2:	4a08      	ldr	r2, [pc, #32]	; (8017014 <har_network_configure_activations+0x5c>)
 8016ff4:	60d3      	str	r3, [r2, #12]
    
    return true;
 8016ff6:	2301      	movs	r3, #1
 8016ff8:	e005      	b.n	8017006 <har_network_configure_activations+0x4e>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 8016ffa:	2213      	movs	r2, #19
 8016ffc:	2130      	movs	r1, #48	; 0x30
 8016ffe:	6878      	ldr	r0, [r7, #4]
 8017000:	f00a f952 	bl	80212a8 <ai_platform_network_set_error>
  return false;
 8017004:	2300      	movs	r3, #0
}
 8017006:	4618      	mov	r0, r3
 8017008:	3710      	adds	r7, #16
 801700a:	46bd      	mov	sp, r7
 801700c:	bd80      	pop	{r7, pc}
 801700e:	bf00      	nop
 8017010:	20000078 	.word	0x20000078
 8017014:	20000128 	.word	0x20000128

08017018 <har_network_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool har_network_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 8017018:	b580      	push	{r7, lr}
 801701a:	b084      	sub	sp, #16
 801701c:	af00      	add	r7, sp, #0
 801701e:	6078      	str	r0, [r7, #4]
 8017020:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  ai_ptr weights_map[1] = AI_C_ARRAY_INIT;
 8017022:	2300      	movs	r3, #0
 8017024:	60fb      	str	r3, [r7, #12]

  if (ai_platform_get_weights_map(weights_map, 1, params)) {
 8017026:	f107 030c 	add.w	r3, r7, #12
 801702a:	683a      	ldr	r2, [r7, #0]
 801702c:	2101      	movs	r1, #1
 801702e:	4618      	mov	r0, r3
 8017030:	f009 fdfc 	bl	8020c2c <ai_platform_get_weights_map>
 8017034:	4603      	mov	r3, r0
 8017036:	2b00      	cmp	r3, #0
 8017038:	f000 808a 	beq.w	8017150 <har_network_configure_weights+0x138>
    /* Updating weights (byte) offsets */
    
    variable_weights_array.format |= AI_FMT_FLAG_CONST;
 801703c:	4b49      	ldr	r3, [pc, #292]	; (8017164 <har_network_configure_weights+0x14c>)
 801703e:	681b      	ldr	r3, [r3, #0]
 8017040:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8017044:	4a47      	ldr	r2, [pc, #284]	; (8017164 <har_network_configure_weights+0x14c>)
 8017046:	6013      	str	r3, [r2, #0]
    variable_weights_array.data = AI_PTR(weights_map[0] + 0);
 8017048:	68fb      	ldr	r3, [r7, #12]
 801704a:	4a46      	ldr	r2, [pc, #280]	; (8017164 <har_network_configure_weights+0x14c>)
 801704c:	6093      	str	r3, [r2, #8]
    variable_weights_array.data_start = AI_PTR(weights_map[0] + 0);
 801704e:	68fb      	ldr	r3, [r7, #12]
 8017050:	4a44      	ldr	r2, [pc, #272]	; (8017164 <har_network_configure_weights+0x14c>)
 8017052:	60d3      	str	r3, [r2, #12]
    label_coefficients_array.format |= AI_FMT_FLAG_CONST;
 8017054:	4b44      	ldr	r3, [pc, #272]	; (8017168 <har_network_configure_weights+0x150>)
 8017056:	681b      	ldr	r3, [r3, #0]
 8017058:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801705c:	4a42      	ldr	r2, [pc, #264]	; (8017168 <har_network_configure_weights+0x150>)
 801705e:	6013      	str	r3, [r2, #0]
    label_coefficients_array.data = AI_PTR(weights_map[0] + 6912);
 8017060:	68fb      	ldr	r3, [r7, #12]
 8017062:	f503 53d8 	add.w	r3, r3, #6912	; 0x1b00
 8017066:	4a40      	ldr	r2, [pc, #256]	; (8017168 <har_network_configure_weights+0x150>)
 8017068:	6093      	str	r3, [r2, #8]
    label_coefficients_array.data_start = AI_PTR(weights_map[0] + 6912);
 801706a:	68fb      	ldr	r3, [r7, #12]
 801706c:	f503 53d8 	add.w	r3, r3, #6912	; 0x1b00
 8017070:	4a3d      	ldr	r2, [pc, #244]	; (8017168 <har_network_configure_weights+0x150>)
 8017072:	60d3      	str	r3, [r2, #12]
    label_support_vectors_array.format |= AI_FMT_FLAG_CONST;
 8017074:	4b3d      	ldr	r3, [pc, #244]	; (801716c <har_network_configure_weights+0x154>)
 8017076:	681b      	ldr	r3, [r3, #0]
 8017078:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801707c:	4a3b      	ldr	r2, [pc, #236]	; (801716c <har_network_configure_weights+0x154>)
 801707e:	6013      	str	r3, [r2, #0]
    label_support_vectors_array.data = AI_PTR(weights_map[0] + 12312);
 8017080:	68fb      	ldr	r3, [r7, #12]
 8017082:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8017086:	3318      	adds	r3, #24
 8017088:	4a38      	ldr	r2, [pc, #224]	; (801716c <har_network_configure_weights+0x154>)
 801708a:	6093      	str	r3, [r2, #8]
    label_support_vectors_array.data_start = AI_PTR(weights_map[0] + 12312);
 801708c:	68fb      	ldr	r3, [r7, #12]
 801708e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8017092:	3318      	adds	r3, #24
 8017094:	4a35      	ldr	r2, [pc, #212]	; (801716c <har_network_configure_weights+0x154>)
 8017096:	60d3      	str	r3, [r2, #12]
    label_rho_array.format |= AI_FMT_FLAG_CONST;
 8017098:	4b35      	ldr	r3, [pc, #212]	; (8017170 <har_network_configure_weights+0x158>)
 801709a:	681b      	ldr	r3, [r3, #0]
 801709c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80170a0:	4a33      	ldr	r2, [pc, #204]	; (8017170 <har_network_configure_weights+0x158>)
 80170a2:	6013      	str	r3, [r2, #0]
    label_rho_array.data = AI_PTR(weights_map[0] + 55512);
 80170a4:	68fb      	ldr	r3, [r7, #12]
 80170a6:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 80170aa:	33d8      	adds	r3, #216	; 0xd8
 80170ac:	4a30      	ldr	r2, [pc, #192]	; (8017170 <har_network_configure_weights+0x158>)
 80170ae:	6093      	str	r3, [r2, #8]
    label_rho_array.data_start = AI_PTR(weights_map[0] + 55512);
 80170b0:	68fb      	ldr	r3, [r7, #12]
 80170b2:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 80170b6:	33d8      	adds	r3, #216	; 0xd8
 80170b8:	4a2d      	ldr	r2, [pc, #180]	; (8017170 <har_network_configure_weights+0x158>)
 80170ba:	60d3      	str	r3, [r2, #12]
    label_classlabels_ints_array.format |= AI_FMT_FLAG_CONST;
 80170bc:	4b2d      	ldr	r3, [pc, #180]	; (8017174 <har_network_configure_weights+0x15c>)
 80170be:	681b      	ldr	r3, [r3, #0]
 80170c0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80170c4:	4a2b      	ldr	r2, [pc, #172]	; (8017174 <har_network_configure_weights+0x15c>)
 80170c6:	6013      	str	r3, [r2, #0]
    label_classlabels_ints_array.data = AI_PTR(weights_map[0] + 55536);
 80170c8:	68fb      	ldr	r3, [r7, #12]
 80170ca:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 80170ce:	33f0      	adds	r3, #240	; 0xf0
 80170d0:	4a28      	ldr	r2, [pc, #160]	; (8017174 <har_network_configure_weights+0x15c>)
 80170d2:	6093      	str	r3, [r2, #8]
    label_classlabels_ints_array.data_start = AI_PTR(weights_map[0] + 55536);
 80170d4:	68fb      	ldr	r3, [r7, #12]
 80170d6:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 80170da:	33f0      	adds	r3, #240	; 0xf0
 80170dc:	4a25      	ldr	r2, [pc, #148]	; (8017174 <har_network_configure_weights+0x15c>)
 80170de:	60d3      	str	r3, [r2, #12]
    label_vectors_per_class_array.format |= AI_FMT_FLAG_CONST;
 80170e0:	4b25      	ldr	r3, [pc, #148]	; (8017178 <har_network_configure_weights+0x160>)
 80170e2:	681b      	ldr	r3, [r3, #0]
 80170e4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80170e8:	4a23      	ldr	r2, [pc, #140]	; (8017178 <har_network_configure_weights+0x160>)
 80170ea:	6013      	str	r3, [r2, #0]
    label_vectors_per_class_array.data = AI_PTR(weights_map[0] + 55540);
 80170ec:	68fb      	ldr	r3, [r7, #12]
 80170ee:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 80170f2:	33f4      	adds	r3, #244	; 0xf4
 80170f4:	4a20      	ldr	r2, [pc, #128]	; (8017178 <har_network_configure_weights+0x160>)
 80170f6:	6093      	str	r3, [r2, #8]
    label_vectors_per_class_array.data_start = AI_PTR(weights_map[0] + 55540);
 80170f8:	68fb      	ldr	r3, [r7, #12]
 80170fa:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 80170fe:	33f4      	adds	r3, #244	; 0xf4
 8017100:	4a1d      	ldr	r2, [pc, #116]	; (8017178 <har_network_configure_weights+0x160>)
 8017102:	60d3      	str	r3, [r2, #12]
    label_prob_a_array.format |= AI_FMT_FLAG_CONST;
 8017104:	4b1d      	ldr	r3, [pc, #116]	; (801717c <har_network_configure_weights+0x164>)
 8017106:	681b      	ldr	r3, [r3, #0]
 8017108:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801710c:	4a1b      	ldr	r2, [pc, #108]	; (801717c <har_network_configure_weights+0x164>)
 801710e:	6013      	str	r3, [r2, #0]
    label_prob_a_array.data = AI_PTR(weights_map[0] + 55544);
 8017110:	68fb      	ldr	r3, [r7, #12]
 8017112:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8017116:	33f8      	adds	r3, #248	; 0xf8
 8017118:	4a18      	ldr	r2, [pc, #96]	; (801717c <har_network_configure_weights+0x164>)
 801711a:	6093      	str	r3, [r2, #8]
    label_prob_a_array.data_start = AI_PTR(weights_map[0] + 55544);
 801711c:	68fb      	ldr	r3, [r7, #12]
 801711e:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8017122:	33f8      	adds	r3, #248	; 0xf8
 8017124:	4a15      	ldr	r2, [pc, #84]	; (801717c <har_network_configure_weights+0x164>)
 8017126:	60d3      	str	r3, [r2, #12]
    label_prob_b_array.format |= AI_FMT_FLAG_CONST;
 8017128:	4b15      	ldr	r3, [pc, #84]	; (8017180 <har_network_configure_weights+0x168>)
 801712a:	681b      	ldr	r3, [r3, #0]
 801712c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8017130:	4a13      	ldr	r2, [pc, #76]	; (8017180 <har_network_configure_weights+0x168>)
 8017132:	6013      	str	r3, [r2, #0]
    label_prob_b_array.data = AI_PTR(weights_map[0] + 55568);
 8017134:	68fb      	ldr	r3, [r7, #12]
 8017136:	f503 4359 	add.w	r3, r3, #55552	; 0xd900
 801713a:	3310      	adds	r3, #16
 801713c:	4a10      	ldr	r2, [pc, #64]	; (8017180 <har_network_configure_weights+0x168>)
 801713e:	6093      	str	r3, [r2, #8]
    label_prob_b_array.data_start = AI_PTR(weights_map[0] + 55568);
 8017140:	68fb      	ldr	r3, [r7, #12]
 8017142:	f503 4359 	add.w	r3, r3, #55552	; 0xd900
 8017146:	3310      	adds	r3, #16
 8017148:	4a0d      	ldr	r2, [pc, #52]	; (8017180 <har_network_configure_weights+0x168>)
 801714a:	60d3      	str	r3, [r2, #12]
    return true;
 801714c:	2301      	movs	r3, #1
 801714e:	e005      	b.n	801715c <har_network_configure_weights+0x144>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 8017150:	2212      	movs	r2, #18
 8017152:	2130      	movs	r1, #48	; 0x30
 8017154:	6878      	ldr	r0, [r7, #4]
 8017156:	f00a f8a7 	bl	80212a8 <ai_platform_network_set_error>
  return false;
 801715a:	2300      	movs	r3, #0
}
 801715c:	4618      	mov	r0, r3
 801715e:	3710      	adds	r7, #16
 8017160:	46bd      	mov	sp, r7
 8017162:	bd80      	pop	{r7, pc}
 8017164:	200000a8 	.word	0x200000a8
 8017168:	200000b8 	.word	0x200000b8
 801716c:	200000c8 	.word	0x200000c8
 8017170:	200000d8 	.word	0x200000d8
 8017174:	200000e8 	.word	0x200000e8
 8017178:	200000f8 	.word	0x200000f8
 801717c:	20000108 	.word	0x20000108
 8017180:	20000118 	.word	0x20000118

08017184 <ai_har_network_get_report>:


AI_API_ENTRY
ai_bool ai_har_network_get_report(
  ai_handle network, ai_network_report* report)
{
 8017184:	b580      	push	{r7, lr}
 8017186:	b0a2      	sub	sp, #136	; 0x88
 8017188:	af00      	add	r7, sp, #0
 801718a:	6078      	str	r0, [r7, #4]
 801718c:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = AI_NETWORK_ACQUIRE_CTX(network);
 801718e:	6878      	ldr	r0, [r7, #4]
 8017190:	f009 ff92 	bl	80210b8 <ai_platform_context_acquire>
 8017194:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

  if (report && net_ctx)
 8017198:	683b      	ldr	r3, [r7, #0]
 801719a:	2b00      	cmp	r3, #0
 801719c:	d046      	beq.n	801722c <ai_har_network_get_report+0xa8>
 801719e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80171a2:	2b00      	cmp	r3, #0
 80171a4:	d042      	beq.n	801722c <ai_har_network_get_report+0xa8>
  {
    ai_network_report r = {
 80171a6:	f107 0308 	add.w	r3, r7, #8
 80171aa:	227c      	movs	r2, #124	; 0x7c
 80171ac:	2100      	movs	r1, #0
 80171ae:	4618      	mov	r0, r3
 80171b0:	f00c fd3b 	bl	8023c2a <memset>
 80171b4:	4b20      	ldr	r3, [pc, #128]	; (8017238 <ai_har_network_get_report+0xb4>)
 80171b6:	60bb      	str	r3, [r7, #8]
 80171b8:	4b20      	ldr	r3, [pc, #128]	; (801723c <ai_har_network_get_report+0xb8>)
 80171ba:	60fb      	str	r3, [r7, #12]
 80171bc:	4b20      	ldr	r3, [pc, #128]	; (8017240 <ai_har_network_get_report+0xbc>)
 80171be:	613b      	str	r3, [r7, #16]
 80171c0:	4b20      	ldr	r3, [pc, #128]	; (8017244 <ai_har_network_get_report+0xc0>)
 80171c2:	617b      	str	r3, [r7, #20]
      .model_signature   = AI_HAR_NETWORK_MODEL_SIGNATURE,
      .model_datetime    = AI_TOOLS_DATE_TIME,
      
      .compile_datetime  = AI_TOOLS_COMPILE_TIME,
      
      .runtime_revision  = ai_platform_runtime_get_revision(),
 80171c4:	f009 fdf4 	bl	8020db0 <ai_platform_runtime_get_revision>
 80171c8:	4603      	mov	r3, r0
    ai_network_report r = {
 80171ca:	61bb      	str	r3, [r7, #24]
      .runtime_version   = ai_platform_runtime_get_version(),
 80171cc:	f009 fe42 	bl	8020e54 <ai_platform_runtime_get_version>
 80171d0:	4603      	mov	r3, r0
 80171d2:	61fb      	str	r3, [r7, #28]
    ai_network_report r = {
 80171d4:	4b1c      	ldr	r3, [pc, #112]	; (8017248 <ai_har_network_get_report+0xc4>)
 80171d6:	623b      	str	r3, [r7, #32]
 80171d8:	2307      	movs	r3, #7
 80171da:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 80171de:	2301      	movs	r3, #1
 80171e0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
      .tool_revision     = AI_TOOLS_REVISION_ID,
      .tool_version      = {AI_TOOLS_VERSION_MAJOR, AI_TOOLS_VERSION_MINOR,
                            AI_TOOLS_VERSION_MICRO, 0x0},
      .tool_api_version  = AI_STRUCT_INIT,

      .api_version            = ai_platform_api_get_version(),
 80171e4:	f009 fe9c 	bl	8020f20 <ai_platform_api_get_version>
 80171e8:	4603      	mov	r3, r0
 80171ea:	62fb      	str	r3, [r7, #44]	; 0x2c
      .interface_api_version  = ai_platform_interface_api_get_version(),
 80171ec:	f009 fefe 	bl	8020fec <ai_platform_interface_api_get_version>
 80171f0:	4603      	mov	r3, r0
 80171f2:	633b      	str	r3, [r7, #48]	; 0x30
    ai_network_report r = {
 80171f4:	4b15      	ldr	r3, [pc, #84]	; (801724c <ai_har_network_get_report+0xc8>)
 80171f6:	637b      	str	r3, [r7, #52]	; 0x34
 80171f8:	4b15      	ldr	r3, [pc, #84]	; (8017250 <ai_har_network_get_report+0xcc>)
 80171fa:	647b      	str	r3, [r7, #68]	; 0x44
      .map_activations   = AI_STRUCT_INIT,
      .n_nodes           = 0,
      .signature         = 0x0,
    };

    if (!ai_platform_api_get_network_report(network, &r)) return false;
 80171fc:	f107 0308 	add.w	r3, r7, #8
 8017200:	4619      	mov	r1, r3
 8017202:	6878      	ldr	r0, [r7, #4]
 8017204:	f00a f856 	bl	80212b4 <ai_platform_api_get_network_report>
 8017208:	4603      	mov	r3, r0
 801720a:	f083 0301 	eor.w	r3, r3, #1
 801720e:	b2db      	uxtb	r3, r3
 8017210:	2b00      	cmp	r3, #0
 8017212:	d001      	beq.n	8017218 <ai_har_network_get_report+0x94>
 8017214:	2300      	movs	r3, #0
 8017216:	e00a      	b.n	801722e <ai_har_network_get_report+0xaa>

    *report = r;
 8017218:	683b      	ldr	r3, [r7, #0]
 801721a:	4618      	mov	r0, r3
 801721c:	f107 0308 	add.w	r3, r7, #8
 8017220:	227c      	movs	r2, #124	; 0x7c
 8017222:	4619      	mov	r1, r3
 8017224:	f00c fcf4 	bl	8023c10 <memcpy>
    return true;
 8017228:	2301      	movs	r3, #1
 801722a:	e000      	b.n	801722e <ai_har_network_get_report+0xaa>
  }
  return false;
 801722c:	2300      	movs	r3, #0
}
 801722e:	4618      	mov	r0, r3
 8017230:	3788      	adds	r7, #136	; 0x88
 8017232:	46bd      	mov	sp, r7
 8017234:	bd80      	pop	{r7, pc}
 8017236:	bf00      	nop
 8017238:	08026edc 	.word	0x08026edc
 801723c:	08026ee8 	.word	0x08026ee8
 8017240:	08026f0c 	.word	0x08026f0c
 8017244:	08026f28 	.word	0x08026f28
 8017248:	08026f40 	.word	0x08026f40
 801724c:	0001aca0 	.word	0x0001aca0
 8017250:	a1facade 	.word	0xa1facade

08017254 <ai_har_network_get_error>:

AI_API_ENTRY
ai_error ai_har_network_get_error(ai_handle network)
{
 8017254:	b580      	push	{r7, lr}
 8017256:	b082      	sub	sp, #8
 8017258:	af00      	add	r7, sp, #0
 801725a:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 801725c:	6878      	ldr	r0, [r7, #4]
 801725e:	f009 ff85 	bl	802116c <ai_platform_network_get_error>
 8017262:	4603      	mov	r3, r0
}
 8017264:	4618      	mov	r0, r3
 8017266:	3708      	adds	r7, #8
 8017268:	46bd      	mov	sp, r7
 801726a:	bd80      	pop	{r7, pc}

0801726c <ai_har_network_create>:

AI_API_ENTRY
ai_error ai_har_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 801726c:	b580      	push	{r7, lr}
 801726e:	b084      	sub	sp, #16
 8017270:	af02      	add	r7, sp, #8
 8017272:	6078      	str	r0, [r7, #4]
 8017274:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 8017276:	2300      	movs	r3, #0
 8017278:	9301      	str	r3, [sp, #4]
 801727a:	2305      	movs	r3, #5
 801727c:	9300      	str	r3, [sp, #0]
 801727e:	2301      	movs	r3, #1
 8017280:	4a04      	ldr	r2, [pc, #16]	; (8017294 <ai_har_network_create+0x28>)
 8017282:	6839      	ldr	r1, [r7, #0]
 8017284:	6878      	ldr	r0, [r7, #4]
 8017286:	f00a fb75 	bl	8021974 <ai_platform_network_create>
 801728a:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 801728c:	4618      	mov	r0, r3
 801728e:	3708      	adds	r7, #8
 8017290:	46bd      	mov	sp, r7
 8017292:	bd80      	pop	{r7, pc}
 8017294:	200005b8 	.word	0x200005b8

08017298 <ai_har_network_destroy>:
  return ai_platform_outputs_get(network, n_buffer);
}

AI_API_ENTRY
ai_handle ai_har_network_destroy(ai_handle network)
{
 8017298:	b580      	push	{r7, lr}
 801729a:	b082      	sub	sp, #8
 801729c:	af00      	add	r7, sp, #0
 801729e:	6078      	str	r0, [r7, #4]
  return ai_platform_network_destroy(network);
 80172a0:	6878      	ldr	r0, [r7, #4]
 80172a2:	f00a fc69 	bl	8021b78 <ai_platform_network_destroy>
 80172a6:	4603      	mov	r3, r0
}
 80172a8:	4618      	mov	r0, r3
 80172aa:	3708      	adds	r7, #8
 80172ac:	46bd      	mov	sp, r7
 80172ae:	bd80      	pop	{r7, pc}

080172b0 <ai_har_network_init>:

AI_API_ENTRY
ai_bool ai_har_network_init(
  ai_handle network, const ai_network_params* params)
{
 80172b0:	b580      	push	{r7, lr}
 80172b2:	b084      	sub	sp, #16
 80172b4:	af00      	add	r7, sp, #0
 80172b6:	6078      	str	r0, [r7, #4]
 80172b8:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 80172ba:	6839      	ldr	r1, [r7, #0]
 80172bc:	6878      	ldr	r0, [r7, #4]
 80172be:	f00a fcf7 	bl	8021cb0 <ai_platform_network_init>
 80172c2:	60f8      	str	r0, [r7, #12]
  if (!net_ctx) return false;
 80172c4:	68fb      	ldr	r3, [r7, #12]
 80172c6:	2b00      	cmp	r3, #0
 80172c8:	d101      	bne.n	80172ce <ai_har_network_init+0x1e>
 80172ca:	2300      	movs	r3, #0
 80172cc:	e028      	b.n	8017320 <ai_har_network_init+0x70>

  ai_bool ok = true;
 80172ce:	2301      	movs	r3, #1
 80172d0:	72fb      	strb	r3, [r7, #11]
  ok &= har_network_configure_weights(net_ctx, params);
 80172d2:	6839      	ldr	r1, [r7, #0]
 80172d4:	68f8      	ldr	r0, [r7, #12]
 80172d6:	f7ff fe9f 	bl	8017018 <har_network_configure_weights>
 80172da:	4603      	mov	r3, r0
 80172dc:	461a      	mov	r2, r3
 80172de:	7afb      	ldrb	r3, [r7, #11]
 80172e0:	4013      	ands	r3, r2
 80172e2:	2b00      	cmp	r3, #0
 80172e4:	bf14      	ite	ne
 80172e6:	2301      	movne	r3, #1
 80172e8:	2300      	moveq	r3, #0
 80172ea:	72fb      	strb	r3, [r7, #11]
  ok &= har_network_configure_activations(net_ctx, params);
 80172ec:	6839      	ldr	r1, [r7, #0]
 80172ee:	68f8      	ldr	r0, [r7, #12]
 80172f0:	f7ff fe62 	bl	8016fb8 <har_network_configure_activations>
 80172f4:	4603      	mov	r3, r0
 80172f6:	461a      	mov	r2, r3
 80172f8:	7afb      	ldrb	r3, [r7, #11]
 80172fa:	4013      	ands	r3, r2
 80172fc:	2b00      	cmp	r3, #0
 80172fe:	bf14      	ite	ne
 8017300:	2301      	movne	r3, #1
 8017302:	2300      	moveq	r3, #0
 8017304:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 8017306:	6878      	ldr	r0, [r7, #4]
 8017308:	f00a fe08 	bl	8021f1c <ai_platform_network_post_init>
 801730c:	4603      	mov	r3, r0
 801730e:	461a      	mov	r2, r3
 8017310:	7afb      	ldrb	r3, [r7, #11]
 8017312:	4013      	ands	r3, r2
 8017314:	2b00      	cmp	r3, #0
 8017316:	bf14      	ite	ne
 8017318:	2301      	movne	r3, #1
 801731a:	2300      	moveq	r3, #0
 801731c:	72fb      	strb	r3, [r7, #11]

  return ok;
 801731e:	7afb      	ldrb	r3, [r7, #11]
}
 8017320:	4618      	mov	r0, r3
 8017322:	3710      	adds	r7, #16
 8017324:	46bd      	mov	sp, r7
 8017326:	bd80      	pop	{r7, pc}

08017328 <ai_har_network_run>:


AI_API_ENTRY
ai_i32 ai_har_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 8017328:	b580      	push	{r7, lr}
 801732a:	b084      	sub	sp, #16
 801732c:	af00      	add	r7, sp, #0
 801732e:	60f8      	str	r0, [r7, #12]
 8017330:	60b9      	str	r1, [r7, #8]
 8017332:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 8017334:	687a      	ldr	r2, [r7, #4]
 8017336:	68b9      	ldr	r1, [r7, #8]
 8017338:	68f8      	ldr	r0, [r7, #12]
 801733a:	f00a fea7 	bl	802208c <ai_platform_network_process>
 801733e:	4603      	mov	r3, r0
}
 8017340:	4618      	mov	r0, r3
 8017342:	3710      	adds	r7, #16
 8017344:	46bd      	mov	sp, r7
 8017346:	bd80      	pop	{r7, pc}

08017348 <ai_har_network_forward>:

AI_API_ENTRY
ai_i32 ai_har_network_forward(ai_handle network, const ai_buffer* input)
{
 8017348:	b580      	push	{r7, lr}
 801734a:	b082      	sub	sp, #8
 801734c:	af00      	add	r7, sp, #0
 801734e:	6078      	str	r0, [r7, #4]
 8017350:	6039      	str	r1, [r7, #0]
  return ai_platform_network_process(network, input, NULL);
 8017352:	2200      	movs	r2, #0
 8017354:	6839      	ldr	r1, [r7, #0]
 8017356:	6878      	ldr	r0, [r7, #4]
 8017358:	f00a fe98 	bl	802208c <ai_platform_network_process>
 801735c:	4603      	mov	r3, r0
}
 801735e:	4618      	mov	r0, r3
 8017360:	3708      	adds	r7, #8
 8017362:	46bd      	mov	sp, r7
 8017364:	bd80      	pop	{r7, pc}
	...

08017368 <ai_har_network_data_params_get>:
 * @ingroup har_network_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_har_network_data_params_get(ai_network_params* params)
{
 8017368:	b580      	push	{r7, lr}
 801736a:	b086      	sub	sp, #24
 801736c:	af00      	add	r7, sp, #0
 801736e:	6078      	str	r0, [r7, #4]
  if (!params) return false;
 8017370:	687b      	ldr	r3, [r7, #4]
 8017372:	2b00      	cmp	r3, #0
 8017374:	d101      	bne.n	801737a <ai_har_network_data_params_get+0x12>
 8017376:	2300      	movs	r3, #0
 8017378:	e016      	b.n	80173a8 <ai_har_network_data_params_get+0x40>
  
  const ai_buffer_array map_activations = 
 801737a:	4a0d      	ldr	r2, [pc, #52]	; (80173b0 <ai_har_network_data_params_get+0x48>)
 801737c:	f107 0310 	add.w	r3, r7, #16
 8017380:	e892 0003 	ldmia.w	r2, {r0, r1}
 8017384:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_HAR_NETWORK_DATA_ACTIVATIONS_COUNT, g_har_network_data_map_activations);
  
  const ai_buffer_array map_weights = 
 8017388:	4a0a      	ldr	r2, [pc, #40]	; (80173b4 <ai_har_network_data_params_get+0x4c>)
 801738a:	f107 0308 	add.w	r3, r7, #8
 801738e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8017392:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_HAR_NETWORK_DATA_WEIGHTS_COUNT, g_har_network_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 8017396:	f107 0210 	add.w	r2, r7, #16
 801739a:	f107 0308 	add.w	r3, r7, #8
 801739e:	4619      	mov	r1, r3
 80173a0:	6878      	ldr	r0, [r7, #4]
 80173a2:	f009 fce3 	bl	8020d6c <ai_platform_bind_network_params>
 80173a6:	4603      	mov	r3, r0
}
 80173a8:	4618      	mov	r0, r3
 80173aa:	3718      	adds	r7, #24
 80173ac:	46bd      	mov	sp, r7
 80173ae:	bd80      	pop	{r7, pc}
 80173b0:	08026f64 	.word	0x08026f64
 80173b4:	08026f6c 	.word	0x08026f6c

080173b8 <MX_GPDMA1_InitCustom>:

}

/* USER CODE BEGIN 1 */
void MX_GPDMA1_InitCustom(void)
{
 80173b8:	b580      	push	{r7, lr}
 80173ba:	b082      	sub	sp, #8
 80173bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Init 0 */

  /* USER CODE END GPDMA1_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 80173be:	4b0e      	ldr	r3, [pc, #56]	; (80173f8 <MX_GPDMA1_InitCustom+0x40>)
 80173c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80173c4:	4a0c      	ldr	r2, [pc, #48]	; (80173f8 <MX_GPDMA1_InitCustom+0x40>)
 80173c6:	f043 0301 	orr.w	r3, r3, #1
 80173ca:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80173ce:	4b0a      	ldr	r3, [pc, #40]	; (80173f8 <MX_GPDMA1_InitCustom+0x40>)
 80173d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80173d4:	f003 0301 	and.w	r3, r3, #1
 80173d8:	607b      	str	r3, [r7, #4]
 80173da:	687b      	ldr	r3, [r7, #4]

  /* GPDMA1 interrupt Init */
//    HAL_NVIC_SetPriority(GPDMA1_Channel0_IRQn, 3, 0);
//    HAL_NVIC_SetPriority(GPDMA1_Channel1_IRQn, 3, 0);
    HAL_NVIC_SetPriority(GPDMA1_Channel2_IRQn, 3, 0);
 80173dc:	2200      	movs	r2, #0
 80173de:	2103      	movs	r1, #3
 80173e0:	201f      	movs	r0, #31
 80173e2:	f7eb fdc1 	bl	8002f68 <HAL_NVIC_SetPriority>
    HAL_NVIC_SetPriority(GPDMA1_Channel3_IRQn, 3, 0);
 80173e6:	2200      	movs	r2, #0
 80173e8:	2103      	movs	r1, #3
 80173ea:	2020      	movs	r0, #32
 80173ec:	f7eb fdbc 	bl	8002f68 <HAL_NVIC_SetPriority>
  /* USER CODE END GPDMA1_Init 1 */
  /* USER CODE BEGIN GPDMA1_Init 2 */

  /* USER CODE END GPDMA1_Init 2 */

}
 80173f0:	bf00      	nop
 80173f2:	3708      	adds	r7, #8
 80173f4:	46bd      	mov	sp, r7
 80173f6:	bd80      	pop	{r7, pc}
 80173f8:	46020c00 	.word	0x46020c00

080173fc <MX_GPIO_PE0_Init>:

}

/* USER CODE BEGIN 2 */
void MX_GPIO_PE0_Init(void)
{
 80173fc:	b580      	push	{r7, lr}
 80173fe:	b086      	sub	sp, #24
 8017400:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8017402:	1d3b      	adds	r3, r7, #4
 8017404:	2200      	movs	r2, #0
 8017406:	601a      	str	r2, [r3, #0]
 8017408:	605a      	str	r2, [r3, #4]
 801740a:	609a      	str	r2, [r3, #8]
 801740c:	60da      	str	r2, [r3, #12]
 801740e:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
   __HAL_RCC_GPIOE_CLK_ENABLE();
 8017410:	4b11      	ldr	r3, [pc, #68]	; (8017458 <MX_GPIO_PE0_Init+0x5c>)
 8017412:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8017416:	4a10      	ldr	r2, [pc, #64]	; (8017458 <MX_GPIO_PE0_Init+0x5c>)
 8017418:	f043 0310 	orr.w	r3, r3, #16
 801741c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8017420:	4b0d      	ldr	r3, [pc, #52]	; (8017458 <MX_GPIO_PE0_Init+0x5c>)
 8017422:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8017426:	f003 0310 	and.w	r3, r3, #16
 801742a:	603b      	str	r3, [r7, #0]
 801742c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PA5Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 801742e:	2301      	movs	r3, #1
 8017430:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8017432:	4b0a      	ldr	r3, [pc, #40]	; (801745c <MX_GPIO_PE0_Init+0x60>)
 8017434:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017436:	2300      	movs	r3, #0
 8017438:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 801743a:	1d3b      	adds	r3, r7, #4
 801743c:	4619      	mov	r1, r3
 801743e:	4808      	ldr	r0, [pc, #32]	; (8017460 <MX_GPIO_PE0_Init+0x64>)
 8017440:	f7ec ff30 	bl	80042a4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 15, 0);
 8017444:	2200      	movs	r2, #0
 8017446:	210f      	movs	r1, #15
 8017448:	200b      	movs	r0, #11
 801744a:	f7eb fd8d 	bl	8002f68 <HAL_NVIC_SetPriority>
//  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
}
 801744e:	bf00      	nop
 8017450:	3718      	adds	r7, #24
 8017452:	46bd      	mov	sp, r7
 8017454:	bd80      	pop	{r7, pc}
 8017456:	bf00      	nop
 8017458:	46020c00 	.word	0x46020c00
 801745c:	10210000 	.word	0x10210000
 8017460:	42021000 	.word	0x42021000

08017464 <MX_GPIO_PB8_Init>:
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(CS_DLPC_GPIO_Port, &GPIO_InitStruct);
}

void MX_GPIO_PB8_Init(void)
{
 8017464:	b580      	push	{r7, lr}
 8017466:	b086      	sub	sp, #24
 8017468:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801746a:	1d3b      	adds	r3, r7, #4
 801746c:	2200      	movs	r2, #0
 801746e:	601a      	str	r2, [r3, #0]
 8017470:	605a      	str	r2, [r3, #4]
 8017472:	609a      	str	r2, [r3, #8]
 8017474:	60da      	str	r2, [r3, #12]
 8017476:	611a      	str	r2, [r3, #16]

  HAL_PWREx_EnableVddIO2();
 8017478:	f7ed fdae 	bl	8004fd8 <HAL_PWREx_EnableVddIO2>
  /* GPIO Ports Clock Enable */
   __HAL_RCC_GPIOB_CLK_ENABLE();
 801747c:	4b13      	ldr	r3, [pc, #76]	; (80174cc <MX_GPIO_PB8_Init+0x68>)
 801747e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8017482:	4a12      	ldr	r2, [pc, #72]	; (80174cc <MX_GPIO_PB8_Init+0x68>)
 8017484:	f043 0302 	orr.w	r3, r3, #2
 8017488:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 801748c:	4b0f      	ldr	r3, [pc, #60]	; (80174cc <MX_GPIO_PB8_Init+0x68>)
 801748e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8017492:	f003 0302 	and.w	r3, r3, #2
 8017496:	603b      	str	r3, [r7, #0]
 8017498:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PB8Pin */
  GPIO_InitStruct.Pin = INT1_DHCX_Pin;
 801749a:	f44f 7380 	mov.w	r3, #256	; 0x100
 801749e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80174a0:	4b0b      	ldr	r3, [pc, #44]	; (80174d0 <MX_GPIO_PB8_Init+0x6c>)
 80174a2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80174a4:	2300      	movs	r3, #0
 80174a6:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(INT1_DHCX_GPIO_Port, &GPIO_InitStruct);
 80174a8:	1d3b      	adds	r3, r7, #4
 80174aa:	4619      	mov	r1, r3
 80174ac:	4809      	ldr	r0, [pc, #36]	; (80174d4 <MX_GPIO_PB8_Init+0x70>)
 80174ae:	f7ec fef9 	bl	80042a4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(INT1_DHCX_EXTI_IRQn, 5, 0);
 80174b2:	2200      	movs	r2, #0
 80174b4:	2105      	movs	r1, #5
 80174b6:	2013      	movs	r0, #19
 80174b8:	f7eb fd56 	bl	8002f68 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(INT1_DHCX_EXTI_IRQn);
 80174bc:	2013      	movs	r0, #19
 80174be:	f7eb fd7d 	bl	8002fbc <HAL_NVIC_EnableIRQ>
}
 80174c2:	bf00      	nop
 80174c4:	3718      	adds	r7, #24
 80174c6:	46bd      	mov	sp, r7
 80174c8:	bd80      	pop	{r7, pc}
 80174ca:	bf00      	nop
 80174cc:	46020c00 	.word	0x46020c00
 80174d0:	10110000 	.word	0x10110000
 80174d4:	42020400 	.word	0x42020400

080174d8 <MX_GPIO_PF4_Init>:

void MX_GPIO_PF4_Init(void)
{
 80174d8:	b580      	push	{r7, lr}
 80174da:	b086      	sub	sp, #24
 80174dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80174de:	1d3b      	adds	r3, r7, #4
 80174e0:	2200      	movs	r2, #0
 80174e2:	601a      	str	r2, [r3, #0]
 80174e4:	605a      	str	r2, [r3, #4]
 80174e6:	609a      	str	r2, [r3, #8]
 80174e8:	60da      	str	r2, [r3, #12]
 80174ea:	611a      	str	r2, [r3, #16]

  HAL_PWREx_EnableVddIO2();
 80174ec:	f7ed fd74 	bl	8004fd8 <HAL_PWREx_EnableVddIO2>
  /* GPIO Ports Clock Enable */
   __HAL_RCC_GPIOF_CLK_ENABLE();
 80174f0:	4b12      	ldr	r3, [pc, #72]	; (801753c <MX_GPIO_PF4_Init+0x64>)
 80174f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80174f6:	4a11      	ldr	r2, [pc, #68]	; (801753c <MX_GPIO_PF4_Init+0x64>)
 80174f8:	f043 0320 	orr.w	r3, r3, #32
 80174fc:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8017500:	4b0e      	ldr	r3, [pc, #56]	; (801753c <MX_GPIO_PF4_Init+0x64>)
 8017502:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8017506:	f003 0320 	and.w	r3, r3, #32
 801750a:	603b      	str	r3, [r7, #0]
 801750c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PF4Pin */
  GPIO_InitStruct.Pin = INT2_DHCX_Pin;
 801750e:	2310      	movs	r3, #16
 8017510:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8017512:	4b0b      	ldr	r3, [pc, #44]	; (8017540 <MX_GPIO_PF4_Init+0x68>)
 8017514:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017516:	2300      	movs	r3, #0
 8017518:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(INT2_DHCX_GPIO_Port, &GPIO_InitStruct);
 801751a:	1d3b      	adds	r3, r7, #4
 801751c:	4619      	mov	r1, r3
 801751e:	4809      	ldr	r0, [pc, #36]	; (8017544 <MX_GPIO_PF4_Init+0x6c>)
 8017520:	f7ec fec0 	bl	80042a4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(INT2_DHCX_EXTI_IRQn, 5, 0);
 8017524:	2200      	movs	r2, #0
 8017526:	2105      	movs	r1, #5
 8017528:	200f      	movs	r0, #15
 801752a:	f7eb fd1d 	bl	8002f68 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(INT2_DHCX_EXTI_IRQn);
 801752e:	200f      	movs	r0, #15
 8017530:	f7eb fd44 	bl	8002fbc <HAL_NVIC_EnableIRQ>
}
 8017534:	bf00      	nop
 8017536:	3718      	adds	r7, #24
 8017538:	46bd      	mov	sp, r7
 801753a:	bd80      	pop	{r7, pc}
 801753c:	46020c00 	.word	0x46020c00
 8017540:	10110000 	.word	0x10110000
 8017544:	42021400 	.word	0x42021400

08017548 <MX_GPIO_PH15_Init>:

void MX_GPIO_PH15_Init(void)
{
 8017548:	b580      	push	{r7, lr}
 801754a:	b086      	sub	sp, #24
 801754c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801754e:	1d3b      	adds	r3, r7, #4
 8017550:	2200      	movs	r2, #0
 8017552:	601a      	str	r2, [r3, #0]
 8017554:	605a      	str	r2, [r3, #4]
 8017556:	609a      	str	r2, [r3, #8]
 8017558:	60da      	str	r2, [r3, #12]
 801755a:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  HAL_PWREx_EnableVddIO2();
 801755c:	f7ed fd3c 	bl	8004fd8 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8017560:	4b13      	ldr	r3, [pc, #76]	; (80175b0 <MX_GPIO_PH15_Init+0x68>)
 8017562:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8017566:	4a12      	ldr	r2, [pc, #72]	; (80175b0 <MX_GPIO_PH15_Init+0x68>)
 8017568:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801756c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8017570:	4b0f      	ldr	r3, [pc, #60]	; (80175b0 <MX_GPIO_PH15_Init+0x68>)
 8017572:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8017576:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801757a:	603b      	str	r3, [r7, #0]
 801757c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_DHCX_GPIO_Port, CS_DHCX_Pin, GPIO_PIN_SET);
 801757e:	2201      	movs	r2, #1
 8017580:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8017584:	480b      	ldr	r0, [pc, #44]	; (80175b4 <MX_GPIO_PH15_Init+0x6c>)
 8017586:	f7ed fab9 	bl	8004afc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PH15 */
  GPIO_InitStruct.Pin = CS_DHCX_Pin;
 801758a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801758e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8017590:	2301      	movs	r3, #1
 8017592:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017594:	2300      	movs	r3, #0
 8017596:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8017598:	2302      	movs	r3, #2
 801759a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(CS_DHCX_GPIO_Port, &GPIO_InitStruct);
 801759c:	1d3b      	adds	r3, r7, #4
 801759e:	4619      	mov	r1, r3
 80175a0:	4804      	ldr	r0, [pc, #16]	; (80175b4 <MX_GPIO_PH15_Init+0x6c>)
 80175a2:	f7ec fe7f 	bl	80042a4 <HAL_GPIO_Init>
}
 80175a6:	bf00      	nop
 80175a8:	3718      	adds	r7, #24
 80175aa:	46bd      	mov	sp, r7
 80175ac:	bd80      	pop	{r7, pc}
 80175ae:	bf00      	nop
 80175b0:	46020c00 	.word	0x46020c00
 80175b4:	42021c00 	.word	0x42021c00

080175b8 <MX_GPIO_PF12_Init>:
  HAL_NVIC_SetPriority(INT1_DWB_EXTI_IRQn, 5, 0);
  HAL_NVIC_EnableIRQ(INT1_DWB_EXTI_IRQn);
}

void MX_GPIO_PF12_Init(void)
{
 80175b8:	b580      	push	{r7, lr}
 80175ba:	b086      	sub	sp, #24
 80175bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80175be:	1d3b      	adds	r3, r7, #4
 80175c0:	2200      	movs	r2, #0
 80175c2:	601a      	str	r2, [r3, #0]
 80175c4:	605a      	str	r2, [r3, #4]
 80175c6:	609a      	str	r2, [r3, #8]
 80175c8:	60da      	str	r2, [r3, #12]
 80175ca:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  HAL_PWREx_EnableVddIO2();
 80175cc:	f7ed fd04 	bl	8004fd8 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80175d0:	4b13      	ldr	r3, [pc, #76]	; (8017620 <MX_GPIO_PF12_Init+0x68>)
 80175d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80175d6:	4a12      	ldr	r2, [pc, #72]	; (8017620 <MX_GPIO_PF12_Init+0x68>)
 80175d8:	f043 0320 	orr.w	r3, r3, #32
 80175dc:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80175e0:	4b0f      	ldr	r3, [pc, #60]	; (8017620 <MX_GPIO_PF12_Init+0x68>)
 80175e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80175e6:	f003 0320 	and.w	r3, r3, #32
 80175ea:	603b      	str	r3, [r7, #0]
 80175ec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_DWB_GPIO_Port, CS_DWB_Pin, GPIO_PIN_SET);
 80175ee:	2201      	movs	r2, #1
 80175f0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80175f4:	480b      	ldr	r0, [pc, #44]	; (8017624 <MX_GPIO_PF12_Init+0x6c>)
 80175f6:	f7ed fa81 	bl	8004afc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PF12 */
  GPIO_InitStruct.Pin = CS_DWB_Pin;
 80175fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80175fe:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8017600:	2301      	movs	r3, #1
 8017602:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017604:	2300      	movs	r3, #0
 8017606:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8017608:	2302      	movs	r3, #2
 801760a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(CS_DWB_GPIO_Port, &GPIO_InitStruct);
 801760c:	1d3b      	adds	r3, r7, #4
 801760e:	4619      	mov	r1, r3
 8017610:	4804      	ldr	r0, [pc, #16]	; (8017624 <MX_GPIO_PF12_Init+0x6c>)
 8017612:	f7ec fe47 	bl	80042a4 <HAL_GPIO_Init>
}
 8017616:	bf00      	nop
 8017618:	3718      	adds	r7, #24
 801761a:	46bd      	mov	sp, r7
 801761c:	bd80      	pop	{r7, pc}
 801761e:	bf00      	nop
 8017620:	46020c00 	.word	0x46020c00
 8017624:	42021400 	.word	0x42021400

08017628 <MX_SPI2_Init>:
  /* USER CODE END SPI1_Init 2 */

}
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8017628:	b580      	push	{r7, lr}
 801762a:	b084      	sub	sp, #16
 801762c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 801762e:	1d3b      	adds	r3, r7, #4
 8017630:	2200      	movs	r2, #0
 8017632:	601a      	str	r2, [r3, #0]
 8017634:	605a      	str	r2, [r3, #4]
 8017636:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8017638:	4b31      	ldr	r3, [pc, #196]	; (8017700 <MX_SPI2_Init+0xd8>)
 801763a:	4a32      	ldr	r2, [pc, #200]	; (8017704 <MX_SPI2_Init+0xdc>)
 801763c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 801763e:	4b30      	ldr	r3, [pc, #192]	; (8017700 <MX_SPI2_Init+0xd8>)
 8017640:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8017644:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8017646:	4b2e      	ldr	r3, [pc, #184]	; (8017700 <MX_SPI2_Init+0xd8>)
 8017648:	2200      	movs	r2, #0
 801764a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 801764c:	4b2c      	ldr	r3, [pc, #176]	; (8017700 <MX_SPI2_Init+0xd8>)
 801764e:	2207      	movs	r2, #7
 8017650:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8017652:	4b2b      	ldr	r3, [pc, #172]	; (8017700 <MX_SPI2_Init+0xd8>)
 8017654:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8017658:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 801765a:	4b29      	ldr	r3, [pc, #164]	; (8017700 <MX_SPI2_Init+0xd8>)
 801765c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8017660:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8017662:	4b27      	ldr	r3, [pc, #156]	; (8017700 <MX_SPI2_Init+0xd8>)
 8017664:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8017668:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 801766a:	4b25      	ldr	r3, [pc, #148]	; (8017700 <MX_SPI2_Init+0xd8>)
 801766c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8017670:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8017672:	4b23      	ldr	r3, [pc, #140]	; (8017700 <MX_SPI2_Init+0xd8>)
 8017674:	2200      	movs	r2, #0
 8017676:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8017678:	4b21      	ldr	r3, [pc, #132]	; (8017700 <MX_SPI2_Init+0xd8>)
 801767a:	2200      	movs	r2, #0
 801767c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801767e:	4b20      	ldr	r3, [pc, #128]	; (8017700 <MX_SPI2_Init+0xd8>)
 8017680:	2200      	movs	r2, #0
 8017682:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x7;
 8017684:	4b1e      	ldr	r3, [pc, #120]	; (8017700 <MX_SPI2_Init+0xd8>)
 8017686:	2207      	movs	r2, #7
 8017688:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 801768a:	4b1d      	ldr	r3, [pc, #116]	; (8017700 <MX_SPI2_Init+0xd8>)
 801768c:	2200      	movs	r2, #0
 801768e:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8017690:	4b1b      	ldr	r3, [pc, #108]	; (8017700 <MX_SPI2_Init+0xd8>)
 8017692:	2200      	movs	r2, #0
 8017694:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8017696:	4b1a      	ldr	r3, [pc, #104]	; (8017700 <MX_SPI2_Init+0xd8>)
 8017698:	2200      	movs	r2, #0
 801769a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 801769c:	4b18      	ldr	r3, [pc, #96]	; (8017700 <MX_SPI2_Init+0xd8>)
 801769e:	2200      	movs	r2, #0
 80176a0:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80176a2:	4b17      	ldr	r3, [pc, #92]	; (8017700 <MX_SPI2_Init+0xd8>)
 80176a4:	2200      	movs	r2, #0
 80176a6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80176a8:	4b15      	ldr	r3, [pc, #84]	; (8017700 <MX_SPI2_Init+0xd8>)
 80176aa:	2200      	movs	r2, #0
 80176ac:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80176ae:	4b14      	ldr	r3, [pc, #80]	; (8017700 <MX_SPI2_Init+0xd8>)
 80176b0:	2200      	movs	r2, #0
 80176b2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80176b4:	4b12      	ldr	r3, [pc, #72]	; (8017700 <MX_SPI2_Init+0xd8>)
 80176b6:	2200      	movs	r2, #0
 80176b8:	659a      	str	r2, [r3, #88]	; 0x58
  hspi2.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 80176ba:	4b11      	ldr	r3, [pc, #68]	; (8017700 <MX_SPI2_Init+0xd8>)
 80176bc:	2200      	movs	r2, #0
 80176be:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi2.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 80176c0:	4b0f      	ldr	r3, [pc, #60]	; (8017700 <MX_SPI2_Init+0xd8>)
 80176c2:	2200      	movs	r2, #0
 80176c4:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80176c6:	480e      	ldr	r0, [pc, #56]	; (8017700 <MX_SPI2_Init+0xd8>)
 80176c8:	f7f2 fe30 	bl	800a32c <HAL_SPI_Init>
 80176cc:	4603      	mov	r3, r0
 80176ce:	2b00      	cmp	r3, #0
 80176d0:	d001      	beq.n	80176d6 <MX_SPI2_Init+0xae>
  {
    sys_error_handler();
 80176d2:	f7f7 fb41 	bl	800ed58 <sys_error_handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 80176d6:	2300      	movs	r3, #0
 80176d8:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH1_TCF_TRG;
 80176da:	4b0b      	ldr	r3, [pc, #44]	; (8017708 <MX_SPI2_Init+0xe0>)
 80176dc:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 80176de:	2300      	movs	r3, #0
 80176e0:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi2, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 80176e2:	1d3b      	adds	r3, r7, #4
 80176e4:	4619      	mov	r1, r3
 80176e6:	4806      	ldr	r0, [pc, #24]	; (8017700 <MX_SPI2_Init+0xd8>)
 80176e8:	f7f4 fee8 	bl	800c4bc <HAL_SPIEx_SetConfigAutonomousMode>
 80176ec:	4603      	mov	r3, r0
 80176ee:	2b00      	cmp	r3, #0
 80176f0:	d001      	beq.n	80176f6 <MX_SPI2_Init+0xce>
  {
    sys_error_handler();
 80176f2:	f7f7 fb31 	bl	800ed58 <sys_error_handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80176f6:	bf00      	nop
 80176f8:	3710      	adds	r7, #16
 80176fa:	46bd      	mov	sp, r7
 80176fc:	bd80      	pop	{r7, pc}
 80176fe:	bf00      	nop
 8017700:	20039504 	.word	0x20039504
 8017704:	40003800 	.word	0x40003800
 8017708:	10010000 	.word	0x10010000

0801770c <HAL_SPI_MspInit>:
  /* USER CODE END SPI3_Init 2 */

}

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 801770c:	b580      	push	{r7, lr}
 801770e:	b0c6      	sub	sp, #280	; 0x118
 8017710:	af00      	add	r7, sp, #0
 8017712:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8017716:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 801771a:	6018      	str	r0, [r3, #0]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801771c:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8017720:	2200      	movs	r2, #0
 8017722:	601a      	str	r2, [r3, #0]
 8017724:	605a      	str	r2, [r3, #4]
 8017726:	609a      	str	r2, [r3, #8]
 8017728:	60da      	str	r2, [r3, #12]
 801772a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 801772c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8017730:	22c8      	movs	r2, #200	; 0xc8
 8017732:	2100      	movs	r1, #0
 8017734:	4618      	mov	r0, r3
 8017736:	f00c fa78 	bl	8023c2a <memset>
  if(spiHandle->Instance==SPI1)
 801773a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801773e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8017742:	681b      	ldr	r3, [r3, #0]
 8017744:	681b      	ldr	r3, [r3, #0]
 8017746:	4ab0      	ldr	r2, [pc, #704]	; (8017a08 <HAL_SPI_MspInit+0x2fc>)
 8017748:	4293      	cmp	r3, r2
 801774a:	d149      	bne.n	80177e0 <HAL_SPI_MspInit+0xd4>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */
    HAL_PWREx_EnableVddIO2();
 801774c:	f7ed fc44 	bl	8004fd8 <HAL_PWREx_EnableVddIO2>
  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8017750:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8017754:	f04f 0300 	mov.w	r3, #0
 8017758:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    PeriphClkInit.Spi1ClockSelection = RCC_SPI1CLKSOURCE_SYSCLK;
 801775c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8017760:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8017764:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8017768:	4618      	mov	r0, r3
 801776a:	f7ef fbf1 	bl	8006f50 <HAL_RCCEx_PeriphCLKConfig>
 801776e:	4603      	mov	r3, r0
 8017770:	2b00      	cmp	r3, #0
 8017772:	d001      	beq.n	8017778 <HAL_SPI_MspInit+0x6c>
    {
      sys_error_handler();
 8017774:	f7f7 faf0 	bl	800ed58 <sys_error_handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8017778:	4ba4      	ldr	r3, [pc, #656]	; (8017a0c <HAL_SPI_MspInit+0x300>)
 801777a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 801777e:	4aa3      	ldr	r2, [pc, #652]	; (8017a0c <HAL_SPI_MspInit+0x300>)
 8017780:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8017784:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8017788:	4ba0      	ldr	r3, [pc, #640]	; (8017a0c <HAL_SPI_MspInit+0x300>)
 801778a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 801778e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8017792:	637b      	str	r3, [r7, #52]	; 0x34
 8017794:	6b7b      	ldr	r3, [r7, #52]	; 0x34

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8017796:	4b9d      	ldr	r3, [pc, #628]	; (8017a0c <HAL_SPI_MspInit+0x300>)
 8017798:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801779c:	4a9b      	ldr	r2, [pc, #620]	; (8017a0c <HAL_SPI_MspInit+0x300>)
 801779e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80177a2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80177a6:	4b99      	ldr	r3, [pc, #612]	; (8017a0c <HAL_SPI_MspInit+0x300>)
 80177a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80177ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80177b0:	633b      	str	r3, [r7, #48]	; 0x30
 80177b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /**SPI1 GPIO Configuration
    PG4     ------> SPI1_MOSI
    PG3     ------> SPI1_MISO
    PG2     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2;
 80177b4:	231c      	movs	r3, #28
 80177b6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80177ba:	2302      	movs	r3, #2
 80177bc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80177c0:	2300      	movs	r3, #0
 80177c2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80177c6:	2300      	movs	r3, #0
 80177c8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80177cc:	2305      	movs	r3, #5
 80177ce:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80177d2:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80177d6:	4619      	mov	r1, r3
 80177d8:	488d      	ldr	r0, [pc, #564]	; (8017a10 <HAL_SPI_MspInit+0x304>)
 80177da:	f7ec fd63 	bl	80042a4 <HAL_GPIO_Init>
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(BLE_RST_GPIO_Port, &GPIO_InitStruct);

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80177de:	e220      	b.n	8017c22 <HAL_SPI_MspInit+0x516>
  else if(spiHandle->Instance==SPI2)
 80177e0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80177e4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80177e8:	681b      	ldr	r3, [r3, #0]
 80177ea:	681b      	ldr	r3, [r3, #0]
 80177ec:	4a89      	ldr	r2, [pc, #548]	; (8017a14 <HAL_SPI_MspInit+0x308>)
 80177ee:	4293      	cmp	r3, r2
 80177f0:	f040 811e 	bne.w	8017a30 <HAL_SPI_MspInit+0x324>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80177f4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80177f8:	f04f 0300 	mov.w	r3, #0
 80177fc:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    PeriphClkInit.Spi2ClockSelection = RCC_SPI2CLKSOURCE_PCLK1;
 8017800:	2300      	movs	r3, #0
 8017802:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8017806:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801780a:	4618      	mov	r0, r3
 801780c:	f7ef fba0 	bl	8006f50 <HAL_RCCEx_PeriphCLKConfig>
 8017810:	4603      	mov	r3, r0
 8017812:	2b00      	cmp	r3, #0
 8017814:	d001      	beq.n	801781a <HAL_SPI_MspInit+0x10e>
      sys_error_handler();
 8017816:	f7f7 fa9f 	bl	800ed58 <sys_error_handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 801781a:	4b7c      	ldr	r3, [pc, #496]	; (8017a0c <HAL_SPI_MspInit+0x300>)
 801781c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8017820:	4a7a      	ldr	r2, [pc, #488]	; (8017a0c <HAL_SPI_MspInit+0x300>)
 8017822:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8017826:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 801782a:	4b78      	ldr	r3, [pc, #480]	; (8017a0c <HAL_SPI_MspInit+0x300>)
 801782c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8017830:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8017834:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8017838:	4b74      	ldr	r3, [pc, #464]	; (8017a0c <HAL_SPI_MspInit+0x300>)
 801783a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801783e:	4a73      	ldr	r2, [pc, #460]	; (8017a0c <HAL_SPI_MspInit+0x300>)
 8017840:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8017844:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8017848:	4b70      	ldr	r3, [pc, #448]	; (8017a0c <HAL_SPI_MspInit+0x300>)
 801784a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801784e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8017852:	62bb      	str	r3, [r7, #40]	; 0x28
 8017854:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8017856:	4b6d      	ldr	r3, [pc, #436]	; (8017a0c <HAL_SPI_MspInit+0x300>)
 8017858:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801785c:	4a6b      	ldr	r2, [pc, #428]	; (8017a0c <HAL_SPI_MspInit+0x300>)
 801785e:	f043 0308 	orr.w	r3, r3, #8
 8017862:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8017866:	4b69      	ldr	r3, [pc, #420]	; (8017a0c <HAL_SPI_MspInit+0x300>)
 8017868:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801786c:	f003 0308 	and.w	r3, r3, #8
 8017870:	627b      	str	r3, [r7, #36]	; 0x24
 8017872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 8017874:	230a      	movs	r3, #10
 8017876:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801787a:	2302      	movs	r3, #2
 801787c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017880:	2300      	movs	r3, #0
 8017882:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8017886:	2300      	movs	r3, #0
 8017888:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 801788c:	2305      	movs	r3, #5
 801788e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8017892:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8017896:	4619      	mov	r1, r3
 8017898:	485f      	ldr	r0, [pc, #380]	; (8017a18 <HAL_SPI_MspInit+0x30c>)
 801789a:	f7ec fd03 	bl	80042a4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 801789e:	2308      	movs	r3, #8
 80178a0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80178a4:	2302      	movs	r3, #2
 80178a6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80178aa:	2300      	movs	r3, #0
 80178ac:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80178b0:	2300      	movs	r3, #0
 80178b2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80178b6:	2305      	movs	r3, #5
 80178b8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80178bc:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80178c0:	4619      	mov	r1, r3
 80178c2:	4856      	ldr	r0, [pc, #344]	; (8017a1c <HAL_SPI_MspInit+0x310>)
 80178c4:	f7ec fcee 	bl	80042a4 <HAL_GPIO_Init>
    handle_GPDMA1_Channel1.Instance = GPDMA1_Channel1;
 80178c8:	4b55      	ldr	r3, [pc, #340]	; (8017a20 <HAL_SPI_MspInit+0x314>)
 80178ca:	4a56      	ldr	r2, [pc, #344]	; (8017a24 <HAL_SPI_MspInit+0x318>)
 80178cc:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel1.Init.Request = GPDMA1_REQUEST_SPI2_TX;
 80178ce:	4b54      	ldr	r3, [pc, #336]	; (8017a20 <HAL_SPI_MspInit+0x314>)
 80178d0:	2209      	movs	r2, #9
 80178d2:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel1.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 80178d4:	4b52      	ldr	r3, [pc, #328]	; (8017a20 <HAL_SPI_MspInit+0x314>)
 80178d6:	2200      	movs	r2, #0
 80178d8:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80178da:	4b51      	ldr	r3, [pc, #324]	; (8017a20 <HAL_SPI_MspInit+0x314>)
 80178dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80178e0:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel1.Init.SrcInc = DMA_SINC_INCREMENTED;
 80178e2:	4b4f      	ldr	r3, [pc, #316]	; (8017a20 <HAL_SPI_MspInit+0x314>)
 80178e4:	2208      	movs	r2, #8
 80178e6:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel1.Init.DestInc = DMA_DINC_FIXED;
 80178e8:	4b4d      	ldr	r3, [pc, #308]	; (8017a20 <HAL_SPI_MspInit+0x314>)
 80178ea:	2200      	movs	r2, #0
 80178ec:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel1.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
 80178ee:	4b4c      	ldr	r3, [pc, #304]	; (8017a20 <HAL_SPI_MspInit+0x314>)
 80178f0:	2200      	movs	r2, #0
 80178f2:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel1.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 80178f4:	4b4a      	ldr	r3, [pc, #296]	; (8017a20 <HAL_SPI_MspInit+0x314>)
 80178f6:	2200      	movs	r2, #0
 80178f8:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel1.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 80178fa:	4b49      	ldr	r3, [pc, #292]	; (8017a20 <HAL_SPI_MspInit+0x314>)
 80178fc:	2200      	movs	r2, #0
 80178fe:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel1.Init.SrcBurstLength = 1;
 8017900:	4b47      	ldr	r3, [pc, #284]	; (8017a20 <HAL_SPI_MspInit+0x314>)
 8017902:	2201      	movs	r2, #1
 8017904:	625a      	str	r2, [r3, #36]	; 0x24
    handle_GPDMA1_Channel1.Init.DestBurstLength = 1;
 8017906:	4b46      	ldr	r3, [pc, #280]	; (8017a20 <HAL_SPI_MspInit+0x314>)
 8017908:	2201      	movs	r2, #1
 801790a:	629a      	str	r2, [r3, #40]	; 0x28
    handle_GPDMA1_Channel1.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 801790c:	4b44      	ldr	r3, [pc, #272]	; (8017a20 <HAL_SPI_MspInit+0x314>)
 801790e:	2200      	movs	r2, #0
 8017910:	62da      	str	r2, [r3, #44]	; 0x2c
    handle_GPDMA1_Channel1.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8017912:	4b43      	ldr	r3, [pc, #268]	; (8017a20 <HAL_SPI_MspInit+0x314>)
 8017914:	2200      	movs	r2, #0
 8017916:	631a      	str	r2, [r3, #48]	; 0x30
    handle_GPDMA1_Channel1.Init.Mode = DMA_NORMAL;
 8017918:	4b41      	ldr	r3, [pc, #260]	; (8017a20 <HAL_SPI_MspInit+0x314>)
 801791a:	2200      	movs	r2, #0
 801791c:	635a      	str	r2, [r3, #52]	; 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel1) != HAL_OK)
 801791e:	4840      	ldr	r0, [pc, #256]	; (8017a20 <HAL_SPI_MspInit+0x314>)
 8017920:	f7eb fb8a 	bl	8003038 <HAL_DMA_Init>
 8017924:	4603      	mov	r3, r0
 8017926:	2b00      	cmp	r3, #0
 8017928:	d001      	beq.n	801792e <HAL_SPI_MspInit+0x222>
      sys_error_handler();
 801792a:	f7f7 fa15 	bl	800ed58 <sys_error_handler>
    __HAL_LINKDMA(spiHandle, hdmatx, handle_GPDMA1_Channel1);
 801792e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8017932:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8017936:	681b      	ldr	r3, [r3, #0]
 8017938:	4a39      	ldr	r2, [pc, #228]	; (8017a20 <HAL_SPI_MspInit+0x314>)
 801793a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 801793e:	4a38      	ldr	r2, [pc, #224]	; (8017a20 <HAL_SPI_MspInit+0x314>)
 8017940:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8017944:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8017948:	681b      	ldr	r3, [r3, #0]
 801794a:	65d3      	str	r3, [r2, #92]	; 0x5c
    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel1, DMA_CHANNEL_NPRIV) != HAL_OK)
 801794c:	2110      	movs	r1, #16
 801794e:	4834      	ldr	r0, [pc, #208]	; (8017a20 <HAL_SPI_MspInit+0x314>)
 8017950:	f7ec f8c4 	bl	8003adc <HAL_DMA_ConfigChannelAttributes>
 8017954:	4603      	mov	r3, r0
 8017956:	2b00      	cmp	r3, #0
 8017958:	d001      	beq.n	801795e <HAL_SPI_MspInit+0x252>
      sys_error_handler();
 801795a:	f7f7 f9fd 	bl	800ed58 <sys_error_handler>
    handle_GPDMA1_Channel0.Instance = GPDMA1_Channel0;
 801795e:	4b32      	ldr	r3, [pc, #200]	; (8017a28 <HAL_SPI_MspInit+0x31c>)
 8017960:	4a32      	ldr	r2, [pc, #200]	; (8017a2c <HAL_SPI_MspInit+0x320>)
 8017962:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel0.Init.Request = GPDMA1_REQUEST_SPI2_RX;
 8017964:	4b30      	ldr	r3, [pc, #192]	; (8017a28 <HAL_SPI_MspInit+0x31c>)
 8017966:	2208      	movs	r2, #8
 8017968:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel0.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 801796a:	4b2f      	ldr	r3, [pc, #188]	; (8017a28 <HAL_SPI_MspInit+0x31c>)
 801796c:	2200      	movs	r2, #0
 801796e:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8017970:	4b2d      	ldr	r3, [pc, #180]	; (8017a28 <HAL_SPI_MspInit+0x31c>)
 8017972:	2200      	movs	r2, #0
 8017974:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel0.Init.SrcInc = DMA_SINC_FIXED;
 8017976:	4b2c      	ldr	r3, [pc, #176]	; (8017a28 <HAL_SPI_MspInit+0x31c>)
 8017978:	2200      	movs	r2, #0
 801797a:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel0.Init.DestInc = DMA_DINC_INCREMENTED;
 801797c:	4b2a      	ldr	r3, [pc, #168]	; (8017a28 <HAL_SPI_MspInit+0x31c>)
 801797e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8017982:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel0.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
 8017984:	4b28      	ldr	r3, [pc, #160]	; (8017a28 <HAL_SPI_MspInit+0x31c>)
 8017986:	2200      	movs	r2, #0
 8017988:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel0.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 801798a:	4b27      	ldr	r3, [pc, #156]	; (8017a28 <HAL_SPI_MspInit+0x31c>)
 801798c:	2200      	movs	r2, #0
 801798e:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel0.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8017990:	4b25      	ldr	r3, [pc, #148]	; (8017a28 <HAL_SPI_MspInit+0x31c>)
 8017992:	2200      	movs	r2, #0
 8017994:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel0.Init.SrcBurstLength = 1;
 8017996:	4b24      	ldr	r3, [pc, #144]	; (8017a28 <HAL_SPI_MspInit+0x31c>)
 8017998:	2201      	movs	r2, #1
 801799a:	625a      	str	r2, [r3, #36]	; 0x24
    handle_GPDMA1_Channel0.Init.DestBurstLength = 1;
 801799c:	4b22      	ldr	r3, [pc, #136]	; (8017a28 <HAL_SPI_MspInit+0x31c>)
 801799e:	2201      	movs	r2, #1
 80179a0:	629a      	str	r2, [r3, #40]	; 0x28
    handle_GPDMA1_Channel0.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 80179a2:	4b21      	ldr	r3, [pc, #132]	; (8017a28 <HAL_SPI_MspInit+0x31c>)
 80179a4:	2200      	movs	r2, #0
 80179a6:	62da      	str	r2, [r3, #44]	; 0x2c
    handle_GPDMA1_Channel0.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 80179a8:	4b1f      	ldr	r3, [pc, #124]	; (8017a28 <HAL_SPI_MspInit+0x31c>)
 80179aa:	2200      	movs	r2, #0
 80179ac:	631a      	str	r2, [r3, #48]	; 0x30
    handle_GPDMA1_Channel0.Init.Mode = DMA_NORMAL;
 80179ae:	4b1e      	ldr	r3, [pc, #120]	; (8017a28 <HAL_SPI_MspInit+0x31c>)
 80179b0:	2200      	movs	r2, #0
 80179b2:	635a      	str	r2, [r3, #52]	; 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel0) != HAL_OK)
 80179b4:	481c      	ldr	r0, [pc, #112]	; (8017a28 <HAL_SPI_MspInit+0x31c>)
 80179b6:	f7eb fb3f 	bl	8003038 <HAL_DMA_Init>
 80179ba:	4603      	mov	r3, r0
 80179bc:	2b00      	cmp	r3, #0
 80179be:	d001      	beq.n	80179c4 <HAL_SPI_MspInit+0x2b8>
      sys_error_handler();
 80179c0:	f7f7 f9ca 	bl	800ed58 <sys_error_handler>
    __HAL_LINKDMA(spiHandle, hdmarx, handle_GPDMA1_Channel0);
 80179c4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80179c8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80179cc:	681b      	ldr	r3, [r3, #0]
 80179ce:	4a16      	ldr	r2, [pc, #88]	; (8017a28 <HAL_SPI_MspInit+0x31c>)
 80179d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 80179d4:	4a14      	ldr	r2, [pc, #80]	; (8017a28 <HAL_SPI_MspInit+0x31c>)
 80179d6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80179da:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80179de:	681b      	ldr	r3, [r3, #0]
 80179e0:	65d3      	str	r3, [r2, #92]	; 0x5c
    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel0, DMA_CHANNEL_NPRIV) != HAL_OK)
 80179e2:	2110      	movs	r1, #16
 80179e4:	4810      	ldr	r0, [pc, #64]	; (8017a28 <HAL_SPI_MspInit+0x31c>)
 80179e6:	f7ec f879 	bl	8003adc <HAL_DMA_ConfigChannelAttributes>
 80179ea:	4603      	mov	r3, r0
 80179ec:	2b00      	cmp	r3, #0
 80179ee:	d001      	beq.n	80179f4 <HAL_SPI_MspInit+0x2e8>
      sys_error_handler();
 80179f0:	f7f7 f9b2 	bl	800ed58 <sys_error_handler>
    HAL_NVIC_SetPriority(SPI2_IRQn, 4, 0);
 80179f4:	2200      	movs	r2, #0
 80179f6:	2104      	movs	r1, #4
 80179f8:	203c      	movs	r0, #60	; 0x3c
 80179fa:	f7eb fab5 	bl	8002f68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80179fe:	203c      	movs	r0, #60	; 0x3c
 8017a00:	f7eb fadc 	bl	8002fbc <HAL_NVIC_EnableIRQ>
}
 8017a04:	e10d      	b.n	8017c22 <HAL_SPI_MspInit+0x516>
 8017a06:	bf00      	nop
 8017a08:	40013000 	.word	0x40013000
 8017a0c:	46020c00 	.word	0x46020c00
 8017a10:	42021800 	.word	0x42021800
 8017a14:	40003800 	.word	0x40003800
 8017a18:	42022000 	.word	0x42022000
 8017a1c:	42020c00 	.word	0x42020c00
 8017a20:	200395bc 	.word	0x200395bc
 8017a24:	400200d0 	.word	0x400200d0
 8017a28:	20039634 	.word	0x20039634
 8017a2c:	40020050 	.word	0x40020050
  else if(spiHandle->Instance==SPI3)
 8017a30:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8017a34:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8017a38:	681b      	ldr	r3, [r3, #0]
 8017a3a:	681b      	ldr	r3, [r3, #0]
 8017a3c:	4a7b      	ldr	r2, [pc, #492]	; (8017c2c <HAL_SPI_MspInit+0x520>)
 8017a3e:	4293      	cmp	r3, r2
 8017a40:	f040 80ef 	bne.w	8017c22 <HAL_SPI_MspInit+0x516>
    __HAL_RCC_PWR_CLK_ENABLE();
 8017a44:	4b7a      	ldr	r3, [pc, #488]	; (8017c30 <HAL_SPI_MspInit+0x524>)
 8017a46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8017a4a:	4a79      	ldr	r2, [pc, #484]	; (8017c30 <HAL_SPI_MspInit+0x524>)
 8017a4c:	f043 0304 	orr.w	r3, r3, #4
 8017a50:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8017a54:	4b76      	ldr	r3, [pc, #472]	; (8017c30 <HAL_SPI_MspInit+0x524>)
 8017a56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8017a5a:	f003 0304 	and.w	r3, r3, #4
 8017a5e:	623b      	str	r3, [r7, #32]
 8017a60:	6a3b      	ldr	r3, [r7, #32]
    HAL_PWREx_EnableIO2VM();
 8017a62:	f7ed fac9 	bl	8004ff8 <HAL_PWREx_EnableIO2VM>
    while(!(PWR->SVMCR & PWR_SVMCR_IO2VMEN));
 8017a66:	bf00      	nop
 8017a68:	4b72      	ldr	r3, [pc, #456]	; (8017c34 <HAL_SPI_MspInit+0x528>)
 8017a6a:	691b      	ldr	r3, [r3, #16]
 8017a6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8017a70:	2b00      	cmp	r3, #0
 8017a72:	d0f9      	beq.n	8017a68 <HAL_SPI_MspInit+0x35c>
    HAL_PWREx_EnableVddIO2();
 8017a74:	f7ed fab0 	bl	8004fd8 <HAL_PWREx_EnableVddIO2>
    while(!(PWR->SVMSR & PWR_SVMSR_VDDIO2RDY)); 
 8017a78:	bf00      	nop
 8017a7a:	4b6e      	ldr	r3, [pc, #440]	; (8017c34 <HAL_SPI_MspInit+0x528>)
 8017a7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017a7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8017a82:	2b00      	cmp	r3, #0
 8017a84:	d0f9      	beq.n	8017a7a <HAL_SPI_MspInit+0x36e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8017a86:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8017a8a:	f04f 0300 	mov.w	r3, #0
 8017a8e:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    PeriphClkInit.Spi3ClockSelection = RCC_SPI3CLKSOURCE_HSI;
 8017a92:	2310      	movs	r3, #16
 8017a94:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8017a98:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8017a9c:	4618      	mov	r0, r3
 8017a9e:	f7ef fa57 	bl	8006f50 <HAL_RCCEx_PeriphCLKConfig>
 8017aa2:	4603      	mov	r3, r0
 8017aa4:	2b00      	cmp	r3, #0
 8017aa6:	d001      	beq.n	8017aac <HAL_SPI_MspInit+0x3a0>
      sys_error_handler();
 8017aa8:	f7f7 f956 	bl	800ed58 <sys_error_handler>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8017aac:	4b60      	ldr	r3, [pc, #384]	; (8017c30 <HAL_SPI_MspInit+0x524>)
 8017aae:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8017ab2:	4a5f      	ldr	r2, [pc, #380]	; (8017c30 <HAL_SPI_MspInit+0x524>)
 8017ab4:	f043 0320 	orr.w	r3, r3, #32
 8017ab8:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 8017abc:	4b5c      	ldr	r3, [pc, #368]	; (8017c30 <HAL_SPI_MspInit+0x524>)
 8017abe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8017ac2:	f003 0320 	and.w	r3, r3, #32
 8017ac6:	61fb      	str	r3, [r7, #28]
 8017ac8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8017aca:	4b59      	ldr	r3, [pc, #356]	; (8017c30 <HAL_SPI_MspInit+0x524>)
 8017acc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8017ad0:	4a57      	ldr	r2, [pc, #348]	; (8017c30 <HAL_SPI_MspInit+0x524>)
 8017ad2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017ad6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8017ada:	4b55      	ldr	r3, [pc, #340]	; (8017c30 <HAL_SPI_MspInit+0x524>)
 8017adc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8017ae0:	f003 0240 	and.w	r2, r3, #64	; 0x40
 8017ae4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8017ae8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8017aec:	601a      	str	r2, [r3, #0]
 8017aee:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8017af2:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8017af6:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8017af8:	4b4d      	ldr	r3, [pc, #308]	; (8017c30 <HAL_SPI_MspInit+0x524>)
 8017afa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8017afe:	4a4c      	ldr	r2, [pc, #304]	; (8017c30 <HAL_SPI_MspInit+0x524>)
 8017b00:	f043 0302 	orr.w	r3, r3, #2
 8017b04:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8017b08:	4b49      	ldr	r3, [pc, #292]	; (8017c30 <HAL_SPI_MspInit+0x524>)
 8017b0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8017b0e:	f003 0202 	and.w	r2, r3, #2
 8017b12:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8017b16:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8017b1a:	601a      	str	r2, [r3, #0]
 8017b1c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8017b20:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8017b24:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8017b26:	f44f 7300 	mov.w	r3, #512	; 0x200
 8017b2a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017b2e:	2302      	movs	r3, #2
 8017b30:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8017b34:	2301      	movs	r3, #1
 8017b36:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8017b3a:	2300      	movs	r3, #0
 8017b3c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8017b40:	2306      	movs	r3, #6
 8017b42:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8017b46:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8017b4a:	4619      	mov	r1, r3
 8017b4c:	483a      	ldr	r0, [pc, #232]	; (8017c38 <HAL_SPI_MspInit+0x52c>)
 8017b4e:	f7ec fba9 	bl	80042a4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8017b52:	2330      	movs	r3, #48	; 0x30
 8017b54:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017b58:	2302      	movs	r3, #2
 8017b5a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017b5e:	2300      	movs	r3, #0
 8017b60:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8017b64:	2300      	movs	r3, #0
 8017b66:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8017b6a:	2306      	movs	r3, #6
 8017b6c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8017b70:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8017b74:	4619      	mov	r1, r3
 8017b76:	4831      	ldr	r0, [pc, #196]	; (8017c3c <HAL_SPI_MspInit+0x530>)
 8017b78:	f7ec fb94 	bl	80042a4 <HAL_GPIO_Init>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8017b7c:	4b2c      	ldr	r3, [pc, #176]	; (8017c30 <HAL_SPI_MspInit+0x524>)
 8017b7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8017b82:	4a2b      	ldr	r2, [pc, #172]	; (8017c30 <HAL_SPI_MspInit+0x524>)
 8017b84:	f043 0310 	orr.w	r3, r3, #16
 8017b88:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8017b8c:	4b28      	ldr	r3, [pc, #160]	; (8017c30 <HAL_SPI_MspInit+0x524>)
 8017b8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8017b92:	f003 0210 	and.w	r2, r3, #16
 8017b96:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8017b9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8017b9e:	601a      	str	r2, [r3, #0]
 8017ba0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8017ba4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8017ba8:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8017baa:	4b21      	ldr	r3, [pc, #132]	; (8017c30 <HAL_SPI_MspInit+0x524>)
 8017bac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8017bb0:	4a1f      	ldr	r2, [pc, #124]	; (8017c30 <HAL_SPI_MspInit+0x524>)
 8017bb2:	f043 0308 	orr.w	r3, r3, #8
 8017bb6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8017bba:	4b1d      	ldr	r3, [pc, #116]	; (8017c30 <HAL_SPI_MspInit+0x524>)
 8017bbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8017bc0:	f003 0208 	and.w	r2, r3, #8
 8017bc4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8017bc8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8017bcc:	601a      	str	r2, [r3, #0]
 8017bce:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8017bd2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8017bd6:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = BLE_SPI_CS_Pin;
 8017bd8:	2302      	movs	r3, #2
 8017bda:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8017bde:	2301      	movs	r3, #1
 8017be0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017be4:	2300      	movs	r3, #0
 8017be6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8017bea:	2300      	movs	r3, #0
 8017bec:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    HAL_GPIO_Init(BLE_SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8017bf0:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8017bf4:	4619      	mov	r1, r3
 8017bf6:	4812      	ldr	r0, [pc, #72]	; (8017c40 <HAL_SPI_MspInit+0x534>)
 8017bf8:	f7ec fb54 	bl	80042a4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = BLE_RST_Pin;
 8017bfc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8017c00:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8017c04:	2301      	movs	r3, #1
 8017c06:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017c0a:	2300      	movs	r3, #0
 8017c0c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8017c10:	2300      	movs	r3, #0
 8017c12:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    HAL_GPIO_Init(BLE_RST_GPIO_Port, &GPIO_InitStruct);
 8017c16:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8017c1a:	4619      	mov	r1, r3
 8017c1c:	4809      	ldr	r0, [pc, #36]	; (8017c44 <HAL_SPI_MspInit+0x538>)
 8017c1e:	f7ec fb41 	bl	80042a4 <HAL_GPIO_Init>
}
 8017c22:	bf00      	nop
 8017c24:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8017c28:	46bd      	mov	sp, r7
 8017c2a:	bd80      	pop	{r7, pc}
 8017c2c:	46002000 	.word	0x46002000
 8017c30:	46020c00 	.word	0x46020c00
 8017c34:	46020800 	.word	0x46020800
 8017c38:	42021800 	.word	0x42021800
 8017c3c:	42020400 	.word	0x42020400
 8017c40:	42021000 	.word	0x42021000
 8017c44:	42020c00 	.word	0x42020c00

08017c48 <HAL_TIM_Base_MspInit>:
  /* USER CODE END TIM3_MspInit 1 */
  }
}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8017c48:	b580      	push	{r7, lr}
 8017c4a:	b084      	sub	sp, #16
 8017c4c:	af00      	add	r7, sp, #0
 8017c4e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 8017c50:	687b      	ldr	r3, [r7, #4]
 8017c52:	681b      	ldr	r3, [r3, #0]
 8017c54:	4a0e      	ldr	r2, [pc, #56]	; (8017c90 <HAL_TIM_Base_MspInit+0x48>)
 8017c56:	4293      	cmp	r3, r2
 8017c58:	d116      	bne.n	8017c88 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8017c5a:	4b0e      	ldr	r3, [pc, #56]	; (8017c94 <HAL_TIM_Base_MspInit+0x4c>)
 8017c5c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8017c60:	4a0c      	ldr	r2, [pc, #48]	; (8017c94 <HAL_TIM_Base_MspInit+0x4c>)
 8017c62:	f043 0320 	orr.w	r3, r3, #32
 8017c66:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8017c6a:	4b0a      	ldr	r3, [pc, #40]	; (8017c94 <HAL_TIM_Base_MspInit+0x4c>)
 8017c6c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8017c70:	f003 0320 	and.w	r3, r3, #32
 8017c74:	60fb      	str	r3, [r7, #12]
 8017c76:	68fb      	ldr	r3, [r7, #12]

    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 14, 0);
 8017c78:	2200      	movs	r2, #0
 8017c7a:	210e      	movs	r1, #14
 8017c7c:	2032      	movs	r0, #50	; 0x32
 8017c7e:	f7eb f973 	bl	8002f68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8017c82:	2032      	movs	r0, #50	; 0x32
 8017c84:	f7eb f99a 	bl	8002fbc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8017c88:	bf00      	nop
 8017c8a:	3710      	adds	r7, #16
 8017c8c:	46bd      	mov	sp, r7
 8017c8e:	bd80      	pop	{r7, pc}
 8017c90:	40001400 	.word	0x40001400
 8017c94:	46020c00 	.word	0x46020c00

08017c98 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8017c98:	b580      	push	{r7, lr}
 8017c9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8017c9c:	4b22      	ldr	r3, [pc, #136]	; (8017d28 <MX_USART2_UART_Init+0x90>)
 8017c9e:	4a23      	ldr	r2, [pc, #140]	; (8017d2c <MX_USART2_UART_Init+0x94>)
 8017ca0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 921600;
 8017ca2:	4b21      	ldr	r3, [pc, #132]	; (8017d28 <MX_USART2_UART_Init+0x90>)
 8017ca4:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8017ca8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8017caa:	4b1f      	ldr	r3, [pc, #124]	; (8017d28 <MX_USART2_UART_Init+0x90>)
 8017cac:	2200      	movs	r2, #0
 8017cae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8017cb0:	4b1d      	ldr	r3, [pc, #116]	; (8017d28 <MX_USART2_UART_Init+0x90>)
 8017cb2:	2200      	movs	r2, #0
 8017cb4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8017cb6:	4b1c      	ldr	r3, [pc, #112]	; (8017d28 <MX_USART2_UART_Init+0x90>)
 8017cb8:	2200      	movs	r2, #0
 8017cba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8017cbc:	4b1a      	ldr	r3, [pc, #104]	; (8017d28 <MX_USART2_UART_Init+0x90>)
 8017cbe:	220c      	movs	r2, #12
 8017cc0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8017cc2:	4b19      	ldr	r3, [pc, #100]	; (8017d28 <MX_USART2_UART_Init+0x90>)
 8017cc4:	2200      	movs	r2, #0
 8017cc6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8017cc8:	4b17      	ldr	r3, [pc, #92]	; (8017d28 <MX_USART2_UART_Init+0x90>)
 8017cca:	2200      	movs	r2, #0
 8017ccc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8017cce:	4b16      	ldr	r3, [pc, #88]	; (8017d28 <MX_USART2_UART_Init+0x90>)
 8017cd0:	2200      	movs	r2, #0
 8017cd2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8017cd4:	4b14      	ldr	r3, [pc, #80]	; (8017d28 <MX_USART2_UART_Init+0x90>)
 8017cd6:	2200      	movs	r2, #0
 8017cd8:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8017cda:	4b13      	ldr	r3, [pc, #76]	; (8017d28 <MX_USART2_UART_Init+0x90>)
 8017cdc:	2200      	movs	r2, #0
 8017cde:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8017ce0:	4811      	ldr	r0, [pc, #68]	; (8017d28 <MX_USART2_UART_Init+0x90>)
 8017ce2:	f7f5 fb4d 	bl	800d380 <HAL_UART_Init>
 8017ce6:	4603      	mov	r3, r0
 8017ce8:	2b00      	cmp	r3, #0
 8017cea:	d001      	beq.n	8017cf0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8017cec:	f7fd fad8 	bl	80152a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8017cf0:	2100      	movs	r1, #0
 8017cf2:	480d      	ldr	r0, [pc, #52]	; (8017d28 <MX_USART2_UART_Init+0x90>)
 8017cf4:	f7f6 fa82 	bl	800e1fc <HAL_UARTEx_SetTxFifoThreshold>
 8017cf8:	4603      	mov	r3, r0
 8017cfa:	2b00      	cmp	r3, #0
 8017cfc:	d001      	beq.n	8017d02 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8017cfe:	f7fd facf 	bl	80152a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8017d02:	2100      	movs	r1, #0
 8017d04:	4808      	ldr	r0, [pc, #32]	; (8017d28 <MX_USART2_UART_Init+0x90>)
 8017d06:	f7f6 fb2d 	bl	800e364 <HAL_UARTEx_SetRxFifoThreshold>
 8017d0a:	4603      	mov	r3, r0
 8017d0c:	2b00      	cmp	r3, #0
 8017d0e:	d001      	beq.n	8017d14 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8017d10:	f7fd fac6 	bl	80152a0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8017d14:	4804      	ldr	r0, [pc, #16]	; (8017d28 <MX_USART2_UART_Init+0x90>)
 8017d16:	f7f6 f9e1 	bl	800e0dc <HAL_UARTEx_DisableFifoMode>
 8017d1a:	4603      	mov	r3, r0
 8017d1c:	2b00      	cmp	r3, #0
 8017d1e:	d001      	beq.n	8017d24 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8017d20:	f7fd fabe 	bl	80152a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8017d24:	bf00      	nop
 8017d26:	bd80      	pop	{r7, pc}
 8017d28:	200396ac 	.word	0x200396ac
 8017d2c:	40004400 	.word	0x40004400

08017d30 <HAL_UART_MspInit>:
  /* USER CODE END USART3_Init 2 */

}

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8017d30:	b580      	push	{r7, lr}
 8017d32:	b0c0      	sub	sp, #256	; 0x100
 8017d34:	af00      	add	r7, sp, #0
 8017d36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8017d38:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8017d3c:	2200      	movs	r2, #0
 8017d3e:	601a      	str	r2, [r3, #0]
 8017d40:	605a      	str	r2, [r3, #4]
 8017d42:	609a      	str	r2, [r3, #8]
 8017d44:	60da      	str	r2, [r3, #12]
 8017d46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8017d48:	f107 0320 	add.w	r3, r7, #32
 8017d4c:	22c8      	movs	r2, #200	; 0xc8
 8017d4e:	2100      	movs	r1, #0
 8017d50:	4618      	mov	r0, r3
 8017d52:	f00b ff6a 	bl	8023c2a <memset>
  if(uartHandle->Instance==USART2)
 8017d56:	687b      	ldr	r3, [r7, #4]
 8017d58:	681b      	ldr	r3, [r3, #0]
 8017d5a:	4a5e      	ldr	r2, [pc, #376]	; (8017ed4 <HAL_UART_MspInit+0x1a4>)
 8017d5c:	4293      	cmp	r3, r2
 8017d5e:	d145      	bne.n	8017dec <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8017d60:	f04f 0202 	mov.w	r2, #2
 8017d64:	f04f 0300 	mov.w	r3, #0
 8017d68:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8017d6c:	2300      	movs	r3, #0
 8017d6e:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8017d70:	f107 0320 	add.w	r3, r7, #32
 8017d74:	4618      	mov	r0, r3
 8017d76:	f7ef f8eb 	bl	8006f50 <HAL_RCCEx_PeriphCLKConfig>
 8017d7a:	4603      	mov	r3, r0
 8017d7c:	2b00      	cmp	r3, #0
 8017d7e:	d001      	beq.n	8017d84 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8017d80:	f7fd fa8e 	bl	80152a0 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8017d84:	4b54      	ldr	r3, [pc, #336]	; (8017ed8 <HAL_UART_MspInit+0x1a8>)
 8017d86:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8017d8a:	4a53      	ldr	r2, [pc, #332]	; (8017ed8 <HAL_UART_MspInit+0x1a8>)
 8017d8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8017d90:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8017d94:	4b50      	ldr	r3, [pc, #320]	; (8017ed8 <HAL_UART_MspInit+0x1a8>)
 8017d96:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8017d9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8017d9e:	61fb      	str	r3, [r7, #28]
 8017da0:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8017da2:	4b4d      	ldr	r3, [pc, #308]	; (8017ed8 <HAL_UART_MspInit+0x1a8>)
 8017da4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8017da8:	4a4b      	ldr	r2, [pc, #300]	; (8017ed8 <HAL_UART_MspInit+0x1a8>)
 8017daa:	f043 0308 	orr.w	r3, r3, #8
 8017dae:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8017db2:	4b49      	ldr	r3, [pc, #292]	; (8017ed8 <HAL_UART_MspInit+0x1a8>)
 8017db4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8017db8:	f003 0308 	and.w	r3, r3, #8
 8017dbc:	61bb      	str	r3, [r7, #24]
 8017dbe:	69bb      	ldr	r3, [r7, #24]
    /**USART2 GPIO Configuration
    PD6     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_5;
 8017dc0:	2360      	movs	r3, #96	; 0x60
 8017dc2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017dc6:	2302      	movs	r3, #2
 8017dc8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017dcc:	2300      	movs	r3, #0
 8017dce:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8017dd2:	2300      	movs	r3, #0
 8017dd4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8017dd8:	2307      	movs	r3, #7
 8017dda:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8017dde:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8017de2:	4619      	mov	r1, r3
 8017de4:	483d      	ldr	r0, [pc, #244]	; (8017edc <HAL_UART_MspInit+0x1ac>)
 8017de6:	f7ec fa5d 	bl	80042a4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8017dea:	e06e      	b.n	8017eca <HAL_UART_MspInit+0x19a>
  else if(uartHandle->Instance==USART3)
 8017dec:	687b      	ldr	r3, [r7, #4]
 8017dee:	681b      	ldr	r3, [r3, #0]
 8017df0:	4a3b      	ldr	r2, [pc, #236]	; (8017ee0 <HAL_UART_MspInit+0x1b0>)
 8017df2:	4293      	cmp	r3, r2
 8017df4:	d169      	bne.n	8017eca <HAL_UART_MspInit+0x19a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8017df6:	f04f 0204 	mov.w	r2, #4
 8017dfa:	f04f 0300 	mov.w	r3, #0
 8017dfe:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8017e02:	2300      	movs	r3, #0
 8017e04:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8017e06:	f107 0320 	add.w	r3, r7, #32
 8017e0a:	4618      	mov	r0, r3
 8017e0c:	f7ef f8a0 	bl	8006f50 <HAL_RCCEx_PeriphCLKConfig>
 8017e10:	4603      	mov	r3, r0
 8017e12:	2b00      	cmp	r3, #0
 8017e14:	d001      	beq.n	8017e1a <HAL_UART_MspInit+0xea>
      Error_Handler();
 8017e16:	f7fd fa43 	bl	80152a0 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8017e1a:	4b2f      	ldr	r3, [pc, #188]	; (8017ed8 <HAL_UART_MspInit+0x1a8>)
 8017e1c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8017e20:	4a2d      	ldr	r2, [pc, #180]	; (8017ed8 <HAL_UART_MspInit+0x1a8>)
 8017e22:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8017e26:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8017e2a:	4b2b      	ldr	r3, [pc, #172]	; (8017ed8 <HAL_UART_MspInit+0x1a8>)
 8017e2c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8017e30:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8017e34:	617b      	str	r3, [r7, #20]
 8017e36:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8017e38:	4b27      	ldr	r3, [pc, #156]	; (8017ed8 <HAL_UART_MspInit+0x1a8>)
 8017e3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8017e3e:	4a26      	ldr	r2, [pc, #152]	; (8017ed8 <HAL_UART_MspInit+0x1a8>)
 8017e40:	f043 0301 	orr.w	r3, r3, #1
 8017e44:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8017e48:	4b23      	ldr	r3, [pc, #140]	; (8017ed8 <HAL_UART_MspInit+0x1a8>)
 8017e4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8017e4e:	f003 0301 	and.w	r3, r3, #1
 8017e52:	613b      	str	r3, [r7, #16]
 8017e54:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8017e56:	4b20      	ldr	r3, [pc, #128]	; (8017ed8 <HAL_UART_MspInit+0x1a8>)
 8017e58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8017e5c:	4a1e      	ldr	r2, [pc, #120]	; (8017ed8 <HAL_UART_MspInit+0x1a8>)
 8017e5e:	f043 0308 	orr.w	r3, r3, #8
 8017e62:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8017e66:	4b1c      	ldr	r3, [pc, #112]	; (8017ed8 <HAL_UART_MspInit+0x1a8>)
 8017e68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8017e6c:	f003 0308 	and.w	r3, r3, #8
 8017e70:	60fb      	str	r3, [r7, #12]
 8017e72:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_5;
 8017e74:	23a0      	movs	r3, #160	; 0xa0
 8017e76:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017e7a:	2302      	movs	r3, #2
 8017e7c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017e80:	2300      	movs	r3, #0
 8017e82:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8017e86:	2300      	movs	r3, #0
 8017e88:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8017e8c:	2307      	movs	r3, #7
 8017e8e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8017e92:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8017e96:	4619      	mov	r1, r3
 8017e98:	4812      	ldr	r0, [pc, #72]	; (8017ee4 <HAL_UART_MspInit+0x1b4>)
 8017e9a:	f7ec fa03 	bl	80042a4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 8017e9e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8017ea2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017ea6:	2302      	movs	r3, #2
 8017ea8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017eac:	2300      	movs	r3, #0
 8017eae:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8017eb2:	2300      	movs	r3, #0
 8017eb4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8017eb8:	2307      	movs	r3, #7
 8017eba:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8017ebe:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8017ec2:	4619      	mov	r1, r3
 8017ec4:	4805      	ldr	r0, [pc, #20]	; (8017edc <HAL_UART_MspInit+0x1ac>)
 8017ec6:	f7ec f9ed 	bl	80042a4 <HAL_GPIO_Init>
}
 8017eca:	bf00      	nop
 8017ecc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8017ed0:	46bd      	mov	sp, r7
 8017ed2:	bd80      	pop	{r7, pc}
 8017ed4:	40004400 	.word	0x40004400
 8017ed8:	46020c00 	.word	0x46020c00
 8017edc:	42020c00 	.word	0x42020c00
 8017ee0:	40004800 	.word	0x40004800
 8017ee4:	42020000 	.word	0x42020000

08017ee8 <IEventListenerGetOwner>:
void IEventListenerSetOwner(IEventListener *this, void *pxOwner) {
	this->vptr->SetOwner(this, pxOwner);
}

SYS_DEFINE_STATIC_INLINE
void *IEventListenerGetOwner(IEventListener *this) {
 8017ee8:	b580      	push	{r7, lr}
 8017eea:	b082      	sub	sp, #8
 8017eec:	af00      	add	r7, sp, #0
 8017eee:	6078      	str	r0, [r7, #4]
	return this->vptr->GetOwner(this);
 8017ef0:	687b      	ldr	r3, [r7, #4]
 8017ef2:	681b      	ldr	r3, [r3, #0]
 8017ef4:	689b      	ldr	r3, [r3, #8]
 8017ef6:	6878      	ldr	r0, [r7, #4]
 8017ef8:	4798      	blx	r3
 8017efa:	4603      	mov	r3, r0
}
 8017efc:	4618      	mov	r0, r3
 8017efe:	3708      	adds	r7, #8
 8017f00:	46bd      	mov	sp, r7
 8017f02:	bd80      	pop	{r7, pc}

08017f04 <IEventSrcInit>:
sys_error_code_t IEventSrcInit(IEventSrc *this) {
 8017f04:	b580      	push	{r7, lr}
 8017f06:	b082      	sub	sp, #8
 8017f08:	af00      	add	r7, sp, #0
 8017f0a:	6078      	str	r0, [r7, #4]
	return this->vptr->Init(this);
 8017f0c:	687b      	ldr	r3, [r7, #4]
 8017f0e:	681b      	ldr	r3, [r3, #0]
 8017f10:	681b      	ldr	r3, [r3, #0]
 8017f12:	6878      	ldr	r0, [r7, #4]
 8017f14:	4798      	blx	r3
 8017f16:	4603      	mov	r3, r0
}
 8017f18:	4618      	mov	r0, r3
 8017f1a:	3708      	adds	r7, #8
 8017f1c:	46bd      	mov	sp, r7
 8017f1e:	bd80      	pop	{r7, pc}

08017f20 <IEventSrcAddEventListener>:
sys_error_code_t IEventSrcAddEventListener(IEventSrc *this, IEventListener *pListener) {
 8017f20:	b580      	push	{r7, lr}
 8017f22:	b082      	sub	sp, #8
 8017f24:	af00      	add	r7, sp, #0
 8017f26:	6078      	str	r0, [r7, #4]
 8017f28:	6039      	str	r1, [r7, #0]
	return this->vptr->AddEventListener(this, pListener);
 8017f2a:	687b      	ldr	r3, [r7, #4]
 8017f2c:	681b      	ldr	r3, [r3, #0]
 8017f2e:	685b      	ldr	r3, [r3, #4]
 8017f30:	6839      	ldr	r1, [r7, #0]
 8017f32:	6878      	ldr	r0, [r7, #4]
 8017f34:	4798      	blx	r3
 8017f36:	4603      	mov	r3, r0
}
 8017f38:	4618      	mov	r0, r3
 8017f3a:	3708      	adds	r7, #8
 8017f3c:	46bd      	mov	sp, r7
 8017f3e:	bd80      	pop	{r7, pc}

08017f40 <IEventSrcRemoveEventListener>:
sys_error_code_t IEventSrcRemoveEventListener(IEventSrc *this, IEventListener *pListener) {
 8017f40:	b580      	push	{r7, lr}
 8017f42:	b082      	sub	sp, #8
 8017f44:	af00      	add	r7, sp, #0
 8017f46:	6078      	str	r0, [r7, #4]
 8017f48:	6039      	str	r1, [r7, #0]
	return this->vptr->RemoveEventListener(this, pListener);
 8017f4a:	687b      	ldr	r3, [r7, #4]
 8017f4c:	681b      	ldr	r3, [r3, #0]
 8017f4e:	689b      	ldr	r3, [r3, #8]
 8017f50:	6839      	ldr	r1, [r7, #0]
 8017f52:	6878      	ldr	r0, [r7, #4]
 8017f54:	4798      	blx	r3
 8017f56:	4603      	mov	r3, r0
}
 8017f58:	4618      	mov	r0, r3
 8017f5a:	3708      	adds	r7, #8
 8017f5c:	46bd      	mov	sp, r7
 8017f5e:	bd80      	pop	{r7, pc}

08017f60 <IEventSrcSendEvent>:
uint32_t IEventSrcGetMaxListenerCount(const IEventSrc *this) {
	return this->vptr->GetMaxListenerCount(this);
}

SYS_DEFINE_STATIC_INLINE
sys_error_code_t IEventSrcSendEvent(const IEventSrc *this, const IEvent *pxEvent, void *pvParams) {
 8017f60:	b580      	push	{r7, lr}
 8017f62:	b084      	sub	sp, #16
 8017f64:	af00      	add	r7, sp, #0
 8017f66:	60f8      	str	r0, [r7, #12]
 8017f68:	60b9      	str	r1, [r7, #8]
 8017f6a:	607a      	str	r2, [r7, #4]
	return this->vptr->SendEvent(this, pxEvent, pvParams);
 8017f6c:	68fb      	ldr	r3, [r7, #12]
 8017f6e:	681b      	ldr	r3, [r3, #0]
 8017f70:	691b      	ldr	r3, [r3, #16]
 8017f72:	687a      	ldr	r2, [r7, #4]
 8017f74:	68b9      	ldr	r1, [r7, #8]
 8017f76:	68f8      	ldr	r0, [r7, #12]
 8017f78:	4798      	blx	r3
 8017f7a:	4603      	mov	r3, r0
}
 8017f7c:	4618      	mov	r0, r3
 8017f7e:	3710      	adds	r7, #16
 8017f80:	46bd      	mov	sp, r7
 8017f82:	bd80      	pop	{r7, pc}

08017f84 <ISourceGetId>:
static inline uint8_t ISourceGetId(ISourceObservable *_this) {
 8017f84:	b580      	push	{r7, lr}
 8017f86:	b082      	sub	sp, #8
 8017f88:	af00      	add	r7, sp, #0
 8017f8a:	6078      	str	r0, [r7, #4]
  return _this->    vptr->GetId(_this );
 8017f8c:	687b      	ldr	r3, [r7, #4]
 8017f8e:	681b      	ldr	r3, [r3, #0]
 8017f90:	681b      	ldr	r3, [r3, #0]
 8017f92:	6878      	ldr	r0, [r7, #4]
 8017f94:	4798      	blx	r3
 8017f96:	4603      	mov	r3, r0
}
 8017f98:	4618      	mov	r0, r3
 8017f9a:	3708      	adds	r7, #8
 8017f9c:	46bd      	mov	sp, r7
 8017f9e:	bd80      	pop	{r7, pc}

08017fa0 <ISourceGetEventSrcIF>:
static inline IEventSrc * ISourceGetEventSrcIF(ISourceObservable *_this) {
 8017fa0:	b580      	push	{r7, lr}
 8017fa2:	b082      	sub	sp, #8
 8017fa4:	af00      	add	r7, sp, #0
 8017fa6:	6078      	str	r0, [r7, #4]
  return _this->vptr->GetEventSourceIF(_this );
 8017fa8:	687b      	ldr	r3, [r7, #4]
 8017faa:	681b      	ldr	r3, [r3, #0]
 8017fac:	685b      	ldr	r3, [r3, #4]
 8017fae:	6878      	ldr	r0, [r7, #4]
 8017fb0:	4798      	blx	r3
 8017fb2:	4603      	mov	r3, r0
}
 8017fb4:	4618      	mov	r0, r3
 8017fb6:	3708      	adds	r7, #8
 8017fb8:	46bd      	mov	sp, r7
 8017fba:	bd80      	pop	{r7, pc}

08017fbc <ADPU_Init_vtbl>:


// IDPU virtual functions definition
// *****************************************
sys_error_code_t ADPU_Init_vtbl(IDPU *_this) 
{
 8017fbc:	b580      	push	{r7, lr}
 8017fbe:	b084      	sub	sp, #16
 8017fc0:	af00      	add	r7, sp, #0
 8017fc2:	6078      	str	r0, [r7, #4]
  assert_param(_this);
 8017fc4:	687b      	ldr	r3, [r7, #4]
 8017fc6:	2b00      	cmp	r3, #0
 8017fc8:	d103      	bne.n	8017fd2 <ADPU_Init_vtbl+0x16>
 8017fca:	213d      	movs	r1, #61	; 0x3d
 8017fcc:	481b      	ldr	r0, [pc, #108]	; (801803c <ADPU_Init_vtbl+0x80>)
 8017fce:	f7fd f96c 	bl	80152aa <assert_failed>
  ADPU *pObj = (ADPU*)_this;
 8017fd2:	687b      	ldr	r3, [r7, #4]
 8017fd4:	60fb      	str	r3, [r7, #12]
  sys_error_code_t xRes = SYS_NO_ERROR_CODE;
 8017fd6:	2300      	movs	r3, #0
 8017fd8:	817b      	strh	r3, [r7, #10]
  
  pObj->sensorListener.vptr = &ADPUSensorListener_vtbl;
 8017fda:	68fb      	ldr	r3, [r7, #12]
 8017fdc:	4a18      	ldr	r2, [pc, #96]	; (8018040 <ADPU_Init_vtbl+0x84>)
 8017fde:	605a      	str	r2, [r3, #4]
  
  pObj->cb_items = 0;
 8017fe0:	68fb      	ldr	r3, [r7, #12]
 8017fe2:	2200      	movs	r2, #0
 8017fe4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
  pObj->isADPUattached = 0;
 8017fe8:	68fb      	ldr	r3, [r7, #12]
 8017fea:	2200      	movs	r2, #0
 8017fec:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
  pObj->n_bytes_for_item = 0;
 8017ff0:	68fb      	ldr	r3, [r7, #12]
 8017ff2:	2200      	movs	r2, #0
 8017ff4:	679a      	str	r2, [r3, #120]	; 0x78
  pObj->p_callback_param = NULL;
 8017ff6:	68fb      	ldr	r3, [r7, #12]
 8017ff8:	2200      	movs	r2, #0
 8017ffa:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
  
  pObj->pProcessEventSrc = ProcessEventSrcAlloc();
 8017ffe:	f002 f811 	bl	801a024 <ProcessEventSrcAlloc>
 8018002:	4602      	mov	r2, r0
 8018004:	68fb      	ldr	r3, [r7, #12]
 8018006:	60da      	str	r2, [r3, #12]
  if (pObj->pProcessEventSrc == NULL) 
 8018008:	68fb      	ldr	r3, [r7, #12]
 801800a:	68db      	ldr	r3, [r3, #12]
 801800c:	2b00      	cmp	r3, #0
 801800e:	d106      	bne.n	801801e <ADPU_Init_vtbl+0x62>
  {
    SYS_SET_SERVICE_LEVEL_ERROR_CODE(SYS_OUT_OF_MEMORY_ERROR_CODE);
 8018010:	4b0c      	ldr	r3, [pc, #48]	; (8018044 <ADPU_Init_vtbl+0x88>)
 8018012:	2203      	movs	r2, #3
 8018014:	805a      	strh	r2, [r3, #2]
    xRes = SYS_OUT_OF_MEMORY_ERROR_CODE;
 8018016:	2303      	movs	r3, #3
 8018018:	817b      	strh	r3, [r7, #10]
    return xRes;
 801801a:	897b      	ldrh	r3, [r7, #10]
 801801c:	e009      	b.n	8018032 <ADPU_Init_vtbl+0x76>
  }
  IEventSrcInit(pObj->pProcessEventSrc);
 801801e:	68fb      	ldr	r3, [r7, #12]
 8018020:	68db      	ldr	r3, [r3, #12]
 8018022:	4618      	mov	r0, r3
 8018024:	f7ff ff6e 	bl	8017f04 <IEventSrcInit>
  pObj->active = true;
 8018028:	68fb      	ldr	r3, [r7, #12]
 801802a:	2201      	movs	r2, #1
 801802c:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
  
  return xRes;
 8018030:	897b      	ldrh	r3, [r7, #10]
}
 8018032:	4618      	mov	r0, r3
 8018034:	3710      	adds	r7, #16
 8018036:	46bd      	mov	sp, r7
 8018038:	bd80      	pop	{r7, pc}
 801803a:	bf00      	nop
 801803c:	08026f74 	.word	0x08026f74
 8018040:	080357e8 	.word	0x080357e8
 8018044:	20000700 	.word	0x20000700

08018048 <ADPU_AttachToSensor_vtbl>:

sys_error_code_t ADPU_AttachToSensor_vtbl(IDPU *_this, ISourceObservable *s, void *buffer)
{
 8018048:	b590      	push	{r4, r7, lr}
 801804a:	b089      	sub	sp, #36	; 0x24
 801804c:	af00      	add	r7, sp, #0
 801804e:	60f8      	str	r0, [r7, #12]
 8018050:	60b9      	str	r1, [r7, #8]
 8018052:	607a      	str	r2, [r7, #4]
  assert_param(_this != NULL);
 8018054:	68fb      	ldr	r3, [r7, #12]
 8018056:	2b00      	cmp	r3, #0
 8018058:	d103      	bne.n	8018062 <ADPU_AttachToSensor_vtbl+0x1a>
 801805a:	2157      	movs	r1, #87	; 0x57
 801805c:	4857      	ldr	r0, [pc, #348]	; (80181bc <ADPU_AttachToSensor_vtbl+0x174>)
 801805e:	f7fd f924 	bl	80152aa <assert_failed>
  assert_param(s != NULL);
 8018062:	68bb      	ldr	r3, [r7, #8]
 8018064:	2b00      	cmp	r3, #0
 8018066:	d103      	bne.n	8018070 <ADPU_AttachToSensor_vtbl+0x28>
 8018068:	2158      	movs	r1, #88	; 0x58
 801806a:	4854      	ldr	r0, [pc, #336]	; (80181bc <ADPU_AttachToSensor_vtbl+0x174>)
 801806c:	f7fd f91d 	bl	80152aa <assert_failed>
  sys_error_code_t xRes = SYS_NO_ERROR_CODE;
 8018070:	2300      	movs	r3, #0
 8018072:	83fb      	strh	r3, [r7, #30]
  ADPU *pObj = (ADPU*)_this;
 8018074:	68fb      	ldr	r3, [r7, #12]
 8018076:	61bb      	str	r3, [r7, #24]
  
  uint8_t id = ISourceGetId(s);
 8018078:	68b8      	ldr	r0, [r7, #8]
 801807a:	f7ff ff83 	bl	8017f84 <ISourceGetId>
 801807e:	4603      	mov	r3, r0
 8018080:	75fb      	strb	r3, [r7, #23]
  if(id > ADPU_CFG_MAX_SENSOR)
 8018082:	7dfb      	ldrb	r3, [r7, #23]
 8018084:	2b03      	cmp	r3, #3
 8018086:	d906      	bls.n	8018096 <ADPU_AttachToSensor_vtbl+0x4e>
  {
    SYS_SET_SERVICE_LEVEL_ERROR_CODE(SYS_UNDEFINED_ERROR_CODE);
 8018088:	4b4d      	ldr	r3, [pc, #308]	; (80181c0 <ADPU_AttachToSensor_vtbl+0x178>)
 801808a:	2202      	movs	r2, #2
 801808c:	805a      	strh	r2, [r3, #2]
    xRes = SYS_UNDEFINED_ERROR_CODE;
 801808e:	2302      	movs	r3, #2
 8018090:	83fb      	strh	r3, [r7, #30]
    return xRes;
 8018092:	8bfb      	ldrh	r3, [r7, #30]
 8018094:	e08e      	b.n	80181b4 <ADPU_AttachToSensor_vtbl+0x16c>
  }
  pObj->sensors[id].sensor_id = id;
 8018096:	7dfa      	ldrb	r2, [r7, #23]
 8018098:	69b9      	ldr	r1, [r7, #24]
 801809a:	4613      	mov	r3, r2
 801809c:	005b      	lsls	r3, r3, #1
 801809e:	4413      	add	r3, r2
 80180a0:	00db      	lsls	r3, r3, #3
 80180a2:	440b      	add	r3, r1
 80180a4:	3324      	adds	r3, #36	; 0x24
 80180a6:	7dfa      	ldrb	r2, [r7, #23]
 80180a8:	701a      	strb	r2, [r3, #0]
  pObj->sensors[id].sensorIF = s;
 80180aa:	7dfa      	ldrb	r2, [r7, #23]
 80180ac:	69b9      	ldr	r1, [r7, #24]
 80180ae:	4613      	mov	r3, r2
 80180b0:	005b      	lsls	r3, r3, #1
 80180b2:	4413      	add	r3, r2
 80180b4:	00db      	lsls	r3, r3, #3
 80180b6:	440b      	add	r3, r1
 80180b8:	3320      	adds	r3, #32
 80180ba:	68ba      	ldr	r2, [r7, #8]
 80180bc:	601a      	str	r2, [r3, #0]
  
  if(buffer != NULL)
 80180be:	687b      	ldr	r3, [r7, #4]
 80180c0:	2b00      	cmp	r3, #0
 80180c2:	d049      	beq.n	8018158 <ADPU_AttachToSensor_vtbl+0x110>
  {
    pObj->sensors[id].cb_handle.pCircularBuffer = CB_Alloc(pObj->cb_items);
 80180c4:	69bb      	ldr	r3, [r7, #24]
 80180c6:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80180ca:	b29b      	uxth	r3, r3
 80180cc:	7dfc      	ldrb	r4, [r7, #23]
 80180ce:	4618      	mov	r0, r3
 80180d0:	f001 fd3a 	bl	8019b48 <CB_Alloc>
 80180d4:	4601      	mov	r1, r0
 80180d6:	69ba      	ldr	r2, [r7, #24]
 80180d8:	4623      	mov	r3, r4
 80180da:	005b      	lsls	r3, r3, #1
 80180dc:	4423      	add	r3, r4
 80180de:	00db      	lsls	r3, r3, #3
 80180e0:	4413      	add	r3, r2
 80180e2:	3310      	adds	r3, #16
 80180e4:	6019      	str	r1, [r3, #0]
    if(CB_Init(pObj->sensors[ISourceGetId(s)].cb_handle.pCircularBuffer, buffer, pObj->n_bytes_for_item) != CB_NO_ERROR_CODE)
 80180e6:	68b8      	ldr	r0, [r7, #8]
 80180e8:	f7ff ff4c 	bl	8017f84 <ISourceGetId>
 80180ec:	4603      	mov	r3, r0
 80180ee:	4619      	mov	r1, r3
 80180f0:	69ba      	ldr	r2, [r7, #24]
 80180f2:	460b      	mov	r3, r1
 80180f4:	005b      	lsls	r3, r3, #1
 80180f6:	440b      	add	r3, r1
 80180f8:	00db      	lsls	r3, r3, #3
 80180fa:	4413      	add	r3, r2
 80180fc:	3310      	adds	r3, #16
 80180fe:	6818      	ldr	r0, [r3, #0]
 8018100:	69bb      	ldr	r3, [r7, #24]
 8018102:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8018104:	b29b      	uxth	r3, r3
 8018106:	461a      	mov	r2, r3
 8018108:	6879      	ldr	r1, [r7, #4]
 801810a:	f001 fd5f 	bl	8019bcc <CB_Init>
 801810e:	4603      	mov	r3, r0
 8018110:	2b00      	cmp	r3, #0
 8018112:	d001      	beq.n	8018118 <ADPU_AttachToSensor_vtbl+0xd0>
    {
      sys_error_handler();
 8018114:	f7f6 fe20 	bl	800ed58 <sys_error_handler>
    }
    
    pObj->sensors[id].cb_handle.pProducerDataBuff = NULL;
 8018118:	7dfa      	ldrb	r2, [r7, #23]
 801811a:	69b9      	ldr	r1, [r7, #24]
 801811c:	4613      	mov	r3, r2
 801811e:	005b      	lsls	r3, r3, #1
 8018120:	4413      	add	r3, r2
 8018122:	00db      	lsls	r3, r3, #3
 8018124:	440b      	add	r3, r1
 8018126:	3314      	adds	r3, #20
 8018128:	2200      	movs	r2, #0
 801812a:	601a      	str	r2, [r3, #0]
    pObj->sensors[id].cb_handle.pConsumerDataBuff = NULL;
 801812c:	7dfb      	ldrb	r3, [r7, #23]
 801812e:	69b9      	ldr	r1, [r7, #24]
 8018130:	1c5a      	adds	r2, r3, #1
 8018132:	4613      	mov	r3, r2
 8018134:	005b      	lsls	r3, r3, #1
 8018136:	4413      	add	r3, r2
 8018138:	00db      	lsls	r3, r3, #3
 801813a:	440b      	add	r3, r1
 801813c:	2200      	movs	r2, #0
 801813e:	601a      	str	r2, [r3, #0]
    pObj->sensors[id].cb_handle.DataIdx = 0;
 8018140:	7dfb      	ldrb	r3, [r7, #23]
 8018142:	69b9      	ldr	r1, [r7, #24]
 8018144:	1c5a      	adds	r2, r3, #1
 8018146:	4613      	mov	r3, r2
 8018148:	005b      	lsls	r3, r3, #1
 801814a:	4413      	add	r3, r2
 801814c:	00db      	lsls	r3, r3, #3
 801814e:	440b      	add	r3, r1
 8018150:	3304      	adds	r3, #4
 8018152:	2200      	movs	r2, #0
 8018154:	801a      	strh	r2, [r3, #0]
 8018156:	e009      	b.n	801816c <ADPU_AttachToSensor_vtbl+0x124>
  }
  else
  {
    pObj->sensors[id].cb_handle.pCircularBuffer = NULL;
 8018158:	7dfa      	ldrb	r2, [r7, #23]
 801815a:	69b9      	ldr	r1, [r7, #24]
 801815c:	4613      	mov	r3, r2
 801815e:	005b      	lsls	r3, r3, #1
 8018160:	4413      	add	r3, r2
 8018162:	00db      	lsls	r3, r3, #3
 8018164:	440b      	add	r3, r1
 8018166:	3310      	adds	r3, #16
 8018168:	2200      	movs	r2, #0
 801816a:	601a      	str	r2, [r3, #0]
  }
  
  IEventSrc * eventSource = ISourceGetEventSrcIF(s);
 801816c:	68b8      	ldr	r0, [r7, #8]
 801816e:	f7ff ff17 	bl	8017fa0 <ISourceGetEventSrcIF>
 8018172:	6138      	str	r0, [r7, #16]
  if (eventSource == NULL) {
 8018174:	693b      	ldr	r3, [r7, #16]
 8018176:	2b00      	cmp	r3, #0
 8018178:	d106      	bne.n	8018188 <ADPU_AttachToSensor_vtbl+0x140>
    SYS_SET_SERVICE_LEVEL_ERROR_CODE(SYS_UNDEFINED_ERROR_CODE);
 801817a:	4b11      	ldr	r3, [pc, #68]	; (80181c0 <ADPU_AttachToSensor_vtbl+0x178>)
 801817c:	2202      	movs	r2, #2
 801817e:	805a      	strh	r2, [r3, #2]
    xRes = SYS_UNDEFINED_ERROR_CODE;
 8018180:	2302      	movs	r3, #2
 8018182:	83fb      	strh	r3, [r7, #30]
    return xRes;
 8018184:	8bfb      	ldrh	r3, [r7, #30]
 8018186:	e015      	b.n	80181b4 <ADPU_AttachToSensor_vtbl+0x16c>
  }
  
  if(IEventSrcAddEventListener(eventSource, ADPU_GetEventListenerIF(pObj)) != SYS_NO_ERROR_CODE)
 8018188:	69b8      	ldr	r0, [r7, #24]
 801818a:	f000 fb0d 	bl	80187a8 <ADPU_GetEventListenerIF>
 801818e:	4603      	mov	r3, r0
 8018190:	4619      	mov	r1, r3
 8018192:	6938      	ldr	r0, [r7, #16]
 8018194:	f7ff fec4 	bl	8017f20 <IEventSrcAddEventListener>
 8018198:	4603      	mov	r3, r0
 801819a:	2b00      	cmp	r3, #0
 801819c:	d001      	beq.n	80181a2 <ADPU_AttachToSensor_vtbl+0x15a>
  {
    sys_error_handler();
 801819e:	f7f6 fddb 	bl	800ed58 <sys_error_handler>
  }
  
  pObj->nSensor++;
 80181a2:	69bb      	ldr	r3, [r7, #24]
 80181a4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80181a8:	3301      	adds	r3, #1
 80181aa:	b29a      	uxth	r2, r3
 80181ac:	69bb      	ldr	r3, [r7, #24]
 80181ae:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  
  return xRes;
 80181b2:	8bfb      	ldrh	r3, [r7, #30]
}
 80181b4:	4618      	mov	r0, r3
 80181b6:	3724      	adds	r7, #36	; 0x24
 80181b8:	46bd      	mov	sp, r7
 80181ba:	bd90      	pop	{r4, r7, pc}
 80181bc:	08026f74 	.word	0x08026f74
 80181c0:	20000700 	.word	0x20000700

080181c4 <ADPU_DetachFromSensor_vtbl>:

sys_error_code_t ADPU_DetachFromSensor_vtbl(IDPU *_this, ISourceObservable *s)
{
 80181c4:	b580      	push	{r7, lr}
 80181c6:	b086      	sub	sp, #24
 80181c8:	af00      	add	r7, sp, #0
 80181ca:	6078      	str	r0, [r7, #4]
 80181cc:	6039      	str	r1, [r7, #0]
  assert_param(_this);
 80181ce:	687b      	ldr	r3, [r7, #4]
 80181d0:	2b00      	cmp	r3, #0
 80181d2:	d103      	bne.n	80181dc <ADPU_DetachFromSensor_vtbl+0x18>
 80181d4:	218a      	movs	r1, #138	; 0x8a
 80181d6:	4837      	ldr	r0, [pc, #220]	; (80182b4 <ADPU_DetachFromSensor_vtbl+0xf0>)
 80181d8:	f7fd f867 	bl	80152aa <assert_failed>
  assert_param(s != NULL);
 80181dc:	683b      	ldr	r3, [r7, #0]
 80181de:	2b00      	cmp	r3, #0
 80181e0:	d103      	bne.n	80181ea <ADPU_DetachFromSensor_vtbl+0x26>
 80181e2:	218b      	movs	r1, #139	; 0x8b
 80181e4:	4833      	ldr	r0, [pc, #204]	; (80182b4 <ADPU_DetachFromSensor_vtbl+0xf0>)
 80181e6:	f7fd f860 	bl	80152aa <assert_failed>
  sys_error_code_t xRes = SYS_NO_ERROR_CODE;
 80181ea:	2300      	movs	r3, #0
 80181ec:	82fb      	strh	r3, [r7, #22]
  ADPU *pObj = (ADPU*)_this;
 80181ee:	687b      	ldr	r3, [r7, #4]
 80181f0:	613b      	str	r3, [r7, #16]
  
  uint8_t id = ISourceGetId(s);
 80181f2:	6838      	ldr	r0, [r7, #0]
 80181f4:	f7ff fec6 	bl	8017f84 <ISourceGetId>
 80181f8:	4603      	mov	r3, r0
 80181fa:	73fb      	strb	r3, [r7, #15]
  if (pObj->sensors[id].sensorIF == s)
 80181fc:	7bfa      	ldrb	r2, [r7, #15]
 80181fe:	6939      	ldr	r1, [r7, #16]
 8018200:	4613      	mov	r3, r2
 8018202:	005b      	lsls	r3, r3, #1
 8018204:	4413      	add	r3, r2
 8018206:	00db      	lsls	r3, r3, #3
 8018208:	440b      	add	r3, r1
 801820a:	3320      	adds	r3, #32
 801820c:	681b      	ldr	r3, [r3, #0]
 801820e:	683a      	ldr	r2, [r7, #0]
 8018210:	429a      	cmp	r2, r3
 8018212:	d145      	bne.n	80182a0 <ADPU_DetachFromSensor_vtbl+0xdc>
  {
    IEventSrc * eventSource = ISourceGetEventSrcIF(s);
 8018214:	6838      	ldr	r0, [r7, #0]
 8018216:	f7ff fec3 	bl	8017fa0 <ISourceGetEventSrcIF>
 801821a:	60b8      	str	r0, [r7, #8]
    if (eventSource == NULL) 
 801821c:	68bb      	ldr	r3, [r7, #8]
 801821e:	2b00      	cmp	r3, #0
 8018220:	d106      	bne.n	8018230 <ADPU_DetachFromSensor_vtbl+0x6c>
    {
      SYS_SET_SERVICE_LEVEL_ERROR_CODE(SYS_UNDEFINED_ERROR_CODE);
 8018222:	4b25      	ldr	r3, [pc, #148]	; (80182b8 <ADPU_DetachFromSensor_vtbl+0xf4>)
 8018224:	2202      	movs	r2, #2
 8018226:	805a      	strh	r2, [r3, #2]
      xRes = SYS_UNDEFINED_ERROR_CODE;
 8018228:	2302      	movs	r3, #2
 801822a:	82fb      	strh	r3, [r7, #22]
      return xRes;
 801822c:	8afb      	ldrh	r3, [r7, #22]
 801822e:	e03d      	b.n	80182ac <ADPU_DetachFromSensor_vtbl+0xe8>
    }
    
    if(IEventSrcRemoveEventListener(eventSource, ADPU_GetEventListenerIF(pObj)) != SYS_NO_ERROR_CODE)
 8018230:	6938      	ldr	r0, [r7, #16]
 8018232:	f000 fab9 	bl	80187a8 <ADPU_GetEventListenerIF>
 8018236:	4603      	mov	r3, r0
 8018238:	4619      	mov	r1, r3
 801823a:	68b8      	ldr	r0, [r7, #8]
 801823c:	f7ff fe80 	bl	8017f40 <IEventSrcRemoveEventListener>
 8018240:	4603      	mov	r3, r0
 8018242:	2b00      	cmp	r3, #0
 8018244:	d001      	beq.n	801824a <ADPU_DetachFromSensor_vtbl+0x86>
    {
      sys_error_handler();
 8018246:	f7f6 fd87 	bl	800ed58 <sys_error_handler>
    }
    
    pObj->sensors[id].sensorIF = NULL;
 801824a:	7bfa      	ldrb	r2, [r7, #15]
 801824c:	6939      	ldr	r1, [r7, #16]
 801824e:	4613      	mov	r3, r2
 8018250:	005b      	lsls	r3, r3, #1
 8018252:	4413      	add	r3, r2
 8018254:	00db      	lsls	r3, r3, #3
 8018256:	440b      	add	r3, r1
 8018258:	3320      	adds	r3, #32
 801825a:	2200      	movs	r2, #0
 801825c:	601a      	str	r2, [r3, #0]
    if(pObj->sensors[id].cb_handle.pCircularBuffer != NULL)
 801825e:	7bfa      	ldrb	r2, [r7, #15]
 8018260:	6939      	ldr	r1, [r7, #16]
 8018262:	4613      	mov	r3, r2
 8018264:	005b      	lsls	r3, r3, #1
 8018266:	4413      	add	r3, r2
 8018268:	00db      	lsls	r3, r3, #3
 801826a:	440b      	add	r3, r1
 801826c:	3310      	adds	r3, #16
 801826e:	681b      	ldr	r3, [r3, #0]
 8018270:	2b00      	cmp	r3, #0
 8018272:	d00b      	beq.n	801828c <ADPU_DetachFromSensor_vtbl+0xc8>
    {
      CB_Free(pObj->sensors[id].cb_handle.pCircularBuffer);
 8018274:	7bfa      	ldrb	r2, [r7, #15]
 8018276:	6939      	ldr	r1, [r7, #16]
 8018278:	4613      	mov	r3, r2
 801827a:	005b      	lsls	r3, r3, #1
 801827c:	4413      	add	r3, r2
 801827e:	00db      	lsls	r3, r3, #3
 8018280:	440b      	add	r3, r1
 8018282:	3310      	adds	r3, #16
 8018284:	681b      	ldr	r3, [r3, #0]
 8018286:	4618      	mov	r0, r3
 8018288:	f001 fc86 	bl	8019b98 <CB_Free>
    }
    pObj->nSensor--;
 801828c:	693b      	ldr	r3, [r7, #16]
 801828e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8018292:	3b01      	subs	r3, #1
 8018294:	b29a      	uxth	r2, r3
 8018296:	693b      	ldr	r3, [r7, #16]
 8018298:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    SYS_SET_SERVICE_LEVEL_ERROR_CODE(SYS_UNDEFINED_ERROR_CODE);
    xRes = SYS_UNDEFINED_ERROR_CODE;
    return xRes;
  }
  
  return xRes;
 801829c:	8afb      	ldrh	r3, [r7, #22]
 801829e:	e005      	b.n	80182ac <ADPU_DetachFromSensor_vtbl+0xe8>
    SYS_SET_SERVICE_LEVEL_ERROR_CODE(SYS_UNDEFINED_ERROR_CODE);
 80182a0:	4b05      	ldr	r3, [pc, #20]	; (80182b8 <ADPU_DetachFromSensor_vtbl+0xf4>)
 80182a2:	2202      	movs	r2, #2
 80182a4:	805a      	strh	r2, [r3, #2]
    xRes = SYS_UNDEFINED_ERROR_CODE;
 80182a6:	2302      	movs	r3, #2
 80182a8:	82fb      	strh	r3, [r7, #22]
    return xRes;
 80182aa:	8afb      	ldrh	r3, [r7, #22]
}
 80182ac:	4618      	mov	r0, r3
 80182ae:	3718      	adds	r7, #24
 80182b0:	46bd      	mov	sp, r7
 80182b2:	bd80      	pop	{r7, pc}
 80182b4:	08026f74 	.word	0x08026f74
 80182b8:	20000700 	.word	0x20000700

080182bc <ADPU_AttachInputADPU_vtbl>:

sys_error_code_t ADPU_AttachInputADPU_vtbl(IDPU *_this, IDPU *adpu, void *buffer)
{
 80182bc:	b580      	push	{r7, lr}
 80182be:	b088      	sub	sp, #32
 80182c0:	af00      	add	r7, sp, #0
 80182c2:	60f8      	str	r0, [r7, #12]
 80182c4:	60b9      	str	r1, [r7, #8]
 80182c6:	607a      	str	r2, [r7, #4]
  assert_param(_this != NULL);
 80182c8:	68fb      	ldr	r3, [r7, #12]
 80182ca:	2b00      	cmp	r3, #0
 80182cc:	d103      	bne.n	80182d6 <ADPU_AttachInputADPU_vtbl+0x1a>
 80182ce:	21b3      	movs	r1, #179	; 0xb3
 80182d0:	482f      	ldr	r0, [pc, #188]	; (8018390 <ADPU_AttachInputADPU_vtbl+0xd4>)
 80182d2:	f7fc ffea 	bl	80152aa <assert_failed>
  assert_param(adpu != NULL);
 80182d6:	68bb      	ldr	r3, [r7, #8]
 80182d8:	2b00      	cmp	r3, #0
 80182da:	d103      	bne.n	80182e4 <ADPU_AttachInputADPU_vtbl+0x28>
 80182dc:	21b4      	movs	r1, #180	; 0xb4
 80182de:	482c      	ldr	r0, [pc, #176]	; (8018390 <ADPU_AttachInputADPU_vtbl+0xd4>)
 80182e0:	f7fc ffe3 	bl	80152aa <assert_failed>
  sys_error_code_t xRes = SYS_NO_ERROR_CODE;
 80182e4:	2300      	movs	r3, #0
 80182e6:	83fb      	strh	r3, [r7, #30]
  ADPU *pObj = (ADPU*)_this;
 80182e8:	68fb      	ldr	r3, [r7, #12]
 80182ea:	61bb      	str	r3, [r7, #24]
  ADPU *target =  (ADPU*) adpu;
 80182ec:	68bb      	ldr	r3, [r7, #8]
 80182ee:	617b      	str	r3, [r7, #20]
  
  if(pObj->isADPUattached)
 80182f0:	69bb      	ldr	r3, [r7, #24]
 80182f2:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 80182f6:	2b00      	cmp	r3, #0
 80182f8:	d006      	beq.n	8018308 <ADPU_AttachInputADPU_vtbl+0x4c>
  {
    SYS_SET_SERVICE_LEVEL_ERROR_CODE(ADPU_ALREADY_ATTACHED);
 80182fa:	4b26      	ldr	r3, [pc, #152]	; (8018394 <ADPU_AttachInputADPU_vtbl+0xd8>)
 80182fc:	2203      	movs	r2, #3
 80182fe:	805a      	strh	r2, [r3, #2]
    xRes = ADPU_ALREADY_ATTACHED;
 8018300:	2303      	movs	r3, #3
 8018302:	83fb      	strh	r3, [r7, #30]
    return xRes;
 8018304:	8bfb      	ldrh	r3, [r7, #30]
 8018306:	e03e      	b.n	8018386 <ADPU_AttachInputADPU_vtbl+0xca>
  }
  
  if(adpu == NULL)
 8018308:	68bb      	ldr	r3, [r7, #8]
 801830a:	2b00      	cmp	r3, #0
 801830c:	d106      	bne.n	801831c <ADPU_AttachInputADPU_vtbl+0x60>
  {
    SYS_SET_SERVICE_LEVEL_ERROR_CODE(SYS_UNDEFINED_ERROR_CODE);
 801830e:	4b21      	ldr	r3, [pc, #132]	; (8018394 <ADPU_AttachInputADPU_vtbl+0xd8>)
 8018310:	2202      	movs	r2, #2
 8018312:	805a      	strh	r2, [r3, #2]
    xRes = SYS_UNDEFINED_ERROR_CODE;
 8018314:	2302      	movs	r3, #2
 8018316:	83fb      	strh	r3, [r7, #30]
    return xRes;
 8018318:	8bfb      	ldrh	r3, [r7, #30]
 801831a:	e034      	b.n	8018386 <ADPU_AttachInputADPU_vtbl+0xca>
  }
  
  pObj->AttachedAdpu.adpu = adpu;
 801831c:	69bb      	ldr	r3, [r7, #24]
 801831e:	68ba      	ldr	r2, [r7, #8]
 8018320:	671a      	str	r2, [r3, #112]	; 0x70
  
  if(buffer != NULL)
 8018322:	687b      	ldr	r3, [r7, #4]
 8018324:	2b00      	cmp	r3, #0
 8018326:	d022      	beq.n	801836e <ADPU_AttachInputADPU_vtbl+0xb2>
  {
    pObj->AttachedAdpu.cb_handle.pCircularBuffer = CB_Alloc(pObj->cb_items);
 8018328:	69bb      	ldr	r3, [r7, #24]
 801832a:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 801832e:	b29b      	uxth	r3, r3
 8018330:	4618      	mov	r0, r3
 8018332:	f001 fc09 	bl	8019b48 <CB_Alloc>
 8018336:	4602      	mov	r2, r0
 8018338:	69bb      	ldr	r3, [r7, #24]
 801833a:	661a      	str	r2, [r3, #96]	; 0x60
    if(CB_Init(pObj->AttachedAdpu.cb_handle.pCircularBuffer, buffer, pObj->n_bytes_for_item) != CB_NO_ERROR_CODE)
 801833c:	69bb      	ldr	r3, [r7, #24]
 801833e:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8018340:	69bb      	ldr	r3, [r7, #24]
 8018342:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8018344:	b29b      	uxth	r3, r3
 8018346:	461a      	mov	r2, r3
 8018348:	6879      	ldr	r1, [r7, #4]
 801834a:	f001 fc3f 	bl	8019bcc <CB_Init>
 801834e:	4603      	mov	r3, r0
 8018350:	2b00      	cmp	r3, #0
 8018352:	d001      	beq.n	8018358 <ADPU_AttachInputADPU_vtbl+0x9c>
    {
      sys_error_handler();
 8018354:	f7f6 fd00 	bl	800ed58 <sys_error_handler>
    }
    
    pObj->AttachedAdpu.cb_handle.pProducerDataBuff = NULL;
 8018358:	69bb      	ldr	r3, [r7, #24]
 801835a:	2200      	movs	r2, #0
 801835c:	665a      	str	r2, [r3, #100]	; 0x64
    pObj->AttachedAdpu.cb_handle.pConsumerDataBuff = NULL;
 801835e:	69bb      	ldr	r3, [r7, #24]
 8018360:	2200      	movs	r2, #0
 8018362:	669a      	str	r2, [r3, #104]	; 0x68
    pObj->AttachedAdpu.cb_handle.DataIdx = 0;
 8018364:	69bb      	ldr	r3, [r7, #24]
 8018366:	2200      	movs	r2, #0
 8018368:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
 801836c:	e002      	b.n	8018374 <ADPU_AttachInputADPU_vtbl+0xb8>
  }
  else
  {
    pObj->AttachedAdpu.cb_handle.pCircularBuffer = NULL;
 801836e:	69bb      	ldr	r3, [r7, #24]
 8018370:	2200      	movs	r2, #0
 8018372:	661a      	str	r2, [r3, #96]	; 0x60
  }
  
  SetNextDPU(target, pObj);
 8018374:	69b9      	ldr	r1, [r7, #24]
 8018376:	6978      	ldr	r0, [r7, #20]
 8018378:	f001 f900 	bl	801957c <SetNextDPU>
  pObj->isADPUattached = 1;
 801837c:	69bb      	ldr	r3, [r7, #24]
 801837e:	2201      	movs	r2, #1
 8018380:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
  return xRes;
 8018384:	8bfb      	ldrh	r3, [r7, #30]
}
 8018386:	4618      	mov	r0, r3
 8018388:	3720      	adds	r7, #32
 801838a:	46bd      	mov	sp, r7
 801838c:	bd80      	pop	{r7, pc}
 801838e:	bf00      	nop
 8018390:	08026f74 	.word	0x08026f74
 8018394:	20000700 	.word	0x20000700

08018398 <ADPU_DetachFromADPU_vtbl>:

sys_error_code_t ADPU_DetachFromADPU_vtbl(IDPU *_this)
{
 8018398:	b580      	push	{r7, lr}
 801839a:	b084      	sub	sp, #16
 801839c:	af00      	add	r7, sp, #0
 801839e:	6078      	str	r0, [r7, #4]
  assert_param(_this != NULL);
 80183a0:	687b      	ldr	r3, [r7, #4]
 80183a2:	2b00      	cmp	r3, #0
 80183a4:	d103      	bne.n	80183ae <ADPU_DetachFromADPU_vtbl+0x16>
 80183a6:	21e1      	movs	r1, #225	; 0xe1
 80183a8:	4815      	ldr	r0, [pc, #84]	; (8018400 <ADPU_DetachFromADPU_vtbl+0x68>)
 80183aa:	f7fc ff7e 	bl	80152aa <assert_failed>
  sys_error_code_t xRes = SYS_NO_ERROR_CODE;
 80183ae:	2300      	movs	r3, #0
 80183b0:	81fb      	strh	r3, [r7, #14]
  ADPU *pObj = (ADPU*)_this;
 80183b2:	687b      	ldr	r3, [r7, #4]
 80183b4:	60bb      	str	r3, [r7, #8]
  
  if(NULL == pObj->nextADPU || pObj->isADPUattached == 0)
 80183b6:	68bb      	ldr	r3, [r7, #8]
 80183b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80183ba:	2b00      	cmp	r3, #0
 80183bc:	d004      	beq.n	80183c8 <ADPU_DetachFromADPU_vtbl+0x30>
 80183be:	68bb      	ldr	r3, [r7, #8]
 80183c0:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 80183c4:	2b00      	cmp	r3, #0
 80183c6:	d106      	bne.n	80183d6 <ADPU_DetachFromADPU_vtbl+0x3e>
  {
    SYS_SET_SERVICE_LEVEL_ERROR_CODE(ADPU_NOT_ATTACHED);
 80183c8:	4b0e      	ldr	r3, [pc, #56]	; (8018404 <ADPU_DetachFromADPU_vtbl+0x6c>)
 80183ca:	2204      	movs	r2, #4
 80183cc:	805a      	strh	r2, [r3, #2]
    xRes = ADPU_NOT_ATTACHED;
 80183ce:	2304      	movs	r3, #4
 80183d0:	81fb      	strh	r3, [r7, #14]
    return xRes;
 80183d2:	89fb      	ldrh	r3, [r7, #14]
 80183d4:	e010      	b.n	80183f8 <ADPU_DetachFromADPU_vtbl+0x60>
  }
  
  pObj->nextADPU = NULL;
 80183d6:	68bb      	ldr	r3, [r7, #8]
 80183d8:	2200      	movs	r2, #0
 80183da:	65da      	str	r2, [r3, #92]	; 0x5c
  pObj->isADPUattached = 0;
 80183dc:	68bb      	ldr	r3, [r7, #8]
 80183de:	2200      	movs	r2, #0
 80183e0:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
  if(pObj->AttachedAdpu.cb_handle.pCircularBuffer != NULL)
 80183e4:	68bb      	ldr	r3, [r7, #8]
 80183e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80183e8:	2b00      	cmp	r3, #0
 80183ea:	d004      	beq.n	80183f6 <ADPU_DetachFromADPU_vtbl+0x5e>
  {
    CB_Free(pObj->AttachedAdpu.cb_handle.pCircularBuffer);
 80183ec:	68bb      	ldr	r3, [r7, #8]
 80183ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80183f0:	4618      	mov	r0, r3
 80183f2:	f001 fbd1 	bl	8019b98 <CB_Free>
  }
  
  return xRes;
 80183f6:	89fb      	ldrh	r3, [r7, #14]
}
 80183f8:	4618      	mov	r0, r3
 80183fa:	3710      	adds	r7, #16
 80183fc:	46bd      	mov	sp, r7
 80183fe:	bd80      	pop	{r7, pc}
 8018400:	08026f74 	.word	0x08026f74
 8018404:	20000700 	.word	0x20000700

08018408 <ADPU_DispatchEvents_vtbl>:

sys_error_code_t ADPU_DispatchEvents_vtbl(IDPU *_this,  ProcessEvent *pxEvt)
{
 8018408:	b580      	push	{r7, lr}
 801840a:	b084      	sub	sp, #16
 801840c:	af00      	add	r7, sp, #0
 801840e:	6078      	str	r0, [r7, #4]
 8018410:	6039      	str	r1, [r7, #0]
  assert_param(_this != NULL);
 8018412:	687b      	ldr	r3, [r7, #4]
 8018414:	2b00      	cmp	r3, #0
 8018416:	d103      	bne.n	8018420 <ADPU_DispatchEvents_vtbl+0x18>
 8018418:	21f8      	movs	r1, #248	; 0xf8
 801841a:	481a      	ldr	r0, [pc, #104]	; (8018484 <ADPU_DispatchEvents_vtbl+0x7c>)
 801841c:	f7fc ff45 	bl	80152aa <assert_failed>
  assert_param(pxEvt != NULL);
 8018420:	683b      	ldr	r3, [r7, #0]
 8018422:	2b00      	cmp	r3, #0
 8018424:	d103      	bne.n	801842e <ADPU_DispatchEvents_vtbl+0x26>
 8018426:	21f9      	movs	r1, #249	; 0xf9
 8018428:	4816      	ldr	r0, [pc, #88]	; (8018484 <ADPU_DispatchEvents_vtbl+0x7c>)
 801842a:	f7fc ff3e 	bl	80152aa <assert_failed>
  
  sys_error_code_t xRes = SYS_NO_ERROR_CODE;
 801842e:	2300      	movs	r3, #0
 8018430:	81fb      	strh	r3, [r7, #14]
  ADPU *pObj = (ADPU*)_this;
 8018432:	687b      	ldr	r3, [r7, #4]
 8018434:	60bb      	str	r3, [r7, #8]
  
  xRes = IEventSrcSendEvent((IEventSrc *)pObj->pProcessEventSrc, (IEvent *) pxEvt, NULL);
 8018436:	68bb      	ldr	r3, [r7, #8]
 8018438:	68db      	ldr	r3, [r3, #12]
 801843a:	2200      	movs	r2, #0
 801843c:	6839      	ldr	r1, [r7, #0]
 801843e:	4618      	mov	r0, r3
 8018440:	f7ff fd8e 	bl	8017f60 <IEventSrcSendEvent>
 8018444:	4603      	mov	r3, r0
 8018446:	81fb      	strh	r3, [r7, #14]
  if(xRes != SYS_NO_ERROR_CODE)
 8018448:	89fb      	ldrh	r3, [r7, #14]
 801844a:	2b00      	cmp	r3, #0
 801844c:	d002      	beq.n	8018454 <ADPU_DispatchEvents_vtbl+0x4c>
  {
    SYS_SET_SERVICE_LEVEL_ERROR_CODE(SYS_UNDEFINED_ERROR_CODE);
 801844e:	4b0e      	ldr	r3, [pc, #56]	; (8018488 <ADPU_DispatchEvents_vtbl+0x80>)
 8018450:	2202      	movs	r2, #2
 8018452:	805a      	strh	r2, [r3, #2]
  }
  
  if(pObj->nextADPU != NULL)
 8018454:	68bb      	ldr	r3, [r7, #8]
 8018456:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018458:	2b00      	cmp	r3, #0
 801845a:	d007      	beq.n	801846c <ADPU_DispatchEvents_vtbl+0x64>
  {
    xRes = ADPU_NotifyDPUDataReady_vtbl((IDPU*) pObj->nextADPU, pxEvt);
 801845c:	68bb      	ldr	r3, [r7, #8]
 801845e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018460:	6839      	ldr	r1, [r7, #0]
 8018462:	4618      	mov	r0, r3
 8018464:	f000 f812 	bl	801848c <ADPU_NotifyDPUDataReady_vtbl>
 8018468:	4603      	mov	r3, r0
 801846a:	81fb      	strh	r3, [r7, #14]
  }
  
  if(xRes != SYS_NO_ERROR_CODE)
 801846c:	89fb      	ldrh	r3, [r7, #14]
 801846e:	2b00      	cmp	r3, #0
 8018470:	d002      	beq.n	8018478 <ADPU_DispatchEvents_vtbl+0x70>
  {
    SYS_SET_SERVICE_LEVEL_ERROR_CODE(SYS_UNDEFINED_ERROR_CODE);
 8018472:	4b05      	ldr	r3, [pc, #20]	; (8018488 <ADPU_DispatchEvents_vtbl+0x80>)
 8018474:	2202      	movs	r2, #2
 8018476:	805a      	strh	r2, [r3, #2]
  }
  
  return xRes;
 8018478:	89fb      	ldrh	r3, [r7, #14]
}
 801847a:	4618      	mov	r0, r3
 801847c:	3710      	adds	r7, #16
 801847e:	46bd      	mov	sp, r7
 8018480:	bd80      	pop	{r7, pc}
 8018482:	bf00      	nop
 8018484:	08026f74 	.word	0x08026f74
 8018488:	20000700 	.word	0x20000700

0801848c <ADPU_NotifyDPUDataReady_vtbl>:

static sys_error_code_t ADPU_NotifyDPUDataReady_vtbl(IDPU *_this,  ProcessEvent *pxEvt)
{
 801848c:	b580      	push	{r7, lr}
 801848e:	b086      	sub	sp, #24
 8018490:	af00      	add	r7, sp, #0
 8018492:	6078      	str	r0, [r7, #4]
 8018494:	6039      	str	r1, [r7, #0]
  assert_param(_this != NULL);
 8018496:	687b      	ldr	r3, [r7, #4]
 8018498:	2b00      	cmp	r3, #0
 801849a:	d104      	bne.n	80184a6 <ADPU_NotifyDPUDataReady_vtbl+0x1a>
 801849c:	f240 1113 	movw	r1, #275	; 0x113
 80184a0:	483c      	ldr	r0, [pc, #240]	; (8018594 <ADPU_NotifyDPUDataReady_vtbl+0x108>)
 80184a2:	f7fc ff02 	bl	80152aa <assert_failed>
  assert_param(pxEvt != NULL);
 80184a6:	683b      	ldr	r3, [r7, #0]
 80184a8:	2b00      	cmp	r3, #0
 80184aa:	d104      	bne.n	80184b6 <ADPU_NotifyDPUDataReady_vtbl+0x2a>
 80184ac:	f44f 718a 	mov.w	r1, #276	; 0x114
 80184b0:	4838      	ldr	r0, [pc, #224]	; (8018594 <ADPU_NotifyDPUDataReady_vtbl+0x108>)
 80184b2:	f7fc fefa 	bl	80152aa <assert_failed>
  sys_error_code_t xRes = SYS_NO_ERROR_CODE;
 80184b6:	2300      	movs	r3, #0
 80184b8:	82fb      	strh	r3, [r7, #22]
  ADPU *pObj = (ADPU*)_this;
 80184ba:	687b      	ldr	r3, [r7, #4]
 80184bc:	613b      	str	r3, [r7, #16]
  
  CBHandle_t *cb_dpu = & pObj->AttachedAdpu.cb_handle;
 80184be:	693b      	ldr	r3, [r7, #16]
 80184c0:	3360      	adds	r3, #96	; 0x60
 80184c2:	60fb      	str	r3, [r7, #12]
  
  pObj->sourceStream.mode = ((AI_SP_Stream_t *)pxEvt->stream)->mode;
 80184c4:	683b      	ldr	r3, [r7, #0]
 80184c6:	685b      	ldr	r3, [r3, #4]
 80184c8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80184ca:	693b      	ldr	r3, [r7, #16]
 80184cc:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
  pObj->sourceStream.packet.payload_fmt = pxEvt->stream->payload_fmt;
 80184d0:	683b      	ldr	r3, [r7, #0]
 80184d2:	685b      	ldr	r3, [r3, #4]
 80184d4:	689a      	ldr	r2, [r3, #8]
 80184d6:	693b      	ldr	r3, [r7, #16]
 80184d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  pObj->sourceStream.packet.payload = pxEvt->stream->payload;
 80184dc:	683b      	ldr	r3, [r7, #0]
 80184de:	685b      	ldr	r3, [r3, #4]
 80184e0:	685a      	ldr	r2, [r3, #4]
 80184e2:	693b      	ldr	r3, [r7, #16]
 80184e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  pObj->sourceStream.packet.shape.shapes[AI_LOGGING_SHAPES_WIDTH] = pxEvt->stream->shape.shapes[AI_LOGGING_SHAPES_WIDTH];
 80184e8:	683b      	ldr	r3, [r7, #0]
 80184ea:	685b      	ldr	r3, [r3, #4]
 80184ec:	8a5a      	ldrh	r2, [r3, #18]
 80184ee:	693b      	ldr	r3, [r7, #16]
 80184f0:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92
  pObj->sourceStream.packet.shape.shapes[AI_LOGGING_SHAPES_HEIGHT] = pxEvt->stream->shape.shapes[AI_LOGGING_SHAPES_HEIGHT];
 80184f4:	683b      	ldr	r3, [r7, #0]
 80184f6:	685b      	ldr	r3, [r3, #4]
 80184f8:	8a9a      	ldrh	r2, [r3, #20]
 80184fa:	693b      	ldr	r3, [r7, #16]
 80184fc:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
  pObj->sourceStream.packet.shape.n_shape =  pxEvt->stream->shape.n_shape;
 8018500:	683b      	ldr	r3, [r7, #0]
 8018502:	685b      	ldr	r3, [r3, #4]
 8018504:	8a1a      	ldrh	r2, [r3, #16]
 8018506:	693b      	ldr	r3, [r7, #16]
 8018508:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
  
  if(cb_dpu->pCircularBuffer != NULL)
 801850c:	68fb      	ldr	r3, [r7, #12]
 801850e:	681b      	ldr	r3, [r3, #0]
 8018510:	2b00      	cmp	r3, #0
 8018512:	d035      	beq.n	8018580 <ADPU_NotifyDPUDataReady_vtbl+0xf4>
  {
    if(pObj->sourceStream.packet.payload_fmt == AI_SP_FMT_INT16_RESET() && pObj->dpuWorkingStream.packet.payload_fmt == AI_SP_FMT_FLOAT32_RESET())
 8018514:	693b      	ldr	r3, [r7, #16]
 8018516:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801851a:	4a1f      	ldr	r2, [pc, #124]	; (8018598 <ADPU_NotifyDPUDataReady_vtbl+0x10c>)
 801851c:	4293      	cmp	r3, r2
 801851e:	d10f      	bne.n	8018540 <ADPU_NotifyDPUDataReady_vtbl+0xb4>
 8018520:	693b      	ldr	r3, [r7, #16]
 8018522:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8018526:	4a1d      	ldr	r2, [pc, #116]	; (801859c <ADPU_NotifyDPUDataReady_vtbl+0x110>)
 8018528:	4293      	cmp	r3, r2
 801852a:	d109      	bne.n	8018540 <ADPU_NotifyDPUDataReady_vtbl+0xb4>
    {
      xRes = CB_storing_int16_toFloat_helper(pObj, cb_dpu, (AI_SP_Stream_t *)pxEvt->stream);
 801852c:	683b      	ldr	r3, [r7, #0]
 801852e:	685b      	ldr	r3, [r3, #4]
 8018530:	461a      	mov	r2, r3
 8018532:	68f9      	ldr	r1, [r7, #12]
 8018534:	6938      	ldr	r0, [r7, #16]
 8018536:	f000 fc61 	bl	8018dfc <CB_storing_int16_toFloat_helper>
 801853a:	4603      	mov	r3, r0
 801853c:	82fb      	strh	r3, [r7, #22]
 801853e:	e024      	b.n	801858a <ADPU_NotifyDPUDataReady_vtbl+0xfe>
    }
    else if(pObj->sourceStream.packet.payload_fmt ==  AI_SP_FMT_FLOAT32_RESET() && pObj->dpuWorkingStream.packet.payload_fmt == AI_SP_FMT_FLOAT32_RESET())
 8018540:	693b      	ldr	r3, [r7, #16]
 8018542:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8018546:	4a15      	ldr	r2, [pc, #84]	; (801859c <ADPU_NotifyDPUDataReady_vtbl+0x110>)
 8018548:	4293      	cmp	r3, r2
 801854a:	d10f      	bne.n	801856c <ADPU_NotifyDPUDataReady_vtbl+0xe0>
 801854c:	693b      	ldr	r3, [r7, #16]
 801854e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8018552:	4a12      	ldr	r2, [pc, #72]	; (801859c <ADPU_NotifyDPUDataReady_vtbl+0x110>)
 8018554:	4293      	cmp	r3, r2
 8018556:	d109      	bne.n	801856c <ADPU_NotifyDPUDataReady_vtbl+0xe0>
    {
      xRes = CB_storing_float_toFloat_helper(pObj, cb_dpu, (AI_SP_Stream_t *)pxEvt->stream);
 8018558:	683b      	ldr	r3, [r7, #0]
 801855a:	685b      	ldr	r3, [r3, #4]
 801855c:	461a      	mov	r2, r3
 801855e:	68f9      	ldr	r1, [r7, #12]
 8018560:	6938      	ldr	r0, [r7, #16]
 8018562:	f000 fe2b 	bl	80191bc <CB_storing_float_toFloat_helper>
 8018566:	4603      	mov	r3, r0
 8018568:	82fb      	strh	r3, [r7, #22]
 801856a:	e00e      	b.n	801858a <ADPU_NotifyDPUDataReady_vtbl+0xfe>
    }
    else
    {
      xRes = CB_storing_int16_toInt16_helper(pObj, cb_dpu, (AI_SP_Stream_t *)pxEvt->stream);
 801856c:	683b      	ldr	r3, [r7, #0]
 801856e:	685b      	ldr	r3, [r3, #4]
 8018570:	461a      	mov	r2, r3
 8018572:	68f9      	ldr	r1, [r7, #12]
 8018574:	6938      	ldr	r0, [r7, #16]
 8018576:	f000 fa49 	bl	8018a0c <CB_storing_int16_toInt16_helper>
 801857a:	4603      	mov	r3, r0
 801857c:	82fb      	strh	r3, [r7, #22]
 801857e:	e004      	b.n	801858a <ADPU_NotifyDPUDataReady_vtbl+0xfe>
    }
  }
  else
  {
    xRes = IDPU_Process((IDPU *)_this);
 8018580:	6878      	ldr	r0, [r7, #4]
 8018582:	f001 fd26 	bl	8019fd2 <IDPU_Process>
 8018586:	4603      	mov	r3, r0
 8018588:	82fb      	strh	r3, [r7, #22]
  }
  
  return xRes;
 801858a:	8afb      	ldrh	r3, [r7, #22]
}
 801858c:	4618      	mov	r0, r3
 801858e:	3718      	adds	r7, #24
 8018590:	46bd      	mov	sp, r7
 8018592:	bd80      	pop	{r7, pc}
 8018594:	08026f74 	.word	0x08026f74
 8018598:	00840800 	.word	0x00840800
 801859c:	00821000 	.word	0x00821000

080185a0 <ADPU_RegisterNotifyCallbacks_vtbl>:

sys_error_code_t ADPU_RegisterNotifyCallbacks_vtbl(IDPU *_this, DPU_ReadyToProcessCallback_t callback, void *p_param)
{
 80185a0:	b580      	push	{r7, lr}
 80185a2:	b086      	sub	sp, #24
 80185a4:	af00      	add	r7, sp, #0
 80185a6:	60f8      	str	r0, [r7, #12]
 80185a8:	60b9      	str	r1, [r7, #8]
 80185aa:	607a      	str	r2, [r7, #4]
  assert_param(_this != NULL);
 80185ac:	68fb      	ldr	r3, [r7, #12]
 80185ae:	2b00      	cmp	r3, #0
 80185b0:	d104      	bne.n	80185bc <ADPU_RegisterNotifyCallbacks_vtbl+0x1c>
 80185b2:	f44f 719d 	mov.w	r1, #314	; 0x13a
 80185b6:	480d      	ldr	r0, [pc, #52]	; (80185ec <ADPU_RegisterNotifyCallbacks_vtbl+0x4c>)
 80185b8:	f7fc fe77 	bl	80152aa <assert_failed>
  assert_param(callback != NULL);
 80185bc:	68bb      	ldr	r3, [r7, #8]
 80185be:	2b00      	cmp	r3, #0
 80185c0:	d104      	bne.n	80185cc <ADPU_RegisterNotifyCallbacks_vtbl+0x2c>
 80185c2:	f240 113b 	movw	r1, #315	; 0x13b
 80185c6:	4809      	ldr	r0, [pc, #36]	; (80185ec <ADPU_RegisterNotifyCallbacks_vtbl+0x4c>)
 80185c8:	f7fc fe6f 	bl	80152aa <assert_failed>
  sys_error_code_t xRes = SYS_NO_ERROR_CODE;
 80185cc:	2300      	movs	r3, #0
 80185ce:	82fb      	strh	r3, [r7, #22]
  ADPU *pObj = (ADPU*)_this;
 80185d0:	68fb      	ldr	r3, [r7, #12]
 80185d2:	613b      	str	r3, [r7, #16]
  
  pObj->notifyCall = callback;
 80185d4:	693b      	ldr	r3, [r7, #16]
 80185d6:	68ba      	ldr	r2, [r7, #8]
 80185d8:	67da      	str	r2, [r3, #124]	; 0x7c
  pObj->p_callback_param = p_param;
 80185da:	693b      	ldr	r3, [r7, #16]
 80185dc:	687a      	ldr	r2, [r7, #4]
 80185de:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
  
  return xRes;
 80185e2:	8afb      	ldrh	r3, [r7, #22]
}
 80185e4:	4618      	mov	r0, r3
 80185e6:	3718      	adds	r7, #24
 80185e8:	46bd      	mov	sp, r7
 80185ea:	bd80      	pop	{r7, pc}
 80185ec:	08026f74 	.word	0x08026f74

080185f0 <ADPU_SetOwner_vtbl>:

// IEventListener virtual functions definition
// ***************************
void ADPU_SetOwner_vtbl(IEventListener *_this, void *pOwner) 
{
 80185f0:	b580      	push	{r7, lr}
 80185f2:	b084      	sub	sp, #16
 80185f4:	af00      	add	r7, sp, #0
 80185f6:	6078      	str	r0, [r7, #4]
 80185f8:	6039      	str	r1, [r7, #0]
  assert_param(_this);
 80185fa:	687b      	ldr	r3, [r7, #4]
 80185fc:	2b00      	cmp	r3, #0
 80185fe:	d104      	bne.n	801860a <ADPU_SetOwner_vtbl+0x1a>
 8018600:	f240 1149 	movw	r1, #329	; 0x149
 8018604:	480a      	ldr	r0, [pc, #40]	; (8018630 <ADPU_SetOwner_vtbl+0x40>)
 8018606:	f7fc fe50 	bl	80152aa <assert_failed>
  assert_param(pOwner);
 801860a:	683b      	ldr	r3, [r7, #0]
 801860c:	2b00      	cmp	r3, #0
 801860e:	d104      	bne.n	801861a <ADPU_SetOwner_vtbl+0x2a>
 8018610:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8018614:	4806      	ldr	r0, [pc, #24]	; (8018630 <ADPU_SetOwner_vtbl+0x40>)
 8018616:	f7fc fe48 	bl	80152aa <assert_failed>
  ADPU* pObj = (ADPU*) ((uint32_t) _this - offsetof (ADPU , sensorListener));
 801861a:	687b      	ldr	r3, [r7, #4]
 801861c:	3b04      	subs	r3, #4
 801861e:	60fb      	str	r3, [r7, #12]
  
  pObj->pOwner = pOwner;
 8018620:	68fb      	ldr	r3, [r7, #12]
 8018622:	683a      	ldr	r2, [r7, #0]
 8018624:	609a      	str	r2, [r3, #8]
}
 8018626:	bf00      	nop
 8018628:	3710      	adds	r7, #16
 801862a:	46bd      	mov	sp, r7
 801862c:	bd80      	pop	{r7, pc}
 801862e:	bf00      	nop
 8018630:	08026f74 	.word	0x08026f74

08018634 <ADPU_GetOwner_vtbl>:

void *ADPU_GetOwner_vtbl(IEventListener *_this) 
{
 8018634:	b580      	push	{r7, lr}
 8018636:	b084      	sub	sp, #16
 8018638:	af00      	add	r7, sp, #0
 801863a:	6078      	str	r0, [r7, #4]
  assert_param(_this);
 801863c:	687b      	ldr	r3, [r7, #4]
 801863e:	2b00      	cmp	r3, #0
 8018640:	d104      	bne.n	801864c <ADPU_GetOwner_vtbl+0x18>
 8018642:	f44f 71a9 	mov.w	r1, #338	; 0x152
 8018646:	4806      	ldr	r0, [pc, #24]	; (8018660 <ADPU_GetOwner_vtbl+0x2c>)
 8018648:	f7fc fe2f 	bl	80152aa <assert_failed>
  ADPU* pObj = (ADPU*) ((uint32_t) _this - offsetof (ADPU , sensorListener));
 801864c:	687b      	ldr	r3, [r7, #4]
 801864e:	3b04      	subs	r3, #4
 8018650:	60fb      	str	r3, [r7, #12]
  
  return pObj->pOwner;
 8018652:	68fb      	ldr	r3, [r7, #12]
 8018654:	689b      	ldr	r3, [r3, #8]
}
 8018656:	4618      	mov	r0, r3
 8018658:	3710      	adds	r7, #16
 801865a:	46bd      	mov	sp, r7
 801865c:	bd80      	pop	{r7, pc}
 801865e:	bf00      	nop
 8018660:	08026f74 	.word	0x08026f74

08018664 <ADP_OnNewDataReady_vtbl>:


// ISensorEventListener virtual functions
// ***************************
sys_error_code_t ADP_OnNewDataReady_vtbl(IEventListener *_this, const SensorEvent *pxEvt)
{
 8018664:	b580      	push	{r7, lr}
 8018666:	b086      	sub	sp, #24
 8018668:	af00      	add	r7, sp, #0
 801866a:	6078      	str	r0, [r7, #4]
 801866c:	6039      	str	r1, [r7, #0]
  assert_param(_this != NULL);
 801866e:	687b      	ldr	r3, [r7, #4]
 8018670:	2b00      	cmp	r3, #0
 8018672:	d104      	bne.n	801867e <ADP_OnNewDataReady_vtbl+0x1a>
 8018674:	f240 115d 	movw	r1, #349	; 0x15d
 8018678:	4848      	ldr	r0, [pc, #288]	; (801879c <ADP_OnNewDataReady_vtbl+0x138>)
 801867a:	f7fc fe16 	bl	80152aa <assert_failed>
  assert_param(pxEvt != NULL);
 801867e:	683b      	ldr	r3, [r7, #0]
 8018680:	2b00      	cmp	r3, #0
 8018682:	d104      	bne.n	801868e <ADP_OnNewDataReady_vtbl+0x2a>
 8018684:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8018688:	4844      	ldr	r0, [pc, #272]	; (801879c <ADP_OnNewDataReady_vtbl+0x138>)
 801868a:	f7fc fe0e 	bl	80152aa <assert_failed>
  sys_error_code_t xRes = SYS_NO_ERROR_CODE;
 801868e:	2300      	movs	r3, #0
 8018690:	82fb      	strh	r3, [r7, #22]
  
  ADPU *pObj =  (ADPU*) IEventListenerGetOwner(_this);
 8018692:	6878      	ldr	r0, [r7, #4]
 8018694:	f7ff fc28 	bl	8017ee8 <IEventListenerGetOwner>
 8018698:	6138      	str	r0, [r7, #16]
  
  if(pObj->active)
 801869a:	693b      	ldr	r3, [r7, #16]
 801869c:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 80186a0:	2b00      	cmp	r3, #0
 80186a2:	d075      	beq.n	8018790 <ADP_OnNewDataReady_vtbl+0x12c>
  {
    SensorObs_t *sensor = GetSensor(pObj, pxEvt->nSensorID);
 80186a4:	683b      	ldr	r3, [r7, #0]
 80186a6:	8a1b      	ldrh	r3, [r3, #16]
 80186a8:	b2db      	uxtb	r3, r3
 80186aa:	4619      	mov	r1, r3
 80186ac:	6938      	ldr	r0, [r7, #16]
 80186ae:	f000 ff49 	bl	8019544 <GetSensor>
 80186b2:	60f8      	str	r0, [r7, #12]
    if(sensor != NULL)
 80186b4:	68fb      	ldr	r3, [r7, #12]
 80186b6:	2b00      	cmp	r3, #0
 80186b8:	d06a      	beq.n	8018790 <ADP_OnNewDataReady_vtbl+0x12c>
    {
      CBHandle_t *cb_sensor = &sensor->cb_handle;
 80186ba:	68fb      	ldr	r3, [r7, #12]
 80186bc:	60bb      	str	r3, [r7, #8]
      
      pObj->sourceStream.mode = ((AI_SP_Stream_t *)pxEvt->stream)->mode;
 80186be:	683b      	ldr	r3, [r7, #0]
 80186c0:	685b      	ldr	r3, [r3, #4]
 80186c2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80186c4:	693b      	ldr	r3, [r7, #16]
 80186c6:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
      pObj->sourceStream.packet.payload_fmt = pxEvt->stream->payload_fmt;
 80186ca:	683b      	ldr	r3, [r7, #0]
 80186cc:	685b      	ldr	r3, [r3, #4]
 80186ce:	689a      	ldr	r2, [r3, #8]
 80186d0:	693b      	ldr	r3, [r7, #16]
 80186d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      pObj->sourceStream.packet.payload = pxEvt->stream->payload;
 80186d6:	683b      	ldr	r3, [r7, #0]
 80186d8:	685b      	ldr	r3, [r3, #4]
 80186da:	685a      	ldr	r2, [r3, #4]
 80186dc:	693b      	ldr	r3, [r7, #16]
 80186de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      pObj->sourceStream.packet.shape.shapes[AI_LOGGING_SHAPES_WIDTH] = pxEvt->stream->shape.shapes[AI_LOGGING_SHAPES_WIDTH];
 80186e2:	683b      	ldr	r3, [r7, #0]
 80186e4:	685b      	ldr	r3, [r3, #4]
 80186e6:	8a5a      	ldrh	r2, [r3, #18]
 80186e8:	693b      	ldr	r3, [r7, #16]
 80186ea:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92
      pObj->sourceStream.packet.shape.shapes[AI_LOGGING_SHAPES_HEIGHT] = pxEvt->stream->shape.shapes[AI_LOGGING_SHAPES_HEIGHT];
 80186ee:	683b      	ldr	r3, [r7, #0]
 80186f0:	685b      	ldr	r3, [r3, #4]
 80186f2:	8a9a      	ldrh	r2, [r3, #20]
 80186f4:	693b      	ldr	r3, [r7, #16]
 80186f6:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
      pObj->sourceStream.packet.shape.n_shape =  pxEvt->stream->shape.n_shape;
 80186fa:	683b      	ldr	r3, [r7, #0]
 80186fc:	685b      	ldr	r3, [r3, #4]
 80186fe:	8a1a      	ldrh	r2, [r3, #16]
 8018700:	693b      	ldr	r3, [r7, #16]
 8018702:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
      pObj->id_sensor_ready = pxEvt->nSensorID;
 8018706:	683b      	ldr	r3, [r7, #0]
 8018708:	8a1b      	ldrh	r3, [r3, #16]
 801870a:	b2da      	uxtb	r2, r3
 801870c:	693b      	ldr	r3, [r7, #16]
 801870e:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
      
      if(cb_sensor->pCircularBuffer != NULL)
 8018712:	68bb      	ldr	r3, [r7, #8]
 8018714:	681b      	ldr	r3, [r3, #0]
 8018716:	2b00      	cmp	r3, #0
 8018718:	d035      	beq.n	8018786 <ADP_OnNewDataReady_vtbl+0x122>
      {
        if(pObj->sourceStream.packet.payload_fmt == AI_SP_FMT_INT16_RESET() && pObj->dpuWorkingStream.packet.payload_fmt == AI_SP_FMT_FLOAT32_RESET())
 801871a:	693b      	ldr	r3, [r7, #16]
 801871c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8018720:	4a1f      	ldr	r2, [pc, #124]	; (80187a0 <ADP_OnNewDataReady_vtbl+0x13c>)
 8018722:	4293      	cmp	r3, r2
 8018724:	d10f      	bne.n	8018746 <ADP_OnNewDataReady_vtbl+0xe2>
 8018726:	693b      	ldr	r3, [r7, #16]
 8018728:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 801872c:	4a1d      	ldr	r2, [pc, #116]	; (80187a4 <ADP_OnNewDataReady_vtbl+0x140>)
 801872e:	4293      	cmp	r3, r2
 8018730:	d109      	bne.n	8018746 <ADP_OnNewDataReady_vtbl+0xe2>
        {
          xRes = CB_storing_int16_toFloat_helper(pObj, cb_sensor, (AI_SP_Stream_t *)pxEvt->stream);
 8018732:	683b      	ldr	r3, [r7, #0]
 8018734:	685b      	ldr	r3, [r3, #4]
 8018736:	461a      	mov	r2, r3
 8018738:	68b9      	ldr	r1, [r7, #8]
 801873a:	6938      	ldr	r0, [r7, #16]
 801873c:	f000 fb5e 	bl	8018dfc <CB_storing_int16_toFloat_helper>
 8018740:	4603      	mov	r3, r0
 8018742:	82fb      	strh	r3, [r7, #22]
 8018744:	e024      	b.n	8018790 <ADP_OnNewDataReady_vtbl+0x12c>
        }
        else if(pObj->sourceStream.packet.payload_fmt ==  AI_SP_FMT_FLOAT32_RESET() && pObj->dpuWorkingStream.packet.payload_fmt == AI_SP_FMT_FLOAT32_RESET())
 8018746:	693b      	ldr	r3, [r7, #16]
 8018748:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801874c:	4a15      	ldr	r2, [pc, #84]	; (80187a4 <ADP_OnNewDataReady_vtbl+0x140>)
 801874e:	4293      	cmp	r3, r2
 8018750:	d10f      	bne.n	8018772 <ADP_OnNewDataReady_vtbl+0x10e>
 8018752:	693b      	ldr	r3, [r7, #16]
 8018754:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8018758:	4a12      	ldr	r2, [pc, #72]	; (80187a4 <ADP_OnNewDataReady_vtbl+0x140>)
 801875a:	4293      	cmp	r3, r2
 801875c:	d109      	bne.n	8018772 <ADP_OnNewDataReady_vtbl+0x10e>
        {
          xRes = CB_storing_float_toFloat_helper(pObj, cb_sensor, (AI_SP_Stream_t *)pxEvt->stream);
 801875e:	683b      	ldr	r3, [r7, #0]
 8018760:	685b      	ldr	r3, [r3, #4]
 8018762:	461a      	mov	r2, r3
 8018764:	68b9      	ldr	r1, [r7, #8]
 8018766:	6938      	ldr	r0, [r7, #16]
 8018768:	f000 fd28 	bl	80191bc <CB_storing_float_toFloat_helper>
 801876c:	4603      	mov	r3, r0
 801876e:	82fb      	strh	r3, [r7, #22]
 8018770:	e00e      	b.n	8018790 <ADP_OnNewDataReady_vtbl+0x12c>
        }
        else
        {
          xRes = CB_storing_int16_toInt16_helper(pObj, cb_sensor, (AI_SP_Stream_t *)pxEvt->stream);
 8018772:	683b      	ldr	r3, [r7, #0]
 8018774:	685b      	ldr	r3, [r3, #4]
 8018776:	461a      	mov	r2, r3
 8018778:	68b9      	ldr	r1, [r7, #8]
 801877a:	6938      	ldr	r0, [r7, #16]
 801877c:	f000 f946 	bl	8018a0c <CB_storing_int16_toInt16_helper>
 8018780:	4603      	mov	r3, r0
 8018782:	82fb      	strh	r3, [r7, #22]
 8018784:	e004      	b.n	8018790 <ADP_OnNewDataReady_vtbl+0x12c>
        }
      }
      else
      {
        xRes = IDPU_Process((IDPU *)pObj);
 8018786:	6938      	ldr	r0, [r7, #16]
 8018788:	f001 fc23 	bl	8019fd2 <IDPU_Process>
 801878c:	4603      	mov	r3, r0
 801878e:	82fb      	strh	r3, [r7, #22]
      }
    }
  }
  return xRes;
 8018790:	8afb      	ldrh	r3, [r7, #22]
}
 8018792:	4618      	mov	r0, r3
 8018794:	3718      	adds	r7, #24
 8018796:	46bd      	mov	sp, r7
 8018798:	bd80      	pop	{r7, pc}
 801879a:	bf00      	nop
 801879c:	08026f74 	.word	0x08026f74
 80187a0:	00840800 	.word	0x00840800
 80187a4:	00821000 	.word	0x00821000

080187a8 <ADPU_GetEventListenerIF>:


// Public functions definition
// ***************************
IEventListener *ADPU_GetEventListenerIF(ADPU *_this)
{
 80187a8:	b580      	push	{r7, lr}
 80187aa:	b082      	sub	sp, #8
 80187ac:	af00      	add	r7, sp, #0
 80187ae:	6078      	str	r0, [r7, #4]
  assert_param(_this);
 80187b0:	687b      	ldr	r3, [r7, #4]
 80187b2:	2b00      	cmp	r3, #0
 80187b4:	d104      	bne.n	80187c0 <ADPU_GetEventListenerIF+0x18>
 80187b6:	f240 118f 	movw	r1, #399	; 0x18f
 80187ba:	4804      	ldr	r0, [pc, #16]	; (80187cc <ADPU_GetEventListenerIF+0x24>)
 80187bc:	f7fc fd75 	bl	80152aa <assert_failed>
  return (IEventListener*) &_this->sensorListener;
 80187c0:	687b      	ldr	r3, [r7, #4]
 80187c2:	3304      	adds	r3, #4
}
 80187c4:	4618      	mov	r0, r3
 80187c6:	3708      	adds	r7, #8
 80187c8:	46bd      	mov	sp, r7
 80187ca:	bd80      	pop	{r7, pc}
 80187cc:	08026f74 	.word	0x08026f74

080187d0 <ADPU_GetEventSrcIF>:

IEventSrc *ADPU_GetEventSrcIF(ADPU * _this)
{
 80187d0:	b580      	push	{r7, lr}
 80187d2:	b082      	sub	sp, #8
 80187d4:	af00      	add	r7, sp, #0
 80187d6:	6078      	str	r0, [r7, #4]
  assert_param(_this != NULL);
 80187d8:	687b      	ldr	r3, [r7, #4]
 80187da:	2b00      	cmp	r3, #0
 80187dc:	d104      	bne.n	80187e8 <ADPU_GetEventSrcIF+0x18>
 80187de:	f240 1195 	movw	r1, #405	; 0x195
 80187e2:	4804      	ldr	r0, [pc, #16]	; (80187f4 <ADPU_GetEventSrcIF+0x24>)
 80187e4:	f7fc fd61 	bl	80152aa <assert_failed>
  return (IEventSrc*) _this->pProcessEventSrc;
 80187e8:	687b      	ldr	r3, [r7, #4]
 80187ea:	68db      	ldr	r3, [r3, #12]
}
 80187ec:	4618      	mov	r0, r3
 80187ee:	3708      	adds	r7, #8
 80187f0:	46bd      	mov	sp, r7
 80187f2:	bd80      	pop	{r7, pc}
 80187f4:	08026f74 	.word	0x08026f74

080187f8 <ADPU_SetTag>:

sys_error_code_t ADPU_SetTag(ADPU *_this, uint32_t tag) 
{
 80187f8:	b580      	push	{r7, lr}
 80187fa:	b082      	sub	sp, #8
 80187fc:	af00      	add	r7, sp, #0
 80187fe:	6078      	str	r0, [r7, #4]
 8018800:	6039      	str	r1, [r7, #0]
  assert_param(_this != NULL);
 8018802:	687b      	ldr	r3, [r7, #4]
 8018804:	2b00      	cmp	r3, #0
 8018806:	d104      	bne.n	8018812 <ADPU_SetTag+0x1a>
 8018808:	f240 119b 	movw	r1, #411	; 0x19b
 801880c:	4806      	ldr	r0, [pc, #24]	; (8018828 <ADPU_SetTag+0x30>)
 801880e:	f7fc fd4c 	bl	80152aa <assert_failed>
  return ProcessEventSrcSetTag((ProcessEventSrc*)(_this->pProcessEventSrc), tag);
 8018812:	687b      	ldr	r3, [r7, #4]
 8018814:	68db      	ldr	r3, [r3, #12]
 8018816:	6839      	ldr	r1, [r7, #0]
 8018818:	4618      	mov	r0, r3
 801881a:	f001 fc17 	bl	801a04c <ProcessEventSrcSetTag>
 801881e:	4603      	mov	r3, r0
}
 8018820:	4618      	mov	r0, r3
 8018822:	3708      	adds	r7, #8
 8018824:	46bd      	mov	sp, r7
 8018826:	bd80      	pop	{r7, pc}
 8018828:	08026f74 	.word	0x08026f74

0801882c <ADPU_GetTag>:

uint32_t ADPU_GetTag(ADPU *_this) 
{
 801882c:	b580      	push	{r7, lr}
 801882e:	b082      	sub	sp, #8
 8018830:	af00      	add	r7, sp, #0
 8018832:	6078      	str	r0, [r7, #4]
  assert_param(_this != NULL);
 8018834:	687b      	ldr	r3, [r7, #4]
 8018836:	2b00      	cmp	r3, #0
 8018838:	d104      	bne.n	8018844 <ADPU_GetTag+0x18>
 801883a:	f240 11a1 	movw	r1, #417	; 0x1a1
 801883e:	4806      	ldr	r0, [pc, #24]	; (8018858 <ADPU_GetTag+0x2c>)
 8018840:	f7fc fd33 	bl	80152aa <assert_failed>
  return ProcessEventSrcGetTag((ProcessEventSrc*)(_this->pProcessEventSrc));
 8018844:	687b      	ldr	r3, [r7, #4]
 8018846:	68db      	ldr	r3, [r3, #12]
 8018848:	4618      	mov	r0, r3
 801884a:	f001 fc17 	bl	801a07c <ProcessEventSrcGetTag>
 801884e:	4603      	mov	r3, r0
}
 8018850:	4618      	mov	r0, r3
 8018852:	3708      	adds	r7, #8
 8018854:	46bd      	mov	sp, r7
 8018856:	bd80      	pop	{r7, pc}
 8018858:	08026f74 	.word	0x08026f74

0801885c <ADPU_Reset>:

sys_error_code_t ADPU_Reset(ADPU *_this)
{
 801885c:	b5b0      	push	{r4, r5, r7, lr}
 801885e:	b086      	sub	sp, #24
 8018860:	af00      	add	r7, sp, #0
 8018862:	6078      	str	r0, [r7, #4]
  assert_param(_this != NULL);
 8018864:	687b      	ldr	r3, [r7, #4]
 8018866:	2b00      	cmp	r3, #0
 8018868:	d104      	bne.n	8018874 <ADPU_Reset+0x18>
 801886a:	f240 11a7 	movw	r1, #423	; 0x1a7
 801886e:	484c      	ldr	r0, [pc, #304]	; (80189a0 <ADPU_Reset+0x144>)
 8018870:	f7fc fd1b 	bl	80152aa <assert_failed>
  sys_error_code_t xRes = SYS_NO_ERROR_CODE;
 8018874:	2300      	movs	r3, #0
 8018876:	827b      	strh	r3, [r7, #18]
  ADPU *pObj = (ADPU*)_this;
 8018878:	687b      	ldr	r3, [r7, #4]
 801887a:	60fb      	str	r3, [r7, #12]
  
  for(int i=0; i < ADPU_CFG_MAX_SENSOR; i++)
 801887c:	2300      	movs	r3, #0
 801887e:	617b      	str	r3, [r7, #20]
 8018880:	e05f      	b.n	8018942 <ADPU_Reset+0xe6>
  {
    if(pObj->sensors[i].sensorIF != NULL)
 8018882:	68f9      	ldr	r1, [r7, #12]
 8018884:	697a      	ldr	r2, [r7, #20]
 8018886:	4613      	mov	r3, r2
 8018888:	005b      	lsls	r3, r3, #1
 801888a:	4413      	add	r3, r2
 801888c:	00db      	lsls	r3, r3, #3
 801888e:	440b      	add	r3, r1
 8018890:	3320      	adds	r3, #32
 8018892:	681b      	ldr	r3, [r3, #0]
 8018894:	2b00      	cmp	r3, #0
 8018896:	d051      	beq.n	801893c <ADPU_Reset+0xe0>
    {
      if(pObj->sensors[i].cb_handle.pCircularBuffer != NULL)
 8018898:	68f9      	ldr	r1, [r7, #12]
 801889a:	697a      	ldr	r2, [r7, #20]
 801889c:	4613      	mov	r3, r2
 801889e:	005b      	lsls	r3, r3, #1
 80188a0:	4413      	add	r3, r2
 80188a2:	00db      	lsls	r3, r3, #3
 80188a4:	440b      	add	r3, r1
 80188a6:	3310      	adds	r3, #16
 80188a8:	681b      	ldr	r3, [r3, #0]
 80188aa:	2b00      	cmp	r3, #0
 80188ac:	d046      	beq.n	801893c <ADPU_Reset+0xe0>
      {
        CB_Init(pObj->sensors[i].cb_handle.pCircularBuffer, CB_GetItemsBuffer(pObj->sensors[i].cb_handle.pCircularBuffer), CB_GetItemSize(pObj->sensors[i].cb_handle.pCircularBuffer));
 80188ae:	68f9      	ldr	r1, [r7, #12]
 80188b0:	697a      	ldr	r2, [r7, #20]
 80188b2:	4613      	mov	r3, r2
 80188b4:	005b      	lsls	r3, r3, #1
 80188b6:	4413      	add	r3, r2
 80188b8:	00db      	lsls	r3, r3, #3
 80188ba:	440b      	add	r3, r1
 80188bc:	3310      	adds	r3, #16
 80188be:	681c      	ldr	r4, [r3, #0]
 80188c0:	68f9      	ldr	r1, [r7, #12]
 80188c2:	697a      	ldr	r2, [r7, #20]
 80188c4:	4613      	mov	r3, r2
 80188c6:	005b      	lsls	r3, r3, #1
 80188c8:	4413      	add	r3, r2
 80188ca:	00db      	lsls	r3, r3, #3
 80188cc:	440b      	add	r3, r1
 80188ce:	3310      	adds	r3, #16
 80188d0:	681b      	ldr	r3, [r3, #0]
 80188d2:	4618      	mov	r0, r3
 80188d4:	f001 fb02 	bl	8019edc <CB_GetItemsBuffer>
 80188d8:	4605      	mov	r5, r0
 80188da:	68f9      	ldr	r1, [r7, #12]
 80188dc:	697a      	ldr	r2, [r7, #20]
 80188de:	4613      	mov	r3, r2
 80188e0:	005b      	lsls	r3, r3, #1
 80188e2:	4413      	add	r3, r2
 80188e4:	00db      	lsls	r3, r3, #3
 80188e6:	440b      	add	r3, r1
 80188e8:	3310      	adds	r3, #16
 80188ea:	681b      	ldr	r3, [r3, #0]
 80188ec:	4618      	mov	r0, r3
 80188ee:	f001 f9bf 	bl	8019c70 <CB_GetItemSize>
 80188f2:	4603      	mov	r3, r0
 80188f4:	461a      	mov	r2, r3
 80188f6:	4629      	mov	r1, r5
 80188f8:	4620      	mov	r0, r4
 80188fa:	f001 f967 	bl	8019bcc <CB_Init>
        pObj->sensors[i].cb_handle.DataIdx = 0;
 80188fe:	68f9      	ldr	r1, [r7, #12]
 8018900:	697b      	ldr	r3, [r7, #20]
 8018902:	1c5a      	adds	r2, r3, #1
 8018904:	4613      	mov	r3, r2
 8018906:	005b      	lsls	r3, r3, #1
 8018908:	4413      	add	r3, r2
 801890a:	00db      	lsls	r3, r3, #3
 801890c:	440b      	add	r3, r1
 801890e:	3304      	adds	r3, #4
 8018910:	2200      	movs	r2, #0
 8018912:	801a      	strh	r2, [r3, #0]
        pObj->sensors[i].cb_handle.pConsumerDataBuff = NULL;
 8018914:	68f9      	ldr	r1, [r7, #12]
 8018916:	697b      	ldr	r3, [r7, #20]
 8018918:	1c5a      	adds	r2, r3, #1
 801891a:	4613      	mov	r3, r2
 801891c:	005b      	lsls	r3, r3, #1
 801891e:	4413      	add	r3, r2
 8018920:	00db      	lsls	r3, r3, #3
 8018922:	440b      	add	r3, r1
 8018924:	2200      	movs	r2, #0
 8018926:	601a      	str	r2, [r3, #0]
        pObj->sensors[i].cb_handle.pProducerDataBuff = NULL;
 8018928:	68f9      	ldr	r1, [r7, #12]
 801892a:	697a      	ldr	r2, [r7, #20]
 801892c:	4613      	mov	r3, r2
 801892e:	005b      	lsls	r3, r3, #1
 8018930:	4413      	add	r3, r2
 8018932:	00db      	lsls	r3, r3, #3
 8018934:	440b      	add	r3, r1
 8018936:	3314      	adds	r3, #20
 8018938:	2200      	movs	r2, #0
 801893a:	601a      	str	r2, [r3, #0]
  for(int i=0; i < ADPU_CFG_MAX_SENSOR; i++)
 801893c:	697b      	ldr	r3, [r7, #20]
 801893e:	3301      	adds	r3, #1
 8018940:	617b      	str	r3, [r7, #20]
 8018942:	697b      	ldr	r3, [r7, #20]
 8018944:	2b02      	cmp	r3, #2
 8018946:	dd9c      	ble.n	8018882 <ADPU_Reset+0x26>
      }
    }
  }
  
  if(pObj->isADPUattached)
 8018948:	68fb      	ldr	r3, [r7, #12]
 801894a:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 801894e:	2b00      	cmp	r3, #0
 8018950:	d020      	beq.n	8018994 <ADPU_Reset+0x138>
  {
    if(pObj->AttachedAdpu.cb_handle.pCircularBuffer != NULL)
 8018952:	68fb      	ldr	r3, [r7, #12]
 8018954:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8018956:	2b00      	cmp	r3, #0
 8018958:	d01c      	beq.n	8018994 <ADPU_Reset+0x138>
    {
      CB_Init(pObj->AttachedAdpu.cb_handle.pCircularBuffer, CB_GetItemsBuffer(pObj->AttachedAdpu.cb_handle.pCircularBuffer), CB_GetItemSize(pObj->AttachedAdpu.cb_handle.pCircularBuffer));
 801895a:	68fb      	ldr	r3, [r7, #12]
 801895c:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 801895e:	68fb      	ldr	r3, [r7, #12]
 8018960:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8018962:	4618      	mov	r0, r3
 8018964:	f001 faba 	bl	8019edc <CB_GetItemsBuffer>
 8018968:	4605      	mov	r5, r0
 801896a:	68fb      	ldr	r3, [r7, #12]
 801896c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801896e:	4618      	mov	r0, r3
 8018970:	f001 f97e 	bl	8019c70 <CB_GetItemSize>
 8018974:	4603      	mov	r3, r0
 8018976:	461a      	mov	r2, r3
 8018978:	4629      	mov	r1, r5
 801897a:	4620      	mov	r0, r4
 801897c:	f001 f926 	bl	8019bcc <CB_Init>
      pObj->AttachedAdpu.cb_handle.DataIdx = 0;
 8018980:	68fb      	ldr	r3, [r7, #12]
 8018982:	2200      	movs	r2, #0
 8018984:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
      pObj->AttachedAdpu.cb_handle.pConsumerDataBuff = NULL;
 8018988:	68fb      	ldr	r3, [r7, #12]
 801898a:	2200      	movs	r2, #0
 801898c:	669a      	str	r2, [r3, #104]	; 0x68
      pObj->AttachedAdpu.cb_handle.pProducerDataBuff = NULL;
 801898e:	68fb      	ldr	r3, [r7, #12]
 8018990:	2200      	movs	r2, #0
 8018992:	665a      	str	r2, [r3, #100]	; 0x64
    }
  }
  
  return xRes;
 8018994:	8a7b      	ldrh	r3, [r7, #18]
}
 8018996:	4618      	mov	r0, r3
 8018998:	3718      	adds	r7, #24
 801899a:	46bd      	mov	sp, r7
 801899c:	bdb0      	pop	{r4, r5, r7, pc}
 801899e:	bf00      	nop
 80189a0:	08026f74 	.word	0x08026f74

080189a4 <ADPU_Resume>:

sys_error_code_t ADPU_Resume(ADPU *_this)
{
 80189a4:	b580      	push	{r7, lr}
 80189a6:	b084      	sub	sp, #16
 80189a8:	af00      	add	r7, sp, #0
 80189aa:	6078      	str	r0, [r7, #4]
  assert_param(_this != NULL);
 80189ac:	687b      	ldr	r3, [r7, #4]
 80189ae:	2b00      	cmp	r3, #0
 80189b0:	d104      	bne.n	80189bc <ADPU_Resume+0x18>
 80189b2:	f240 11c9 	movw	r1, #457	; 0x1c9
 80189b6:	4807      	ldr	r0, [pc, #28]	; (80189d4 <ADPU_Resume+0x30>)
 80189b8:	f7fc fc77 	bl	80152aa <assert_failed>
  sys_error_code_t xRes = SYS_NO_ERROR_CODE;
 80189bc:	2300      	movs	r3, #0
 80189be:	81fb      	strh	r3, [r7, #14]
  
  _this->active = true;
 80189c0:	687b      	ldr	r3, [r7, #4]
 80189c2:	2201      	movs	r2, #1
 80189c4:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
  return xRes;
 80189c8:	89fb      	ldrh	r3, [r7, #14]
}
 80189ca:	4618      	mov	r0, r3
 80189cc:	3710      	adds	r7, #16
 80189ce:	46bd      	mov	sp, r7
 80189d0:	bd80      	pop	{r7, pc}
 80189d2:	bf00      	nop
 80189d4:	08026f74 	.word	0x08026f74

080189d8 <ADPU_Suspend>:

sys_error_code_t ADPU_Suspend(ADPU *_this)
{
 80189d8:	b580      	push	{r7, lr}
 80189da:	b084      	sub	sp, #16
 80189dc:	af00      	add	r7, sp, #0
 80189de:	6078      	str	r0, [r7, #4]
  assert_param(_this != NULL);
 80189e0:	687b      	ldr	r3, [r7, #4]
 80189e2:	2b00      	cmp	r3, #0
 80189e4:	d104      	bne.n	80189f0 <ADPU_Suspend+0x18>
 80189e6:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
 80189ea:	4807      	ldr	r0, [pc, #28]	; (8018a08 <ADPU_Suspend+0x30>)
 80189ec:	f7fc fc5d 	bl	80152aa <assert_failed>
  sys_error_code_t xRes = SYS_NO_ERROR_CODE;
 80189f0:	2300      	movs	r3, #0
 80189f2:	81fb      	strh	r3, [r7, #14]
  
  _this->active = false;
 80189f4:	687b      	ldr	r3, [r7, #4]
 80189f6:	2200      	movs	r2, #0
 80189f8:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
  return xRes;
 80189fc:	89fb      	ldrh	r3, [r7, #14]
}
 80189fe:	4618      	mov	r0, r3
 8018a00:	3710      	adds	r7, #16
 8018a02:	46bd      	mov	sp, r7
 8018a04:	bd80      	pop	{r7, pc}
 8018a06:	bf00      	nop
 8018a08:	08026f74 	.word	0x08026f74

08018a0c <CB_storing_int16_toInt16_helper>:

// Private functions definition
// ***************************

static sys_error_code_t CB_storing_int16_toInt16_helper(ADPU * _this, CBHandle_t *p_workingCB, AI_SP_Stream_t *p_stream )
{
 8018a0c:	b5b0      	push	{r4, r5, r7, lr}
 8018a0e:	b0a4      	sub	sp, #144	; 0x90
 8018a10:	af00      	add	r7, sp, #0
 8018a12:	60f8      	str	r0, [r7, #12]
 8018a14:	60b9      	str	r1, [r7, #8]
 8018a16:	607a      	str	r2, [r7, #4]
  assert_param(_this != NULL);
 8018a18:	68fb      	ldr	r3, [r7, #12]
 8018a1a:	2b00      	cmp	r3, #0
 8018a1c:	d104      	bne.n	8018a28 <CB_storing_int16_toInt16_helper+0x1c>
 8018a1e:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8018a22:	48b2      	ldr	r0, [pc, #712]	; (8018cec <CB_storing_int16_toInt16_helper+0x2e0>)
 8018a24:	f7fc fc41 	bl	80152aa <assert_failed>
  assert_param(p_workingCB != NULL);
 8018a28:	68bb      	ldr	r3, [r7, #8]
 8018a2a:	2b00      	cmp	r3, #0
 8018a2c:	d104      	bne.n	8018a38 <CB_storing_int16_toInt16_helper+0x2c>
 8018a2e:	f240 11df 	movw	r1, #479	; 0x1df
 8018a32:	48ae      	ldr	r0, [pc, #696]	; (8018cec <CB_storing_int16_toInt16_helper+0x2e0>)
 8018a34:	f7fc fc39 	bl	80152aa <assert_failed>
  assert_param(p_stream != NULL);
 8018a38:	687b      	ldr	r3, [r7, #4]
 8018a3a:	2b00      	cmp	r3, #0
 8018a3c:	d104      	bne.n	8018a48 <CB_storing_int16_toInt16_helper+0x3c>
 8018a3e:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8018a42:	48aa      	ldr	r0, [pc, #680]	; (8018cec <CB_storing_int16_toInt16_helper+0x2e0>)
 8018a44:	f7fc fc31 	bl	80152aa <assert_failed>
  
  sys_error_code_t xRes         = SYS_NO_ERROR_CODE;
 8018a48:	2300      	movs	r3, #0
 8018a4a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
  ai_logging_packet_t packetIn  = p_stream->packet;
 8018a4e:	687b      	ldr	r3, [r7, #4]
 8018a50:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8018a54:	461d      	mov	r5, r3
 8018a56:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018a58:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018a5a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018a5c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018a5e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8018a62:	e884 0003 	stmia.w	r4, {r0, r1}
  ai_logging_packet_t packetOut = _this->dpuWorkingStream.packet;
 8018a66:	68fb      	ldr	r3, [r7, #12]
 8018a68:	f107 0414 	add.w	r4, r7, #20
 8018a6c:	f103 05ac 	add.w	r5, r3, #172	; 0xac
 8018a70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018a72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018a74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018a76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018a78:	e895 0003 	ldmia.w	r5, {r0, r1}
 8018a7c:	e884 0003 	stmia.w	r4, {r0, r1}
  uint16_t width_in             = 0;
 8018a80:	2300      	movs	r3, #0
 8018a82:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
  uint16_t height_in            = 0;
 8018a86:	2300      	movs	r3, #0
 8018a88:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
  uint16_t width_out            = 0;
 8018a8c:	2300      	movs	r3, #0
 8018a8e:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
  uint16_t height_out           = 0;
 8018a92:	2300      	movs	r3, #0
 8018a94:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
  boolean_t auto_transpose      = false;
 8018a98:	2300      	movs	r3, #0
 8018a9a:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
  
  uint16_t nbXfer=0, CB_ItemSize=0;
 8018a9e:	2300      	movs	r3, #0
 8018aa0:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
 8018aa4:	2300      	movs	r3, #0
 8018aa6:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
  int16_t *p_inData=NULL;
 8018aaa:	2300      	movs	r3, #0
 8018aac:	67fb      	str	r3, [r7, #124]	; 0x7c
  int16_t *p_outData=NULL;
 8018aae:	2300      	movs	r3, #0
 8018ab0:	67bb      	str	r3, [r7, #120]	; 0x78
  (packetOut.payload_type == AI_FMT &&
  packetOut.payload_fmt == AI_SP_FMT_FLOAT32_RESET() ));
  temporary code to fix :
  */
  
  assert_param(packetIn.payload_fmt == AI_SP_FMT_INT16_RESET());
 8018ab2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018ab4:	4a8e      	ldr	r2, [pc, #568]	; (8018cf0 <CB_storing_int16_toInt16_helper+0x2e4>)
 8018ab6:	4293      	cmp	r3, r2
 8018ab8:	d004      	beq.n	8018ac4 <CB_storing_int16_toInt16_helper+0xb8>
 8018aba:	f44f 71fd 	mov.w	r1, #506	; 0x1fa
 8018abe:	488b      	ldr	r0, [pc, #556]	; (8018cec <CB_storing_int16_toInt16_helper+0x2e0>)
 8018ac0:	f7fc fbf3 	bl	80152aa <assert_failed>
  assert_param(packetOut.payload_fmt == AI_SP_FMT_INT16_RESET());
 8018ac4:	69fb      	ldr	r3, [r7, #28]
 8018ac6:	4a8a      	ldr	r2, [pc, #552]	; (8018cf0 <CB_storing_int16_toInt16_helper+0x2e4>)
 8018ac8:	4293      	cmp	r3, r2
 8018aca:	d004      	beq.n	8018ad6 <CB_storing_int16_toInt16_helper+0xca>
 8018acc:	f240 11fb 	movw	r1, #507	; 0x1fb
 8018ad0:	4886      	ldr	r0, [pc, #536]	; (8018cec <CB_storing_int16_toInt16_helper+0x2e0>)
 8018ad2:	f7fc fbea 	bl	80152aa <assert_failed>
  
  /* different dimension shapes not implemented for now */
  if  (packetIn.shape.n_shape != packetOut.shape.n_shape )
 8018ad6:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8018ada:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018adc:	429a      	cmp	r2, r3
 8018ade:	d002      	beq.n	8018ae6 <CB_storing_int16_toInt16_helper+0xda>
  {
    xRes = SYS_NOT_IMPLEMENTED_ERROR_CODE ;
 8018ae0:	2307      	movs	r3, #7
 8018ae2:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
  }
  switch (packetIn.shape.n_shape)
 8018ae6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8018aea:	2b02      	cmp	r3, #2
 8018aec:	d012      	beq.n	8018b14 <CB_storing_int16_toInt16_helper+0x108>
 8018aee:	2b02      	cmp	r3, #2
 8018af0:	dc48      	bgt.n	8018b84 <CB_storing_int16_toInt16_helper+0x178>
 8018af2:	2b00      	cmp	r3, #0
 8018af4:	d002      	beq.n	8018afc <CB_storing_int16_toInt16_helper+0xf0>
 8018af6:	2b01      	cmp	r3, #1
 8018af8:	d004      	beq.n	8018b04 <CB_storing_int16_toInt16_helper+0xf8>
 8018afa:	e043      	b.n	8018b84 <CB_storing_int16_toInt16_helper+0x178>
  {
  case 0:
    xRes  = SYS_NOT_IMPLEMENTED_ERROR_CODE ;
 8018afc:	2307      	movs	r3, #7
 8018afe:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    break;
 8018b02:	e042      	b.n	8018b8a <CB_storing_int16_toInt16_helper+0x17e>
  case 1:
    width_in  = packetIn.shape.shapes[AI_LOGGING_SHAPES_WIDTH];
 8018b04:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8018b08:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
    height_in = 1 ;
 8018b0c:	2301      	movs	r3, #1
 8018b0e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    break;
 8018b12:	e03a      	b.n	8018b8a <CB_storing_int16_toInt16_helper+0x17e>
  case 2:
    width_in   = packetIn.shape.shapes[AI_LOGGING_SHAPES_WIDTH];
 8018b14:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8018b18:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
    height_in  = packetIn.shape.shapes[AI_LOGGING_SHAPES_HEIGHT];
 8018b1c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8018b20:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    width_out  = packetOut.shape.shapes[AI_LOGGING_SHAPES_WIDTH];
 8018b24:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8018b26:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
    height_out = packetOut.shape.shapes[AI_LOGGING_SHAPES_HEIGHT];
 8018b2a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8018b2c:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    auto_transpose  = (width_in == height_out) || (height_in == width_out);
 8018b30:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8018b34:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8018b38:	429a      	cmp	r2, r3
 8018b3a:	d005      	beq.n	8018b48 <CB_storing_int16_toInt16_helper+0x13c>
 8018b3c:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8018b40:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8018b44:	429a      	cmp	r2, r3
 8018b46:	d101      	bne.n	8018b4c <CB_storing_int16_toInt16_helper+0x140>
 8018b48:	2301      	movs	r3, #1
 8018b4a:	e000      	b.n	8018b4e <CB_storing_int16_toInt16_helper+0x142>
 8018b4c:	2300      	movs	r3, #0
 8018b4e:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
 8018b52:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 8018b56:	f003 0301 	and.w	r3, r3, #1
 8018b5a:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
    auto_transpose &= (width_in != height_in) ;
 8018b5e:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 8018b62:	f8b7 108c 	ldrh.w	r1, [r7, #140]	; 0x8c
 8018b66:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8018b6a:	4291      	cmp	r1, r2
 8018b6c:	bf14      	ite	ne
 8018b6e:	2201      	movne	r2, #1
 8018b70:	2200      	moveq	r2, #0
 8018b72:	b2d2      	uxtb	r2, r2
 8018b74:	4013      	ands	r3, r2
 8018b76:	2b00      	cmp	r3, #0
 8018b78:	bf14      	ite	ne
 8018b7a:	2301      	movne	r3, #1
 8018b7c:	2300      	moveq	r3, #0
 8018b7e:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
    
    break;
 8018b82:	e002      	b.n	8018b8a <CB_storing_int16_toInt16_helper+0x17e>
  default:
    xRes = SYS_NOT_IMPLEMENTED_ERROR_CODE ;
 8018b84:	2307      	movs	r3, #7
 8018b86:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
  /*
  todo fix the payload size settings first
  assert_param(p_stream->packet.payload_size == nbXfer * sizeof(int16));
  */

  if (xRes != SYS_NO_ERROR_CODE)
 8018b8a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8018b8e:	2b00      	cmp	r3, #0
 8018b90:	d002      	beq.n	8018b98 <CB_storing_int16_toInt16_helper+0x18c>
  {
    return xRes;
 8018b92:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8018b96:	e12c      	b.n	8018df2 <CB_storing_int16_toInt16_helper+0x3e6>
  }
  
  if (p_workingCB->pProducerDataBuff == NULL)
 8018b98:	68bb      	ldr	r3, [r7, #8]
 8018b9a:	685b      	ldr	r3, [r3, #4]
 8018b9c:	2b00      	cmp	r3, #0
 8018b9e:	d10a      	bne.n	8018bb6 <CB_storing_int16_toInt16_helper+0x1aa>
  {
    xRes = CB_GetFreeItemFromHead(p_workingCB->pCircularBuffer, &p_workingCB->pProducerDataBuff);
 8018ba0:	68bb      	ldr	r3, [r7, #8]
 8018ba2:	681a      	ldr	r2, [r3, #0]
 8018ba4:	68bb      	ldr	r3, [r7, #8]
 8018ba6:	3304      	adds	r3, #4
 8018ba8:	4619      	mov	r1, r3
 8018baa:	4610      	mov	r0, r2
 8018bac:	f001 f87e 	bl	8019cac <CB_GetFreeItemFromHead>
 8018bb0:	4603      	mov	r3, r0
 8018bb2:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
  }
  
  if (xRes != CB_NO_ERROR_CODE)
 8018bb6:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8018bba:	2b00      	cmp	r3, #0
 8018bbc:	d012      	beq.n	8018be4 <CB_storing_int16_toInt16_helper+0x1d8>
  {
    if(_this->notifyCall != NULL)
 8018bbe:	68fb      	ldr	r3, [r7, #12]
 8018bc0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8018bc2:	2b00      	cmp	r3, #0
 8018bc4:	d008      	beq.n	8018bd8 <CB_storing_int16_toInt16_helper+0x1cc>
    {
      _this->notifyCall((IDPU*)_this, _this->p_callback_param);
 8018bc6:	68fb      	ldr	r3, [r7, #12]
 8018bc8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8018bca:	68fa      	ldr	r2, [r7, #12]
 8018bcc:	f8d2 2104 	ldr.w	r2, [r2, #260]	; 0x104
 8018bd0:	4611      	mov	r1, r2
 8018bd2:	68f8      	ldr	r0, [r7, #12]
 8018bd4:	4798      	blx	r3
 8018bd6:	e002      	b.n	8018bde <CB_storing_int16_toInt16_helper+0x1d2>
    }
    else
    {
      IDPU_Process((IDPU *)_this);
 8018bd8:	68f8      	ldr	r0, [r7, #12]
 8018bda:	f001 f9fa 	bl	8019fd2 <IDPU_Process>
    }
    return xRes;
 8018bde:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8018be2:	e106      	b.n	8018df2 <CB_storing_int16_toInt16_helper+0x3e6>
  }
  
  /* initialize the loop */
  CB_ItemSize = (uint16_t) CB_GetItemSize(p_workingCB->pCircularBuffer) / sizeof(int16_t);
 8018be4:	68bb      	ldr	r3, [r7, #8]
 8018be6:	681b      	ldr	r3, [r3, #0]
 8018be8:	4618      	mov	r0, r3
 8018bea:	f001 f841 	bl	8019c70 <CB_GetItemSize>
 8018bee:	4603      	mov	r3, r0
 8018bf0:	085b      	lsrs	r3, r3, #1
 8018bf2:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
  p_inData    = (int16_t *)(p_stream->packet.payload);
 8018bf6:	687b      	ldr	r3, [r7, #4]
 8018bf8:	685b      	ldr	r3, [r3, #4]
 8018bfa:	67fb      	str	r3, [r7, #124]	; 0x7c
  p_outData   = ((int16_t *) CB_GetItemData(p_workingCB->pProducerDataBuff));
 8018bfc:	68bb      	ldr	r3, [r7, #8]
 8018bfe:	685b      	ldr	r3, [r3, #4]
 8018c00:	4618      	mov	r0, r3
 8018c02:	f001 f957 	bl	8019eb4 <CB_GetItemData>
 8018c06:	67b8      	str	r0, [r7, #120]	; 0x78
  p_outData  +=  auto_transpose ?  p_workingCB->DataIdx / width_in : p_workingCB->DataIdx;
 8018c08:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 8018c0c:	2b00      	cmp	r3, #0
 8018c0e:	d008      	beq.n	8018c22 <CB_storing_int16_toInt16_helper+0x216>
 8018c10:	68bb      	ldr	r3, [r7, #8]
 8018c12:	899a      	ldrh	r2, [r3, #12]
 8018c14:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8018c18:	fbb2 f3f3 	udiv	r3, r2, r3
 8018c1c:	b29b      	uxth	r3, r3
 8018c1e:	005b      	lsls	r3, r3, #1
 8018c20:	e002      	b.n	8018c28 <CB_storing_int16_toInt16_helper+0x21c>
 8018c22:	68bb      	ldr	r3, [r7, #8]
 8018c24:	899b      	ldrh	r3, [r3, #12]
 8018c26:	005b      	lsls	r3, r3, #1
 8018c28:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8018c2a:	4413      	add	r3, r2
 8018c2c:	67bb      	str	r3, [r7, #120]	; 0x78
  nbXfer      = width_in * height_in;
 8018c2e:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8018c32:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8018c36:	fb12 f303 	smulbb	r3, r2, r3
 8018c3a:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
  
  while (nbXfer)
 8018c3e:	e0d1      	b.n	8018de4 <CB_storing_int16_toInt16_helper+0x3d8>
  {
    uint16_t CB_remains = CB_ItemSize - p_workingCB->DataIdx;
 8018c40:	68bb      	ldr	r3, [r7, #8]
 8018c42:	899b      	ldrh	r3, [r3, #12]
 8018c44:	f8b7 206a 	ldrh.w	r2, [r7, #106]	; 0x6a
 8018c48:	1ad3      	subs	r3, r2, r3
 8018c4a:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
    uint16_t n_loop = ( nbXfer > CB_remains ) ? CB_remains : nbXfer ;
 8018c4e:	f8b7 2082 	ldrh.w	r2, [r7, #130]	; 0x82
 8018c52:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8018c56:	4293      	cmp	r3, r2
 8018c58:	bf28      	it	cs
 8018c5a:	4613      	movcs	r3, r2
 8018c5c:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
    if (auto_transpose)
 8018c60:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 8018c64:	2b00      	cmp	r3, #0
 8018c66:	d03e      	beq.n	8018ce6 <CB_storing_int16_toInt16_helper+0x2da>
    {
        uint16_t outer_loop = n_loop/width_out;
 8018c68:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8018c6c:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8018c70:	fbb2 f3f3 	udiv	r3, r2, r3
 8018c74:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
        assert_param(n_loop == outer_loop * width_out);
 8018c78:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8018c7c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8018c80:	f8b7 1088 	ldrh.w	r1, [r7, #136]	; 0x88
 8018c84:	fb01 f303 	mul.w	r3, r1, r3
 8018c88:	429a      	cmp	r2, r3
 8018c8a:	d004      	beq.n	8018c96 <CB_storing_int16_toInt16_helper+0x28a>
 8018c8c:	f240 2142 	movw	r1, #578	; 0x242
 8018c90:	4816      	ldr	r0, [pc, #88]	; (8018cec <CB_storing_int16_toInt16_helper+0x2e0>)
 8018c92:	f7fc fb0a 	bl	80152aa <assert_failed>
        for (int i = 0; i < outer_loop ; i++)
 8018c96:	2300      	movs	r3, #0
 8018c98:	677b      	str	r3, [r7, #116]	; 0x74
 8018c9a:	e01e      	b.n	8018cda <CB_storing_int16_toInt16_helper+0x2ce>
        {
          for (int j = 0; j < width_out ; j++)
 8018c9c:	2300      	movs	r3, #0
 8018c9e:	673b      	str	r3, [r7, #112]	; 0x70
 8018ca0:	e010      	b.n	8018cc4 <CB_storing_int16_toInt16_helper+0x2b8>
          {
            *(p_outData+j*height_out) = (int16_t) *p_inData++;
 8018ca2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8018ca4:	1c9a      	adds	r2, r3, #2
 8018ca6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8018ca8:	f8b7 2086 	ldrh.w	r2, [r7, #134]	; 0x86
 8018cac:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8018cae:	fb01 f202 	mul.w	r2, r1, r2
 8018cb2:	0052      	lsls	r2, r2, #1
 8018cb4:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8018cb6:	440a      	add	r2, r1
 8018cb8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018cbc:	8013      	strh	r3, [r2, #0]
          for (int j = 0; j < width_out ; j++)
 8018cbe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8018cc0:	3301      	adds	r3, #1
 8018cc2:	673b      	str	r3, [r7, #112]	; 0x70
 8018cc4:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8018cc8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8018cca:	429a      	cmp	r2, r3
 8018ccc:	dbe9      	blt.n	8018ca2 <CB_storing_int16_toInt16_helper+0x296>
          }
          p_outData++;
 8018cce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8018cd0:	3302      	adds	r3, #2
 8018cd2:	67bb      	str	r3, [r7, #120]	; 0x78
        for (int i = 0; i < outer_loop ; i++)
 8018cd4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8018cd6:	3301      	adds	r3, #1
 8018cd8:	677b      	str	r3, [r7, #116]	; 0x74
 8018cda:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8018cde:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8018ce0:	429a      	cmp	r2, r3
 8018ce2:	dbdb      	blt.n	8018c9c <CB_storing_int16_toInt16_helper+0x290>
 8018ce4:	e017      	b.n	8018d16 <CB_storing_int16_toInt16_helper+0x30a>
      }
    }
    else
    {
      for (int i = 0; i < n_loop ; i++)
 8018ce6:	2300      	movs	r3, #0
 8018ce8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8018cea:	e00f      	b.n	8018d0c <CB_storing_int16_toInt16_helper+0x300>
 8018cec:	08026f74 	.word	0x08026f74
 8018cf0:	00840800 	.word	0x00840800
      {
        *p_outData++ = (int16_t) *p_inData++;
 8018cf4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8018cf6:	1c93      	adds	r3, r2, #2
 8018cf8:	67fb      	str	r3, [r7, #124]	; 0x7c
 8018cfa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8018cfc:	1c99      	adds	r1, r3, #2
 8018cfe:	67b9      	str	r1, [r7, #120]	; 0x78
 8018d00:	f9b2 2000 	ldrsh.w	r2, [r2]
 8018d04:	801a      	strh	r2, [r3, #0]
      for (int i = 0; i < n_loop ; i++)
 8018d06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8018d08:	3301      	adds	r3, #1
 8018d0a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8018d0c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8018d10:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8018d12:	429a      	cmp	r2, r3
 8018d14:	dbee      	blt.n	8018cf4 <CB_storing_int16_toInt16_helper+0x2e8>
      }
    }
    
    nbXfer               -= n_loop;
 8018d16:	f8b7 2082 	ldrh.w	r2, [r7, #130]	; 0x82
 8018d1a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8018d1e:	1ad3      	subs	r3, r2, r3
 8018d20:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
    CB_remains           -= n_loop;
 8018d24:	f8b7 2068 	ldrh.w	r2, [r7, #104]	; 0x68
 8018d28:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8018d2c:	1ad3      	subs	r3, r2, r3
 8018d2e:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
    p_workingCB->DataIdx += n_loop;
 8018d32:	68bb      	ldr	r3, [r7, #8]
 8018d34:	899a      	ldrh	r2, [r3, #12]
 8018d36:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8018d3a:	4413      	add	r3, r2
 8018d3c:	b29a      	uxth	r2, r3
 8018d3e:	68bb      	ldr	r3, [r7, #8]
 8018d40:	819a      	strh	r2, [r3, #12]
    
    if (CB_remains == 0 ) /* a CB item is full , can proceed with processing */
 8018d42:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8018d46:	2b00      	cmp	r3, #0
 8018d48:	d14c      	bne.n	8018de4 <CB_storing_int16_toInt16_helper+0x3d8>
    {
			if (p_workingCB->pProducerDataBuff == NULL)
 8018d4a:	68bb      	ldr	r3, [r7, #8]
 8018d4c:	685b      	ldr	r3, [r3, #4]
 8018d4e:	2b00      	cmp	r3, #0
 8018d50:	d100      	bne.n	8018d54 <CB_storing_int16_toInt16_helper+0x348>
			{
				while(1){}
 8018d52:	e7fe      	b.n	8018d52 <CB_storing_int16_toInt16_helper+0x346>
			}
			
      /* set CB item ready and claim another free one if possible , if not this we are breaking RT */
      CB_SetItemReady(p_workingCB->pCircularBuffer, p_workingCB->pProducerDataBuff);
 8018d54:	68bb      	ldr	r3, [r7, #8]
 8018d56:	681a      	ldr	r2, [r3, #0]
 8018d58:	68bb      	ldr	r3, [r7, #8]
 8018d5a:	685b      	ldr	r3, [r3, #4]
 8018d5c:	4619      	mov	r1, r3
 8018d5e:	4610      	mov	r0, r2
 8018d60:	f001 f874 	bl	8019e4c <CB_SetItemReady>
			
			if(p_workingCB->pProducerDataBuff == NULL)
 8018d64:	68bb      	ldr	r3, [r7, #8]
 8018d66:	685b      	ldr	r3, [r3, #4]
 8018d68:	2b00      	cmp	r3, #0
 8018d6a:	d100      	bne.n	8018d6e <CB_storing_int16_toInt16_helper+0x362>
      {
        while(1)
 8018d6c:	e7fe      	b.n	8018d6c <CB_storing_int16_toInt16_helper+0x360>
        {
        }
      }
			
      xRes = CB_GetFreeItemFromHead(p_workingCB->pCircularBuffer, &p_workingCB->pProducerDataBuff);
 8018d6e:	68bb      	ldr	r3, [r7, #8]
 8018d70:	681a      	ldr	r2, [r3, #0]
 8018d72:	68bb      	ldr	r3, [r7, #8]
 8018d74:	3304      	adds	r3, #4
 8018d76:	4619      	mov	r1, r3
 8018d78:	4610      	mov	r0, r2
 8018d7a:	f000 ff97 	bl	8019cac <CB_GetFreeItemFromHead>
 8018d7e:	4603      	mov	r3, r0
 8018d80:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
      p_workingCB->DataIdx =  0;
 8018d84:	68bb      	ldr	r3, [r7, #8]
 8018d86:	2200      	movs	r2, #0
 8018d88:	819a      	strh	r2, [r3, #12]
      if(xRes != CB_NO_ERROR_CODE)
 8018d8a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8018d8e:	2b00      	cmp	r3, #0
 8018d90:	d012      	beq.n	8018db8 <CB_storing_int16_toInt16_helper+0x3ac>
      {        
        if(_this->notifyCall != NULL)
 8018d92:	68fb      	ldr	r3, [r7, #12]
 8018d94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8018d96:	2b00      	cmp	r3, #0
 8018d98:	d008      	beq.n	8018dac <CB_storing_int16_toInt16_helper+0x3a0>
        {
          _this->notifyCall((IDPU*)_this, _this->p_callback_param);
 8018d9a:	68fb      	ldr	r3, [r7, #12]
 8018d9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8018d9e:	68fa      	ldr	r2, [r7, #12]
 8018da0:	f8d2 2104 	ldr.w	r2, [r2, #260]	; 0x104
 8018da4:	4611      	mov	r1, r2
 8018da6:	68f8      	ldr	r0, [r7, #12]
 8018da8:	4798      	blx	r3
 8018daa:	e002      	b.n	8018db2 <CB_storing_int16_toInt16_helper+0x3a6>
        }
        else
        {
          IDPU_Process((IDPU *)_this);
 8018dac:	68f8      	ldr	r0, [r7, #12]
 8018dae:	f001 f910 	bl	8019fd2 <IDPU_Process>
        }
        return xRes;
 8018db2:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8018db6:	e01c      	b.n	8018df2 <CB_storing_int16_toInt16_helper+0x3e6>
      }
      p_outData =  CB_GetItemData(p_workingCB->pProducerDataBuff);
 8018db8:	68bb      	ldr	r3, [r7, #8]
 8018dba:	685b      	ldr	r3, [r3, #4]
 8018dbc:	4618      	mov	r0, r3
 8018dbe:	f001 f879 	bl	8019eb4 <CB_GetItemData>
 8018dc2:	67b8      	str	r0, [r7, #120]	; 0x78
      
      if(_this->notifyCall != NULL)
 8018dc4:	68fb      	ldr	r3, [r7, #12]
 8018dc6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8018dc8:	2b00      	cmp	r3, #0
 8018dca:	d008      	beq.n	8018dde <CB_storing_int16_toInt16_helper+0x3d2>
      {
        _this->notifyCall((IDPU*)_this, _this->p_callback_param);
 8018dcc:	68fb      	ldr	r3, [r7, #12]
 8018dce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8018dd0:	68fa      	ldr	r2, [r7, #12]
 8018dd2:	f8d2 2104 	ldr.w	r2, [r2, #260]	; 0x104
 8018dd6:	4611      	mov	r1, r2
 8018dd8:	68f8      	ldr	r0, [r7, #12]
 8018dda:	4798      	blx	r3
 8018ddc:	e002      	b.n	8018de4 <CB_storing_int16_toInt16_helper+0x3d8>
      }
      else
      {
        IDPU_Process((IDPU *)_this);
 8018dde:	68f8      	ldr	r0, [r7, #12]
 8018de0:	f001 f8f7 	bl	8019fd2 <IDPU_Process>
  while (nbXfer)
 8018de4:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8018de8:	2b00      	cmp	r3, #0
 8018dea:	f47f af29 	bne.w	8018c40 <CB_storing_int16_toInt16_helper+0x234>
      }
    }
  }
  return xRes;
 8018dee:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
}
 8018df2:	4618      	mov	r0, r3
 8018df4:	3790      	adds	r7, #144	; 0x90
 8018df6:	46bd      	mov	sp, r7
 8018df8:	bdb0      	pop	{r4, r5, r7, pc}
 8018dfa:	bf00      	nop

08018dfc <CB_storing_int16_toFloat_helper>:

static sys_error_code_t CB_storing_int16_toFloat_helper(ADPU * _this, CBHandle_t *p_workingCB, AI_SP_Stream_t *p_stream )
{
 8018dfc:	b5b0      	push	{r4, r5, r7, lr}
 8018dfe:	b0a4      	sub	sp, #144	; 0x90
 8018e00:	af00      	add	r7, sp, #0
 8018e02:	60f8      	str	r0, [r7, #12]
 8018e04:	60b9      	str	r1, [r7, #8]
 8018e06:	607a      	str	r2, [r7, #4]
  assert_param(_this != NULL);
 8018e08:	68fb      	ldr	r3, [r7, #12]
 8018e0a:	2b00      	cmp	r3, #0
 8018e0c:	d104      	bne.n	8018e18 <CB_storing_int16_toFloat_helper+0x1c>
 8018e0e:	f44f 7122 	mov.w	r1, #648	; 0x288
 8018e12:	48a8      	ldr	r0, [pc, #672]	; (80190b4 <CB_storing_int16_toFloat_helper+0x2b8>)
 8018e14:	f7fc fa49 	bl	80152aa <assert_failed>
  assert_param(p_workingCB != NULL);
 8018e18:	68bb      	ldr	r3, [r7, #8]
 8018e1a:	2b00      	cmp	r3, #0
 8018e1c:	d104      	bne.n	8018e28 <CB_storing_int16_toFloat_helper+0x2c>
 8018e1e:	f240 2189 	movw	r1, #649	; 0x289
 8018e22:	48a4      	ldr	r0, [pc, #656]	; (80190b4 <CB_storing_int16_toFloat_helper+0x2b8>)
 8018e24:	f7fc fa41 	bl	80152aa <assert_failed>
  assert_param(p_stream != NULL);
 8018e28:	687b      	ldr	r3, [r7, #4]
 8018e2a:	2b00      	cmp	r3, #0
 8018e2c:	d104      	bne.n	8018e38 <CB_storing_int16_toFloat_helper+0x3c>
 8018e2e:	f240 218a 	movw	r1, #650	; 0x28a
 8018e32:	48a0      	ldr	r0, [pc, #640]	; (80190b4 <CB_storing_int16_toFloat_helper+0x2b8>)
 8018e34:	f7fc fa39 	bl	80152aa <assert_failed>
  
  sys_error_code_t xRes         = SYS_NO_ERROR_CODE;
 8018e38:	2300      	movs	r3, #0
 8018e3a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
  ai_logging_packet_t packetIn  = p_stream->packet;
 8018e3e:	687b      	ldr	r3, [r7, #4]
 8018e40:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8018e44:	461d      	mov	r5, r3
 8018e46:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018e48:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018e4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018e4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018e4e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8018e52:	e884 0003 	stmia.w	r4, {r0, r1}
  ai_logging_packet_t packetOut = _this->dpuWorkingStream.packet;
 8018e56:	68fb      	ldr	r3, [r7, #12]
 8018e58:	f107 0414 	add.w	r4, r7, #20
 8018e5c:	f103 05ac 	add.w	r5, r3, #172	; 0xac
 8018e60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018e62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018e64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018e66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018e68:	e895 0003 	ldmia.w	r5, {r0, r1}
 8018e6c:	e884 0003 	stmia.w	r4, {r0, r1}
  uint16_t width_in             = 0;
 8018e70:	2300      	movs	r3, #0
 8018e72:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
  uint16_t height_in            = 0;
 8018e76:	2300      	movs	r3, #0
 8018e78:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
  uint16_t width_out            = 0;
 8018e7c:	2300      	movs	r3, #0
 8018e7e:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
  uint16_t height_out           = 0;
 8018e82:	2300      	movs	r3, #0
 8018e84:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
  boolean_t auto_transpose      = false;
 8018e88:	2300      	movs	r3, #0
 8018e8a:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
  (packetOut.payload_type == AI_FMT &&
  packetOut.payload_fmt == AI_SP_FMT_FLOAT32_RESET() ));
  temporary code to fix :
  */
  
  assert_param(packetIn.payload_fmt == AI_SP_FMT_INT16_RESET());
 8018e8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018e90:	4a89      	ldr	r2, [pc, #548]	; (80190b8 <CB_storing_int16_toFloat_helper+0x2bc>)
 8018e92:	4293      	cmp	r3, r2
 8018e94:	d004      	beq.n	8018ea0 <CB_storing_int16_toFloat_helper+0xa4>
 8018e96:	f44f 7129 	mov.w	r1, #676	; 0x2a4
 8018e9a:	4886      	ldr	r0, [pc, #536]	; (80190b4 <CB_storing_int16_toFloat_helper+0x2b8>)
 8018e9c:	f7fc fa05 	bl	80152aa <assert_failed>
  assert_param(packetOut.payload_fmt == AI_SP_FMT_FLOAT32_RESET());
 8018ea0:	69fb      	ldr	r3, [r7, #28]
 8018ea2:	4a86      	ldr	r2, [pc, #536]	; (80190bc <CB_storing_int16_toFloat_helper+0x2c0>)
 8018ea4:	4293      	cmp	r3, r2
 8018ea6:	d004      	beq.n	8018eb2 <CB_storing_int16_toFloat_helper+0xb6>
 8018ea8:	f240 21a5 	movw	r1, #677	; 0x2a5
 8018eac:	4881      	ldr	r0, [pc, #516]	; (80190b4 <CB_storing_int16_toFloat_helper+0x2b8>)
 8018eae:	f7fc f9fc 	bl	80152aa <assert_failed>
  
  /* different dimension shapes not implemented for now */
  if  (packetIn.shape.n_shape != packetOut.shape.n_shape )
 8018eb2:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8018eb6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018eb8:	429a      	cmp	r2, r3
 8018eba:	d002      	beq.n	8018ec2 <CB_storing_int16_toFloat_helper+0xc6>
  {
    xRes = SYS_NOT_IMPLEMENTED_ERROR_CODE ;
 8018ebc:	2307      	movs	r3, #7
 8018ebe:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
  }
  switch (packetIn.shape.n_shape)
 8018ec2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8018ec6:	2b02      	cmp	r3, #2
 8018ec8:	d012      	beq.n	8018ef0 <CB_storing_int16_toFloat_helper+0xf4>
 8018eca:	2b02      	cmp	r3, #2
 8018ecc:	dc48      	bgt.n	8018f60 <CB_storing_int16_toFloat_helper+0x164>
 8018ece:	2b00      	cmp	r3, #0
 8018ed0:	d002      	beq.n	8018ed8 <CB_storing_int16_toFloat_helper+0xdc>
 8018ed2:	2b01      	cmp	r3, #1
 8018ed4:	d004      	beq.n	8018ee0 <CB_storing_int16_toFloat_helper+0xe4>
 8018ed6:	e043      	b.n	8018f60 <CB_storing_int16_toFloat_helper+0x164>
  {
  case 0:
    xRes  = SYS_NOT_IMPLEMENTED_ERROR_CODE ;
 8018ed8:	2307      	movs	r3, #7
 8018eda:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    break;
 8018ede:	e042      	b.n	8018f66 <CB_storing_int16_toFloat_helper+0x16a>
  case 1:
    width_in  = packetIn.shape.shapes[AI_LOGGING_SHAPES_WIDTH];
 8018ee0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8018ee4:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
    height_in = 1 ;
 8018ee8:	2301      	movs	r3, #1
 8018eea:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    break;
 8018eee:	e03a      	b.n	8018f66 <CB_storing_int16_toFloat_helper+0x16a>
  case 2:
    width_in   = packetIn.shape.shapes[AI_LOGGING_SHAPES_WIDTH];
 8018ef0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8018ef4:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
    height_in  = packetIn.shape.shapes[AI_LOGGING_SHAPES_HEIGHT];
 8018ef8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8018efc:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    width_out  = packetOut.shape.shapes[AI_LOGGING_SHAPES_WIDTH];
 8018f00:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8018f02:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
    height_out = packetOut.shape.shapes[AI_LOGGING_SHAPES_HEIGHT];
 8018f06:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8018f08:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    auto_transpose  = (width_in == height_out) || (height_in == width_out);
 8018f0c:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8018f10:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8018f14:	429a      	cmp	r2, r3
 8018f16:	d005      	beq.n	8018f24 <CB_storing_int16_toFloat_helper+0x128>
 8018f18:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8018f1c:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8018f20:	429a      	cmp	r2, r3
 8018f22:	d101      	bne.n	8018f28 <CB_storing_int16_toFloat_helper+0x12c>
 8018f24:	2301      	movs	r3, #1
 8018f26:	e000      	b.n	8018f2a <CB_storing_int16_toFloat_helper+0x12e>
 8018f28:	2300      	movs	r3, #0
 8018f2a:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
 8018f2e:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 8018f32:	f003 0301 	and.w	r3, r3, #1
 8018f36:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
    auto_transpose &= (width_in != height_in) ;
 8018f3a:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 8018f3e:	f8b7 108c 	ldrh.w	r1, [r7, #140]	; 0x8c
 8018f42:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8018f46:	4291      	cmp	r1, r2
 8018f48:	bf14      	ite	ne
 8018f4a:	2201      	movne	r2, #1
 8018f4c:	2200      	moveq	r2, #0
 8018f4e:	b2d2      	uxtb	r2, r2
 8018f50:	4013      	ands	r3, r2
 8018f52:	2b00      	cmp	r3, #0
 8018f54:	bf14      	ite	ne
 8018f56:	2301      	movne	r3, #1
 8018f58:	2300      	moveq	r3, #0
 8018f5a:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
    
    break;
 8018f5e:	e002      	b.n	8018f66 <CB_storing_int16_toFloat_helper+0x16a>
  default:
    xRes = SYS_NOT_IMPLEMENTED_ERROR_CODE ;
 8018f60:	2307      	movs	r3, #7
 8018f62:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
  
  /*
  todo fix the payload size settings first
  assert_param(p_stream->packet.payload_size == nbXfer * sizeof(int16));
  */
  if (xRes != SYS_NO_ERROR_CODE)
 8018f66:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8018f6a:	2b00      	cmp	r3, #0
 8018f6c:	d002      	beq.n	8018f74 <CB_storing_int16_toFloat_helper+0x178>
  {
    return xRes;
 8018f6e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8018f72:	e11f      	b.n	80191b4 <CB_storing_int16_toFloat_helper+0x3b8>
  }
  
  if (p_workingCB->pProducerDataBuff == NULL)
 8018f74:	68bb      	ldr	r3, [r7, #8]
 8018f76:	685b      	ldr	r3, [r3, #4]
 8018f78:	2b00      	cmp	r3, #0
 8018f7a:	d10a      	bne.n	8018f92 <CB_storing_int16_toFloat_helper+0x196>
  {
    xRes = CB_GetFreeItemFromHead(p_workingCB->pCircularBuffer, &p_workingCB->pProducerDataBuff);
 8018f7c:	68bb      	ldr	r3, [r7, #8]
 8018f7e:	681a      	ldr	r2, [r3, #0]
 8018f80:	68bb      	ldr	r3, [r7, #8]
 8018f82:	3304      	adds	r3, #4
 8018f84:	4619      	mov	r1, r3
 8018f86:	4610      	mov	r0, r2
 8018f88:	f000 fe90 	bl	8019cac <CB_GetFreeItemFromHead>
 8018f8c:	4603      	mov	r3, r0
 8018f8e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
  }
  
  if (xRes != SYS_NO_ERROR_CODE)
 8018f92:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8018f96:	2b00      	cmp	r3, #0
 8018f98:	d002      	beq.n	8018fa0 <CB_storing_int16_toFloat_helper+0x1a4>
  {
    return xRes;
 8018f9a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8018f9e:	e109      	b.n	80191b4 <CB_storing_int16_toFloat_helper+0x3b8>
  }
  
  /* initialize the loop */
  CB_ItemSize = (uint16_t) CB_GetItemSize(p_workingCB->pCircularBuffer) / sizeof(float);
 8018fa0:	68bb      	ldr	r3, [r7, #8]
 8018fa2:	681b      	ldr	r3, [r3, #0]
 8018fa4:	4618      	mov	r0, r3
 8018fa6:	f000 fe63 	bl	8019c70 <CB_GetItemSize>
 8018faa:	4603      	mov	r3, r0
 8018fac:	089b      	lsrs	r3, r3, #2
 8018fae:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
  p_inData    = (int16_t *)(p_stream->packet.payload);
 8018fb2:	687b      	ldr	r3, [r7, #4]
 8018fb4:	685b      	ldr	r3, [r3, #4]
 8018fb6:	67fb      	str	r3, [r7, #124]	; 0x7c
  p_outData   = ((float *) CB_GetItemData(p_workingCB->pProducerDataBuff));
 8018fb8:	68bb      	ldr	r3, [r7, #8]
 8018fba:	685b      	ldr	r3, [r3, #4]
 8018fbc:	4618      	mov	r0, r3
 8018fbe:	f000 ff79 	bl	8019eb4 <CB_GetItemData>
 8018fc2:	67b8      	str	r0, [r7, #120]	; 0x78
  p_outData  +=  auto_transpose ?  p_workingCB->DataIdx / width_in : p_workingCB->DataIdx;
 8018fc4:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 8018fc8:	2b00      	cmp	r3, #0
 8018fca:	d008      	beq.n	8018fde <CB_storing_int16_toFloat_helper+0x1e2>
 8018fcc:	68bb      	ldr	r3, [r7, #8]
 8018fce:	899a      	ldrh	r2, [r3, #12]
 8018fd0:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8018fd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8018fd8:	b29b      	uxth	r3, r3
 8018fda:	009b      	lsls	r3, r3, #2
 8018fdc:	e002      	b.n	8018fe4 <CB_storing_int16_toFloat_helper+0x1e8>
 8018fde:	68bb      	ldr	r3, [r7, #8]
 8018fe0:	899b      	ldrh	r3, [r3, #12]
 8018fe2:	009b      	lsls	r3, r3, #2
 8018fe4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8018fe6:	4413      	add	r3, r2
 8018fe8:	67bb      	str	r3, [r7, #120]	; 0x78
  nbXfer      = width_in * height_in;
 8018fea:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8018fee:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8018ff2:	fb12 f303 	smulbb	r3, r2, r3
 8018ff6:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
  
  while (nbXfer)
 8018ffa:	e0d4      	b.n	80191a6 <CB_storing_int16_toFloat_helper+0x3aa>
  {
    uint16_t CB_remains = CB_ItemSize - p_workingCB->DataIdx;
 8018ffc:	68bb      	ldr	r3, [r7, #8]
 8018ffe:	899b      	ldrh	r3, [r3, #12]
 8019000:	f8b7 206a 	ldrh.w	r2, [r7, #106]	; 0x6a
 8019004:	1ad3      	subs	r3, r2, r3
 8019006:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
    uint16_t n_loop = ( nbXfer > CB_remains ) ? CB_remains : nbXfer ;
 801900a:	f8b7 2082 	ldrh.w	r2, [r7, #130]	; 0x82
 801900e:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8019012:	4293      	cmp	r3, r2
 8019014:	bf28      	it	cs
 8019016:	4613      	movcs	r3, r2
 8019018:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
    if (auto_transpose)
 801901c:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 8019020:	2b00      	cmp	r3, #0
 8019022:	d043      	beq.n	80190ac <CB_storing_int16_toFloat_helper+0x2b0>
    {
        uint16_t outer_loop = n_loop/width_out;
 8019024:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8019028:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 801902c:	fbb2 f3f3 	udiv	r3, r2, r3
 8019030:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
        assert_param(n_loop == outer_loop * width_out);
 8019034:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8019038:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 801903c:	f8b7 1088 	ldrh.w	r1, [r7, #136]	; 0x88
 8019040:	fb01 f303 	mul.w	r3, r1, r3
 8019044:	429a      	cmp	r2, r3
 8019046:	d004      	beq.n	8019052 <CB_storing_int16_toFloat_helper+0x256>
 8019048:	f240 21e3 	movw	r1, #739	; 0x2e3
 801904c:	4819      	ldr	r0, [pc, #100]	; (80190b4 <CB_storing_int16_toFloat_helper+0x2b8>)
 801904e:	f7fc f92c 	bl	80152aa <assert_failed>
        for (int i = 0; i < outer_loop ; i++)
 8019052:	2300      	movs	r3, #0
 8019054:	677b      	str	r3, [r7, #116]	; 0x74
 8019056:	e023      	b.n	80190a0 <CB_storing_int16_toFloat_helper+0x2a4>
        {
          for (int j = 0; j < width_out ; j++)
 8019058:	2300      	movs	r3, #0
 801905a:	673b      	str	r3, [r7, #112]	; 0x70
 801905c:	e015      	b.n	801908a <CB_storing_int16_toFloat_helper+0x28e>
          {
            *(p_outData+j*height_out) = (float) *p_inData++;
 801905e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8019060:	1c9a      	adds	r2, r3, #2
 8019062:	67fa      	str	r2, [r7, #124]	; 0x7c
 8019064:	f9b3 1000 	ldrsh.w	r1, [r3]
 8019068:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 801906c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801906e:	fb02 f303 	mul.w	r3, r2, r3
 8019072:	009b      	lsls	r3, r3, #2
 8019074:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8019076:	4413      	add	r3, r2
 8019078:	ee07 1a90 	vmov	s15, r1
 801907c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019080:	edc3 7a00 	vstr	s15, [r3]
          for (int j = 0; j < width_out ; j++)
 8019084:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8019086:	3301      	adds	r3, #1
 8019088:	673b      	str	r3, [r7, #112]	; 0x70
 801908a:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 801908e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8019090:	429a      	cmp	r2, r3
 8019092:	dbe4      	blt.n	801905e <CB_storing_int16_toFloat_helper+0x262>
          }
          p_outData++;
 8019094:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8019096:	3304      	adds	r3, #4
 8019098:	67bb      	str	r3, [r7, #120]	; 0x78
        for (int i = 0; i < outer_loop ; i++)
 801909a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801909c:	3301      	adds	r3, #1
 801909e:	677b      	str	r3, [r7, #116]	; 0x74
 80190a0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80190a4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80190a6:	429a      	cmp	r2, r3
 80190a8:	dbd6      	blt.n	8019058 <CB_storing_int16_toFloat_helper+0x25c>
 80190aa:	e01f      	b.n	80190ec <CB_storing_int16_toFloat_helper+0x2f0>
      }
    }
    else
    {
      for (int i = 0; i < n_loop ; i++)
 80190ac:	2300      	movs	r3, #0
 80190ae:	66fb      	str	r3, [r7, #108]	; 0x6c
 80190b0:	e017      	b.n	80190e2 <CB_storing_int16_toFloat_helper+0x2e6>
 80190b2:	bf00      	nop
 80190b4:	08026f74 	.word	0x08026f74
 80190b8:	00840800 	.word	0x00840800
 80190bc:	00821000 	.word	0x00821000
      {
        *p_outData++ = (float) *p_inData++;
 80190c0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80190c2:	1c9a      	adds	r2, r3, #2
 80190c4:	67fa      	str	r2, [r7, #124]	; 0x7c
 80190c6:	f9b3 1000 	ldrsh.w	r1, [r3]
 80190ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80190cc:	1d1a      	adds	r2, r3, #4
 80190ce:	67ba      	str	r2, [r7, #120]	; 0x78
 80190d0:	ee07 1a90 	vmov	s15, r1
 80190d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80190d8:	edc3 7a00 	vstr	s15, [r3]
      for (int i = 0; i < n_loop ; i++)
 80190dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80190de:	3301      	adds	r3, #1
 80190e0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80190e2:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80190e6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80190e8:	429a      	cmp	r2, r3
 80190ea:	dbe9      	blt.n	80190c0 <CB_storing_int16_toFloat_helper+0x2c4>
      }
    }
    
    nbXfer               -= n_loop;
 80190ec:	f8b7 2082 	ldrh.w	r2, [r7, #130]	; 0x82
 80190f0:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80190f4:	1ad3      	subs	r3, r2, r3
 80190f6:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
    CB_remains           -= n_loop;
 80190fa:	f8b7 2068 	ldrh.w	r2, [r7, #104]	; 0x68
 80190fe:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8019102:	1ad3      	subs	r3, r2, r3
 8019104:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
    p_workingCB->DataIdx += n_loop;
 8019108:	68bb      	ldr	r3, [r7, #8]
 801910a:	899a      	ldrh	r2, [r3, #12]
 801910c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8019110:	4413      	add	r3, r2
 8019112:	b29a      	uxth	r2, r3
 8019114:	68bb      	ldr	r3, [r7, #8]
 8019116:	819a      	strh	r2, [r3, #12]
    
    if (CB_remains == 0 ) /* a CB item is full , can proceed with processing */
 8019118:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 801911c:	2b00      	cmp	r3, #0
 801911e:	d142      	bne.n	80191a6 <CB_storing_int16_toFloat_helper+0x3aa>
    {
      /* set CB item ready and claim another free one if possible , if not this we are breaking RT */
      CB_SetItemReady(p_workingCB->pCircularBuffer, p_workingCB->pProducerDataBuff);
 8019120:	68bb      	ldr	r3, [r7, #8]
 8019122:	681a      	ldr	r2, [r3, #0]
 8019124:	68bb      	ldr	r3, [r7, #8]
 8019126:	685b      	ldr	r3, [r3, #4]
 8019128:	4619      	mov	r1, r3
 801912a:	4610      	mov	r0, r2
 801912c:	f000 fe8e 	bl	8019e4c <CB_SetItemReady>
      xRes = CB_GetFreeItemFromHead(p_workingCB->pCircularBuffer, &p_workingCB->pProducerDataBuff);
 8019130:	68bb      	ldr	r3, [r7, #8]
 8019132:	681a      	ldr	r2, [r3, #0]
 8019134:	68bb      	ldr	r3, [r7, #8]
 8019136:	3304      	adds	r3, #4
 8019138:	4619      	mov	r1, r3
 801913a:	4610      	mov	r0, r2
 801913c:	f000 fdb6 	bl	8019cac <CB_GetFreeItemFromHead>
 8019140:	4603      	mov	r3, r0
 8019142:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
      p_workingCB->DataIdx =  0;
 8019146:	68bb      	ldr	r3, [r7, #8]
 8019148:	2200      	movs	r2, #0
 801914a:	819a      	strh	r2, [r3, #12]
      if(xRes != CB_NO_ERROR_CODE)
 801914c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8019150:	2b00      	cmp	r3, #0
 8019152:	d012      	beq.n	801917a <CB_storing_int16_toFloat_helper+0x37e>
      {
        if(_this->notifyCall != NULL)
 8019154:	68fb      	ldr	r3, [r7, #12]
 8019156:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8019158:	2b00      	cmp	r3, #0
 801915a:	d008      	beq.n	801916e <CB_storing_int16_toFloat_helper+0x372>
        {
          _this->notifyCall((IDPU*)_this, _this->p_callback_param);
 801915c:	68fb      	ldr	r3, [r7, #12]
 801915e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8019160:	68fa      	ldr	r2, [r7, #12]
 8019162:	f8d2 2104 	ldr.w	r2, [r2, #260]	; 0x104
 8019166:	4611      	mov	r1, r2
 8019168:	68f8      	ldr	r0, [r7, #12]
 801916a:	4798      	blx	r3
 801916c:	e002      	b.n	8019174 <CB_storing_int16_toFloat_helper+0x378>
        }
        else
        {
          IDPU_Process((IDPU *)_this);
 801916e:	68f8      	ldr	r0, [r7, #12]
 8019170:	f000 ff2f 	bl	8019fd2 <IDPU_Process>
        }
        return xRes;
 8019174:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8019178:	e01c      	b.n	80191b4 <CB_storing_int16_toFloat_helper+0x3b8>
      }
      p_outData =  CB_GetItemData(p_workingCB->pProducerDataBuff);
 801917a:	68bb      	ldr	r3, [r7, #8]
 801917c:	685b      	ldr	r3, [r3, #4]
 801917e:	4618      	mov	r0, r3
 8019180:	f000 fe98 	bl	8019eb4 <CB_GetItemData>
 8019184:	67b8      	str	r0, [r7, #120]	; 0x78
      
      if(_this->notifyCall != NULL)
 8019186:	68fb      	ldr	r3, [r7, #12]
 8019188:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801918a:	2b00      	cmp	r3, #0
 801918c:	d008      	beq.n	80191a0 <CB_storing_int16_toFloat_helper+0x3a4>
      {
        _this->notifyCall((IDPU*)_this, _this->p_callback_param);
 801918e:	68fb      	ldr	r3, [r7, #12]
 8019190:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8019192:	68fa      	ldr	r2, [r7, #12]
 8019194:	f8d2 2104 	ldr.w	r2, [r2, #260]	; 0x104
 8019198:	4611      	mov	r1, r2
 801919a:	68f8      	ldr	r0, [r7, #12]
 801919c:	4798      	blx	r3
 801919e:	e002      	b.n	80191a6 <CB_storing_int16_toFloat_helper+0x3aa>
      }
      else
      {
        IDPU_Process((IDPU *)_this);
 80191a0:	68f8      	ldr	r0, [r7, #12]
 80191a2:	f000 ff16 	bl	8019fd2 <IDPU_Process>
  while (nbXfer)
 80191a6:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 80191aa:	2b00      	cmp	r3, #0
 80191ac:	f47f af26 	bne.w	8018ffc <CB_storing_int16_toFloat_helper+0x200>
      }
    }
  }
  return xRes;
 80191b0:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
}
 80191b4:	4618      	mov	r0, r3
 80191b6:	3790      	adds	r7, #144	; 0x90
 80191b8:	46bd      	mov	sp, r7
 80191ba:	bdb0      	pop	{r4, r5, r7, pc}

080191bc <CB_storing_float_toFloat_helper>:

static sys_error_code_t CB_storing_float_toFloat_helper(ADPU * _this, CBHandle_t *p_workingCB, AI_SP_Stream_t *p_stream )
{
 80191bc:	b5b0      	push	{r4, r5, r7, lr}
 80191be:	b0a4      	sub	sp, #144	; 0x90
 80191c0:	af00      	add	r7, sp, #0
 80191c2:	60f8      	str	r0, [r7, #12]
 80191c4:	60b9      	str	r1, [r7, #8]
 80191c6:	607a      	str	r2, [r7, #4]
  assert_param(_this != NULL);
 80191c8:	68fb      	ldr	r3, [r7, #12]
 80191ca:	2b00      	cmp	r3, #0
 80191cc:	d104      	bne.n	80191d8 <CB_storing_float_toFloat_helper+0x1c>
 80191ce:	f44f 7147 	mov.w	r1, #796	; 0x31c
 80191d2:	48a5      	ldr	r0, [pc, #660]	; (8019468 <CB_storing_float_toFloat_helper+0x2ac>)
 80191d4:	f7fc f869 	bl	80152aa <assert_failed>
  assert_param(p_workingCB != NULL);
 80191d8:	68bb      	ldr	r3, [r7, #8]
 80191da:	2b00      	cmp	r3, #0
 80191dc:	d104      	bne.n	80191e8 <CB_storing_float_toFloat_helper+0x2c>
 80191de:	f240 311d 	movw	r1, #797	; 0x31d
 80191e2:	48a1      	ldr	r0, [pc, #644]	; (8019468 <CB_storing_float_toFloat_helper+0x2ac>)
 80191e4:	f7fc f861 	bl	80152aa <assert_failed>
  assert_param(p_stream != NULL);
 80191e8:	687b      	ldr	r3, [r7, #4]
 80191ea:	2b00      	cmp	r3, #0
 80191ec:	d104      	bne.n	80191f8 <CB_storing_float_toFloat_helper+0x3c>
 80191ee:	f240 311e 	movw	r1, #798	; 0x31e
 80191f2:	489d      	ldr	r0, [pc, #628]	; (8019468 <CB_storing_float_toFloat_helper+0x2ac>)
 80191f4:	f7fc f859 	bl	80152aa <assert_failed>
  
  sys_error_code_t xRes         = SYS_NO_ERROR_CODE;
 80191f8:	2300      	movs	r3, #0
 80191fa:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
  ai_logging_packet_t packetIn  = p_stream->packet;
 80191fe:	687b      	ldr	r3, [r7, #4]
 8019200:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8019204:	461d      	mov	r5, r3
 8019206:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019208:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801920a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801920c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801920e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8019212:	e884 0003 	stmia.w	r4, {r0, r1}
  ai_logging_packet_t packetOut = _this->dpuWorkingStream.packet;
 8019216:	68fb      	ldr	r3, [r7, #12]
 8019218:	f107 0414 	add.w	r4, r7, #20
 801921c:	f103 05ac 	add.w	r5, r3, #172	; 0xac
 8019220:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019222:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019224:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019226:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019228:	e895 0003 	ldmia.w	r5, {r0, r1}
 801922c:	e884 0003 	stmia.w	r4, {r0, r1}
  uint16_t width_in             = 0;
 8019230:	2300      	movs	r3, #0
 8019232:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
  uint16_t height_in            = 0;
 8019236:	2300      	movs	r3, #0
 8019238:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
  uint16_t width_out            = 0;
 801923c:	2300      	movs	r3, #0
 801923e:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
  uint16_t height_out           = 0;
 8019242:	2300      	movs	r3, #0
 8019244:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
  boolean_t auto_transpose      = false;
 8019248:	2300      	movs	r3, #0
 801924a:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
  (packetOut.payload_type == AI_FMT &&
  packetOut.payload_fmt == AI_SP_FMT_FLOAT32_RESET() ));
  temporary code to fix :
  */
  
  assert_param(packetIn.payload_fmt == AI_SP_FMT_FLOAT32_RESET());
 801924e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019250:	4a86      	ldr	r2, [pc, #536]	; (801946c <CB_storing_float_toFloat_helper+0x2b0>)
 8019252:	4293      	cmp	r3, r2
 8019254:	d004      	beq.n	8019260 <CB_storing_float_toFloat_helper+0xa4>
 8019256:	f44f 714e 	mov.w	r1, #824	; 0x338
 801925a:	4883      	ldr	r0, [pc, #524]	; (8019468 <CB_storing_float_toFloat_helper+0x2ac>)
 801925c:	f7fc f825 	bl	80152aa <assert_failed>
  assert_param(packetOut.payload_fmt == AI_SP_FMT_FLOAT32_RESET());
 8019260:	69fb      	ldr	r3, [r7, #28]
 8019262:	4a82      	ldr	r2, [pc, #520]	; (801946c <CB_storing_float_toFloat_helper+0x2b0>)
 8019264:	4293      	cmp	r3, r2
 8019266:	d004      	beq.n	8019272 <CB_storing_float_toFloat_helper+0xb6>
 8019268:	f240 3139 	movw	r1, #825	; 0x339
 801926c:	487e      	ldr	r0, [pc, #504]	; (8019468 <CB_storing_float_toFloat_helper+0x2ac>)
 801926e:	f7fc f81c 	bl	80152aa <assert_failed>
  
  /* different dimension shapes not implemented for now */
  if  (packetIn.shape.n_shape != packetOut.shape.n_shape )
 8019272:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8019276:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8019278:	429a      	cmp	r2, r3
 801927a:	d002      	beq.n	8019282 <CB_storing_float_toFloat_helper+0xc6>
  {
    xRes = SYS_NOT_IMPLEMENTED_ERROR_CODE ;
 801927c:	2307      	movs	r3, #7
 801927e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
  }
  switch (packetIn.shape.n_shape)
 8019282:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8019286:	2b02      	cmp	r3, #2
 8019288:	d012      	beq.n	80192b0 <CB_storing_float_toFloat_helper+0xf4>
 801928a:	2b02      	cmp	r3, #2
 801928c:	dc48      	bgt.n	8019320 <CB_storing_float_toFloat_helper+0x164>
 801928e:	2b00      	cmp	r3, #0
 8019290:	d002      	beq.n	8019298 <CB_storing_float_toFloat_helper+0xdc>
 8019292:	2b01      	cmp	r3, #1
 8019294:	d004      	beq.n	80192a0 <CB_storing_float_toFloat_helper+0xe4>
 8019296:	e043      	b.n	8019320 <CB_storing_float_toFloat_helper+0x164>
  {
  case 0:
    xRes  = SYS_NOT_IMPLEMENTED_ERROR_CODE ;
 8019298:	2307      	movs	r3, #7
 801929a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    break;
 801929e:	e042      	b.n	8019326 <CB_storing_float_toFloat_helper+0x16a>
  case 1:
    width_in  = packetIn.shape.shapes[AI_LOGGING_SHAPES_WIDTH];
 80192a0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80192a4:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
    height_in = 1 ;
 80192a8:	2301      	movs	r3, #1
 80192aa:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    break;
 80192ae:	e03a      	b.n	8019326 <CB_storing_float_toFloat_helper+0x16a>
  case 2:
    width_in   = packetIn.shape.shapes[AI_LOGGING_SHAPES_WIDTH];
 80192b0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80192b4:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
    height_in  = packetIn.shape.shapes[AI_LOGGING_SHAPES_HEIGHT];
 80192b8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80192bc:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    width_out  = packetOut.shape.shapes[AI_LOGGING_SHAPES_WIDTH];
 80192c0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80192c2:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
    height_out = packetOut.shape.shapes[AI_LOGGING_SHAPES_HEIGHT];
 80192c6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80192c8:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    auto_transpose  = (width_in == height_out) || (height_in == width_out);
 80192cc:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 80192d0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80192d4:	429a      	cmp	r2, r3
 80192d6:	d005      	beq.n	80192e4 <CB_storing_float_toFloat_helper+0x128>
 80192d8:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 80192dc:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 80192e0:	429a      	cmp	r2, r3
 80192e2:	d101      	bne.n	80192e8 <CB_storing_float_toFloat_helper+0x12c>
 80192e4:	2301      	movs	r3, #1
 80192e6:	e000      	b.n	80192ea <CB_storing_float_toFloat_helper+0x12e>
 80192e8:	2300      	movs	r3, #0
 80192ea:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
 80192ee:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 80192f2:	f003 0301 	and.w	r3, r3, #1
 80192f6:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
    auto_transpose &= (width_in != height_in) ;
 80192fa:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 80192fe:	f8b7 108c 	ldrh.w	r1, [r7, #140]	; 0x8c
 8019302:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8019306:	4291      	cmp	r1, r2
 8019308:	bf14      	ite	ne
 801930a:	2201      	movne	r2, #1
 801930c:	2200      	moveq	r2, #0
 801930e:	b2d2      	uxtb	r2, r2
 8019310:	4013      	ands	r3, r2
 8019312:	2b00      	cmp	r3, #0
 8019314:	bf14      	ite	ne
 8019316:	2301      	movne	r3, #1
 8019318:	2300      	moveq	r3, #0
 801931a:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
    
    break;
 801931e:	e002      	b.n	8019326 <CB_storing_float_toFloat_helper+0x16a>
  default:
    xRes = SYS_NOT_IMPLEMENTED_ERROR_CODE ;
 8019320:	2307      	movs	r3, #7
 8019322:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
  
  /*
  todo fix the payload size settings first
  assert_param(p_stream->packet.payload_size == nbXfer * sizeof(int16));
  */
  if (xRes != SYS_NO_ERROR_CODE)
 8019326:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 801932a:	2b00      	cmp	r3, #0
 801932c:	d002      	beq.n	8019334 <CB_storing_float_toFloat_helper+0x178>
  {
    return xRes;
 801932e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8019332:	e103      	b.n	801953c <CB_storing_float_toFloat_helper+0x380>
  }
  
  if (p_workingCB->pProducerDataBuff == NULL)
 8019334:	68bb      	ldr	r3, [r7, #8]
 8019336:	685b      	ldr	r3, [r3, #4]
 8019338:	2b00      	cmp	r3, #0
 801933a:	d10a      	bne.n	8019352 <CB_storing_float_toFloat_helper+0x196>
  {
    xRes = CB_GetFreeItemFromHead(p_workingCB->pCircularBuffer, &p_workingCB->pProducerDataBuff);
 801933c:	68bb      	ldr	r3, [r7, #8]
 801933e:	681a      	ldr	r2, [r3, #0]
 8019340:	68bb      	ldr	r3, [r7, #8]
 8019342:	3304      	adds	r3, #4
 8019344:	4619      	mov	r1, r3
 8019346:	4610      	mov	r0, r2
 8019348:	f000 fcb0 	bl	8019cac <CB_GetFreeItemFromHead>
 801934c:	4603      	mov	r3, r0
 801934e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
  }

  if (xRes != SYS_NO_ERROR_CODE)
 8019352:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8019356:	2b00      	cmp	r3, #0
 8019358:	d002      	beq.n	8019360 <CB_storing_float_toFloat_helper+0x1a4>
  {
    return xRes;
 801935a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 801935e:	e0ed      	b.n	801953c <CB_storing_float_toFloat_helper+0x380>
  }
  
  /* initialize the loop */
  CB_ItemSize = (uint16_t) CB_GetItemSize(p_workingCB->pCircularBuffer) / sizeof(float);
 8019360:	68bb      	ldr	r3, [r7, #8]
 8019362:	681b      	ldr	r3, [r3, #0]
 8019364:	4618      	mov	r0, r3
 8019366:	f000 fc83 	bl	8019c70 <CB_GetItemSize>
 801936a:	4603      	mov	r3, r0
 801936c:	089b      	lsrs	r3, r3, #2
 801936e:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
  p_inData    = (float *)(p_stream->packet.payload);
 8019372:	687b      	ldr	r3, [r7, #4]
 8019374:	685b      	ldr	r3, [r3, #4]
 8019376:	67fb      	str	r3, [r7, #124]	; 0x7c
  p_outData   = ((float *) CB_GetItemData(p_workingCB->pProducerDataBuff));
 8019378:	68bb      	ldr	r3, [r7, #8]
 801937a:	685b      	ldr	r3, [r3, #4]
 801937c:	4618      	mov	r0, r3
 801937e:	f000 fd99 	bl	8019eb4 <CB_GetItemData>
 8019382:	67b8      	str	r0, [r7, #120]	; 0x78
  p_outData  +=  auto_transpose ?  p_workingCB->DataIdx / width_in : p_workingCB->DataIdx;
 8019384:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 8019388:	2b00      	cmp	r3, #0
 801938a:	d008      	beq.n	801939e <CB_storing_float_toFloat_helper+0x1e2>
 801938c:	68bb      	ldr	r3, [r7, #8]
 801938e:	899a      	ldrh	r2, [r3, #12]
 8019390:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8019394:	fbb2 f3f3 	udiv	r3, r2, r3
 8019398:	b29b      	uxth	r3, r3
 801939a:	009b      	lsls	r3, r3, #2
 801939c:	e002      	b.n	80193a4 <CB_storing_float_toFloat_helper+0x1e8>
 801939e:	68bb      	ldr	r3, [r7, #8]
 80193a0:	899b      	ldrh	r3, [r3, #12]
 80193a2:	009b      	lsls	r3, r3, #2
 80193a4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80193a6:	4413      	add	r3, r2
 80193a8:	67bb      	str	r3, [r7, #120]	; 0x78
  nbXfer      = width_in * height_in;
 80193aa:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 80193ae:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80193b2:	fb12 f303 	smulbb	r3, r2, r3
 80193b6:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
  
  while (nbXfer)
 80193ba:	e0b8      	b.n	801952e <CB_storing_float_toFloat_helper+0x372>
  {
    uint16_t CB_remains = CB_ItemSize - p_workingCB->DataIdx;
 80193bc:	68bb      	ldr	r3, [r7, #8]
 80193be:	899b      	ldrh	r3, [r3, #12]
 80193c0:	f8b7 206a 	ldrh.w	r2, [r7, #106]	; 0x6a
 80193c4:	1ad3      	subs	r3, r2, r3
 80193c6:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
    uint16_t n_loop = ( nbXfer > CB_remains ) ? CB_remains : nbXfer ;
 80193ca:	f8b7 2082 	ldrh.w	r2, [r7, #130]	; 0x82
 80193ce:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 80193d2:	4293      	cmp	r3, r2
 80193d4:	bf28      	it	cs
 80193d6:	4613      	movcs	r3, r2
 80193d8:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
    if (auto_transpose)
 80193dc:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 80193e0:	2b00      	cmp	r3, #0
 80193e2:	d03d      	beq.n	8019460 <CB_storing_float_toFloat_helper+0x2a4>
    {
      uint16_t outer_loop = n_loop/width_out;
 80193e4:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 80193e8:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 80193ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80193f0:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      assert_param(n_loop == outer_loop * width_out);
 80193f4:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 80193f8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80193fc:	f8b7 1088 	ldrh.w	r1, [r7, #136]	; 0x88
 8019400:	fb01 f303 	mul.w	r3, r1, r3
 8019404:	429a      	cmp	r2, r3
 8019406:	d004      	beq.n	8019412 <CB_storing_float_toFloat_helper+0x256>
 8019408:	f240 3177 	movw	r1, #887	; 0x377
 801940c:	4816      	ldr	r0, [pc, #88]	; (8019468 <CB_storing_float_toFloat_helper+0x2ac>)
 801940e:	f7fb ff4c 	bl	80152aa <assert_failed>
      for (int i = 0; i < outer_loop ; i++)
 8019412:	2300      	movs	r3, #0
 8019414:	677b      	str	r3, [r7, #116]	; 0x74
 8019416:	e01d      	b.n	8019454 <CB_storing_float_toFloat_helper+0x298>
      {
        for (int j = 0; j < width_out ; j++)
 8019418:	2300      	movs	r3, #0
 801941a:	673b      	str	r3, [r7, #112]	; 0x70
 801941c:	e00f      	b.n	801943e <CB_storing_float_toFloat_helper+0x282>
        {
          *(p_outData+j*height_out) = (float) *p_inData++;
 801941e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8019420:	1d1a      	adds	r2, r3, #4
 8019422:	67fa      	str	r2, [r7, #124]	; 0x7c
 8019424:	f8b7 2086 	ldrh.w	r2, [r7, #134]	; 0x86
 8019428:	6f39      	ldr	r1, [r7, #112]	; 0x70
 801942a:	fb01 f202 	mul.w	r2, r1, r2
 801942e:	0092      	lsls	r2, r2, #2
 8019430:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8019432:	440a      	add	r2, r1
 8019434:	681b      	ldr	r3, [r3, #0]
 8019436:	6013      	str	r3, [r2, #0]
        for (int j = 0; j < width_out ; j++)
 8019438:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801943a:	3301      	adds	r3, #1
 801943c:	673b      	str	r3, [r7, #112]	; 0x70
 801943e:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8019442:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8019444:	429a      	cmp	r2, r3
 8019446:	dbea      	blt.n	801941e <CB_storing_float_toFloat_helper+0x262>
        }
        p_outData++;
 8019448:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801944a:	3304      	adds	r3, #4
 801944c:	67bb      	str	r3, [r7, #120]	; 0x78
      for (int i = 0; i < outer_loop ; i++)
 801944e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8019450:	3301      	adds	r3, #1
 8019452:	677b      	str	r3, [r7, #116]	; 0x74
 8019454:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8019458:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801945a:	429a      	cmp	r2, r3
 801945c:	dbdc      	blt.n	8019418 <CB_storing_float_toFloat_helper+0x25c>
 801945e:	e017      	b.n	8019490 <CB_storing_float_toFloat_helper+0x2d4>
      }
    }
    else
    {
      for (int i = 0; i < n_loop ; i++)
 8019460:	2300      	movs	r3, #0
 8019462:	66fb      	str	r3, [r7, #108]	; 0x6c
 8019464:	e00f      	b.n	8019486 <CB_storing_float_toFloat_helper+0x2ca>
 8019466:	bf00      	nop
 8019468:	08026f74 	.word	0x08026f74
 801946c:	00821000 	.word	0x00821000
      {
        *p_outData++ = (float) *p_inData++;
 8019470:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8019472:	1d13      	adds	r3, r2, #4
 8019474:	67fb      	str	r3, [r7, #124]	; 0x7c
 8019476:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8019478:	1d19      	adds	r1, r3, #4
 801947a:	67b9      	str	r1, [r7, #120]	; 0x78
 801947c:	6812      	ldr	r2, [r2, #0]
 801947e:	601a      	str	r2, [r3, #0]
      for (int i = 0; i < n_loop ; i++)
 8019480:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019482:	3301      	adds	r3, #1
 8019484:	66fb      	str	r3, [r7, #108]	; 0x6c
 8019486:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 801948a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801948c:	429a      	cmp	r2, r3
 801948e:	dbef      	blt.n	8019470 <CB_storing_float_toFloat_helper+0x2b4>
      }
    }
    
    nbXfer               -= n_loop;
 8019490:	f8b7 2082 	ldrh.w	r2, [r7, #130]	; 0x82
 8019494:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8019498:	1ad3      	subs	r3, r2, r3
 801949a:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
    CB_remains           -= n_loop;
 801949e:	f8b7 2068 	ldrh.w	r2, [r7, #104]	; 0x68
 80194a2:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80194a6:	1ad3      	subs	r3, r2, r3
 80194a8:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
    p_workingCB->DataIdx += n_loop;
 80194ac:	68bb      	ldr	r3, [r7, #8]
 80194ae:	899a      	ldrh	r2, [r3, #12]
 80194b0:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80194b4:	4413      	add	r3, r2
 80194b6:	b29a      	uxth	r2, r3
 80194b8:	68bb      	ldr	r3, [r7, #8]
 80194ba:	819a      	strh	r2, [r3, #12]
    
    if (CB_remains == 0 ) /* a CB item is full , can proceed with processing */
 80194bc:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 80194c0:	2b00      	cmp	r3, #0
 80194c2:	d134      	bne.n	801952e <CB_storing_float_toFloat_helper+0x372>
    {
      /* set CB item ready and claim another free one if possible , if not this we are breaking RT */
      CB_SetItemReady(p_workingCB->pCircularBuffer, p_workingCB->pProducerDataBuff);
 80194c4:	68bb      	ldr	r3, [r7, #8]
 80194c6:	681a      	ldr	r2, [r3, #0]
 80194c8:	68bb      	ldr	r3, [r7, #8]
 80194ca:	685b      	ldr	r3, [r3, #4]
 80194cc:	4619      	mov	r1, r3
 80194ce:	4610      	mov	r0, r2
 80194d0:	f000 fcbc 	bl	8019e4c <CB_SetItemReady>
      xRes = CB_GetFreeItemFromHead(p_workingCB->pCircularBuffer, &p_workingCB->pProducerDataBuff);
 80194d4:	68bb      	ldr	r3, [r7, #8]
 80194d6:	681a      	ldr	r2, [r3, #0]
 80194d8:	68bb      	ldr	r3, [r7, #8]
 80194da:	3304      	adds	r3, #4
 80194dc:	4619      	mov	r1, r3
 80194de:	4610      	mov	r0, r2
 80194e0:	f000 fbe4 	bl	8019cac <CB_GetFreeItemFromHead>
 80194e4:	4603      	mov	r3, r0
 80194e6:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
      p_workingCB->DataIdx =  0;
 80194ea:	68bb      	ldr	r3, [r7, #8]
 80194ec:	2200      	movs	r2, #0
 80194ee:	819a      	strh	r2, [r3, #12]
      if(xRes != CB_NO_ERROR_CODE)
 80194f0:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80194f4:	2b00      	cmp	r3, #0
 80194f6:	d004      	beq.n	8019502 <CB_storing_float_toFloat_helper+0x346>
      {
        sys_error_handler();
 80194f8:	f7f5 fc2e 	bl	800ed58 <sys_error_handler>
        return xRes;
 80194fc:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8019500:	e01c      	b.n	801953c <CB_storing_float_toFloat_helper+0x380>
      }
      p_outData =  CB_GetItemData(p_workingCB->pProducerDataBuff);
 8019502:	68bb      	ldr	r3, [r7, #8]
 8019504:	685b      	ldr	r3, [r3, #4]
 8019506:	4618      	mov	r0, r3
 8019508:	f000 fcd4 	bl	8019eb4 <CB_GetItemData>
 801950c:	67b8      	str	r0, [r7, #120]	; 0x78
      
      if(_this->notifyCall != NULL)
 801950e:	68fb      	ldr	r3, [r7, #12]
 8019510:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8019512:	2b00      	cmp	r3, #0
 8019514:	d008      	beq.n	8019528 <CB_storing_float_toFloat_helper+0x36c>
      {
        _this->notifyCall((IDPU*)_this, _this->p_callback_param);
 8019516:	68fb      	ldr	r3, [r7, #12]
 8019518:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801951a:	68fa      	ldr	r2, [r7, #12]
 801951c:	f8d2 2104 	ldr.w	r2, [r2, #260]	; 0x104
 8019520:	4611      	mov	r1, r2
 8019522:	68f8      	ldr	r0, [r7, #12]
 8019524:	4798      	blx	r3
 8019526:	e002      	b.n	801952e <CB_storing_float_toFloat_helper+0x372>
      }
      else
      {
        IDPU_Process((IDPU *)_this);
 8019528:	68f8      	ldr	r0, [r7, #12]
 801952a:	f000 fd52 	bl	8019fd2 <IDPU_Process>
  while (nbXfer)
 801952e:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8019532:	2b00      	cmp	r3, #0
 8019534:	f47f af42 	bne.w	80193bc <CB_storing_float_toFloat_helper+0x200>
      }
    }
  }
  return xRes;
 8019538:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
}
 801953c:	4618      	mov	r0, r3
 801953e:	3790      	adds	r7, #144	; 0x90
 8019540:	46bd      	mov	sp, r7
 8019542:	bdb0      	pop	{r4, r5, r7, pc}

08019544 <GetSensor>:

static SensorObs_t *GetSensor(ADPU *_this, uint8_t id)
{
 8019544:	b580      	push	{r7, lr}
 8019546:	b082      	sub	sp, #8
 8019548:	af00      	add	r7, sp, #0
 801954a:	6078      	str	r0, [r7, #4]
 801954c:	460b      	mov	r3, r1
 801954e:	70fb      	strb	r3, [r7, #3]
  assert_param(_this != NULL);
 8019550:	687b      	ldr	r3, [r7, #4]
 8019552:	2b00      	cmp	r3, #0
 8019554:	d104      	bne.n	8019560 <GetSensor+0x1c>
 8019556:	f240 31a9 	movw	r1, #937	; 0x3a9
 801955a:	4807      	ldr	r0, [pc, #28]	; (8019578 <GetSensor+0x34>)
 801955c:	f7fb fea5 	bl	80152aa <assert_failed>
  return &_this->sensors[id];
 8019560:	78fa      	ldrb	r2, [r7, #3]
 8019562:	4613      	mov	r3, r2
 8019564:	005b      	lsls	r3, r3, #1
 8019566:	4413      	add	r3, r2
 8019568:	00db      	lsls	r3, r3, #3
 801956a:	3310      	adds	r3, #16
 801956c:	687a      	ldr	r2, [r7, #4]
 801956e:	4413      	add	r3, r2
}
 8019570:	4618      	mov	r0, r3
 8019572:	3708      	adds	r7, #8
 8019574:	46bd      	mov	sp, r7
 8019576:	bd80      	pop	{r7, pc}
 8019578:	08026f74 	.word	0x08026f74

0801957c <SetNextDPU>:

static void SetNextDPU(ADPU *_this, ADPU *target)
{
 801957c:	b580      	push	{r7, lr}
 801957e:	b082      	sub	sp, #8
 8019580:	af00      	add	r7, sp, #0
 8019582:	6078      	str	r0, [r7, #4]
 8019584:	6039      	str	r1, [r7, #0]
  assert_param(_this != NULL);
 8019586:	687b      	ldr	r3, [r7, #4]
 8019588:	2b00      	cmp	r3, #0
 801958a:	d104      	bne.n	8019596 <SetNextDPU+0x1a>
 801958c:	f240 31af 	movw	r1, #943	; 0x3af
 8019590:	4808      	ldr	r0, [pc, #32]	; (80195b4 <SetNextDPU+0x38>)
 8019592:	f7fb fe8a 	bl	80152aa <assert_failed>
  assert_param(target != NULL);
 8019596:	683b      	ldr	r3, [r7, #0]
 8019598:	2b00      	cmp	r3, #0
 801959a:	d104      	bne.n	80195a6 <SetNextDPU+0x2a>
 801959c:	f44f 716c 	mov.w	r1, #944	; 0x3b0
 80195a0:	4804      	ldr	r0, [pc, #16]	; (80195b4 <SetNextDPU+0x38>)
 80195a2:	f7fb fe82 	bl	80152aa <assert_failed>
  _this->nextADPU = (IDPU*)target;
 80195a6:	687b      	ldr	r3, [r7, #4]
 80195a8:	683a      	ldr	r2, [r7, #0]
 80195aa:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80195ac:	bf00      	nop
 80195ae:	3708      	adds	r7, #8
 80195b0:	46bd      	mov	sp, r7
 80195b2:	bd80      	pop	{r7, pc}
 80195b4:	08026f74 	.word	0x08026f74

080195b8 <IEventListenerSetOwner>:
void IEventListenerSetOwner(IEventListener *this, void *pxOwner) {
 80195b8:	b580      	push	{r7, lr}
 80195ba:	b082      	sub	sp, #8
 80195bc:	af00      	add	r7, sp, #0
 80195be:	6078      	str	r0, [r7, #4]
 80195c0:	6039      	str	r1, [r7, #0]
	this->vptr->SetOwner(this, pxOwner);
 80195c2:	687b      	ldr	r3, [r7, #4]
 80195c4:	681b      	ldr	r3, [r3, #0]
 80195c6:	685b      	ldr	r3, [r3, #4]
 80195c8:	6839      	ldr	r1, [r7, #0]
 80195ca:	6878      	ldr	r0, [r7, #4]
 80195cc:	4798      	blx	r3
}
 80195ce:	bf00      	nop
 80195d0:	3708      	adds	r7, #8
 80195d2:	46bd      	mov	sp, r7
 80195d4:	bd80      	pop	{r7, pc}

080195d6 <IEventInit>:

// Inline functions definition
// ***************************

SYS_DEFINE_STATIC_INLINE
sys_error_code_t IEventInit(IEvent *this, const IEventSrc *pSource) {
 80195d6:	b480      	push	{r7}
 80195d8:	b083      	sub	sp, #12
 80195da:	af00      	add	r7, sp, #0
 80195dc:	6078      	str	r0, [r7, #4]
 80195de:	6039      	str	r1, [r7, #0]
	this->pSource = pSource;
 80195e0:	687b      	ldr	r3, [r7, #4]
 80195e2:	683a      	ldr	r2, [r7, #0]
 80195e4:	601a      	str	r2, [r3, #0]

	return SYS_NO_ERROR_CODE;
 80195e6:	2300      	movs	r3, #0
}
 80195e8:	4618      	mov	r0, r3
 80195ea:	370c      	adds	r7, #12
 80195ec:	46bd      	mov	sp, r7
 80195ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80195f2:	4770      	bx	lr

080195f4 <ProcessEventInit>:

// Inline functions definition
// ***************************

SYS_DEFINE_STATIC_INLINE
sys_error_code_t ProcessEventInit(IEvent *_this, const IEventSrc *pSource,  ai_logging_packet_t   *stream, uint32_t tag) {
 80195f4:	b580      	push	{r7, lr}
 80195f6:	b086      	sub	sp, #24
 80195f8:	af00      	add	r7, sp, #0
 80195fa:	60f8      	str	r0, [r7, #12]
 80195fc:	60b9      	str	r1, [r7, #8]
 80195fe:	607a      	str	r2, [r7, #4]
 8019600:	603b      	str	r3, [r7, #0]
  assert_param(_this);
 8019602:	68fb      	ldr	r3, [r7, #12]
 8019604:	2b00      	cmp	r3, #0
 8019606:	d103      	bne.n	8019610 <ProcessEventInit+0x1c>
 8019608:	2158      	movs	r1, #88	; 0x58
 801960a:	480a      	ldr	r0, [pc, #40]	; (8019634 <ProcessEventInit+0x40>)
 801960c:	f7fb fe4d 	bl	80152aa <assert_failed>
  ProcessEvent *pObj = (ProcessEvent*)_this;
 8019610:	68fb      	ldr	r3, [r7, #12]
 8019612:	617b      	str	r3, [r7, #20]

  IEventInit(_this, pSource);
 8019614:	68b9      	ldr	r1, [r7, #8]
 8019616:	68f8      	ldr	r0, [r7, #12]
 8019618:	f7ff ffdd 	bl	80195d6 <IEventInit>
  pObj->stream = stream;
 801961c:	697b      	ldr	r3, [r7, #20]
 801961e:	687a      	ldr	r2, [r7, #4]
 8019620:	605a      	str	r2, [r3, #4]
  pObj->tag = tag;
 8019622:	697b      	ldr	r3, [r7, #20]
 8019624:	683a      	ldr	r2, [r7, #0]
 8019626:	609a      	str	r2, [r3, #8]

  return SYS_NO_ERROR_CODE;
 8019628:	2300      	movs	r3, #0
}
 801962a:	4618      	mov	r0, r3
 801962c:	3718      	adds	r7, #24
 801962e:	46bd      	mov	sp, r7
 8019630:	bd80      	pop	{r7, pc}
 8019632:	bf00      	nop
 8019634:	08026fd0 	.word	0x08026fd0

08019638 <AiDPUStaticAlloc>:
  }
  return p_obj;
}

IDPU *AiDPUStaticAlloc(void *p_mem_block)
{
 8019638:	b480      	push	{r7}
 801963a:	b085      	sub	sp, #20
 801963c:	af00      	add	r7, sp, #0
 801963e:	6078      	str	r0, [r7, #4]
  IDPU *p_obj = (IDPU*)p_mem_block;
 8019640:	687b      	ldr	r3, [r7, #4]
 8019642:	60fb      	str	r3, [r7, #12]
  if (p_obj != NULL)
 8019644:	68fb      	ldr	r3, [r7, #12]
 8019646:	2b00      	cmp	r3, #0
 8019648:	d002      	beq.n	8019650 <AiDPUStaticAlloc+0x18>
  {
    p_obj->vptr = &sAiDPU_vtbl;
 801964a:	68fb      	ldr	r3, [r7, #12]
 801964c:	4a04      	ldr	r2, [pc, #16]	; (8019660 <AiDPUStaticAlloc+0x28>)
 801964e:	601a      	str	r2, [r3, #0]
  }

  return p_obj;
 8019650:	68fb      	ldr	r3, [r7, #12]
}
 8019652:	4618      	mov	r0, r3
 8019654:	3714      	adds	r7, #20
 8019656:	46bd      	mov	sp, r7
 8019658:	f85d 7b04 	ldr.w	r7, [sp], #4
 801965c:	4770      	bx	lr
 801965e:	bf00      	nop
 8019660:	080357f8 	.word	0x080357f8

08019664 <AiDPUSetSensitivity>:

sys_error_code_t AiDPUSetSensitivity(AiDPU_t *_this, float sensi)
{
 8019664:	b580      	push	{r7, lr}
 8019666:	b082      	sub	sp, #8
 8019668:	af00      	add	r7, sp, #0
 801966a:	6078      	str	r0, [r7, #4]
 801966c:	ed87 0a00 	vstr	s0, [r7]
  assert_param(_this != NULL);
 8019670:	687b      	ldr	r3, [r7, #4]
 8019672:	2b00      	cmp	r3, #0
 8019674:	d103      	bne.n	801967e <AiDPUSetSensitivity+0x1a>
 8019676:	215e      	movs	r1, #94	; 0x5e
 8019678:	4808      	ldr	r0, [pc, #32]	; (801969c <AiDPUSetSensitivity+0x38>)
 801967a:	f7fb fe16 	bl	80152aa <assert_failed>

  _this->scale = sensi * AIDPU_G_TO_MS_2;
 801967e:	edd7 7a00 	vldr	s15, [r7]
 8019682:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80196a0 <AiDPUSetSensitivity+0x3c>
 8019686:	ee67 7a87 	vmul.f32	s15, s15, s14
 801968a:	687b      	ldr	r3, [r7, #4]
 801968c:	edc3 7a46 	vstr	s15, [r3, #280]	; 0x118

  return SYS_NO_ERROR_CODE;
 8019690:	2300      	movs	r3, #0
}
 8019692:	4618      	mov	r0, r3
 8019694:	3708      	adds	r7, #8
 8019696:	46bd      	mov	sp, r7
 8019698:	bd80      	pop	{r7, pc}
 801969a:	bf00      	nop
 801969c:	08027058 	.word	0x08027058
 80196a0:	411ccccd 	.word	0x411ccccd

080196a4 <AiDPUSetStreamsParam>:

  return res;
}

uint16_t AiDPUSetStreamsParam(AiDPU_t *_this, uint16_t signal_size, uint8_t axes, uint8_t cb_items)
{
 80196a4:	b580      	push	{r7, lr}
 80196a6:	b082      	sub	sp, #8
 80196a8:	af00      	add	r7, sp, #0
 80196aa:	6078      	str	r0, [r7, #4]
 80196ac:	4608      	mov	r0, r1
 80196ae:	4611      	mov	r1, r2
 80196b0:	461a      	mov	r2, r3
 80196b2:	4603      	mov	r3, r0
 80196b4:	807b      	strh	r3, [r7, #2]
 80196b6:	460b      	mov	r3, r1
 80196b8:	707b      	strb	r3, [r7, #1]
 80196ba:	4613      	mov	r3, r2
 80196bc:	703b      	strb	r3, [r7, #0]
  assert_param(_this != NULL);
 80196be:	687b      	ldr	r3, [r7, #4]
 80196c0:	2b00      	cmp	r3, #0
 80196c2:	d103      	bne.n	80196cc <AiDPUSetStreamsParam+0x28>
 80196c4:	2178      	movs	r1, #120	; 0x78
 80196c6:	4828      	ldr	r0, [pc, #160]	; (8019768 <AiDPUSetStreamsParam+0xc4>)
 80196c8:	f7fb fdef 	bl	80152aa <assert_failed>

  if (!AiDPUAreStreamsInitialized(_this))
 80196cc:	6878      	ldr	r0, [r7, #4]
 80196ce:	f000 fa25 	bl	8019b1c <AiDPUAreStreamsInitialized>
  {
    /* DPU has been already initialized, so first reset it, if needed */
  }

  /* DPU converts input data in float */
  _this->super.dpuWorkingStream.packet.payload_type = AI_FMT;
 80196d2:	687b      	ldr	r3, [r7, #4]
 80196d4:	220d      	movs	r2, #13
 80196d6:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
  _this->super.dpuWorkingStream.packet.payload_fmt  = AI_SP_FMT_FLOAT32_RESET();
 80196da:	687b      	ldr	r3, [r7, #4]
 80196dc:	4a23      	ldr	r2, [pc, #140]	; (801976c <AiDPUSetStreamsParam+0xc8>)
 80196de:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

  /* the shape is 2D the accelerometer is 3 AXES (X,Y,Z)  */
  _this->super.dpuWorkingStream.packet.shape.n_shape                          = 2 ;
 80196e2:	687b      	ldr	r3, [r7, #4]
 80196e4:	2202      	movs	r2, #2
 80196e6:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
  _this->super.dpuWorkingStream.packet.shape.shapes[AI_LOGGING_SHAPES_WIDTH]  = axes;
 80196ea:	787b      	ldrb	r3, [r7, #1]
 80196ec:	b29a      	uxth	r2, r3
 80196ee:	687b      	ldr	r3, [r7, #4]
 80196f0:	f8a3 20be 	strh.w	r2, [r3, #190]	; 0xbe
  _this->super.dpuWorkingStream.packet.shape.shapes[AI_LOGGING_SHAPES_HEIGHT] = signal_size;
 80196f4:	687b      	ldr	r3, [r7, #4]
 80196f6:	887a      	ldrh	r2, [r7, #2]
 80196f8:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0

  /* Initialize the out stream */
  _this->super.dpuOutStream.packet.shape.n_shape                         = 1;
 80196fc:	687b      	ldr	r3, [r7, #4]
 80196fe:	2201      	movs	r2, #1
 8019700:	f8a3 20e8 	strh.w	r2, [r3, #232]	; 0xe8
  _this->super.dpuOutStream.packet.shape.shapes[AI_LOGGING_SHAPES_WIDTH] = 2;
 8019704:	687b      	ldr	r3, [r7, #4]
 8019706:	2202      	movs	r2, #2
 8019708:	f8a3 20ea 	strh.w	r2, [r3, #234]	; 0xea
  _this->super.dpuOutStream.packet.payload_type = AI_FMT;
 801970c:	687b      	ldr	r3, [r7, #4]
 801970e:	220d      	movs	r2, #13
 8019710:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
  _this->super.dpuOutStream.packet.payload_fmt  = AI_SP_FMT_FLOAT32_RESET();
 8019714:	687b      	ldr	r3, [r7, #4]
 8019716:	4a15      	ldr	r2, [pc, #84]	; (801976c <AiDPUSetStreamsParam+0xc8>)
 8019718:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  _this->super.dpuOutStream.packet.payload_size = sizeof(_this->ai_out);
 801971c:	687b      	ldr	r3, [r7, #4]
 801971e:	2208      	movs	r2, #8
 8019720:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
  _this->super.dpuOutStream.packet.payload      = (uint8_t*)&_this->ai_out[0];
 8019724:	687b      	ldr	r3, [r7, #4]
 8019726:	f503 7288 	add.w	r2, r3, #272	; 0x110
 801972a:	687b      	ldr	r3, [r7, #4]
 801972c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /* compute the size in byte of one cb item, */
  _this->super.n_bytes_for_item = axes * signal_size * sizeof(float);
 8019730:	787b      	ldrb	r3, [r7, #1]
 8019732:	887a      	ldrh	r2, [r7, #2]
 8019734:	fb02 f303 	mul.w	r3, r2, r3
 8019738:	009a      	lsls	r2, r3, #2
 801973a:	687b      	ldr	r3, [r7, #4]
 801973c:	679a      	str	r2, [r3, #120]	; 0x78
  _this->super.cb_items         = cb_items;
 801973e:	687b      	ldr	r3, [r7, #4]
 8019740:	783a      	ldrb	r2, [r7, #0]
 8019742:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  _this->stream_ready = TRUE;
 8019746:	687b      	ldr	r3, [r7, #4]
 8019748:	2201      	movs	r2, #1
 801974a:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c

  return (cb_items * _this->super.n_bytes_for_item);
 801974e:	783b      	ldrb	r3, [r7, #0]
 8019750:	b29a      	uxth	r2, r3
 8019752:	687b      	ldr	r3, [r7, #4]
 8019754:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8019756:	b29b      	uxth	r3, r3
 8019758:	fb12 f303 	smulbb	r3, r2, r3
 801975c:	b29b      	uxth	r3, r3
}
 801975e:	4618      	mov	r0, r3
 8019760:	3708      	adds	r7, #8
 8019762:	46bd      	mov	sp, r7
 8019764:	bd80      	pop	{r7, pc}
 8019766:	bf00      	nop
 8019768:	08027058 	.word	0x08027058
 801976c:	00821000 	.word	0x00821000

08019770 <AiDPU_vtblInit>:


/* IDPU virtual functions definition */
/*************************************/

sys_error_code_t AiDPU_vtblInit(IDPU *_this) {
 8019770:	b580      	push	{r7, lr}
 8019772:	b084      	sub	sp, #16
 8019774:	af00      	add	r7, sp, #0
 8019776:	6078      	str	r0, [r7, #4]
  assert_param(_this != NULL);
 8019778:	687b      	ldr	r3, [r7, #4]
 801977a:	2b00      	cmp	r3, #0
 801977c:	d103      	bne.n	8019786 <AiDPU_vtblInit+0x16>
 801977e:	21aa      	movs	r1, #170	; 0xaa
 8019780:	481a      	ldr	r0, [pc, #104]	; (80197ec <AiDPU_vtblInit+0x7c>)
 8019782:	f7fb fd92 	bl	80152aa <assert_failed>
  sys_error_code_t res = SYS_NO_ERROR_CODE;
 8019786:	2300      	movs	r3, #0
 8019788:	81fb      	strh	r3, [r7, #14]
  AiDPU_t *p_obj =(AiDPU_t*)_this;
 801978a:	687b      	ldr	r3, [r7, #4]
 801978c:	60bb      	str	r3, [r7, #8]

  res = ADPU_Init_vtbl(_this);
 801978e:	6878      	ldr	r0, [r7, #4]
 8019790:	f7fe fc14 	bl	8017fbc <ADPU_Init_vtbl>
 8019794:	4603      	mov	r3, r0
 8019796:	81fb      	strh	r3, [r7, #14]
  if (!SYS_IS_ERROR_CODE(res))
 8019798:	89fb      	ldrh	r3, [r7, #14]
 801979a:	2b00      	cmp	r3, #0
 801979c:	d121      	bne.n	80197e2 <AiDPU_vtblInit+0x72>
  {
    p_obj->ai_out[0] = 0;
 801979e:	68bb      	ldr	r3, [r7, #8]
 80197a0:	f04f 0200 	mov.w	r2, #0
 80197a4:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    p_obj->ai_out[1] = 0;
 80197a8:	68bb      	ldr	r3, [r7, #8]
 80197aa:	f04f 0200 	mov.w	r2, #0
 80197ae:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    p_obj->stream_ready = FALSE;
 80197b2:	68bb      	ldr	r3, [r7, #8]
 80197b4:	2200      	movs	r2, #0
 80197b6:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
    // take the ownership of the Sensor Event IF
    IEventListenerSetOwner((IEventListener *) ADPU_GetEventListenerIF(&p_obj->super), &p_obj->super);
 80197ba:	68bb      	ldr	r3, [r7, #8]
 80197bc:	4618      	mov	r0, r3
 80197be:	f7fe fff3 	bl	80187a8 <ADPU_GetEventListenerIF>
 80197c2:	4602      	mov	r2, r0
 80197c4:	68bb      	ldr	r3, [r7, #8]
 80197c6:	4619      	mov	r1, r3
 80197c8:	4610      	mov	r0, r2
 80197ca:	f7ff fef5 	bl	80195b8 <IEventListenerSetOwner>

    /* initialize AI library */
    if (aiInit(AIDPU_NAME)==0)
 80197ce:	4808      	ldr	r0, [pc, #32]	; (80197f0 <AiDPU_vtblInit+0x80>)
 80197d0:	f7fc fc0a 	bl	8015fe8 <aiInit>
 80197d4:	4603      	mov	r3, r0
 80197d6:	2b00      	cmp	r3, #0
 80197d8:	d103      	bne.n	80197e2 <AiDPU_vtblInit+0x72>
    {
	  /* set the initial mode to process */
	  p_obj->ai_processing_f = aiProcess;
 80197da:	68bb      	ldr	r3, [r7, #8]
 80197dc:	4a05      	ldr	r2, [pc, #20]	; (80197f4 <AiDPU_vtblInit+0x84>)
 80197de:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    }
  }

  return res;
 80197e2:	89fb      	ldrh	r3, [r7, #14]
}
 80197e4:	4618      	mov	r0, r3
 80197e6:	3710      	adds	r7, #16
 80197e8:	46bd      	mov	sp, r7
 80197ea:	bd80      	pop	{r7, pc}
 80197ec:	08027058 	.word	0x08027058
 80197f0:	080270b8 	.word	0x080270b8
 80197f4:	08016081 	.word	0x08016081

080197f8 <AiDPU_vtblProcess>:

sys_error_code_t AiDPU_vtblProcess(IDPU *_this)
{
 80197f8:	b5b0      	push	{r4, r5, r7, lr}
 80197fa:	f5ad 7d20 	sub.w	sp, sp, #640	; 0x280
 80197fe:	af00      	add	r7, sp, #0
 8019800:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8019804:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8019808:	6018      	str	r0, [r3, #0]
  assert_param(_this != NULL);
 801980a:	f507 7320 	add.w	r3, r7, #640	; 0x280
 801980e:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8019812:	681b      	ldr	r3, [r3, #0]
 8019814:	2b00      	cmp	r3, #0
 8019816:	d103      	bne.n	8019820 <AiDPU_vtblProcess+0x28>
 8019818:	21c4      	movs	r1, #196	; 0xc4
 801981a:	48be      	ldr	r0, [pc, #760]	; (8019b14 <AiDPU_vtblProcess+0x31c>)
 801981c:	f7fb fd45 	bl	80152aa <assert_failed>
  sys_error_code_t xRes = SYS_NO_ERROR_CODE;
 8019820:	2300      	movs	r3, #0
 8019822:	f8a7 326a 	strh.w	r3, [r7, #618]	; 0x26a
  ADPU *super = (ADPU*) _this;
 8019826:	f507 7320 	add.w	r3, r7, #640	; 0x280
 801982a:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 801982e:	681b      	ldr	r3, [r3, #0]
 8019830:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
  AiDPU_t *p_obj = (AiDPU_t*) _this;
 8019834:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8019838:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 801983c:	681b      	ldr	r3, [r3, #0]
 801983e:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
  CBItem **p_consumer_buff = NULL;
 8019842:	2300      	movs	r3, #0
 8019844:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
  CircularBuffer *p_circular_buffer = NULL;
 8019848:	2300      	movs	r3, #0
 801984a:	f8c7 3278 	str.w	r3, [r7, #632]	; 0x278

  //DPU has the priority
  if(!super->isADPUattached)
 801984e:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8019852:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 8019856:	2b00      	cmp	r3, #0
 8019858:	d155      	bne.n	8019906 <AiDPU_vtblProcess+0x10e>
  {
    for(int i = 0; i < ADPU_CFG_MAX_SENSOR; i++)
 801985a:	2300      	movs	r3, #0
 801985c:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
 8019860:	e04c      	b.n	80198fc <AiDPU_vtblProcess+0x104>
    {
      if(super->sensors[i].sensorIF != NULL)
 8019862:	f8d7 1264 	ldr.w	r1, [r7, #612]	; 0x264
 8019866:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 801986a:	4613      	mov	r3, r2
 801986c:	005b      	lsls	r3, r3, #1
 801986e:	4413      	add	r3, r2
 8019870:	00db      	lsls	r3, r3, #3
 8019872:	440b      	add	r3, r1
 8019874:	3320      	adds	r3, #32
 8019876:	681b      	ldr	r3, [r3, #0]
 8019878:	2b00      	cmp	r3, #0
 801987a:	d03a      	beq.n	80198f2 <AiDPU_vtblProcess+0xfa>
      { //TODO sensors[i].pConsumerDataBuff could be not necessary
        uint32_t sensor_ready = CB_GetReadyItemFromTail(super->sensors[i].cb_handle.pCircularBuffer, &super->sensors[i].cb_handle.pConsumerDataBuff);
 801987c:	f8d7 1264 	ldr.w	r1, [r7, #612]	; 0x264
 8019880:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 8019884:	4613      	mov	r3, r2
 8019886:	005b      	lsls	r3, r3, #1
 8019888:	4413      	add	r3, r2
 801988a:	00db      	lsls	r3, r3, #3
 801988c:	440b      	add	r3, r1
 801988e:	3310      	adds	r3, #16
 8019890:	6818      	ldr	r0, [r3, #0]
 8019892:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 8019896:	1c5a      	adds	r2, r3, #1
 8019898:	4613      	mov	r3, r2
 801989a:	005b      	lsls	r3, r3, #1
 801989c:	4413      	add	r3, r2
 801989e:	00db      	lsls	r3, r3, #3
 80198a0:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 80198a4:	4413      	add	r3, r2
 80198a6:	4619      	mov	r1, r3
 80198a8:	f000 fa50 	bl	8019d4c <CB_GetReadyItemFromTail>
 80198ac:	f8c7 0258 	str.w	r0, [r7, #600]	; 0x258
        if(sensor_ready == SYS_CB_NO_READY_ITEM_ERROR_CODE)
 80198b0:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 80198b4:	f5b3 7f17 	cmp.w	r3, #604	; 0x25c
 80198b8:	d102      	bne.n	80198c0 <AiDPU_vtblProcess+0xc8>
        {
//          return SYS_NO_ERROR_CODE;
          return SYS_CB_NO_READY_ITEM_ERROR_CODE;
 80198ba:	f44f 7317 	mov.w	r3, #604	; 0x25c
 80198be:	e124      	b.n	8019b0a <AiDPU_vtblProcess+0x312>
        }
        p_consumer_buff = &super->sensors[i].cb_handle.pConsumerDataBuff;
 80198c0:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 80198c4:	1c5a      	adds	r2, r3, #1
 80198c6:	4613      	mov	r3, r2
 80198c8:	005b      	lsls	r3, r3, #1
 80198ca:	4413      	add	r3, r2
 80198cc:	00db      	lsls	r3, r3, #3
 80198ce:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 80198d2:	4413      	add	r3, r2
 80198d4:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
        p_circular_buffer = super->sensors[i].cb_handle.pCircularBuffer;
 80198d8:	f8d7 1264 	ldr.w	r1, [r7, #612]	; 0x264
 80198dc:	f8d7 2274 	ldr.w	r2, [r7, #628]	; 0x274
 80198e0:	4613      	mov	r3, r2
 80198e2:	005b      	lsls	r3, r3, #1
 80198e4:	4413      	add	r3, r2
 80198e6:	00db      	lsls	r3, r3, #3
 80198e8:	440b      	add	r3, r1
 80198ea:	3310      	adds	r3, #16
 80198ec:	681b      	ldr	r3, [r3, #0]
 80198ee:	f8c7 3278 	str.w	r3, [r7, #632]	; 0x278
    for(int i = 0; i < ADPU_CFG_MAX_SENSOR; i++)
 80198f2:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 80198f6:	3301      	adds	r3, #1
 80198f8:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
 80198fc:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 8019900:	2b02      	cmp	r3, #2
 8019902:	ddae      	ble.n	8019862 <AiDPU_vtblProcess+0x6a>
 8019904:	e01d      	b.n	8019942 <AiDPU_vtblProcess+0x14a>
      }
    }
  }
  else
  {
    uint32_t process_ready = CB_GetReadyItemFromTail(super->AttachedAdpu.cb_handle.pCircularBuffer, &super->AttachedAdpu.cb_handle.pConsumerDataBuff);
 8019906:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 801990a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 801990c:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8019910:	3368      	adds	r3, #104	; 0x68
 8019912:	4619      	mov	r1, r3
 8019914:	4610      	mov	r0, r2
 8019916:	f000 fa19 	bl	8019d4c <CB_GetReadyItemFromTail>
 801991a:	f8c7 025c 	str.w	r0, [r7, #604]	; 0x25c
    if(process_ready == SYS_CB_NO_READY_ITEM_ERROR_CODE)
 801991e:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8019922:	f5b3 7f17 	cmp.w	r3, #604	; 0x25c
 8019926:	d102      	bne.n	801992e <AiDPU_vtblProcess+0x136>
    {
//      return SYS_NO_ERROR_CODE;
      return SYS_CB_NO_READY_ITEM_ERROR_CODE;
 8019928:	f44f 7317 	mov.w	r3, #604	; 0x25c
 801992c:	e0ed      	b.n	8019b0a <AiDPU_vtblProcess+0x312>
    }
    p_consumer_buff = &super->AttachedAdpu.cb_handle.pConsumerDataBuff;
 801992e:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8019932:	3368      	adds	r3, #104	; 0x68
 8019934:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
    p_circular_buffer = super->AttachedAdpu.cb_handle.pCircularBuffer;
 8019938:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 801993c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801993e:	f8c7 3278 	str.w	r3, [r7, #632]	; 0x278
  }

  if((*p_consumer_buff) != NULL)
 8019942:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 8019946:	681b      	ldr	r3, [r3, #0]
 8019948:	2b00      	cmp	r3, #0
 801994a:	f000 80dc 	beq.w	8019b06 <AiDPU_vtblProcess+0x30e>
  {
    GRAV_input_t gravIn[AIDPU_NB_SAMPLE];
    GRAV_input_t gravOut[AIDPU_NB_SAMPLE];

    assert_param(p_obj->scale != 0.0F);
 801994e:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8019952:	edd3 7a46 	vldr	s15, [r3, #280]	; 0x118
 8019956:	eef5 7a40 	vcmp.f32	s15, #0.0
 801995a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801995e:	d103      	bne.n	8019968 <AiDPU_vtblProcess+0x170>
 8019960:	21ee      	movs	r1, #238	; 0xee
 8019962:	486c      	ldr	r0, [pc, #432]	; (8019b14 <AiDPU_vtblProcess+0x31c>)
 8019964:	f7fb fca1 	bl	80152aa <assert_failed>
    assert_param(AIDPU_AI_PROC_IN_SIZE == AIDPU_NB_SAMPLE*AIDPU_NB_AXIS);
    assert_param(AIDPU_NB_AXIS == p_obj->super.dpuWorkingStream.packet.shape.shapes[AI_LOGGING_SHAPES_WIDTH]);
 8019968:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 801996c:	f8b3 30be 	ldrh.w	r3, [r3, #190]	; 0xbe
 8019970:	2b03      	cmp	r3, #3
 8019972:	d003      	beq.n	801997c <AiDPU_vtblProcess+0x184>
 8019974:	21f0      	movs	r1, #240	; 0xf0
 8019976:	4867      	ldr	r0, [pc, #412]	; (8019b14 <AiDPU_vtblProcess+0x31c>)
 8019978:	f7fb fc97 	bl	80152aa <assert_failed>
    assert_param(AIDPU_NB_SAMPLE == p_obj->super.dpuWorkingStream.packet.shape.shapes[AI_LOGGING_SHAPES_HEIGHT]);
 801997c:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8019980:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 8019984:	2b18      	cmp	r3, #24
 8019986:	d003      	beq.n	8019990 <AiDPU_vtblProcess+0x198>
 8019988:	21f1      	movs	r1, #241	; 0xf1
 801998a:	4862      	ldr	r0, [pc, #392]	; (8019b14 <AiDPU_vtblProcess+0x31c>)
 801998c:	f7fb fc8d 	bl	80152aa <assert_failed>

    float *p_in = (float*) CB_GetItemData((*p_consumer_buff));
 8019990:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 8019994:	681b      	ldr	r3, [r3, #0]
 8019996:	4618      	mov	r0, r3
 8019998:	f000 fa8c 	bl	8019eb4 <CB_GetItemData>
 801999c:	f8c7 0270 	str.w	r0, [r7, #624]	; 0x270
    float scale = p_obj->scale;
 80199a0:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 80199a4:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 80199a8:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
    for(int i = 0; i < AIDPU_NB_SAMPLE; i++)
 80199ac:	2300      	movs	r3, #0
 80199ae:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
 80199b2:	e070      	b.n	8019a96 <AiDPU_vtblProcess+0x29e>
    {
      gravIn[i].AccX = *p_in++ * scale;
 80199b4:	f8d7 3270 	ldr.w	r3, [r7, #624]	; 0x270
 80199b8:	1d1a      	adds	r2, r3, #4
 80199ba:	f8c7 2270 	str.w	r2, [r7, #624]	; 0x270
 80199be:	ed93 7a00 	vldr	s14, [r3]
 80199c2:	edd7 7a95 	vldr	s15, [r7, #596]	; 0x254
 80199c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80199ca:	f507 7320 	add.w	r3, r7, #640	; 0x280
 80199ce:	f5a3 711e 	sub.w	r1, r3, #632	; 0x278
 80199d2:	f8d7 226c 	ldr.w	r2, [r7, #620]	; 0x26c
 80199d6:	4613      	mov	r3, r2
 80199d8:	005b      	lsls	r3, r3, #1
 80199da:	4413      	add	r3, r2
 80199dc:	009b      	lsls	r3, r3, #2
 80199de:	440b      	add	r3, r1
 80199e0:	edc3 7a00 	vstr	s15, [r3]
      gravIn[i].AccY = *p_in++ * scale;
 80199e4:	f8d7 3270 	ldr.w	r3, [r7, #624]	; 0x270
 80199e8:	1d1a      	adds	r2, r3, #4
 80199ea:	f8c7 2270 	str.w	r2, [r7, #624]	; 0x270
 80199ee:	ed93 7a00 	vldr	s14, [r3]
 80199f2:	edd7 7a95 	vldr	s15, [r7, #596]	; 0x254
 80199f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80199fa:	f507 7320 	add.w	r3, r7, #640	; 0x280
 80199fe:	f5a3 711e 	sub.w	r1, r3, #632	; 0x278
 8019a02:	f8d7 226c 	ldr.w	r2, [r7, #620]	; 0x26c
 8019a06:	4613      	mov	r3, r2
 8019a08:	005b      	lsls	r3, r3, #1
 8019a0a:	4413      	add	r3, r2
 8019a0c:	009b      	lsls	r3, r3, #2
 8019a0e:	440b      	add	r3, r1
 8019a10:	3304      	adds	r3, #4
 8019a12:	edc3 7a00 	vstr	s15, [r3]
      gravIn[i].AccZ = *p_in++ * scale;
 8019a16:	f8d7 3270 	ldr.w	r3, [r7, #624]	; 0x270
 8019a1a:	1d1a      	adds	r2, r3, #4
 8019a1c:	f8c7 2270 	str.w	r2, [r7, #624]	; 0x270
 8019a20:	ed93 7a00 	vldr	s14, [r3]
 8019a24:	edd7 7a95 	vldr	s15, [r7, #596]	; 0x254
 8019a28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8019a2c:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8019a30:	f5a3 711e 	sub.w	r1, r3, #632	; 0x278
 8019a34:	f8d7 226c 	ldr.w	r2, [r7, #620]	; 0x26c
 8019a38:	4613      	mov	r3, r2
 8019a3a:	005b      	lsls	r3, r3, #1
 8019a3c:	4413      	add	r3, r2
 8019a3e:	009b      	lsls	r3, r3, #2
 8019a40:	440b      	add	r3, r1
 8019a42:	3308      	adds	r3, #8
 8019a44:	edc3 7a00 	vstr	s15, [r3]
      gravOut[i] = gravity_suppress_rotate(&gravIn[i]);
 8019a48:	f107 0108 	add.w	r1, r7, #8
 8019a4c:	f8d7 226c 	ldr.w	r2, [r7, #620]	; 0x26c
 8019a50:	4613      	mov	r3, r2
 8019a52:	005b      	lsls	r3, r3, #1
 8019a54:	4413      	add	r3, r2
 8019a56:	009b      	lsls	r3, r3, #2
 8019a58:	18c8      	adds	r0, r1, r3
 8019a5a:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8019a5e:	f5a3 71ac 	sub.w	r1, r3, #344	; 0x158
 8019a62:	f8d7 226c 	ldr.w	r2, [r7, #620]	; 0x26c
 8019a66:	4613      	mov	r3, r2
 8019a68:	005b      	lsls	r3, r3, #1
 8019a6a:	4413      	add	r3, r2
 8019a6c:	009b      	lsls	r3, r3, #2
 8019a6e:	18cc      	adds	r4, r1, r3
 8019a70:	f7fb fae0 	bl	8015034 <gravity_suppress_rotate>
 8019a74:	eef0 6a40 	vmov.f32	s13, s0
 8019a78:	eeb0 7a60 	vmov.f32	s14, s1
 8019a7c:	eef0 7a41 	vmov.f32	s15, s2
 8019a80:	edc4 6a00 	vstr	s13, [r4]
 8019a84:	ed84 7a01 	vstr	s14, [r4, #4]
 8019a88:	edc4 7a02 	vstr	s15, [r4, #8]
    for(int i = 0; i < AIDPU_NB_SAMPLE; i++)
 8019a8c:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 8019a90:	3301      	adds	r3, #1
 8019a92:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
 8019a96:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 8019a9a:	2b17      	cmp	r3, #23
 8019a9c:	dd8a      	ble.n	80199b4 <AiDPU_vtblProcess+0x1bc>
    }

    /* call Ai library. */
    p_obj->ai_processing_f(AIDPU_NAME, (float*) gravOut, p_obj->ai_out);
 8019a9e:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8019aa2:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8019aa6:	f8d7 2260 	ldr.w	r2, [r7, #608]	; 0x260
 8019aaa:	f502 7288 	add.w	r2, r2, #272	; 0x110
 8019aae:	f507 7194 	add.w	r1, r7, #296	; 0x128
 8019ab2:	4819      	ldr	r0, [pc, #100]	; (8019b18 <AiDPU_vtblProcess+0x320>)
 8019ab4:	4798      	blx	r3

    /* release the buffer as soon as possible */
    CB_ReleaseItem(p_circular_buffer, (*p_consumer_buff));
 8019ab6:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 8019aba:	681b      	ldr	r3, [r3, #0]
 8019abc:	4619      	mov	r1, r3
 8019abe:	f8d7 0278 	ldr.w	r0, [r7, #632]	; 0x278
 8019ac2:	f000 f98f 	bl	8019de4 <CB_ReleaseItem>
    (*p_consumer_buff) = NULL;
 8019ac6:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 8019aca:	2200      	movs	r2, #0
 8019acc:	601a      	str	r2, [r3, #0]

    ProcessEvent evt_acc;
    ProcessEventInit((IEvent*) &evt_acc, super->pProcessEventSrc, (ai_logging_packet_t*) &super->dpuOutStream, ADPU_GetTag(super));
 8019ace:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8019ad2:	68dc      	ldr	r4, [r3, #12]
 8019ad4:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8019ad8:	f103 05d8 	add.w	r5, r3, #216	; 0xd8
 8019adc:	f8d7 0264 	ldr.w	r0, [r7, #612]	; 0x264
 8019ae0:	f7fe fea4 	bl	801882c <ADPU_GetTag>
 8019ae4:	4603      	mov	r3, r0
 8019ae6:	f507 7012 	add.w	r0, r7, #584	; 0x248
 8019aea:	462a      	mov	r2, r5
 8019aec:	4621      	mov	r1, r4
 8019aee:	f7ff fd81 	bl	80195f4 <ProcessEventInit>
    IDPU_DispatchEvents(_this, &evt_acc);
 8019af2:	f507 7212 	add.w	r2, r7, #584	; 0x248
 8019af6:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8019afa:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8019afe:	4611      	mov	r1, r2
 8019b00:	6818      	ldr	r0, [r3, #0]
 8019b02:	f000 fa44 	bl	8019f8e <IDPU_DispatchEvents>
  }

  return xRes;
 8019b06:	f8b7 326a 	ldrh.w	r3, [r7, #618]	; 0x26a
}
 8019b0a:	4618      	mov	r0, r3
 8019b0c:	f507 7720 	add.w	r7, r7, #640	; 0x280
 8019b10:	46bd      	mov	sp, r7
 8019b12:	bdb0      	pop	{r4, r5, r7, pc}
 8019b14:	08027058 	.word	0x08027058
 8019b18:	080270b8 	.word	0x080270b8

08019b1c <AiDPUAreStreamsInitialized>:

/* Private member function definition */
/**************************************/

static inline boolean_t AiDPUAreStreamsInitialized(AiDPU_t *_this)
{
 8019b1c:	b580      	push	{r7, lr}
 8019b1e:	b082      	sub	sp, #8
 8019b20:	af00      	add	r7, sp, #0
 8019b22:	6078      	str	r0, [r7, #4]
  assert_param(_this != NULL);
 8019b24:	687b      	ldr	r3, [r7, #4]
 8019b26:	2b00      	cmp	r3, #0
 8019b28:	d104      	bne.n	8019b34 <AiDPUAreStreamsInitialized+0x18>
 8019b2a:	f240 1111 	movw	r1, #273	; 0x111
 8019b2e:	4805      	ldr	r0, [pc, #20]	; (8019b44 <AiDPUAreStreamsInitialized+0x28>)
 8019b30:	f7fb fbbb 	bl	80152aa <assert_failed>

  return _this->stream_ready;
 8019b34:	687b      	ldr	r3, [r7, #4]
 8019b36:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
}
 8019b3a:	4618      	mov	r0, r3
 8019b3c:	3708      	adds	r7, #8
 8019b3e:	46bd      	mov	sp, r7
 8019b40:	bd80      	pop	{r7, pc}
 8019b42:	bf00      	nop
 8019b44:	08027058 	.word	0x08027058

08019b48 <CB_Alloc>:

// Public API definition
// **********************

CircularBuffer* CB_Alloc(uint16_t ItemCount)
{
 8019b48:	b580      	push	{r7, lr}
 8019b4a:	b084      	sub	sp, #16
 8019b4c:	af00      	add	r7, sp, #0
 8019b4e:	4603      	mov	r3, r0
 8019b50:	80fb      	strh	r3, [r7, #6]
  CircularBuffer *pObj = CB_HEAP_ALLOC(sizeof(CircularBuffer));
 8019b52:	200c      	movs	r0, #12
 8019b54:	f00a f84c 	bl	8023bf0 <malloc>
 8019b58:	4603      	mov	r3, r0
 8019b5a:	60fb      	str	r3, [r7, #12]
  if(pObj != NULL)
 8019b5c:	68fb      	ldr	r3, [r7, #12]
 8019b5e:	2b00      	cmp	r3, #0
 8019b60:	d015      	beq.n	8019b8e <CB_Alloc+0x46>
  {
    pObj->pItems = CB_HEAP_ALLOC(sizeof(CBItem) * ItemCount);
 8019b62:	88fb      	ldrh	r3, [r7, #6]
 8019b64:	00db      	lsls	r3, r3, #3
 8019b66:	4618      	mov	r0, r3
 8019b68:	f00a f842 	bl	8023bf0 <malloc>
 8019b6c:	4603      	mov	r3, r0
 8019b6e:	461a      	mov	r2, r3
 8019b70:	68fb      	ldr	r3, [r7, #12]
 8019b72:	609a      	str	r2, [r3, #8]
    
    if(pObj->pItems == NULL)
 8019b74:	68fb      	ldr	r3, [r7, #12]
 8019b76:	689b      	ldr	r3, [r3, #8]
 8019b78:	2b00      	cmp	r3, #0
 8019b7a:	d105      	bne.n	8019b88 <CB_Alloc+0x40>
    {
      /* release the memory */
      CB_HEAP_FREE(pObj);
 8019b7c:	68f8      	ldr	r0, [r7, #12]
 8019b7e:	f00a f83f 	bl	8023c00 <free>
      pObj = NULL;
 8019b82:	2300      	movs	r3, #0
 8019b84:	60fb      	str	r3, [r7, #12]
 8019b86:	e002      	b.n	8019b8e <CB_Alloc+0x46>
    }
    else
    {
      pObj->itemCount = ItemCount;
 8019b88:	68fb      	ldr	r3, [r7, #12]
 8019b8a:	88fa      	ldrh	r2, [r7, #6]
 8019b8c:	809a      	strh	r2, [r3, #4]
    }
  }
  return pObj;
 8019b8e:	68fb      	ldr	r3, [r7, #12]
}
 8019b90:	4618      	mov	r0, r3
 8019b92:	3710      	adds	r7, #16
 8019b94:	46bd      	mov	sp, r7
 8019b96:	bd80      	pop	{r7, pc}

08019b98 <CB_Free>:

void CB_Free(CircularBuffer *_this)
{
 8019b98:	b580      	push	{r7, lr}
 8019b9a:	b082      	sub	sp, #8
 8019b9c:	af00      	add	r7, sp, #0
 8019b9e:	6078      	str	r0, [r7, #4]
  assert_param(_this);
 8019ba0:	687b      	ldr	r3, [r7, #4]
 8019ba2:	2b00      	cmp	r3, #0
 8019ba4:	d103      	bne.n	8019bae <CB_Free+0x16>
 8019ba6:	2195      	movs	r1, #149	; 0x95
 8019ba8:	4807      	ldr	r0, [pc, #28]	; (8019bc8 <CB_Free+0x30>)
 8019baa:	f7fb fb7e 	bl	80152aa <assert_failed>
  
  CB_HEAP_FREE(_this->pItems);
 8019bae:	687b      	ldr	r3, [r7, #4]
 8019bb0:	689b      	ldr	r3, [r3, #8]
 8019bb2:	4618      	mov	r0, r3
 8019bb4:	f00a f824 	bl	8023c00 <free>
  CB_HEAP_FREE(_this);
 8019bb8:	6878      	ldr	r0, [r7, #4]
 8019bba:	f00a f821 	bl	8023c00 <free>
}
 8019bbe:	bf00      	nop
 8019bc0:	3708      	adds	r7, #8
 8019bc2:	46bd      	mov	sp, r7
 8019bc4:	bd80      	pop	{r7, pc}
 8019bc6:	bf00      	nop
 8019bc8:	080270c4 	.word	0x080270c4

08019bcc <CB_Init>:

uint32_t CB_Init(CircularBuffer *_this, void *pItemsBuffer, uint16_t ItemSize)
{
 8019bcc:	b580      	push	{r7, lr}
 8019bce:	b088      	sub	sp, #32
 8019bd0:	af00      	add	r7, sp, #0
 8019bd2:	60f8      	str	r0, [r7, #12]
 8019bd4:	60b9      	str	r1, [r7, #8]
 8019bd6:	4613      	mov	r3, r2
 8019bd8:	80fb      	strh	r3, [r7, #6]
  assert_param(_this);
 8019bda:	68fb      	ldr	r3, [r7, #12]
 8019bdc:	2b00      	cmp	r3, #0
 8019bde:	d103      	bne.n	8019be8 <CB_Init+0x1c>
 8019be0:	219d      	movs	r1, #157	; 0x9d
 8019be2:	4822      	ldr	r0, [pc, #136]	; (8019c6c <CB_Init+0xa0>)
 8019be4:	f7fb fb61 	bl	80152aa <assert_failed>
  assert_param(pItemsBuffer);
 8019be8:	68bb      	ldr	r3, [r7, #8]
 8019bea:	2b00      	cmp	r3, #0
 8019bec:	d103      	bne.n	8019bf6 <CB_Init+0x2a>
 8019bee:	219e      	movs	r1, #158	; 0x9e
 8019bf0:	481e      	ldr	r0, [pc, #120]	; (8019c6c <CB_Init+0xa0>)
 8019bf2:	f7fb fb5a 	bl	80152aa <assert_failed>
  uint32_t ret = CB_NO_ERROR_CODE;
 8019bf6:	2300      	movs	r3, #0
 8019bf8:	617b      	str	r3, [r7, #20]
  
  _this->headIdx = 0;
 8019bfa:	68fb      	ldr	r3, [r7, #12]
 8019bfc:	2200      	movs	r2, #0
 8019bfe:	805a      	strh	r2, [r3, #2]
  _this->tailIdx = 0;
 8019c00:	68fb      	ldr	r3, [r7, #12]
 8019c02:	2200      	movs	r2, #0
 8019c04:	801a      	strh	r2, [r3, #0]
  _this->itemSize = ItemSize;
 8019c06:	68fb      	ldr	r3, [r7, #12]
 8019c08:	88fa      	ldrh	r2, [r7, #6]
 8019c0a:	80da      	strh	r2, [r3, #6]
  uint32_t pData = (uint32_t) pItemsBuffer;
 8019c0c:	68bb      	ldr	r3, [r7, #8]
 8019c0e:	61fb      	str	r3, [r7, #28]
  for(uint32_t i = 0; i < _this->itemCount; ++i)
 8019c10:	2300      	movs	r3, #0
 8019c12:	61bb      	str	r3, [r7, #24]
 8019c14:	e01f      	b.n	8019c56 <CB_Init+0x8a>
  {
    _this->pItems[i].pData = (void*) pData;
 8019c16:	68fb      	ldr	r3, [r7, #12]
 8019c18:	689a      	ldr	r2, [r3, #8]
 8019c1a:	69bb      	ldr	r3, [r7, #24]
 8019c1c:	00db      	lsls	r3, r3, #3
 8019c1e:	4413      	add	r3, r2
 8019c20:	69fa      	ldr	r2, [r7, #28]
 8019c22:	601a      	str	r2, [r3, #0]
    _this->pItems[i].status.status = CB_ITEM_FREE;
 8019c24:	68fb      	ldr	r3, [r7, #12]
 8019c26:	689a      	ldr	r2, [r3, #8]
 8019c28:	69bb      	ldr	r3, [r7, #24]
 8019c2a:	00db      	lsls	r3, r3, #3
 8019c2c:	441a      	add	r2, r3
 8019c2e:	7913      	ldrb	r3, [r2, #4]
 8019c30:	f36f 0301 	bfc	r3, #0, #2
 8019c34:	7113      	strb	r3, [r2, #4]
    _this->pItems[i].status.reserved = 0;
 8019c36:	68fb      	ldr	r3, [r7, #12]
 8019c38:	689a      	ldr	r2, [r3, #8]
 8019c3a:	69bb      	ldr	r3, [r7, #24]
 8019c3c:	00db      	lsls	r3, r3, #3
 8019c3e:	441a      	add	r2, r3
 8019c40:	7913      	ldrb	r3, [r2, #4]
 8019c42:	f36f 0387 	bfc	r3, #2, #6
 8019c46:	7113      	strb	r3, [r2, #4]
    pData += ItemSize;
 8019c48:	88fb      	ldrh	r3, [r7, #6]
 8019c4a:	69fa      	ldr	r2, [r7, #28]
 8019c4c:	4413      	add	r3, r2
 8019c4e:	61fb      	str	r3, [r7, #28]
  for(uint32_t i = 0; i < _this->itemCount; ++i)
 8019c50:	69bb      	ldr	r3, [r7, #24]
 8019c52:	3301      	adds	r3, #1
 8019c54:	61bb      	str	r3, [r7, #24]
 8019c56:	68fb      	ldr	r3, [r7, #12]
 8019c58:	889b      	ldrh	r3, [r3, #4]
 8019c5a:	461a      	mov	r2, r3
 8019c5c:	69bb      	ldr	r3, [r7, #24]
 8019c5e:	4293      	cmp	r3, r2
 8019c60:	d3d9      	bcc.n	8019c16 <CB_Init+0x4a>
  }
  
  return ret;
 8019c62:	697b      	ldr	r3, [r7, #20]
}
 8019c64:	4618      	mov	r0, r3
 8019c66:	3720      	adds	r7, #32
 8019c68:	46bd      	mov	sp, r7
 8019c6a:	bd80      	pop	{r7, pc}
 8019c6c:	080270c4 	.word	0x080270c4

08019c70 <CB_GetItemSize>:
  
  return  ret;
}

uint16_t CB_GetItemSize(CircularBuffer *_this)
{
 8019c70:	b580      	push	{r7, lr}
 8019c72:	b084      	sub	sp, #16
 8019c74:	af00      	add	r7, sp, #0
 8019c76:	6078      	str	r0, [r7, #4]
  assert_param(_this);  
 8019c78:	687b      	ldr	r3, [r7, #4]
 8019c7a:	2b00      	cmp	r3, #0
 8019c7c:	d103      	bne.n	8019c86 <CB_GetItemSize+0x16>
 8019c7e:	21f0      	movs	r1, #240	; 0xf0
 8019c80:	4809      	ldr	r0, [pc, #36]	; (8019ca8 <CB_GetItemSize+0x38>)
 8019c82:	f7fb fb12 	bl	80152aa <assert_failed>
  uint16_t ret =0;
 8019c86:	2300      	movs	r3, #0
 8019c88:	81fb      	strh	r3, [r7, #14]
  uint32_t nPosture;

  nPosture = CB_EnterCritical();
 8019c8a:	f000 f93d 	bl	8019f08 <CB_EnterCritical>
 8019c8e:	60b8      	str	r0, [r7, #8]
  ret = _this->itemSize;
 8019c90:	687b      	ldr	r3, [r7, #4]
 8019c92:	88db      	ldrh	r3, [r3, #6]
 8019c94:	81fb      	strh	r3, [r7, #14]
  CB_ExitCritical(nPosture);
 8019c96:	68b8      	ldr	r0, [r7, #8]
 8019c98:	f000 f93e 	bl	8019f18 <CB_ExitCritical>
  
  return ret;
 8019c9c:	89fb      	ldrh	r3, [r7, #14]
}
 8019c9e:	4618      	mov	r0, r3
 8019ca0:	3710      	adds	r7, #16
 8019ca2:	46bd      	mov	sp, r7
 8019ca4:	bd80      	pop	{r7, pc}
 8019ca6:	bf00      	nop
 8019ca8:	080270c4 	.word	0x080270c4

08019cac <CB_GetFreeItemFromHead>:

uint32_t CB_GetFreeItemFromHead(CircularBuffer *_this, CBItem **pItem)
{
 8019cac:	b580      	push	{r7, lr}
 8019cae:	b084      	sub	sp, #16
 8019cb0:	af00      	add	r7, sp, #0
 8019cb2:	6078      	str	r0, [r7, #4]
 8019cb4:	6039      	str	r1, [r7, #0]
  assert_param(_this);
 8019cb6:	687b      	ldr	r3, [r7, #4]
 8019cb8:	2b00      	cmp	r3, #0
 8019cba:	d103      	bne.n	8019cc4 <CB_GetFreeItemFromHead+0x18>
 8019cbc:	21fd      	movs	r1, #253	; 0xfd
 8019cbe:	4822      	ldr	r0, [pc, #136]	; (8019d48 <CB_GetFreeItemFromHead+0x9c>)
 8019cc0:	f7fb faf3 	bl	80152aa <assert_failed>
  assert_param(pItem);
 8019cc4:	683b      	ldr	r3, [r7, #0]
 8019cc6:	2b00      	cmp	r3, #0
 8019cc8:	d103      	bne.n	8019cd2 <CB_GetFreeItemFromHead+0x26>
 8019cca:	21fe      	movs	r1, #254	; 0xfe
 8019ccc:	481e      	ldr	r0, [pc, #120]	; (8019d48 <CB_GetFreeItemFromHead+0x9c>)
 8019cce:	f7fb faec 	bl	80152aa <assert_failed>
  uint32_t ret = CB_NO_ERROR_CODE;
 8019cd2:	2300      	movs	r3, #0
 8019cd4:	60fb      	str	r3, [r7, #12]
  uint32_t nPosture;

  nPosture = CB_EnterCritical();
 8019cd6:	f000 f917 	bl	8019f08 <CB_EnterCritical>
 8019cda:	60b8      	str	r0, [r7, #8]
  if(_this->pItems[_this->headIdx].status.status == CB_ITEM_FREE)
 8019cdc:	687b      	ldr	r3, [r7, #4]
 8019cde:	689a      	ldr	r2, [r3, #8]
 8019ce0:	687b      	ldr	r3, [r7, #4]
 8019ce2:	885b      	ldrh	r3, [r3, #2]
 8019ce4:	00db      	lsls	r3, r3, #3
 8019ce6:	4413      	add	r3, r2
 8019ce8:	791b      	ldrb	r3, [r3, #4]
 8019cea:	f003 0303 	and.w	r3, r3, #3
 8019cee:	b2db      	uxtb	r3, r3
 8019cf0:	2b00      	cmp	r3, #0
 8019cf2:	d11c      	bne.n	8019d2e <CB_GetFreeItemFromHead+0x82>
  {
    *pItem = &_this->pItems[_this->headIdx];
 8019cf4:	687b      	ldr	r3, [r7, #4]
 8019cf6:	689a      	ldr	r2, [r3, #8]
 8019cf8:	687b      	ldr	r3, [r7, #4]
 8019cfa:	885b      	ldrh	r3, [r3, #2]
 8019cfc:	00db      	lsls	r3, r3, #3
 8019cfe:	441a      	add	r2, r3
 8019d00:	683b      	ldr	r3, [r7, #0]
 8019d02:	601a      	str	r2, [r3, #0]
    /* Mark the item as NEW */
    (*pItem)->status.status = CB_ITEM_NEW;
 8019d04:	683b      	ldr	r3, [r7, #0]
 8019d06:	681a      	ldr	r2, [r3, #0]
 8019d08:	7913      	ldrb	r3, [r2, #4]
 8019d0a:	2101      	movs	r1, #1
 8019d0c:	f361 0301 	bfi	r3, r1, #0, #2
 8019d10:	7113      	strb	r3, [r2, #4]
    /* Increment the head pointer */
    _this->headIdx = CB_INCREMENT_IDX(_this, _this->headIdx);
 8019d12:	687b      	ldr	r3, [r7, #4]
 8019d14:	885b      	ldrh	r3, [r3, #2]
 8019d16:	3301      	adds	r3, #1
 8019d18:	687a      	ldr	r2, [r7, #4]
 8019d1a:	8892      	ldrh	r2, [r2, #4]
 8019d1c:	fb93 f1f2 	sdiv	r1, r3, r2
 8019d20:	fb01 f202 	mul.w	r2, r1, r2
 8019d24:	1a9b      	subs	r3, r3, r2
 8019d26:	b29a      	uxth	r2, r3
 8019d28:	687b      	ldr	r3, [r7, #4]
 8019d2a:	805a      	strh	r2, [r3, #2]
 8019d2c:	e004      	b.n	8019d38 <CB_GetFreeItemFromHead+0x8c>
  }
  else
  {
    *pItem = NULL;
 8019d2e:	683b      	ldr	r3, [r7, #0]
 8019d30:	2200      	movs	r2, #0
 8019d32:	601a      	str	r2, [r3, #0]
    ret = CB_FULL_ERROR_CODE;
 8019d34:	2304      	movs	r3, #4
 8019d36:	60fb      	str	r3, [r7, #12]
  }
  CB_ExitCritical(nPosture);
 8019d38:	68b8      	ldr	r0, [r7, #8]
 8019d3a:	f000 f8ed 	bl	8019f18 <CB_ExitCritical>
  
  return ret;
 8019d3e:	68fb      	ldr	r3, [r7, #12]
}
 8019d40:	4618      	mov	r0, r3
 8019d42:	3710      	adds	r7, #16
 8019d44:	46bd      	mov	sp, r7
 8019d46:	bd80      	pop	{r7, pc}
 8019d48:	080270c4 	.word	0x080270c4

08019d4c <CB_GetReadyItemFromTail>:

uint32_t CB_GetReadyItemFromTail(CircularBuffer *_this, CBItem **pItem)
{
 8019d4c:	b580      	push	{r7, lr}
 8019d4e:	b084      	sub	sp, #16
 8019d50:	af00      	add	r7, sp, #0
 8019d52:	6078      	str	r0, [r7, #4]
 8019d54:	6039      	str	r1, [r7, #0]
  assert_param(_this);
 8019d56:	687b      	ldr	r3, [r7, #4]
 8019d58:	2b00      	cmp	r3, #0
 8019d5a:	d104      	bne.n	8019d66 <CB_GetReadyItemFromTail+0x1a>
 8019d5c:	f240 1117 	movw	r1, #279	; 0x117
 8019d60:	481f      	ldr	r0, [pc, #124]	; (8019de0 <CB_GetReadyItemFromTail+0x94>)
 8019d62:	f7fb faa2 	bl	80152aa <assert_failed>
  assert_param(pItem);
 8019d66:	683b      	ldr	r3, [r7, #0]
 8019d68:	2b00      	cmp	r3, #0
 8019d6a:	d104      	bne.n	8019d76 <CB_GetReadyItemFromTail+0x2a>
 8019d6c:	f44f 718c 	mov.w	r1, #280	; 0x118
 8019d70:	481b      	ldr	r0, [pc, #108]	; (8019de0 <CB_GetReadyItemFromTail+0x94>)
 8019d72:	f7fb fa9a 	bl	80152aa <assert_failed>
  uint32_t ret = CB_NO_ERROR_CODE;
 8019d76:	2300      	movs	r3, #0
 8019d78:	60fb      	str	r3, [r7, #12]
  uint32_t nPosture;

  nPosture = CB_EnterCritical();
 8019d7a:	f000 f8c5 	bl	8019f08 <CB_EnterCritical>
 8019d7e:	60b8      	str	r0, [r7, #8]
  if(_this->pItems[_this->tailIdx].status.status == CB_ITEM_READY)
 8019d80:	687b      	ldr	r3, [r7, #4]
 8019d82:	689a      	ldr	r2, [r3, #8]
 8019d84:	687b      	ldr	r3, [r7, #4]
 8019d86:	881b      	ldrh	r3, [r3, #0]
 8019d88:	00db      	lsls	r3, r3, #3
 8019d8a:	4413      	add	r3, r2
 8019d8c:	791b      	ldrb	r3, [r3, #4]
 8019d8e:	f003 0303 	and.w	r3, r3, #3
 8019d92:	b2db      	uxtb	r3, r3
 8019d94:	2b02      	cmp	r3, #2
 8019d96:	d115      	bne.n	8019dc4 <CB_GetReadyItemFromTail+0x78>
  {
    *pItem = &_this->pItems[_this->tailIdx];
 8019d98:	687b      	ldr	r3, [r7, #4]
 8019d9a:	689a      	ldr	r2, [r3, #8]
 8019d9c:	687b      	ldr	r3, [r7, #4]
 8019d9e:	881b      	ldrh	r3, [r3, #0]
 8019da0:	00db      	lsls	r3, r3, #3
 8019da2:	441a      	add	r2, r3
 8019da4:	683b      	ldr	r3, [r7, #0]
 8019da6:	601a      	str	r2, [r3, #0]
    /* increment the tail pointer */
    _this->tailIdx = CB_INCREMENT_IDX(_this, _this->tailIdx);
 8019da8:	687b      	ldr	r3, [r7, #4]
 8019daa:	881b      	ldrh	r3, [r3, #0]
 8019dac:	3301      	adds	r3, #1
 8019dae:	687a      	ldr	r2, [r7, #4]
 8019db0:	8892      	ldrh	r2, [r2, #4]
 8019db2:	fb93 f1f2 	sdiv	r1, r3, r2
 8019db6:	fb01 f202 	mul.w	r2, r1, r2
 8019dba:	1a9b      	subs	r3, r3, r2
 8019dbc:	b29a      	uxth	r2, r3
 8019dbe:	687b      	ldr	r3, [r7, #4]
 8019dc0:	801a      	strh	r2, [r3, #0]
 8019dc2:	e004      	b.n	8019dce <CB_GetReadyItemFromTail+0x82>
  }
  else
  {
    *pItem = NULL;
 8019dc4:	683b      	ldr	r3, [r7, #0]
 8019dc6:	2200      	movs	r2, #0
 8019dc8:	601a      	str	r2, [r3, #0]
    ret = CB_NO_READY_ITEM_ERROR_CODE;
 8019dca:	2305      	movs	r3, #5
 8019dcc:	60fb      	str	r3, [r7, #12]
  }
  CB_ExitCritical(nPosture);
 8019dce:	68b8      	ldr	r0, [r7, #8]
 8019dd0:	f000 f8a2 	bl	8019f18 <CB_ExitCritical>
  
  return ret;
 8019dd4:	68fb      	ldr	r3, [r7, #12]
}
 8019dd6:	4618      	mov	r0, r3
 8019dd8:	3710      	adds	r7, #16
 8019dda:	46bd      	mov	sp, r7
 8019ddc:	bd80      	pop	{r7, pc}
 8019dde:	bf00      	nop
 8019de0:	080270c4 	.word	0x080270c4

08019de4 <CB_ReleaseItem>:

uint32_t CB_ReleaseItem(CircularBuffer *_this, CBItem *pItem)
{
 8019de4:	b580      	push	{r7, lr}
 8019de6:	b084      	sub	sp, #16
 8019de8:	af00      	add	r7, sp, #0
 8019dea:	6078      	str	r0, [r7, #4]
 8019dec:	6039      	str	r1, [r7, #0]
  assert_param(_this);
 8019dee:	687b      	ldr	r3, [r7, #4]
 8019df0:	2b00      	cmp	r3, #0
 8019df2:	d104      	bne.n	8019dfe <CB_ReleaseItem+0x1a>
 8019df4:	f240 112f 	movw	r1, #303	; 0x12f
 8019df8:	4813      	ldr	r0, [pc, #76]	; (8019e48 <CB_ReleaseItem+0x64>)
 8019dfa:	f7fb fa56 	bl	80152aa <assert_failed>
  assert_param(pItem);
 8019dfe:	683b      	ldr	r3, [r7, #0]
 8019e00:	2b00      	cmp	r3, #0
 8019e02:	d104      	bne.n	8019e0e <CB_ReleaseItem+0x2a>
 8019e04:	f44f 7198 	mov.w	r1, #304	; 0x130
 8019e08:	480f      	ldr	r0, [pc, #60]	; (8019e48 <CB_ReleaseItem+0x64>)
 8019e0a:	f7fb fa4e 	bl	80152aa <assert_failed>
  uint32_t xRes = CB_NO_ERROR_CODE;
 8019e0e:	2300      	movs	r3, #0
 8019e10:	60fb      	str	r3, [r7, #12]
  uint32_t nPosture;

  UNUSED(_this);
  
  nPosture = CB_EnterCritical();
 8019e12:	f000 f879 	bl	8019f08 <CB_EnterCritical>
 8019e16:	60b8      	str	r0, [r7, #8]
  if(pItem->status.status == CB_ITEM_NEW)
 8019e18:	683b      	ldr	r3, [r7, #0]
 8019e1a:	791b      	ldrb	r3, [r3, #4]
 8019e1c:	f003 0303 	and.w	r3, r3, #3
 8019e20:	b2db      	uxtb	r3, r3
 8019e22:	2b01      	cmp	r3, #1
 8019e24:	d102      	bne.n	8019e2c <CB_ReleaseItem+0x48>
  {
    /* the item is not valid because it has been only allocated but not produced. */
    xRes = CB_INVALID_ITEM_ERROR_CODE;
 8019e26:	2303      	movs	r3, #3
 8019e28:	60fb      	str	r3, [r7, #12]
 8019e2a:	e004      	b.n	8019e36 <CB_ReleaseItem+0x52>
  }
  else
  {
    /* item is already FREE or READY, so I can release it. */
    pItem->status.status = CB_ITEM_FREE;
 8019e2c:	683a      	ldr	r2, [r7, #0]
 8019e2e:	7913      	ldrb	r3, [r2, #4]
 8019e30:	f36f 0301 	bfc	r3, #0, #2
 8019e34:	7113      	strb	r3, [r2, #4]
  }
  CB_ExitCritical(nPosture);
 8019e36:	68b8      	ldr	r0, [r7, #8]
 8019e38:	f000 f86e 	bl	8019f18 <CB_ExitCritical>
  
  return xRes;
 8019e3c:	68fb      	ldr	r3, [r7, #12]
}
 8019e3e:	4618      	mov	r0, r3
 8019e40:	3710      	adds	r7, #16
 8019e42:	46bd      	mov	sp, r7
 8019e44:	bd80      	pop	{r7, pc}
 8019e46:	bf00      	nop
 8019e48:	080270c4 	.word	0x080270c4

08019e4c <CB_SetItemReady>:

uint32_t CB_SetItemReady(CircularBuffer *_this, CBItem *pItem)
{
 8019e4c:	b580      	push	{r7, lr}
 8019e4e:	b084      	sub	sp, #16
 8019e50:	af00      	add	r7, sp, #0
 8019e52:	6078      	str	r0, [r7, #4]
 8019e54:	6039      	str	r1, [r7, #0]
  assert_param(_this);
 8019e56:	687b      	ldr	r3, [r7, #4]
 8019e58:	2b00      	cmp	r3, #0
 8019e5a:	d104      	bne.n	8019e66 <CB_SetItemReady+0x1a>
 8019e5c:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8019e60:	4813      	ldr	r0, [pc, #76]	; (8019eb0 <CB_SetItemReady+0x64>)
 8019e62:	f7fb fa22 	bl	80152aa <assert_failed>
  assert_param(pItem);
 8019e66:	683b      	ldr	r3, [r7, #0]
 8019e68:	2b00      	cmp	r3, #0
 8019e6a:	d104      	bne.n	8019e76 <CB_SetItemReady+0x2a>
 8019e6c:	f240 1149 	movw	r1, #329	; 0x149
 8019e70:	480f      	ldr	r0, [pc, #60]	; (8019eb0 <CB_SetItemReady+0x64>)
 8019e72:	f7fb fa1a 	bl	80152aa <assert_failed>
  uint32_t xRes = CB_NO_ERROR_CODE;
 8019e76:	2300      	movs	r3, #0
 8019e78:	60fb      	str	r3, [r7, #12]
  uint32_t nPosture;

  UNUSED(_this);
  
  nPosture = CB_EnterCritical();
 8019e7a:	f000 f845 	bl	8019f08 <CB_EnterCritical>
 8019e7e:	60b8      	str	r0, [r7, #8]
  if(pItem->status.status == CB_ITEM_FREE)
 8019e80:	683b      	ldr	r3, [r7, #0]
 8019e82:	791b      	ldrb	r3, [r3, #4]
 8019e84:	f003 0303 	and.w	r3, r3, #3
 8019e88:	b2db      	uxtb	r3, r3
 8019e8a:	2b00      	cmp	r3, #0
 8019e8c:	d102      	bne.n	8019e94 <CB_SetItemReady+0x48>
  {
    /* the item is not valid because it has not been allocated */
    xRes = CB_INVALID_ITEM_ERROR_CODE;
 8019e8e:	2303      	movs	r3, #3
 8019e90:	60fb      	str	r3, [r7, #12]
 8019e92:	e005      	b.n	8019ea0 <CB_SetItemReady+0x54>
  }
  else
  {
    /* the item is already READY or NEW, so I can mark as READY. */
    pItem->status.status = CB_ITEM_READY;
 8019e94:	683a      	ldr	r2, [r7, #0]
 8019e96:	7913      	ldrb	r3, [r2, #4]
 8019e98:	2102      	movs	r1, #2
 8019e9a:	f361 0301 	bfi	r3, r1, #0, #2
 8019e9e:	7113      	strb	r3, [r2, #4]
  }
  CB_ExitCritical(nPosture);
 8019ea0:	68b8      	ldr	r0, [r7, #8]
 8019ea2:	f000 f839 	bl	8019f18 <CB_ExitCritical>
  
  return xRes;
 8019ea6:	68fb      	ldr	r3, [r7, #12]
}
 8019ea8:	4618      	mov	r0, r3
 8019eaa:	3710      	adds	r7, #16
 8019eac:	46bd      	mov	sp, r7
 8019eae:	bd80      	pop	{r7, pc}
 8019eb0:	080270c4 	.word	0x080270c4

08019eb4 <CB_GetItemData>:

void* CB_GetItemData(CBItem *pItem)
{
 8019eb4:	b580      	push	{r7, lr}
 8019eb6:	b082      	sub	sp, #8
 8019eb8:	af00      	add	r7, sp, #0
 8019eba:	6078      	str	r0, [r7, #4]
  assert_param(pItem);
 8019ebc:	687b      	ldr	r3, [r7, #4]
 8019ebe:	2b00      	cmp	r3, #0
 8019ec0:	d104      	bne.n	8019ecc <CB_GetItemData+0x18>
 8019ec2:	f240 1161 	movw	r1, #353	; 0x161
 8019ec6:	4804      	ldr	r0, [pc, #16]	; (8019ed8 <CB_GetItemData+0x24>)
 8019ec8:	f7fb f9ef 	bl	80152aa <assert_failed>
  
  return pItem->pData;
 8019ecc:	687b      	ldr	r3, [r7, #4]
 8019ece:	681b      	ldr	r3, [r3, #0]
}
 8019ed0:	4618      	mov	r0, r3
 8019ed2:	3708      	adds	r7, #8
 8019ed4:	46bd      	mov	sp, r7
 8019ed6:	bd80      	pop	{r7, pc}
 8019ed8:	080270c4 	.word	0x080270c4

08019edc <CB_GetItemsBuffer>:

void* CB_GetItemsBuffer(CircularBuffer *_this)
{
 8019edc:	b580      	push	{r7, lr}
 8019ede:	b082      	sub	sp, #8
 8019ee0:	af00      	add	r7, sp, #0
 8019ee2:	6078      	str	r0, [r7, #4]
  assert_param(_this);
 8019ee4:	687b      	ldr	r3, [r7, #4]
 8019ee6:	2b00      	cmp	r3, #0
 8019ee8:	d104      	bne.n	8019ef4 <CB_GetItemsBuffer+0x18>
 8019eea:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8019eee:	4805      	ldr	r0, [pc, #20]	; (8019f04 <CB_GetItemsBuffer+0x28>)
 8019ef0:	f7fb f9db 	bl	80152aa <assert_failed>
  
  return _this->pItems[0].pData;
 8019ef4:	687b      	ldr	r3, [r7, #4]
 8019ef6:	689b      	ldr	r3, [r3, #8]
 8019ef8:	681b      	ldr	r3, [r3, #0]
}
 8019efa:	4618      	mov	r0, r3
 8019efc:	3708      	adds	r7, #8
 8019efe:	46bd      	mov	sp, r7
 8019f00:	bd80      	pop	{r7, pc}
 8019f02:	bf00      	nop
 8019f04:	080270c4 	.word	0x080270c4

08019f08 <CB_EnterCritical>:
}

// Private functions definition
// ****************************
static inline uint32_t CB_EnterCritical(void)
{
 8019f08:	b580      	push	{r7, lr}
 8019f0a:	af00      	add	r7, sp, #0
#if defined(SYS_TP_RTOS_THREADX)
  return tx_interrupt_control(TX_INT_DISABLE);
 8019f0c:	2001      	movs	r0, #1
 8019f0e:	f7e6 f9b3 	bl	8000278 <_tx_thread_interrupt_control>
 8019f12:	4603      	mov	r3, r0
  {
    taskENTER_CRITICAL();
  }
  return 0;
#endif
}
 8019f14:	4618      	mov	r0, r3
 8019f16:	bd80      	pop	{r7, pc}

08019f18 <CB_ExitCritical>:

static inline void CB_ExitCritical(uint32_t nPosture)
{
 8019f18:	b580      	push	{r7, lr}
 8019f1a:	b082      	sub	sp, #8
 8019f1c:	af00      	add	r7, sp, #0
 8019f1e:	6078      	str	r0, [r7, #4]
#if defined(SYS_TP_RTOS_THREADX)
  tx_interrupt_control(nPosture);
 8019f20:	6878      	ldr	r0, [r7, #4]
 8019f22:	f7e6 f9a9 	bl	8000278 <_tx_thread_interrupt_control>
  else
  {
    taskEXIT_CRITICAL();
  }
#endif
}
 8019f26:	bf00      	nop
 8019f28:	3708      	adds	r7, #8
 8019f2a:	46bd      	mov	sp, r7
 8019f2c:	bd80      	pop	{r7, pc}

08019f2e <IDPU_Init>:
};


// Inline functions definition
// ***************************
inline sys_error_code_t IDPU_Init(IDPU *_this) {
 8019f2e:	b580      	push	{r7, lr}
 8019f30:	b082      	sub	sp, #8
 8019f32:	af00      	add	r7, sp, #0
 8019f34:	6078      	str	r0, [r7, #4]
  return _this->vptr->Init(_this );
 8019f36:	687b      	ldr	r3, [r7, #4]
 8019f38:	681b      	ldr	r3, [r3, #0]
 8019f3a:	681b      	ldr	r3, [r3, #0]
 8019f3c:	6878      	ldr	r0, [r7, #4]
 8019f3e:	4798      	blx	r3
 8019f40:	4603      	mov	r3, r0
}
 8019f42:	4618      	mov	r0, r3
 8019f44:	3708      	adds	r7, #8
 8019f46:	46bd      	mov	sp, r7
 8019f48:	bd80      	pop	{r7, pc}

08019f4a <IDPU_AttachToSensor>:

inline sys_error_code_t IDPU_AttachToSensor(IDPU *_this, ISourceObservable *s, void *buffer) {
 8019f4a:	b580      	push	{r7, lr}
 8019f4c:	b084      	sub	sp, #16
 8019f4e:	af00      	add	r7, sp, #0
 8019f50:	60f8      	str	r0, [r7, #12]
 8019f52:	60b9      	str	r1, [r7, #8]
 8019f54:	607a      	str	r2, [r7, #4]
  return _this->vptr->AttachToSensor(_this, s, buffer );
 8019f56:	68fb      	ldr	r3, [r7, #12]
 8019f58:	681b      	ldr	r3, [r3, #0]
 8019f5a:	685b      	ldr	r3, [r3, #4]
 8019f5c:	687a      	ldr	r2, [r7, #4]
 8019f5e:	68b9      	ldr	r1, [r7, #8]
 8019f60:	68f8      	ldr	r0, [r7, #12]
 8019f62:	4798      	blx	r3
 8019f64:	4603      	mov	r3, r0
}
 8019f66:	4618      	mov	r0, r3
 8019f68:	3710      	adds	r7, #16
 8019f6a:	46bd      	mov	sp, r7
 8019f6c:	bd80      	pop	{r7, pc}

08019f6e <IDPU_DetachFromSensor>:

inline sys_error_code_t IDPU_DetachFromSensor(IDPU *_this, ISourceObservable *s)  {
 8019f6e:	b580      	push	{r7, lr}
 8019f70:	b082      	sub	sp, #8
 8019f72:	af00      	add	r7, sp, #0
 8019f74:	6078      	str	r0, [r7, #4]
 8019f76:	6039      	str	r1, [r7, #0]
  return _this->vptr->DetachFromSensor(_this, s );
 8019f78:	687b      	ldr	r3, [r7, #4]
 8019f7a:	681b      	ldr	r3, [r3, #0]
 8019f7c:	689b      	ldr	r3, [r3, #8]
 8019f7e:	6839      	ldr	r1, [r7, #0]
 8019f80:	6878      	ldr	r0, [r7, #4]
 8019f82:	4798      	blx	r3
 8019f84:	4603      	mov	r3, r0
}
 8019f86:	4618      	mov	r0, r3
 8019f88:	3708      	adds	r7, #8
 8019f8a:	46bd      	mov	sp, r7
 8019f8c:	bd80      	pop	{r7, pc}

08019f8e <IDPU_DispatchEvents>:

inline sys_error_code_t IDPU_DetachFromDPU(IDPU *_this) {
  return _this->vptr->DetachFromDPU(_this);
}

inline sys_error_code_t IDPU_DispatchEvents(IDPU *_this,  ProcessEvent *pxEvt) {
 8019f8e:	b580      	push	{r7, lr}
 8019f90:	b082      	sub	sp, #8
 8019f92:	af00      	add	r7, sp, #0
 8019f94:	6078      	str	r0, [r7, #4]
 8019f96:	6039      	str	r1, [r7, #0]
  return _this->vptr->DispatchEvents(_this, pxEvt );
 8019f98:	687b      	ldr	r3, [r7, #4]
 8019f9a:	681b      	ldr	r3, [r3, #0]
 8019f9c:	695b      	ldr	r3, [r3, #20]
 8019f9e:	6839      	ldr	r1, [r7, #0]
 8019fa0:	6878      	ldr	r0, [r7, #4]
 8019fa2:	4798      	blx	r3
 8019fa4:	4603      	mov	r3, r0
}
 8019fa6:	4618      	mov	r0, r3
 8019fa8:	3708      	adds	r7, #8
 8019faa:	46bd      	mov	sp, r7
 8019fac:	bd80      	pop	{r7, pc}

08019fae <IDPU_RegisterNotifyCallback>:

inline sys_error_code_t IDPU_RegisterNotifyCallback(IDPU *_this, DPU_ReadyToProcessCallback_t callback, void *p_param) {
 8019fae:	b580      	push	{r7, lr}
 8019fb0:	b084      	sub	sp, #16
 8019fb2:	af00      	add	r7, sp, #0
 8019fb4:	60f8      	str	r0, [r7, #12]
 8019fb6:	60b9      	str	r1, [r7, #8]
 8019fb8:	607a      	str	r2, [r7, #4]
  return _this->vptr->RegisterNotifyCallback(_this, callback, p_param);
 8019fba:	68fb      	ldr	r3, [r7, #12]
 8019fbc:	681b      	ldr	r3, [r3, #0]
 8019fbe:	699b      	ldr	r3, [r3, #24]
 8019fc0:	687a      	ldr	r2, [r7, #4]
 8019fc2:	68b9      	ldr	r1, [r7, #8]
 8019fc4:	68f8      	ldr	r0, [r7, #12]
 8019fc6:	4798      	blx	r3
 8019fc8:	4603      	mov	r3, r0
}
 8019fca:	4618      	mov	r0, r3
 8019fcc:	3710      	adds	r7, #16
 8019fce:	46bd      	mov	sp, r7
 8019fd0:	bd80      	pop	{r7, pc}

08019fd2 <IDPU_Process>:

inline sys_error_code_t IDPU_Process(IDPU *_this) {
 8019fd2:	b580      	push	{r7, lr}
 8019fd4:	b082      	sub	sp, #8
 8019fd6:	af00      	add	r7, sp, #0
 8019fd8:	6078      	str	r0, [r7, #4]
  return _this->vptr->Process(_this );
 8019fda:	687b      	ldr	r3, [r7, #4]
 8019fdc:	681b      	ldr	r3, [r3, #0]
 8019fde:	69db      	ldr	r3, [r3, #28]
 8019fe0:	6878      	ldr	r0, [r7, #4]
 8019fe2:	4798      	blx	r3
 8019fe4:	4603      	mov	r3, r0
}
 8019fe6:	4618      	mov	r0, r3
 8019fe8:	3708      	adds	r7, #8
 8019fea:	46bd      	mov	sp, r7
 8019fec:	bd80      	pop	{r7, pc}
	...

08019ff0 <IProcessEventListenerOnProcessedDataReady>:

// Inline functions definition
// ***************************

SYS_DEFINE_STATIC_INLINE
sys_error_code_t IProcessEventListenerOnProcessedDataReady(IEventListener *_this, const ProcessEvent *pxEvt) {
 8019ff0:	b580      	push	{r7, lr}
 8019ff2:	b082      	sub	sp, #8
 8019ff4:	af00      	add	r7, sp, #0
 8019ff6:	6078      	str	r0, [r7, #4]
 8019ff8:	6039      	str	r1, [r7, #0]
  assert_param(_this);
 8019ffa:	687b      	ldr	r3, [r7, #4]
 8019ffc:	2b00      	cmp	r3, #0
 8019ffe:	d103      	bne.n	801a008 <IProcessEventListenerOnProcessedDataReady+0x18>
 801a000:	213e      	movs	r1, #62	; 0x3e
 801a002:	4807      	ldr	r0, [pc, #28]	; (801a020 <IProcessEventListenerOnProcessedDataReady+0x30>)
 801a004:	f7fb f951 	bl	80152aa <assert_failed>

  return ((IProcessEventListener*)_this)->vptr->OnProcessedDataReady(_this, pxEvt);
 801a008:	687b      	ldr	r3, [r7, #4]
 801a00a:	681b      	ldr	r3, [r3, #0]
 801a00c:	68db      	ldr	r3, [r3, #12]
 801a00e:	6839      	ldr	r1, [r7, #0]
 801a010:	6878      	ldr	r0, [r7, #4]
 801a012:	4798      	blx	r3
 801a014:	4603      	mov	r3, r0
}
 801a016:	4618      	mov	r0, r3
 801a018:	3708      	adds	r7, #8
 801a01a:	46bd      	mov	sp, r7
 801a01c:	bd80      	pop	{r7, pc}
 801a01e:	bf00      	nop
 801a020:	0802712c 	.word	0x0802712c

0801a024 <ProcessEventSrcAlloc>:

// Public functions definition
// ***************************

IEventSrc *ProcessEventSrcAlloc()
{
 801a024:	b580      	push	{r7, lr}
 801a026:	b082      	sub	sp, #8
 801a028:	af00      	add	r7, sp, #0
  IEventSrc *pxObj = (IEventSrc*) SysAlloc(sizeof(ProcessEventSrc));
 801a02a:	2014      	movs	r0, #20
 801a02c:	f7f5 f930 	bl	800f290 <SysAlloc>
 801a030:	6078      	str	r0, [r7, #4]

  if (pxObj != NULL) {
 801a032:	687b      	ldr	r3, [r7, #4]
 801a034:	2b00      	cmp	r3, #0
 801a036:	d002      	beq.n	801a03e <ProcessEventSrcAlloc+0x1a>
    pxObj->vptr = &s_xProcessEvent_vtbl;
 801a038:	687b      	ldr	r3, [r7, #4]
 801a03a:	4a03      	ldr	r2, [pc, #12]	; (801a048 <ProcessEventSrcAlloc+0x24>)
 801a03c:	601a      	str	r2, [r3, #0]
  }

  return pxObj;
 801a03e:	687b      	ldr	r3, [r7, #4]
}
 801a040:	4618      	mov	r0, r3
 801a042:	3708      	adds	r7, #8
 801a044:	46bd      	mov	sp, r7
 801a046:	bd80      	pop	{r7, pc}
 801a048:	08035818 	.word	0x08035818

0801a04c <ProcessEventSrcSetTag>:

sys_error_code_t ProcessEventSrcSetTag(ProcessEventSrc *_this, uint32_t tag)
{
 801a04c:	b580      	push	{r7, lr}
 801a04e:	b084      	sub	sp, #16
 801a050:	af00      	add	r7, sp, #0
 801a052:	6078      	str	r0, [r7, #4]
 801a054:	6039      	str	r1, [r7, #0]
  assert_param(_this != NULL);
 801a056:	687b      	ldr	r3, [r7, #4]
 801a058:	2b00      	cmp	r3, #0
 801a05a:	d103      	bne.n	801a064 <ProcessEventSrcSetTag+0x18>
 801a05c:	213e      	movs	r1, #62	; 0x3e
 801a05e:	4806      	ldr	r0, [pc, #24]	; (801a078 <ProcessEventSrcSetTag+0x2c>)
 801a060:	f7fb f923 	bl	80152aa <assert_failed>
  sys_error_code_t xRes = SYS_NO_ERROR_CODE;
 801a064:	2300      	movs	r3, #0
 801a066:	81fb      	strh	r3, [r7, #14]

  _this->tag = tag;
 801a068:	687b      	ldr	r3, [r7, #4]
 801a06a:	683a      	ldr	r2, [r7, #0]
 801a06c:	611a      	str	r2, [r3, #16]
  return xRes;
 801a06e:	89fb      	ldrh	r3, [r7, #14]
}
 801a070:	4618      	mov	r0, r3
 801a072:	3710      	adds	r7, #16
 801a074:	46bd      	mov	sp, r7
 801a076:	bd80      	pop	{r7, pc}
 801a078:	08027184 	.word	0x08027184

0801a07c <ProcessEventSrcGetTag>:

uint32_t ProcessEventSrcGetTag(const ProcessEventSrc *_this)
{
 801a07c:	b580      	push	{r7, lr}
 801a07e:	b082      	sub	sp, #8
 801a080:	af00      	add	r7, sp, #0
 801a082:	6078      	str	r0, [r7, #4]
  assert_param(_this != NULL);
 801a084:	687b      	ldr	r3, [r7, #4]
 801a086:	2b00      	cmp	r3, #0
 801a088:	d103      	bne.n	801a092 <ProcessEventSrcGetTag+0x16>
 801a08a:	2147      	movs	r1, #71	; 0x47
 801a08c:	4804      	ldr	r0, [pc, #16]	; (801a0a0 <ProcessEventSrcGetTag+0x24>)
 801a08e:	f7fb f90c 	bl	80152aa <assert_failed>

  return _this->tag;
 801a092:	687b      	ldr	r3, [r7, #4]
 801a094:	691b      	ldr	r3, [r3, #16]
}
 801a096:	4618      	mov	r0, r3
 801a098:	3708      	adds	r7, #8
 801a09a:	46bd      	mov	sp, r7
 801a09c:	bd80      	pop	{r7, pc}
 801a09e:	bf00      	nop
 801a0a0:	08027184 	.word	0x08027184

0801a0a4 <ProcessEventSrc_vtblSendEvent>:


// IEventSoruce virtual functions definition.
// ******************************************

sys_error_code_t ProcessEventSrc_vtblSendEvent(const IEventSrc *_this, const IEvent *pxEvent, void *pvParams) {
 801a0a4:	b580      	push	{r7, lr}
 801a0a6:	b088      	sub	sp, #32
 801a0a8:	af00      	add	r7, sp, #0
 801a0aa:	60f8      	str	r0, [r7, #12]
 801a0ac:	60b9      	str	r1, [r7, #8]
 801a0ae:	607a      	str	r2, [r7, #4]
  assert_param(_this != NULL);
 801a0b0:	68fb      	ldr	r3, [r7, #12]
 801a0b2:	2b00      	cmp	r3, #0
 801a0b4:	d103      	bne.n	801a0be <ProcessEventSrc_vtblSendEvent+0x1a>
 801a0b6:	2153      	movs	r1, #83	; 0x53
 801a0b8:	4812      	ldr	r0, [pc, #72]	; (801a104 <ProcessEventSrc_vtblSendEvent+0x60>)
 801a0ba:	f7fb f8f6 	bl	80152aa <assert_failed>
  ProcessEventSrc *pObj = (ProcessEventSrc*)_this;
 801a0be:	68fb      	ldr	r3, [r7, #12]
 801a0c0:	61bb      	str	r3, [r7, #24]
  sys_error_code_t xRes = SYS_NO_ERROR_CODE;
 801a0c2:	2300      	movs	r3, #0
 801a0c4:	82fb      	strh	r3, [r7, #22]
  UNUSED(pvParams);

  for (uint8_t i=0; i<AEVENT_SRC_CFG_MAX_LISTENERS; ++i) {
 801a0c6:	2300      	movs	r3, #0
 801a0c8:	77fb      	strb	r3, [r7, #31]
 801a0ca:	e012      	b.n	801a0f2 <ProcessEventSrc_vtblSendEvent+0x4e>
    if (pObj->super.m_pxListeners[i] != NULL) {
 801a0cc:	7ffb      	ldrb	r3, [r7, #31]
 801a0ce:	69ba      	ldr	r2, [r7, #24]
 801a0d0:	009b      	lsls	r3, r3, #2
 801a0d2:	4413      	add	r3, r2
 801a0d4:	685b      	ldr	r3, [r3, #4]
 801a0d6:	2b00      	cmp	r3, #0
 801a0d8:	d008      	beq.n	801a0ec <ProcessEventSrc_vtblSendEvent+0x48>
      IProcessEventListenerOnProcessedDataReady(pObj->super.m_pxListeners[i], (ProcessEvent*)pxEvent);
 801a0da:	7ffb      	ldrb	r3, [r7, #31]
 801a0dc:	69ba      	ldr	r2, [r7, #24]
 801a0de:	009b      	lsls	r3, r3, #2
 801a0e0:	4413      	add	r3, r2
 801a0e2:	685b      	ldr	r3, [r3, #4]
 801a0e4:	68b9      	ldr	r1, [r7, #8]
 801a0e6:	4618      	mov	r0, r3
 801a0e8:	f7ff ff82 	bl	8019ff0 <IProcessEventListenerOnProcessedDataReady>
  for (uint8_t i=0; i<AEVENT_SRC_CFG_MAX_LISTENERS; ++i) {
 801a0ec:	7ffb      	ldrb	r3, [r7, #31]
 801a0ee:	3301      	adds	r3, #1
 801a0f0:	77fb      	strb	r3, [r7, #31]
 801a0f2:	7ffb      	ldrb	r3, [r7, #31]
 801a0f4:	2b01      	cmp	r3, #1
 801a0f6:	d9e9      	bls.n	801a0cc <ProcessEventSrc_vtblSendEvent+0x28>
    }
  }

  return xRes;
 801a0f8:	8afb      	ldrh	r3, [r7, #22]
}
 801a0fa:	4618      	mov	r0, r3
 801a0fc:	3720      	adds	r7, #32
 801a0fe:	46bd      	mov	sp, r7
 801a100:	bd80      	pop	{r7, pc}
 801a102:	bf00      	nop
 801a104:	08027184 	.word	0x08027184

0801a108 <ABusIFSetHandle>:

// Inline functions definition
// ***************************

SYS_DEFINE_INLINE
sys_error_code_t ABusIFSetHandle(ABusIF *_this, void *pxHandle) {
 801a108:	b580      	push	{r7, lr}
 801a10a:	b082      	sub	sp, #8
 801a10c:	af00      	add	r7, sp, #0
 801a10e:	6078      	str	r0, [r7, #4]
 801a110:	6039      	str	r1, [r7, #0]
  assert_param(_this);
 801a112:	687b      	ldr	r3, [r7, #4]
 801a114:	2b00      	cmp	r3, #0
 801a116:	d103      	bne.n	801a120 <ABusIFSetHandle+0x18>
 801a118:	2195      	movs	r1, #149	; 0x95
 801a11a:	4805      	ldr	r0, [pc, #20]	; (801a130 <ABusIFSetHandle+0x28>)
 801a11c:	f7fb f8c5 	bl	80152aa <assert_failed>

  _this->m_xConnector.pxHandle = pxHandle;
 801a120:	687b      	ldr	r3, [r7, #4]
 801a122:	683a      	ldr	r2, [r7, #0]
 801a124:	609a      	str	r2, [r3, #8]

  return SYS_NO_ERROR_CODE;
 801a126:	2300      	movs	r3, #0
}
 801a128:	4618      	mov	r0, r3
 801a12a:	3708      	adds	r7, #8
 801a12c:	46bd      	mov	sp, r7
 801a12e:	bd80      	pop	{r7, pc}
 801a130:	080271f4 	.word	0x080271f4

0801a134 <ABusIFInit>:

  return _this->m_xConnector.pxHandle;
}

SYS_DEFINE_INLINE
sys_error_code_t ABusIFInit(ABusIF *_this, uint8_t nWhoAmI) {
 801a134:	b580      	push	{r7, lr}
 801a136:	b082      	sub	sp, #8
 801a138:	af00      	add	r7, sp, #0
 801a13a:	6078      	str	r0, [r7, #4]
 801a13c:	460b      	mov	r3, r1
 801a13e:	70fb      	strb	r3, [r7, #3]
  assert_param(_this);
 801a140:	687b      	ldr	r3, [r7, #4]
 801a142:	2b00      	cmp	r3, #0
 801a144:	d103      	bne.n	801a14e <ABusIFInit+0x1a>
 801a146:	21a5      	movs	r1, #165	; 0xa5
 801a148:	480b      	ldr	r0, [pc, #44]	; (801a178 <ABusIFInit+0x44>)
 801a14a:	f7fb f8ae 	bl	80152aa <assert_failed>

  _this->m_nWhoAmI = nWhoAmI;
 801a14e:	687b      	ldr	r3, [r7, #4]
 801a150:	78fa      	ldrb	r2, [r7, #3]
 801a152:	731a      	strb	r2, [r3, #12]

  _this->m_pfBusCtrl = NULL;
 801a154:	687b      	ldr	r3, [r7, #4]
 801a156:	2200      	movs	r2, #0
 801a158:	615a      	str	r2, [r3, #20]
  _this->m_xConnector.pfReadReg = ABusIFNullRW;
 801a15a:	687b      	ldr	r3, [r7, #4]
 801a15c:	4a07      	ldr	r2, [pc, #28]	; (801a17c <ABusIFInit+0x48>)
 801a15e:	605a      	str	r2, [r3, #4]
  _this->m_xConnector.pfWriteReg = ABusIFNullRW;
 801a160:	687b      	ldr	r3, [r7, #4]
 801a162:	4a06      	ldr	r2, [pc, #24]	; (801a17c <ABusIFInit+0x48>)
 801a164:	601a      	str	r2, [r3, #0]
  _this->m_xConnector.pxHandle = NULL;
 801a166:	687b      	ldr	r3, [r7, #4]
 801a168:	2200      	movs	r2, #0
 801a16a:	609a      	str	r2, [r3, #8]

  return SYS_NO_ERROR_CODE;
 801a16c:	2300      	movs	r3, #0
}
 801a16e:	4618      	mov	r0, r3
 801a170:	3708      	adds	r7, #8
 801a172:	46bd      	mov	sp, r7
 801a174:	bd80      	pop	{r7, pc}
 801a176:	bf00      	nop
 801a178:	080271f4 	.word	0x080271f4
 801a17c:	0801a1b1 	.word	0x0801a1b1

0801a180 <ABusIFSetWhoAmI>:

SYS_DEFINE_INLINE
sys_error_code_t ABusIFSetWhoAmI(ABusIF *_this, uint8_t nWhoAmI) {
 801a180:	b580      	push	{r7, lr}
 801a182:	b082      	sub	sp, #8
 801a184:	af00      	add	r7, sp, #0
 801a186:	6078      	str	r0, [r7, #4]
 801a188:	460b      	mov	r3, r1
 801a18a:	70fb      	strb	r3, [r7, #3]
  assert_param(_this);
 801a18c:	687b      	ldr	r3, [r7, #4]
 801a18e:	2b00      	cmp	r3, #0
 801a190:	d103      	bne.n	801a19a <ABusIFSetWhoAmI+0x1a>
 801a192:	21b3      	movs	r1, #179	; 0xb3
 801a194:	4805      	ldr	r0, [pc, #20]	; (801a1ac <ABusIFSetWhoAmI+0x2c>)
 801a196:	f7fb f888 	bl	80152aa <assert_failed>

  _this->m_nWhoAmI = nWhoAmI;
 801a19a:	687b      	ldr	r3, [r7, #4]
 801a19c:	78fa      	ldrb	r2, [r7, #3]
 801a19e:	731a      	strb	r2, [r3, #12]

  return SYS_NO_ERROR_CODE;
 801a1a0:	2300      	movs	r3, #0
}
 801a1a2:	4618      	mov	r0, r3
 801a1a4:	3708      	adds	r7, #8
 801a1a6:	46bd      	mov	sp, r7
 801a1a8:	bd80      	pop	{r7, pc}
 801a1aa:	bf00      	nop
 801a1ac:	080271f4 	.word	0x080271f4

0801a1b0 <ABusIFNullRW>:
extern sys_error_code_t ABusIFSetWhoAmI(ABusIF *_this, uint8_t nWhoAmI);
extern uint8_t ABusIFGetWhoAmI(const ABusIF *_this);
#endif

int32_t ABusIFNullRW(void *pxSensor, uint8_t nRegAddr, uint8_t *pnData, uint16_t nSize)
{
 801a1b0:	b480      	push	{r7}
 801a1b2:	b085      	sub	sp, #20
 801a1b4:	af00      	add	r7, sp, #0
 801a1b6:	60f8      	str	r0, [r7, #12]
 801a1b8:	607a      	str	r2, [r7, #4]
 801a1ba:	461a      	mov	r2, r3
 801a1bc:	460b      	mov	r3, r1
 801a1be:	72fb      	strb	r3, [r7, #11]
 801a1c0:	4613      	mov	r3, r2
 801a1c2:	813b      	strh	r3, [r7, #8]
  UNUSED(pxSensor);
  UNUSED(nRegAddr);
  UNUSED(pnData);
  UNUSED(nSize);

  return 0;
 801a1c4:	2300      	movs	r3, #0
}
 801a1c6:	4618      	mov	r0, r3
 801a1c8:	3714      	adds	r7, #20
 801a1ca:	46bd      	mov	sp, r7
 801a1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a1d0:	4770      	bx	lr

0801a1d2 <IBusCtrl>:

// Inline function definition.
// ***************************

SYS_DEFINE_INLINE
sys_error_code_t IBusCtrl(IBus *_this, EBusCtrlCmd eCtrlCmd, uint32_t nParams) {
 801a1d2:	b580      	push	{r7, lr}
 801a1d4:	b084      	sub	sp, #16
 801a1d6:	af00      	add	r7, sp, #0
 801a1d8:	60f8      	str	r0, [r7, #12]
 801a1da:	460b      	mov	r3, r1
 801a1dc:	607a      	str	r2, [r7, #4]
 801a1de:	72fb      	strb	r3, [r7, #11]
  return _this->vptr->Ctrl(_this, eCtrlCmd, nParams);
 801a1e0:	68fb      	ldr	r3, [r7, #12]
 801a1e2:	681b      	ldr	r3, [r3, #0]
 801a1e4:	681b      	ldr	r3, [r3, #0]
 801a1e6:	7af9      	ldrb	r1, [r7, #11]
 801a1e8:	687a      	ldr	r2, [r7, #4]
 801a1ea:	68f8      	ldr	r0, [r7, #12]
 801a1ec:	4798      	blx	r3
 801a1ee:	4603      	mov	r3, r0
}
 801a1f0:	4618      	mov	r0, r3
 801a1f2:	3710      	adds	r7, #16
 801a1f4:	46bd      	mov	sp, r7
 801a1f6:	bd80      	pop	{r7, pc}

0801a1f8 <IBusConnectDevice>:

SYS_DEFINE_INLINE
sys_error_code_t IBusConnectDevice(IBus *_this, ABusIF *pxBusIF) {
 801a1f8:	b580      	push	{r7, lr}
 801a1fa:	b082      	sub	sp, #8
 801a1fc:	af00      	add	r7, sp, #0
 801a1fe:	6078      	str	r0, [r7, #4]
 801a200:	6039      	str	r1, [r7, #0]
  return _this->vptr->ConnectDevice(_this, pxBusIF);
 801a202:	687b      	ldr	r3, [r7, #4]
 801a204:	681b      	ldr	r3, [r3, #0]
 801a206:	685b      	ldr	r3, [r3, #4]
 801a208:	6839      	ldr	r1, [r7, #0]
 801a20a:	6878      	ldr	r0, [r7, #4]
 801a20c:	4798      	blx	r3
 801a20e:	4603      	mov	r3, r0
}
 801a210:	4618      	mov	r0, r3
 801a212:	3708      	adds	r7, #8
 801a214:	46bd      	mov	sp, r7
 801a216:	bd80      	pop	{r7, pc}

0801a218 <AMTGetTaskPowerMode>:
EPowerMode AMTGetTaskPowerMode(AManagedTask *_this) {
 801a218:	b590      	push	{r4, r7, lr}
 801a21a:	b085      	sub	sp, #20
 801a21c:	af00      	add	r7, sp, #0
 801a21e:	6078      	str	r0, [r7, #4]
  assert_param(_this != NULL);
 801a220:	687b      	ldr	r3, [r7, #4]
 801a222:	2b00      	cmp	r3, #0
 801a224:	d103      	bne.n	801a22e <AMTGetTaskPowerMode+0x16>
 801a226:	21ca      	movs	r1, #202	; 0xca
 801a228:	480c      	ldr	r0, [pc, #48]	; (801a25c <AMTGetTaskPowerMode+0x44>)
 801a22a:	f7fb f83e 	bl	80152aa <assert_failed>
  EPowerMode eTaskPowrMode = (_this->m_pPMState2PMStateMap != NULL) ?
 801a22e:	687b      	ldr	r3, [r7, #4]
 801a230:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
      _this->m_pPMState2PMStateMap[(uint8_t)SysGetPowerMode()] :
 801a234:	2b00      	cmp	r3, #0
 801a236:	d008      	beq.n	801a24a <AMTGetTaskPowerMode+0x32>
 801a238:	687b      	ldr	r3, [r7, #4]
 801a23a:	f8d3 40bc 	ldr.w	r4, [r3, #188]	; 0xbc
 801a23e:	f7f4 ffe5 	bl	800f20c <SysGetPowerMode>
 801a242:	4603      	mov	r3, r0
 801a244:	4423      	add	r3, r4
 801a246:	781b      	ldrb	r3, [r3, #0]
 801a248:	e002      	b.n	801a250 <AMTGetTaskPowerMode+0x38>
      SysGetPowerMode();
 801a24a:	f7f4 ffdf 	bl	800f20c <SysGetPowerMode>
 801a24e:	4603      	mov	r3, r0
  EPowerMode eTaskPowrMode = (_this->m_pPMState2PMStateMap != NULL) ?
 801a250:	73fb      	strb	r3, [r7, #15]
  return eTaskPowrMode;
 801a252:	7bfb      	ldrb	r3, [r7, #15]
}
 801a254:	4618      	mov	r0, r3
 801a256:	3714      	adds	r7, #20
 801a258:	46bd      	mov	sp, r7
 801a25a:	bd90      	pop	{r4, r7, pc}
 801a25c:	0802723c 	.word	0x0802723c

0801a260 <AMTInitEx>:
sys_error_code_t AMTInitEx(AManagedTaskEx *_this) {
 801a260:	b480      	push	{r7}
 801a262:	b083      	sub	sp, #12
 801a264:	af00      	add	r7, sp, #0
 801a266:	6078      	str	r0, [r7, #4]
  _this->m_pNext = NULL;
 801a268:	687b      	ldr	r3, [r7, #4]
 801a26a:	2200      	movs	r2, #0
 801a26c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  _this->m_pfPMState2FuncMap = NULL;
 801a270:	687b      	ldr	r3, [r7, #4]
 801a272:	2200      	movs	r2, #0
 801a274:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
  _this->m_pPMState2PMStateMap = NULL;
 801a278:	687b      	ldr	r3, [r7, #4]
 801a27a:	2200      	movs	r2, #0
 801a27c:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  _this->m_pfPMState2FuncMap = NULL;
 801a280:	687b      	ldr	r3, [r7, #4]
 801a282:	2200      	movs	r2, #0
 801a284:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
  _this->m_pPMState2PMStateMap = NULL;
 801a288:	687b      	ldr	r3, [r7, #4]
 801a28a:	2200      	movs	r2, #0
 801a28c:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  _this->m_xStatus.nDelayPowerModeSwitch = 1;
 801a290:	687a      	ldr	r2, [r7, #4]
 801a292:	f892 30c0 	ldrb.w	r3, [r2, #192]	; 0xc0
 801a296:	f043 0301 	orr.w	r3, r3, #1
 801a29a:	f882 30c0 	strb.w	r3, [r2, #192]	; 0xc0
  _this->m_xStatus.nPowerModeSwitchPending = 0;
 801a29e:	687a      	ldr	r2, [r7, #4]
 801a2a0:	f892 30c0 	ldrb.w	r3, [r2, #192]	; 0xc0
 801a2a4:	f36f 0341 	bfc	r3, #1, #1
 801a2a8:	f882 30c0 	strb.w	r3, [r2, #192]	; 0xc0
  _this->m_xStatus.nPowerModeSwitchDone = 0;
 801a2ac:	687a      	ldr	r2, [r7, #4]
 801a2ae:	f892 30c0 	ldrb.w	r3, [r2, #192]	; 0xc0
 801a2b2:	f36f 0382 	bfc	r3, #2, #1
 801a2b6:	f882 30c0 	strb.w	r3, [r2, #192]	; 0xc0
  _this->m_xStatus.nIsTaskStillRunning = 0;
 801a2ba:	687a      	ldr	r2, [r7, #4]
 801a2bc:	f892 30c0 	ldrb.w	r3, [r2, #192]	; 0xc0
 801a2c0:	f36f 03c3 	bfc	r3, #3, #1
 801a2c4:	f882 30c0 	strb.w	r3, [r2, #192]	; 0xc0
  _this->m_xStatus.nErrorCount = 0;
 801a2c8:	687a      	ldr	r2, [r7, #4]
 801a2ca:	f892 30c0 	ldrb.w	r3, [r2, #192]	; 0xc0
 801a2ce:	f36f 1305 	bfc	r3, #4, #2
 801a2d2:	f882 30c0 	strb.w	r3, [r2, #192]	; 0xc0
  _this->m_xStatus.nAutoStart = 0;
 801a2d6:	687a      	ldr	r2, [r7, #4]
 801a2d8:	f892 30c0 	ldrb.w	r3, [r2, #192]	; 0xc0
 801a2dc:	f36f 1386 	bfc	r3, #6, #1
 801a2e0:	f882 30c0 	strb.w	r3, [r2, #192]	; 0xc0
  _this->m_xStatus.nReserved = 1; // this identifies the task as an AManagedTaskEx.
 801a2e4:	687a      	ldr	r2, [r7, #4]
 801a2e6:	f892 30c0 	ldrb.w	r3, [r2, #192]	; 0xc0
 801a2ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a2ee:	f882 30c0 	strb.w	r3, [r2, #192]	; 0xc0
  _this->m_xStatusEx.nIsWaitingNoTimeout = 0;
 801a2f2:	687a      	ldr	r2, [r7, #4]
 801a2f4:	f892 30c1 	ldrb.w	r3, [r2, #193]	; 0xc1
 801a2f8:	f36f 0300 	bfc	r3, #0, #1
 801a2fc:	f882 30c1 	strb.w	r3, [r2, #193]	; 0xc1
  _this->m_xStatusEx.nPowerModeClass = E_PM_CLASS_0;
 801a300:	687a      	ldr	r2, [r7, #4]
 801a302:	f892 30c1 	ldrb.w	r3, [r2, #193]	; 0xc1
 801a306:	f36f 0342 	bfc	r3, #1, #2
 801a30a:	f882 30c1 	strb.w	r3, [r2, #193]	; 0xc1
  _this->m_xStatusEx.nUnused = 0;
 801a30e:	687a      	ldr	r2, [r7, #4]
 801a310:	f892 30c1 	ldrb.w	r3, [r2, #193]	; 0xc1
 801a314:	f36f 03c6 	bfc	r3, #3, #4
 801a318:	f882 30c1 	strb.w	r3, [r2, #193]	; 0xc1
  _this->m_xStatusEx.nReserved = 0;
 801a31c:	687a      	ldr	r2, [r7, #4]
 801a31e:	f892 30c1 	ldrb.w	r3, [r2, #193]	; 0xc1
 801a322:	f36f 13c7 	bfc	r3, #7, #1
 801a326:	f882 30c1 	strb.w	r3, [r2, #193]	; 0xc1
  return SYS_NO_ERROR_CODE;
 801a32a:	2300      	movs	r3, #0
}
 801a32c:	4618      	mov	r0, r3
 801a32e:	370c      	adds	r7, #12
 801a330:	46bd      	mov	sp, r7
 801a332:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a336:	4770      	bx	lr

0801a338 <AMTExSetInactiveState>:
sys_error_code_t AMTExSetInactiveState(AManagedTaskEx *_this, boolean_t bBlockedSuspended) {
 801a338:	b580      	push	{r7, lr}
 801a33a:	b082      	sub	sp, #8
 801a33c:	af00      	add	r7, sp, #0
 801a33e:	6078      	str	r0, [r7, #4]
 801a340:	460b      	mov	r3, r1
 801a342:	70fb      	strb	r3, [r7, #3]
  assert_param(_this);
 801a344:	687b      	ldr	r3, [r7, #4]
 801a346:	2b00      	cmp	r3, #0
 801a348:	d103      	bne.n	801a352 <AMTExSetInactiveState+0x1a>
 801a34a:	21a6      	movs	r1, #166	; 0xa6
 801a34c:	4807      	ldr	r0, [pc, #28]	; (801a36c <AMTExSetInactiveState+0x34>)
 801a34e:	f7fa ffac 	bl	80152aa <assert_failed>
  _this->m_xStatusEx.nIsWaitingNoTimeout = (uint8_t)bBlockedSuspended;
 801a352:	687a      	ldr	r2, [r7, #4]
 801a354:	f892 30c1 	ldrb.w	r3, [r2, #193]	; 0xc1
 801a358:	78f9      	ldrb	r1, [r7, #3]
 801a35a:	f361 0300 	bfi	r3, r1, #0, #1
 801a35e:	f882 30c1 	strb.w	r3, [r2, #193]	; 0xc1
  return SYS_NO_ERROR_CODE;
 801a362:	2300      	movs	r3, #0
}
 801a364:	4618      	mov	r0, r3
 801a366:	3708      	adds	r7, #8
 801a368:	46bd      	mov	sp, r7
 801a36a:	bd80      	pop	{r7, pc}
 801a36c:	08027284 	.word	0x08027284

0801a370 <AMTExIsTaskInactive>:
boolean_t AMTExIsTaskInactive(AManagedTaskEx *_this){
 801a370:	b580      	push	{r7, lr}
 801a372:	b082      	sub	sp, #8
 801a374:	af00      	add	r7, sp, #0
 801a376:	6078      	str	r0, [r7, #4]
  assert_param(_this);
 801a378:	687b      	ldr	r3, [r7, #4]
 801a37a:	2b00      	cmp	r3, #0
 801a37c:	d103      	bne.n	801a386 <AMTExIsTaskInactive+0x16>
 801a37e:	21af      	movs	r1, #175	; 0xaf
 801a380:	4808      	ldr	r0, [pc, #32]	; (801a3a4 <AMTExIsTaskInactive+0x34>)
 801a382:	f7fa ff92 	bl	80152aa <assert_failed>
  return (boolean_t)_this->m_xStatusEx.nIsWaitingNoTimeout;
 801a386:	687b      	ldr	r3, [r7, #4]
 801a388:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 801a38c:	f003 0301 	and.w	r3, r3, #1
 801a390:	b2db      	uxtb	r3, r3
 801a392:	2b00      	cmp	r3, #0
 801a394:	bf14      	ite	ne
 801a396:	2301      	movne	r3, #1
 801a398:	2300      	moveq	r3, #0
 801a39a:	b2db      	uxtb	r3, r3
}
 801a39c:	4618      	mov	r0, r3
 801a39e:	3708      	adds	r7, #8
 801a3a0:	46bd      	mov	sp, r7
 801a3a2:	bd80      	pop	{r7, pc}
 801a3a4:	08027284 	.word	0x08027284

0801a3a8 <IEventInit>:
sys_error_code_t IEventInit(IEvent *this, const IEventSrc *pSource) {
 801a3a8:	b480      	push	{r7}
 801a3aa:	b083      	sub	sp, #12
 801a3ac:	af00      	add	r7, sp, #0
 801a3ae:	6078      	str	r0, [r7, #4]
 801a3b0:	6039      	str	r1, [r7, #0]
	this->pSource = pSource;
 801a3b2:	687b      	ldr	r3, [r7, #4]
 801a3b4:	683a      	ldr	r2, [r7, #0]
 801a3b6:	601a      	str	r2, [r3, #0]
	return SYS_NO_ERROR_CODE;
 801a3b8:	2300      	movs	r3, #0
}
 801a3ba:	4618      	mov	r0, r3
 801a3bc:	370c      	adds	r7, #12
 801a3be:	46bd      	mov	sp, r7
 801a3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a3c4:	4770      	bx	lr

0801a3c6 <IEventSrcInit>:
sys_error_code_t IEventSrcInit(IEventSrc *this) {
 801a3c6:	b580      	push	{r7, lr}
 801a3c8:	b082      	sub	sp, #8
 801a3ca:	af00      	add	r7, sp, #0
 801a3cc:	6078      	str	r0, [r7, #4]
	return this->vptr->Init(this);
 801a3ce:	687b      	ldr	r3, [r7, #4]
 801a3d0:	681b      	ldr	r3, [r3, #0]
 801a3d2:	681b      	ldr	r3, [r3, #0]
 801a3d4:	6878      	ldr	r0, [r7, #4]
 801a3d6:	4798      	blx	r3
 801a3d8:	4603      	mov	r3, r0
}
 801a3da:	4618      	mov	r0, r3
 801a3dc:	3708      	adds	r7, #8
 801a3de:	46bd      	mov	sp, r7
 801a3e0:	bd80      	pop	{r7, pc}

0801a3e2 <IEventSrcSendEvent>:
sys_error_code_t IEventSrcSendEvent(const IEventSrc *this, const IEvent *pxEvent, void *pvParams) {
 801a3e2:	b580      	push	{r7, lr}
 801a3e4:	b084      	sub	sp, #16
 801a3e6:	af00      	add	r7, sp, #0
 801a3e8:	60f8      	str	r0, [r7, #12]
 801a3ea:	60b9      	str	r1, [r7, #8]
 801a3ec:	607a      	str	r2, [r7, #4]
	return this->vptr->SendEvent(this, pxEvent, pvParams);
 801a3ee:	68fb      	ldr	r3, [r7, #12]
 801a3f0:	681b      	ldr	r3, [r3, #0]
 801a3f2:	691b      	ldr	r3, [r3, #16]
 801a3f4:	687a      	ldr	r2, [r7, #4]
 801a3f6:	68b9      	ldr	r1, [r7, #8]
 801a3f8:	68f8      	ldr	r0, [r7, #12]
 801a3fa:	4798      	blx	r3
 801a3fc:	4603      	mov	r3, r0
}
 801a3fe:	4618      	mov	r0, r3
 801a400:	3710      	adds	r7, #16
 801a402:	46bd      	mov	sp, r7
 801a404:	bd80      	pop	{r7, pc}

0801a406 <ISourceGetId>:
static inline uint8_t ISourceGetId(ISourceObservable *_this) {
 801a406:	b580      	push	{r7, lr}
 801a408:	b082      	sub	sp, #8
 801a40a:	af00      	add	r7, sp, #0
 801a40c:	6078      	str	r0, [r7, #4]
  return _this->    vptr->GetId(_this );
 801a40e:	687b      	ldr	r3, [r7, #4]
 801a410:	681b      	ldr	r3, [r3, #0]
 801a412:	681b      	ldr	r3, [r3, #0]
 801a414:	6878      	ldr	r0, [r7, #4]
 801a416:	4798      	blx	r3
 801a418:	4603      	mov	r3, r0
}
 801a41a:	4618      	mov	r0, r3
 801a41c:	3708      	adds	r7, #8
 801a41e:	46bd      	mov	sp, r7
 801a420:	bd80      	pop	{r7, pc}
	...

0801a424 <SensorEventInit>:

// Inline functions definition
// ***************************

SYS_DEFINE_STATIC_INLINE
sys_error_code_t SensorEventInit(IEvent *_this, const IEventSrc *pSource, const ai_logging_packet_t   *stream, double fTimeStamp, uint16_t nSensorID) {
 801a424:	b580      	push	{r7, lr}
 801a426:	b086      	sub	sp, #24
 801a428:	af00      	add	r7, sp, #0
 801a42a:	60f8      	str	r0, [r7, #12]
 801a42c:	60b9      	str	r1, [r7, #8]
 801a42e:	607a      	str	r2, [r7, #4]
  assert_param(_this);
 801a430:	68fb      	ldr	r3, [r7, #12]
 801a432:	2b00      	cmp	r3, #0
 801a434:	d103      	bne.n	801a43e <SensorEventInit+0x1a>
 801a436:	2163      	movs	r1, #99	; 0x63
 801a438:	480c      	ldr	r0, [pc, #48]	; (801a46c <SensorEventInit+0x48>)
 801a43a:	f7fa ff36 	bl	80152aa <assert_failed>
  SensorEvent *pObj = (SensorEvent*)_this;
 801a43e:	68fb      	ldr	r3, [r7, #12]
 801a440:	617b      	str	r3, [r7, #20]

  IEventInit(_this, pSource);
 801a442:	68b9      	ldr	r1, [r7, #8]
 801a444:	68f8      	ldr	r0, [r7, #12]
 801a446:	f7ff ffaf 	bl	801a3a8 <IEventInit>
  pObj->stream = stream;
 801a44a:	697b      	ldr	r3, [r7, #20]
 801a44c:	687a      	ldr	r2, [r7, #4]
 801a44e:	605a      	str	r2, [r3, #4]
  pObj->fTimeStamp = fTimeStamp;
 801a450:	6979      	ldr	r1, [r7, #20]
 801a452:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801a456:	e9c1 2302 	strd	r2, r3, [r1, #8]
  pObj->nSensorID = nSensorID;
 801a45a:	697b      	ldr	r3, [r7, #20]
 801a45c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 801a45e:	821a      	strh	r2, [r3, #16]

  return SYS_NO_ERROR_CODE;
 801a460:	2300      	movs	r3, #0
}
 801a462:	4618      	mov	r0, r3
 801a464:	3718      	adds	r7, #24
 801a466:	46bd      	mov	sp, r7
 801a468:	bd80      	pop	{r7, pc}
 801a46a:	bf00      	nop
 801a46c:	080272d0 	.word	0x080272d0

0801a470 <IIS3DWBTaskGetAccSensorIF>:

// Public API definition
// *********************

ISourceObservable* IIS3DWBTaskGetAccSensorIF(IIS3DWBTask *_this)
{
 801a470:	b480      	push	{r7}
 801a472:	b083      	sub	sp, #12
 801a474:	af00      	add	r7, sp, #0
 801a476:	6078      	str	r0, [r7, #4]
  return (ISourceObservable*) &(_this->acc_sensor_if);
 801a478:	687b      	ldr	r3, [r7, #4]
 801a47a:	33d4      	adds	r3, #212	; 0xd4
}
 801a47c:	4618      	mov	r0, r3
 801a47e:	370c      	adds	r7, #12
 801a480:	46bd      	mov	sp, r7
 801a482:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a486:	4770      	bx	lr

0801a488 <IIS3DWBTaskAlloc>:

AManagedTaskEx* IIS3DWBTaskAlloc(const void *pIRQConfig, const void *pCSConfig, EBusType eBusType)
{
 801a488:	b580      	push	{r7, lr}
 801a48a:	b084      	sub	sp, #16
 801a48c:	af00      	add	r7, sp, #0
 801a48e:	60f8      	str	r0, [r7, #12]
 801a490:	60b9      	str	r1, [r7, #8]
 801a492:	4613      	mov	r3, r2
 801a494:	71fb      	strb	r3, [r7, #7]
  // In this application there is only one Keyboard task,
  // so this allocator implement the singleton design pattern.

  // Initialize the super class
  AMTInitEx(&sTaskObj.super);
 801a496:	480f      	ldr	r0, [pc, #60]	; (801a4d4 <IIS3DWBTaskAlloc+0x4c>)
 801a498:	f7ff fee2 	bl	801a260 <AMTInitEx>

  sTaskObj.super.vptr = &sTheClass.vtbl;
 801a49c:	4b0d      	ldr	r3, [pc, #52]	; (801a4d4 <IIS3DWBTaskAlloc+0x4c>)
 801a49e:	4a0e      	ldr	r2, [pc, #56]	; (801a4d8 <IIS3DWBTaskAlloc+0x50>)
 801a4a0:	601a      	str	r2, [r3, #0]
  sTaskObj.acc_sensor_if.vptr = &sTheClass.acc_sensor_if_vtbl;
 801a4a2:	4b0c      	ldr	r3, [pc, #48]	; (801a4d4 <IIS3DWBTaskAlloc+0x4c>)
 801a4a4:	4a0d      	ldr	r2, [pc, #52]	; (801a4dc <IIS3DWBTaskAlloc+0x54>)
 801a4a6:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  sTaskObj.acc_sensor_descriptor = &sTheClass.acc_class_descriptor;
 801a4aa:	4b0a      	ldr	r3, [pc, #40]	; (801a4d4 <IIS3DWBTaskAlloc+0x4c>)
 801a4ac:	4a0c      	ldr	r2, [pc, #48]	; (801a4e0 <IIS3DWBTaskAlloc+0x58>)
 801a4ae:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

  sTaskObj.pIRQConfig = (MX_GPIOParams_t*)pIRQConfig;
 801a4b2:	4a08      	ldr	r2, [pc, #32]	; (801a4d4 <IIS3DWBTaskAlloc+0x4c>)
 801a4b4:	68fb      	ldr	r3, [r7, #12]
 801a4b6:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
  sTaskObj.pCSConfig = (MX_GPIOParams_t*)pCSConfig;
 801a4ba:	4a06      	ldr	r2, [pc, #24]	; (801a4d4 <IIS3DWBTaskAlloc+0x4c>)
 801a4bc:	68bb      	ldr	r3, [r7, #8]
 801a4be:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8

  sTaskObj.eBusType = eBusType;
 801a4c2:	4a04      	ldr	r2, [pc, #16]	; (801a4d4 <IIS3DWBTaskAlloc+0x4c>)
 801a4c4:	79fb      	ldrb	r3, [r7, #7]
 801a4c6:	f882 30d0 	strb.w	r3, [r2, #208]	; 0xd0

  return (AManagedTaskEx*) &sTaskObj;
 801a4ca:	4b02      	ldr	r3, [pc, #8]	; (801a4d4 <IIS3DWBTaskAlloc+0x4c>)
}
 801a4cc:	4618      	mov	r0, r3
 801a4ce:	3710      	adds	r7, #16
 801a4d0:	46bd      	mov	sp, r7
 801a4d2:	bd80      	pop	{r7, pc}
 801a4d4:	20039740 	.word	0x20039740
 801a4d8:	0803582c 	.word	0x0803582c
 801a4dc:	08035848 	.word	0x08035848
 801a4e0:	08035880 	.word	0x08035880

0801a4e4 <IIS3DWBTaskGetSensorIF>:

ABusIF* IIS3DWBTaskGetSensorIF(IIS3DWBTask *_this)
{
 801a4e4:	b580      	push	{r7, lr}
 801a4e6:	b082      	sub	sp, #8
 801a4e8:	af00      	add	r7, sp, #0
 801a4ea:	6078      	str	r0, [r7, #4]
  assert_param(_this);
 801a4ec:	687b      	ldr	r3, [r7, #4]
 801a4ee:	2b00      	cmp	r3, #0
 801a4f0:	d104      	bne.n	801a4fc <IIS3DWBTaskGetSensorIF+0x18>
 801a4f2:	f44f 71c7 	mov.w	r1, #398	; 0x18e
 801a4f6:	4805      	ldr	r0, [pc, #20]	; (801a50c <IIS3DWBTaskGetSensorIF+0x28>)
 801a4f8:	f7fa fed7 	bl	80152aa <assert_failed>

  return _this->p_sensor_bus_if;
 801a4fc:	687b      	ldr	r3, [r7, #4]
 801a4fe:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
}
 801a502:	4618      	mov	r0, r3
 801a504:	3708      	adds	r7, #8
 801a506:	46bd      	mov	sp, r7
 801a508:	bd80      	pop	{r7, pc}
 801a50a:	bf00      	nop
 801a50c:	08027324 	.word	0x08027324

0801a510 <IIS3DWBTask_vtblHardwareInit>:

// AManagedTask virtual functions definition
// ***********************************************

sys_error_code_t IIS3DWBTask_vtblHardwareInit(AManagedTask *_this, void *pParams)
{
 801a510:	b580      	push	{r7, lr}
 801a512:	b084      	sub	sp, #16
 801a514:	af00      	add	r7, sp, #0
 801a516:	6078      	str	r0, [r7, #4]
 801a518:	6039      	str	r1, [r7, #0]
  assert_param(_this);
 801a51a:	687b      	ldr	r3, [r7, #4]
 801a51c:	2b00      	cmp	r3, #0
 801a51e:	d104      	bne.n	801a52a <IIS3DWBTask_vtblHardwareInit+0x1a>
 801a520:	f240 119f 	movw	r1, #415	; 0x19f
 801a524:	480a      	ldr	r0, [pc, #40]	; (801a550 <IIS3DWBTask_vtblHardwareInit+0x40>)
 801a526:	f7fa fec0 	bl	80152aa <assert_failed>
  sys_error_code_t res = SYS_NO_ERROR_CODE;
 801a52a:	2300      	movs	r3, #0
 801a52c:	81fb      	strh	r3, [r7, #14]
  IIS3DWBTask *p_obj = (IIS3DWBTask*) _this;
 801a52e:	687b      	ldr	r3, [r7, #4]
 801a530:	60bb      	str	r3, [r7, #8]

  /* Configure CS Pin */
  if(p_obj->pCSConfig != NULL)
 801a532:	68bb      	ldr	r3, [r7, #8]
 801a534:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 801a538:	2b00      	cmp	r3, #0
 801a53a:	d004      	beq.n	801a546 <IIS3DWBTask_vtblHardwareInit+0x36>
  {
    p_obj->pCSConfig->p_mx_init_f();
 801a53c:	68bb      	ldr	r3, [r7, #8]
 801a53e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 801a542:	681b      	ldr	r3, [r3, #0]
 801a544:	4798      	blx	r3
  }

  return res;
 801a546:	89fb      	ldrh	r3, [r7, #14]
}
 801a548:	4618      	mov	r0, r3
 801a54a:	3710      	adds	r7, #16
 801a54c:	46bd      	mov	sp, r7
 801a54e:	bd80      	pop	{r7, pc}
 801a550:	08027324 	.word	0x08027324

0801a554 <IIS3DWBTask_vtblOnCreateTask>:
		UINT *pPriority,
		UINT *pPreemptThreshold,
		ULONG *pTimeSlice,
		ULONG *pAutoStart,
		ULONG *pParams)
{
 801a554:	b580      	push	{r7, lr}
 801a556:	b08c      	sub	sp, #48	; 0x30
 801a558:	af04      	add	r7, sp, #16
 801a55a:	60f8      	str	r0, [r7, #12]
 801a55c:	60b9      	str	r1, [r7, #8]
 801a55e:	607a      	str	r2, [r7, #4]
 801a560:	603b      	str	r3, [r7, #0]
  assert_param(_this);
 801a562:	68fb      	ldr	r3, [r7, #12]
 801a564:	2b00      	cmp	r3, #0
 801a566:	d104      	bne.n	801a572 <IIS3DWBTask_vtblOnCreateTask+0x1e>
 801a568:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 801a56c:	4889      	ldr	r0, [pc, #548]	; (801a794 <IIS3DWBTask_vtblOnCreateTask+0x240>)
 801a56e:	f7fa fe9c 	bl	80152aa <assert_failed>
  sys_error_code_t res = SYS_NO_ERROR_CODE;
 801a572:	2300      	movs	r3, #0
 801a574:	83fb      	strh	r3, [r7, #30]
  IIS3DWBTask *p_obj = (IIS3DWBTask*) _this;
 801a576:	68fb      	ldr	r3, [r7, #12]
 801a578:	61bb      	str	r3, [r7, #24]

  // Create task specific sw resources.

  uint16_t nItemSize = IIS3DWB_TASK_CFG_IN_QUEUE_ITEM_SIZE;
 801a57a:	2310      	movs	r3, #16
 801a57c:	82fb      	strh	r3, [r7, #22]
  VOID *pvQueueItemsBuff = SysAlloc(IIS3DWB_TASK_CFG_IN_QUEUE_LENGTH * nItemSize);
 801a57e:	8afa      	ldrh	r2, [r7, #22]
 801a580:	4613      	mov	r3, r2
 801a582:	009b      	lsls	r3, r3, #2
 801a584:	4413      	add	r3, r2
 801a586:	009b      	lsls	r3, r3, #2
 801a588:	4618      	mov	r0, r3
 801a58a:	f7f4 fe81 	bl	800f290 <SysAlloc>
 801a58e:	6138      	str	r0, [r7, #16]
  if(pvQueueItemsBuff == NULL)
 801a590:	693b      	ldr	r3, [r7, #16]
 801a592:	2b00      	cmp	r3, #0
 801a594:	d107      	bne.n	801a5a6 <IIS3DWBTask_vtblOnCreateTask+0x52>
  {
    res = SYS_TASK_HEAP_OUT_OF_MEMORY_ERROR_CODE;
 801a596:	f240 235a 	movw	r3, #602	; 0x25a
 801a59a:	83fb      	strh	r3, [r7, #30]
    SYS_SET_SERVICE_LEVEL_ERROR_CODE(res);
 801a59c:	4a7e      	ldr	r2, [pc, #504]	; (801a798 <IIS3DWBTask_vtblOnCreateTask+0x244>)
 801a59e:	8bfb      	ldrh	r3, [r7, #30]
 801a5a0:	8053      	strh	r3, [r2, #2]
    return res;
 801a5a2:	8bfb      	ldrh	r3, [r7, #30]
 801a5a4:	e0f1      	b.n	801a78a <IIS3DWBTask_vtblOnCreateTask+0x236>
  }

  if(TX_SUCCESS != tx_queue_create(&p_obj->in_queue, "IIS3DWB_Q", nItemSize / 4, pvQueueItemsBuff, IIS3DWB_TASK_CFG_IN_QUEUE_LENGTH * nItemSize))
 801a5a6:	69bb      	ldr	r3, [r7, #24]
 801a5a8:	f503 7080 	add.w	r0, r3, #256	; 0x100
 801a5ac:	8afb      	ldrh	r3, [r7, #22]
 801a5ae:	089b      	lsrs	r3, r3, #2
 801a5b0:	b29b      	uxth	r3, r3
 801a5b2:	4619      	mov	r1, r3
 801a5b4:	8afa      	ldrh	r2, [r7, #22]
 801a5b6:	4613      	mov	r3, r2
 801a5b8:	009b      	lsls	r3, r3, #2
 801a5ba:	4413      	add	r3, r2
 801a5bc:	009b      	lsls	r3, r3, #2
 801a5be:	461a      	mov	r2, r3
 801a5c0:	2338      	movs	r3, #56	; 0x38
 801a5c2:	9301      	str	r3, [sp, #4]
 801a5c4:	9200      	str	r2, [sp, #0]
 801a5c6:	693b      	ldr	r3, [r7, #16]
 801a5c8:	460a      	mov	r2, r1
 801a5ca:	4974      	ldr	r1, [pc, #464]	; (801a79c <IIS3DWBTask_vtblOnCreateTask+0x248>)
 801a5cc:	f7f8 fade 	bl	8012b8c <_txe_queue_create>
 801a5d0:	4603      	mov	r3, r0
 801a5d2:	2b00      	cmp	r3, #0
 801a5d4:	d007      	beq.n	801a5e6 <IIS3DWBTask_vtblOnCreateTask+0x92>
  {
    res = SYS_TASK_HEAP_OUT_OF_MEMORY_ERROR_CODE;
 801a5d6:	f240 235a 	movw	r3, #602	; 0x25a
 801a5da:	83fb      	strh	r3, [r7, #30]
    SYS_SET_SERVICE_LEVEL_ERROR_CODE(res);
 801a5dc:	4a6e      	ldr	r2, [pc, #440]	; (801a798 <IIS3DWBTask_vtblOnCreateTask+0x244>)
 801a5de:	8bfb      	ldrh	r3, [r7, #30]
 801a5e0:	8053      	strh	r3, [r2, #2]
    return res;
 801a5e2:	8bfb      	ldrh	r3, [r7, #30]
 801a5e4:	e0d1      	b.n	801a78a <IIS3DWBTask_vtblOnCreateTask+0x236>
  }

  /* create the software timer*/
  if(TX_SUCCESS != tx_timer_create(
 801a5e6:	69bb      	ldr	r3, [r7, #24]
 801a5e8:	f503 6004 	add.w	r0, r3, #2112	; 0x840
 801a5ec:	232c      	movs	r3, #44	; 0x2c
 801a5ee:	9303      	str	r3, [sp, #12]
 801a5f0:	2300      	movs	r3, #0
 801a5f2:	9302      	str	r3, [sp, #8]
 801a5f4:	2300      	movs	r3, #0
 801a5f6:	9301      	str	r3, [sp, #4]
 801a5f8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 801a5fc:	9300      	str	r3, [sp, #0]
 801a5fe:	2300      	movs	r3, #0
 801a600:	4a67      	ldr	r2, [pc, #412]	; (801a7a0 <IIS3DWBTask_vtblOnCreateTask+0x24c>)
 801a602:	4968      	ldr	r1, [pc, #416]	; (801a7a4 <IIS3DWBTask_vtblOnCreateTask+0x250>)
 801a604:	f7f8 ff9c 	bl	8013540 <_txe_timer_create>
 801a608:	4603      	mov	r3, r0
 801a60a:	2b00      	cmp	r3, #0
 801a60c:	d007      	beq.n	801a61e <IIS3DWBTask_vtblOnCreateTask+0xca>
		  (ULONG)TX_NULL,
		  AMT_MS_TO_TICKS(IIS3DWB_TASK_CFG_TIMER_PERIOD_MS),
		  0,
		  TX_NO_ACTIVATE))
  {
    res = SYS_TASK_HEAP_OUT_OF_MEMORY_ERROR_CODE;
 801a60e:	f240 235a 	movw	r3, #602	; 0x25a
 801a612:	83fb      	strh	r3, [r7, #30]
    SYS_SET_SERVICE_LEVEL_ERROR_CODE(res);
 801a614:	4a60      	ldr	r2, [pc, #384]	; (801a798 <IIS3DWBTask_vtblOnCreateTask+0x244>)
 801a616:	8bfb      	ldrh	r3, [r7, #30]
 801a618:	8053      	strh	r3, [r2, #2]
    return res;
 801a61a:	8bfb      	ldrh	r3, [r7, #30]
 801a61c:	e0b5      	b.n	801a78a <IIS3DWBTask_vtblOnCreateTask+0x236>
  }

  switch (p_obj->eBusType)
 801a61e:	69bb      	ldr	r3, [r7, #24]
 801a620:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
 801a624:	2b00      	cmp	r3, #0
 801a626:	d002      	beq.n	801a62e <IIS3DWBTask_vtblOnCreateTask+0xda>
 801a628:	2b01      	cmp	r3, #1
 801a62a:	d030      	beq.n	801a68e <IIS3DWBTask_vtblOnCreateTask+0x13a>
 801a62c:	e028      	b.n	801a680 <IIS3DWBTask_vtblOnCreateTask+0x12c>
  {
    case SPI_IF:
#if (SM_SPI_BUS_IF == 1)
      assert(p_obj->pCSConfig != NULL);
 801a62e:	69bb      	ldr	r3, [r7, #24]
 801a630:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 801a634:	2b00      	cmp	r3, #0
 801a636:	d106      	bne.n	801a646 <IIS3DWBTask_vtblOnCreateTask+0xf2>
 801a638:	4b5b      	ldr	r3, [pc, #364]	; (801a7a8 <IIS3DWBTask_vtblOnCreateTask+0x254>)
 801a63a:	4a5c      	ldr	r2, [pc, #368]	; (801a7ac <IIS3DWBTask_vtblOnCreateTask+0x258>)
 801a63c:	f240 11e1 	movw	r1, #481	; 0x1e1
 801a640:	4854      	ldr	r0, [pc, #336]	; (801a794 <IIS3DWBTask_vtblOnCreateTask+0x240>)
 801a642:	f009 fa09 	bl	8023a58 <__assert_func>
      p_obj->p_sensor_bus_if = SPIBusIFAlloc(IIS3DWB_ID, p_obj->pCSConfig->port, p_obj->pCSConfig->pin, 0);
 801a646:	69bb      	ldr	r3, [r7, #24]
 801a648:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 801a64c:	68d9      	ldr	r1, [r3, #12]
 801a64e:	69bb      	ldr	r3, [r7, #24]
 801a650:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 801a654:	689b      	ldr	r3, [r3, #8]
 801a656:	b29a      	uxth	r2, r3
 801a658:	2300      	movs	r3, #0
 801a65a:	207b      	movs	r0, #123	; 0x7b
 801a65c:	f005 f824 	bl	801f6a8 <SPIBusIFAlloc>
 801a660:	4602      	mov	r2, r0
 801a662:	69bb      	ldr	r3, [r7, #24]
 801a664:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
      if (p_obj->p_sensor_bus_if == NULL)
 801a668:	69bb      	ldr	r3, [r7, #24]
 801a66a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 801a66e:	2b00      	cmp	r3, #0
 801a670:	d10f      	bne.n	801a692 <IIS3DWBTask_vtblOnCreateTask+0x13e>
      {
        res = SYS_TASK_HEAP_OUT_OF_MEMORY_ERROR_CODE;
 801a672:	f240 235a 	movw	r3, #602	; 0x25a
 801a676:	83fb      	strh	r3, [r7, #30]
        SYS_SET_SERVICE_LEVEL_ERROR_CODE(res);
 801a678:	4a47      	ldr	r2, [pc, #284]	; (801a798 <IIS3DWBTask_vtblOnCreateTask+0x244>)
 801a67a:	8bfb      	ldrh	r3, [r7, #30]
 801a67c:	8053      	strh	r3, [r2, #2]
      }
#endif
      break;
 801a67e:	e008      	b.n	801a692 <IIS3DWBTask_vtblOnCreateTask+0x13e>
      }
#endif
      break;
    default:
      // Unknown bus type
      res = SYS_TASK_INVALID_PARAM_ERROR_CODE;
 801a680:	f44f 7317 	mov.w	r3, #604	; 0x25c
 801a684:	83fb      	strh	r3, [r7, #30]
      SYS_SET_SERVICE_LEVEL_ERROR_CODE(res);
 801a686:	4a44      	ldr	r2, [pc, #272]	; (801a798 <IIS3DWBTask_vtblOnCreateTask+0x244>)
 801a688:	8bfb      	ldrh	r3, [r7, #30]
 801a68a:	8053      	strh	r3, [r2, #2]
      break;
 801a68c:	e002      	b.n	801a694 <IIS3DWBTask_vtblOnCreateTask+0x140>
      break;
 801a68e:	bf00      	nop
 801a690:	e000      	b.n	801a694 <IIS3DWBTask_vtblOnCreateTask+0x140>
      break;
 801a692:	bf00      	nop
  }

  if (SYS_IS_ERROR_CODE(res))
 801a694:	8bfb      	ldrh	r3, [r7, #30]
 801a696:	2b00      	cmp	r3, #0
 801a698:	d001      	beq.n	801a69e <IIS3DWBTask_vtblOnCreateTask+0x14a>
  {
    return res;
 801a69a:	8bfb      	ldrh	r3, [r7, #30]
 801a69c:	e075      	b.n	801a78a <IIS3DWBTask_vtblOnCreateTask+0x236>
  }
  // Initialize the EventSrc interface.
  p_obj->p_event_src = SensorEventSrcAlloc();
 801a69e:	f006 f953 	bl	8020948 <SensorEventSrcAlloc>
 801a6a2:	4602      	mov	r2, r0
 801a6a4:	69bb      	ldr	r3, [r7, #24]
 801a6a6:	f8c3 283c 	str.w	r2, [r3, #2108]	; 0x83c
  if(p_obj->p_event_src == NULL)
 801a6aa:	69bb      	ldr	r3, [r7, #24]
 801a6ac:	f8d3 383c 	ldr.w	r3, [r3, #2108]	; 0x83c
 801a6b0:	2b00      	cmp	r3, #0
 801a6b2:	d106      	bne.n	801a6c2 <IIS3DWBTask_vtblOnCreateTask+0x16e>
  {
    SYS_SET_SERVICE_LEVEL_ERROR_CODE(SYS_OUT_OF_MEMORY_ERROR_CODE);
 801a6b4:	4b38      	ldr	r3, [pc, #224]	; (801a798 <IIS3DWBTask_vtblOnCreateTask+0x244>)
 801a6b6:	2203      	movs	r2, #3
 801a6b8:	805a      	strh	r2, [r3, #2]
    res = SYS_OUT_OF_MEMORY_ERROR_CODE;
 801a6ba:	2303      	movs	r3, #3
 801a6bc:	83fb      	strh	r3, [r7, #30]
    return res;
 801a6be:	8bfb      	ldrh	r3, [r7, #30]
 801a6c0:	e063      	b.n	801a78a <IIS3DWBTask_vtblOnCreateTask+0x236>
  }
  IEventSrcInit(p_obj->p_event_src);
 801a6c2:	69bb      	ldr	r3, [r7, #24]
 801a6c4:	f8d3 383c 	ldr.w	r3, [r3, #2108]	; 0x83c
 801a6c8:	4618      	mov	r0, r3
 801a6ca:	f7ff fe7c 	bl	801a3c6 <IEventSrcInit>

  memset(p_obj->p_sensor_data_buff, 0, sizeof(p_obj->p_sensor_data_buff));
 801a6ce:	69bb      	ldr	r3, [r7, #24]
 801a6d0:	f503 739c 	add.w	r3, r3, #312	; 0x138
 801a6d4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 801a6d8:	2100      	movs	r1, #0
 801a6da:	4618      	mov	r0, r3
 801a6dc:	f009 faa5 	bl	8023c2a <memset>
  p_obj->acc_id = 0;
 801a6e0:	69bb      	ldr	r3, [r7, #24]
 801a6e2:	2200      	movs	r2, #0
 801a6e4:	f883 20fc 	strb.w	r2, [r3, #252]	; 0xfc
  p_obj->timestamp_tick = 0;
 801a6e8:	69bb      	ldr	r3, [r7, #24]
 801a6ea:	2200      	movs	r2, #0
 801a6ec:	f8c3 286c 	str.w	r2, [r3, #2156]	; 0x86c
  p_obj->old_timestamp_tick = 0;
 801a6f0:	69bb      	ldr	r3, [r7, #24]
 801a6f2:	2200      	movs	r2, #0
 801a6f4:	f8c3 2870 	str.w	r2, [r3, #2160]	; 0x870
  p_obj->timestamp = 0;
 801a6f8:	69bb      	ldr	r3, [r7, #24]
 801a6fa:	f503 6308 	add.w	r3, r3, #2176	; 0x880
 801a6fe:	4619      	mov	r1, r3
 801a700:	f04f 0200 	mov.w	r2, #0
 801a704:	f04f 0300 	mov.w	r3, #0
 801a708:	e941 2302 	strd	r2, r3, [r1, #-8]
  p_obj->samples_per_it = 0;
 801a70c:	69bb      	ldr	r3, [r7, #24]
 801a70e:	2200      	movs	r2, #0
 801a710:	f8a3 2838 	strh.w	r2, [r3, #2104]	; 0x838
  _this->m_pfPMState2FuncMap = sTheClass.p_pm_state2func_map;
 801a714:	68fb      	ldr	r3, [r7, #12]
 801a716:	4a26      	ldr	r2, [pc, #152]	; (801a7b0 <IIS3DWBTask_vtblOnCreateTask+0x25c>)
 801a718:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

  *pTaskCode = AMTExRun;
 801a71c:	68bb      	ldr	r3, [r7, #8]
 801a71e:	4a25      	ldr	r2, [pc, #148]	; (801a7b4 <IIS3DWBTask_vtblOnCreateTask+0x260>)
 801a720:	601a      	str	r2, [r3, #0]
  *pName = "IIS3DWB";
 801a722:	687b      	ldr	r3, [r7, #4]
 801a724:	4a24      	ldr	r2, [pc, #144]	; (801a7b8 <IIS3DWBTask_vtblOnCreateTask+0x264>)
 801a726:	601a      	str	r2, [r3, #0]
  *pvStackStart = NULL; // allocate the task stack in the system memory pool.
 801a728:	683b      	ldr	r3, [r7, #0]
 801a72a:	2200      	movs	r2, #0
 801a72c:	601a      	str	r2, [r3, #0]
  *pStackDepth = IIS3DWB_TASK_CFG_STACK_DEPTH;
 801a72e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a730:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801a734:	601a      	str	r2, [r3, #0]
  *pParams = (ULONG) _this;
 801a736:	68fa      	ldr	r2, [r7, #12]
 801a738:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a73a:	601a      	str	r2, [r3, #0]
  *pPriority = IIS3DWB_TASK_CFG_PRIORITY;
 801a73c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a73e:	2208      	movs	r2, #8
 801a740:	601a      	str	r2, [r3, #0]
  *pPreemptThreshold = IIS3DWB_TASK_CFG_PRIORITY;
 801a742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a744:	2208      	movs	r2, #8
 801a746:	601a      	str	r2, [r3, #0]
  *pTimeSlice = TX_NO_TIME_SLICE;
 801a748:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a74a:	2200      	movs	r2, #0
 801a74c:	601a      	str	r2, [r3, #0]
  *pAutoStart = TX_AUTO_START;
 801a74e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a750:	2201      	movs	r2, #1
 801a752:	601a      	str	r2, [r3, #0]

  res = IIS3DWBTaskSensorInitTaskParams(p_obj);
 801a754:	69b8      	ldr	r0, [r7, #24]
 801a756:	f001 f823 	bl	801b7a0 <IIS3DWBTaskSensorInitTaskParams>
 801a75a:	4603      	mov	r3, r0
 801a75c:	83fb      	strh	r3, [r7, #30]
  if(SYS_IS_ERROR_CODE(res))
 801a75e:	8bfb      	ldrh	r3, [r7, #30]
 801a760:	2b00      	cmp	r3, #0
 801a762:	d007      	beq.n	801a774 <IIS3DWBTask_vtblOnCreateTask+0x220>
  {
    res = SYS_TASK_HEAP_OUT_OF_MEMORY_ERROR_CODE;
 801a764:	f240 235a 	movw	r3, #602	; 0x25a
 801a768:	83fb      	strh	r3, [r7, #30]
    SYS_SET_SERVICE_LEVEL_ERROR_CODE(res);
 801a76a:	4a0b      	ldr	r2, [pc, #44]	; (801a798 <IIS3DWBTask_vtblOnCreateTask+0x244>)
 801a76c:	8bfb      	ldrh	r3, [r7, #30]
 801a76e:	8053      	strh	r3, [r2, #2]
    return res;
 801a770:	8bfb      	ldrh	r3, [r7, #30]
 801a772:	e00a      	b.n	801a78a <IIS3DWBTask_vtblOnCreateTask+0x236>
  }

  res = IIS3DWBTaskSensorRegister(p_obj);
 801a774:	69b8      	ldr	r0, [r7, #24]
 801a776:	f000 fff1 	bl	801b75c <IIS3DWBTaskSensorRegister>
 801a77a:	4603      	mov	r3, r0
 801a77c:	83fb      	strh	r3, [r7, #30]
  if(SYS_IS_ERROR_CODE(res))
 801a77e:	8bfb      	ldrh	r3, [r7, #30]
 801a780:	2b00      	cmp	r3, #0
 801a782:	d001      	beq.n	801a788 <IIS3DWBTask_vtblOnCreateTask+0x234>
  {
    SYS_DEBUGF(SYS_DBG_LEVEL_VERBOSE, ("IIS3DWB: unable to register with DB\r\n"));
    sys_error_handler();
 801a784:	f7f4 fae8 	bl	800ed58 <sys_error_handler>
  }

  return res;
 801a788:	8bfb      	ldrh	r3, [r7, #30]
}
 801a78a:	4618      	mov	r0, r3
 801a78c:	3720      	adds	r7, #32
 801a78e:	46bd      	mov	sp, r7
 801a790:	bd80      	pop	{r7, pc}
 801a792:	bf00      	nop
 801a794:	08027324 	.word	0x08027324
 801a798:	20000700 	.word	0x20000700
 801a79c:	08027394 	.word	0x08027394
 801a7a0:	0801bba1 	.word	0x0801bba1
 801a7a4:	080273a0 	.word	0x080273a0
 801a7a8:	080273ac 	.word	0x080273ac
 801a7ac:	08035974 	.word	0x08035974
 801a7b0:	08035968 	.word	0x08035968
 801a7b4:	0800e949 	.word	0x0800e949
 801a7b8:	080273c8 	.word	0x080273c8

0801a7bc <IIS3DWBTask_vtblDoEnterPowerMode>:

sys_error_code_t IIS3DWBTask_vtblDoEnterPowerMode(AManagedTask *_this, const EPowerMode ActivePowerMode, const EPowerMode NewPowerMode)
{
 801a7bc:	b580      	push	{r7, lr}
 801a7be:	b08a      	sub	sp, #40	; 0x28
 801a7c0:	af00      	add	r7, sp, #0
 801a7c2:	6078      	str	r0, [r7, #4]
 801a7c4:	460b      	mov	r3, r1
 801a7c6:	70fb      	strb	r3, [r7, #3]
 801a7c8:	4613      	mov	r3, r2
 801a7ca:	70bb      	strb	r3, [r7, #2]
  assert_param(_this);
 801a7cc:	687b      	ldr	r3, [r7, #4]
 801a7ce:	2b00      	cmp	r3, #0
 801a7d0:	d104      	bne.n	801a7dc <IIS3DWBTask_vtblDoEnterPowerMode+0x20>
 801a7d2:	f240 212f 	movw	r1, #559	; 0x22f
 801a7d6:	4849      	ldr	r0, [pc, #292]	; (801a8fc <IIS3DWBTask_vtblDoEnterPowerMode+0x140>)
 801a7d8:	f7fa fd67 	bl	80152aa <assert_failed>
  sys_error_code_t res = SYS_NO_ERROR_CODE;
 801a7dc:	2300      	movs	r3, #0
 801a7de:	84fb      	strh	r3, [r7, #38]	; 0x26
  IIS3DWBTask *p_obj = (IIS3DWBTask*) _this;
 801a7e0:	687b      	ldr	r3, [r7, #4]
 801a7e2:	623b      	str	r3, [r7, #32]
  stmdev_ctx_t *p_sensor_drv = (stmdev_ctx_t*) &p_obj->p_sensor_bus_if->m_xConnector;
 801a7e4:	6a3b      	ldr	r3, [r7, #32]
 801a7e6:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 801a7ea:	61fb      	str	r3, [r7, #28]

  if(NewPowerMode == E_POWER_MODE_SENSORS_ACTIVE)
 801a7ec:	78bb      	ldrb	r3, [r7, #2]
 801a7ee:	2b02      	cmp	r3, #2
 801a7f0:	d136      	bne.n	801a860 <IIS3DWBTask_vtblDoEnterPowerMode+0xa4>
  {
    if(IIS3DWBTaskSensorIsActive(p_obj))
 801a7f2:	6a38      	ldr	r0, [r7, #32]
 801a7f4:	f001 f946 	bl	801ba84 <IIS3DWBTaskSensorIsActive>
 801a7f8:	4603      	mov	r3, r0
 801a7fa:	2b00      	cmp	r3, #0
 801a7fc:	d078      	beq.n	801a8f0 <IIS3DWBTask_vtblDoEnterPowerMode+0x134>
    {
      SMMessage report =
 801a7fe:	f107 0308 	add.w	r3, r7, #8
 801a802:	2200      	movs	r2, #0
 801a804:	601a      	str	r2, [r3, #0]
 801a806:	605a      	str	r2, [r3, #4]
 801a808:	609a      	str	r2, [r3, #8]
 801a80a:	60da      	str	r2, [r3, #12]
 801a80c:	2304      	movs	r3, #4
 801a80e:	723b      	strb	r3, [r7, #8]
 801a810:	2301      	movs	r3, #1
 801a812:	817b      	strh	r3, [r7, #10]
      {
          .sensorMessage.messageId = SM_MESSAGE_ID_SENSOR_CMD,
          .sensorMessage.nCmdID = SENSOR_CMD_ID_INIT
      };

      if(tx_queue_send(&p_obj->in_queue, &report, AMT_MS_TO_TICKS(100)) != TX_SUCCESS)
 801a814:	6a3b      	ldr	r3, [r7, #32]
 801a816:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801a81a:	f107 0108 	add.w	r1, r7, #8
 801a81e:	2264      	movs	r2, #100	; 0x64
 801a820:	4618      	mov	r0, r3
 801a822:	f7f8 fb63 	bl	8012eec <_txe_queue_send>
 801a826:	4603      	mov	r3, r0
 801a828:	2b00      	cmp	r3, #0
 801a82a:	d006      	beq.n	801a83a <IIS3DWBTask_vtblDoEnterPowerMode+0x7e>
      {
        res = SYS_APP_TASK_REPORT_LOST_ERROR_CODE;
 801a82c:	f240 3323 	movw	r3, #803	; 0x323
 801a830:	84fb      	strh	r3, [r7, #38]	; 0x26
        SYS_SET_SERVICE_LEVEL_ERROR_CODE(SYS_APP_TASK_REPORT_LOST_ERROR_CODE);
 801a832:	4b33      	ldr	r3, [pc, #204]	; (801a900 <IIS3DWBTask_vtblDoEnterPowerMode+0x144>)
 801a834:	f240 3223 	movw	r2, #803	; 0x323
 801a838:	805a      	strh	r2, [r3, #2]
      }

      // reset the variables for the time stamp computation.
      p_obj->timestamp_tick = 0;
 801a83a:	6a3b      	ldr	r3, [r7, #32]
 801a83c:	2200      	movs	r2, #0
 801a83e:	f8c3 286c 	str.w	r2, [r3, #2156]	; 0x86c
      p_obj->old_timestamp_tick = 0;
 801a842:	6a3b      	ldr	r3, [r7, #32]
 801a844:	2200      	movs	r2, #0
 801a846:	f8c3 2870 	str.w	r2, [r3, #2160]	; 0x870
      p_obj->timestamp = 0;
 801a84a:	6a3b      	ldr	r3, [r7, #32]
 801a84c:	f503 6308 	add.w	r3, r3, #2176	; 0x880
 801a850:	4619      	mov	r1, r3
 801a852:	f04f 0200 	mov.w	r2, #0
 801a856:	f04f 0300 	mov.w	r3, #0
 801a85a:	e941 2302 	strd	r2, r3, [r1, #-8]
 801a85e:	e047      	b.n	801a8f0 <IIS3DWBTask_vtblDoEnterPowerMode+0x134>
    }

    SYS_DEBUGF(SYS_DBG_LEVEL_VERBOSE, ("IIS3DWB: -> SENSORS_ACTIVE\r\n"));
  }
  else if(NewPowerMode == E_POWER_MODE_STATE1)
 801a860:	78bb      	ldrb	r3, [r7, #2]
 801a862:	2b00      	cmp	r3, #0
 801a864:	d118      	bne.n	801a898 <IIS3DWBTask_vtblDoEnterPowerMode+0xdc>
  {
    if(ActivePowerMode == E_POWER_MODE_SENSORS_ACTIVE)
 801a866:	78fb      	ldrb	r3, [r7, #3]
 801a868:	2b02      	cmp	r3, #2
 801a86a:	d141      	bne.n	801a8f0 <IIS3DWBTask_vtblDoEnterPowerMode+0x134>
    {
      /* SM_SENSOR_STATE_SUSPENDING */
      iis3dwb_fifo_xl_batch_set(p_sensor_drv, IIS3DWB_XL_NOT_BATCHED);
 801a86c:	2100      	movs	r1, #0
 801a86e:	69f8      	ldr	r0, [r7, #28]
 801a870:	f7e6 feb0 	bl	80015d4 <iis3dwb_fifo_xl_batch_set>
      tx_queue_flush(&p_obj->in_queue);
 801a874:	6a3b      	ldr	r3, [r7, #32]
 801a876:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801a87a:	4618      	mov	r0, r3
 801a87c:	f7f8 fa30 	bl	8012ce0 <_txe_queue_flush>
      if(p_obj->pIRQConfig == NULL)
 801a880:	6a3b      	ldr	r3, [r7, #32]
 801a882:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 801a886:	2b00      	cmp	r3, #0
 801a888:	d132      	bne.n	801a8f0 <IIS3DWBTask_vtblDoEnterPowerMode+0x134>
      {
        tx_timer_deactivate(&p_obj->read_timer);
 801a88a:	6a3b      	ldr	r3, [r7, #32]
 801a88c:	f503 6304 	add.w	r3, r3, #2112	; 0x840
 801a890:	4618      	mov	r0, r3
 801a892:	f7f8 fefb 	bl	801368c <_txe_timer_deactivate>
 801a896:	e02b      	b.n	801a8f0 <IIS3DWBTask_vtblDoEnterPowerMode+0x134>
      }
    }

    SYS_DEBUGF(SYS_DBG_LEVEL_VERBOSE, ("IIS3DWB: -> RUN\r\n"));
  }
  else if(NewPowerMode == E_POWER_MODE_SLEEP_1)
 801a898:	78bb      	ldrb	r3, [r7, #2]
 801a89a:	2b01      	cmp	r3, #1
 801a89c:	d128      	bne.n	801a8f0 <IIS3DWBTask_vtblDoEnterPowerMode+0x134>
  {
    // the MCU is going in stop so I put the sensor in low power
    // from the INIT task
    res = IIS3DWBTaskEnterLowPowerMode(p_obj);
 801a89e:	6a38      	ldr	r0, [r7, #32]
 801a8a0:	f001 f906 	bl	801bab0 <IIS3DWBTaskEnterLowPowerMode>
 801a8a4:	4603      	mov	r3, r0
 801a8a6:	84fb      	strh	r3, [r7, #38]	; 0x26
    if(SYS_IS_ERROR_CODE(res))
    {
      SYS_DEBUGF(SYS_DBG_LEVEL_WARNING, ("IIS3DWB - Enter Low Power Mode failed.\r\n"));
    }
    if(p_obj->pIRQConfig != NULL)
 801a8a8:	6a3b      	ldr	r3, [r7, #32]
 801a8aa:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 801a8ae:	2b00      	cmp	r3, #0
 801a8b0:	d003      	beq.n	801a8ba <IIS3DWBTask_vtblDoEnterPowerMode+0xfe>
    {
      IIS3DWBTaskConfigureIrqPin(p_obj, TRUE);
 801a8b2:	2101      	movs	r1, #1
 801a8b4:	6a38      	ldr	r0, [r7, #32]
 801a8b6:	f001 f925 	bl	801bb04 <IIS3DWBTaskConfigureIrqPin>
    }
    // notify the bus
    if(p_obj->p_sensor_bus_if->m_pfBusCtrl != NULL)
 801a8ba:	6a3b      	ldr	r3, [r7, #32]
 801a8bc:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 801a8c0:	695b      	ldr	r3, [r3, #20]
 801a8c2:	2b00      	cmp	r3, #0
 801a8c4:	d009      	beq.n	801a8da <IIS3DWBTask_vtblDoEnterPowerMode+0x11e>
    {
      p_obj->p_sensor_bus_if->m_pfBusCtrl(p_obj->p_sensor_bus_if, E_BUS_CTRL_DEV_NOTIFY_POWER_MODE, 0);
 801a8c6:	6a3b      	ldr	r3, [r7, #32]
 801a8c8:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 801a8cc:	695b      	ldr	r3, [r3, #20]
 801a8ce:	6a3a      	ldr	r2, [r7, #32]
 801a8d0:	f8d2 00cc 	ldr.w	r0, [r2, #204]	; 0xcc
 801a8d4:	2200      	movs	r2, #0
 801a8d6:	2100      	movs	r1, #0
 801a8d8:	4798      	blx	r3
    }
    if(p_obj->pIRQConfig == NULL)
 801a8da:	6a3b      	ldr	r3, [r7, #32]
 801a8dc:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 801a8e0:	2b00      	cmp	r3, #0
 801a8e2:	d105      	bne.n	801a8f0 <IIS3DWBTask_vtblDoEnterPowerMode+0x134>
    {
      tx_timer_deactivate(&p_obj->read_timer);
 801a8e4:	6a3b      	ldr	r3, [r7, #32]
 801a8e6:	f503 6304 	add.w	r3, r3, #2112	; 0x840
 801a8ea:	4618      	mov	r0, r3
 801a8ec:	f7f8 fece 	bl	801368c <_txe_timer_deactivate>
    }

    SYS_DEBUGF(SYS_DBG_LEVEL_VERBOSE, ("IIS3DWB: -> SLEEP_1\r\n"));
  }

  return res;
 801a8f0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
 801a8f2:	4618      	mov	r0, r3
 801a8f4:	3728      	adds	r7, #40	; 0x28
 801a8f6:	46bd      	mov	sp, r7
 801a8f8:	bd80      	pop	{r7, pc}
 801a8fa:	bf00      	nop
 801a8fc:	08027324 	.word	0x08027324
 801a900:	20000700 	.word	0x20000700

0801a904 <IIS3DWBTask_vtblHandleError>:

sys_error_code_t IIS3DWBTask_vtblHandleError(AManagedTask *_this, SysEvent xError)
{
 801a904:	b580      	push	{r7, lr}
 801a906:	b084      	sub	sp, #16
 801a908:	af00      	add	r7, sp, #0
 801a90a:	6078      	str	r0, [r7, #4]
 801a90c:	6039      	str	r1, [r7, #0]
  assert_param(_this);
 801a90e:	687b      	ldr	r3, [r7, #4]
 801a910:	2b00      	cmp	r3, #0
 801a912:	d104      	bne.n	801a91e <IIS3DWBTask_vtblHandleError+0x1a>
 801a914:	f240 217a 	movw	r1, #634	; 0x27a
 801a918:	4804      	ldr	r0, [pc, #16]	; (801a92c <IIS3DWBTask_vtblHandleError+0x28>)
 801a91a:	f7fa fcc6 	bl	80152aa <assert_failed>
  sys_error_code_t res = SYS_NO_ERROR_CODE;
 801a91e:	2300      	movs	r3, #0
 801a920:	81fb      	strh	r3, [r7, #14]
  //  IIS3DWBTask *p_obj = (IIS3DWBTask*)_this;

  return res;
 801a922:	89fb      	ldrh	r3, [r7, #14]
}
 801a924:	4618      	mov	r0, r3
 801a926:	3710      	adds	r7, #16
 801a928:	46bd      	mov	sp, r7
 801a92a:	bd80      	pop	{r7, pc}
 801a92c:	08027324 	.word	0x08027324

0801a930 <IIS3DWBTask_vtblOnEnterTaskControlLoop>:

sys_error_code_t IIS3DWBTask_vtblOnEnterTaskControlLoop(AManagedTask *_this)
{
 801a930:	b580      	push	{r7, lr}
 801a932:	b084      	sub	sp, #16
 801a934:	af00      	add	r7, sp, #0
 801a936:	6078      	str	r0, [r7, #4]
  assert_param(_this != NULL);
 801a938:	687b      	ldr	r3, [r7, #4]
 801a93a:	2b00      	cmp	r3, #0
 801a93c:	d104      	bne.n	801a948 <IIS3DWBTask_vtblOnEnterTaskControlLoop+0x18>
 801a93e:	f240 2183 	movw	r1, #643	; 0x283
 801a942:	4805      	ldr	r0, [pc, #20]	; (801a958 <IIS3DWBTask_vtblOnEnterTaskControlLoop+0x28>)
 801a944:	f7fa fcb1 	bl	80152aa <assert_failed>
  sys_error_code_t res = SYS_NO_ERROR_CODE;
 801a948:	2300      	movs	r3, #0
 801a94a:	81fb      	strh	r3, [r7, #14]
  SYS_DEBUGF(SYS_DBG_LEVEL_VERBOSE, ("IIS3DWB: start.\r\n"));

  // At this point all system has been initialized.
  // Execute task specific delayed one time initialization.

  return res;
 801a94c:	89fb      	ldrh	r3, [r7, #14]
}
 801a94e:	4618      	mov	r0, r3
 801a950:	3710      	adds	r7, #16
 801a952:	46bd      	mov	sp, r7
 801a954:	bd80      	pop	{r7, pc}
 801a956:	bf00      	nop
 801a958:	08027324 	.word	0x08027324

0801a95c <IIS3DWBTask_vtblForceExecuteStep>:

sys_error_code_t IIS3DWBTask_vtblForceExecuteStep(AManagedTaskEx *_this, EPowerMode ActivePowerMode)
{
 801a95c:	b580      	push	{r7, lr}
 801a95e:	b090      	sub	sp, #64	; 0x40
 801a960:	af06      	add	r7, sp, #24
 801a962:	6078      	str	r0, [r7, #4]
 801a964:	460b      	mov	r3, r1
 801a966:	70fb      	strb	r3, [r7, #3]
  assert_param(_this);
 801a968:	687b      	ldr	r3, [r7, #4]
 801a96a:	2b00      	cmp	r3, #0
 801a96c:	d104      	bne.n	801a978 <IIS3DWBTask_vtblForceExecuteStep+0x1c>
 801a96e:	f44f 7124 	mov.w	r1, #656	; 0x290
 801a972:	4823      	ldr	r0, [pc, #140]	; (801aa00 <IIS3DWBTask_vtblForceExecuteStep+0xa4>)
 801a974:	f7fa fc99 	bl	80152aa <assert_failed>
  sys_error_code_t res = SYS_NO_ERROR_CODE;
 801a978:	2300      	movs	r3, #0
 801a97a:	84fb      	strh	r3, [r7, #38]	; 0x26
  IIS3DWBTask *p_obj = (IIS3DWBTask*) _this;
 801a97c:	687b      	ldr	r3, [r7, #4]
 801a97e:	623b      	str	r3, [r7, #32]

  SMMessage report =
 801a980:	f107 0310 	add.w	r3, r7, #16
 801a984:	2200      	movs	r2, #0
 801a986:	601a      	str	r2, [r3, #0]
 801a988:	605a      	str	r2, [r3, #4]
 801a98a:	609a      	str	r2, [r3, #8]
 801a98c:	60da      	str	r2, [r3, #12]
 801a98e:	23fe      	movs	r3, #254	; 0xfe
 801a990:	743b      	strb	r3, [r7, #16]
  {
      .internalMessageFE.messageId = SM_MESSAGE_ID_FORCE_STEP,
      .internalMessageFE.nData = 0
  };

  if((ActivePowerMode == E_POWER_MODE_STATE1) || (ActivePowerMode == E_POWER_MODE_SENSORS_ACTIVE))
 801a992:	78fb      	ldrb	r3, [r7, #3]
 801a994:	2b00      	cmp	r3, #0
 801a996:	d002      	beq.n	801a99e <IIS3DWBTask_vtblForceExecuteStep+0x42>
 801a998:	78fb      	ldrb	r3, [r7, #3]
 801a99a:	2b02      	cmp	r3, #2
 801a99c:	d10e      	bne.n	801a9bc <IIS3DWBTask_vtblForceExecuteStep+0x60>
  {
    if(AMTExIsTaskInactive(_this))
 801a99e:	6878      	ldr	r0, [r7, #4]
 801a9a0:	f7ff fce6 	bl	801a370 <AMTExIsTaskInactive>
 801a9a4:	4603      	mov	r3, r0
 801a9a6:	2b00      	cmp	r3, #0
 801a9a8:	d025      	beq.n	801a9f6 <IIS3DWBTask_vtblForceExecuteStep+0x9a>
    {
      res = IIS3DWBTaskPostReportToFront(p_obj, (SMMessage*) &report);
 801a9aa:	f107 0310 	add.w	r3, r7, #16
 801a9ae:	4619      	mov	r1, r3
 801a9b0:	6a38      	ldr	r0, [r7, #32]
 801a9b2:	f000 fcfb 	bl	801b3ac <IIS3DWBTaskPostReportToFront>
 801a9b6:	4603      	mov	r3, r0
 801a9b8:	84fb      	strh	r3, [r7, #38]	; 0x26
    if(AMTExIsTaskInactive(_this))
 801a9ba:	e01c      	b.n	801a9f6 <IIS3DWBTask_vtblForceExecuteStep+0x9a>
    }
  }
  else
  {
    UINT state;
    if(TX_SUCCESS == tx_thread_info_get(&_this->m_xThaskHandle, TX_NULL, &state, TX_NULL, TX_NULL, TX_NULL, TX_NULL, TX_NULL, TX_NULL))
 801a9bc:	687b      	ldr	r3, [r7, #4]
 801a9be:	1d18      	adds	r0, r3, #4
 801a9c0:	f107 020c 	add.w	r2, r7, #12
 801a9c4:	2300      	movs	r3, #0
 801a9c6:	9304      	str	r3, [sp, #16]
 801a9c8:	2300      	movs	r3, #0
 801a9ca:	9303      	str	r3, [sp, #12]
 801a9cc:	2300      	movs	r3, #0
 801a9ce:	9302      	str	r3, [sp, #8]
 801a9d0:	2300      	movs	r3, #0
 801a9d2:	9301      	str	r3, [sp, #4]
 801a9d4:	2300      	movs	r3, #0
 801a9d6:	9300      	str	r3, [sp, #0]
 801a9d8:	2300      	movs	r3, #0
 801a9da:	2100      	movs	r1, #0
 801a9dc:	f7f8 fcd6 	bl	801338c <_txe_thread_info_get>
 801a9e0:	4603      	mov	r3, r0
 801a9e2:	2b00      	cmp	r3, #0
 801a9e4:	d107      	bne.n	801a9f6 <IIS3DWBTask_vtblForceExecuteStep+0x9a>
    {
      if(state == TX_SUSPENDED)
 801a9e6:	68fb      	ldr	r3, [r7, #12]
 801a9e8:	2b03      	cmp	r3, #3
 801a9ea:	d104      	bne.n	801a9f6 <IIS3DWBTask_vtblForceExecuteStep+0x9a>
      {
        tx_thread_resume(&_this->m_xThaskHandle);
 801a9ec:	687b      	ldr	r3, [r7, #4]
 801a9ee:	3304      	adds	r3, #4
 801a9f0:	4618      	mov	r0, r3
 801a9f2:	f7f8 fcf9 	bl	80133e8 <_txe_thread_resume>
      }
    }
  }

  return res;
 801a9f6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
 801a9f8:	4618      	mov	r0, r3
 801a9fa:	3728      	adds	r7, #40	; 0x28
 801a9fc:	46bd      	mov	sp, r7
 801a9fe:	bd80      	pop	{r7, pc}
 801aa00:	08027324 	.word	0x08027324

0801aa04 <IIS3DWBTask_vtblOnEnterPowerMode>:

sys_error_code_t IIS3DWBTask_vtblOnEnterPowerMode(AManagedTaskEx *_this, const EPowerMode ActivePowerMode, const EPowerMode NewPowerMode)
{
 801aa04:	b580      	push	{r7, lr}
 801aa06:	b084      	sub	sp, #16
 801aa08:	af00      	add	r7, sp, #0
 801aa0a:	6078      	str	r0, [r7, #4]
 801aa0c:	460b      	mov	r3, r1
 801aa0e:	70fb      	strb	r3, [r7, #3]
 801aa10:	4613      	mov	r3, r2
 801aa12:	70bb      	strb	r3, [r7, #2]
  assert_param(_this);
 801aa14:	687b      	ldr	r3, [r7, #4]
 801aa16:	2b00      	cmp	r3, #0
 801aa18:	d104      	bne.n	801aa24 <IIS3DWBTask_vtblOnEnterPowerMode+0x20>
 801aa1a:	f240 21b7 	movw	r1, #695	; 0x2b7
 801aa1e:	4805      	ldr	r0, [pc, #20]	; (801aa34 <IIS3DWBTask_vtblOnEnterPowerMode+0x30>)
 801aa20:	f7fa fc43 	bl	80152aa <assert_failed>
  sys_error_code_t res = SYS_NO_ERROR_CODE;
 801aa24:	2300      	movs	r3, #0
 801aa26:	81fb      	strh	r3, [r7, #14]
  //  IIS3DWBTask *p_obj = (IIS3DWBTask*)_this;

  return res;
 801aa28:	89fb      	ldrh	r3, [r7, #14]
}
 801aa2a:	4618      	mov	r0, r3
 801aa2c:	3710      	adds	r7, #16
 801aa2e:	46bd      	mov	sp, r7
 801aa30:	bd80      	pop	{r7, pc}
 801aa32:	bf00      	nop
 801aa34:	08027324 	.word	0x08027324

0801aa38 <IIS3DWBTask_vtblAccGetId>:

// ISensor virtual functions definition
// *******************************************

uint8_t IIS3DWBTask_vtblAccGetId(ISourceObservable *_this)
{
 801aa38:	b580      	push	{r7, lr}
 801aa3a:	b084      	sub	sp, #16
 801aa3c:	af00      	add	r7, sp, #0
 801aa3e:	6078      	str	r0, [r7, #4]
  assert_param(_this != NULL);
 801aa40:	687b      	ldr	r3, [r7, #4]
 801aa42:	2b00      	cmp	r3, #0
 801aa44:	d104      	bne.n	801aa50 <IIS3DWBTask_vtblAccGetId+0x18>
 801aa46:	f240 21c3 	movw	r1, #707	; 0x2c3
 801aa4a:	4807      	ldr	r0, [pc, #28]	; (801aa68 <IIS3DWBTask_vtblAccGetId+0x30>)
 801aa4c:	f7fa fc2d 	bl	80152aa <assert_failed>
  IIS3DWBTask *p_if_owner = (IIS3DWBTask*) ((uint32_t) _this - offsetof(IIS3DWBTask, acc_sensor_if));
 801aa50:	687b      	ldr	r3, [r7, #4]
 801aa52:	3bd4      	subs	r3, #212	; 0xd4
 801aa54:	60fb      	str	r3, [r7, #12]
  uint8_t res = p_if_owner->acc_id;
 801aa56:	68fb      	ldr	r3, [r7, #12]
 801aa58:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 801aa5c:	72fb      	strb	r3, [r7, #11]

  return res;
 801aa5e:	7afb      	ldrb	r3, [r7, #11]
}
 801aa60:	4618      	mov	r0, r3
 801aa62:	3710      	adds	r7, #16
 801aa64:	46bd      	mov	sp, r7
 801aa66:	bd80      	pop	{r7, pc}
 801aa68:	08027324 	.word	0x08027324

0801aa6c <IIS3DWBTask_vtblGetEventSourceIF>:

IEventSrc* IIS3DWBTask_vtblGetEventSourceIF(ISourceObservable *_this)
{
 801aa6c:	b580      	push	{r7, lr}
 801aa6e:	b084      	sub	sp, #16
 801aa70:	af00      	add	r7, sp, #0
 801aa72:	6078      	str	r0, [r7, #4]
  assert_param(_this != NULL);
 801aa74:	687b      	ldr	r3, [r7, #4]
 801aa76:	2b00      	cmp	r3, #0
 801aa78:	d104      	bne.n	801aa84 <IIS3DWBTask_vtblGetEventSourceIF+0x18>
 801aa7a:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 801aa7e:	4806      	ldr	r0, [pc, #24]	; (801aa98 <IIS3DWBTask_vtblGetEventSourceIF+0x2c>)
 801aa80:	f7fa fc13 	bl	80152aa <assert_failed>
  IIS3DWBTask *p_if_owner = (IIS3DWBTask*) ((uint32_t) _this - offsetof(IIS3DWBTask, acc_sensor_if));
 801aa84:	687b      	ldr	r3, [r7, #4]
 801aa86:	3bd4      	subs	r3, #212	; 0xd4
 801aa88:	60fb      	str	r3, [r7, #12]

  return p_if_owner->p_event_src;
 801aa8a:	68fb      	ldr	r3, [r7, #12]
 801aa8c:	f8d3 383c 	ldr.w	r3, [r3, #2108]	; 0x83c
}
 801aa90:	4618      	mov	r0, r3
 801aa92:	3710      	adds	r7, #16
 801aa94:	46bd      	mov	sp, r7
 801aa96:	bd80      	pop	{r7, pc}
 801aa98:	08027324 	.word	0x08027324

0801aa9c <IIS3DWBTask_vtblAccGetODR>:

sys_error_code_t IIS3DWBTask_vtblAccGetODR(ISourceObservable *_this, float *p_measured, float *p_nominal)
{
 801aa9c:	b580      	push	{r7, lr}
 801aa9e:	b086      	sub	sp, #24
 801aaa0:	af00      	add	r7, sp, #0
 801aaa2:	60f8      	str	r0, [r7, #12]
 801aaa4:	60b9      	str	r1, [r7, #8]
 801aaa6:	607a      	str	r2, [r7, #4]
  assert_param(_this != NULL);
 801aaa8:	68fb      	ldr	r3, [r7, #12]
 801aaaa:	2b00      	cmp	r3, #0
 801aaac:	d104      	bne.n	801aab8 <IIS3DWBTask_vtblAccGetODR+0x1c>
 801aaae:	f44f 7135 	mov.w	r1, #724	; 0x2d4
 801aab2:	4811      	ldr	r0, [pc, #68]	; (801aaf8 <IIS3DWBTask_vtblAccGetODR+0x5c>)
 801aab4:	f7fa fbf9 	bl	80152aa <assert_failed>
  /*get the object implementing the ISourceObservable IF */
  IIS3DWBTask *p_if_owner = (IIS3DWBTask*) ((uint32_t) _this - offsetof(IIS3DWBTask, acc_sensor_if));
 801aab8:	68fb      	ldr	r3, [r7, #12]
 801aaba:	3bd4      	subs	r3, #212	; 0xd4
 801aabc:	613b      	str	r3, [r7, #16]
  sys_error_code_t res = SYS_NO_ERROR_CODE;
 801aabe:	2300      	movs	r3, #0
 801aac0:	82fb      	strh	r3, [r7, #22]

  /* parameter validation */
  if((p_measured) == NULL || (p_nominal == NULL))
 801aac2:	68bb      	ldr	r3, [r7, #8]
 801aac4:	2b00      	cmp	r3, #0
 801aac6:	d002      	beq.n	801aace <IIS3DWBTask_vtblAccGetODR+0x32>
 801aac8:	687b      	ldr	r3, [r7, #4]
 801aaca:	2b00      	cmp	r3, #0
 801aacc:	d105      	bne.n	801aada <IIS3DWBTask_vtblAccGetODR+0x3e>
  {
    res = SYS_INVALID_PARAMETER_ERROR_CODE;
 801aace:	2304      	movs	r3, #4
 801aad0:	82fb      	strh	r3, [r7, #22]
    SYS_SET_SERVICE_LEVEL_ERROR_CODE(SYS_INVALID_PARAMETER_ERROR_CODE);
 801aad2:	4b0a      	ldr	r3, [pc, #40]	; (801aafc <IIS3DWBTask_vtblAccGetODR+0x60>)
 801aad4:	2204      	movs	r2, #4
 801aad6:	805a      	strh	r2, [r3, #2]
 801aad8:	e009      	b.n	801aaee <IIS3DWBTask_vtblAccGetODR+0x52>
  }
  else
  {
    *p_measured = p_if_owner->acc_sensor_status.MeasuredODR;
 801aada:	693b      	ldr	r3, [r7, #16]
 801aadc:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
 801aae0:	68bb      	ldr	r3, [r7, #8]
 801aae2:	601a      	str	r2, [r3, #0]
    *p_nominal = p_if_owner->acc_sensor_status.ODR;
 801aae4:	693b      	ldr	r3, [r7, #16]
 801aae6:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 801aaea:	687b      	ldr	r3, [r7, #4]
 801aaec:	601a      	str	r2, [r3, #0]
  }

  return res;
 801aaee:	8afb      	ldrh	r3, [r7, #22]
}
 801aaf0:	4618      	mov	r0, r3
 801aaf2:	3718      	adds	r7, #24
 801aaf4:	46bd      	mov	sp, r7
 801aaf6:	bd80      	pop	{r7, pc}
 801aaf8:	08027324 	.word	0x08027324
 801aafc:	20000700 	.word	0x20000700

0801ab00 <IIS3DWBTask_vtblAccGetFS>:

float IIS3DWBTask_vtblAccGetFS(ISourceObservable *_this)
{
 801ab00:	b580      	push	{r7, lr}
 801ab02:	b084      	sub	sp, #16
 801ab04:	af00      	add	r7, sp, #0
 801ab06:	6078      	str	r0, [r7, #4]
  assert_param(_this != NULL);
 801ab08:	687b      	ldr	r3, [r7, #4]
 801ab0a:	2b00      	cmp	r3, #0
 801ab0c:	d104      	bne.n	801ab18 <IIS3DWBTask_vtblAccGetFS+0x18>
 801ab0e:	f240 21ea 	movw	r1, #746	; 0x2ea
 801ab12:	4809      	ldr	r0, [pc, #36]	; (801ab38 <IIS3DWBTask_vtblAccGetFS+0x38>)
 801ab14:	f7fa fbc9 	bl	80152aa <assert_failed>
  IIS3DWBTask *p_if_owner = (IIS3DWBTask*) ((uint32_t) _this - offsetof(IIS3DWBTask, acc_sensor_if));
 801ab18:	687b      	ldr	r3, [r7, #4]
 801ab1a:	3bd4      	subs	r3, #212	; 0xd4
 801ab1c:	60fb      	str	r3, [r7, #12]
  float res = p_if_owner->acc_sensor_status.FS;
 801ab1e:	68fb      	ldr	r3, [r7, #12]
 801ab20:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 801ab24:	60bb      	str	r3, [r7, #8]

  return res;
 801ab26:	68bb      	ldr	r3, [r7, #8]
 801ab28:	ee07 3a90 	vmov	s15, r3
}
 801ab2c:	eeb0 0a67 	vmov.f32	s0, s15
 801ab30:	3710      	adds	r7, #16
 801ab32:	46bd      	mov	sp, r7
 801ab34:	bd80      	pop	{r7, pc}
 801ab36:	bf00      	nop
 801ab38:	08027324 	.word	0x08027324

0801ab3c <IIS3DWBTask_vtblAccGetSensitivity>:

float IIS3DWBTask_vtblAccGetSensitivity(ISourceObservable *_this)
{
 801ab3c:	b580      	push	{r7, lr}
 801ab3e:	b084      	sub	sp, #16
 801ab40:	af00      	add	r7, sp, #0
 801ab42:	6078      	str	r0, [r7, #4]
  assert_param(_this != NULL);
 801ab44:	687b      	ldr	r3, [r7, #4]
 801ab46:	2b00      	cmp	r3, #0
 801ab48:	d104      	bne.n	801ab54 <IIS3DWBTask_vtblAccGetSensitivity+0x18>
 801ab4a:	f240 21f3 	movw	r1, #755	; 0x2f3
 801ab4e:	4809      	ldr	r0, [pc, #36]	; (801ab74 <IIS3DWBTask_vtblAccGetSensitivity+0x38>)
 801ab50:	f7fa fbab 	bl	80152aa <assert_failed>
  IIS3DWBTask *p_if_owner = (IIS3DWBTask*) ((uint32_t) _this - offsetof(IIS3DWBTask, acc_sensor_if));
 801ab54:	687b      	ldr	r3, [r7, #4]
 801ab56:	3bd4      	subs	r3, #212	; 0xd4
 801ab58:	60fb      	str	r3, [r7, #12]
  float res = p_if_owner->acc_sensor_status.Sensitivity;
 801ab5a:	68fb      	ldr	r3, [r7, #12]
 801ab5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801ab60:	60bb      	str	r3, [r7, #8]

  return res;
 801ab62:	68bb      	ldr	r3, [r7, #8]
 801ab64:	ee07 3a90 	vmov	s15, r3
}
 801ab68:	eeb0 0a67 	vmov.f32	s0, s15
 801ab6c:	3710      	adds	r7, #16
 801ab6e:	46bd      	mov	sp, r7
 801ab70:	bd80      	pop	{r7, pc}
 801ab72:	bf00      	nop
 801ab74:	08027324 	.word	0x08027324

0801ab78 <IIS3DWBTask_vtblAccGetDataType>:

uint8_t IIS3DWBTask_vtblAccGetDataType(ISourceObservable *_this)
{
 801ab78:	b580      	push	{r7, lr}
 801ab7a:	b084      	sub	sp, #16
 801ab7c:	af00      	add	r7, sp, #0
 801ab7e:	6078      	str	r0, [r7, #4]
  assert_param(_this != NULL);
 801ab80:	687b      	ldr	r3, [r7, #4]
 801ab82:	2b00      	cmp	r3, #0
 801ab84:	d104      	bne.n	801ab90 <IIS3DWBTask_vtblAccGetDataType+0x18>
 801ab86:	f44f 713f 	mov.w	r1, #764	; 0x2fc
 801ab8a:	4807      	ldr	r0, [pc, #28]	; (801aba8 <IIS3DWBTask_vtblAccGetDataType+0x30>)
 801ab8c:	f7fa fb8d 	bl	80152aa <assert_failed>
  IIS3DWBTask *p_if_owner = (IIS3DWBTask*)((uint32_t)_this - offsetof(IIS3DWBTask, acc_sensor_if));
 801ab90:	687b      	ldr	r3, [r7, #4]
 801ab92:	3bd4      	subs	r3, #212	; 0xd4
 801ab94:	60fb      	str	r3, [r7, #12]
  uint8_t res = p_if_owner->acc_sensor_status.DataType;
 801ab96:	68fb      	ldr	r3, [r7, #12]
 801ab98:	f893 30f8 	ldrb.w	r3, [r3, #248]	; 0xf8
 801ab9c:	72fb      	strb	r3, [r7, #11]

  return res;
 801ab9e:	7afb      	ldrb	r3, [r7, #11]
}
 801aba0:	4618      	mov	r0, r3
 801aba2:	3710      	adds	r7, #16
 801aba4:	46bd      	mov	sp, r7
 801aba6:	bd80      	pop	{r7, pc}
 801aba8:	08027324 	.word	0x08027324

0801abac <IIS3DWBTask_vtblAccGetDimensions>:

uint16_t IIS3DWBTask_vtblAccGetDimensions(ISourceObservable *_this)
{
 801abac:	b580      	push	{r7, lr}
 801abae:	b084      	sub	sp, #16
 801abb0:	af00      	add	r7, sp, #0
 801abb2:	6078      	str	r0, [r7, #4]
  assert_param(_this != NULL);
 801abb4:	687b      	ldr	r3, [r7, #4]
 801abb6:	2b00      	cmp	r3, #0
 801abb8:	d104      	bne.n	801abc4 <IIS3DWBTask_vtblAccGetDimensions+0x18>
 801abba:	f240 3105 	movw	r1, #773	; 0x305
 801abbe:	4807      	ldr	r0, [pc, #28]	; (801abdc <IIS3DWBTask_vtblAccGetDimensions+0x30>)
 801abc0:	f7fa fb73 	bl	80152aa <assert_failed>
  IIS3DWBTask *p_if_owner = (IIS3DWBTask*)((uint32_t)_this - offsetof(IIS3DWBTask, acc_sensor_if));
 801abc4:	687b      	ldr	r3, [r7, #4]
 801abc6:	3bd4      	subs	r3, #212	; 0xd4
 801abc8:	60fb      	str	r3, [r7, #12]
  uint16_t res = p_if_owner->acc_sensor_status.Dimensions;
 801abca:	68fb      	ldr	r3, [r7, #12]
 801abcc:	f8b3 30fa 	ldrh.w	r3, [r3, #250]	; 0xfa
 801abd0:	817b      	strh	r3, [r7, #10]

  return res;
 801abd2:	897b      	ldrh	r3, [r7, #10]
}
 801abd4:	4618      	mov	r0, r3
 801abd6:	3710      	adds	r7, #16
 801abd8:	46bd      	mov	sp, r7
 801abda:	bd80      	pop	{r7, pc}
 801abdc:	08027324 	.word	0x08027324

0801abe0 <IIS3DWBTask_vtblSensorSetODR>:

sys_error_code_t IIS3DWBTask_vtblSensorSetODR(ISensor_t *_this, float ODR)
{
 801abe0:	b580      	push	{r7, lr}
 801abe2:	b08a      	sub	sp, #40	; 0x28
 801abe4:	af00      	add	r7, sp, #0
 801abe6:	6078      	str	r0, [r7, #4]
 801abe8:	ed87 0a00 	vstr	s0, [r7]
  assert_param(_this != NULL);
 801abec:	687b      	ldr	r3, [r7, #4]
 801abee:	2b00      	cmp	r3, #0
 801abf0:	d104      	bne.n	801abfc <IIS3DWBTask_vtblSensorSetODR+0x1c>
 801abf2:	f240 310e 	movw	r1, #782	; 0x30e
 801abf6:	481f      	ldr	r0, [pc, #124]	; (801ac74 <IIS3DWBTask_vtblSensorSetODR+0x94>)
 801abf8:	f7fa fb57 	bl	80152aa <assert_failed>
  sys_error_code_t res = SYS_NO_ERROR_CODE;
 801abfc:	2300      	movs	r3, #0
 801abfe:	84fb      	strh	r3, [r7, #38]	; 0x26
  IIS3DWBTask *p_if_owner = (IIS3DWBTask*) ((uint32_t) _this - offsetof(IIS3DWBTask, acc_sensor_if));
 801ac00:	687b      	ldr	r3, [r7, #4]
 801ac02:	3bd4      	subs	r3, #212	; 0xd4
 801ac04:	623b      	str	r3, [r7, #32]

  EPowerMode log_status = AMTGetTaskPowerMode((AManagedTask*) p_if_owner);
 801ac06:	6a38      	ldr	r0, [r7, #32]
 801ac08:	f7ff fb06 	bl	801a218 <AMTGetTaskPowerMode>
 801ac0c:	4603      	mov	r3, r0
 801ac0e:	77fb      	strb	r3, [r7, #31]
  uint8_t sensor_id = ISourceGetId((ISourceObservable*) _this);
 801ac10:	6878      	ldr	r0, [r7, #4]
 801ac12:	f7ff fbf8 	bl	801a406 <ISourceGetId>
 801ac16:	4603      	mov	r3, r0
 801ac18:	77bb      	strb	r3, [r7, #30]

  if((log_status == E_POWER_MODE_SENSORS_ACTIVE) && ISensorIsEnabled(_this))
 801ac1a:	7ffb      	ldrb	r3, [r7, #31]
 801ac1c:	2b02      	cmp	r3, #2
 801ac1e:	d108      	bne.n	801ac32 <IIS3DWBTask_vtblSensorSetODR+0x52>
 801ac20:	6878      	ldr	r0, [r7, #4]
 801ac22:	f004 fcc7 	bl	801f5b4 <ISensorIsEnabled>
 801ac26:	4603      	mov	r3, r0
 801ac28:	2b00      	cmp	r3, #0
 801ac2a:	d002      	beq.n	801ac32 <IIS3DWBTask_vtblSensorSetODR+0x52>
  {
    res = SYS_INVALID_FUNC_CALL_ERROR_CODE;
 801ac2c:	2305      	movs	r3, #5
 801ac2e:	84fb      	strh	r3, [r7, #38]	; 0x26
 801ac30:	e01b      	b.n	801ac6a <IIS3DWBTask_vtblSensorSetODR+0x8a>
  }
  else
  {
    /* Set a new command message in the queue */
    SMMessage report =
 801ac32:	f107 0308 	add.w	r3, r7, #8
 801ac36:	2200      	movs	r2, #0
 801ac38:	601a      	str	r2, [r3, #0]
 801ac3a:	605a      	str	r2, [r3, #4]
 801ac3c:	609a      	str	r2, [r3, #8]
 801ac3e:	60da      	str	r2, [r3, #12]
 801ac40:	2304      	movs	r3, #4
 801ac42:	723b      	strb	r3, [r7, #8]
 801ac44:	7fbb      	ldrb	r3, [r7, #30]
 801ac46:	727b      	strb	r3, [r7, #9]
 801ac48:	2302      	movs	r3, #2
 801ac4a:	817b      	strh	r3, [r7, #10]
    {
        .sensorMessage.messageId = SM_MESSAGE_ID_SENSOR_CMD,
        .sensorMessage.nCmdID = SENSOR_CMD_ID_SET_ODR,
        .sensorMessage.nSensorId = sensor_id,
        .sensorMessage.nParam = (uint32_t) ODR
 801ac4c:	edd7 7a00 	vldr	s15, [r7]
 801ac50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801ac54:	ee17 3a90 	vmov	r3, s15
    SMMessage report =
 801ac58:	60fb      	str	r3, [r7, #12]
    };
    res = IIS3DWBTaskPostReportToBack(p_if_owner, (SMMessage*) &report);
 801ac5a:	f107 0308 	add.w	r3, r7, #8
 801ac5e:	4619      	mov	r1, r3
 801ac60:	6a38      	ldr	r0, [r7, #32]
 801ac62:	f000 fbe7 	bl	801b434 <IIS3DWBTaskPostReportToBack>
 801ac66:	4603      	mov	r3, r0
 801ac68:	84fb      	strh	r3, [r7, #38]	; 0x26
  }

  return res;
 801ac6a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
 801ac6c:	4618      	mov	r0, r3
 801ac6e:	3728      	adds	r7, #40	; 0x28
 801ac70:	46bd      	mov	sp, r7
 801ac72:	bd80      	pop	{r7, pc}
 801ac74:	08027324 	.word	0x08027324

0801ac78 <IIS3DWBTask_vtblSensorSetFS>:

sys_error_code_t IIS3DWBTask_vtblSensorSetFS(ISensor_t *_this, float FS)
{
 801ac78:	b580      	push	{r7, lr}
 801ac7a:	b08a      	sub	sp, #40	; 0x28
 801ac7c:	af00      	add	r7, sp, #0
 801ac7e:	6078      	str	r0, [r7, #4]
 801ac80:	ed87 0a00 	vstr	s0, [r7]
  assert_param(_this != NULL);
 801ac84:	687b      	ldr	r3, [r7, #4]
 801ac86:	2b00      	cmp	r3, #0
 801ac88:	d104      	bne.n	801ac94 <IIS3DWBTask_vtblSensorSetFS+0x1c>
 801ac8a:	f240 312b 	movw	r1, #811	; 0x32b
 801ac8e:	481f      	ldr	r0, [pc, #124]	; (801ad0c <IIS3DWBTask_vtblSensorSetFS+0x94>)
 801ac90:	f7fa fb0b 	bl	80152aa <assert_failed>
  sys_error_code_t res = SYS_NO_ERROR_CODE;
 801ac94:	2300      	movs	r3, #0
 801ac96:	84fb      	strh	r3, [r7, #38]	; 0x26
  IIS3DWBTask *p_if_owner = (IIS3DWBTask*) ((uint32_t) _this - offsetof(IIS3DWBTask, acc_sensor_if));
 801ac98:	687b      	ldr	r3, [r7, #4]
 801ac9a:	3bd4      	subs	r3, #212	; 0xd4
 801ac9c:	623b      	str	r3, [r7, #32]

  EPowerMode log_status = AMTGetTaskPowerMode((AManagedTask*) p_if_owner);
 801ac9e:	6a38      	ldr	r0, [r7, #32]
 801aca0:	f7ff faba 	bl	801a218 <AMTGetTaskPowerMode>
 801aca4:	4603      	mov	r3, r0
 801aca6:	77fb      	strb	r3, [r7, #31]
  uint8_t sensor_id = ISourceGetId((ISourceObservable*) _this);
 801aca8:	6878      	ldr	r0, [r7, #4]
 801acaa:	f7ff fbac 	bl	801a406 <ISourceGetId>
 801acae:	4603      	mov	r3, r0
 801acb0:	77bb      	strb	r3, [r7, #30]

  if((log_status == E_POWER_MODE_SENSORS_ACTIVE) && ISensorIsEnabled(_this))
 801acb2:	7ffb      	ldrb	r3, [r7, #31]
 801acb4:	2b02      	cmp	r3, #2
 801acb6:	d108      	bne.n	801acca <IIS3DWBTask_vtblSensorSetFS+0x52>
 801acb8:	6878      	ldr	r0, [r7, #4]
 801acba:	f004 fc7b 	bl	801f5b4 <ISensorIsEnabled>
 801acbe:	4603      	mov	r3, r0
 801acc0:	2b00      	cmp	r3, #0
 801acc2:	d002      	beq.n	801acca <IIS3DWBTask_vtblSensorSetFS+0x52>
  {
    res = SYS_INVALID_FUNC_CALL_ERROR_CODE;
 801acc4:	2305      	movs	r3, #5
 801acc6:	84fb      	strh	r3, [r7, #38]	; 0x26
 801acc8:	e01b      	b.n	801ad02 <IIS3DWBTask_vtblSensorSetFS+0x8a>
  }
  else
  {
    /* Set a new command message in the queue */
    SMMessage report =
 801acca:	f107 0308 	add.w	r3, r7, #8
 801acce:	2200      	movs	r2, #0
 801acd0:	601a      	str	r2, [r3, #0]
 801acd2:	605a      	str	r2, [r3, #4]
 801acd4:	609a      	str	r2, [r3, #8]
 801acd6:	60da      	str	r2, [r3, #12]
 801acd8:	2304      	movs	r3, #4
 801acda:	723b      	strb	r3, [r7, #8]
 801acdc:	7fbb      	ldrb	r3, [r7, #30]
 801acde:	727b      	strb	r3, [r7, #9]
 801ace0:	2303      	movs	r3, #3
 801ace2:	817b      	strh	r3, [r7, #10]
    {
        .sensorMessage.messageId = SM_MESSAGE_ID_SENSOR_CMD,
        .sensorMessage.nCmdID = SENSOR_CMD_ID_SET_FS,
        .sensorMessage.nSensorId = sensor_id,
        .sensorMessage.nParam = (uint32_t) FS
 801ace4:	edd7 7a00 	vldr	s15, [r7]
 801ace8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801acec:	ee17 3a90 	vmov	r3, s15
    SMMessage report =
 801acf0:	60fb      	str	r3, [r7, #12]
    };
    res = IIS3DWBTaskPostReportToBack(p_if_owner, (SMMessage*) &report);
 801acf2:	f107 0308 	add.w	r3, r7, #8
 801acf6:	4619      	mov	r1, r3
 801acf8:	6a38      	ldr	r0, [r7, #32]
 801acfa:	f000 fb9b 	bl	801b434 <IIS3DWBTaskPostReportToBack>
 801acfe:	4603      	mov	r3, r0
 801ad00:	84fb      	strh	r3, [r7, #38]	; 0x26
  }

  return res;
 801ad02:	8cfb      	ldrh	r3, [r7, #38]	; 0x26

}
 801ad04:	4618      	mov	r0, r3
 801ad06:	3728      	adds	r7, #40	; 0x28
 801ad08:	46bd      	mov	sp, r7
 801ad0a:	bd80      	pop	{r7, pc}
 801ad0c:	08027324 	.word	0x08027324

0801ad10 <IIS3DWBTask_vtblSensorEnable>:

sys_error_code_t IIS3DWBTask_vtblSensorEnable(ISensor_t *_this)
{
 801ad10:	b580      	push	{r7, lr}
 801ad12:	b08a      	sub	sp, #40	; 0x28
 801ad14:	af00      	add	r7, sp, #0
 801ad16:	6078      	str	r0, [r7, #4]
  assert_param(_this != NULL);
 801ad18:	687b      	ldr	r3, [r7, #4]
 801ad1a:	2b00      	cmp	r3, #0
 801ad1c:	d104      	bne.n	801ad28 <IIS3DWBTask_vtblSensorEnable+0x18>
 801ad1e:	f240 3149 	movw	r1, #841	; 0x349
 801ad22:	481c      	ldr	r0, [pc, #112]	; (801ad94 <IIS3DWBTask_vtblSensorEnable+0x84>)
 801ad24:	f7fa fac1 	bl	80152aa <assert_failed>
  sys_error_code_t res = SYS_NO_ERROR_CODE;
 801ad28:	2300      	movs	r3, #0
 801ad2a:	84fb      	strh	r3, [r7, #38]	; 0x26
  IIS3DWBTask *p_if_owner = (IIS3DWBTask*) ((uint32_t) _this - offsetof(IIS3DWBTask, acc_sensor_if));
 801ad2c:	687b      	ldr	r3, [r7, #4]
 801ad2e:	3bd4      	subs	r3, #212	; 0xd4
 801ad30:	623b      	str	r3, [r7, #32]

  EPowerMode log_status = AMTGetTaskPowerMode((AManagedTask*) p_if_owner);
 801ad32:	6a38      	ldr	r0, [r7, #32]
 801ad34:	f7ff fa70 	bl	801a218 <AMTGetTaskPowerMode>
 801ad38:	4603      	mov	r3, r0
 801ad3a:	77fb      	strb	r3, [r7, #31]
  uint8_t sensor_id = ISourceGetId((ISourceObservable*) _this);
 801ad3c:	6878      	ldr	r0, [r7, #4]
 801ad3e:	f7ff fb62 	bl	801a406 <ISourceGetId>
 801ad42:	4603      	mov	r3, r0
 801ad44:	77bb      	strb	r3, [r7, #30]

  if((log_status == E_POWER_MODE_SENSORS_ACTIVE) && ISensorIsEnabled(_this))
 801ad46:	7ffb      	ldrb	r3, [r7, #31]
 801ad48:	2b02      	cmp	r3, #2
 801ad4a:	d108      	bne.n	801ad5e <IIS3DWBTask_vtblSensorEnable+0x4e>
 801ad4c:	6878      	ldr	r0, [r7, #4]
 801ad4e:	f004 fc31 	bl	801f5b4 <ISensorIsEnabled>
 801ad52:	4603      	mov	r3, r0
 801ad54:	2b00      	cmp	r3, #0
 801ad56:	d002      	beq.n	801ad5e <IIS3DWBTask_vtblSensorEnable+0x4e>
  {
    res = SYS_INVALID_FUNC_CALL_ERROR_CODE;
 801ad58:	2305      	movs	r3, #5
 801ad5a:	84fb      	strh	r3, [r7, #38]	; 0x26
 801ad5c:	e014      	b.n	801ad88 <IIS3DWBTask_vtblSensorEnable+0x78>
  }
  else
  {
    /* Set a new command message in the queue */
    SMMessage report =
 801ad5e:	f107 0308 	add.w	r3, r7, #8
 801ad62:	2200      	movs	r2, #0
 801ad64:	601a      	str	r2, [r3, #0]
 801ad66:	605a      	str	r2, [r3, #4]
 801ad68:	609a      	str	r2, [r3, #8]
 801ad6a:	60da      	str	r2, [r3, #12]
 801ad6c:	2304      	movs	r3, #4
 801ad6e:	723b      	strb	r3, [r7, #8]
 801ad70:	7fbb      	ldrb	r3, [r7, #30]
 801ad72:	727b      	strb	r3, [r7, #9]
 801ad74:	2304      	movs	r3, #4
 801ad76:	817b      	strh	r3, [r7, #10]
    {
        .sensorMessage.messageId = SM_MESSAGE_ID_SENSOR_CMD,
        .sensorMessage.nCmdID = SENSOR_CMD_ID_ENABLE,
        .sensorMessage.nSensorId = sensor_id
    };
    res = IIS3DWBTaskPostReportToBack(p_if_owner, (SMMessage*) &report);
 801ad78:	f107 0308 	add.w	r3, r7, #8
 801ad7c:	4619      	mov	r1, r3
 801ad7e:	6a38      	ldr	r0, [r7, #32]
 801ad80:	f000 fb58 	bl	801b434 <IIS3DWBTaskPostReportToBack>
 801ad84:	4603      	mov	r3, r0
 801ad86:	84fb      	strh	r3, [r7, #38]	; 0x26
  }

  return res;
 801ad88:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
 801ad8a:	4618      	mov	r0, r3
 801ad8c:	3728      	adds	r7, #40	; 0x28
 801ad8e:	46bd      	mov	sp, r7
 801ad90:	bd80      	pop	{r7, pc}
 801ad92:	bf00      	nop
 801ad94:	08027324 	.word	0x08027324

0801ad98 <IIS3DWBTask_vtblSensorDisable>:

sys_error_code_t IIS3DWBTask_vtblSensorDisable(ISensor_t *_this)
{
 801ad98:	b580      	push	{r7, lr}
 801ad9a:	b08a      	sub	sp, #40	; 0x28
 801ad9c:	af00      	add	r7, sp, #0
 801ad9e:	6078      	str	r0, [r7, #4]
  assert_param(_this != NULL);
 801ada0:	687b      	ldr	r3, [r7, #4]
 801ada2:	2b00      	cmp	r3, #0
 801ada4:	d104      	bne.n	801adb0 <IIS3DWBTask_vtblSensorDisable+0x18>
 801ada6:	f240 3165 	movw	r1, #869	; 0x365
 801adaa:	481c      	ldr	r0, [pc, #112]	; (801ae1c <IIS3DWBTask_vtblSensorDisable+0x84>)
 801adac:	f7fa fa7d 	bl	80152aa <assert_failed>
  sys_error_code_t res = SYS_NO_ERROR_CODE;
 801adb0:	2300      	movs	r3, #0
 801adb2:	84fb      	strh	r3, [r7, #38]	; 0x26
  IIS3DWBTask *p_if_owner = (IIS3DWBTask*) ((uint32_t) _this - offsetof(IIS3DWBTask, acc_sensor_if));
 801adb4:	687b      	ldr	r3, [r7, #4]
 801adb6:	3bd4      	subs	r3, #212	; 0xd4
 801adb8:	623b      	str	r3, [r7, #32]

  EPowerMode log_status = AMTGetTaskPowerMode((AManagedTask*) p_if_owner);
 801adba:	6a38      	ldr	r0, [r7, #32]
 801adbc:	f7ff fa2c 	bl	801a218 <AMTGetTaskPowerMode>
 801adc0:	4603      	mov	r3, r0
 801adc2:	77fb      	strb	r3, [r7, #31]
  uint8_t sensor_id = ISourceGetId((ISourceObservable*) _this);
 801adc4:	6878      	ldr	r0, [r7, #4]
 801adc6:	f7ff fb1e 	bl	801a406 <ISourceGetId>
 801adca:	4603      	mov	r3, r0
 801adcc:	77bb      	strb	r3, [r7, #30]

  if((log_status == E_POWER_MODE_SENSORS_ACTIVE) && ISensorIsEnabled(_this))
 801adce:	7ffb      	ldrb	r3, [r7, #31]
 801add0:	2b02      	cmp	r3, #2
 801add2:	d108      	bne.n	801ade6 <IIS3DWBTask_vtblSensorDisable+0x4e>
 801add4:	6878      	ldr	r0, [r7, #4]
 801add6:	f004 fbed 	bl	801f5b4 <ISensorIsEnabled>
 801adda:	4603      	mov	r3, r0
 801addc:	2b00      	cmp	r3, #0
 801adde:	d002      	beq.n	801ade6 <IIS3DWBTask_vtblSensorDisable+0x4e>
  {
    res = SYS_INVALID_FUNC_CALL_ERROR_CODE;
 801ade0:	2305      	movs	r3, #5
 801ade2:	84fb      	strh	r3, [r7, #38]	; 0x26
 801ade4:	e014      	b.n	801ae10 <IIS3DWBTask_vtblSensorDisable+0x78>
  }
  else
  {
    /* Set a new command message in the queue */
    SMMessage report =
 801ade6:	f107 0308 	add.w	r3, r7, #8
 801adea:	2200      	movs	r2, #0
 801adec:	601a      	str	r2, [r3, #0]
 801adee:	605a      	str	r2, [r3, #4]
 801adf0:	609a      	str	r2, [r3, #8]
 801adf2:	60da      	str	r2, [r3, #12]
 801adf4:	2304      	movs	r3, #4
 801adf6:	723b      	strb	r3, [r7, #8]
 801adf8:	7fbb      	ldrb	r3, [r7, #30]
 801adfa:	727b      	strb	r3, [r7, #9]
 801adfc:	2305      	movs	r3, #5
 801adfe:	817b      	strh	r3, [r7, #10]
    {
        .sensorMessage.messageId = SM_MESSAGE_ID_SENSOR_CMD,
        .sensorMessage.nCmdID = SENSOR_CMD_ID_DISABLE,
        .sensorMessage.nSensorId = sensor_id
    };
    res = IIS3DWBTaskPostReportToBack(p_if_owner, (SMMessage*) &report);
 801ae00:	f107 0308 	add.w	r3, r7, #8
 801ae04:	4619      	mov	r1, r3
 801ae06:	6a38      	ldr	r0, [r7, #32]
 801ae08:	f000 fb14 	bl	801b434 <IIS3DWBTaskPostReportToBack>
 801ae0c:	4603      	mov	r3, r0
 801ae0e:	84fb      	strh	r3, [r7, #38]	; 0x26
  }

  return res;
 801ae10:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
 801ae12:	4618      	mov	r0, r3
 801ae14:	3728      	adds	r7, #40	; 0x28
 801ae16:	46bd      	mov	sp, r7
 801ae18:	bd80      	pop	{r7, pc}
 801ae1a:	bf00      	nop
 801ae1c:	08027324 	.word	0x08027324

0801ae20 <IIS3DWBTask_vtblSensorIsEnabled>:

boolean_t IIS3DWBTask_vtblSensorIsEnabled(ISensor_t *_this)
{
 801ae20:	b580      	push	{r7, lr}
 801ae22:	b084      	sub	sp, #16
 801ae24:	af00      	add	r7, sp, #0
 801ae26:	6078      	str	r0, [r7, #4]
  assert_param(_this != NULL);
 801ae28:	687b      	ldr	r3, [r7, #4]
 801ae2a:	2b00      	cmp	r3, #0
 801ae2c:	d104      	bne.n	801ae38 <IIS3DWBTask_vtblSensorIsEnabled+0x18>
 801ae2e:	f240 3181 	movw	r1, #897	; 0x381
 801ae32:	480d      	ldr	r0, [pc, #52]	; (801ae68 <IIS3DWBTask_vtblSensorIsEnabled+0x48>)
 801ae34:	f7fa fa39 	bl	80152aa <assert_failed>
  boolean_t res = FALSE;
 801ae38:	2300      	movs	r3, #0
 801ae3a:	73fb      	strb	r3, [r7, #15]
  IIS3DWBTask *p_if_owner = (IIS3DWBTask*) ((uint32_t) _this - offsetof(IIS3DWBTask, acc_sensor_if));
 801ae3c:	687b      	ldr	r3, [r7, #4]
 801ae3e:	3bd4      	subs	r3, #212	; 0xd4
 801ae40:	60bb      	str	r3, [r7, #8]

  if(ISourceGetId((ISourceObservable*) _this) == p_if_owner->acc_id)
 801ae42:	6878      	ldr	r0, [r7, #4]
 801ae44:	f7ff fadf 	bl	801a406 <ISourceGetId>
 801ae48:	4603      	mov	r3, r0
 801ae4a:	461a      	mov	r2, r3
 801ae4c:	68bb      	ldr	r3, [r7, #8]
 801ae4e:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 801ae52:	429a      	cmp	r2, r3
 801ae54:	d103      	bne.n	801ae5e <IIS3DWBTask_vtblSensorIsEnabled+0x3e>
    res = p_if_owner->acc_sensor_status.IsActive;
 801ae56:	68bb      	ldr	r3, [r7, #8]
 801ae58:	f893 30e4 	ldrb.w	r3, [r3, #228]	; 0xe4
 801ae5c:	73fb      	strb	r3, [r7, #15]

  return res;
 801ae5e:	7bfb      	ldrb	r3, [r7, #15]
}
 801ae60:	4618      	mov	r0, r3
 801ae62:	3710      	adds	r7, #16
 801ae64:	46bd      	mov	sp, r7
 801ae66:	bd80      	pop	{r7, pc}
 801ae68:	08027324 	.word	0x08027324

0801ae6c <IIS3DWBTask_vtblSensorGetDescription>:

SensorDescriptor_t IIS3DWBTask_vtblSensorGetDescription(ISensor_t *_this)
{
 801ae6c:	b580      	push	{r7, lr}
 801ae6e:	b084      	sub	sp, #16
 801ae70:	af00      	add	r7, sp, #0
 801ae72:	6078      	str	r0, [r7, #4]
 801ae74:	6039      	str	r1, [r7, #0]
  assert_param(_this != NULL);
 801ae76:	683b      	ldr	r3, [r7, #0]
 801ae78:	2b00      	cmp	r3, #0
 801ae7a:	d104      	bne.n	801ae86 <IIS3DWBTask_vtblSensorGetDescription+0x1a>
 801ae7c:	f240 318d 	movw	r1, #909	; 0x38d
 801ae80:	4809      	ldr	r0, [pc, #36]	; (801aea8 <IIS3DWBTask_vtblSensorGetDescription+0x3c>)
 801ae82:	f7fa fa12 	bl	80152aa <assert_failed>
  IIS3DWBTask *p_if_owner = (IIS3DWBTask*) ((uint32_t) _this - offsetof(IIS3DWBTask, acc_sensor_if));
 801ae86:	683b      	ldr	r3, [r7, #0]
 801ae88:	3bd4      	subs	r3, #212	; 0xd4
 801ae8a:	60fb      	str	r3, [r7, #12]

  return *p_if_owner->acc_sensor_descriptor;
 801ae8c:	68fb      	ldr	r3, [r7, #12]
 801ae8e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 801ae92:	687a      	ldr	r2, [r7, #4]
 801ae94:	4610      	mov	r0, r2
 801ae96:	4619      	mov	r1, r3
 801ae98:	23e8      	movs	r3, #232	; 0xe8
 801ae9a:	461a      	mov	r2, r3
 801ae9c:	f008 feb8 	bl	8023c10 <memcpy>
}
 801aea0:	6878      	ldr	r0, [r7, #4]
 801aea2:	3710      	adds	r7, #16
 801aea4:	46bd      	mov	sp, r7
 801aea6:	bd80      	pop	{r7, pc}
 801aea8:	08027324 	.word	0x08027324

0801aeac <IIS3DWBTask_vtblSensorGetStatus>:

SensorStatus_t IIS3DWBTask_vtblSensorGetStatus(ISensor_t *_this)
{
 801aeac:	b5b0      	push	{r4, r5, r7, lr}
 801aeae:	b084      	sub	sp, #16
 801aeb0:	af00      	add	r7, sp, #0
 801aeb2:	6078      	str	r0, [r7, #4]
 801aeb4:	6039      	str	r1, [r7, #0]
  assert_param(_this != NULL);
 801aeb6:	683b      	ldr	r3, [r7, #0]
 801aeb8:	2b00      	cmp	r3, #0
 801aeba:	d104      	bne.n	801aec6 <IIS3DWBTask_vtblSensorGetStatus+0x1a>
 801aebc:	f240 3195 	movw	r1, #917	; 0x395
 801aec0:	480a      	ldr	r0, [pc, #40]	; (801aeec <IIS3DWBTask_vtblSensorGetStatus+0x40>)
 801aec2:	f7fa f9f2 	bl	80152aa <assert_failed>
  IIS3DWBTask *p_if_owner = (IIS3DWBTask*) ((uint32_t) _this - offsetof(IIS3DWBTask, acc_sensor_if));
 801aec6:	683b      	ldr	r3, [r7, #0]
 801aec8:	3bd4      	subs	r3, #212	; 0xd4
 801aeca:	60fb      	str	r3, [r7, #12]

  return p_if_owner->acc_sensor_status;
 801aecc:	687a      	ldr	r2, [r7, #4]
 801aece:	68fb      	ldr	r3, [r7, #12]
 801aed0:	4615      	mov	r5, r2
 801aed2:	f103 04dc 	add.w	r4, r3, #220	; 0xdc
 801aed6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801aed8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801aeda:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801aede:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 801aee2:	6878      	ldr	r0, [r7, #4]
 801aee4:	3710      	adds	r7, #16
 801aee6:	46bd      	mov	sp, r7
 801aee8:	bdb0      	pop	{r4, r5, r7, pc}
 801aeea:	bf00      	nop
 801aeec:	08027324 	.word	0x08027324

0801aef0 <IIS3DWBTaskExecuteStepState1>:

// Private function definition
// ***************************

static sys_error_code_t IIS3DWBTaskExecuteStepState1(AManagedTask *_this)
{
 801aef0:	b580      	push	{r7, lr}
 801aef2:	b08a      	sub	sp, #40	; 0x28
 801aef4:	af02      	add	r7, sp, #8
 801aef6:	6078      	str	r0, [r7, #4]
  assert_param(_this != NULL);
 801aef8:	687b      	ldr	r3, [r7, #4]
 801aefa:	2b00      	cmp	r3, #0
 801aefc:	d104      	bne.n	801af08 <IIS3DWBTaskExecuteStepState1+0x18>
 801aefe:	f44f 7168 	mov.w	r1, #928	; 0x3a0
 801af02:	4848      	ldr	r0, [pc, #288]	; (801b024 <IIS3DWBTaskExecuteStepState1+0x134>)
 801af04:	f7fa f9d1 	bl	80152aa <assert_failed>
  sys_error_code_t res = SYS_NO_ERROR_CODE;
 801af08:	2300      	movs	r3, #0
 801af0a:	83fb      	strh	r3, [r7, #30]
  IIS3DWBTask *p_obj = (IIS3DWBTask*) _this;
 801af0c:	687b      	ldr	r3, [r7, #4]
 801af0e:	61bb      	str	r3, [r7, #24]
  SMMessage report =
 801af10:	f107 0308 	add.w	r3, r7, #8
 801af14:	2200      	movs	r2, #0
 801af16:	601a      	str	r2, [r3, #0]
 801af18:	605a      	str	r2, [r3, #4]
 801af1a:	609a      	str	r2, [r3, #8]
 801af1c:	60da      	str	r2, [r3, #12]
  {
      0
  };

  AMTExSetInactiveState((AManagedTaskEx*) _this, TRUE);
 801af1e:	2101      	movs	r1, #1
 801af20:	6878      	ldr	r0, [r7, #4]
 801af22:	f7ff fa09 	bl	801a338 <AMTExSetInactiveState>
  if(TX_SUCCESS == tx_queue_receive(&p_obj->in_queue, &report, TX_WAIT_FOREVER))
 801af26:	69bb      	ldr	r3, [r7, #24]
 801af28:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801af2c:	f107 0108 	add.w	r1, r7, #8
 801af30:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801af34:	4618      	mov	r0, r3
 801af36:	f7f7 ff81 	bl	8012e3c <_txe_queue_receive>
 801af3a:	4603      	mov	r3, r0
 801af3c:	2b00      	cmp	r3, #0
 801af3e:	d16a      	bne.n	801b016 <IIS3DWBTaskExecuteStepState1+0x126>
  {
    AMTExSetInactiveState((AManagedTaskEx*) _this, FALSE);
 801af40:	2100      	movs	r1, #0
 801af42:	6878      	ldr	r0, [r7, #4]
 801af44:	f7ff f9f8 	bl	801a338 <AMTExSetInactiveState>

    switch(report.messageID)
 801af48:	7a3b      	ldrb	r3, [r7, #8]
 801af4a:	2b04      	cmp	r3, #4
 801af4c:	d003      	beq.n	801af56 <IIS3DWBTaskExecuteStepState1+0x66>
 801af4e:	2bfe      	cmp	r3, #254	; 0xfe
 801af50:	d159      	bne.n	801b006 <IIS3DWBTaskExecuteStepState1+0x116>
    {
      case SM_MESSAGE_ID_FORCE_STEP:
        {
          // do nothing. I need only to resume.
          __NOP();
 801af52:	bf00      	nop
          break;
 801af54:	e060      	b.n	801b018 <IIS3DWBTaskExecuteStepState1+0x128>
        }
      case SM_MESSAGE_ID_SENSOR_CMD:
        {
          switch(report.sensorMessage.nCmdID)
 801af56:	897b      	ldrh	r3, [r7, #10]
 801af58:	3b02      	subs	r3, #2
 801af5a:	2b03      	cmp	r3, #3
 801af5c:	d84a      	bhi.n	801aff4 <IIS3DWBTaskExecuteStepState1+0x104>
 801af5e:	a201      	add	r2, pc, #4	; (adr r2, 801af64 <IIS3DWBTaskExecuteStepState1+0x74>)
 801af60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801af64:	0801af75 	.word	0x0801af75
 801af68:	0801af95 	.word	0x0801af95
 801af6c:	0801afb5 	.word	0x0801afb5
 801af70:	0801afd5 	.word	0x0801afd5
          {
            case SENSOR_CMD_ID_SET_ODR:
              res = IIS3DWBTaskSensorSetODR(p_obj, report);
 801af74:	466a      	mov	r2, sp
 801af76:	f107 0310 	add.w	r3, r7, #16
 801af7a:	e893 0003 	ldmia.w	r3, {r0, r1}
 801af7e:	e882 0003 	stmia.w	r2, {r0, r1}
 801af82:	f107 0308 	add.w	r3, r7, #8
 801af86:	cb0c      	ldmia	r3, {r2, r3}
 801af88:	69b8      	ldr	r0, [r7, #24]
 801af8a:	f000 fc55 	bl	801b838 <IIS3DWBTaskSensorSetODR>
 801af8e:	4603      	mov	r3, r0
 801af90:	83fb      	strh	r3, [r7, #30]
              break;
 801af92:	e037      	b.n	801b004 <IIS3DWBTaskExecuteStepState1+0x114>
            case SENSOR_CMD_ID_SET_FS:
              res = IIS3DWBTaskSensorSetFS(p_obj, report);
 801af94:	466a      	mov	r2, sp
 801af96:	f107 0310 	add.w	r3, r7, #16
 801af9a:	e893 0003 	ldmia.w	r3, {r0, r1}
 801af9e:	e882 0003 	stmia.w	r2, {r0, r1}
 801afa2:	f107 0308 	add.w	r3, r7, #8
 801afa6:	cb0c      	ldmia	r3, {r2, r3}
 801afa8:	69b8      	ldr	r0, [r7, #24]
 801afaa:	f000 fc91 	bl	801b8d0 <IIS3DWBTaskSensorSetFS>
 801afae:	4603      	mov	r3, r0
 801afb0:	83fb      	strh	r3, [r7, #30]
              break;
 801afb2:	e027      	b.n	801b004 <IIS3DWBTaskExecuteStepState1+0x114>
            case SENSOR_CMD_ID_ENABLE:
              res = IIS3DWBTaskSensorEnable(p_obj, report);
 801afb4:	466a      	mov	r2, sp
 801afb6:	f107 0310 	add.w	r3, r7, #16
 801afba:	e893 0003 	ldmia.w	r3, {r0, r1}
 801afbe:	e882 0003 	stmia.w	r2, {r0, r1}
 801afc2:	f107 0308 	add.w	r3, r7, #8
 801afc6:	cb0c      	ldmia	r3, {r2, r3}
 801afc8:	69b8      	ldr	r0, [r7, #24]
 801afca:	f000 fd03 	bl	801b9d4 <IIS3DWBTaskSensorEnable>
 801afce:	4603      	mov	r3, r0
 801afd0:	83fb      	strh	r3, [r7, #30]
              break;
 801afd2:	e017      	b.n	801b004 <IIS3DWBTaskExecuteStepState1+0x114>
            case SENSOR_CMD_ID_DISABLE:
              res = IIS3DWBTaskSensorDisable(p_obj, report);
 801afd4:	466a      	mov	r2, sp
 801afd6:	f107 0310 	add.w	r3, r7, #16
 801afda:	e893 0003 	ldmia.w	r3, {r0, r1}
 801afde:	e882 0003 	stmia.w	r2, {r0, r1}
 801afe2:	f107 0308 	add.w	r3, r7, #8
 801afe6:	cb0c      	ldmia	r3, {r2, r3}
 801afe8:	69b8      	ldr	r0, [r7, #24]
 801afea:	f000 fd1f 	bl	801ba2c <IIS3DWBTaskSensorDisable>
 801afee:	4603      	mov	r3, r0
 801aff0:	83fb      	strh	r3, [r7, #30]
              break;
 801aff2:	e007      	b.n	801b004 <IIS3DWBTaskExecuteStepState1+0x114>
            default:
              // unwanted report
              res = SYS_APP_TASK_UNKNOWN_REPORT_ERROR_CODE;
 801aff4:	f240 3322 	movw	r3, #802	; 0x322
 801aff8:	83fb      	strh	r3, [r7, #30]
              SYS_SET_SERVICE_LEVEL_ERROR_CODE(SYS_APP_TASK_UNKNOWN_REPORT_ERROR_CODE);
 801affa:	4b0b      	ldr	r3, [pc, #44]	; (801b028 <IIS3DWBTaskExecuteStepState1+0x138>)
 801affc:	f240 3222 	movw	r2, #802	; 0x322
 801b000:	805a      	strh	r2, [r3, #2]

              SYS_DEBUGF(SYS_DBG_LEVEL_WARNING, ("IIS3DWB: unexpected report in Run: %i\r\n", report.messageID));
              break;
 801b002:	bf00      	nop
          }
          break;
 801b004:	e008      	b.n	801b018 <IIS3DWBTaskExecuteStepState1+0x128>
        }
      default:
        {
          // unwanted report
          res = SYS_APP_TASK_UNKNOWN_REPORT_ERROR_CODE;
 801b006:	f240 3322 	movw	r3, #802	; 0x322
 801b00a:	83fb      	strh	r3, [r7, #30]
          SYS_SET_SERVICE_LEVEL_ERROR_CODE(SYS_APP_TASK_UNKNOWN_REPORT_ERROR_CODE);
 801b00c:	4b06      	ldr	r3, [pc, #24]	; (801b028 <IIS3DWBTaskExecuteStepState1+0x138>)
 801b00e:	f240 3222 	movw	r2, #802	; 0x322
 801b012:	805a      	strh	r2, [r3, #2]

          SYS_DEBUGF(SYS_DBG_LEVEL_WARNING, ("IIS3DWB: unexpected report in Run: %i\r\n", report.messageID));
          break;
 801b014:	e000      	b.n	801b018 <IIS3DWBTaskExecuteStepState1+0x128>
        }
    }
  }
 801b016:	bf00      	nop

  return res;
 801b018:	8bfb      	ldrh	r3, [r7, #30]
}
 801b01a:	4618      	mov	r0, r3
 801b01c:	3720      	adds	r7, #32
 801b01e:	46bd      	mov	sp, r7
 801b020:	bd80      	pop	{r7, pc}
 801b022:	bf00      	nop
 801b024:	08027324 	.word	0x08027324
 801b028:	20000700 	.word	0x20000700

0801b02c <IIS3DWBTaskExecuteStepDatalog>:

static sys_error_code_t IIS3DWBTaskExecuteStepDatalog(AManagedTask *_this)
{
 801b02c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801b030:	b0a4      	sub	sp, #144	; 0x90
 801b032:	af04      	add	r7, sp, #16
 801b034:	6078      	str	r0, [r7, #4]
  assert_param(_this);
 801b036:	687b      	ldr	r3, [r7, #4]
 801b038:	2b00      	cmp	r3, #0
 801b03a:	d104      	bne.n	801b046 <IIS3DWBTaskExecuteStepDatalog+0x1a>
 801b03c:	f44f 7178 	mov.w	r1, #992	; 0x3e0
 801b040:	48be      	ldr	r0, [pc, #760]	; (801b33c <IIS3DWBTaskExecuteStepDatalog+0x310>)
 801b042:	f7fa f932 	bl	80152aa <assert_failed>
  sys_error_code_t res = SYS_NO_ERROR_CODE;
 801b046:	2300      	movs	r3, #0
 801b048:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
  IIS3DWBTask *p_obj = (IIS3DWBTask*) _this;
 801b04c:	687b      	ldr	r3, [r7, #4]
 801b04e:	677b      	str	r3, [r7, #116]	; 0x74
  SMMessage report =
 801b050:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801b054:	2200      	movs	r2, #0
 801b056:	601a      	str	r2, [r3, #0]
 801b058:	605a      	str	r2, [r3, #4]
 801b05a:	609a      	str	r2, [r3, #8]
 801b05c:	60da      	str	r2, [r3, #12]
  {
      0
  };

  AMTExSetInactiveState((AManagedTaskEx*) _this, TRUE);
 801b05e:	2101      	movs	r1, #1
 801b060:	6878      	ldr	r0, [r7, #4]
 801b062:	f7ff f969 	bl	801a338 <AMTExSetInactiveState>
  if(TX_SUCCESS == tx_queue_receive(&p_obj->in_queue, &report, TX_WAIT_FOREVER))
 801b066:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801b068:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801b06c:	f107 0150 	add.w	r1, r7, #80	; 0x50
 801b070:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801b074:	4618      	mov	r0, r3
 801b076:	f7f7 fee1 	bl	8012e3c <_txe_queue_receive>
 801b07a:	4603      	mov	r3, r0
 801b07c:	2b00      	cmp	r3, #0
 801b07e:	f040 8188 	bne.w	801b392 <IIS3DWBTaskExecuteStepDatalog+0x366>
  {
    AMTExSetInactiveState((AManagedTaskEx*) _this, FALSE);
 801b082:	2100      	movs	r1, #0
 801b084:	6878      	ldr	r0, [r7, #4]
 801b086:	f7ff f957 	bl	801a338 <AMTExSetInactiveState>

    switch(report.messageID)
 801b08a:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 801b08e:	2bfe      	cmp	r3, #254	; 0xfe
 801b090:	d008      	beq.n	801b0a4 <IIS3DWBTaskExecuteStepDatalog+0x78>
 801b092:	2bfe      	cmp	r3, #254	; 0xfe
 801b094:	f300 8174 	bgt.w	801b380 <IIS3DWBTaskExecuteStepDatalog+0x354>
 801b098:	2b01      	cmp	r3, #1
 801b09a:	d005      	beq.n	801b0a8 <IIS3DWBTaskExecuteStepDatalog+0x7c>
 801b09c:	2b04      	cmp	r3, #4
 801b09e:	f000 80e7 	beq.w	801b270 <IIS3DWBTaskExecuteStepDatalog+0x244>
 801b0a2:	e16d      	b.n	801b380 <IIS3DWBTaskExecuteStepDatalog+0x354>
    {
      case SM_MESSAGE_ID_FORCE_STEP:
        {
          // do nothing. I need only to resume.
          __NOP();
 801b0a4:	bf00      	nop
          break;
 801b0a6:	e177      	b.n	801b398 <IIS3DWBTaskExecuteStepDatalog+0x36c>
        }
      case SM_MESSAGE_ID_DATA_READY:
        {
//        SYS_DEBUGF(SYS_DBG_LEVEL_VERBOSE, ("IIS3DWB: new data.\r\n"));
          if(p_obj->pIRQConfig == NULL)
 801b0a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801b0aa:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 801b0ae:	2b00      	cmp	r3, #0
 801b0b0:	d10e      	bne.n	801b0d0 <IIS3DWBTaskExecuteStepDatalog+0xa4>
          {
            if(TX_SUCCESS != tx_timer_change(&p_obj->read_timer, AMT_MS_TO_TICKS(IIS3DWB_TASK_CFG_TIMER_PERIOD_MS), AMT_MS_TO_TICKS(IIS3DWB_TASK_CFG_TIMER_PERIOD_MS)))
 801b0b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801b0b4:	f503 6304 	add.w	r3, r3, #2112	; 0x840
 801b0b8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 801b0bc:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 801b0c0:	4618      	mov	r0, r3
 801b0c2:	f7f8 f9f9 	bl	80134b8 <_txe_timer_change>
 801b0c6:	4603      	mov	r3, r0
 801b0c8:	2b00      	cmp	r3, #0
 801b0ca:	d001      	beq.n	801b0d0 <IIS3DWBTaskExecuteStepDatalog+0xa4>
            {
              return SYS_UNDEFINED_ERROR_CODE;
 801b0cc:	2302      	movs	r3, #2
 801b0ce:	e165      	b.n	801b39c <IIS3DWBTaskExecuteStepDatalog+0x370>
            }
          }

          res = IIS3DWBTaskSensorReadData(p_obj);
 801b0d0:	6f78      	ldr	r0, [r7, #116]	; 0x74
 801b0d2:	f000 fac9 	bl	801b668 <IIS3DWBTaskSensorReadData>
 801b0d6:	4603      	mov	r3, r0
 801b0d8:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
          if(!SYS_IS_ERROR_CODE(res))
 801b0dc:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 801b0e0:	2b00      	cmp	r3, #0
 801b0e2:	f040 8158 	bne.w	801b396 <IIS3DWBTaskExecuteStepDatalog+0x36a>
          {
            // update the time stamp
            uint32_t period = 0;
 801b0e6:	2300      	movs	r3, #0
 801b0e8:	67fb      	str	r3, [r7, #124]	; 0x7c
            if(p_obj->timestamp_tick >= p_obj->old_timestamp_tick)
 801b0ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801b0ec:	f8d3 286c 	ldr.w	r2, [r3, #2156]	; 0x86c
 801b0f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801b0f2:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 801b0f6:	429a      	cmp	r2, r3
 801b0f8:	d308      	bcc.n	801b10c <IIS3DWBTaskExecuteStepDatalog+0xe0>
            {
              period = p_obj->timestamp_tick - p_obj->old_timestamp_tick;
 801b0fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801b0fc:	f8d3 286c 	ldr.w	r2, [r3, #2156]	; 0x86c
 801b100:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801b102:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 801b106:	1ad3      	subs	r3, r2, r3
 801b108:	67fb      	str	r3, [r7, #124]	; 0x7c
 801b10a:	e008      	b.n	801b11e <IIS3DWBTaskExecuteStepDatalog+0xf2>
            }
            else
            {
              // overflow of the hw timer
              period = p_obj->timestamp_tick + (0xFFFFFFFF - p_obj->old_timestamp_tick);
 801b10c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801b10e:	f8d3 286c 	ldr.w	r2, [r3, #2156]	; 0x86c
 801b112:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801b114:	f8d3 3870 	ldr.w	r3, [r3, #2160]	; 0x870
 801b118:	1ad3      	subs	r3, r2, r3
 801b11a:	3b01      	subs	r3, #1
 801b11c:	67fb      	str	r3, [r7, #124]	; 0x7c
            }
            p_obj->old_timestamp_tick = p_obj->timestamp_tick;
 801b11e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801b120:	f8d3 286c 	ldr.w	r2, [r3, #2156]	; 0x86c
 801b124:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801b126:	f8c3 2870 	str.w	r2, [r3, #2160]	; 0x870
            p_obj->timestamp += period;
 801b12a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801b12c:	f503 6308 	add.w	r3, r3, #2176	; 0x880
 801b130:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801b134:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 801b136:	2000      	movs	r0, #0
 801b138:	460c      	mov	r4, r1
 801b13a:	4605      	mov	r5, r0
 801b13c:	eb12 0804 	adds.w	r8, r2, r4
 801b140:	eb43 0905 	adc.w	r9, r3, r5
 801b144:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801b146:	f503 6308 	add.w	r3, r3, #2176	; 0x880
 801b14a:	e943 8902 	strd	r8, r9, [r3, #-8]
            // notify the listeners...
            double timestamp = (double) p_obj->timestamp / (double) (SystemCoreClock);
 801b14e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801b150:	f503 6308 	add.w	r3, r3, #2176	; 0x880
 801b154:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801b158:	4610      	mov	r0, r2
 801b15a:	4619      	mov	r1, r3
 801b15c:	f7e5 fb4a 	bl	80007f4 <__aeabi_ul2d>
 801b160:	4604      	mov	r4, r0
 801b162:	460d      	mov	r5, r1
 801b164:	4b76      	ldr	r3, [pc, #472]	; (801b340 <IIS3DWBTaskExecuteStepDatalog+0x314>)
 801b166:	681b      	ldr	r3, [r3, #0]
 801b168:	4618      	mov	r0, r3
 801b16a:	f7e5 faff 	bl	800076c <__aeabi_ui2d>
 801b16e:	4602      	mov	r2, r0
 801b170:	460b      	mov	r3, r1
 801b172:	4620      	mov	r0, r4
 801b174:	4629      	mov	r1, r5
 801b176:	f7e5 fc9d 	bl	8000ab4 <__aeabi_ddiv>
 801b17a:	4602      	mov	r2, r0
 801b17c:	460b      	mov	r3, r1
 801b17e:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
            double delta_timestamp = (double) period / (double) (SystemCoreClock);
 801b182:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 801b184:	f7e5 faf2 	bl	800076c <__aeabi_ui2d>
 801b188:	4604      	mov	r4, r0
 801b18a:	460d      	mov	r5, r1
 801b18c:	4b6c      	ldr	r3, [pc, #432]	; (801b340 <IIS3DWBTaskExecuteStepDatalog+0x314>)
 801b18e:	681b      	ldr	r3, [r3, #0]
 801b190:	4618      	mov	r0, r3
 801b192:	f7e5 faeb 	bl	800076c <__aeabi_ui2d>
 801b196:	4602      	mov	r2, r0
 801b198:	460b      	mov	r3, r1
 801b19a:	4620      	mov	r0, r4
 801b19c:	4629      	mov	r1, r5
 801b19e:	f7e5 fc89 	bl	8000ab4 <__aeabi_ddiv>
 801b1a2:	4602      	mov	r2, r0
 801b1a4:	460b      	mov	r3, r1
 801b1a6:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60

            AI_SP_Stream_t stream =
 801b1aa:	f107 030c 	add.w	r3, r7, #12
 801b1ae:	222c      	movs	r2, #44	; 0x2c
 801b1b0:	2100      	movs	r1, #0
 801b1b2:	4618      	mov	r0, r3
 801b1b4:	f008 fd39 	bl	8023c2a <memset>
            {
                .packet.payload = p_obj->p_sensor_data_buff,
 801b1b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801b1ba:	f503 739c 	add.w	r3, r3, #312	; 0x138
            AI_SP_Stream_t stream =
 801b1be:	613b      	str	r3, [r7, #16]
 801b1c0:	4b60      	ldr	r3, [pc, #384]	; (801b344 <IIS3DWBTaskExecuteStepDatalog+0x318>)
 801b1c2:	617b      	str	r3, [r7, #20]
 801b1c4:	2302      	movs	r3, #2
 801b1c6:	86bb      	strh	r3, [r7, #52]	; 0x34
                .packet.payload_fmt = AI_SP_FMT_INT16_RESET(),
                .mode = AI_SP_MODE_COLUMN //TODO: STF - this means that data are interleaved?!?
                // bonus question: what is AI_LOGGING_SHAPES_DEPTH ??
                // (can I represent anomogeneous matrix [4*4] with this data format ?
                };
            ai_logging_create_shape_2d(&stream.packet.shape, 3, p_obj->samples_per_it);
 801b1c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801b1ca:	f8b3 2838 	ldrh.w	r2, [r3, #2104]	; 0x838
 801b1ce:	f107 030c 	add.w	r3, r7, #12
 801b1d2:	3310      	adds	r3, #16
 801b1d4:	2103      	movs	r1, #3
 801b1d6:	4618      	mov	r0, r3
 801b1d8:	f7fa fd7d 	bl	8015cd6 <ai_logging_create_shape_2d>
            stream.packet.payload_size = 2 * stream.packet.shape.shapes[0] * stream.packet.shape.shapes[1];
 801b1dc:	8bfb      	ldrh	r3, [r7, #30]
 801b1de:	8c3a      	ldrh	r2, [r7, #32]
 801b1e0:	fb02 f303 	mul.w	r3, r2, r3
 801b1e4:	005b      	lsls	r3, r3, #1
 801b1e6:	61bb      	str	r3, [r7, #24]

            SensorEvent evt;
            SensorEventInit((IEvent*) &evt, p_obj->p_event_src, (ai_logging_packet_t*) &stream, timestamp, p_obj->acc_id);
 801b1e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801b1ea:	f8d3 183c 	ldr.w	r1, [r3, #2108]	; 0x83c
 801b1ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801b1f0:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 801b1f4:	b29b      	uxth	r3, r3
 801b1f6:	f107 040c 	add.w	r4, r7, #12
 801b1fa:	f107 0038 	add.w	r0, r7, #56	; 0x38
 801b1fe:	9302      	str	r3, [sp, #8]
 801b200:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 801b204:	e9cd 2300 	strd	r2, r3, [sp]
 801b208:	4622      	mov	r2, r4
 801b20a:	f7ff f90b 	bl	801a424 <SensorEventInit>
            IEventSrcSendEvent(p_obj->p_event_src, (IEvent*) &evt, NULL);
 801b20e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801b210:	f8d3 383c 	ldr.w	r3, [r3, #2108]	; 0x83c
 801b214:	f107 0138 	add.w	r1, r7, #56	; 0x38
 801b218:	2200      	movs	r2, #0
 801b21a:	4618      	mov	r0, r3
 801b21c:	f7ff f8e1 	bl	801a3e2 <IEventSrcSendEvent>

            /* update measuredODR */
            p_obj->acc_sensor_status.MeasuredODR = p_obj->samples_per_it / delta_timestamp;
 801b220:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801b222:	f8b3 3838 	ldrh.w	r3, [r3, #2104]	; 0x838
 801b226:	4618      	mov	r0, r3
 801b228:	f7e5 fab0 	bl	800078c <__aeabi_i2d>
 801b22c:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 801b230:	f7e5 fc40 	bl	8000ab4 <__aeabi_ddiv>
 801b234:	4602      	mov	r2, r0
 801b236:	460b      	mov	r3, r1
 801b238:	4610      	mov	r0, r2
 801b23a:	4619      	mov	r1, r3
 801b23c:	f7e5 fd22 	bl	8000c84 <__aeabi_d2f>
 801b240:	4602      	mov	r2, r0
 801b242:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801b244:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec

//          SYS_DEBUGF(SYS_DBG_LEVEL_VERBOSE, ("IIS3DWB: ts = %f\r\n", (float)timestamp));
            if(p_obj->pIRQConfig == NULL)
 801b248:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801b24a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 801b24e:	2b00      	cmp	r3, #0
 801b250:	f040 80a1 	bne.w	801b396 <IIS3DWBTaskExecuteStepDatalog+0x36a>
            {
              if (TX_SUCCESS != tx_timer_activate(&p_obj->read_timer))
 801b254:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801b256:	f503 6304 	add.w	r3, r3, #2112	; 0x840
 801b25a:	4618      	mov	r0, r3
 801b25c:	f7f8 f900 	bl	8013460 <_txe_timer_activate>
 801b260:	4603      	mov	r3, r0
 801b262:	2b00      	cmp	r3, #0
 801b264:	f000 8097 	beq.w	801b396 <IIS3DWBTaskExecuteStepDatalog+0x36a>
              {
                res = SYS_UNDEFINED_ERROR_CODE;
 801b268:	2302      	movs	r3, #2
 801b26a:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
              }
            }
          }
          break;
 801b26e:	e092      	b.n	801b396 <IIS3DWBTaskExecuteStepDatalog+0x36a>
        }
      case SM_MESSAGE_ID_SENSOR_CMD:
        {
          switch(report.sensorMessage.nCmdID)
 801b270:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 801b274:	3b01      	subs	r3, #1
 801b276:	2b04      	cmp	r3, #4
 801b278:	d877      	bhi.n	801b36a <IIS3DWBTaskExecuteStepDatalog+0x33e>
 801b27a:	a201      	add	r2, pc, #4	; (adr r2, 801b280 <IIS3DWBTaskExecuteStepDatalog+0x254>)
 801b27c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b280:	0801b295 	.word	0x0801b295
 801b284:	0801b2d7 	.word	0x0801b2d7
 801b288:	0801b2f9 	.word	0x0801b2f9
 801b28c:	0801b31b 	.word	0x0801b31b
 801b290:	0801b349 	.word	0x0801b349
          {
            case SENSOR_CMD_ID_INIT:
              res = IIS3DWBTaskSensorInit(p_obj);
 801b294:	6f78      	ldr	r0, [r7, #116]	; 0x74
 801b296:	f000 f911 	bl	801b4bc <IIS3DWBTaskSensorInit>
 801b29a:	4603      	mov	r3, r0
 801b29c:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
              if(!SYS_IS_ERROR_CODE(res))
 801b2a0:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 801b2a4:	2b00      	cmp	r3, #0
 801b2a6:	d169      	bne.n	801b37c <IIS3DWBTaskExecuteStepDatalog+0x350>
              {
                if(p_obj->pIRQConfig == NULL)
 801b2a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801b2aa:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 801b2ae:	2b00      	cmp	r3, #0
 801b2b0:	d10c      	bne.n	801b2cc <IIS3DWBTaskExecuteStepDatalog+0x2a0>
                {
                  if (TX_SUCCESS != tx_timer_activate(&p_obj->read_timer))
 801b2b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801b2b4:	f503 6304 	add.w	r3, r3, #2112	; 0x840
 801b2b8:	4618      	mov	r0, r3
 801b2ba:	f7f8 f8d1 	bl	8013460 <_txe_timer_activate>
 801b2be:	4603      	mov	r3, r0
 801b2c0:	2b00      	cmp	r3, #0
 801b2c2:	d05b      	beq.n	801b37c <IIS3DWBTaskExecuteStepDatalog+0x350>
                  {
                    res = SYS_UNDEFINED_ERROR_CODE;
 801b2c4:	2302      	movs	r3, #2
 801b2c6:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
                else
        	    {
        		  IIS3DWBTaskConfigureIrqPin(p_obj, FALSE);
        	    }
              }
              break;
 801b2ca:	e057      	b.n	801b37c <IIS3DWBTaskExecuteStepDatalog+0x350>
        		  IIS3DWBTaskConfigureIrqPin(p_obj, FALSE);
 801b2cc:	2100      	movs	r1, #0
 801b2ce:	6f78      	ldr	r0, [r7, #116]	; 0x74
 801b2d0:	f000 fc18 	bl	801bb04 <IIS3DWBTaskConfigureIrqPin>
              break;
 801b2d4:	e052      	b.n	801b37c <IIS3DWBTaskExecuteStepDatalog+0x350>
            case SENSOR_CMD_ID_SET_ODR:
              res = IIS3DWBTaskSensorSetODR(p_obj, report);
 801b2d6:	466a      	mov	r2, sp
 801b2d8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801b2dc:	e893 0003 	ldmia.w	r3, {r0, r1}
 801b2e0:	e882 0003 	stmia.w	r2, {r0, r1}
 801b2e4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801b2e8:	cb0c      	ldmia	r3, {r2, r3}
 801b2ea:	6f78      	ldr	r0, [r7, #116]	; 0x74
 801b2ec:	f000 faa4 	bl	801b838 <IIS3DWBTaskSensorSetODR>
 801b2f0:	4603      	mov	r3, r0
 801b2f2:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
              break;
 801b2f6:	e042      	b.n	801b37e <IIS3DWBTaskExecuteStepDatalog+0x352>
            case SENSOR_CMD_ID_SET_FS:
              res = IIS3DWBTaskSensorSetFS(p_obj, report);
 801b2f8:	466a      	mov	r2, sp
 801b2fa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801b2fe:	e893 0003 	ldmia.w	r3, {r0, r1}
 801b302:	e882 0003 	stmia.w	r2, {r0, r1}
 801b306:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801b30a:	cb0c      	ldmia	r3, {r2, r3}
 801b30c:	6f78      	ldr	r0, [r7, #116]	; 0x74
 801b30e:	f000 fadf 	bl	801b8d0 <IIS3DWBTaskSensorSetFS>
 801b312:	4603      	mov	r3, r0
 801b314:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
              break;
 801b318:	e031      	b.n	801b37e <IIS3DWBTaskExecuteStepDatalog+0x352>
            case SENSOR_CMD_ID_ENABLE:
              res = IIS3DWBTaskSensorEnable(p_obj, report);
 801b31a:	466a      	mov	r2, sp
 801b31c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801b320:	e893 0003 	ldmia.w	r3, {r0, r1}
 801b324:	e882 0003 	stmia.w	r2, {r0, r1}
 801b328:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801b32c:	cb0c      	ldmia	r3, {r2, r3}
 801b32e:	6f78      	ldr	r0, [r7, #116]	; 0x74
 801b330:	f000 fb50 	bl	801b9d4 <IIS3DWBTaskSensorEnable>
 801b334:	4603      	mov	r3, r0
 801b336:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
              break;
 801b33a:	e020      	b.n	801b37e <IIS3DWBTaskExecuteStepDatalog+0x352>
 801b33c:	08027324 	.word	0x08027324
 801b340:	20000044 	.word	0x20000044
 801b344:	00840800 	.word	0x00840800
            case SENSOR_CMD_ID_DISABLE:
              res = IIS3DWBTaskSensorDisable(p_obj, report);
 801b348:	466a      	mov	r2, sp
 801b34a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801b34e:	e893 0003 	ldmia.w	r3, {r0, r1}
 801b352:	e882 0003 	stmia.w	r2, {r0, r1}
 801b356:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801b35a:	cb0c      	ldmia	r3, {r2, r3}
 801b35c:	6f78      	ldr	r0, [r7, #116]	; 0x74
 801b35e:	f000 fb65 	bl	801ba2c <IIS3DWBTaskSensorDisable>
 801b362:	4603      	mov	r3, r0
 801b364:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
              break;
 801b368:	e009      	b.n	801b37e <IIS3DWBTaskExecuteStepDatalog+0x352>
            default:
              // unwanted report
              res = SYS_APP_TASK_UNKNOWN_REPORT_ERROR_CODE;
 801b36a:	f240 3322 	movw	r3, #802	; 0x322
 801b36e:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
              SYS_SET_SERVICE_LEVEL_ERROR_CODE(SYS_APP_TASK_UNKNOWN_REPORT_ERROR_CODE);
 801b372:	4b0d      	ldr	r3, [pc, #52]	; (801b3a8 <IIS3DWBTaskExecuteStepDatalog+0x37c>)
 801b374:	f240 3222 	movw	r2, #802	; 0x322
 801b378:	805a      	strh	r2, [r3, #2]

              SYS_DEBUGF(SYS_DBG_LEVEL_WARNING, ("IIS3DWB: unexpected report in Datalog: %i\r\n", report.messageID));
              break;
 801b37a:	e000      	b.n	801b37e <IIS3DWBTaskExecuteStepDatalog+0x352>
              break;
 801b37c:	bf00      	nop
          }
          break;
 801b37e:	e00b      	b.n	801b398 <IIS3DWBTaskExecuteStepDatalog+0x36c>
        }
      default:
        // unwanted report
        res = SYS_APP_TASK_UNKNOWN_REPORT_ERROR_CODE;
 801b380:	f240 3322 	movw	r3, #802	; 0x322
 801b384:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
        SYS_SET_SERVICE_LEVEL_ERROR_CODE(SYS_APP_TASK_UNKNOWN_REPORT_ERROR_CODE);
 801b388:	4b07      	ldr	r3, [pc, #28]	; (801b3a8 <IIS3DWBTaskExecuteStepDatalog+0x37c>)
 801b38a:	f240 3222 	movw	r2, #802	; 0x322
 801b38e:	805a      	strh	r2, [r3, #2]

        SYS_DEBUGF(SYS_DBG_LEVEL_WARNING, ("IIS3DWB: unexpected report in Datalog: %i\r\n", report.messageID));
        break;
 801b390:	e002      	b.n	801b398 <IIS3DWBTaskExecuteStepDatalog+0x36c>
    }
  }
 801b392:	bf00      	nop
 801b394:	e000      	b.n	801b398 <IIS3DWBTaskExecuteStepDatalog+0x36c>
          break;
 801b396:	bf00      	nop

  return res;
 801b398:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
}
 801b39c:	4618      	mov	r0, r3
 801b39e:	3780      	adds	r7, #128	; 0x80
 801b3a0:	46bd      	mov	sp, r7
 801b3a2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801b3a6:	bf00      	nop
 801b3a8:	20000700 	.word	0x20000700

0801b3ac <IIS3DWBTaskPostReportToFront>:

static inline sys_error_code_t IIS3DWBTaskPostReportToFront(IIS3DWBTask *_this, SMMessage *pReport)
{
 801b3ac:	b580      	push	{r7, lr}
 801b3ae:	b084      	sub	sp, #16
 801b3b0:	af00      	add	r7, sp, #0
 801b3b2:	6078      	str	r0, [r7, #4]
 801b3b4:	6039      	str	r1, [r7, #0]
  assert_param(_this);
 801b3b6:	687b      	ldr	r3, [r7, #4]
 801b3b8:	2b00      	cmp	r3, #0
 801b3ba:	d104      	bne.n	801b3c6 <IIS3DWBTaskPostReportToFront+0x1a>
 801b3bc:	f240 416b 	movw	r1, #1131	; 0x46b
 801b3c0:	481a      	ldr	r0, [pc, #104]	; (801b42c <IIS3DWBTaskPostReportToFront+0x80>)
 801b3c2:	f7f9 ff72 	bl	80152aa <assert_failed>
  assert_param(pReport);
 801b3c6:	683b      	ldr	r3, [r7, #0]
 801b3c8:	2b00      	cmp	r3, #0
 801b3ca:	d104      	bne.n	801b3d6 <IIS3DWBTaskPostReportToFront+0x2a>
 801b3cc:	f240 416c 	movw	r1, #1132	; 0x46c
 801b3d0:	4816      	ldr	r0, [pc, #88]	; (801b42c <IIS3DWBTaskPostReportToFront+0x80>)
 801b3d2:	f7f9 ff6a 	bl	80152aa <assert_failed>
  sys_error_code_t res = SYS_NO_ERROR_CODE;
 801b3d6:	2300      	movs	r3, #0
 801b3d8:	81fb      	strh	r3, [r7, #14]

  if(SYS_IS_CALLED_FROM_ISR())
 801b3da:	4b15      	ldr	r3, [pc, #84]	; (801b430 <IIS3DWBTaskPostReportToFront+0x84>)
 801b3dc:	685b      	ldr	r3, [r3, #4]
 801b3de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801b3e2:	2b00      	cmp	r3, #0
 801b3e4:	d00e      	beq.n	801b404 <IIS3DWBTaskPostReportToFront+0x58>
  {
    if(TX_SUCCESS != tx_queue_front_send(&_this->in_queue, pReport, TX_NO_WAIT))
 801b3e6:	687b      	ldr	r3, [r7, #4]
 801b3e8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801b3ec:	2200      	movs	r2, #0
 801b3ee:	6839      	ldr	r1, [r7, #0]
 801b3f0:	4618      	mov	r0, r3
 801b3f2:	f7f7 fca1 	bl	8012d38 <_txe_queue_front_send>
 801b3f6:	4603      	mov	r3, r0
 801b3f8:	2b00      	cmp	r3, #0
 801b3fa:	d011      	beq.n	801b420 <IIS3DWBTaskPostReportToFront+0x74>
    {
      res = SYS_APP_TASK_REPORT_LOST_ERROR_CODE;
 801b3fc:	f240 3323 	movw	r3, #803	; 0x323
 801b400:	81fb      	strh	r3, [r7, #14]
 801b402:	e00d      	b.n	801b420 <IIS3DWBTaskPostReportToFront+0x74>
      // this function is private and the caller will ignore this return code.
    }
  }
  else
  {
    if(TX_SUCCESS != tx_queue_front_send(&_this->in_queue, pReport, AMT_MS_TO_TICKS(100)))
 801b404:	687b      	ldr	r3, [r7, #4]
 801b406:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801b40a:	2264      	movs	r2, #100	; 0x64
 801b40c:	6839      	ldr	r1, [r7, #0]
 801b40e:	4618      	mov	r0, r3
 801b410:	f7f7 fc92 	bl	8012d38 <_txe_queue_front_send>
 801b414:	4603      	mov	r3, r0
 801b416:	2b00      	cmp	r3, #0
 801b418:	d002      	beq.n	801b420 <IIS3DWBTaskPostReportToFront+0x74>
    {
      res = SYS_APP_TASK_REPORT_LOST_ERROR_CODE;
 801b41a:	f240 3323 	movw	r3, #803	; 0x323
 801b41e:	81fb      	strh	r3, [r7, #14]
      // this function is private and the caller will ignore this return code.
    }
  }

  return res;
 801b420:	89fb      	ldrh	r3, [r7, #14]
}
 801b422:	4618      	mov	r0, r3
 801b424:	3710      	adds	r7, #16
 801b426:	46bd      	mov	sp, r7
 801b428:	bd80      	pop	{r7, pc}
 801b42a:	bf00      	nop
 801b42c:	08027324 	.word	0x08027324
 801b430:	e000ed00 	.word	0xe000ed00

0801b434 <IIS3DWBTaskPostReportToBack>:

static inline sys_error_code_t IIS3DWBTaskPostReportToBack(IIS3DWBTask *_this, SMMessage *pReport)
{
 801b434:	b580      	push	{r7, lr}
 801b436:	b084      	sub	sp, #16
 801b438:	af00      	add	r7, sp, #0
 801b43a:	6078      	str	r0, [r7, #4]
 801b43c:	6039      	str	r1, [r7, #0]
  assert_param(_this);
 801b43e:	687b      	ldr	r3, [r7, #4]
 801b440:	2b00      	cmp	r3, #0
 801b442:	d104      	bne.n	801b44e <IIS3DWBTaskPostReportToBack+0x1a>
 801b444:	f240 4185 	movw	r1, #1157	; 0x485
 801b448:	481a      	ldr	r0, [pc, #104]	; (801b4b4 <IIS3DWBTaskPostReportToBack+0x80>)
 801b44a:	f7f9 ff2e 	bl	80152aa <assert_failed>
  assert_param(pReport);
 801b44e:	683b      	ldr	r3, [r7, #0]
 801b450:	2b00      	cmp	r3, #0
 801b452:	d104      	bne.n	801b45e <IIS3DWBTaskPostReportToBack+0x2a>
 801b454:	f240 4186 	movw	r1, #1158	; 0x486
 801b458:	4816      	ldr	r0, [pc, #88]	; (801b4b4 <IIS3DWBTaskPostReportToBack+0x80>)
 801b45a:	f7f9 ff26 	bl	80152aa <assert_failed>
  sys_error_code_t res = SYS_NO_ERROR_CODE;
 801b45e:	2300      	movs	r3, #0
 801b460:	81fb      	strh	r3, [r7, #14]

  if(SYS_IS_CALLED_FROM_ISR())
 801b462:	4b15      	ldr	r3, [pc, #84]	; (801b4b8 <IIS3DWBTaskPostReportToBack+0x84>)
 801b464:	685b      	ldr	r3, [r3, #4]
 801b466:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801b46a:	2b00      	cmp	r3, #0
 801b46c:	d00e      	beq.n	801b48c <IIS3DWBTaskPostReportToBack+0x58>
  {
    if(TX_SUCCESS != tx_queue_send(&_this->in_queue, pReport, TX_NO_WAIT))
 801b46e:	687b      	ldr	r3, [r7, #4]
 801b470:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801b474:	2200      	movs	r2, #0
 801b476:	6839      	ldr	r1, [r7, #0]
 801b478:	4618      	mov	r0, r3
 801b47a:	f7f7 fd37 	bl	8012eec <_txe_queue_send>
 801b47e:	4603      	mov	r3, r0
 801b480:	2b00      	cmp	r3, #0
 801b482:	d011      	beq.n	801b4a8 <IIS3DWBTaskPostReportToBack+0x74>
    {
      res = SYS_APP_TASK_REPORT_LOST_ERROR_CODE;
 801b484:	f240 3323 	movw	r3, #803	; 0x323
 801b488:	81fb      	strh	r3, [r7, #14]
 801b48a:	e00d      	b.n	801b4a8 <IIS3DWBTaskPostReportToBack+0x74>
      // this function is private and the caller will ignore this return code.
    }
  }
  else
  {
    if(TX_SUCCESS != tx_queue_send(&_this->in_queue, pReport, AMT_MS_TO_TICKS(100)))
 801b48c:	687b      	ldr	r3, [r7, #4]
 801b48e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801b492:	2264      	movs	r2, #100	; 0x64
 801b494:	6839      	ldr	r1, [r7, #0]
 801b496:	4618      	mov	r0, r3
 801b498:	f7f7 fd28 	bl	8012eec <_txe_queue_send>
 801b49c:	4603      	mov	r3, r0
 801b49e:	2b00      	cmp	r3, #0
 801b4a0:	d002      	beq.n	801b4a8 <IIS3DWBTaskPostReportToBack+0x74>
    {
      res = SYS_APP_TASK_REPORT_LOST_ERROR_CODE;
 801b4a2:	f240 3323 	movw	r3, #803	; 0x323
 801b4a6:	81fb      	strh	r3, [r7, #14]
      // this function is private and the caller will ignore this return code.
    }
  }

  return res;
 801b4a8:	89fb      	ldrh	r3, [r7, #14]
}
 801b4aa:	4618      	mov	r0, r3
 801b4ac:	3710      	adds	r7, #16
 801b4ae:	46bd      	mov	sp, r7
 801b4b0:	bd80      	pop	{r7, pc}
 801b4b2:	bf00      	nop
 801b4b4:	08027324 	.word	0x08027324
 801b4b8:	e000ed00 	.word	0xe000ed00

0801b4bc <IIS3DWBTaskSensorInit>:

static sys_error_code_t IIS3DWBTaskSensorInit(IIS3DWBTask *_this)
{
 801b4bc:	b580      	push	{r7, lr}
 801b4be:	b086      	sub	sp, #24
 801b4c0:	af00      	add	r7, sp, #0
 801b4c2:	6078      	str	r0, [r7, #4]
  assert_param(_this);
 801b4c4:	687b      	ldr	r3, [r7, #4]
 801b4c6:	2b00      	cmp	r3, #0
 801b4c8:	d104      	bne.n	801b4d4 <IIS3DWBTaskSensorInit+0x18>
 801b4ca:	f240 419f 	movw	r1, #1183	; 0x49f
 801b4ce:	4865      	ldr	r0, [pc, #404]	; (801b664 <IIS3DWBTaskSensorInit+0x1a8>)
 801b4d0:	f7f9 feeb 	bl	80152aa <assert_failed>
  sys_error_code_t res = SYS_NO_ERROR_CODE;
 801b4d4:	2300      	movs	r3, #0
 801b4d6:	82bb      	strh	r3, [r7, #20]
  stmdev_ctx_t *p_sensor_drv = (stmdev_ctx_t*) &_this->p_sensor_bus_if->m_xConnector;
 801b4d8:	687b      	ldr	r3, [r7, #4]
 801b4da:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 801b4de:	613b      	str	r3, [r7, #16]

  uint8_t reg0 = 0;
 801b4e0:	2300      	movs	r3, #0
 801b4e2:	72fb      	strb	r3, [r7, #11]
  int32_t ret_val = 0;
 801b4e4:	2300      	movs	r3, #0
 801b4e6:	60fb      	str	r3, [r7, #12]
  uint16_t iis3dwb_wtm_level = 0;
 801b4e8:	2300      	movs	r3, #0
 801b4ea:	82fb      	strh	r3, [r7, #22]
  // if this variable need to persist then I move it in the managed task class declaration.
  iis3dwb_pin_int1_route_t pin_int1_route =
 801b4ec:	2300      	movs	r3, #0
 801b4ee:	813b      	strh	r3, [r7, #8]
  {
      0
  };

  // reset the sensor
  ret_val = iis3dwb_reset_set(p_sensor_drv, 1);
 801b4f0:	2101      	movs	r1, #1
 801b4f2:	6938      	ldr	r0, [r7, #16]
 801b4f4:	f7e5 fe59 	bl	80011aa <iis3dwb_reset_set>
 801b4f8:	60f8      	str	r0, [r7, #12]
  do
  {
    iis3dwb_reset_get(p_sensor_drv, &reg0);
 801b4fa:	f107 030b 	add.w	r3, r7, #11
 801b4fe:	4619      	mov	r1, r3
 801b500:	6938      	ldr	r0, [r7, #16]
 801b502:	f7e5 fe78 	bl	80011f6 <iis3dwb_reset_get>
  }
  while(reg0);
 801b506:	7afb      	ldrb	r3, [r7, #11]
 801b508:	2b00      	cmp	r3, #0
 801b50a:	d1f6      	bne.n	801b4fa <IIS3DWBTaskSensorInit+0x3e>

  ret_val = iis3dwb_device_id_get(p_sensor_drv, (uint8_t*) &reg0);
 801b50c:	f107 030b 	add.w	r3, r7, #11
 801b510:	4619      	mov	r1, r3
 801b512:	6938      	ldr	r0, [r7, #16]
 801b514:	f7e5 fe38 	bl	8001188 <iis3dwb_device_id_get>
 801b518:	60f8      	str	r0, [r7, #12]
  if(!ret_val)
 801b51a:	68fb      	ldr	r3, [r7, #12]
 801b51c:	2b00      	cmp	r3, #0
 801b51e:	d107      	bne.n	801b530 <IIS3DWBTaskSensorInit+0x74>
  {
    ABusIFSetWhoAmI(_this->p_sensor_bus_if, reg0);
 801b520:	687b      	ldr	r3, [r7, #4]
 801b522:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 801b526:	7afa      	ldrb	r2, [r7, #11]
 801b528:	4611      	mov	r1, r2
 801b52a:	4618      	mov	r0, r3
 801b52c:	f7fe fe28 	bl	801a180 <ABusIFSetWhoAmI>
  }
  SYS_DEBUGF(SYS_DBG_LEVEL_VERBOSE, ("IIS3DWB: sensor - I am 0x%x.\r\n", reg0));

  //TODO: STF - what is this?
  iis3dwb_read_reg(p_sensor_drv, IIS3DWB_CTRL1_XL, (uint8_t*) &reg0, 1);
 801b530:	f107 020b 	add.w	r2, r7, #11
 801b534:	2301      	movs	r3, #1
 801b536:	2110      	movs	r1, #16
 801b538:	6938      	ldr	r0, [r7, #16]
 801b53a:	f7e5 fd83 	bl	8001044 <iis3dwb_read_reg>
  reg0 |= 0xA0;
 801b53e:	7afb      	ldrb	r3, [r7, #11]
 801b540:	f063 035f 	orn	r3, r3, #95	; 0x5f
 801b544:	b2db      	uxtb	r3, r3
 801b546:	72fb      	strb	r3, [r7, #11]
  iis3dwb_write_reg(p_sensor_drv, IIS3DWB_CTRL1_XL, (uint8_t*) &reg0, 1);
 801b548:	f107 020b 	add.w	r2, r7, #11
 801b54c:	2301      	movs	r3, #1
 801b54e:	2110      	movs	r1, #16
 801b550:	6938      	ldr	r0, [r7, #16]
 801b552:	f7e5 fd8f 	bl	8001074 <iis3dwb_write_reg>

  /* Calculation of watermark and samples per int*/
  iis3dwb_wtm_level = ((uint16_t) _this->acc_sensor_status.ODR * (uint16_t) IIS3DWB_MAX_DRDY_PERIOD);
 801b556:	687b      	ldr	r3, [r7, #4]
 801b558:	edd3 7a3a 	vldr	s15, [r3, #232]	; 0xe8
 801b55c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801b560:	ee17 3a90 	vmov	r3, s15
 801b564:	82fb      	strh	r3, [r7, #22]
  if(iis3dwb_wtm_level > IIS3DWB_MAX_WTM_LEVEL)
 801b566:	8afb      	ldrh	r3, [r7, #22]
 801b568:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801b56c:	d903      	bls.n	801b576 <IIS3DWBTaskSensorInit+0xba>
  {
    iis3dwb_wtm_level = IIS3DWB_MAX_WTM_LEVEL;
 801b56e:	f44f 7380 	mov.w	r3, #256	; 0x100
 801b572:	82fb      	strh	r3, [r7, #22]
 801b574:	e004      	b.n	801b580 <IIS3DWBTaskSensorInit+0xc4>
  }
  else if(iis3dwb_wtm_level < IIS3DWB_MIN_WTM_LEVEL)
 801b576:	8afb      	ldrh	r3, [r7, #22]
 801b578:	2b0f      	cmp	r3, #15
 801b57a:	d801      	bhi.n	801b580 <IIS3DWBTaskSensorInit+0xc4>
  {
    iis3dwb_wtm_level = IIS3DWB_MIN_WTM_LEVEL;
 801b57c:	2310      	movs	r3, #16
 801b57e:	82fb      	strh	r3, [r7, #22]
  }

  _this->samples_per_it = iis3dwb_wtm_level;
 801b580:	687b      	ldr	r3, [r7, #4]
 801b582:	8afa      	ldrh	r2, [r7, #22]
 801b584:	f8a3 2838 	strh.w	r2, [r3, #2104]	; 0x838

  /*Disable the I2C interfacer and set fifo in continuous / stream mode*/
  iis3dwb_i2c_interface_set(p_sensor_drv, IIS3DWB_I2C_DISABLE);
 801b588:	2101      	movs	r1, #1
 801b58a:	6938      	ldr	r0, [r7, #16]
 801b58c:	f7e5 fea4 	bl	80012d8 <iis3dwb_i2c_interface_set>
  iis3dwb_fifo_mode_set(p_sensor_drv, IIS3DWB_STREAM_MODE);
 801b590:	2106      	movs	r1, #6
 801b592:	6938      	ldr	r0, [r7, #16]
 801b594:	f7e6 f844 	bl	8001620 <iis3dwb_fifo_mode_set>

  /*Set watermark*/
  iis3dwb_fifo_watermark_set(p_sensor_drv, iis3dwb_wtm_level);
 801b598:	8afb      	ldrh	r3, [r7, #22]
 801b59a:	4619      	mov	r1, r3
 801b59c:	6938      	ldr	r0, [r7, #16]
 801b59e:	f7e5 ffe3 	bl	8001568 <iis3dwb_fifo_watermark_set>
  /*Data Ready pulse mode*/
  iis3dwb_data_ready_mode_set(p_sensor_drv, IIS3DWB_DRDY_PULSED);
 801b5a2:	2101      	movs	r1, #1
 801b5a4:	6938      	ldr	r0, [r7, #16]
 801b5a6:	f7e5 fdc9 	bl	800113c <iis3dwb_data_ready_mode_set>

  /*Set full scale*/
  if(_this->acc_sensor_status.FS < 3.0f)
 801b5aa:	687b      	ldr	r3, [r7, #4]
 801b5ac:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 801b5b0:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 801b5b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 801b5b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b5bc:	d504      	bpl.n	801b5c8 <IIS3DWBTaskSensorInit+0x10c>
    iis3dwb_xl_full_scale_set(p_sensor_drv, IIS3DWB_2g);
 801b5be:	2100      	movs	r1, #0
 801b5c0:	6938      	ldr	r0, [r7, #16]
 801b5c2:	f7e5 fd6f 	bl	80010a4 <iis3dwb_xl_full_scale_set>
 801b5c6:	e021      	b.n	801b60c <IIS3DWBTaskSensorInit+0x150>
  else if(_this->acc_sensor_status.FS < 5.0f)
 801b5c8:	687b      	ldr	r3, [r7, #4]
 801b5ca:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 801b5ce:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 801b5d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 801b5d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b5da:	d504      	bpl.n	801b5e6 <IIS3DWBTaskSensorInit+0x12a>
    iis3dwb_xl_full_scale_set(p_sensor_drv, IIS3DWB_4g);
 801b5dc:	2102      	movs	r1, #2
 801b5de:	6938      	ldr	r0, [r7, #16]
 801b5e0:	f7e5 fd60 	bl	80010a4 <iis3dwb_xl_full_scale_set>
 801b5e4:	e012      	b.n	801b60c <IIS3DWBTaskSensorInit+0x150>
  else if(_this->acc_sensor_status.FS < 9.0f)
 801b5e6:	687b      	ldr	r3, [r7, #4]
 801b5e8:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 801b5ec:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 801b5f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 801b5f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b5f8:	d504      	bpl.n	801b604 <IIS3DWBTaskSensorInit+0x148>
    iis3dwb_xl_full_scale_set(p_sensor_drv, IIS3DWB_8g);
 801b5fa:	2103      	movs	r1, #3
 801b5fc:	6938      	ldr	r0, [r7, #16]
 801b5fe:	f7e5 fd51 	bl	80010a4 <iis3dwb_xl_full_scale_set>
 801b602:	e003      	b.n	801b60c <IIS3DWBTaskSensorInit+0x150>
  else
    iis3dwb_xl_full_scale_set(p_sensor_drv, IIS3DWB_16g);
 801b604:	2101      	movs	r1, #1
 801b606:	6938      	ldr	r0, [r7, #16]
 801b608:	f7e5 fd4c 	bl	80010a4 <iis3dwb_xl_full_scale_set>

  /*Set 2nd stage filter*/
  iis3dwb_xl_filt_path_on_out_set(p_sensor_drv, IIS3DWB_LP_6k3Hz);
 801b60c:	2100      	movs	r1, #0
 801b60e:	6938      	ldr	r0, [r7, #16]
 801b610:	f7e5 fe0a 	bl	8001228 <iis3dwb_xl_filt_path_on_out_set>
  /* FIFO_WTM_IA routing on pin INT1 */
  iis3dwb_pin_int1_route_get(p_sensor_drv, &pin_int1_route);
 801b614:	f107 0308 	add.w	r3, r7, #8
 801b618:	4619      	mov	r1, r3
 801b61a:	6938      	ldr	r0, [r7, #16]
 801b61c:	f7e5 ff23 	bl	8001466 <iis3dwb_pin_int1_route_get>
  *(uint8_t*) &(pin_int1_route) = 0;
 801b620:	f107 0308 	add.w	r3, r7, #8
 801b624:	2200      	movs	r2, #0
 801b626:	701a      	strb	r2, [r3, #0]
  if(_this->pIRQConfig != NULL)
 801b628:	687b      	ldr	r3, [r7, #4]
 801b62a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 801b62e:	2b00      	cmp	r3, #0
 801b630:	d004      	beq.n	801b63c <IIS3DWBTaskSensorInit+0x180>
  {
    pin_int1_route.fifo_th = PROPERTY_ENABLE;
 801b632:	7a3b      	ldrb	r3, [r7, #8]
 801b634:	f043 0304 	orr.w	r3, r3, #4
 801b638:	723b      	strb	r3, [r7, #8]
 801b63a:	e003      	b.n	801b644 <IIS3DWBTaskSensorInit+0x188>
  }
  else
  {
    pin_int1_route.fifo_th = PROPERTY_DISABLE;
 801b63c:	7a3b      	ldrb	r3, [r7, #8]
 801b63e:	f36f 0382 	bfc	r3, #2, #1
 801b642:	723b      	strb	r3, [r7, #8]
  }
  iis3dwb_pin_int1_route_set(p_sensor_drv, &pin_int1_route);
 801b644:	f107 0308 	add.w	r3, r7, #8
 801b648:	4619      	mov	r1, r3
 801b64a:	6938      	ldr	r0, [r7, #16]
 801b64c:	f7e5 fe6a 	bl	8001324 <iis3dwb_pin_int1_route_set>

  /*Enable writing to FIFO*/
  iis3dwb_fifo_xl_batch_set(p_sensor_drv, IIS3DWB_XL_BATCHED_AT_26k7Hz);
 801b650:	210a      	movs	r1, #10
 801b652:	6938      	ldr	r0, [r7, #16]
 801b654:	f7e5 ffbe 	bl	80015d4 <iis3dwb_fifo_xl_batch_set>

  return res;
 801b658:	8abb      	ldrh	r3, [r7, #20]
}
 801b65a:	4618      	mov	r0, r3
 801b65c:	3718      	adds	r7, #24
 801b65e:	46bd      	mov	sp, r7
 801b660:	bd80      	pop	{r7, pc}
 801b662:	bf00      	nop
 801b664:	08027324 	.word	0x08027324

0801b668 <IIS3DWBTaskSensorReadData>:

static sys_error_code_t IIS3DWBTaskSensorReadData(IIS3DWBTask *_this)
{
 801b668:	b580      	push	{r7, lr}
 801b66a:	b088      	sub	sp, #32
 801b66c:	af00      	add	r7, sp, #0
 801b66e:	6078      	str	r0, [r7, #4]
  assert_param(_this);
 801b670:	687b      	ldr	r3, [r7, #4]
 801b672:	2b00      	cmp	r3, #0
 801b674:	d104      	bne.n	801b680 <IIS3DWBTaskSensorReadData+0x18>
 801b676:	f240 41f7 	movw	r1, #1271	; 0x4f7
 801b67a:	4837      	ldr	r0, [pc, #220]	; (801b758 <IIS3DWBTaskSensorReadData+0xf0>)
 801b67c:	f7f9 fe15 	bl	80152aa <assert_failed>
  sys_error_code_t res = SYS_NO_ERROR_CODE;
 801b680:	2300      	movs	r3, #0
 801b682:	83fb      	strh	r3, [r7, #30]
  stmdev_ctx_t *p_sensor_drv = (stmdev_ctx_t*) &_this->p_sensor_bus_if->m_xConnector;
 801b684:	687b      	ldr	r3, [r7, #4]
 801b686:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 801b68a:	613b      	str	r3, [r7, #16]

  uint8_t reg[2];
  uint16_t fifo_level = 0;
 801b68c:	2300      	movs	r3, #0
 801b68e:	81fb      	strh	r3, [r7, #14]
  uint16_t i;

  /* Check FIFO_WTM_IA and fifo level. We do not use PID in order to avoid reading one register twice */
  iis3dwb_read_reg(p_sensor_drv, IIS3DWB_FIFO_STATUS1, reg, 2);
 801b690:	f107 020c 	add.w	r2, r7, #12
 801b694:	2302      	movs	r3, #2
 801b696:	213a      	movs	r1, #58	; 0x3a
 801b698:	6938      	ldr	r0, [r7, #16]
 801b69a:	f7e5 fcd3 	bl	8001044 <iis3dwb_read_reg>

  fifo_level = ((reg[1] & 0x03) << 8) + reg[0];
 801b69e:	7b7b      	ldrb	r3, [r7, #13]
 801b6a0:	021b      	lsls	r3, r3, #8
 801b6a2:	b29b      	uxth	r3, r3
 801b6a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801b6a8:	b29a      	uxth	r2, r3
 801b6aa:	7b3b      	ldrb	r3, [r7, #12]
 801b6ac:	b29b      	uxth	r3, r3
 801b6ae:	4413      	add	r3, r2
 801b6b0:	81fb      	strh	r3, [r7, #14]

  if((reg[1]) & 0x80 && (fifo_level >= _this->samples_per_it))
 801b6b2:	7b7b      	ldrb	r3, [r7, #13]
 801b6b4:	b25b      	sxtb	r3, r3
 801b6b6:	2b00      	cmp	r3, #0
 801b6b8:	da46      	bge.n	801b748 <IIS3DWBTaskSensorReadData+0xe0>
 801b6ba:	687b      	ldr	r3, [r7, #4]
 801b6bc:	f8b3 3838 	ldrh.w	r3, [r3, #2104]	; 0x838
 801b6c0:	89fa      	ldrh	r2, [r7, #14]
 801b6c2:	429a      	cmp	r2, r3
 801b6c4:	d340      	bcc.n	801b748 <IIS3DWBTaskSensorReadData+0xe0>
  {
    iis3dwb_read_reg(p_sensor_drv, IIS3DWB_FIFO_DATA_OUT_TAG, (uint8_t*) _this->p_sensor_data_buff, _this->samples_per_it * 7);
 801b6c6:	687b      	ldr	r3, [r7, #4]
 801b6c8:	f503 729c 	add.w	r2, r3, #312	; 0x138
 801b6cc:	687b      	ldr	r3, [r7, #4]
 801b6ce:	f8b3 3838 	ldrh.w	r3, [r3, #2104]	; 0x838
 801b6d2:	4619      	mov	r1, r3
 801b6d4:	00c9      	lsls	r1, r1, #3
 801b6d6:	1acb      	subs	r3, r1, r3
 801b6d8:	b29b      	uxth	r3, r3
 801b6da:	2178      	movs	r1, #120	; 0x78
 801b6dc:	6938      	ldr	r0, [r7, #16]
 801b6de:	f7e5 fcb1 	bl	8001044 <iis3dwb_read_reg>
      *p16++ = dummyDataCounter++;
      *p16++ = dummyDataCounter++;
    }
#else
    /* Arrange Data */
    int16_t *p16_src = (int16_t*) _this->p_sensor_data_buff;
 801b6e2:	687b      	ldr	r3, [r7, #4]
 801b6e4:	f503 739c 	add.w	r3, r3, #312	; 0x138
 801b6e8:	61bb      	str	r3, [r7, #24]
    int16_t *p16_dest = (int16_t*) _this->p_sensor_data_buff;
 801b6ea:	687b      	ldr	r3, [r7, #4]
 801b6ec:	f503 739c 	add.w	r3, r3, #312	; 0x138
 801b6f0:	617b      	str	r3, [r7, #20]
    for(i = 0; i < _this->samples_per_it; i++)
 801b6f2:	2300      	movs	r3, #0
 801b6f4:	83bb      	strh	r3, [r7, #28]
 801b6f6:	e020      	b.n	801b73a <IIS3DWBTaskSensorReadData+0xd2>
    {
      p16_src = (int16_t*) &((uint8_t*) (p16_src))[1];
 801b6f8:	69bb      	ldr	r3, [r7, #24]
 801b6fa:	3301      	adds	r3, #1
 801b6fc:	61bb      	str	r3, [r7, #24]
      *p16_dest++ = *p16_src++;
 801b6fe:	69ba      	ldr	r2, [r7, #24]
 801b700:	1c93      	adds	r3, r2, #2
 801b702:	61bb      	str	r3, [r7, #24]
 801b704:	697b      	ldr	r3, [r7, #20]
 801b706:	1c99      	adds	r1, r3, #2
 801b708:	6179      	str	r1, [r7, #20]
 801b70a:	f9b2 2000 	ldrsh.w	r2, [r2]
 801b70e:	801a      	strh	r2, [r3, #0]
      *p16_dest++ = *p16_src++;
 801b710:	69ba      	ldr	r2, [r7, #24]
 801b712:	1c93      	adds	r3, r2, #2
 801b714:	61bb      	str	r3, [r7, #24]
 801b716:	697b      	ldr	r3, [r7, #20]
 801b718:	1c99      	adds	r1, r3, #2
 801b71a:	6179      	str	r1, [r7, #20]
 801b71c:	f9b2 2000 	ldrsh.w	r2, [r2]
 801b720:	801a      	strh	r2, [r3, #0]
      *p16_dest++ = *p16_src++;
 801b722:	69ba      	ldr	r2, [r7, #24]
 801b724:	1c93      	adds	r3, r2, #2
 801b726:	61bb      	str	r3, [r7, #24]
 801b728:	697b      	ldr	r3, [r7, #20]
 801b72a:	1c99      	adds	r1, r3, #2
 801b72c:	6179      	str	r1, [r7, #20]
 801b72e:	f9b2 2000 	ldrsh.w	r2, [r2]
 801b732:	801a      	strh	r2, [r3, #0]
    for(i = 0; i < _this->samples_per_it; i++)
 801b734:	8bbb      	ldrh	r3, [r7, #28]
 801b736:	3301      	adds	r3, #1
 801b738:	83bb      	strh	r3, [r7, #28]
 801b73a:	687b      	ldr	r3, [r7, #4]
 801b73c:	f8b3 3838 	ldrh.w	r3, [r3, #2104]	; 0x838
 801b740:	8bba      	ldrh	r2, [r7, #28]
 801b742:	429a      	cmp	r2, r3
 801b744:	d3d8      	bcc.n	801b6f8 <IIS3DWBTaskSensorReadData+0x90>
  {
 801b746:	e001      	b.n	801b74c <IIS3DWBTaskSensorReadData+0xe4>
    }
#endif
  }
  else
  {
    res = SYS_BASE_ERROR_CODE;
 801b748:	2301      	movs	r3, #1
 801b74a:	83fb      	strh	r3, [r7, #30]
  }

  return res;
 801b74c:	8bfb      	ldrh	r3, [r7, #30]
}
 801b74e:	4618      	mov	r0, r3
 801b750:	3720      	adds	r7, #32
 801b752:	46bd      	mov	sp, r7
 801b754:	bd80      	pop	{r7, pc}
 801b756:	bf00      	nop
 801b758:	08027324 	.word	0x08027324

0801b75c <IIS3DWBTaskSensorRegister>:

static sys_error_code_t IIS3DWBTaskSensorRegister(IIS3DWBTask *_this)
{
 801b75c:	b580      	push	{r7, lr}
 801b75e:	b084      	sub	sp, #16
 801b760:	af00      	add	r7, sp, #0
 801b762:	6078      	str	r0, [r7, #4]
  assert_param(_this);
 801b764:	687b      	ldr	r3, [r7, #4]
 801b766:	2b00      	cmp	r3, #0
 801b768:	d104      	bne.n	801b774 <IIS3DWBTaskSensorRegister+0x18>
 801b76a:	f44f 61a5 	mov.w	r1, #1320	; 0x528
 801b76e:	480b      	ldr	r0, [pc, #44]	; (801b79c <IIS3DWBTaskSensorRegister+0x40>)
 801b770:	f7f9 fd9b 	bl	80152aa <assert_failed>
  sys_error_code_t res = SYS_NO_ERROR_CODE;
 801b774:	2300      	movs	r3, #0
 801b776:	81fb      	strh	r3, [r7, #14]

  ISensor_t *acc_if = (ISensor_t*) IIS3DWBTaskGetAccSensorIF(_this);
 801b778:	6878      	ldr	r0, [r7, #4]
 801b77a:	f7fe fe79 	bl	801a470 <IIS3DWBTaskGetAccSensorIF>
 801b77e:	60b8      	str	r0, [r7, #8]
  _this->acc_id = SMAddSensor(acc_if);
 801b780:	68b8      	ldr	r0, [r7, #8]
 801b782:	f004 fe33 	bl	80203ec <SMAddSensor>
 801b786:	4603      	mov	r3, r0
 801b788:	461a      	mov	r2, r3
 801b78a:	687b      	ldr	r3, [r7, #4]
 801b78c:	f883 20fc 	strb.w	r2, [r3, #252]	; 0xfc

  return res;
 801b790:	89fb      	ldrh	r3, [r7, #14]
}
 801b792:	4618      	mov	r0, r3
 801b794:	3710      	adds	r7, #16
 801b796:	46bd      	mov	sp, r7
 801b798:	bd80      	pop	{r7, pc}
 801b79a:	bf00      	nop
 801b79c:	08027324 	.word	0x08027324

0801b7a0 <IIS3DWBTaskSensorInitTaskParams>:

static sys_error_code_t IIS3DWBTaskSensorInitTaskParams(IIS3DWBTask *_this)
{
 801b7a0:	b580      	push	{r7, lr}
 801b7a2:	b084      	sub	sp, #16
 801b7a4:	af00      	add	r7, sp, #0
 801b7a6:	6078      	str	r0, [r7, #4]
  assert_param(_this);
 801b7a8:	687b      	ldr	r3, [r7, #4]
 801b7aa:	2b00      	cmp	r3, #0
 801b7ac:	d104      	bne.n	801b7b8 <IIS3DWBTaskSensorInitTaskParams+0x18>
 801b7ae:	f240 5133 	movw	r1, #1331	; 0x533
 801b7b2:	481e      	ldr	r0, [pc, #120]	; (801b82c <IIS3DWBTaskSensorInitTaskParams+0x8c>)
 801b7b4:	f7f9 fd79 	bl	80152aa <assert_failed>
  sys_error_code_t res = SYS_NO_ERROR_CODE;
 801b7b8:	2300      	movs	r3, #0
 801b7ba:	81fb      	strh	r3, [r7, #14]

  /* ACCELEROMETER SENSOR STATUS */
  _this->acc_sensor_status.DataType = DATA_TYPE_INT16;
 801b7bc:	687b      	ldr	r3, [r7, #4]
 801b7be:	2203      	movs	r2, #3
 801b7c0:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
  _this->acc_sensor_status.Dimensions = 3;
 801b7c4:	687b      	ldr	r3, [r7, #4]
 801b7c6:	2203      	movs	r2, #3
 801b7c8:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa
  _this->acc_sensor_status.IsActive = TRUE;
 801b7cc:	687b      	ldr	r3, [r7, #4]
 801b7ce:	2201      	movs	r2, #1
 801b7d0:	f883 20e4 	strb.w	r2, [r3, #228]	; 0xe4
  _this->acc_sensor_status.FS = 16.0f;
 801b7d4:	687b      	ldr	r3, [r7, #4]
 801b7d6:	f04f 4283 	mov.w	r2, #1098907648	; 0x41800000
 801b7da:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
  _this->acc_sensor_status.Sensitivity = 0.0000305f * _this->acc_sensor_status.FS;
 801b7de:	687b      	ldr	r3, [r7, #4]
 801b7e0:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 801b7e4:	ed9f 7a12 	vldr	s14, [pc, #72]	; 801b830 <IIS3DWBTaskSensorInitTaskParams+0x90>
 801b7e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 801b7ec:	687b      	ldr	r3, [r7, #4]
 801b7ee:	edc3 7a38 	vstr	s15, [r3, #224]	; 0xe0
  _this->acc_sensor_status.ODR = 26667.0f;
 801b7f2:	687b      	ldr	r3, [r7, #4]
 801b7f4:	4a0f      	ldr	r2, [pc, #60]	; (801b834 <IIS3DWBTaskSensorInitTaskParams+0x94>)
 801b7f6:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
  _this->acc_sensor_status.MeasuredODR = 0.0f;
 801b7fa:	687b      	ldr	r3, [r7, #4]
 801b7fc:	f04f 0200 	mov.w	r2, #0
 801b800:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
  _this->acc_sensor_status.InitialOffset = 0.0f;
 801b804:	687b      	ldr	r3, [r7, #4]
 801b806:	f04f 0200 	mov.w	r2, #0
 801b80a:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
  _this->acc_sensor_status.DataPacketSize = 3000;
 801b80e:	687b      	ldr	r3, [r7, #4]
 801b810:	f640 32b8 	movw	r2, #3000	; 0xbb8
 801b814:	f8a3 20f6 	strh.w	r2, [r3, #246]	; 0xf6
#if (HSD_USE_DUMMY_DATA == 1)
  _this->acc_sensor_status.SamplesPerTimestamp = 0;
#else
  _this->acc_sensor_status.SamplesPerTimestamp = 1000;
 801b818:	687b      	ldr	r3, [r7, #4]
 801b81a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801b81e:	f8a3 20f4 	strh.w	r2, [r3, #244]	; 0xf4
#endif

  return res;
 801b822:	89fb      	ldrh	r3, [r7, #14]
}
 801b824:	4618      	mov	r0, r3
 801b826:	3710      	adds	r7, #16
 801b828:	46bd      	mov	sp, r7
 801b82a:	bd80      	pop	{r7, pc}
 801b82c:	08027324 	.word	0x08027324
 801b830:	37ffda40 	.word	0x37ffda40
 801b834:	46d05600 	.word	0x46d05600

0801b838 <IIS3DWBTaskSensorSetODR>:

static sys_error_code_t IIS3DWBTaskSensorSetODR(IIS3DWBTask *_this, SMMessage report)
{
 801b838:	b082      	sub	sp, #8
 801b83a:	b580      	push	{r7, lr}
 801b83c:	b086      	sub	sp, #24
 801b83e:	af00      	add	r7, sp, #0
 801b840:	6078      	str	r0, [r7, #4]
 801b842:	f107 0120 	add.w	r1, r7, #32
 801b846:	e881 000c 	stmia.w	r1, {r2, r3}
  assert_param(_this);
 801b84a:	687b      	ldr	r3, [r7, #4]
 801b84c:	2b00      	cmp	r3, #0
 801b84e:	d104      	bne.n	801b85a <IIS3DWBTaskSensorSetODR+0x22>
 801b850:	f240 514b 	movw	r1, #1355	; 0x54b
 801b854:	481b      	ldr	r0, [pc, #108]	; (801b8c4 <IIS3DWBTaskSensorSetODR+0x8c>)
 801b856:	f7f9 fd28 	bl	80152aa <assert_failed>
  sys_error_code_t res = SYS_NO_ERROR_CODE;
 801b85a:	2300      	movs	r3, #0
 801b85c:	82fb      	strh	r3, [r7, #22]

  float ODR = (float) report.sensorMessage.nParam;
 801b85e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b860:	ee07 3a90 	vmov	s15, r3
 801b864:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801b868:	edc7 7a04 	vstr	s15, [r7, #16]
  uint8_t id = report.sensorMessage.nSensorId;
 801b86c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 801b870:	73fb      	strb	r3, [r7, #15]

  if(id == _this->acc_id)
 801b872:	687b      	ldr	r3, [r7, #4]
 801b874:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 801b878:	7bfa      	ldrb	r2, [r7, #15]
 801b87a:	429a      	cmp	r2, r3
 801b87c:	d117      	bne.n	801b8ae <IIS3DWBTaskSensorSetODR+0x76>
  {
    if(ODR != 26667.0f)
 801b87e:	edd7 7a04 	vldr	s15, [r7, #16]
 801b882:	ed9f 7a11 	vldr	s14, [pc, #68]	; 801b8c8 <IIS3DWBTaskSensorSetODR+0x90>
 801b886:	eef4 7a47 	vcmp.f32	s15, s14
 801b88a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b88e:	d001      	beq.n	801b894 <IIS3DWBTaskSensorSetODR+0x5c>
      ODR = 26667.0f;
 801b890:	4b0e      	ldr	r3, [pc, #56]	; (801b8cc <IIS3DWBTaskSensorSetODR+0x94>)
 801b892:	613b      	str	r3, [r7, #16]

    if(!SYS_IS_ERROR_CODE(res))
 801b894:	8afb      	ldrh	r3, [r7, #22]
 801b896:	2b00      	cmp	r3, #0
 801b898:	d10b      	bne.n	801b8b2 <IIS3DWBTaskSensorSetODR+0x7a>
    {
      _this->acc_sensor_status.ODR = ODR;
 801b89a:	687b      	ldr	r3, [r7, #4]
 801b89c:	693a      	ldr	r2, [r7, #16]
 801b89e:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
      _this->acc_sensor_status.MeasuredODR = 0.0f;
 801b8a2:	687b      	ldr	r3, [r7, #4]
 801b8a4:	f04f 0200 	mov.w	r2, #0
 801b8a8:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
 801b8ac:	e001      	b.n	801b8b2 <IIS3DWBTaskSensorSetODR+0x7a>
    }
  }
  else
  {
    res = SYS_INVALID_PARAMETER_ERROR_CODE;
 801b8ae:	2304      	movs	r3, #4
 801b8b0:	82fb      	strh	r3, [r7, #22]
  }

  return res;
 801b8b2:	8afb      	ldrh	r3, [r7, #22]
}
 801b8b4:	4618      	mov	r0, r3
 801b8b6:	3718      	adds	r7, #24
 801b8b8:	46bd      	mov	sp, r7
 801b8ba:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801b8be:	b002      	add	sp, #8
 801b8c0:	4770      	bx	lr
 801b8c2:	bf00      	nop
 801b8c4:	08027324 	.word	0x08027324
 801b8c8:	46d05600 	.word	0x46d05600
 801b8cc:	46d05600 	.word	0x46d05600

0801b8d0 <IIS3DWBTaskSensorSetFS>:

static sys_error_code_t IIS3DWBTaskSensorSetFS(IIS3DWBTask *_this, SMMessage report)
{
 801b8d0:	b082      	sub	sp, #8
 801b8d2:	b580      	push	{r7, lr}
 801b8d4:	b086      	sub	sp, #24
 801b8d6:	af00      	add	r7, sp, #0
 801b8d8:	6078      	str	r0, [r7, #4]
 801b8da:	f107 0120 	add.w	r1, r7, #32
 801b8de:	e881 000c 	stmia.w	r1, {r2, r3}
  assert_param(_this);
 801b8e2:	687b      	ldr	r3, [r7, #4]
 801b8e4:	2b00      	cmp	r3, #0
 801b8e6:	d104      	bne.n	801b8f2 <IIS3DWBTaskSensorSetFS+0x22>
 801b8e8:	f240 5166 	movw	r1, #1382	; 0x566
 801b8ec:	4837      	ldr	r0, [pc, #220]	; (801b9cc <IIS3DWBTaskSensorSetFS+0xfc>)
 801b8ee:	f7f9 fcdc 	bl	80152aa <assert_failed>
  sys_error_code_t res = SYS_NO_ERROR_CODE;
 801b8f2:	2300      	movs	r3, #0
 801b8f4:	82fb      	strh	r3, [r7, #22]

  stmdev_ctx_t *p_sensor_drv = (stmdev_ctx_t*) &_this->p_sensor_bus_if->m_xConnector;
 801b8f6:	687b      	ldr	r3, [r7, #4]
 801b8f8:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 801b8fc:	60fb      	str	r3, [r7, #12]
  float FS = (float) report.sensorMessage.nParam;
 801b8fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b900:	ee07 3a90 	vmov	s15, r3
 801b904:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801b908:	edc7 7a04 	vstr	s15, [r7, #16]
  uint8_t id = report.sensorMessage.nSensorId;
 801b90c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 801b910:	72fb      	strb	r3, [r7, #11]

  if(id == _this->acc_id)
 801b912:	687b      	ldr	r3, [r7, #4]
 801b914:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 801b918:	7afa      	ldrb	r2, [r7, #11]
 801b91a:	429a      	cmp	r2, r3
 801b91c:	d14b      	bne.n	801b9b6 <IIS3DWBTaskSensorSetFS+0xe6>
  {
    if(FS < 3.0f)
 801b91e:	edd7 7a04 	vldr	s15, [r7, #16]
 801b922:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 801b926:	eef4 7ac7 	vcmpe.f32	s15, s14
 801b92a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b92e:	d507      	bpl.n	801b940 <IIS3DWBTaskSensorSetFS+0x70>
    {
      iis3dwb_xl_full_scale_set(p_sensor_drv, IIS3DWB_2g);
 801b930:	2100      	movs	r1, #0
 801b932:	68f8      	ldr	r0, [r7, #12]
 801b934:	f7e5 fbb6 	bl	80010a4 <iis3dwb_xl_full_scale_set>
      FS = 2.0f;
 801b938:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801b93c:	613b      	str	r3, [r7, #16]
 801b93e:	e028      	b.n	801b992 <IIS3DWBTaskSensorSetFS+0xc2>
    }
    else if(FS < 5.0f)
 801b940:	edd7 7a04 	vldr	s15, [r7, #16]
 801b944:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 801b948:	eef4 7ac7 	vcmpe.f32	s15, s14
 801b94c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b950:	d507      	bpl.n	801b962 <IIS3DWBTaskSensorSetFS+0x92>
    {
      iis3dwb_xl_full_scale_set(p_sensor_drv, IIS3DWB_4g);
 801b952:	2102      	movs	r1, #2
 801b954:	68f8      	ldr	r0, [r7, #12]
 801b956:	f7e5 fba5 	bl	80010a4 <iis3dwb_xl_full_scale_set>
      FS = 4.0f;
 801b95a:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
 801b95e:	613b      	str	r3, [r7, #16]
 801b960:	e017      	b.n	801b992 <IIS3DWBTaskSensorSetFS+0xc2>
    }
    else if(FS < 9.0f)
 801b962:	edd7 7a04 	vldr	s15, [r7, #16]
 801b966:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 801b96a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801b96e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b972:	d507      	bpl.n	801b984 <IIS3DWBTaskSensorSetFS+0xb4>
    {
      iis3dwb_xl_full_scale_set(p_sensor_drv, IIS3DWB_8g);
 801b974:	2103      	movs	r1, #3
 801b976:	68f8      	ldr	r0, [r7, #12]
 801b978:	f7e5 fb94 	bl	80010a4 <iis3dwb_xl_full_scale_set>
      FS = 8.0f;
 801b97c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 801b980:	613b      	str	r3, [r7, #16]
 801b982:	e006      	b.n	801b992 <IIS3DWBTaskSensorSetFS+0xc2>
    }
    else
    {
      iis3dwb_xl_full_scale_set(p_sensor_drv, IIS3DWB_16g);
 801b984:	2101      	movs	r1, #1
 801b986:	68f8      	ldr	r0, [r7, #12]
 801b988:	f7e5 fb8c 	bl	80010a4 <iis3dwb_xl_full_scale_set>
      FS = 16.0f;
 801b98c:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 801b990:	613b      	str	r3, [r7, #16]
    }

    if(!SYS_IS_ERROR_CODE(res))
 801b992:	8afb      	ldrh	r3, [r7, #22]
 801b994:	2b00      	cmp	r3, #0
 801b996:	d110      	bne.n	801b9ba <IIS3DWBTaskSensorSetFS+0xea>
    {
      _this->acc_sensor_status.FS = FS;
 801b998:	687b      	ldr	r3, [r7, #4]
 801b99a:	693a      	ldr	r2, [r7, #16]
 801b99c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
      _this->acc_sensor_status.Sensitivity = 0.0000305f * _this->acc_sensor_status.FS;
 801b9a0:	687b      	ldr	r3, [r7, #4]
 801b9a2:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 801b9a6:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 801b9d0 <IIS3DWBTaskSensorSetFS+0x100>
 801b9aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 801b9ae:	687b      	ldr	r3, [r7, #4]
 801b9b0:	edc3 7a38 	vstr	s15, [r3, #224]	; 0xe0
 801b9b4:	e001      	b.n	801b9ba <IIS3DWBTaskSensorSetFS+0xea>
    }
  }
  else
  {
    res = SYS_INVALID_PARAMETER_ERROR_CODE;
 801b9b6:	2304      	movs	r3, #4
 801b9b8:	82fb      	strh	r3, [r7, #22]
  }

  return res;
 801b9ba:	8afb      	ldrh	r3, [r7, #22]
}
 801b9bc:	4618      	mov	r0, r3
 801b9be:	3718      	adds	r7, #24
 801b9c0:	46bd      	mov	sp, r7
 801b9c2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801b9c6:	b002      	add	sp, #8
 801b9c8:	4770      	bx	lr
 801b9ca:	bf00      	nop
 801b9cc:	08027324 	.word	0x08027324
 801b9d0:	37ffda40 	.word	0x37ffda40

0801b9d4 <IIS3DWBTaskSensorEnable>:

static sys_error_code_t IIS3DWBTaskSensorEnable(IIS3DWBTask *_this, SMMessage report)
{
 801b9d4:	b082      	sub	sp, #8
 801b9d6:	b580      	push	{r7, lr}
 801b9d8:	b084      	sub	sp, #16
 801b9da:	af00      	add	r7, sp, #0
 801b9dc:	6078      	str	r0, [r7, #4]
 801b9de:	f107 0118 	add.w	r1, r7, #24
 801b9e2:	e881 000c 	stmia.w	r1, {r2, r3}
  assert_param(_this);
 801b9e6:	687b      	ldr	r3, [r7, #4]
 801b9e8:	2b00      	cmp	r3, #0
 801b9ea:	d104      	bne.n	801b9f6 <IIS3DWBTaskSensorEnable+0x22>
 801b9ec:	f240 5194 	movw	r1, #1428	; 0x594
 801b9f0:	480d      	ldr	r0, [pc, #52]	; (801ba28 <IIS3DWBTaskSensorEnable+0x54>)
 801b9f2:	f7f9 fc5a 	bl	80152aa <assert_failed>
  sys_error_code_t res = SYS_NO_ERROR_CODE;
 801b9f6:	2300      	movs	r3, #0
 801b9f8:	81fb      	strh	r3, [r7, #14]

  uint8_t id = report.sensorMessage.nSensorId;
 801b9fa:	7e7b      	ldrb	r3, [r7, #25]
 801b9fc:	737b      	strb	r3, [r7, #13]

  if(id == _this->acc_id)
 801b9fe:	687b      	ldr	r3, [r7, #4]
 801ba00:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 801ba04:	7b7a      	ldrb	r2, [r7, #13]
 801ba06:	429a      	cmp	r2, r3
 801ba08:	d104      	bne.n	801ba14 <IIS3DWBTaskSensorEnable+0x40>
    _this->acc_sensor_status.IsActive = TRUE;
 801ba0a:	687b      	ldr	r3, [r7, #4]
 801ba0c:	2201      	movs	r2, #1
 801ba0e:	f883 20e4 	strb.w	r2, [r3, #228]	; 0xe4
 801ba12:	e001      	b.n	801ba18 <IIS3DWBTaskSensorEnable+0x44>
  else
    res = SYS_INVALID_PARAMETER_ERROR_CODE;
 801ba14:	2304      	movs	r3, #4
 801ba16:	81fb      	strh	r3, [r7, #14]

  return res;
 801ba18:	89fb      	ldrh	r3, [r7, #14]
}
 801ba1a:	4618      	mov	r0, r3
 801ba1c:	3710      	adds	r7, #16
 801ba1e:	46bd      	mov	sp, r7
 801ba20:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801ba24:	b002      	add	sp, #8
 801ba26:	4770      	bx	lr
 801ba28:	08027324 	.word	0x08027324

0801ba2c <IIS3DWBTaskSensorDisable>:

static sys_error_code_t IIS3DWBTaskSensorDisable(IIS3DWBTask *_this, SMMessage report)
{
 801ba2c:	b082      	sub	sp, #8
 801ba2e:	b580      	push	{r7, lr}
 801ba30:	b084      	sub	sp, #16
 801ba32:	af00      	add	r7, sp, #0
 801ba34:	6078      	str	r0, [r7, #4]
 801ba36:	f107 0118 	add.w	r1, r7, #24
 801ba3a:	e881 000c 	stmia.w	r1, {r2, r3}
  assert_param(_this);
 801ba3e:	687b      	ldr	r3, [r7, #4]
 801ba40:	2b00      	cmp	r3, #0
 801ba42:	d104      	bne.n	801ba4e <IIS3DWBTaskSensorDisable+0x22>
 801ba44:	f240 51a3 	movw	r1, #1443	; 0x5a3
 801ba48:	480d      	ldr	r0, [pc, #52]	; (801ba80 <IIS3DWBTaskSensorDisable+0x54>)
 801ba4a:	f7f9 fc2e 	bl	80152aa <assert_failed>
  sys_error_code_t res = SYS_NO_ERROR_CODE;
 801ba4e:	2300      	movs	r3, #0
 801ba50:	81fb      	strh	r3, [r7, #14]

  uint8_t id = report.sensorMessage.nSensorId;
 801ba52:	7e7b      	ldrb	r3, [r7, #25]
 801ba54:	737b      	strb	r3, [r7, #13]

  if(id == _this->acc_id)
 801ba56:	687b      	ldr	r3, [r7, #4]
 801ba58:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 801ba5c:	7b7a      	ldrb	r2, [r7, #13]
 801ba5e:	429a      	cmp	r2, r3
 801ba60:	d104      	bne.n	801ba6c <IIS3DWBTaskSensorDisable+0x40>
    _this->acc_sensor_status.IsActive = FALSE;
 801ba62:	687b      	ldr	r3, [r7, #4]
 801ba64:	2200      	movs	r2, #0
 801ba66:	f883 20e4 	strb.w	r2, [r3, #228]	; 0xe4
 801ba6a:	e001      	b.n	801ba70 <IIS3DWBTaskSensorDisable+0x44>
  else
    res = SYS_INVALID_PARAMETER_ERROR_CODE;
 801ba6c:	2304      	movs	r3, #4
 801ba6e:	81fb      	strh	r3, [r7, #14]

  return res;
 801ba70:	89fb      	ldrh	r3, [r7, #14]
}
 801ba72:	4618      	mov	r0, r3
 801ba74:	3710      	adds	r7, #16
 801ba76:	46bd      	mov	sp, r7
 801ba78:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801ba7c:	b002      	add	sp, #8
 801ba7e:	4770      	bx	lr
 801ba80:	08027324 	.word	0x08027324

0801ba84 <IIS3DWBTaskSensorIsActive>:

static boolean_t IIS3DWBTaskSensorIsActive(const IIS3DWBTask *_this)
{
 801ba84:	b580      	push	{r7, lr}
 801ba86:	b082      	sub	sp, #8
 801ba88:	af00      	add	r7, sp, #0
 801ba8a:	6078      	str	r0, [r7, #4]
  assert_param(_this);
 801ba8c:	687b      	ldr	r3, [r7, #4]
 801ba8e:	2b00      	cmp	r3, #0
 801ba90:	d104      	bne.n	801ba9c <IIS3DWBTaskSensorIsActive+0x18>
 801ba92:	f240 51b2 	movw	r1, #1458	; 0x5b2
 801ba96:	4805      	ldr	r0, [pc, #20]	; (801baac <IIS3DWBTaskSensorIsActive+0x28>)
 801ba98:	f7f9 fc07 	bl	80152aa <assert_failed>
  return _this->acc_sensor_status.IsActive;
 801ba9c:	687b      	ldr	r3, [r7, #4]
 801ba9e:	f893 30e4 	ldrb.w	r3, [r3, #228]	; 0xe4
}
 801baa2:	4618      	mov	r0, r3
 801baa4:	3708      	adds	r7, #8
 801baa6:	46bd      	mov	sp, r7
 801baa8:	bd80      	pop	{r7, pc}
 801baaa:	bf00      	nop
 801baac:	08027324 	.word	0x08027324

0801bab0 <IIS3DWBTaskEnterLowPowerMode>:

static sys_error_code_t IIS3DWBTaskEnterLowPowerMode(const IIS3DWBTask *_this)
{
 801bab0:	b580      	push	{r7, lr}
 801bab2:	b084      	sub	sp, #16
 801bab4:	af00      	add	r7, sp, #0
 801bab6:	6078      	str	r0, [r7, #4]
  assert_param(_this);
 801bab8:	687b      	ldr	r3, [r7, #4]
 801baba:	2b00      	cmp	r3, #0
 801babc:	d104      	bne.n	801bac8 <IIS3DWBTaskEnterLowPowerMode+0x18>
 801babe:	f44f 61b7 	mov.w	r1, #1464	; 0x5b8
 801bac2:	480e      	ldr	r0, [pc, #56]	; (801bafc <IIS3DWBTaskEnterLowPowerMode+0x4c>)
 801bac4:	f7f9 fbf1 	bl	80152aa <assert_failed>
  sys_error_code_t res = SYS_NO_ERROR_CODE;
 801bac8:	2300      	movs	r3, #0
 801baca:	81fb      	strh	r3, [r7, #14]
  stmdev_ctx_t *p_sensor_drv = (stmdev_ctx_t*) &_this->p_sensor_bus_if->m_xConnector;
 801bacc:	687b      	ldr	r3, [r7, #4]
 801bace:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 801bad2:	60bb      	str	r3, [r7, #8]

  if(iis3dwb_xl_data_rate_set(p_sensor_drv, IIS3DWB_XL_ODR_OFF))
 801bad4:	2100      	movs	r1, #0
 801bad6:	68b8      	ldr	r0, [r7, #8]
 801bad8:	f7e5 fb0a 	bl	80010f0 <iis3dwb_xl_data_rate_set>
 801badc:	4603      	mov	r3, r0
 801bade:	2b00      	cmp	r3, #0
 801bae0:	d006      	beq.n	801baf0 <IIS3DWBTaskEnterLowPowerMode+0x40>
  {
    res = SYS_SENSOR_TASK_OP_ERROR_CODE;
 801bae2:	f240 73d2 	movw	r3, #2002	; 0x7d2
 801bae6:	81fb      	strh	r3, [r7, #14]
    SYS_SET_SERVICE_LEVEL_ERROR_CODE(SYS_SENSOR_TASK_OP_ERROR_CODE);
 801bae8:	4b05      	ldr	r3, [pc, #20]	; (801bb00 <IIS3DWBTaskEnterLowPowerMode+0x50>)
 801baea:	f240 72d2 	movw	r2, #2002	; 0x7d2
 801baee:	805a      	strh	r2, [r3, #2]
  }

  return res;
 801baf0:	89fb      	ldrh	r3, [r7, #14]
}
 801baf2:	4618      	mov	r0, r3
 801baf4:	3710      	adds	r7, #16
 801baf6:	46bd      	mov	sp, r7
 801baf8:	bd80      	pop	{r7, pc}
 801bafa:	bf00      	nop
 801bafc:	08027324 	.word	0x08027324
 801bb00:	20000700 	.word	0x20000700

0801bb04 <IIS3DWBTaskConfigureIrqPin>:

static sys_error_code_t IIS3DWBTaskConfigureIrqPin(const IIS3DWBTask *_this, boolean_t LowPower)
{
 801bb04:	b580      	push	{r7, lr}
 801bb06:	b088      	sub	sp, #32
 801bb08:	af00      	add	r7, sp, #0
 801bb0a:	6078      	str	r0, [r7, #4]
 801bb0c:	460b      	mov	r3, r1
 801bb0e:	70fb      	strb	r3, [r7, #3]
  assert_param(_this != NULL);
 801bb10:	687b      	ldr	r3, [r7, #4]
 801bb12:	2b00      	cmp	r3, #0
 801bb14:	d104      	bne.n	801bb20 <IIS3DWBTaskConfigureIrqPin+0x1c>
 801bb16:	f240 51c7 	movw	r1, #1479	; 0x5c7
 801bb1a:	4820      	ldr	r0, [pc, #128]	; (801bb9c <IIS3DWBTaskConfigureIrqPin+0x98>)
 801bb1c:	f7f9 fbc5 	bl	80152aa <assert_failed>
  sys_error_code_t res = SYS_NO_ERROR_CODE;
 801bb20:	2300      	movs	r3, #0
 801bb22:	83fb      	strh	r3, [r7, #30]

  if (!LowPower)
 801bb24:	78fb      	ldrb	r3, [r7, #3]
 801bb26:	f083 0301 	eor.w	r3, r3, #1
 801bb2a:	b2db      	uxtb	r3, r3
 801bb2c:	2b00      	cmp	r3, #0
 801bb2e:	d005      	beq.n	801bb3c <IIS3DWBTaskConfigureIrqPin+0x38>
  {
    /* Configure INT Pin */
    _this->pIRQConfig->p_mx_init_f();
 801bb30:	687b      	ldr	r3, [r7, #4]
 801bb32:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 801bb36:	681b      	ldr	r3, [r3, #0]
 801bb38:	4798      	blx	r3
 801bb3a:	e02a      	b.n	801bb92 <IIS3DWBTaskConfigureIrqPin+0x8e>
  }
  else
  {
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 801bb3c:	f107 0308 	add.w	r3, r7, #8
 801bb40:	2200      	movs	r2, #0
 801bb42:	601a      	str	r2, [r3, #0]
 801bb44:	605a      	str	r2, [r3, #4]
 801bb46:	609a      	str	r2, [r3, #8]
 801bb48:	60da      	str	r2, [r3, #12]
 801bb4a:	611a      	str	r2, [r3, #16]

    // first disable the IRQ to avoid spurious interrupt to wake the MCU up.
    HAL_NVIC_DisableIRQ(_this->pIRQConfig->irq_n);
 801bb4c:	687b      	ldr	r3, [r7, #4]
 801bb4e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 801bb52:	f993 3004 	ldrsb.w	r3, [r3, #4]
 801bb56:	4618      	mov	r0, r3
 801bb58:	f7e7 fa48 	bl	8002fec <HAL_NVIC_DisableIRQ>
    HAL_NVIC_ClearPendingIRQ(_this->pIRQConfig->irq_n);
 801bb5c:	687b      	ldr	r3, [r7, #4]
 801bb5e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 801bb62:	f993 3004 	ldrsb.w	r3, [r3, #4]
 801bb66:	4618      	mov	r0, r3
 801bb68:	f7e7 fa58 	bl	800301c <HAL_NVIC_ClearPendingIRQ>
    // then reconfigure the PIN in analog high impedance to reduce the power consumption.
    GPIO_InitStruct.Pin =  _this->pIRQConfig->pin;
 801bb6c:	687b      	ldr	r3, [r7, #4]
 801bb6e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 801bb72:	689b      	ldr	r3, [r3, #8]
 801bb74:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 801bb76:	2303      	movs	r3, #3
 801bb78:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801bb7a:	2300      	movs	r3, #0
 801bb7c:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(_this->pIRQConfig->port, &GPIO_InitStruct);
 801bb7e:	687b      	ldr	r3, [r7, #4]
 801bb80:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 801bb84:	68db      	ldr	r3, [r3, #12]
 801bb86:	f107 0208 	add.w	r2, r7, #8
 801bb8a:	4611      	mov	r1, r2
 801bb8c:	4618      	mov	r0, r3
 801bb8e:	f7e8 fb89 	bl	80042a4 <HAL_GPIO_Init>
  }

  return res;
 801bb92:	8bfb      	ldrh	r3, [r7, #30]
}
 801bb94:	4618      	mov	r0, r3
 801bb96:	3720      	adds	r7, #32
 801bb98:	46bd      	mov	sp, r7
 801bb9a:	bd80      	pop	{r7, pc}
 801bb9c:	08027324 	.word	0x08027324

0801bba0 <IIS3DWBTaskTimerCallbackFunction>:

static void IIS3DWBTaskTimerCallbackFunction(ULONG timer)
{
 801bba0:	b580      	push	{r7, lr}
 801bba2:	b086      	sub	sp, #24
 801bba4:	af00      	add	r7, sp, #0
 801bba6:	6078      	str	r0, [r7, #4]
  SMMessage report =
 801bba8:	f107 0308 	add.w	r3, r7, #8
 801bbac:	2200      	movs	r2, #0
 801bbae:	601a      	str	r2, [r3, #0]
 801bbb0:	605a      	str	r2, [r3, #4]
 801bbb2:	609a      	str	r2, [r3, #8]
 801bbb4:	60da      	str	r2, [r3, #12]
 801bbb6:	2301      	movs	r3, #1
 801bbb8:	723b      	strb	r3, [r7, #8]
    .sensorDataReadyMessage.messageId = SM_MESSAGE_ID_DATA_READY,
    //.sensorDataReadyMessage.fTimestamp = SysTsGetTimestampF(SysGetTimestampSrv())
  };

  // if (sTaskObj.in_queue != NULL ) {//TODO: STF.Port - how to check if the queue has been initialized ??
  if(TX_SUCCESS != tx_queue_send(&sTaskObj.in_queue, &report, TX_NO_WAIT))
 801bbba:	f107 0308 	add.w	r3, r7, #8
 801bbbe:	2200      	movs	r2, #0
 801bbc0:	4619      	mov	r1, r3
 801bbc2:	4809      	ldr	r0, [pc, #36]	; (801bbe8 <IIS3DWBTaskTimerCallbackFunction+0x48>)
 801bbc4:	f7f7 f992 	bl	8012eec <_txe_queue_send>
 801bbc8:	4603      	mov	r3, r0
 801bbca:	2b00      	cmp	r3, #0
 801bbcc:	d001      	beq.n	801bbd2 <IIS3DWBTaskTimerCallbackFunction+0x32>
  {
    // unable to send the message. Signal the error
    sys_error_handler();
 801bbce:	f7f3 f8c3 	bl	800ed58 <sys_error_handler>
  }
  sTaskObj.timestamp_tick = SMUtilGetTimeStamp();
 801bbd2:	f003 fd4d 	bl	801f670 <SMUtilGetTimeStamp>
 801bbd6:	4603      	mov	r3, r0
 801bbd8:	4a04      	ldr	r2, [pc, #16]	; (801bbec <IIS3DWBTaskTimerCallbackFunction+0x4c>)
 801bbda:	f8c2 386c 	str.w	r3, [r2, #2156]	; 0x86c
  //}
}
 801bbde:	bf00      	nop
 801bbe0:	3718      	adds	r7, #24
 801bbe2:	46bd      	mov	sp, r7
 801bbe4:	bd80      	pop	{r7, pc}
 801bbe6:	bf00      	nop
 801bbe8:	20039840 	.word	0x20039840
 801bbec:	20039740 	.word	0x20039740

0801bbf0 <IIS3DWBTask_EXTI_Callback>:

// CubeMX integration
// ******************

void IIS3DWBTask_EXTI_Callback(uint16_t nPin)
{
 801bbf0:	b580      	push	{r7, lr}
 801bbf2:	b086      	sub	sp, #24
 801bbf4:	af00      	add	r7, sp, #0
 801bbf6:	4603      	mov	r3, r0
 801bbf8:	80fb      	strh	r3, [r7, #6]
  SMMessage report =
 801bbfa:	f107 0308 	add.w	r3, r7, #8
 801bbfe:	2200      	movs	r2, #0
 801bc00:	601a      	str	r2, [r3, #0]
 801bc02:	605a      	str	r2, [r3, #4]
 801bc04:	609a      	str	r2, [r3, #8]
 801bc06:	60da      	str	r2, [r3, #12]
 801bc08:	2301      	movs	r3, #1
 801bc0a:	723b      	strb	r3, [r7, #8]
    .sensorDataReadyMessage.messageId = SM_MESSAGE_ID_DATA_READY,
    //.sensorDataReadyMessage.fTimestamp = SysTsGetTimestampF(SysGetTimestampSrv())
  };

  //  if (sTaskObj.in_queue != NULL) { //TODO: STF.Port - how to check if the queue has been initialized ??
  if(TX_SUCCESS != tx_queue_send(&sTaskObj.in_queue, &report, TX_NO_WAIT))
 801bc0c:	f107 0308 	add.w	r3, r7, #8
 801bc10:	2200      	movs	r2, #0
 801bc12:	4619      	mov	r1, r3
 801bc14:	4808      	ldr	r0, [pc, #32]	; (801bc38 <IIS3DWBTask_EXTI_Callback+0x48>)
 801bc16:	f7f7 f969 	bl	8012eec <_txe_queue_send>
 801bc1a:	4603      	mov	r3, r0
 801bc1c:	2b00      	cmp	r3, #0
 801bc1e:	d001      	beq.n	801bc24 <IIS3DWBTask_EXTI_Callback+0x34>
  {
    // unable to send the report. Signal the error
    sys_error_handler();
 801bc20:	f7f3 f89a 	bl	800ed58 <sys_error_handler>
  }
  // }
  sTaskObj.timestamp_tick = SMUtilGetTimeStamp();
 801bc24:	f003 fd24 	bl	801f670 <SMUtilGetTimeStamp>
 801bc28:	4603      	mov	r3, r0
 801bc2a:	4a04      	ldr	r2, [pc, #16]	; (801bc3c <IIS3DWBTask_EXTI_Callback+0x4c>)
 801bc2c:	f8c2 386c 	str.w	r3, [r2, #2156]	; 0x86c
}
 801bc30:	bf00      	nop
 801bc32:	3718      	adds	r7, #24
 801bc34:	46bd      	mov	sp, r7
 801bc36:	bd80      	pop	{r7, pc}
 801bc38:	20039840 	.word	0x20039840
 801bc3c:	20039740 	.word	0x20039740

0801bc40 <AMTGetTaskPowerMode>:
EPowerMode AMTGetTaskPowerMode(AManagedTask *_this) {
 801bc40:	b590      	push	{r4, r7, lr}
 801bc42:	b085      	sub	sp, #20
 801bc44:	af00      	add	r7, sp, #0
 801bc46:	6078      	str	r0, [r7, #4]
  assert_param(_this != NULL);
 801bc48:	687b      	ldr	r3, [r7, #4]
 801bc4a:	2b00      	cmp	r3, #0
 801bc4c:	d103      	bne.n	801bc56 <AMTGetTaskPowerMode+0x16>
 801bc4e:	21ca      	movs	r1, #202	; 0xca
 801bc50:	480c      	ldr	r0, [pc, #48]	; (801bc84 <AMTGetTaskPowerMode+0x44>)
 801bc52:	f7f9 fb2a 	bl	80152aa <assert_failed>
  EPowerMode eTaskPowrMode = (_this->m_pPMState2PMStateMap != NULL) ?
 801bc56:	687b      	ldr	r3, [r7, #4]
 801bc58:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
      _this->m_pPMState2PMStateMap[(uint8_t)SysGetPowerMode()] :
 801bc5c:	2b00      	cmp	r3, #0
 801bc5e:	d008      	beq.n	801bc72 <AMTGetTaskPowerMode+0x32>
 801bc60:	687b      	ldr	r3, [r7, #4]
 801bc62:	f8d3 40bc 	ldr.w	r4, [r3, #188]	; 0xbc
 801bc66:	f7f3 fad1 	bl	800f20c <SysGetPowerMode>
 801bc6a:	4603      	mov	r3, r0
 801bc6c:	4423      	add	r3, r4
 801bc6e:	781b      	ldrb	r3, [r3, #0]
 801bc70:	e002      	b.n	801bc78 <AMTGetTaskPowerMode+0x38>
      SysGetPowerMode();
 801bc72:	f7f3 facb 	bl	800f20c <SysGetPowerMode>
 801bc76:	4603      	mov	r3, r0
  EPowerMode eTaskPowrMode = (_this->m_pPMState2PMStateMap != NULL) ?
 801bc78:	73fb      	strb	r3, [r7, #15]
  return eTaskPowrMode;
 801bc7a:	7bfb      	ldrb	r3, [r7, #15]
}
 801bc7c:	4618      	mov	r0, r3
 801bc7e:	3714      	adds	r7, #20
 801bc80:	46bd      	mov	sp, r7
 801bc82:	bd90      	pop	{r4, r7, pc}
 801bc84:	080273d0 	.word	0x080273d0

0801bc88 <AMTInitEx>:
sys_error_code_t AMTInitEx(AManagedTaskEx *_this) {
 801bc88:	b480      	push	{r7}
 801bc8a:	b083      	sub	sp, #12
 801bc8c:	af00      	add	r7, sp, #0
 801bc8e:	6078      	str	r0, [r7, #4]
  _this->m_pNext = NULL;
 801bc90:	687b      	ldr	r3, [r7, #4]
 801bc92:	2200      	movs	r2, #0
 801bc94:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  _this->m_pfPMState2FuncMap = NULL;
 801bc98:	687b      	ldr	r3, [r7, #4]
 801bc9a:	2200      	movs	r2, #0
 801bc9c:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
  _this->m_pPMState2PMStateMap = NULL;
 801bca0:	687b      	ldr	r3, [r7, #4]
 801bca2:	2200      	movs	r2, #0
 801bca4:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  _this->m_pfPMState2FuncMap = NULL;
 801bca8:	687b      	ldr	r3, [r7, #4]
 801bcaa:	2200      	movs	r2, #0
 801bcac:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
  _this->m_pPMState2PMStateMap = NULL;
 801bcb0:	687b      	ldr	r3, [r7, #4]
 801bcb2:	2200      	movs	r2, #0
 801bcb4:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  _this->m_xStatus.nDelayPowerModeSwitch = 1;
 801bcb8:	687a      	ldr	r2, [r7, #4]
 801bcba:	f892 30c0 	ldrb.w	r3, [r2, #192]	; 0xc0
 801bcbe:	f043 0301 	orr.w	r3, r3, #1
 801bcc2:	f882 30c0 	strb.w	r3, [r2, #192]	; 0xc0
  _this->m_xStatus.nPowerModeSwitchPending = 0;
 801bcc6:	687a      	ldr	r2, [r7, #4]
 801bcc8:	f892 30c0 	ldrb.w	r3, [r2, #192]	; 0xc0
 801bccc:	f36f 0341 	bfc	r3, #1, #1
 801bcd0:	f882 30c0 	strb.w	r3, [r2, #192]	; 0xc0
  _this->m_xStatus.nPowerModeSwitchDone = 0;
 801bcd4:	687a      	ldr	r2, [r7, #4]
 801bcd6:	f892 30c0 	ldrb.w	r3, [r2, #192]	; 0xc0
 801bcda:	f36f 0382 	bfc	r3, #2, #1
 801bcde:	f882 30c0 	strb.w	r3, [r2, #192]	; 0xc0
  _this->m_xStatus.nIsTaskStillRunning = 0;
 801bce2:	687a      	ldr	r2, [r7, #4]
 801bce4:	f892 30c0 	ldrb.w	r3, [r2, #192]	; 0xc0
 801bce8:	f36f 03c3 	bfc	r3, #3, #1
 801bcec:	f882 30c0 	strb.w	r3, [r2, #192]	; 0xc0
  _this->m_xStatus.nErrorCount = 0;
 801bcf0:	687a      	ldr	r2, [r7, #4]
 801bcf2:	f892 30c0 	ldrb.w	r3, [r2, #192]	; 0xc0
 801bcf6:	f36f 1305 	bfc	r3, #4, #2
 801bcfa:	f882 30c0 	strb.w	r3, [r2, #192]	; 0xc0
  _this->m_xStatus.nAutoStart = 0;
 801bcfe:	687a      	ldr	r2, [r7, #4]
 801bd00:	f892 30c0 	ldrb.w	r3, [r2, #192]	; 0xc0
 801bd04:	f36f 1386 	bfc	r3, #6, #1
 801bd08:	f882 30c0 	strb.w	r3, [r2, #192]	; 0xc0
  _this->m_xStatus.nReserved = 1; // this identifies the task as an AManagedTaskEx.
 801bd0c:	687a      	ldr	r2, [r7, #4]
 801bd0e:	f892 30c0 	ldrb.w	r3, [r2, #192]	; 0xc0
 801bd12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801bd16:	f882 30c0 	strb.w	r3, [r2, #192]	; 0xc0
  _this->m_xStatusEx.nIsWaitingNoTimeout = 0;
 801bd1a:	687a      	ldr	r2, [r7, #4]
 801bd1c:	f892 30c1 	ldrb.w	r3, [r2, #193]	; 0xc1
 801bd20:	f36f 0300 	bfc	r3, #0, #1
 801bd24:	f882 30c1 	strb.w	r3, [r2, #193]	; 0xc1
  _this->m_xStatusEx.nPowerModeClass = E_PM_CLASS_0;
 801bd28:	687a      	ldr	r2, [r7, #4]
 801bd2a:	f892 30c1 	ldrb.w	r3, [r2, #193]	; 0xc1
 801bd2e:	f36f 0342 	bfc	r3, #1, #2
 801bd32:	f882 30c1 	strb.w	r3, [r2, #193]	; 0xc1
  _this->m_xStatusEx.nUnused = 0;
 801bd36:	687a      	ldr	r2, [r7, #4]
 801bd38:	f892 30c1 	ldrb.w	r3, [r2, #193]	; 0xc1
 801bd3c:	f36f 03c6 	bfc	r3, #3, #4
 801bd40:	f882 30c1 	strb.w	r3, [r2, #193]	; 0xc1
  _this->m_xStatusEx.nReserved = 0;
 801bd44:	687a      	ldr	r2, [r7, #4]
 801bd46:	f892 30c1 	ldrb.w	r3, [r2, #193]	; 0xc1
 801bd4a:	f36f 13c7 	bfc	r3, #7, #1
 801bd4e:	f882 30c1 	strb.w	r3, [r2, #193]	; 0xc1
  return SYS_NO_ERROR_CODE;
 801bd52:	2300      	movs	r3, #0
}
 801bd54:	4618      	mov	r0, r3
 801bd56:	370c      	adds	r7, #12
 801bd58:	46bd      	mov	sp, r7
 801bd5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bd5e:	4770      	bx	lr

0801bd60 <AMTExSetInactiveState>:
sys_error_code_t AMTExSetInactiveState(AManagedTaskEx *_this, boolean_t bBlockedSuspended) {
 801bd60:	b580      	push	{r7, lr}
 801bd62:	b082      	sub	sp, #8
 801bd64:	af00      	add	r7, sp, #0
 801bd66:	6078      	str	r0, [r7, #4]
 801bd68:	460b      	mov	r3, r1
 801bd6a:	70fb      	strb	r3, [r7, #3]
  assert_param(_this);
 801bd6c:	687b      	ldr	r3, [r7, #4]
 801bd6e:	2b00      	cmp	r3, #0
 801bd70:	d103      	bne.n	801bd7a <AMTExSetInactiveState+0x1a>
 801bd72:	21a6      	movs	r1, #166	; 0xa6
 801bd74:	4807      	ldr	r0, [pc, #28]	; (801bd94 <AMTExSetInactiveState+0x34>)
 801bd76:	f7f9 fa98 	bl	80152aa <assert_failed>
  _this->m_xStatusEx.nIsWaitingNoTimeout = (uint8_t)bBlockedSuspended;
 801bd7a:	687a      	ldr	r2, [r7, #4]
 801bd7c:	f892 30c1 	ldrb.w	r3, [r2, #193]	; 0xc1
 801bd80:	78f9      	ldrb	r1, [r7, #3]
 801bd82:	f361 0300 	bfi	r3, r1, #0, #1
 801bd86:	f882 30c1 	strb.w	r3, [r2, #193]	; 0xc1
  return SYS_NO_ERROR_CODE;
 801bd8a:	2300      	movs	r3, #0
}
 801bd8c:	4618      	mov	r0, r3
 801bd8e:	3708      	adds	r7, #8
 801bd90:	46bd      	mov	sp, r7
 801bd92:	bd80      	pop	{r7, pc}
 801bd94:	08027418 	.word	0x08027418

0801bd98 <AMTExIsTaskInactive>:
boolean_t AMTExIsTaskInactive(AManagedTaskEx *_this){
 801bd98:	b580      	push	{r7, lr}
 801bd9a:	b082      	sub	sp, #8
 801bd9c:	af00      	add	r7, sp, #0
 801bd9e:	6078      	str	r0, [r7, #4]
  assert_param(_this);
 801bda0:	687b      	ldr	r3, [r7, #4]
 801bda2:	2b00      	cmp	r3, #0
 801bda4:	d103      	bne.n	801bdae <AMTExIsTaskInactive+0x16>
 801bda6:	21af      	movs	r1, #175	; 0xaf
 801bda8:	4808      	ldr	r0, [pc, #32]	; (801bdcc <AMTExIsTaskInactive+0x34>)
 801bdaa:	f7f9 fa7e 	bl	80152aa <assert_failed>
  return (boolean_t)_this->m_xStatusEx.nIsWaitingNoTimeout;
 801bdae:	687b      	ldr	r3, [r7, #4]
 801bdb0:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 801bdb4:	f003 0301 	and.w	r3, r3, #1
 801bdb8:	b2db      	uxtb	r3, r3
 801bdba:	2b00      	cmp	r3, #0
 801bdbc:	bf14      	ite	ne
 801bdbe:	2301      	movne	r3, #1
 801bdc0:	2300      	moveq	r3, #0
 801bdc2:	b2db      	uxtb	r3, r3
}
 801bdc4:	4618      	mov	r0, r3
 801bdc6:	3708      	adds	r7, #8
 801bdc8:	46bd      	mov	sp, r7
 801bdca:	bd80      	pop	{r7, pc}
 801bdcc:	08027418 	.word	0x08027418

0801bdd0 <IEventInit>:
sys_error_code_t IEventInit(IEvent *this, const IEventSrc *pSource) {
 801bdd0:	b480      	push	{r7}
 801bdd2:	b083      	sub	sp, #12
 801bdd4:	af00      	add	r7, sp, #0
 801bdd6:	6078      	str	r0, [r7, #4]
 801bdd8:	6039      	str	r1, [r7, #0]
	this->pSource = pSource;
 801bdda:	687b      	ldr	r3, [r7, #4]
 801bddc:	683a      	ldr	r2, [r7, #0]
 801bdde:	601a      	str	r2, [r3, #0]
	return SYS_NO_ERROR_CODE;
 801bde0:	2300      	movs	r3, #0
}
 801bde2:	4618      	mov	r0, r3
 801bde4:	370c      	adds	r7, #12
 801bde6:	46bd      	mov	sp, r7
 801bde8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bdec:	4770      	bx	lr

0801bdee <IEventSrcInit>:
sys_error_code_t IEventSrcInit(IEventSrc *this) {
 801bdee:	b580      	push	{r7, lr}
 801bdf0:	b082      	sub	sp, #8
 801bdf2:	af00      	add	r7, sp, #0
 801bdf4:	6078      	str	r0, [r7, #4]
	return this->vptr->Init(this);
 801bdf6:	687b      	ldr	r3, [r7, #4]
 801bdf8:	681b      	ldr	r3, [r3, #0]
 801bdfa:	681b      	ldr	r3, [r3, #0]
 801bdfc:	6878      	ldr	r0, [r7, #4]
 801bdfe:	4798      	blx	r3
 801be00:	4603      	mov	r3, r0
}
 801be02:	4618      	mov	r0, r3
 801be04:	3708      	adds	r7, #8
 801be06:	46bd      	mov	sp, r7
 801be08:	bd80      	pop	{r7, pc}

0801be0a <IEventSrcSendEvent>:
sys_error_code_t IEventSrcSendEvent(const IEventSrc *this, const IEvent *pxEvent, void *pvParams) {
 801be0a:	b580      	push	{r7, lr}
 801be0c:	b084      	sub	sp, #16
 801be0e:	af00      	add	r7, sp, #0
 801be10:	60f8      	str	r0, [r7, #12]
 801be12:	60b9      	str	r1, [r7, #8]
 801be14:	607a      	str	r2, [r7, #4]
	return this->vptr->SendEvent(this, pxEvent, pvParams);
 801be16:	68fb      	ldr	r3, [r7, #12]
 801be18:	681b      	ldr	r3, [r3, #0]
 801be1a:	691b      	ldr	r3, [r3, #16]
 801be1c:	687a      	ldr	r2, [r7, #4]
 801be1e:	68b9      	ldr	r1, [r7, #8]
 801be20:	68f8      	ldr	r0, [r7, #12]
 801be22:	4798      	blx	r3
 801be24:	4603      	mov	r3, r0
}
 801be26:	4618      	mov	r0, r3
 801be28:	3710      	adds	r7, #16
 801be2a:	46bd      	mov	sp, r7
 801be2c:	bd80      	pop	{r7, pc}

0801be2e <ISourceGetId>:
static inline uint8_t ISourceGetId(ISourceObservable *_this) {
 801be2e:	b580      	push	{r7, lr}
 801be30:	b082      	sub	sp, #8
 801be32:	af00      	add	r7, sp, #0
 801be34:	6078      	str	r0, [r7, #4]
  return _this->    vptr->GetId(_this );
 801be36:	687b      	ldr	r3, [r7, #4]
 801be38:	681b      	ldr	r3, [r3, #0]
 801be3a:	681b      	ldr	r3, [r3, #0]
 801be3c:	6878      	ldr	r0, [r7, #4]
 801be3e:	4798      	blx	r3
 801be40:	4603      	mov	r3, r0
}
 801be42:	4618      	mov	r0, r3
 801be44:	3708      	adds	r7, #8
 801be46:	46bd      	mov	sp, r7
 801be48:	bd80      	pop	{r7, pc}
	...

0801be4c <SensorEventInit>:
sys_error_code_t SensorEventInit(IEvent *_this, const IEventSrc *pSource, const ai_logging_packet_t   *stream, double fTimeStamp, uint16_t nSensorID) {
 801be4c:	b580      	push	{r7, lr}
 801be4e:	b086      	sub	sp, #24
 801be50:	af00      	add	r7, sp, #0
 801be52:	60f8      	str	r0, [r7, #12]
 801be54:	60b9      	str	r1, [r7, #8]
 801be56:	607a      	str	r2, [r7, #4]
  assert_param(_this);
 801be58:	68fb      	ldr	r3, [r7, #12]
 801be5a:	2b00      	cmp	r3, #0
 801be5c:	d103      	bne.n	801be66 <SensorEventInit+0x1a>
 801be5e:	2163      	movs	r1, #99	; 0x63
 801be60:	480c      	ldr	r0, [pc, #48]	; (801be94 <SensorEventInit+0x48>)
 801be62:	f7f9 fa22 	bl	80152aa <assert_failed>
  SensorEvent *pObj = (SensorEvent*)_this;
 801be66:	68fb      	ldr	r3, [r7, #12]
 801be68:	617b      	str	r3, [r7, #20]
  IEventInit(_this, pSource);
 801be6a:	68b9      	ldr	r1, [r7, #8]
 801be6c:	68f8      	ldr	r0, [r7, #12]
 801be6e:	f7ff ffaf 	bl	801bdd0 <IEventInit>
  pObj->stream = stream;
 801be72:	697b      	ldr	r3, [r7, #20]
 801be74:	687a      	ldr	r2, [r7, #4]
 801be76:	605a      	str	r2, [r3, #4]
  pObj->fTimeStamp = fTimeStamp;
 801be78:	6979      	ldr	r1, [r7, #20]
 801be7a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801be7e:	e9c1 2302 	strd	r2, r3, [r1, #8]
  pObj->nSensorID = nSensorID;
 801be82:	697b      	ldr	r3, [r7, #20]
 801be84:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 801be86:	821a      	strh	r2, [r3, #16]
  return SYS_NO_ERROR_CODE;
 801be88:	2300      	movs	r3, #0
}
 801be8a:	4618      	mov	r0, r3
 801be8c:	3718      	adds	r7, #24
 801be8e:	46bd      	mov	sp, r7
 801be90:	bd80      	pop	{r7, pc}
 801be92:	bf00      	nop
 801be94:	08027464 	.word	0x08027464

0801be98 <ISM330DHCXTaskGetAccSensorIF>:

// Public API definition
// *********************

ISourceObservable* ISM330DHCXTaskGetAccSensorIF(ISM330DHCXTask *_this)
{
 801be98:	b480      	push	{r7}
 801be9a:	b083      	sub	sp, #12
 801be9c:	af00      	add	r7, sp, #0
 801be9e:	6078      	str	r0, [r7, #4]
  return (ISourceObservable*) &(_this->acc_sensor_if);
 801bea0:	687b      	ldr	r3, [r7, #4]
 801bea2:	33d8      	adds	r3, #216	; 0xd8
}
 801bea4:	4618      	mov	r0, r3
 801bea6:	370c      	adds	r7, #12
 801bea8:	46bd      	mov	sp, r7
 801beaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801beae:	4770      	bx	lr

0801beb0 <ISM330DHCXTaskGetGyroSensorIF>:

ISourceObservable* ISM330DHCXTaskGetGyroSensorIF(ISM330DHCXTask *_this)
{
 801beb0:	b480      	push	{r7}
 801beb2:	b083      	sub	sp, #12
 801beb4:	af00      	add	r7, sp, #0
 801beb6:	6078      	str	r0, [r7, #4]
  return (ISourceObservable*) &(_this->gyro_sensor_if);
 801beb8:	687b      	ldr	r3, [r7, #4]
 801beba:	33dc      	adds	r3, #220	; 0xdc
}
 801bebc:	4618      	mov	r0, r3
 801bebe:	370c      	adds	r7, #12
 801bec0:	46bd      	mov	sp, r7
 801bec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bec6:	4770      	bx	lr

0801bec8 <ISM330DHCXTaskGetMlcFakeSensorIF>:

ISourceObservable* ISM330DHCXTaskGetMlcFakeSensorIF(ISM330DHCXTask *_this)
{
 801bec8:	b480      	push	{r7}
 801beca:	b083      	sub	sp, #12
 801becc:	af00      	add	r7, sp, #0
 801bece:	6078      	str	r0, [r7, #4]
  return (ISourceObservable*) &(_this->mlc_fakesensor_if);
 801bed0:	687b      	ldr	r3, [r7, #4]
 801bed2:	33e0      	adds	r3, #224	; 0xe0
}
 801bed4:	4618      	mov	r0, r3
 801bed6:	370c      	adds	r7, #12
 801bed8:	46bd      	mov	sp, r7
 801beda:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bede:	4770      	bx	lr

0801bee0 <ISM330DHCXTaskAlloc>:
{
  return (ISensorMlc_t*) &(_this->mlc_sensor_if);
}

AManagedTaskEx* ISM330DHCXTaskAlloc(const void *pIRQConfig, const void *pMLCConfig, const void *pCSConfig, EBusType eBusType)
{
 801bee0:	b580      	push	{r7, lr}
 801bee2:	b084      	sub	sp, #16
 801bee4:	af00      	add	r7, sp, #0
 801bee6:	60f8      	str	r0, [r7, #12]
 801bee8:	60b9      	str	r1, [r7, #8]
 801beea:	607a      	str	r2, [r7, #4]
 801beec:	70fb      	strb	r3, [r7, #3]
  // In this application there is only one Keyboard task,
  // so this allocator implement the singleton design pattern.

  // Initialize the super class
  AMTInitEx(&sTaskObj.super);
 801beee:	481b      	ldr	r0, [pc, #108]	; (801bf5c <ISM330DHCXTaskAlloc+0x7c>)
 801bef0:	f7ff feca 	bl	801bc88 <AMTInitEx>

  sTaskObj.super.vptr = &sTheClass.vtbl;
 801bef4:	4b19      	ldr	r3, [pc, #100]	; (801bf5c <ISM330DHCXTaskAlloc+0x7c>)
 801bef6:	4a1a      	ldr	r2, [pc, #104]	; (801bf60 <ISM330DHCXTaskAlloc+0x80>)
 801bef8:	601a      	str	r2, [r3, #0]
  sTaskObj.acc_sensor_if.vptr = &sTheClass.acc_sensor_if_vtbl;
 801befa:	4b18      	ldr	r3, [pc, #96]	; (801bf5c <ISM330DHCXTaskAlloc+0x7c>)
 801befc:	4a19      	ldr	r2, [pc, #100]	; (801bf64 <ISM330DHCXTaskAlloc+0x84>)
 801befe:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
  sTaskObj.gyro_sensor_if.vptr = &sTheClass.gyro_sensor_if_vtbl;
 801bf02:	4b16      	ldr	r3, [pc, #88]	; (801bf5c <ISM330DHCXTaskAlloc+0x7c>)
 801bf04:	4a18      	ldr	r2, [pc, #96]	; (801bf68 <ISM330DHCXTaskAlloc+0x88>)
 801bf06:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
  sTaskObj.mlc_fakesensor_if.vptr = &sTheClass.mlc_fakesensor_if_vtbl;
 801bf0a:	4b14      	ldr	r3, [pc, #80]	; (801bf5c <ISM330DHCXTaskAlloc+0x7c>)
 801bf0c:	4a17      	ldr	r2, [pc, #92]	; (801bf6c <ISM330DHCXTaskAlloc+0x8c>)
 801bf0e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  sTaskObj.mlc_sensor_if.vptr = &sTheClass.mlc_sensor_if_vtbl;
 801bf12:	4b12      	ldr	r3, [pc, #72]	; (801bf5c <ISM330DHCXTaskAlloc+0x7c>)
 801bf14:	4a16      	ldr	r2, [pc, #88]	; (801bf70 <ISM330DHCXTaskAlloc+0x90>)
 801bf16:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
  sTaskObj.acc_sensor_descriptor = &sTheClass.acc_class_descriptor;
 801bf1a:	4b10      	ldr	r3, [pc, #64]	; (801bf5c <ISM330DHCXTaskAlloc+0x7c>)
 801bf1c:	4a15      	ldr	r2, [pc, #84]	; (801bf74 <ISM330DHCXTaskAlloc+0x94>)
 801bf1e:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
  sTaskObj.gyro_sensor_descriptor = &sTheClass.gyro_class_descriptor;
 801bf22:	4b0e      	ldr	r3, [pc, #56]	; (801bf5c <ISM330DHCXTaskAlloc+0x7c>)
 801bf24:	4a14      	ldr	r2, [pc, #80]	; (801bf78 <ISM330DHCXTaskAlloc+0x98>)
 801bf26:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
  sTaskObj.mlc_fakesensor_descriptor = &sTheClass.mlc_fakeclass_descriptor;
 801bf2a:	4b0c      	ldr	r3, [pc, #48]	; (801bf5c <ISM330DHCXTaskAlloc+0x7c>)
 801bf2c:	4a13      	ldr	r2, [pc, #76]	; (801bf7c <ISM330DHCXTaskAlloc+0x9c>)
 801bf2e:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130

  sTaskObj.pIRQConfig = (MX_GPIOParams_t*)pIRQConfig;
 801bf32:	4a0a      	ldr	r2, [pc, #40]	; (801bf5c <ISM330DHCXTaskAlloc+0x7c>)
 801bf34:	68fb      	ldr	r3, [r7, #12]
 801bf36:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
  sTaskObj.pMLCConfig = (MX_GPIOParams_t*)pMLCConfig;
 801bf3a:	4a08      	ldr	r2, [pc, #32]	; (801bf5c <ISM330DHCXTaskAlloc+0x7c>)
 801bf3c:	68bb      	ldr	r3, [r7, #8]
 801bf3e:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
  sTaskObj.pCSConfig = (MX_GPIOParams_t*)pCSConfig;
 801bf42:	4a06      	ldr	r2, [pc, #24]	; (801bf5c <ISM330DHCXTaskAlloc+0x7c>)
 801bf44:	687b      	ldr	r3, [r7, #4]
 801bf46:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc

  sTaskObj.eBusType = eBusType;
 801bf4a:	4a04      	ldr	r2, [pc, #16]	; (801bf5c <ISM330DHCXTaskAlloc+0x7c>)
 801bf4c:	78fb      	ldrb	r3, [r7, #3]
 801bf4e:	f882 30d4 	strb.w	r3, [r2, #212]	; 0xd4

  return (AManagedTaskEx*) &sTaskObj;
 801bf52:	4b02      	ldr	r3, [pc, #8]	; (801bf5c <ISM330DHCXTaskAlloc+0x7c>)
}
 801bf54:	4618      	mov	r0, r3
 801bf56:	3710      	adds	r7, #16
 801bf58:	46bd      	mov	sp, r7
 801bf5a:	bd80      	pop	{r7, pc}
 801bf5c:	20039fc0 	.word	0x20039fc0
 801bf60:	08035994 	.word	0x08035994
 801bf64:	080359b0 	.word	0x080359b0
 801bf68:	080359e8 	.word	0x080359e8
 801bf6c:	08035a20 	.word	0x08035a20
 801bf70:	08035a58 	.word	0x08035a58
 801bf74:	08035a60 	.word	0x08035a60
 801bf78:	08035b48 	.word	0x08035b48
 801bf7c:	08035c30 	.word	0x08035c30

0801bf80 <ISM330DHCXTaskGetSensorIF>:

ABusIF* ISM330DHCXTaskGetSensorIF(ISM330DHCXTask *_this)
{
 801bf80:	b580      	push	{r7, lr}
 801bf82:	b082      	sub	sp, #8
 801bf84:	af00      	add	r7, sp, #0
 801bf86:	6078      	str	r0, [r7, #4]
  assert_param(_this != NULL);
 801bf88:	687b      	ldr	r3, [r7, #4]
 801bf8a:	2b00      	cmp	r3, #0
 801bf8c:	d104      	bne.n	801bf98 <ISM330DHCXTaskGetSensorIF+0x18>
 801bf8e:	f240 219d 	movw	r1, #669	; 0x29d
 801bf92:	4805      	ldr	r0, [pc, #20]	; (801bfa8 <ISM330DHCXTaskGetSensorIF+0x28>)
 801bf94:	f7f9 f989 	bl	80152aa <assert_failed>

  return _this->p_sensor_bus_if;
 801bf98:	687b      	ldr	r3, [r7, #4]
 801bf9a:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
}
 801bf9e:	4618      	mov	r0, r3
 801bfa0:	3708      	adds	r7, #8
 801bfa2:	46bd      	mov	sp, r7
 801bfa4:	bd80      	pop	{r7, pc}
 801bfa6:	bf00      	nop
 801bfa8:	080274b8 	.word	0x080274b8

0801bfac <ISM330DHCXTask_vtblHardwareInit>:

// AManagedTaskEx virtual functions definition
// *******************************************

sys_error_code_t ISM330DHCXTask_vtblHardwareInit(AManagedTask *_this, void *pParams)
{
 801bfac:	b580      	push	{r7, lr}
 801bfae:	b084      	sub	sp, #16
 801bfb0:	af00      	add	r7, sp, #0
 801bfb2:	6078      	str	r0, [r7, #4]
 801bfb4:	6039      	str	r1, [r7, #0]
  assert_param(_this != NULL);
 801bfb6:	687b      	ldr	r3, [r7, #4]
 801bfb8:	2b00      	cmp	r3, #0
 801bfba:	d104      	bne.n	801bfc6 <ISM330DHCXTask_vtblHardwareInit+0x1a>
 801bfbc:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 801bfc0:	480a      	ldr	r0, [pc, #40]	; (801bfec <ISM330DHCXTask_vtblHardwareInit+0x40>)
 801bfc2:	f7f9 f972 	bl	80152aa <assert_failed>
  sys_error_code_t res = SYS_NO_ERROR_CODE;
 801bfc6:	2300      	movs	r3, #0
 801bfc8:	81fb      	strh	r3, [r7, #14]
  ISM330DHCXTask *p_obj = (ISM330DHCXTask*) _this;
 801bfca:	687b      	ldr	r3, [r7, #4]
 801bfcc:	60bb      	str	r3, [r7, #8]

  /* Configure CS Pin */
  if(p_obj->pCSConfig != NULL)
 801bfce:	68bb      	ldr	r3, [r7, #8]
 801bfd0:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 801bfd4:	2b00      	cmp	r3, #0
 801bfd6:	d004      	beq.n	801bfe2 <ISM330DHCXTask_vtblHardwareInit+0x36>
  {
    p_obj->pCSConfig->p_mx_init_f();
 801bfd8:	68bb      	ldr	r3, [r7, #8]
 801bfda:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 801bfde:	681b      	ldr	r3, [r3, #0]
 801bfe0:	4798      	blx	r3
  }

  return res;
 801bfe2:	89fb      	ldrh	r3, [r7, #14]
}
 801bfe4:	4618      	mov	r0, r3
 801bfe6:	3710      	adds	r7, #16
 801bfe8:	46bd      	mov	sp, r7
 801bfea:	bd80      	pop	{r7, pc}
 801bfec:	080274b8 	.word	0x080274b8

0801bff0 <ISM330DHCXTask_vtblOnCreateTask>:
		UINT *pPriority,
		UINT *pPreemptThreshold,
		ULONG *pTimeSlice,
		ULONG *pAutoStart,
		ULONG *pParams)
{
 801bff0:	b580      	push	{r7, lr}
 801bff2:	b08c      	sub	sp, #48	; 0x30
 801bff4:	af04      	add	r7, sp, #16
 801bff6:	60f8      	str	r0, [r7, #12]
 801bff8:	60b9      	str	r1, [r7, #8]
 801bffa:	607a      	str	r2, [r7, #4]
 801bffc:	603b      	str	r3, [r7, #0]
  assert_param(_this);
 801bffe:	68fb      	ldr	r3, [r7, #12]
 801c000:	2b00      	cmp	r3, #0
 801c002:	d104      	bne.n	801c00e <ISM330DHCXTask_vtblOnCreateTask+0x1e>
 801c004:	f44f 7135 	mov.w	r1, #724	; 0x2d4
 801c008:	487b      	ldr	r0, [pc, #492]	; (801c1f8 <ISM330DHCXTask_vtblOnCreateTask+0x208>)
 801c00a:	f7f9 f94e 	bl	80152aa <assert_failed>
  sys_error_code_t res = SYS_NO_ERROR_CODE;
 801c00e:	2300      	movs	r3, #0
 801c010:	83fb      	strh	r3, [r7, #30]
  ISM330DHCXTask *p_obj = (ISM330DHCXTask*) _this;
 801c012:	68fb      	ldr	r3, [r7, #12]
 801c014:	61bb      	str	r3, [r7, #24]

  // Create task specific sw resources.

  uint16_t nItemSize = ISM330DHCX_TASK_CFG_IN_QUEUE_ITEM_SIZE;
 801c016:	2310      	movs	r3, #16
 801c018:	82fb      	strh	r3, [r7, #22]
  VOID *pvQueueItemsBuff = SysAlloc(ISM330DHCX_TASK_CFG_IN_QUEUE_LENGTH * nItemSize);
 801c01a:	8afa      	ldrh	r2, [r7, #22]
 801c01c:	4613      	mov	r3, r2
 801c01e:	009b      	lsls	r3, r3, #2
 801c020:	4413      	add	r3, r2
 801c022:	009b      	lsls	r3, r3, #2
 801c024:	4618      	mov	r0, r3
 801c026:	f7f3 f933 	bl	800f290 <SysAlloc>
 801c02a:	6138      	str	r0, [r7, #16]
  if(pvQueueItemsBuff == NULL)
 801c02c:	693b      	ldr	r3, [r7, #16]
 801c02e:	2b00      	cmp	r3, #0
 801c030:	d107      	bne.n	801c042 <ISM330DHCXTask_vtblOnCreateTask+0x52>
  {
    res = SYS_TASK_HEAP_OUT_OF_MEMORY_ERROR_CODE;
 801c032:	f240 235a 	movw	r3, #602	; 0x25a
 801c036:	83fb      	strh	r3, [r7, #30]
    SYS_SET_SERVICE_LEVEL_ERROR_CODE(res);
 801c038:	4a70      	ldr	r2, [pc, #448]	; (801c1fc <ISM330DHCXTask_vtblOnCreateTask+0x20c>)
 801c03a:	8bfb      	ldrh	r3, [r7, #30]
 801c03c:	8053      	strh	r3, [r2, #2]
    return res;
 801c03e:	8bfb      	ldrh	r3, [r7, #30]
 801c040:	e17e      	b.n	801c340 <ISM330DHCXTask_vtblOnCreateTask+0x350>
  }

  if(TX_SUCCESS != tx_queue_create(&p_obj->in_queue, "ISM330DHCX_Q", nItemSize / 4, pvQueueItemsBuff, ISM330DHCX_TASK_CFG_IN_QUEUE_LENGTH * nItemSize))
 801c042:	69bb      	ldr	r3, [r7, #24]
 801c044:	f503 70ac 	add.w	r0, r3, #344	; 0x158
 801c048:	8afb      	ldrh	r3, [r7, #22]
 801c04a:	089b      	lsrs	r3, r3, #2
 801c04c:	b29b      	uxth	r3, r3
 801c04e:	4619      	mov	r1, r3
 801c050:	8afa      	ldrh	r2, [r7, #22]
 801c052:	4613      	mov	r3, r2
 801c054:	009b      	lsls	r3, r3, #2
 801c056:	4413      	add	r3, r2
 801c058:	009b      	lsls	r3, r3, #2
 801c05a:	461a      	mov	r2, r3
 801c05c:	2338      	movs	r3, #56	; 0x38
 801c05e:	9301      	str	r3, [sp, #4]
 801c060:	9200      	str	r2, [sp, #0]
 801c062:	693b      	ldr	r3, [r7, #16]
 801c064:	460a      	mov	r2, r1
 801c066:	4966      	ldr	r1, [pc, #408]	; (801c200 <ISM330DHCXTask_vtblOnCreateTask+0x210>)
 801c068:	f7f6 fd90 	bl	8012b8c <_txe_queue_create>
 801c06c:	4603      	mov	r3, r0
 801c06e:	2b00      	cmp	r3, #0
 801c070:	d007      	beq.n	801c082 <ISM330DHCXTask_vtblOnCreateTask+0x92>
  {
    res = SYS_TASK_HEAP_OUT_OF_MEMORY_ERROR_CODE;
 801c072:	f240 235a 	movw	r3, #602	; 0x25a
 801c076:	83fb      	strh	r3, [r7, #30]
    SYS_SET_SERVICE_LEVEL_ERROR_CODE(res);
 801c078:	4a60      	ldr	r2, [pc, #384]	; (801c1fc <ISM330DHCXTask_vtblOnCreateTask+0x20c>)
 801c07a:	8bfb      	ldrh	r3, [r7, #30]
 801c07c:	8053      	strh	r3, [r2, #2]
    return res;
 801c07e:	8bfb      	ldrh	r3, [r7, #30]
 801c080:	e15e      	b.n	801c340 <ISM330DHCXTask_vtblOnCreateTask+0x350>
  }

  /* create the software timer*/
  if(TX_SUCCESS != tx_timer_create(
 801c082:	69bb      	ldr	r3, [r7, #24]
 801c084:	f603 30b4 	addw	r0, r3, #2996	; 0xbb4
 801c088:	232c      	movs	r3, #44	; 0x2c
 801c08a:	9303      	str	r3, [sp, #12]
 801c08c:	2300      	movs	r3, #0
 801c08e:	9302      	str	r3, [sp, #8]
 801c090:	2300      	movs	r3, #0
 801c092:	9301      	str	r3, [sp, #4]
 801c094:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801c098:	9300      	str	r3, [sp, #0]
 801c09a:	2300      	movs	r3, #0
 801c09c:	4a59      	ldr	r2, [pc, #356]	; (801c204 <ISM330DHCXTask_vtblOnCreateTask+0x214>)
 801c09e:	495a      	ldr	r1, [pc, #360]	; (801c208 <ISM330DHCXTask_vtblOnCreateTask+0x218>)
 801c0a0:	f7f7 fa4e 	bl	8013540 <_txe_timer_create>
 801c0a4:	4603      	mov	r3, r0
 801c0a6:	2b00      	cmp	r3, #0
 801c0a8:	d007      	beq.n	801c0ba <ISM330DHCXTask_vtblOnCreateTask+0xca>
		  (ULONG)TX_NULL,
		  AMT_MS_TO_TICKS(ISM330DHCX_TASK_CFG_TIMER_PERIOD_MS),
		  0,
		  TX_NO_ACTIVATE))
  {
    res = SYS_TASK_HEAP_OUT_OF_MEMORY_ERROR_CODE;
 801c0aa:	f240 235a 	movw	r3, #602	; 0x25a
 801c0ae:	83fb      	strh	r3, [r7, #30]
    SYS_SET_SERVICE_LEVEL_ERROR_CODE(res);
 801c0b0:	4a52      	ldr	r2, [pc, #328]	; (801c1fc <ISM330DHCXTask_vtblOnCreateTask+0x20c>)
 801c0b2:	8bfb      	ldrh	r3, [r7, #30]
 801c0b4:	8053      	strh	r3, [r2, #2]
    return res;
 801c0b6:	8bfb      	ldrh	r3, [r7, #30]
 801c0b8:	e142      	b.n	801c340 <ISM330DHCXTask_vtblOnCreateTask+0x350>
  }

  /* create the mlc software timer*/
  if(TX_SUCCESS != tx_timer_create(
 801c0ba:	69bb      	ldr	r3, [r7, #24]
 801c0bc:	f503 603e 	add.w	r0, r3, #3040	; 0xbe0
 801c0c0:	232c      	movs	r3, #44	; 0x2c
 801c0c2:	9303      	str	r3, [sp, #12]
 801c0c4:	2300      	movs	r3, #0
 801c0c6:	9302      	str	r3, [sp, #8]
 801c0c8:	2300      	movs	r3, #0
 801c0ca:	9301      	str	r3, [sp, #4]
 801c0cc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 801c0d0:	9300      	str	r3, [sp, #0]
 801c0d2:	2300      	movs	r3, #0
 801c0d4:	4a4d      	ldr	r2, [pc, #308]	; (801c20c <ISM330DHCXTask_vtblOnCreateTask+0x21c>)
 801c0d6:	494e      	ldr	r1, [pc, #312]	; (801c210 <ISM330DHCXTask_vtblOnCreateTask+0x220>)
 801c0d8:	f7f7 fa32 	bl	8013540 <_txe_timer_create>
 801c0dc:	4603      	mov	r3, r0
 801c0de:	2b00      	cmp	r3, #0
 801c0e0:	d007      	beq.n	801c0f2 <ISM330DHCXTask_vtblOnCreateTask+0x102>
		  (ULONG)TX_NULL,
		  AMT_MS_TO_TICKS(ISM330DHCX_TASK_CFG_MLC_TIMER_PERIOD_MS),
		  0,
		  TX_NO_ACTIVATE))
  {
    res = SYS_TASK_HEAP_OUT_OF_MEMORY_ERROR_CODE;
 801c0e2:	f240 235a 	movw	r3, #602	; 0x25a
 801c0e6:	83fb      	strh	r3, [r7, #30]
    SYS_SET_SERVICE_LEVEL_ERROR_CODE(res);
 801c0e8:	4a44      	ldr	r2, [pc, #272]	; (801c1fc <ISM330DHCXTask_vtblOnCreateTask+0x20c>)
 801c0ea:	8bfb      	ldrh	r3, [r7, #30]
 801c0ec:	8053      	strh	r3, [r2, #2]
    return res;
 801c0ee:	8bfb      	ldrh	r3, [r7, #30]
 801c0f0:	e126      	b.n	801c340 <ISM330DHCXTask_vtblOnCreateTask+0x350>
  }

  switch (p_obj->eBusType)
 801c0f2:	69bb      	ldr	r3, [r7, #24]
 801c0f4:	f893 30d4 	ldrb.w	r3, [r3, #212]	; 0xd4
 801c0f8:	2b00      	cmp	r3, #0
 801c0fa:	d002      	beq.n	801c102 <ISM330DHCXTask_vtblOnCreateTask+0x112>
 801c0fc:	2b01      	cmp	r3, #1
 801c0fe:	d030      	beq.n	801c162 <ISM330DHCXTask_vtblOnCreateTask+0x172>
 801c100:	e028      	b.n	801c154 <ISM330DHCXTask_vtblOnCreateTask+0x164>
  {
    case SPI_IF:
#if (SM_SPI_BUS_IF == 1)
      assert(p_obj->pCSConfig != NULL);
 801c102:	69bb      	ldr	r3, [r7, #24]
 801c104:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 801c108:	2b00      	cmp	r3, #0
 801c10a:	d106      	bne.n	801c11a <ISM330DHCXTask_vtblOnCreateTask+0x12a>
 801c10c:	4b41      	ldr	r3, [pc, #260]	; (801c214 <ISM330DHCXTask_vtblOnCreateTask+0x224>)
 801c10e:	4a42      	ldr	r2, [pc, #264]	; (801c218 <ISM330DHCXTask_vtblOnCreateTask+0x228>)
 801c110:	f44f 7143 	mov.w	r1, #780	; 0x30c
 801c114:	4838      	ldr	r0, [pc, #224]	; (801c1f8 <ISM330DHCXTask_vtblOnCreateTask+0x208>)
 801c116:	f007 fc9f 	bl	8023a58 <__assert_func>
      p_obj->p_sensor_bus_if = SPIBusIFAlloc(ISM330DHCX_ID, p_obj->pCSConfig->port, p_obj->pCSConfig->pin, 0);
 801c11a:	69bb      	ldr	r3, [r7, #24]
 801c11c:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 801c120:	68d9      	ldr	r1, [r3, #12]
 801c122:	69bb      	ldr	r3, [r7, #24]
 801c124:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 801c128:	689b      	ldr	r3, [r3, #8]
 801c12a:	b29a      	uxth	r2, r3
 801c12c:	2300      	movs	r3, #0
 801c12e:	206b      	movs	r0, #107	; 0x6b
 801c130:	f003 faba 	bl	801f6a8 <SPIBusIFAlloc>
 801c134:	4602      	mov	r2, r0
 801c136:	69bb      	ldr	r3, [r7, #24]
 801c138:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
      if (p_obj->p_sensor_bus_if == NULL)
 801c13c:	69bb      	ldr	r3, [r7, #24]
 801c13e:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 801c142:	2b00      	cmp	r3, #0
 801c144:	d10f      	bne.n	801c166 <ISM330DHCXTask_vtblOnCreateTask+0x176>
      {
        res = SYS_TASK_HEAP_OUT_OF_MEMORY_ERROR_CODE;
 801c146:	f240 235a 	movw	r3, #602	; 0x25a
 801c14a:	83fb      	strh	r3, [r7, #30]
        SYS_SET_SERVICE_LEVEL_ERROR_CODE(res);
 801c14c:	4a2b      	ldr	r2, [pc, #172]	; (801c1fc <ISM330DHCXTask_vtblOnCreateTask+0x20c>)
 801c14e:	8bfb      	ldrh	r3, [r7, #30]
 801c150:	8053      	strh	r3, [r2, #2]
      }
#endif
      break;
 801c152:	e008      	b.n	801c166 <ISM330DHCXTask_vtblOnCreateTask+0x176>
      }
#endif
      break;
    default:
      // Unknown bus type
      res = SYS_TASK_INVALID_PARAM_ERROR_CODE;
 801c154:	f44f 7317 	mov.w	r3, #604	; 0x25c
 801c158:	83fb      	strh	r3, [r7, #30]
      SYS_SET_SERVICE_LEVEL_ERROR_CODE(res);
 801c15a:	4a28      	ldr	r2, [pc, #160]	; (801c1fc <ISM330DHCXTask_vtblOnCreateTask+0x20c>)
 801c15c:	8bfb      	ldrh	r3, [r7, #30]
 801c15e:	8053      	strh	r3, [r2, #2]
      break;
 801c160:	e002      	b.n	801c168 <ISM330DHCXTask_vtblOnCreateTask+0x178>
      break;
 801c162:	bf00      	nop
 801c164:	e000      	b.n	801c168 <ISM330DHCXTask_vtblOnCreateTask+0x178>
      break;
 801c166:	bf00      	nop
  }

  if (SYS_IS_ERROR_CODE(res))
 801c168:	8bfb      	ldrh	r3, [r7, #30]
 801c16a:	2b00      	cmp	r3, #0
 801c16c:	d001      	beq.n	801c172 <ISM330DHCXTask_vtblOnCreateTask+0x182>
  {
    return res;
 801c16e:	8bfb      	ldrh	r3, [r7, #30]
 801c170:	e0e6      	b.n	801c340 <ISM330DHCXTask_vtblOnCreateTask+0x350>
  }
  // Initialize the EventSrc interface.
  // take the ownership of the interface.
  p_obj->p_acc_event_src = SensorEventSrcAlloc();
 801c172:	f004 fbe9 	bl	8020948 <SensorEventSrcAlloc>
 801c176:	4602      	mov	r2, r0
 801c178:	69bb      	ldr	r3, [r7, #24]
 801c17a:	f8c3 2ba8 	str.w	r2, [r3, #2984]	; 0xba8
  if(p_obj->p_acc_event_src == NULL)
 801c17e:	69bb      	ldr	r3, [r7, #24]
 801c180:	f8d3 3ba8 	ldr.w	r3, [r3, #2984]	; 0xba8
 801c184:	2b00      	cmp	r3, #0
 801c186:	d106      	bne.n	801c196 <ISM330DHCXTask_vtblOnCreateTask+0x1a6>
  {
    SYS_SET_SERVICE_LEVEL_ERROR_CODE(SYS_OUT_OF_MEMORY_ERROR_CODE);
 801c188:	4b1c      	ldr	r3, [pc, #112]	; (801c1fc <ISM330DHCXTask_vtblOnCreateTask+0x20c>)
 801c18a:	2203      	movs	r2, #3
 801c18c:	805a      	strh	r2, [r3, #2]
    res = SYS_OUT_OF_MEMORY_ERROR_CODE;
 801c18e:	2303      	movs	r3, #3
 801c190:	83fb      	strh	r3, [r7, #30]
    return res;
 801c192:	8bfb      	ldrh	r3, [r7, #30]
 801c194:	e0d4      	b.n	801c340 <ISM330DHCXTask_vtblOnCreateTask+0x350>
  }
  IEventSrcInit(p_obj->p_acc_event_src);
 801c196:	69bb      	ldr	r3, [r7, #24]
 801c198:	f8d3 3ba8 	ldr.w	r3, [r3, #2984]	; 0xba8
 801c19c:	4618      	mov	r0, r3
 801c19e:	f7ff fe26 	bl	801bdee <IEventSrcInit>

  p_obj->p_gyro_event_src = SensorEventSrcAlloc();
 801c1a2:	f004 fbd1 	bl	8020948 <SensorEventSrcAlloc>
 801c1a6:	4602      	mov	r2, r0
 801c1a8:	69bb      	ldr	r3, [r7, #24]
 801c1aa:	f8c3 2bac 	str.w	r2, [r3, #2988]	; 0xbac
  if(p_obj->p_gyro_event_src == NULL)
 801c1ae:	69bb      	ldr	r3, [r7, #24]
 801c1b0:	f8d3 3bac 	ldr.w	r3, [r3, #2988]	; 0xbac
 801c1b4:	2b00      	cmp	r3, #0
 801c1b6:	d106      	bne.n	801c1c6 <ISM330DHCXTask_vtblOnCreateTask+0x1d6>
  {
    SYS_SET_SERVICE_LEVEL_ERROR_CODE(SYS_OUT_OF_MEMORY_ERROR_CODE);
 801c1b8:	4b10      	ldr	r3, [pc, #64]	; (801c1fc <ISM330DHCXTask_vtblOnCreateTask+0x20c>)
 801c1ba:	2203      	movs	r2, #3
 801c1bc:	805a      	strh	r2, [r3, #2]
    res = SYS_OUT_OF_MEMORY_ERROR_CODE;
 801c1be:	2303      	movs	r3, #3
 801c1c0:	83fb      	strh	r3, [r7, #30]
    return res;
 801c1c2:	8bfb      	ldrh	r3, [r7, #30]
 801c1c4:	e0bc      	b.n	801c340 <ISM330DHCXTask_vtblOnCreateTask+0x350>
  }
  IEventSrcInit(p_obj->p_gyro_event_src);
 801c1c6:	69bb      	ldr	r3, [r7, #24]
 801c1c8:	f8d3 3bac 	ldr.w	r3, [r3, #2988]	; 0xbac
 801c1cc:	4618      	mov	r0, r3
 801c1ce:	f7ff fe0e 	bl	801bdee <IEventSrcInit>

  p_obj->p_mlc_event_src = SensorEventSrcAlloc();
 801c1d2:	f004 fbb9 	bl	8020948 <SensorEventSrcAlloc>
 801c1d6:	4602      	mov	r2, r0
 801c1d8:	69bb      	ldr	r3, [r7, #24]
 801c1da:	f8c3 2bb0 	str.w	r2, [r3, #2992]	; 0xbb0
  if(p_obj->p_mlc_event_src == NULL)
 801c1de:	69bb      	ldr	r3, [r7, #24]
 801c1e0:	f8d3 3bb0 	ldr.w	r3, [r3, #2992]	; 0xbb0
 801c1e4:	2b00      	cmp	r3, #0
 801c1e6:	d119      	bne.n	801c21c <ISM330DHCXTask_vtblOnCreateTask+0x22c>
  {
    SYS_SET_SERVICE_LEVEL_ERROR_CODE(SYS_OUT_OF_MEMORY_ERROR_CODE);
 801c1e8:	4b04      	ldr	r3, [pc, #16]	; (801c1fc <ISM330DHCXTask_vtblOnCreateTask+0x20c>)
 801c1ea:	2203      	movs	r2, #3
 801c1ec:	805a      	strh	r2, [r3, #2]
    res = SYS_OUT_OF_MEMORY_ERROR_CODE;
 801c1ee:	2303      	movs	r3, #3
 801c1f0:	83fb      	strh	r3, [r7, #30]
    return res;
 801c1f2:	8bfb      	ldrh	r3, [r7, #30]
 801c1f4:	e0a4      	b.n	801c340 <ISM330DHCXTask_vtblOnCreateTask+0x350>
 801c1f6:	bf00      	nop
 801c1f8:	080274b8 	.word	0x080274b8
 801c1fc:	20000700 	.word	0x20000700
 801c200:	08027528 	.word	0x08027528
 801c204:	0801f0c1 	.word	0x0801f0c1
 801c208:	08027538 	.word	0x08027538
 801c20c:	0801f111 	.word	0x0801f111
 801c210:	08027548 	.word	0x08027548
 801c214:	0802755c 	.word	0x0802755c
 801c218:	08035d24 	.word	0x08035d24
  }
  IEventSrcInit(p_obj->p_mlc_event_src);
 801c21c:	69bb      	ldr	r3, [r7, #24]
 801c21e:	f8d3 3bb0 	ldr.w	r3, [r3, #2992]	; 0xbb0
 801c222:	4618      	mov	r0, r3
 801c224:	f7ff fde3 	bl	801bdee <IEventSrcInit>

  memset(p_obj->p_fast_sensor_data_buff, 0, sizeof(p_obj->p_fast_sensor_data_buff));
 801c228:	69bb      	ldr	r3, [r7, #24]
 801c22a:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 801c22e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 801c232:	2100      	movs	r1, #0
 801c234:	4618      	mov	r0, r3
 801c236:	f007 fcf8 	bl	8023c2a <memset>
  memset(p_obj->p_slow_sensor_data_buff, 0, sizeof(p_obj->p_slow_sensor_data_buff));
 801c23a:	69bb      	ldr	r3, [r7, #24]
 801c23c:	f503 6309 	add.w	r3, r3, #2192	; 0x890
 801c240:	f44f 7240 	mov.w	r2, #768	; 0x300
 801c244:	2100      	movs	r1, #0
 801c246:	4618      	mov	r0, r3
 801c248:	f007 fcef 	bl	8023c2a <memset>
  memset(p_obj->p_mlc_sensor_data_buff, 0, sizeof(p_obj->p_mlc_sensor_data_buff));
 801c24c:	69bb      	ldr	r3, [r7, #24]
 801c24e:	f503 6339 	add.w	r3, r3, #2960	; 0xb90
 801c252:	2210      	movs	r2, #16
 801c254:	2100      	movs	r1, #0
 801c256:	4618      	mov	r0, r3
 801c258:	f007 fce7 	bl	8023c2a <memset>
  p_obj->acc_id = 0;
 801c25c:	69bb      	ldr	r3, [r7, #24]
 801c25e:	2200      	movs	r2, #0
 801c260:	f883 2154 	strb.w	r2, [r3, #340]	; 0x154
  p_obj->gyro_id = 1;
 801c264:	69bb      	ldr	r3, [r7, #24]
 801c266:	2201      	movs	r2, #1
 801c268:	f883 2155 	strb.w	r2, [r3, #341]	; 0x155
  p_obj->mlc_enable = FALSE;
 801c26c:	69bb      	ldr	r3, [r7, #24]
 801c26e:	2200      	movs	r2, #0
 801c270:	f883 2157 	strb.w	r2, [r3, #343]	; 0x157
  p_obj->timestamp_tick = 0;
 801c274:	69bb      	ldr	r3, [r7, #24]
 801c276:	2200      	movs	r2, #0
 801c278:	f8c3 2c0c 	str.w	r2, [r3, #3084]	; 0xc0c
  p_obj->old_timestamp_tick = 0;
 801c27c:	69bb      	ldr	r3, [r7, #24]
 801c27e:	2200      	movs	r2, #0
 801c280:	f8c3 2c10 	str.w	r2, [r3, #3088]	; 0xc10
  p_obj->timestamp = 0;
 801c284:	69bb      	ldr	r3, [r7, #24]
 801c286:	f503 6342 	add.w	r3, r3, #3104	; 0xc20
 801c28a:	4619      	mov	r1, r3
 801c28c:	f04f 0200 	mov.w	r2, #0
 801c290:	f04f 0300 	mov.w	r3, #0
 801c294:	e941 2302 	strd	r2, r3, [r1, #-8]
  p_obj->acc_samples_count = 0;
 801c298:	69bb      	ldr	r3, [r7, #24]
 801c29a:	2200      	movs	r2, #0
 801c29c:	f8a3 2ba2 	strh.w	r2, [r3, #2978]	; 0xba2
  p_obj->gyro_samples_count = 0;
 801c2a0:	69bb      	ldr	r3, [r7, #24]
 801c2a2:	2200      	movs	r2, #0
 801c2a4:	f8a3 2ba4 	strh.w	r2, [r3, #2980]	; 0xba4
  p_obj->samples_per_it = 0;
 801c2a8:	69bb      	ldr	r3, [r7, #24]
 801c2aa:	2200      	movs	r2, #0
 801c2ac:	f8a3 2ba0 	strh.w	r2, [r3, #2976]	; 0xba0
  _this->m_pfPMState2FuncMap = sTheClass.p_pm_state2func_map;
 801c2b0:	68fb      	ldr	r3, [r7, #12]
 801c2b2:	4a25      	ldr	r2, [pc, #148]	; (801c348 <ISM330DHCXTask_vtblOnCreateTask+0x358>)
 801c2b4:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

  *pTaskCode = AMTExRun;
 801c2b8:	68bb      	ldr	r3, [r7, #8]
 801c2ba:	4a24      	ldr	r2, [pc, #144]	; (801c34c <ISM330DHCXTask_vtblOnCreateTask+0x35c>)
 801c2bc:	601a      	str	r2, [r3, #0]
  *pName = "ISM330DHCX";
 801c2be:	687b      	ldr	r3, [r7, #4]
 801c2c0:	4a23      	ldr	r2, [pc, #140]	; (801c350 <ISM330DHCXTask_vtblOnCreateTask+0x360>)
 801c2c2:	601a      	str	r2, [r3, #0]
  *pvStackStart = NULL; // allocate the task stack in the system memory pool.
 801c2c4:	683b      	ldr	r3, [r7, #0]
 801c2c6:	2200      	movs	r2, #0
 801c2c8:	601a      	str	r2, [r3, #0]
  *pStackDepth = ISM330DHCX_TASK_CFG_STACK_DEPTH;
 801c2ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c2cc:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 801c2d0:	601a      	str	r2, [r3, #0]
  *pParams = (ULONG) _this;
 801c2d2:	68fa      	ldr	r2, [r7, #12]
 801c2d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c2d6:	601a      	str	r2, [r3, #0]
  *pPriority = ISM330DHCX_TASK_CFG_PRIORITY;
 801c2d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c2da:	2208      	movs	r2, #8
 801c2dc:	601a      	str	r2, [r3, #0]
  *pPreemptThreshold = ISM330DHCX_TASK_CFG_PRIORITY;
 801c2de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c2e0:	2208      	movs	r2, #8
 801c2e2:	601a      	str	r2, [r3, #0]
  *pTimeSlice = TX_NO_TIME_SLICE;
 801c2e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c2e6:	2200      	movs	r2, #0
 801c2e8:	601a      	str	r2, [r3, #0]
  *pAutoStart = TX_AUTO_START;
 801c2ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c2ec:	2201      	movs	r2, #1
 801c2ee:	601a      	str	r2, [r3, #0]

  res = ISM330DHCXTaskSensorInitTaskParams(p_obj);
 801c2f0:	69b8      	ldr	r0, [r7, #24]
 801c2f2:	f002 f9c3 	bl	801e67c <ISM330DHCXTaskSensorInitTaskParams>
 801c2f6:	4603      	mov	r3, r0
 801c2f8:	83fb      	strh	r3, [r7, #30]
  if(SYS_IS_ERROR_CODE(res))
 801c2fa:	8bfb      	ldrh	r3, [r7, #30]
 801c2fc:	2b00      	cmp	r3, #0
 801c2fe:	d006      	beq.n	801c30e <ISM330DHCXTask_vtblOnCreateTask+0x31e>
  {
    SYS_SET_SERVICE_LEVEL_ERROR_CODE(SYS_OUT_OF_MEMORY_ERROR_CODE);
 801c300:	4b14      	ldr	r3, [pc, #80]	; (801c354 <ISM330DHCXTask_vtblOnCreateTask+0x364>)
 801c302:	2203      	movs	r2, #3
 801c304:	805a      	strh	r2, [r3, #2]
    res = SYS_OUT_OF_MEMORY_ERROR_CODE;
 801c306:	2303      	movs	r3, #3
 801c308:	83fb      	strh	r3, [r7, #30]
    return res;
 801c30a:	8bfb      	ldrh	r3, [r7, #30]
 801c30c:	e018      	b.n	801c340 <ISM330DHCXTask_vtblOnCreateTask+0x350>
  }

  res = ISM330DHCXTaskSensorRegister(p_obj);
 801c30e:	69b8      	ldr	r0, [r7, #24]
 801c310:	f002 f97a 	bl	801e608 <ISM330DHCXTaskSensorRegister>
 801c314:	4603      	mov	r3, r0
 801c316:	83fb      	strh	r3, [r7, #30]
  if(SYS_IS_ERROR_CODE(res))
 801c318:	8bfb      	ldrh	r3, [r7, #30]
 801c31a:	2b00      	cmp	r3, #0
 801c31c:	d00f      	beq.n	801c33e <ISM330DHCXTask_vtblOnCreateTask+0x34e>
  {
    SYS_DEBUGF(SYS_DBG_LEVEL_VERBOSE, ("ISM330DHCX: unable to register with DB\r\n"));
 801c31e:	4b0e      	ldr	r3, [pc, #56]	; (801c358 <ISM330DHCXTask_vtblOnCreateTask+0x368>)
 801c320:	781b      	ldrb	r3, [r3, #0]
 801c322:	2b01      	cmp	r3, #1
 801c324:	d809      	bhi.n	801c33a <ISM330DHCXTask_vtblOnCreateTask+0x34a>
 801c326:	4b0d      	ldr	r3, [pc, #52]	; (801c35c <ISM330DHCXTask_vtblOnCreateTask+0x36c>)
 801c328:	681b      	ldr	r3, [r3, #0]
 801c32a:	4798      	blx	r3
 801c32c:	4b0c      	ldr	r3, [pc, #48]	; (801c360 <ISM330DHCXTask_vtblOnCreateTask+0x370>)
 801c32e:	681b      	ldr	r3, [r3, #0]
 801c330:	480c      	ldr	r0, [pc, #48]	; (801c364 <ISM330DHCXTask_vtblOnCreateTask+0x374>)
 801c332:	4798      	blx	r3
 801c334:	4b0c      	ldr	r3, [pc, #48]	; (801c368 <ISM330DHCXTask_vtblOnCreateTask+0x378>)
 801c336:	681b      	ldr	r3, [r3, #0]
 801c338:	4798      	blx	r3
    sys_error_handler();
 801c33a:	f7f2 fd0d 	bl	800ed58 <sys_error_handler>
  }

  return res;
 801c33e:	8bfb      	ldrh	r3, [r7, #30]
}
 801c340:	4618      	mov	r0, r3
 801c342:	3720      	adds	r7, #32
 801c344:	46bd      	mov	sp, r7
 801c346:	bd80      	pop	{r7, pc}
 801c348:	08035d18 	.word	0x08035d18
 801c34c:	0800e949 	.word	0x0800e949
 801c350:	08027578 	.word	0x08027578
 801c354:	20000700 	.word	0x20000700
 801c358:	2000002c 	.word	0x2000002c
 801c35c:	20000030 	.word	0x20000030
 801c360:	20000038 	.word	0x20000038
 801c364:	08027584 	.word	0x08027584
 801c368:	20000034 	.word	0x20000034

0801c36c <ISM330DHCXTask_vtblDoEnterPowerMode>:

sys_error_code_t ISM330DHCXTask_vtblDoEnterPowerMode(AManagedTask *_this, const EPowerMode ActivePowerMode, const EPowerMode NewPowerMode)
{
 801c36c:	b580      	push	{r7, lr}
 801c36e:	b08a      	sub	sp, #40	; 0x28
 801c370:	af00      	add	r7, sp, #0
 801c372:	6078      	str	r0, [r7, #4]
 801c374:	460b      	mov	r3, r1
 801c376:	70fb      	strb	r3, [r7, #3]
 801c378:	4613      	mov	r3, r2
 801c37a:	70bb      	strb	r3, [r7, #2]
  assert_param(_this != NULL);
 801c37c:	687b      	ldr	r3, [r7, #4]
 801c37e:	2b00      	cmp	r3, #0
 801c380:	d104      	bne.n	801c38c <ISM330DHCXTask_vtblDoEnterPowerMode+0x20>
 801c382:	f240 3173 	movw	r1, #883	; 0x373
 801c386:	4872      	ldr	r0, [pc, #456]	; (801c550 <ISM330DHCXTask_vtblDoEnterPowerMode+0x1e4>)
 801c388:	f7f8 ff8f 	bl	80152aa <assert_failed>
  sys_error_code_t res = SYS_NO_ERROR_CODE;
 801c38c:	2300      	movs	r3, #0
 801c38e:	84fb      	strh	r3, [r7, #38]	; 0x26
  ISM330DHCXTask *p_obj = (ISM330DHCXTask*) _this;
 801c390:	687b      	ldr	r3, [r7, #4]
 801c392:	623b      	str	r3, [r7, #32]
  stmdev_ctx_t *p_sensor_drv = (stmdev_ctx_t*) &p_obj->p_sensor_bus_if->m_xConnector;
 801c394:	6a3b      	ldr	r3, [r7, #32]
 801c396:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 801c39a:	61fb      	str	r3, [r7, #28]

  if(NewPowerMode == E_POWER_MODE_SENSORS_ACTIVE)
 801c39c:	78bb      	ldrb	r3, [r7, #2]
 801c39e:	2b02      	cmp	r3, #2
 801c3a0:	d145      	bne.n	801c42e <ISM330DHCXTask_vtblDoEnterPowerMode+0xc2>
  {
    if(ISM330DHCXTaskSensorIsActive(p_obj))
 801c3a2:	6a38      	ldr	r0, [r7, #32]
 801c3a4:	f002 fd46 	bl	801ee34 <ISM330DHCXTaskSensorIsActive>
 801c3a8:	4603      	mov	r3, r0
 801c3aa:	2b00      	cmp	r3, #0
 801c3ac:	d02f      	beq.n	801c40e <ISM330DHCXTask_vtblDoEnterPowerMode+0xa2>
    {
      SMMessage report =
 801c3ae:	f107 0308 	add.w	r3, r7, #8
 801c3b2:	2200      	movs	r2, #0
 801c3b4:	601a      	str	r2, [r3, #0]
 801c3b6:	605a      	str	r2, [r3, #4]
 801c3b8:	609a      	str	r2, [r3, #8]
 801c3ba:	60da      	str	r2, [r3, #12]
 801c3bc:	2304      	movs	r3, #4
 801c3be:	723b      	strb	r3, [r7, #8]
 801c3c0:	2301      	movs	r3, #1
 801c3c2:	817b      	strh	r3, [r7, #10]
      {
          .sensorMessage.messageId = SM_MESSAGE_ID_SENSOR_CMD,
          .sensorMessage.nCmdID = SENSOR_CMD_ID_INIT
      };

      if(tx_queue_send(&p_obj->in_queue, &report, AMT_MS_TO_TICKS(100)) != TX_SUCCESS)
 801c3c4:	6a3b      	ldr	r3, [r7, #32]
 801c3c6:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 801c3ca:	f107 0108 	add.w	r1, r7, #8
 801c3ce:	2264      	movs	r2, #100	; 0x64
 801c3d0:	4618      	mov	r0, r3
 801c3d2:	f7f6 fd8b 	bl	8012eec <_txe_queue_send>
 801c3d6:	4603      	mov	r3, r0
 801c3d8:	2b00      	cmp	r3, #0
 801c3da:	d006      	beq.n	801c3ea <ISM330DHCXTask_vtblDoEnterPowerMode+0x7e>
      {
        res = SYS_APP_TASK_REPORT_LOST_ERROR_CODE;
 801c3dc:	f240 3323 	movw	r3, #803	; 0x323
 801c3e0:	84fb      	strh	r3, [r7, #38]	; 0x26
        SYS_SET_SERVICE_LEVEL_ERROR_CODE(SYS_APP_TASK_REPORT_LOST_ERROR_CODE);
 801c3e2:	4b5c      	ldr	r3, [pc, #368]	; (801c554 <ISM330DHCXTask_vtblDoEnterPowerMode+0x1e8>)
 801c3e4:	f240 3223 	movw	r2, #803	; 0x323
 801c3e8:	805a      	strh	r2, [r3, #2]
      }

      // reset the variables for the time stamp computation.
      p_obj->timestamp_tick = 0;
 801c3ea:	6a3b      	ldr	r3, [r7, #32]
 801c3ec:	2200      	movs	r2, #0
 801c3ee:	f8c3 2c0c 	str.w	r2, [r3, #3084]	; 0xc0c
      p_obj->old_timestamp_tick = 0;
 801c3f2:	6a3b      	ldr	r3, [r7, #32]
 801c3f4:	2200      	movs	r2, #0
 801c3f6:	f8c3 2c10 	str.w	r2, [r3, #3088]	; 0xc10
      p_obj->timestamp = 0;
 801c3fa:	6a3b      	ldr	r3, [r7, #32]
 801c3fc:	f503 6342 	add.w	r3, r3, #3104	; 0xc20
 801c400:	4619      	mov	r1, r3
 801c402:	f04f 0200 	mov.w	r2, #0
 801c406:	f04f 0300 	mov.w	r3, #0
 801c40a:	e941 2302 	strd	r2, r3, [r1, #-8]
    }

    SYS_DEBUGF(SYS_DBG_LEVEL_VERBOSE, ("ISM330DHCX: -> SENSORS_ACTIVE\r\n"));
 801c40e:	4b52      	ldr	r3, [pc, #328]	; (801c558 <ISM330DHCXTask_vtblDoEnterPowerMode+0x1ec>)
 801c410:	781b      	ldrb	r3, [r3, #0]
 801c412:	2b01      	cmp	r3, #1
 801c414:	f200 8097 	bhi.w	801c546 <ISM330DHCXTask_vtblDoEnterPowerMode+0x1da>
 801c418:	4b50      	ldr	r3, [pc, #320]	; (801c55c <ISM330DHCXTask_vtblDoEnterPowerMode+0x1f0>)
 801c41a:	681b      	ldr	r3, [r3, #0]
 801c41c:	4798      	blx	r3
 801c41e:	4b50      	ldr	r3, [pc, #320]	; (801c560 <ISM330DHCXTask_vtblDoEnterPowerMode+0x1f4>)
 801c420:	681b      	ldr	r3, [r3, #0]
 801c422:	4850      	ldr	r0, [pc, #320]	; (801c564 <ISM330DHCXTask_vtblDoEnterPowerMode+0x1f8>)
 801c424:	4798      	blx	r3
 801c426:	4b50      	ldr	r3, [pc, #320]	; (801c568 <ISM330DHCXTask_vtblDoEnterPowerMode+0x1fc>)
 801c428:	681b      	ldr	r3, [r3, #0]
 801c42a:	4798      	blx	r3
 801c42c:	e08b      	b.n	801c546 <ISM330DHCXTask_vtblDoEnterPowerMode+0x1da>
  }
  else if(NewPowerMode == E_POWER_MODE_STATE1)
 801c42e:	78bb      	ldrb	r3, [r7, #2]
 801c430:	2b00      	cmp	r3, #0
 801c432:	d135      	bne.n	801c4a0 <ISM330DHCXTask_vtblDoEnterPowerMode+0x134>
  {
    if(ActivePowerMode == E_POWER_MODE_SENSORS_ACTIVE)
 801c434:	78fb      	ldrb	r3, [r7, #3]
 801c436:	2b02      	cmp	r3, #2
 801c438:	d123      	bne.n	801c482 <ISM330DHCXTask_vtblDoEnterPowerMode+0x116>
    {
      /* SM_SENSOR_STATE_SUSPENDED */
      ism330dhcx_fifo_gy_batch_set(p_sensor_drv, ISM330DHCX_GY_NOT_BATCHED);
 801c43a:	2100      	movs	r1, #0
 801c43c:	69f8      	ldr	r0, [r7, #28]
 801c43e:	f7e6 fabf 	bl	80029c0 <ism330dhcx_fifo_gy_batch_set>
      ism330dhcx_fifo_xl_batch_set(p_sensor_drv, ISM330DHCX_XL_NOT_BATCHED);
 801c442:	2100      	movs	r1, #0
 801c444:	69f8      	ldr	r0, [r7, #28]
 801c446:	f7e6 fa95 	bl	8002974 <ism330dhcx_fifo_xl_batch_set>
      tx_queue_flush(&p_obj->in_queue);
 801c44a:	6a3b      	ldr	r3, [r7, #32]
 801c44c:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 801c450:	4618      	mov	r0, r3
 801c452:	f7f6 fc45 	bl	8012ce0 <_txe_queue_flush>
      if(p_obj->pIRQConfig == NULL)
 801c456:	6a3b      	ldr	r3, [r7, #32]
 801c458:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 801c45c:	2b00      	cmp	r3, #0
 801c45e:	d105      	bne.n	801c46c <ISM330DHCXTask_vtblDoEnterPowerMode+0x100>
      {
        tx_timer_deactivate(&p_obj->read_timer);
 801c460:	6a3b      	ldr	r3, [r7, #32]
 801c462:	f603 33b4 	addw	r3, r3, #2996	; 0xbb4
 801c466:	4618      	mov	r0, r3
 801c468:	f7f7 f910 	bl	801368c <_txe_timer_deactivate>
      }
      if(p_obj->pMLCConfig == NULL)
 801c46c:	6a3b      	ldr	r3, [r7, #32]
 801c46e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 801c472:	2b00      	cmp	r3, #0
 801c474:	d105      	bne.n	801c482 <ISM330DHCXTask_vtblDoEnterPowerMode+0x116>
      {
        tx_timer_deactivate(&p_obj->mlc_timer);
 801c476:	6a3b      	ldr	r3, [r7, #32]
 801c478:	f503 633e 	add.w	r3, r3, #3040	; 0xbe0
 801c47c:	4618      	mov	r0, r3
 801c47e:	f7f7 f905 	bl	801368c <_txe_timer_deactivate>
      }
    }
    SYS_DEBUGF(SYS_DBG_LEVEL_VERBOSE, ("ISM330DHCX: -> RUN\r\n"));
 801c482:	4b35      	ldr	r3, [pc, #212]	; (801c558 <ISM330DHCXTask_vtblDoEnterPowerMode+0x1ec>)
 801c484:	781b      	ldrb	r3, [r3, #0]
 801c486:	2b01      	cmp	r3, #1
 801c488:	d85d      	bhi.n	801c546 <ISM330DHCXTask_vtblDoEnterPowerMode+0x1da>
 801c48a:	4b34      	ldr	r3, [pc, #208]	; (801c55c <ISM330DHCXTask_vtblDoEnterPowerMode+0x1f0>)
 801c48c:	681b      	ldr	r3, [r3, #0]
 801c48e:	4798      	blx	r3
 801c490:	4b33      	ldr	r3, [pc, #204]	; (801c560 <ISM330DHCXTask_vtblDoEnterPowerMode+0x1f4>)
 801c492:	681b      	ldr	r3, [r3, #0]
 801c494:	4835      	ldr	r0, [pc, #212]	; (801c56c <ISM330DHCXTask_vtblDoEnterPowerMode+0x200>)
 801c496:	4798      	blx	r3
 801c498:	4b33      	ldr	r3, [pc, #204]	; (801c568 <ISM330DHCXTask_vtblDoEnterPowerMode+0x1fc>)
 801c49a:	681b      	ldr	r3, [r3, #0]
 801c49c:	4798      	blx	r3
 801c49e:	e052      	b.n	801c546 <ISM330DHCXTask_vtblDoEnterPowerMode+0x1da>
  }
  else if(NewPowerMode == E_POWER_MODE_SLEEP_1)
 801c4a0:	78bb      	ldrb	r3, [r7, #2]
 801c4a2:	2b01      	cmp	r3, #1
 801c4a4:	d14f      	bne.n	801c546 <ISM330DHCXTask_vtblDoEnterPowerMode+0x1da>
  {
    // the MCU is going in stop so I put the sensor in low power
    // from the INIT task
    res = ISM330DHCXTaskEnterLowPowerMode(p_obj);
 801c4a6:	6a38      	ldr	r0, [r7, #32]
 801c4a8:	f002 fce6 	bl	801ee78 <ISM330DHCXTaskEnterLowPowerMode>
 801c4ac:	4603      	mov	r3, r0
 801c4ae:	84fb      	strh	r3, [r7, #38]	; 0x26
    if(SYS_IS_ERROR_CODE(res))
 801c4b0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801c4b2:	2b00      	cmp	r3, #0
 801c4b4:	d001      	beq.n	801c4ba <ISM330DHCXTask_vtblDoEnterPowerMode+0x14e>
    {
      sys_error_handler();
 801c4b6:	f7f2 fc4f 	bl	800ed58 <sys_error_handler>
    }
    if(p_obj->pIRQConfig != NULL)
 801c4ba:	6a3b      	ldr	r3, [r7, #32]
 801c4bc:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 801c4c0:	2b00      	cmp	r3, #0
 801c4c2:	d003      	beq.n	801c4cc <ISM330DHCXTask_vtblDoEnterPowerMode+0x160>
    {
      ISM330DHCXTaskConfigureIrqPin(p_obj, TRUE);
 801c4c4:	2101      	movs	r1, #1
 801c4c6:	6a38      	ldr	r0, [r7, #32]
 801c4c8:	f002 fd0c 	bl	801eee4 <ISM330DHCXTaskConfigureIrqPin>
    }
    if(p_obj->pMLCConfig != NULL)
 801c4cc:	6a3b      	ldr	r3, [r7, #32]
 801c4ce:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 801c4d2:	2b00      	cmp	r3, #0
 801c4d4:	d003      	beq.n	801c4de <ISM330DHCXTask_vtblDoEnterPowerMode+0x172>
    {
      ISM330DHCXTaskConfigureMLCPin(p_obj, TRUE);
 801c4d6:	2101      	movs	r1, #1
 801c4d8:	6a38      	ldr	r0, [r7, #32]
 801c4da:	f002 fd51 	bl	801ef80 <ISM330DHCXTaskConfigureMLCPin>
    }
    // notify the bus
    if(p_obj->p_sensor_bus_if->m_pfBusCtrl != NULL)
 801c4de:	6a3b      	ldr	r3, [r7, #32]
 801c4e0:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 801c4e4:	695b      	ldr	r3, [r3, #20]
 801c4e6:	2b00      	cmp	r3, #0
 801c4e8:	d009      	beq.n	801c4fe <ISM330DHCXTask_vtblDoEnterPowerMode+0x192>
    {
      p_obj->p_sensor_bus_if->m_pfBusCtrl(p_obj->p_sensor_bus_if, E_BUS_CTRL_DEV_NOTIFY_POWER_MODE, 0);
 801c4ea:	6a3b      	ldr	r3, [r7, #32]
 801c4ec:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 801c4f0:	695b      	ldr	r3, [r3, #20]
 801c4f2:	6a3a      	ldr	r2, [r7, #32]
 801c4f4:	f8d2 00d0 	ldr.w	r0, [r2, #208]	; 0xd0
 801c4f8:	2200      	movs	r2, #0
 801c4fa:	2100      	movs	r1, #0
 801c4fc:	4798      	blx	r3
    }
    if(p_obj->pIRQConfig == NULL)
 801c4fe:	6a3b      	ldr	r3, [r7, #32]
 801c500:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 801c504:	2b00      	cmp	r3, #0
 801c506:	d105      	bne.n	801c514 <ISM330DHCXTask_vtblDoEnterPowerMode+0x1a8>
    {
      tx_timer_deactivate(&p_obj->read_timer);
 801c508:	6a3b      	ldr	r3, [r7, #32]
 801c50a:	f603 33b4 	addw	r3, r3, #2996	; 0xbb4
 801c50e:	4618      	mov	r0, r3
 801c510:	f7f7 f8bc 	bl	801368c <_txe_timer_deactivate>
    }
    if(p_obj->pMLCConfig == NULL)
 801c514:	6a3b      	ldr	r3, [r7, #32]
 801c516:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 801c51a:	2b00      	cmp	r3, #0
 801c51c:	d105      	bne.n	801c52a <ISM330DHCXTask_vtblDoEnterPowerMode+0x1be>
    {
      tx_timer_deactivate(&p_obj->mlc_timer);
 801c51e:	6a3b      	ldr	r3, [r7, #32]
 801c520:	f503 633e 	add.w	r3, r3, #3040	; 0xbe0
 801c524:	4618      	mov	r0, r3
 801c526:	f7f7 f8b1 	bl	801368c <_txe_timer_deactivate>
    }

    SYS_DEBUGF(SYS_DBG_LEVEL_VERBOSE, ("ISM330DHCX: -> SLEEP_1\r\n"));
 801c52a:	4b0b      	ldr	r3, [pc, #44]	; (801c558 <ISM330DHCXTask_vtblDoEnterPowerMode+0x1ec>)
 801c52c:	781b      	ldrb	r3, [r3, #0]
 801c52e:	2b01      	cmp	r3, #1
 801c530:	d809      	bhi.n	801c546 <ISM330DHCXTask_vtblDoEnterPowerMode+0x1da>
 801c532:	4b0a      	ldr	r3, [pc, #40]	; (801c55c <ISM330DHCXTask_vtblDoEnterPowerMode+0x1f0>)
 801c534:	681b      	ldr	r3, [r3, #0]
 801c536:	4798      	blx	r3
 801c538:	4b09      	ldr	r3, [pc, #36]	; (801c560 <ISM330DHCXTask_vtblDoEnterPowerMode+0x1f4>)
 801c53a:	681b      	ldr	r3, [r3, #0]
 801c53c:	480c      	ldr	r0, [pc, #48]	; (801c570 <ISM330DHCXTask_vtblDoEnterPowerMode+0x204>)
 801c53e:	4798      	blx	r3
 801c540:	4b09      	ldr	r3, [pc, #36]	; (801c568 <ISM330DHCXTask_vtblDoEnterPowerMode+0x1fc>)
 801c542:	681b      	ldr	r3, [r3, #0]
 801c544:	4798      	blx	r3
  }

  return res;
 801c546:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
 801c548:	4618      	mov	r0, r3
 801c54a:	3728      	adds	r7, #40	; 0x28
 801c54c:	46bd      	mov	sp, r7
 801c54e:	bd80      	pop	{r7, pc}
 801c550:	080274b8 	.word	0x080274b8
 801c554:	20000700 	.word	0x20000700
 801c558:	2000002c 	.word	0x2000002c
 801c55c:	20000030 	.word	0x20000030
 801c560:	20000038 	.word	0x20000038
 801c564:	080275b0 	.word	0x080275b0
 801c568:	20000034 	.word	0x20000034
 801c56c:	080275d0 	.word	0x080275d0
 801c570:	080275e8 	.word	0x080275e8

0801c574 <ISM330DHCXTask_vtblHandleError>:

sys_error_code_t ISM330DHCXTask_vtblHandleError(AManagedTask *_this, SysEvent Error)
{
 801c574:	b580      	push	{r7, lr}
 801c576:	b084      	sub	sp, #16
 801c578:	af00      	add	r7, sp, #0
 801c57a:	6078      	str	r0, [r7, #4]
 801c57c:	6039      	str	r1, [r7, #0]
  assert_param(_this != NULL);
 801c57e:	687b      	ldr	r3, [r7, #4]
 801c580:	2b00      	cmp	r3, #0
 801c582:	d104      	bne.n	801c58e <ISM330DHCXTask_vtblHandleError+0x1a>
 801c584:	f240 31ca 	movw	r1, #970	; 0x3ca
 801c588:	4804      	ldr	r0, [pc, #16]	; (801c59c <ISM330DHCXTask_vtblHandleError+0x28>)
 801c58a:	f7f8 fe8e 	bl	80152aa <assert_failed>
  sys_error_code_t res = SYS_NO_ERROR_CODE;
 801c58e:	2300      	movs	r3, #0
 801c590:	81fb      	strh	r3, [r7, #14]

  return res;
 801c592:	89fb      	ldrh	r3, [r7, #14]
}
 801c594:	4618      	mov	r0, r3
 801c596:	3710      	adds	r7, #16
 801c598:	46bd      	mov	sp, r7
 801c59a:	bd80      	pop	{r7, pc}
 801c59c:	080274b8 	.word	0x080274b8

0801c5a0 <ISM330DHCXTask_vtblOnEnterTaskControlLoop>:

sys_error_code_t ISM330DHCXTask_vtblOnEnterTaskControlLoop(AManagedTask *_this)
{
 801c5a0:	b580      	push	{r7, lr}
 801c5a2:	b084      	sub	sp, #16
 801c5a4:	af00      	add	r7, sp, #0
 801c5a6:	6078      	str	r0, [r7, #4]
  assert_param(_this != NULL);
 801c5a8:	687b      	ldr	r3, [r7, #4]
 801c5aa:	2b00      	cmp	r3, #0
 801c5ac:	d104      	bne.n	801c5b8 <ISM330DHCXTask_vtblOnEnterTaskControlLoop+0x18>
 801c5ae:	f240 31d2 	movw	r1, #978	; 0x3d2
 801c5b2:	480c      	ldr	r0, [pc, #48]	; (801c5e4 <ISM330DHCXTask_vtblOnEnterTaskControlLoop+0x44>)
 801c5b4:	f7f8 fe79 	bl	80152aa <assert_failed>
  sys_error_code_t res = SYS_NO_ERROR_CODE;
 801c5b8:	2300      	movs	r3, #0
 801c5ba:	81fb      	strh	r3, [r7, #14]

  SYS_DEBUGF(SYS_DBG_LEVEL_VERBOSE, ("ISM330DHCX: start.\r\n"));
 801c5bc:	4b0a      	ldr	r3, [pc, #40]	; (801c5e8 <ISM330DHCXTask_vtblOnEnterTaskControlLoop+0x48>)
 801c5be:	781b      	ldrb	r3, [r3, #0]
 801c5c0:	2b01      	cmp	r3, #1
 801c5c2:	d809      	bhi.n	801c5d8 <ISM330DHCXTask_vtblOnEnterTaskControlLoop+0x38>
 801c5c4:	4b09      	ldr	r3, [pc, #36]	; (801c5ec <ISM330DHCXTask_vtblOnEnterTaskControlLoop+0x4c>)
 801c5c6:	681b      	ldr	r3, [r3, #0]
 801c5c8:	4798      	blx	r3
 801c5ca:	4b09      	ldr	r3, [pc, #36]	; (801c5f0 <ISM330DHCXTask_vtblOnEnterTaskControlLoop+0x50>)
 801c5cc:	681b      	ldr	r3, [r3, #0]
 801c5ce:	4809      	ldr	r0, [pc, #36]	; (801c5f4 <ISM330DHCXTask_vtblOnEnterTaskControlLoop+0x54>)
 801c5d0:	4798      	blx	r3
 801c5d2:	4b09      	ldr	r3, [pc, #36]	; (801c5f8 <ISM330DHCXTask_vtblOnEnterTaskControlLoop+0x58>)
 801c5d4:	681b      	ldr	r3, [r3, #0]
 801c5d6:	4798      	blx	r3

  // At this point all system has been initialized.
  // Execute task specific delayed one time initialization.

  return res;
 801c5d8:	89fb      	ldrh	r3, [r7, #14]
}
 801c5da:	4618      	mov	r0, r3
 801c5dc:	3710      	adds	r7, #16
 801c5de:	46bd      	mov	sp, r7
 801c5e0:	bd80      	pop	{r7, pc}
 801c5e2:	bf00      	nop
 801c5e4:	080274b8 	.word	0x080274b8
 801c5e8:	2000002c 	.word	0x2000002c
 801c5ec:	20000030 	.word	0x20000030
 801c5f0:	20000038 	.word	0x20000038
 801c5f4:	08027604 	.word	0x08027604
 801c5f8:	20000034 	.word	0x20000034

0801c5fc <ISM330DHCXTask_vtblForceExecuteStep>:

sys_error_code_t ISM330DHCXTask_vtblForceExecuteStep(AManagedTaskEx *_this, EPowerMode ActivePowerMode)
{
 801c5fc:	b580      	push	{r7, lr}
 801c5fe:	b090      	sub	sp, #64	; 0x40
 801c600:	af06      	add	r7, sp, #24
 801c602:	6078      	str	r0, [r7, #4]
 801c604:	460b      	mov	r3, r1
 801c606:	70fb      	strb	r3, [r7, #3]
  assert_param(_this != NULL);
 801c608:	687b      	ldr	r3, [r7, #4]
 801c60a:	2b00      	cmp	r3, #0
 801c60c:	d104      	bne.n	801c618 <ISM330DHCXTask_vtblForceExecuteStep+0x1c>
 801c60e:	f240 31df 	movw	r1, #991	; 0x3df
 801c612:	4823      	ldr	r0, [pc, #140]	; (801c6a0 <ISM330DHCXTask_vtblForceExecuteStep+0xa4>)
 801c614:	f7f8 fe49 	bl	80152aa <assert_failed>
  sys_error_code_t res = SYS_NO_ERROR_CODE;
 801c618:	2300      	movs	r3, #0
 801c61a:	84fb      	strh	r3, [r7, #38]	; 0x26
  ISM330DHCXTask *p_obj = (ISM330DHCXTask*) _this;
 801c61c:	687b      	ldr	r3, [r7, #4]
 801c61e:	623b      	str	r3, [r7, #32]

  SMMessage report =
 801c620:	f107 0310 	add.w	r3, r7, #16
 801c624:	2200      	movs	r2, #0
 801c626:	601a      	str	r2, [r3, #0]
 801c628:	605a      	str	r2, [r3, #4]
 801c62a:	609a      	str	r2, [r3, #8]
 801c62c:	60da      	str	r2, [r3, #12]
 801c62e:	23fe      	movs	r3, #254	; 0xfe
 801c630:	743b      	strb	r3, [r7, #16]
  {
      .internalMessageFE.messageId = SM_MESSAGE_ID_FORCE_STEP,
      .internalMessageFE.nData = 0
  };

  if((ActivePowerMode == E_POWER_MODE_STATE1) || (ActivePowerMode == E_POWER_MODE_SENSORS_ACTIVE))
 801c632:	78fb      	ldrb	r3, [r7, #3]
 801c634:	2b00      	cmp	r3, #0
 801c636:	d002      	beq.n	801c63e <ISM330DHCXTask_vtblForceExecuteStep+0x42>
 801c638:	78fb      	ldrb	r3, [r7, #3]
 801c63a:	2b02      	cmp	r3, #2
 801c63c:	d10e      	bne.n	801c65c <ISM330DHCXTask_vtblForceExecuteStep+0x60>
  {
    if(AMTExIsTaskInactive(_this))
 801c63e:	6878      	ldr	r0, [r7, #4]
 801c640:	f7ff fbaa 	bl	801bd98 <AMTExIsTaskInactive>
 801c644:	4603      	mov	r3, r0
 801c646:	2b00      	cmp	r3, #0
 801c648:	d025      	beq.n	801c696 <ISM330DHCXTask_vtblForceExecuteStep+0x9a>
    {
      res = ISM330DHCXTaskPostReportToFront(p_obj, (SMMessage*) &report);
 801c64a:	f107 0310 	add.w	r3, r7, #16
 801c64e:	4619      	mov	r1, r3
 801c650:	6a38      	ldr	r0, [r7, #32]
 801c652:	f001 fad7 	bl	801dc04 <ISM330DHCXTaskPostReportToFront>
 801c656:	4603      	mov	r3, r0
 801c658:	84fb      	strh	r3, [r7, #38]	; 0x26
    if(AMTExIsTaskInactive(_this))
 801c65a:	e01c      	b.n	801c696 <ISM330DHCXTask_vtblForceExecuteStep+0x9a>
    }
  }
  else
  {
    UINT state;
    if(TX_SUCCESS == tx_thread_info_get(&_this->m_xThaskHandle, TX_NULL, &state, TX_NULL, TX_NULL, TX_NULL, TX_NULL, TX_NULL, TX_NULL))
 801c65c:	687b      	ldr	r3, [r7, #4]
 801c65e:	1d18      	adds	r0, r3, #4
 801c660:	f107 020c 	add.w	r2, r7, #12
 801c664:	2300      	movs	r3, #0
 801c666:	9304      	str	r3, [sp, #16]
 801c668:	2300      	movs	r3, #0
 801c66a:	9303      	str	r3, [sp, #12]
 801c66c:	2300      	movs	r3, #0
 801c66e:	9302      	str	r3, [sp, #8]
 801c670:	2300      	movs	r3, #0
 801c672:	9301      	str	r3, [sp, #4]
 801c674:	2300      	movs	r3, #0
 801c676:	9300      	str	r3, [sp, #0]
 801c678:	2300      	movs	r3, #0
 801c67a:	2100      	movs	r1, #0
 801c67c:	f7f6 fe86 	bl	801338c <_txe_thread_info_get>
 801c680:	4603      	mov	r3, r0
 801c682:	2b00      	cmp	r3, #0
 801c684:	d107      	bne.n	801c696 <ISM330DHCXTask_vtblForceExecuteStep+0x9a>
    {
      if(state == TX_SUSPENDED)
 801c686:	68fb      	ldr	r3, [r7, #12]
 801c688:	2b03      	cmp	r3, #3
 801c68a:	d104      	bne.n	801c696 <ISM330DHCXTask_vtblForceExecuteStep+0x9a>
      {
        tx_thread_resume(&_this->m_xThaskHandle);
 801c68c:	687b      	ldr	r3, [r7, #4]
 801c68e:	3304      	adds	r3, #4
 801c690:	4618      	mov	r0, r3
 801c692:	f7f6 fea9 	bl	80133e8 <_txe_thread_resume>
      }
    }
  }

  return res;
 801c696:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
 801c698:	4618      	mov	r0, r3
 801c69a:	3728      	adds	r7, #40	; 0x28
 801c69c:	46bd      	mov	sp, r7
 801c69e:	bd80      	pop	{r7, pc}
 801c6a0:	080274b8 	.word	0x080274b8

0801c6a4 <ISM330DHCXTask_vtblOnEnterPowerMode>:

sys_error_code_t ISM330DHCXTask_vtblOnEnterPowerMode(AManagedTaskEx *_this, const EPowerMode ActivePowerMode, const EPowerMode NewPowerMode)
{
 801c6a4:	b580      	push	{r7, lr}
 801c6a6:	b084      	sub	sp, #16
 801c6a8:	af00      	add	r7, sp, #0
 801c6aa:	6078      	str	r0, [r7, #4]
 801c6ac:	460b      	mov	r3, r1
 801c6ae:	70fb      	strb	r3, [r7, #3]
 801c6b0:	4613      	mov	r3, r2
 801c6b2:	70bb      	strb	r3, [r7, #2]
  assert_param(_this != NULL);
 801c6b4:	687b      	ldr	r3, [r7, #4]
 801c6b6:	2b00      	cmp	r3, #0
 801c6b8:	d104      	bne.n	801c6c4 <ISM330DHCXTask_vtblOnEnterPowerMode+0x20>
 801c6ba:	f240 4106 	movw	r1, #1030	; 0x406
 801c6be:	4805      	ldr	r0, [pc, #20]	; (801c6d4 <ISM330DHCXTask_vtblOnEnterPowerMode+0x30>)
 801c6c0:	f7f8 fdf3 	bl	80152aa <assert_failed>
  sys_error_code_t res = SYS_NO_ERROR_CODE;
 801c6c4:	2300      	movs	r3, #0
 801c6c6:	81fb      	strh	r3, [r7, #14]
  //  ISM330DHCXTask *p_obj = (ISM330DHCXTask*)_this;

  return res;
 801c6c8:	89fb      	ldrh	r3, [r7, #14]
}
 801c6ca:	4618      	mov	r0, r3
 801c6cc:	3710      	adds	r7, #16
 801c6ce:	46bd      	mov	sp, r7
 801c6d0:	bd80      	pop	{r7, pc}
 801c6d2:	bf00      	nop
 801c6d4:	080274b8 	.word	0x080274b8

0801c6d8 <ISM330DHCXTask_vtblAccGetId>:

// ISensor virtual functions definition
// *******************************************

uint8_t ISM330DHCXTask_vtblAccGetId(ISourceObservable *_this)
{
 801c6d8:	b580      	push	{r7, lr}
 801c6da:	b084      	sub	sp, #16
 801c6dc:	af00      	add	r7, sp, #0
 801c6de:	6078      	str	r0, [r7, #4]
  assert_param(_this != NULL);
 801c6e0:	687b      	ldr	r3, [r7, #4]
 801c6e2:	2b00      	cmp	r3, #0
 801c6e4:	d104      	bne.n	801c6f0 <ISM330DHCXTask_vtblAccGetId+0x18>
 801c6e6:	f240 4112 	movw	r1, #1042	; 0x412
 801c6ea:	4807      	ldr	r0, [pc, #28]	; (801c708 <ISM330DHCXTask_vtblAccGetId+0x30>)
 801c6ec:	f7f8 fddd 	bl	80152aa <assert_failed>
  ISM330DHCXTask *p_if_owner = (ISM330DHCXTask*) ((uint32_t) _this - offsetof(ISM330DHCXTask, acc_sensor_if));
 801c6f0:	687b      	ldr	r3, [r7, #4]
 801c6f2:	3bd8      	subs	r3, #216	; 0xd8
 801c6f4:	60fb      	str	r3, [r7, #12]
  uint8_t res = p_if_owner->acc_id;
 801c6f6:	68fb      	ldr	r3, [r7, #12]
 801c6f8:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 801c6fc:	72fb      	strb	r3, [r7, #11]

  return res;
 801c6fe:	7afb      	ldrb	r3, [r7, #11]
}
 801c700:	4618      	mov	r0, r3
 801c702:	3710      	adds	r7, #16
 801c704:	46bd      	mov	sp, r7
 801c706:	bd80      	pop	{r7, pc}
 801c708:	080274b8 	.word	0x080274b8

0801c70c <ISM330DHCXTask_vtblGyroGetId>:

uint8_t ISM330DHCXTask_vtblGyroGetId(ISourceObservable *_this)
{
 801c70c:	b580      	push	{r7, lr}
 801c70e:	b084      	sub	sp, #16
 801c710:	af00      	add	r7, sp, #0
 801c712:	6078      	str	r0, [r7, #4]
  assert_param(_this != NULL);
 801c714:	687b      	ldr	r3, [r7, #4]
 801c716:	2b00      	cmp	r3, #0
 801c718:	d104      	bne.n	801c724 <ISM330DHCXTask_vtblGyroGetId+0x18>
 801c71a:	f240 411b 	movw	r1, #1051	; 0x41b
 801c71e:	4807      	ldr	r0, [pc, #28]	; (801c73c <ISM330DHCXTask_vtblGyroGetId+0x30>)
 801c720:	f7f8 fdc3 	bl	80152aa <assert_failed>
  ISM330DHCXTask *p_if_owner = (ISM330DHCXTask*) ((uint32_t) _this - offsetof(ISM330DHCXTask, gyro_sensor_if));
 801c724:	687b      	ldr	r3, [r7, #4]
 801c726:	3bdc      	subs	r3, #220	; 0xdc
 801c728:	60fb      	str	r3, [r7, #12]
  uint8_t res = p_if_owner->gyro_id;
 801c72a:	68fb      	ldr	r3, [r7, #12]
 801c72c:	f893 3155 	ldrb.w	r3, [r3, #341]	; 0x155
 801c730:	72fb      	strb	r3, [r7, #11]

  return res;
 801c732:	7afb      	ldrb	r3, [r7, #11]
}
 801c734:	4618      	mov	r0, r3
 801c736:	3710      	adds	r7, #16
 801c738:	46bd      	mov	sp, r7
 801c73a:	bd80      	pop	{r7, pc}
 801c73c:	080274b8 	.word	0x080274b8

0801c740 <ISM330DHCXTask_vtblMlcGetId>:

uint8_t ISM330DHCXTask_vtblMlcGetId(ISourceObservable *_this)
{
 801c740:	b580      	push	{r7, lr}
 801c742:	b084      	sub	sp, #16
 801c744:	af00      	add	r7, sp, #0
 801c746:	6078      	str	r0, [r7, #4]
  assert_param(_this != NULL);
 801c748:	687b      	ldr	r3, [r7, #4]
 801c74a:	2b00      	cmp	r3, #0
 801c74c:	d104      	bne.n	801c758 <ISM330DHCXTask_vtblMlcGetId+0x18>
 801c74e:	f240 4124 	movw	r1, #1060	; 0x424
 801c752:	4807      	ldr	r0, [pc, #28]	; (801c770 <ISM330DHCXTask_vtblMlcGetId+0x30>)
 801c754:	f7f8 fda9 	bl	80152aa <assert_failed>
  ISM330DHCXTask *p_if_owner = (ISM330DHCXTask*) ((uint32_t) _this - offsetof(ISM330DHCXTask, mlc_fakesensor_if));
 801c758:	687b      	ldr	r3, [r7, #4]
 801c75a:	3be0      	subs	r3, #224	; 0xe0
 801c75c:	60fb      	str	r3, [r7, #12]
  uint8_t res = p_if_owner->mlc_id;
 801c75e:	68fb      	ldr	r3, [r7, #12]
 801c760:	f893 3156 	ldrb.w	r3, [r3, #342]	; 0x156
 801c764:	72fb      	strb	r3, [r7, #11]

  return res;
 801c766:	7afb      	ldrb	r3, [r7, #11]
}
 801c768:	4618      	mov	r0, r3
 801c76a:	3710      	adds	r7, #16
 801c76c:	46bd      	mov	sp, r7
 801c76e:	bd80      	pop	{r7, pc}
 801c770:	080274b8 	.word	0x080274b8

0801c774 <ISM330DHCXTask_vtblAccGetEventSourceIF>:

IEventSrc* ISM330DHCXTask_vtblAccGetEventSourceIF(ISourceObservable *_this)
{
 801c774:	b580      	push	{r7, lr}
 801c776:	b084      	sub	sp, #16
 801c778:	af00      	add	r7, sp, #0
 801c77a:	6078      	str	r0, [r7, #4]
  assert_param(_this != NULL);
 801c77c:	687b      	ldr	r3, [r7, #4]
 801c77e:	2b00      	cmp	r3, #0
 801c780:	d104      	bne.n	801c78c <ISM330DHCXTask_vtblAccGetEventSourceIF+0x18>
 801c782:	f240 412d 	movw	r1, #1069	; 0x42d
 801c786:	4806      	ldr	r0, [pc, #24]	; (801c7a0 <ISM330DHCXTask_vtblAccGetEventSourceIF+0x2c>)
 801c788:	f7f8 fd8f 	bl	80152aa <assert_failed>
  ISM330DHCXTask *p_if_owner = (ISM330DHCXTask*) ((uint32_t) _this - offsetof(ISM330DHCXTask, acc_sensor_if));
 801c78c:	687b      	ldr	r3, [r7, #4]
 801c78e:	3bd8      	subs	r3, #216	; 0xd8
 801c790:	60fb      	str	r3, [r7, #12]

  return p_if_owner->p_acc_event_src;
 801c792:	68fb      	ldr	r3, [r7, #12]
 801c794:	f8d3 3ba8 	ldr.w	r3, [r3, #2984]	; 0xba8
}
 801c798:	4618      	mov	r0, r3
 801c79a:	3710      	adds	r7, #16
 801c79c:	46bd      	mov	sp, r7
 801c79e:	bd80      	pop	{r7, pc}
 801c7a0:	080274b8 	.word	0x080274b8

0801c7a4 <ISM330DHCXTask_vtblGyroGetEventSourceIF>:

IEventSrc* ISM330DHCXTask_vtblGyroGetEventSourceIF(ISourceObservable *_this)
{
 801c7a4:	b580      	push	{r7, lr}
 801c7a6:	b084      	sub	sp, #16
 801c7a8:	af00      	add	r7, sp, #0
 801c7aa:	6078      	str	r0, [r7, #4]
  assert_param(_this != NULL);
 801c7ac:	687b      	ldr	r3, [r7, #4]
 801c7ae:	2b00      	cmp	r3, #0
 801c7b0:	d104      	bne.n	801c7bc <ISM330DHCXTask_vtblGyroGetEventSourceIF+0x18>
 801c7b2:	f240 4135 	movw	r1, #1077	; 0x435
 801c7b6:	4806      	ldr	r0, [pc, #24]	; (801c7d0 <ISM330DHCXTask_vtblGyroGetEventSourceIF+0x2c>)
 801c7b8:	f7f8 fd77 	bl	80152aa <assert_failed>
  ISM330DHCXTask *p_if_owner = (ISM330DHCXTask*) ((uint32_t) _this - offsetof(ISM330DHCXTask, gyro_sensor_if));
 801c7bc:	687b      	ldr	r3, [r7, #4]
 801c7be:	3bdc      	subs	r3, #220	; 0xdc
 801c7c0:	60fb      	str	r3, [r7, #12]
  return p_if_owner->p_gyro_event_src;
 801c7c2:	68fb      	ldr	r3, [r7, #12]
 801c7c4:	f8d3 3bac 	ldr.w	r3, [r3, #2988]	; 0xbac
}
 801c7c8:	4618      	mov	r0, r3
 801c7ca:	3710      	adds	r7, #16
 801c7cc:	46bd      	mov	sp, r7
 801c7ce:	bd80      	pop	{r7, pc}
 801c7d0:	080274b8 	.word	0x080274b8

0801c7d4 <ISM330DHCXTask_vtblMlcGetEventSourceIF>:

IEventSrc* ISM330DHCXTask_vtblMlcGetEventSourceIF(ISourceObservable *_this)
{
 801c7d4:	b580      	push	{r7, lr}
 801c7d6:	b084      	sub	sp, #16
 801c7d8:	af00      	add	r7, sp, #0
 801c7da:	6078      	str	r0, [r7, #4]
  assert_param(_this != NULL);
 801c7dc:	687b      	ldr	r3, [r7, #4]
 801c7de:	2b00      	cmp	r3, #0
 801c7e0:	d104      	bne.n	801c7ec <ISM330DHCXTask_vtblMlcGetEventSourceIF+0x18>
 801c7e2:	f240 413c 	movw	r1, #1084	; 0x43c
 801c7e6:	4806      	ldr	r0, [pc, #24]	; (801c800 <ISM330DHCXTask_vtblMlcGetEventSourceIF+0x2c>)
 801c7e8:	f7f8 fd5f 	bl	80152aa <assert_failed>
  ISM330DHCXTask *p_if_owner = (ISM330DHCXTask*) ((uint32_t) _this - offsetof(ISM330DHCXTask, mlc_fakesensor_if));
 801c7ec:	687b      	ldr	r3, [r7, #4]
 801c7ee:	3be0      	subs	r3, #224	; 0xe0
 801c7f0:	60fb      	str	r3, [r7, #12]
  return p_if_owner->p_mlc_event_src;
 801c7f2:	68fb      	ldr	r3, [r7, #12]
 801c7f4:	f8d3 3bb0 	ldr.w	r3, [r3, #2992]	; 0xbb0
}
 801c7f8:	4618      	mov	r0, r3
 801c7fa:	3710      	adds	r7, #16
 801c7fc:	46bd      	mov	sp, r7
 801c7fe:	bd80      	pop	{r7, pc}
 801c800:	080274b8 	.word	0x080274b8

0801c804 <ISM330DHCXTask_vtblAccGetODR>:

sys_error_code_t ISM330DHCXTask_vtblAccGetODR(ISourceObservable *_this, float *p_measured, float *p_nominal)
{
 801c804:	b580      	push	{r7, lr}
 801c806:	b086      	sub	sp, #24
 801c808:	af00      	add	r7, sp, #0
 801c80a:	60f8      	str	r0, [r7, #12]
 801c80c:	60b9      	str	r1, [r7, #8]
 801c80e:	607a      	str	r2, [r7, #4]
  assert_param(_this != NULL);
 801c810:	68fb      	ldr	r3, [r7, #12]
 801c812:	2b00      	cmp	r3, #0
 801c814:	d104      	bne.n	801c820 <ISM330DHCXTask_vtblAccGetODR+0x1c>
 801c816:	f240 4143 	movw	r1, #1091	; 0x443
 801c81a:	4811      	ldr	r0, [pc, #68]	; (801c860 <ISM330DHCXTask_vtblAccGetODR+0x5c>)
 801c81c:	f7f8 fd45 	bl	80152aa <assert_failed>
  /*get the object implementing the ISourceObservable IF */
  ISM330DHCXTask *p_if_owner = (ISM330DHCXTask*) ((uint32_t) _this - offsetof(ISM330DHCXTask, acc_sensor_if));
 801c820:	68fb      	ldr	r3, [r7, #12]
 801c822:	3bd8      	subs	r3, #216	; 0xd8
 801c824:	613b      	str	r3, [r7, #16]
  sys_error_code_t res = SYS_NO_ERROR_CODE;
 801c826:	2300      	movs	r3, #0
 801c828:	82fb      	strh	r3, [r7, #22]

  /* parameter validation */
  if((p_measured) == NULL || (p_nominal == NULL))
 801c82a:	68bb      	ldr	r3, [r7, #8]
 801c82c:	2b00      	cmp	r3, #0
 801c82e:	d002      	beq.n	801c836 <ISM330DHCXTask_vtblAccGetODR+0x32>
 801c830:	687b      	ldr	r3, [r7, #4]
 801c832:	2b00      	cmp	r3, #0
 801c834:	d105      	bne.n	801c842 <ISM330DHCXTask_vtblAccGetODR+0x3e>
  {
    res = SYS_INVALID_PARAMETER_ERROR_CODE;
 801c836:	2304      	movs	r3, #4
 801c838:	82fb      	strh	r3, [r7, #22]
    SYS_SET_SERVICE_LEVEL_ERROR_CODE(SYS_INVALID_PARAMETER_ERROR_CODE);
 801c83a:	4b0a      	ldr	r3, [pc, #40]	; (801c864 <ISM330DHCXTask_vtblAccGetODR+0x60>)
 801c83c:	2204      	movs	r2, #4
 801c83e:	805a      	strh	r2, [r3, #2]
 801c840:	e009      	b.n	801c856 <ISM330DHCXTask_vtblAccGetODR+0x52>
  }
  else
  {
    *p_measured = p_if_owner->acc_sensor_status.MeasuredODR;
 801c842:	693b      	ldr	r3, [r7, #16]
 801c844:	f8d3 20fc 	ldr.w	r2, [r3, #252]	; 0xfc
 801c848:	68bb      	ldr	r3, [r7, #8]
 801c84a:	601a      	str	r2, [r3, #0]
    *p_nominal = p_if_owner->acc_sensor_status.ODR;
 801c84c:	693b      	ldr	r3, [r7, #16]
 801c84e:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 801c852:	687b      	ldr	r3, [r7, #4]
 801c854:	601a      	str	r2, [r3, #0]
  }

  return res;
 801c856:	8afb      	ldrh	r3, [r7, #22]
}
 801c858:	4618      	mov	r0, r3
 801c85a:	3718      	adds	r7, #24
 801c85c:	46bd      	mov	sp, r7
 801c85e:	bd80      	pop	{r7, pc}
 801c860:	080274b8 	.word	0x080274b8
 801c864:	20000700 	.word	0x20000700

0801c868 <ISM330DHCXTask_vtblAccGetFS>:

float ISM330DHCXTask_vtblAccGetFS(ISourceObservable *_this)
{
 801c868:	b580      	push	{r7, lr}
 801c86a:	b084      	sub	sp, #16
 801c86c:	af00      	add	r7, sp, #0
 801c86e:	6078      	str	r0, [r7, #4]
  assert_param(_this != NULL);
 801c870:	687b      	ldr	r3, [r7, #4]
 801c872:	2b00      	cmp	r3, #0
 801c874:	d104      	bne.n	801c880 <ISM330DHCXTask_vtblAccGetFS+0x18>
 801c876:	f240 4159 	movw	r1, #1113	; 0x459
 801c87a:	4809      	ldr	r0, [pc, #36]	; (801c8a0 <ISM330DHCXTask_vtblAccGetFS+0x38>)
 801c87c:	f7f8 fd15 	bl	80152aa <assert_failed>
  ISM330DHCXTask *p_if_owner = (ISM330DHCXTask*) ((uint32_t) _this - offsetof(ISM330DHCXTask, acc_sensor_if));
 801c880:	687b      	ldr	r3, [r7, #4]
 801c882:	3bd8      	subs	r3, #216	; 0xd8
 801c884:	60fb      	str	r3, [r7, #12]
  float res = p_if_owner->acc_sensor_status.FS;
 801c886:	68fb      	ldr	r3, [r7, #12]
 801c888:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 801c88c:	60bb      	str	r3, [r7, #8]

  return res;
 801c88e:	68bb      	ldr	r3, [r7, #8]
 801c890:	ee07 3a90 	vmov	s15, r3
}
 801c894:	eeb0 0a67 	vmov.f32	s0, s15
 801c898:	3710      	adds	r7, #16
 801c89a:	46bd      	mov	sp, r7
 801c89c:	bd80      	pop	{r7, pc}
 801c89e:	bf00      	nop
 801c8a0:	080274b8 	.word	0x080274b8

0801c8a4 <ISM330DHCXTask_vtblAccGetSensitivity>:

float ISM330DHCXTask_vtblAccGetSensitivity(ISourceObservable *_this)
{
 801c8a4:	b580      	push	{r7, lr}
 801c8a6:	b084      	sub	sp, #16
 801c8a8:	af00      	add	r7, sp, #0
 801c8aa:	6078      	str	r0, [r7, #4]
  assert_param(_this != NULL);
 801c8ac:	687b      	ldr	r3, [r7, #4]
 801c8ae:	2b00      	cmp	r3, #0
 801c8b0:	d104      	bne.n	801c8bc <ISM330DHCXTask_vtblAccGetSensitivity+0x18>
 801c8b2:	f240 4162 	movw	r1, #1122	; 0x462
 801c8b6:	4809      	ldr	r0, [pc, #36]	; (801c8dc <ISM330DHCXTask_vtblAccGetSensitivity+0x38>)
 801c8b8:	f7f8 fcf7 	bl	80152aa <assert_failed>
  ISM330DHCXTask *p_if_owner = (ISM330DHCXTask*) ((uint32_t) _this - offsetof(ISM330DHCXTask, acc_sensor_if));
 801c8bc:	687b      	ldr	r3, [r7, #4]
 801c8be:	3bd8      	subs	r3, #216	; 0xd8
 801c8c0:	60fb      	str	r3, [r7, #12]
  float res = p_if_owner->acc_sensor_status.Sensitivity;
 801c8c2:	68fb      	ldr	r3, [r7, #12]
 801c8c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 801c8c8:	60bb      	str	r3, [r7, #8]

  return res;
 801c8ca:	68bb      	ldr	r3, [r7, #8]
 801c8cc:	ee07 3a90 	vmov	s15, r3
}
 801c8d0:	eeb0 0a67 	vmov.f32	s0, s15
 801c8d4:	3710      	adds	r7, #16
 801c8d6:	46bd      	mov	sp, r7
 801c8d8:	bd80      	pop	{r7, pc}
 801c8da:	bf00      	nop
 801c8dc:	080274b8 	.word	0x080274b8

0801c8e0 <ISM330DHCXTask_vtblAccGetDataType>:

uint8_t ISM330DHCXTask_vtblAccGetDataType(ISourceObservable *_this)
{
 801c8e0:	b580      	push	{r7, lr}
 801c8e2:	b084      	sub	sp, #16
 801c8e4:	af00      	add	r7, sp, #0
 801c8e6:	6078      	str	r0, [r7, #4]
  assert_param(_this != NULL);
 801c8e8:	687b      	ldr	r3, [r7, #4]
 801c8ea:	2b00      	cmp	r3, #0
 801c8ec:	d104      	bne.n	801c8f8 <ISM330DHCXTask_vtblAccGetDataType+0x18>
 801c8ee:	f240 416b 	movw	r1, #1131	; 0x46b
 801c8f2:	4807      	ldr	r0, [pc, #28]	; (801c910 <ISM330DHCXTask_vtblAccGetDataType+0x30>)
 801c8f4:	f7f8 fcd9 	bl	80152aa <assert_failed>
  ISM330DHCXTask *p_if_owner = (ISM330DHCXTask*)((uint32_t)_this - offsetof(ISM330DHCXTask, acc_sensor_if));
 801c8f8:	687b      	ldr	r3, [r7, #4]
 801c8fa:	3bd8      	subs	r3, #216	; 0xd8
 801c8fc:	60fb      	str	r3, [r7, #12]
  uint8_t res = p_if_owner->acc_sensor_status.DataType;
 801c8fe:	68fb      	ldr	r3, [r7, #12]
 801c900:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 801c904:	72fb      	strb	r3, [r7, #11]

  return res;
 801c906:	7afb      	ldrb	r3, [r7, #11]
}
 801c908:	4618      	mov	r0, r3
 801c90a:	3710      	adds	r7, #16
 801c90c:	46bd      	mov	sp, r7
 801c90e:	bd80      	pop	{r7, pc}
 801c910:	080274b8 	.word	0x080274b8

0801c914 <ISM330DHCXTask_vtblAccGetDimensions>:

uint16_t ISM330DHCXTask_vtblAccGetDimensions(ISourceObservable *_this)
{
 801c914:	b580      	push	{r7, lr}
 801c916:	b084      	sub	sp, #16
 801c918:	af00      	add	r7, sp, #0
 801c91a:	6078      	str	r0, [r7, #4]
  assert_param(_this != NULL);
 801c91c:	687b      	ldr	r3, [r7, #4]
 801c91e:	2b00      	cmp	r3, #0
 801c920:	d104      	bne.n	801c92c <ISM330DHCXTask_vtblAccGetDimensions+0x18>
 801c922:	f240 4174 	movw	r1, #1140	; 0x474
 801c926:	4807      	ldr	r0, [pc, #28]	; (801c944 <ISM330DHCXTask_vtblAccGetDimensions+0x30>)
 801c928:	f7f8 fcbf 	bl	80152aa <assert_failed>
  ISM330DHCXTask *p_if_owner = (ISM330DHCXTask*)((uint32_t)_this - offsetof(ISM330DHCXTask, acc_sensor_if));
 801c92c:	687b      	ldr	r3, [r7, #4]
 801c92e:	3bd8      	subs	r3, #216	; 0xd8
 801c930:	60fb      	str	r3, [r7, #12]
  uint16_t res = p_if_owner->acc_sensor_status.Dimensions;
 801c932:	68fb      	ldr	r3, [r7, #12]
 801c934:	f8b3 310a 	ldrh.w	r3, [r3, #266]	; 0x10a
 801c938:	817b      	strh	r3, [r7, #10]

  return res;
 801c93a:	897b      	ldrh	r3, [r7, #10]
}
 801c93c:	4618      	mov	r0, r3
 801c93e:	3710      	adds	r7, #16
 801c940:	46bd      	mov	sp, r7
 801c942:	bd80      	pop	{r7, pc}
 801c944:	080274b8 	.word	0x080274b8

0801c948 <ISM330DHCXTask_vtblGyroGetODR>:

sys_error_code_t ISM330DHCXTask_vtblGyroGetODR(ISourceObservable *_this, float *p_measured, float *p_nominal)
{
 801c948:	b580      	push	{r7, lr}
 801c94a:	b086      	sub	sp, #24
 801c94c:	af00      	add	r7, sp, #0
 801c94e:	60f8      	str	r0, [r7, #12]
 801c950:	60b9      	str	r1, [r7, #8]
 801c952:	607a      	str	r2, [r7, #4]
  assert_param(_this != NULL);
 801c954:	68fb      	ldr	r3, [r7, #12]
 801c956:	2b00      	cmp	r3, #0
 801c958:	d104      	bne.n	801c964 <ISM330DHCXTask_vtblGyroGetODR+0x1c>
 801c95a:	f240 417d 	movw	r1, #1149	; 0x47d
 801c95e:	4811      	ldr	r0, [pc, #68]	; (801c9a4 <ISM330DHCXTask_vtblGyroGetODR+0x5c>)
 801c960:	f7f8 fca3 	bl	80152aa <assert_failed>
  /*get the object implementing the ISourceObservable IF */
  ISM330DHCXTask *p_if_owner = (ISM330DHCXTask*) ((uint32_t) _this - offsetof(ISM330DHCXTask, gyro_sensor_if));
 801c964:	68fb      	ldr	r3, [r7, #12]
 801c966:	3bdc      	subs	r3, #220	; 0xdc
 801c968:	613b      	str	r3, [r7, #16]
  sys_error_code_t res = SYS_NO_ERROR_CODE;
 801c96a:	2300      	movs	r3, #0
 801c96c:	82fb      	strh	r3, [r7, #22]

  /* parameter validation */
  if((p_measured) == NULL || (p_nominal == NULL))
 801c96e:	68bb      	ldr	r3, [r7, #8]
 801c970:	2b00      	cmp	r3, #0
 801c972:	d002      	beq.n	801c97a <ISM330DHCXTask_vtblGyroGetODR+0x32>
 801c974:	687b      	ldr	r3, [r7, #4]
 801c976:	2b00      	cmp	r3, #0
 801c978:	d105      	bne.n	801c986 <ISM330DHCXTask_vtblGyroGetODR+0x3e>
  {
    res = SYS_INVALID_PARAMETER_ERROR_CODE;
 801c97a:	2304      	movs	r3, #4
 801c97c:	82fb      	strh	r3, [r7, #22]
    SYS_SET_SERVICE_LEVEL_ERROR_CODE(SYS_INVALID_PARAMETER_ERROR_CODE);
 801c97e:	4b0a      	ldr	r3, [pc, #40]	; (801c9a8 <ISM330DHCXTask_vtblGyroGetODR+0x60>)
 801c980:	2204      	movs	r2, #4
 801c982:	805a      	strh	r2, [r3, #2]
 801c984:	e009      	b.n	801c99a <ISM330DHCXTask_vtblGyroGetODR+0x52>
  }
  else
  {
    *p_measured = p_if_owner->gyro_sensor_status.MeasuredODR;
 801c986:	693b      	ldr	r3, [r7, #16]
 801c988:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
 801c98c:	68bb      	ldr	r3, [r7, #8]
 801c98e:	601a      	str	r2, [r3, #0]
    *p_nominal = p_if_owner->gyro_sensor_status.ODR;
 801c990:	693b      	ldr	r3, [r7, #16]
 801c992:	f8d3 211c 	ldr.w	r2, [r3, #284]	; 0x11c
 801c996:	687b      	ldr	r3, [r7, #4]
 801c998:	601a      	str	r2, [r3, #0]
  }

  return res;
 801c99a:	8afb      	ldrh	r3, [r7, #22]
}
 801c99c:	4618      	mov	r0, r3
 801c99e:	3718      	adds	r7, #24
 801c9a0:	46bd      	mov	sp, r7
 801c9a2:	bd80      	pop	{r7, pc}
 801c9a4:	080274b8 	.word	0x080274b8
 801c9a8:	20000700 	.word	0x20000700

0801c9ac <ISM330DHCXTask_vtblGyroGetFS>:

float ISM330DHCXTask_vtblGyroGetFS(ISourceObservable *_this)
{
 801c9ac:	b580      	push	{r7, lr}
 801c9ae:	b084      	sub	sp, #16
 801c9b0:	af00      	add	r7, sp, #0
 801c9b2:	6078      	str	r0, [r7, #4]
  assert_param(_this != NULL);
 801c9b4:	687b      	ldr	r3, [r7, #4]
 801c9b6:	2b00      	cmp	r3, #0
 801c9b8:	d104      	bne.n	801c9c4 <ISM330DHCXTask_vtblGyroGetFS+0x18>
 801c9ba:	f240 4193 	movw	r1, #1171	; 0x493
 801c9be:	4809      	ldr	r0, [pc, #36]	; (801c9e4 <ISM330DHCXTask_vtblGyroGetFS+0x38>)
 801c9c0:	f7f8 fc73 	bl	80152aa <assert_failed>
  ISM330DHCXTask *p_if_owner = (ISM330DHCXTask*) ((uint32_t) _this - offsetof(ISM330DHCXTask, gyro_sensor_if));
 801c9c4:	687b      	ldr	r3, [r7, #4]
 801c9c6:	3bdc      	subs	r3, #220	; 0xdc
 801c9c8:	60fb      	str	r3, [r7, #12]
  float res = p_if_owner->gyro_sensor_status.FS;
 801c9ca:	68fb      	ldr	r3, [r7, #12]
 801c9cc:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 801c9d0:	60bb      	str	r3, [r7, #8]

  return res;
 801c9d2:	68bb      	ldr	r3, [r7, #8]
 801c9d4:	ee07 3a90 	vmov	s15, r3
}
 801c9d8:	eeb0 0a67 	vmov.f32	s0, s15
 801c9dc:	3710      	adds	r7, #16
 801c9de:	46bd      	mov	sp, r7
 801c9e0:	bd80      	pop	{r7, pc}
 801c9e2:	bf00      	nop
 801c9e4:	080274b8 	.word	0x080274b8

0801c9e8 <ISM330DHCXTask_vtblGyroGetSensitivity>:

float ISM330DHCXTask_vtblGyroGetSensitivity(ISourceObservable *_this)
{
 801c9e8:	b580      	push	{r7, lr}
 801c9ea:	b084      	sub	sp, #16
 801c9ec:	af00      	add	r7, sp, #0
 801c9ee:	6078      	str	r0, [r7, #4]
  assert_param(_this != NULL);
 801c9f0:	687b      	ldr	r3, [r7, #4]
 801c9f2:	2b00      	cmp	r3, #0
 801c9f4:	d104      	bne.n	801ca00 <ISM330DHCXTask_vtblGyroGetSensitivity+0x18>
 801c9f6:	f240 419c 	movw	r1, #1180	; 0x49c
 801c9fa:	4809      	ldr	r0, [pc, #36]	; (801ca20 <ISM330DHCXTask_vtblGyroGetSensitivity+0x38>)
 801c9fc:	f7f8 fc55 	bl	80152aa <assert_failed>
  ISM330DHCXTask *p_if_owner = (ISM330DHCXTask*) ((uint32_t) _this - offsetof(ISM330DHCXTask, gyro_sensor_if));
 801ca00:	687b      	ldr	r3, [r7, #4]
 801ca02:	3bdc      	subs	r3, #220	; 0xdc
 801ca04:	60fb      	str	r3, [r7, #12]
  float res = p_if_owner->gyro_sensor_status.Sensitivity;
 801ca06:	68fb      	ldr	r3, [r7, #12]
 801ca08:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 801ca0c:	60bb      	str	r3, [r7, #8]

  return res;
 801ca0e:	68bb      	ldr	r3, [r7, #8]
 801ca10:	ee07 3a90 	vmov	s15, r3
}
 801ca14:	eeb0 0a67 	vmov.f32	s0, s15
 801ca18:	3710      	adds	r7, #16
 801ca1a:	46bd      	mov	sp, r7
 801ca1c:	bd80      	pop	{r7, pc}
 801ca1e:	bf00      	nop
 801ca20:	080274b8 	.word	0x080274b8

0801ca24 <ISM330DHCXTask_vtblGyroGetDataType>:

uint8_t ISM330DHCXTask_vtblGyroGetDataType(ISourceObservable *_this)
{
 801ca24:	b580      	push	{r7, lr}
 801ca26:	b084      	sub	sp, #16
 801ca28:	af00      	add	r7, sp, #0
 801ca2a:	6078      	str	r0, [r7, #4]
  assert_param(_this != NULL);
 801ca2c:	687b      	ldr	r3, [r7, #4]
 801ca2e:	2b00      	cmp	r3, #0
 801ca30:	d104      	bne.n	801ca3c <ISM330DHCXTask_vtblGyroGetDataType+0x18>
 801ca32:	f240 41a5 	movw	r1, #1189	; 0x4a5
 801ca36:	4807      	ldr	r0, [pc, #28]	; (801ca54 <ISM330DHCXTask_vtblGyroGetDataType+0x30>)
 801ca38:	f7f8 fc37 	bl	80152aa <assert_failed>
  ISM330DHCXTask *p_if_owner = (ISM330DHCXTask*)((uint32_t)_this - offsetof(ISM330DHCXTask, gyro_sensor_if));
 801ca3c:	687b      	ldr	r3, [r7, #4]
 801ca3e:	3bdc      	subs	r3, #220	; 0xdc
 801ca40:	60fb      	str	r3, [r7, #12]
  uint8_t res = p_if_owner->gyro_sensor_status.DataType;
 801ca42:	68fb      	ldr	r3, [r7, #12]
 801ca44:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 801ca48:	72fb      	strb	r3, [r7, #11]

  return res;
 801ca4a:	7afb      	ldrb	r3, [r7, #11]
}
 801ca4c:	4618      	mov	r0, r3
 801ca4e:	3710      	adds	r7, #16
 801ca50:	46bd      	mov	sp, r7
 801ca52:	bd80      	pop	{r7, pc}
 801ca54:	080274b8 	.word	0x080274b8

0801ca58 <ISM330DHCXTask_vtblGyroGetDimensions>:

uint16_t ISM330DHCXTask_vtblGyroGetDimensions(ISourceObservable *_this)
{
 801ca58:	b580      	push	{r7, lr}
 801ca5a:	b084      	sub	sp, #16
 801ca5c:	af00      	add	r7, sp, #0
 801ca5e:	6078      	str	r0, [r7, #4]
  assert_param(_this != NULL);
 801ca60:	687b      	ldr	r3, [r7, #4]
 801ca62:	2b00      	cmp	r3, #0
 801ca64:	d104      	bne.n	801ca70 <ISM330DHCXTask_vtblGyroGetDimensions+0x18>
 801ca66:	f240 41ae 	movw	r1, #1198	; 0x4ae
 801ca6a:	4807      	ldr	r0, [pc, #28]	; (801ca88 <ISM330DHCXTask_vtblGyroGetDimensions+0x30>)
 801ca6c:	f7f8 fc1d 	bl	80152aa <assert_failed>
  ISM330DHCXTask *p_if_owner = (ISM330DHCXTask*)((uint32_t)_this - offsetof(ISM330DHCXTask, gyro_sensor_if));
 801ca70:	687b      	ldr	r3, [r7, #4]
 801ca72:	3bdc      	subs	r3, #220	; 0xdc
 801ca74:	60fb      	str	r3, [r7, #12]
  uint16_t res = p_if_owner->gyro_sensor_status.Dimensions;
 801ca76:	68fb      	ldr	r3, [r7, #12]
 801ca78:	f8b3 312e 	ldrh.w	r3, [r3, #302]	; 0x12e
 801ca7c:	817b      	strh	r3, [r7, #10]

  return res;
 801ca7e:	897b      	ldrh	r3, [r7, #10]
}
 801ca80:	4618      	mov	r0, r3
 801ca82:	3710      	adds	r7, #16
 801ca84:	46bd      	mov	sp, r7
 801ca86:	bd80      	pop	{r7, pc}
 801ca88:	080274b8 	.word	0x080274b8

0801ca8c <ISM330DHCXTask_vtblMlcGetODR>:

sys_error_code_t ISM330DHCXTask_vtblMlcGetODR(ISourceObservable *_this, float *p_measured, float *p_nominal)
{
 801ca8c:	b580      	push	{r7, lr}
 801ca8e:	b086      	sub	sp, #24
 801ca90:	af00      	add	r7, sp, #0
 801ca92:	60f8      	str	r0, [r7, #12]
 801ca94:	60b9      	str	r1, [r7, #8]
 801ca96:	607a      	str	r2, [r7, #4]
  assert_param(_this != NULL);
 801ca98:	68fb      	ldr	r3, [r7, #12]
 801ca9a:	2b00      	cmp	r3, #0
 801ca9c:	d104      	bne.n	801caa8 <ISM330DHCXTask_vtblMlcGetODR+0x1c>
 801ca9e:	f240 41b7 	movw	r1, #1207	; 0x4b7
 801caa2:	4811      	ldr	r0, [pc, #68]	; (801cae8 <ISM330DHCXTask_vtblMlcGetODR+0x5c>)
 801caa4:	f7f8 fc01 	bl	80152aa <assert_failed>
  /*get the object implementing the ISourceObservable IF */
  ISM330DHCXTask *p_if_owner = (ISM330DHCXTask*)((uint32_t)_this - offsetof(ISM330DHCXTask, mlc_sensor_if));
 801caa8:	68fb      	ldr	r3, [r7, #12]
 801caaa:	3be4      	subs	r3, #228	; 0xe4
 801caac:	613b      	str	r3, [r7, #16]
  sys_error_code_t res = SYS_NO_ERROR_CODE;
 801caae:	2300      	movs	r3, #0
 801cab0:	82fb      	strh	r3, [r7, #22]

  /* parameter validation */
  if((p_measured) == NULL || (p_nominal == NULL))
 801cab2:	68bb      	ldr	r3, [r7, #8]
 801cab4:	2b00      	cmp	r3, #0
 801cab6:	d002      	beq.n	801cabe <ISM330DHCXTask_vtblMlcGetODR+0x32>
 801cab8:	687b      	ldr	r3, [r7, #4]
 801caba:	2b00      	cmp	r3, #0
 801cabc:	d105      	bne.n	801caca <ISM330DHCXTask_vtblMlcGetODR+0x3e>
  {
    res = SYS_INVALID_PARAMETER_ERROR_CODE;
 801cabe:	2304      	movs	r3, #4
 801cac0:	82fb      	strh	r3, [r7, #22]
    SYS_SET_SERVICE_LEVEL_ERROR_CODE(SYS_INVALID_PARAMETER_ERROR_CODE);
 801cac2:	4b0a      	ldr	r3, [pc, #40]	; (801caec <ISM330DHCXTask_vtblMlcGetODR+0x60>)
 801cac4:	2204      	movs	r2, #4
 801cac6:	805a      	strh	r2, [r3, #2]
 801cac8:	e009      	b.n	801cade <ISM330DHCXTask_vtblMlcGetODR+0x52>
  }
  else
  {
    *p_measured = p_if_owner->mlc_fakesensor_status.MeasuredODR;
 801caca:	693b      	ldr	r3, [r7, #16]
 801cacc:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
 801cad0:	68bb      	ldr	r3, [r7, #8]
 801cad2:	601a      	str	r2, [r3, #0]
    *p_nominal = p_if_owner->mlc_fakesensor_status.ODR;
 801cad4:	693b      	ldr	r3, [r7, #16]
 801cad6:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 801cada:	687b      	ldr	r3, [r7, #4]
 801cadc:	601a      	str	r2, [r3, #0]
  }

  return res;
 801cade:	8afb      	ldrh	r3, [r7, #22]
}
 801cae0:	4618      	mov	r0, r3
 801cae2:	3718      	adds	r7, #24
 801cae4:	46bd      	mov	sp, r7
 801cae6:	bd80      	pop	{r7, pc}
 801cae8:	080274b8 	.word	0x080274b8
 801caec:	20000700 	.word	0x20000700

0801caf0 <ISM330DHCXTask_vtblSensorSetODR>:

sys_error_code_t ISM330DHCXTask_vtblSensorSetODR(ISensor_t *_this, float ODR)
{
 801caf0:	b580      	push	{r7, lr}
 801caf2:	b08a      	sub	sp, #40	; 0x28
 801caf4:	af00      	add	r7, sp, #0
 801caf6:	6078      	str	r0, [r7, #4]
 801caf8:	ed87 0a00 	vstr	s0, [r7]
  assert_param(_this != NULL);
 801cafc:	687b      	ldr	r3, [r7, #4]
 801cafe:	2b00      	cmp	r3, #0
 801cb00:	d104      	bne.n	801cb0c <ISM330DHCXTask_vtblSensorSetODR+0x1c>
 801cb02:	f240 41cd 	movw	r1, #1229	; 0x4cd
 801cb06:	4820      	ldr	r0, [pc, #128]	; (801cb88 <ISM330DHCXTask_vtblSensorSetODR+0x98>)
 801cb08:	f7f8 fbcf 	bl	80152aa <assert_failed>
  sys_error_code_t res = SYS_NO_ERROR_CODE;
 801cb0c:	2300      	movs	r3, #0
 801cb0e:	84fb      	strh	r3, [r7, #38]	; 0x26
  ISM330DHCXTask *p_if_owner = ISM330DHCXTaskGetOwnerFromISensorIF(_this);
 801cb10:	6878      	ldr	r0, [r7, #4]
 801cb12:	f002 fa83 	bl	801f01c <ISM330DHCXTaskGetOwnerFromISensorIF>
 801cb16:	6238      	str	r0, [r7, #32]

  EPowerMode log_status = AMTGetTaskPowerMode((AManagedTask*) p_if_owner);
 801cb18:	6a38      	ldr	r0, [r7, #32]
 801cb1a:	f7ff f891 	bl	801bc40 <AMTGetTaskPowerMode>
 801cb1e:	4603      	mov	r3, r0
 801cb20:	77fb      	strb	r3, [r7, #31]
  uint8_t sensor_id = ISourceGetId((ISourceObservable*) _this);
 801cb22:	6878      	ldr	r0, [r7, #4]
 801cb24:	f7ff f983 	bl	801be2e <ISourceGetId>
 801cb28:	4603      	mov	r3, r0
 801cb2a:	77bb      	strb	r3, [r7, #30]

  if((log_status == E_POWER_MODE_SENSORS_ACTIVE) && ISensorIsEnabled(_this))
 801cb2c:	7ffb      	ldrb	r3, [r7, #31]
 801cb2e:	2b02      	cmp	r3, #2
 801cb30:	d108      	bne.n	801cb44 <ISM330DHCXTask_vtblSensorSetODR+0x54>
 801cb32:	6878      	ldr	r0, [r7, #4]
 801cb34:	f002 fd3e 	bl	801f5b4 <ISensorIsEnabled>
 801cb38:	4603      	mov	r3, r0
 801cb3a:	2b00      	cmp	r3, #0
 801cb3c:	d002      	beq.n	801cb44 <ISM330DHCXTask_vtblSensorSetODR+0x54>
  {
    res = SYS_INVALID_FUNC_CALL_ERROR_CODE;
 801cb3e:	2305      	movs	r3, #5
 801cb40:	84fb      	strh	r3, [r7, #38]	; 0x26
 801cb42:	e01b      	b.n	801cb7c <ISM330DHCXTask_vtblSensorSetODR+0x8c>
  }
  else
  {
    /* Set a new command message in the queue */
    SMMessage report =
 801cb44:	f107 0308 	add.w	r3, r7, #8
 801cb48:	2200      	movs	r2, #0
 801cb4a:	601a      	str	r2, [r3, #0]
 801cb4c:	605a      	str	r2, [r3, #4]
 801cb4e:	609a      	str	r2, [r3, #8]
 801cb50:	60da      	str	r2, [r3, #12]
 801cb52:	2304      	movs	r3, #4
 801cb54:	723b      	strb	r3, [r7, #8]
 801cb56:	7fbb      	ldrb	r3, [r7, #30]
 801cb58:	727b      	strb	r3, [r7, #9]
 801cb5a:	2302      	movs	r3, #2
 801cb5c:	817b      	strh	r3, [r7, #10]
    {
        .sensorMessage.messageId = SM_MESSAGE_ID_SENSOR_CMD,
        .sensorMessage.nCmdID = SENSOR_CMD_ID_SET_ODR,
        .sensorMessage.nSensorId = sensor_id,
        .sensorMessage.nParam = (uint32_t) ODR
 801cb5e:	edd7 7a00 	vldr	s15, [r7]
 801cb62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801cb66:	ee17 3a90 	vmov	r3, s15
    SMMessage report =
 801cb6a:	60fb      	str	r3, [r7, #12]
    };
    res = ISM330DHCXTaskPostReportToBack(p_if_owner, (SMMessage*) &report);
 801cb6c:	f107 0308 	add.w	r3, r7, #8
 801cb70:	4619      	mov	r1, r3
 801cb72:	6a38      	ldr	r0, [r7, #32]
 801cb74:	f001 f88a 	bl	801dc8c <ISM330DHCXTaskPostReportToBack>
 801cb78:	4603      	mov	r3, r0
 801cb7a:	84fb      	strh	r3, [r7, #38]	; 0x26
  }

  return res;
 801cb7c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
 801cb7e:	4618      	mov	r0, r3
 801cb80:	3728      	adds	r7, #40	; 0x28
 801cb82:	46bd      	mov	sp, r7
 801cb84:	bd80      	pop	{r7, pc}
 801cb86:	bf00      	nop
 801cb88:	080274b8 	.word	0x080274b8

0801cb8c <ISM330DHCXTask_vtblSensorSetFS>:

sys_error_code_t ISM330DHCXTask_vtblSensorSetFS(ISensor_t *_this, float FS)
{
 801cb8c:	b580      	push	{r7, lr}
 801cb8e:	b08a      	sub	sp, #40	; 0x28
 801cb90:	af00      	add	r7, sp, #0
 801cb92:	6078      	str	r0, [r7, #4]
 801cb94:	ed87 0a00 	vstr	s0, [r7]
  assert_param(_this != NULL);
 801cb98:	687b      	ldr	r3, [r7, #4]
 801cb9a:	2b00      	cmp	r3, #0
 801cb9c:	d104      	bne.n	801cba8 <ISM330DHCXTask_vtblSensorSetFS+0x1c>
 801cb9e:	f240 41ea 	movw	r1, #1258	; 0x4ea
 801cba2:	4820      	ldr	r0, [pc, #128]	; (801cc24 <ISM330DHCXTask_vtblSensorSetFS+0x98>)
 801cba4:	f7f8 fb81 	bl	80152aa <assert_failed>
  sys_error_code_t res = SYS_NO_ERROR_CODE;
 801cba8:	2300      	movs	r3, #0
 801cbaa:	84fb      	strh	r3, [r7, #38]	; 0x26
  ISM330DHCXTask *p_if_owner = ISM330DHCXTaskGetOwnerFromISensorIF(_this);
 801cbac:	6878      	ldr	r0, [r7, #4]
 801cbae:	f002 fa35 	bl	801f01c <ISM330DHCXTaskGetOwnerFromISensorIF>
 801cbb2:	6238      	str	r0, [r7, #32]

  EPowerMode log_status = AMTGetTaskPowerMode((AManagedTask*) p_if_owner);
 801cbb4:	6a38      	ldr	r0, [r7, #32]
 801cbb6:	f7ff f843 	bl	801bc40 <AMTGetTaskPowerMode>
 801cbba:	4603      	mov	r3, r0
 801cbbc:	77fb      	strb	r3, [r7, #31]
  uint8_t sensor_id = ISourceGetId((ISourceObservable*) _this);
 801cbbe:	6878      	ldr	r0, [r7, #4]
 801cbc0:	f7ff f935 	bl	801be2e <ISourceGetId>
 801cbc4:	4603      	mov	r3, r0
 801cbc6:	77bb      	strb	r3, [r7, #30]

  if((log_status == E_POWER_MODE_SENSORS_ACTIVE) && ISensorIsEnabled(_this))
 801cbc8:	7ffb      	ldrb	r3, [r7, #31]
 801cbca:	2b02      	cmp	r3, #2
 801cbcc:	d108      	bne.n	801cbe0 <ISM330DHCXTask_vtblSensorSetFS+0x54>
 801cbce:	6878      	ldr	r0, [r7, #4]
 801cbd0:	f002 fcf0 	bl	801f5b4 <ISensorIsEnabled>
 801cbd4:	4603      	mov	r3, r0
 801cbd6:	2b00      	cmp	r3, #0
 801cbd8:	d002      	beq.n	801cbe0 <ISM330DHCXTask_vtblSensorSetFS+0x54>
  {
    res = SYS_INVALID_FUNC_CALL_ERROR_CODE;
 801cbda:	2305      	movs	r3, #5
 801cbdc:	84fb      	strh	r3, [r7, #38]	; 0x26
 801cbde:	e01b      	b.n	801cc18 <ISM330DHCXTask_vtblSensorSetFS+0x8c>
  }
  else
  {
    /* Set a new command message in the queue */
    SMMessage report =
 801cbe0:	f107 0308 	add.w	r3, r7, #8
 801cbe4:	2200      	movs	r2, #0
 801cbe6:	601a      	str	r2, [r3, #0]
 801cbe8:	605a      	str	r2, [r3, #4]
 801cbea:	609a      	str	r2, [r3, #8]
 801cbec:	60da      	str	r2, [r3, #12]
 801cbee:	2304      	movs	r3, #4
 801cbf0:	723b      	strb	r3, [r7, #8]
 801cbf2:	7fbb      	ldrb	r3, [r7, #30]
 801cbf4:	727b      	strb	r3, [r7, #9]
 801cbf6:	2303      	movs	r3, #3
 801cbf8:	817b      	strh	r3, [r7, #10]
    {
        .sensorMessage.messageId = SM_MESSAGE_ID_SENSOR_CMD,
        .sensorMessage.nCmdID = SENSOR_CMD_ID_SET_FS,
        .sensorMessage.nSensorId = sensor_id,
        .sensorMessage.nParam = (uint32_t) FS
 801cbfa:	edd7 7a00 	vldr	s15, [r7]
 801cbfe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801cc02:	ee17 3a90 	vmov	r3, s15
    SMMessage report =
 801cc06:	60fb      	str	r3, [r7, #12]
    };
    res = ISM330DHCXTaskPostReportToBack(p_if_owner, (SMMessage*) &report);
 801cc08:	f107 0308 	add.w	r3, r7, #8
 801cc0c:	4619      	mov	r1, r3
 801cc0e:	6a38      	ldr	r0, [r7, #32]
 801cc10:	f001 f83c 	bl	801dc8c <ISM330DHCXTaskPostReportToBack>
 801cc14:	4603      	mov	r3, r0
 801cc16:	84fb      	strh	r3, [r7, #38]	; 0x26
  }

  return res;
 801cc18:	8cfb      	ldrh	r3, [r7, #38]	; 0x26

}
 801cc1a:	4618      	mov	r0, r3
 801cc1c:	3728      	adds	r7, #40	; 0x28
 801cc1e:	46bd      	mov	sp, r7
 801cc20:	bd80      	pop	{r7, pc}
 801cc22:	bf00      	nop
 801cc24:	080274b8 	.word	0x080274b8

0801cc28 <ISM330DHCXTask_vtblSensorEnable>:

sys_error_code_t ISM330DHCXTask_vtblSensorEnable(ISensor_t *_this)
{
 801cc28:	b580      	push	{r7, lr}
 801cc2a:	b08a      	sub	sp, #40	; 0x28
 801cc2c:	af00      	add	r7, sp, #0
 801cc2e:	6078      	str	r0, [r7, #4]
  assert_param(_this != NULL);
 801cc30:	687b      	ldr	r3, [r7, #4]
 801cc32:	2b00      	cmp	r3, #0
 801cc34:	d104      	bne.n	801cc40 <ISM330DHCXTask_vtblSensorEnable+0x18>
 801cc36:	f44f 61a1 	mov.w	r1, #1288	; 0x508
 801cc3a:	481c      	ldr	r0, [pc, #112]	; (801ccac <ISM330DHCXTask_vtblSensorEnable+0x84>)
 801cc3c:	f7f8 fb35 	bl	80152aa <assert_failed>
  sys_error_code_t res = SYS_NO_ERROR_CODE;
 801cc40:	2300      	movs	r3, #0
 801cc42:	84fb      	strh	r3, [r7, #38]	; 0x26
  ISM330DHCXTask *p_if_owner = ISM330DHCXTaskGetOwnerFromISensorIF(_this);
 801cc44:	6878      	ldr	r0, [r7, #4]
 801cc46:	f002 f9e9 	bl	801f01c <ISM330DHCXTaskGetOwnerFromISensorIF>
 801cc4a:	6238      	str	r0, [r7, #32]

  EPowerMode log_status = AMTGetTaskPowerMode((AManagedTask*) p_if_owner);
 801cc4c:	6a38      	ldr	r0, [r7, #32]
 801cc4e:	f7fe fff7 	bl	801bc40 <AMTGetTaskPowerMode>
 801cc52:	4603      	mov	r3, r0
 801cc54:	77fb      	strb	r3, [r7, #31]
  uint8_t sensor_id = ISourceGetId((ISourceObservable*) _this);
 801cc56:	6878      	ldr	r0, [r7, #4]
 801cc58:	f7ff f8e9 	bl	801be2e <ISourceGetId>
 801cc5c:	4603      	mov	r3, r0
 801cc5e:	77bb      	strb	r3, [r7, #30]

  if((log_status == E_POWER_MODE_SENSORS_ACTIVE) && ISensorIsEnabled(_this))
 801cc60:	7ffb      	ldrb	r3, [r7, #31]
 801cc62:	2b02      	cmp	r3, #2
 801cc64:	d108      	bne.n	801cc78 <ISM330DHCXTask_vtblSensorEnable+0x50>
 801cc66:	6878      	ldr	r0, [r7, #4]
 801cc68:	f002 fca4 	bl	801f5b4 <ISensorIsEnabled>
 801cc6c:	4603      	mov	r3, r0
 801cc6e:	2b00      	cmp	r3, #0
 801cc70:	d002      	beq.n	801cc78 <ISM330DHCXTask_vtblSensorEnable+0x50>
  {
    res = SYS_INVALID_FUNC_CALL_ERROR_CODE;
 801cc72:	2305      	movs	r3, #5
 801cc74:	84fb      	strh	r3, [r7, #38]	; 0x26
 801cc76:	e014      	b.n	801cca2 <ISM330DHCXTask_vtblSensorEnable+0x7a>
  }
  else
  {
    /* Set a new command message in the queue */
    SMMessage report =
 801cc78:	f107 0308 	add.w	r3, r7, #8
 801cc7c:	2200      	movs	r2, #0
 801cc7e:	601a      	str	r2, [r3, #0]
 801cc80:	605a      	str	r2, [r3, #4]
 801cc82:	609a      	str	r2, [r3, #8]
 801cc84:	60da      	str	r2, [r3, #12]
 801cc86:	2304      	movs	r3, #4
 801cc88:	723b      	strb	r3, [r7, #8]
 801cc8a:	7fbb      	ldrb	r3, [r7, #30]
 801cc8c:	727b      	strb	r3, [r7, #9]
 801cc8e:	2304      	movs	r3, #4
 801cc90:	817b      	strh	r3, [r7, #10]
    {
        .sensorMessage.messageId = SM_MESSAGE_ID_SENSOR_CMD,
        .sensorMessage.nCmdID = SENSOR_CMD_ID_ENABLE,
        .sensorMessage.nSensorId = sensor_id
    };
    res = ISM330DHCXTaskPostReportToBack(p_if_owner, (SMMessage*) &report);
 801cc92:	f107 0308 	add.w	r3, r7, #8
 801cc96:	4619      	mov	r1, r3
 801cc98:	6a38      	ldr	r0, [r7, #32]
 801cc9a:	f000 fff7 	bl	801dc8c <ISM330DHCXTaskPostReportToBack>
 801cc9e:	4603      	mov	r3, r0
 801cca0:	84fb      	strh	r3, [r7, #38]	; 0x26
  }

  return res;
 801cca2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
 801cca4:	4618      	mov	r0, r3
 801cca6:	3728      	adds	r7, #40	; 0x28
 801cca8:	46bd      	mov	sp, r7
 801ccaa:	bd80      	pop	{r7, pc}
 801ccac:	080274b8 	.word	0x080274b8

0801ccb0 <ISM330DHCXTask_vtblSensorDisable>:

sys_error_code_t ISM330DHCXTask_vtblSensorDisable(ISensor_t *_this)
{
 801ccb0:	b580      	push	{r7, lr}
 801ccb2:	b08a      	sub	sp, #40	; 0x28
 801ccb4:	af00      	add	r7, sp, #0
 801ccb6:	6078      	str	r0, [r7, #4]
  assert_param(_this != NULL);
 801ccb8:	687b      	ldr	r3, [r7, #4]
 801ccba:	2b00      	cmp	r3, #0
 801ccbc:	d104      	bne.n	801ccc8 <ISM330DHCXTask_vtblSensorDisable+0x18>
 801ccbe:	f240 5124 	movw	r1, #1316	; 0x524
 801ccc2:	481c      	ldr	r0, [pc, #112]	; (801cd34 <ISM330DHCXTask_vtblSensorDisable+0x84>)
 801ccc4:	f7f8 faf1 	bl	80152aa <assert_failed>
  sys_error_code_t res = SYS_NO_ERROR_CODE;
 801ccc8:	2300      	movs	r3, #0
 801ccca:	84fb      	strh	r3, [r7, #38]	; 0x26
  ISM330DHCXTask *p_if_owner = ISM330DHCXTaskGetOwnerFromISensorIF(_this);
 801cccc:	6878      	ldr	r0, [r7, #4]
 801ccce:	f002 f9a5 	bl	801f01c <ISM330DHCXTaskGetOwnerFromISensorIF>
 801ccd2:	6238      	str	r0, [r7, #32]

  EPowerMode log_status = AMTGetTaskPowerMode((AManagedTask*) p_if_owner);
 801ccd4:	6a38      	ldr	r0, [r7, #32]
 801ccd6:	f7fe ffb3 	bl	801bc40 <AMTGetTaskPowerMode>
 801ccda:	4603      	mov	r3, r0
 801ccdc:	77fb      	strb	r3, [r7, #31]
  uint8_t sensor_id = ISourceGetId((ISourceObservable*) _this);
 801ccde:	6878      	ldr	r0, [r7, #4]
 801cce0:	f7ff f8a5 	bl	801be2e <ISourceGetId>
 801cce4:	4603      	mov	r3, r0
 801cce6:	77bb      	strb	r3, [r7, #30]

  if((log_status == E_POWER_MODE_SENSORS_ACTIVE) && ISensorIsEnabled(_this))
 801cce8:	7ffb      	ldrb	r3, [r7, #31]
 801ccea:	2b02      	cmp	r3, #2
 801ccec:	d108      	bne.n	801cd00 <ISM330DHCXTask_vtblSensorDisable+0x50>
 801ccee:	6878      	ldr	r0, [r7, #4]
 801ccf0:	f002 fc60 	bl	801f5b4 <ISensorIsEnabled>
 801ccf4:	4603      	mov	r3, r0
 801ccf6:	2b00      	cmp	r3, #0
 801ccf8:	d002      	beq.n	801cd00 <ISM330DHCXTask_vtblSensorDisable+0x50>
  {
    res = SYS_INVALID_FUNC_CALL_ERROR_CODE;
 801ccfa:	2305      	movs	r3, #5
 801ccfc:	84fb      	strh	r3, [r7, #38]	; 0x26
 801ccfe:	e014      	b.n	801cd2a <ISM330DHCXTask_vtblSensorDisable+0x7a>
  }
  else
  {
    /* Set a new command message in the queue */
    SMMessage report =
 801cd00:	f107 0308 	add.w	r3, r7, #8
 801cd04:	2200      	movs	r2, #0
 801cd06:	601a      	str	r2, [r3, #0]
 801cd08:	605a      	str	r2, [r3, #4]
 801cd0a:	609a      	str	r2, [r3, #8]
 801cd0c:	60da      	str	r2, [r3, #12]
 801cd0e:	2304      	movs	r3, #4
 801cd10:	723b      	strb	r3, [r7, #8]
 801cd12:	7fbb      	ldrb	r3, [r7, #30]
 801cd14:	727b      	strb	r3, [r7, #9]
 801cd16:	2305      	movs	r3, #5
 801cd18:	817b      	strh	r3, [r7, #10]
    {
        .sensorMessage.messageId = SM_MESSAGE_ID_SENSOR_CMD,
        .sensorMessage.nCmdID = SENSOR_CMD_ID_DISABLE,
        .sensorMessage.nSensorId = sensor_id
    };
    res = ISM330DHCXTaskPostReportToBack(p_if_owner, (SMMessage*) &report);
 801cd1a:	f107 0308 	add.w	r3, r7, #8
 801cd1e:	4619      	mov	r1, r3
 801cd20:	6a38      	ldr	r0, [r7, #32]
 801cd22:	f000 ffb3 	bl	801dc8c <ISM330DHCXTaskPostReportToBack>
 801cd26:	4603      	mov	r3, r0
 801cd28:	84fb      	strh	r3, [r7, #38]	; 0x26
  }

  return res;
 801cd2a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
 801cd2c:	4618      	mov	r0, r3
 801cd2e:	3728      	adds	r7, #40	; 0x28
 801cd30:	46bd      	mov	sp, r7
 801cd32:	bd80      	pop	{r7, pc}
 801cd34:	080274b8 	.word	0x080274b8

0801cd38 <ISM330DHCXTask_vtblSensorIsEnabled>:

boolean_t ISM330DHCXTask_vtblSensorIsEnabled(ISensor_t *_this)
{
 801cd38:	b580      	push	{r7, lr}
 801cd3a:	b084      	sub	sp, #16
 801cd3c:	af00      	add	r7, sp, #0
 801cd3e:	6078      	str	r0, [r7, #4]
  assert_param(_this != NULL);
 801cd40:	687b      	ldr	r3, [r7, #4]
 801cd42:	2b00      	cmp	r3, #0
 801cd44:	d104      	bne.n	801cd50 <ISM330DHCXTask_vtblSensorIsEnabled+0x18>
 801cd46:	f44f 61a8 	mov.w	r1, #1344	; 0x540
 801cd4a:	481d      	ldr	r0, [pc, #116]	; (801cdc0 <ISM330DHCXTask_vtblSensorIsEnabled+0x88>)
 801cd4c:	f7f8 faad 	bl	80152aa <assert_failed>
  boolean_t res = FALSE;
 801cd50:	2300      	movs	r3, #0
 801cd52:	73fb      	strb	r3, [r7, #15]
  ISM330DHCXTask *p_if_owner = ISM330DHCXTaskGetOwnerFromISensorIF(_this);
 801cd54:	6878      	ldr	r0, [r7, #4]
 801cd56:	f002 f961 	bl	801f01c <ISM330DHCXTaskGetOwnerFromISensorIF>
 801cd5a:	60b8      	str	r0, [r7, #8]

  if(ISourceGetId((ISourceObservable*) _this) == p_if_owner->acc_id)
 801cd5c:	6878      	ldr	r0, [r7, #4]
 801cd5e:	f7ff f866 	bl	801be2e <ISourceGetId>
 801cd62:	4603      	mov	r3, r0
 801cd64:	461a      	mov	r2, r3
 801cd66:	68bb      	ldr	r3, [r7, #8]
 801cd68:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 801cd6c:	429a      	cmp	r2, r3
 801cd6e:	d104      	bne.n	801cd7a <ISM330DHCXTask_vtblSensorIsEnabled+0x42>
    res = p_if_owner->acc_sensor_status.IsActive;
 801cd70:	68bb      	ldr	r3, [r7, #8]
 801cd72:	f893 30f4 	ldrb.w	r3, [r3, #244]	; 0xf4
 801cd76:	73fb      	strb	r3, [r7, #15]
 801cd78:	e01c      	b.n	801cdb4 <ISM330DHCXTask_vtblSensorIsEnabled+0x7c>
  else if(ISourceGetId((ISourceObservable*) _this) == p_if_owner->gyro_id)
 801cd7a:	6878      	ldr	r0, [r7, #4]
 801cd7c:	f7ff f857 	bl	801be2e <ISourceGetId>
 801cd80:	4603      	mov	r3, r0
 801cd82:	461a      	mov	r2, r3
 801cd84:	68bb      	ldr	r3, [r7, #8]
 801cd86:	f893 3155 	ldrb.w	r3, [r3, #341]	; 0x155
 801cd8a:	429a      	cmp	r2, r3
 801cd8c:	d104      	bne.n	801cd98 <ISM330DHCXTask_vtblSensorIsEnabled+0x60>
    res = p_if_owner->gyro_sensor_status.IsActive;
 801cd8e:	68bb      	ldr	r3, [r7, #8]
 801cd90:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 801cd94:	73fb      	strb	r3, [r7, #15]
 801cd96:	e00d      	b.n	801cdb4 <ISM330DHCXTask_vtblSensorIsEnabled+0x7c>
  else if(ISourceGetId((ISourceObservable*) _this) == p_if_owner->mlc_id)
 801cd98:	6878      	ldr	r0, [r7, #4]
 801cd9a:	f7ff f848 	bl	801be2e <ISourceGetId>
 801cd9e:	4603      	mov	r3, r0
 801cda0:	461a      	mov	r2, r3
 801cda2:	68bb      	ldr	r3, [r7, #8]
 801cda4:	f893 3156 	ldrb.w	r3, [r3, #342]	; 0x156
 801cda8:	429a      	cmp	r2, r3
 801cdaa:	d103      	bne.n	801cdb4 <ISM330DHCXTask_vtblSensorIsEnabled+0x7c>
    res = p_if_owner->mlc_fakesensor_status.IsActive;
 801cdac:	68bb      	ldr	r3, [r7, #8]
 801cdae:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 801cdb2:	73fb      	strb	r3, [r7, #15]

  return res;
 801cdb4:	7bfb      	ldrb	r3, [r7, #15]
}
 801cdb6:	4618      	mov	r0, r3
 801cdb8:	3710      	adds	r7, #16
 801cdba:	46bd      	mov	sp, r7
 801cdbc:	bd80      	pop	{r7, pc}
 801cdbe:	bf00      	nop
 801cdc0:	080274b8 	.word	0x080274b8

0801cdc4 <ISM330DHCXTask_vtblAccGetDescription>:

SensorDescriptor_t ISM330DHCXTask_vtblAccGetDescription(ISensor_t *_this)
{
 801cdc4:	b580      	push	{r7, lr}
 801cdc6:	b084      	sub	sp, #16
 801cdc8:	af00      	add	r7, sp, #0
 801cdca:	6078      	str	r0, [r7, #4]
 801cdcc:	6039      	str	r1, [r7, #0]
  assert_param(_this != NULL);
 801cdce:	683b      	ldr	r3, [r7, #0]
 801cdd0:	2b00      	cmp	r3, #0
 801cdd2:	d104      	bne.n	801cdde <ISM330DHCXTask_vtblAccGetDescription+0x1a>
 801cdd4:	f44f 61aa 	mov.w	r1, #1360	; 0x550
 801cdd8:	480a      	ldr	r0, [pc, #40]	; (801ce04 <ISM330DHCXTask_vtblAccGetDescription+0x40>)
 801cdda:	f7f8 fa66 	bl	80152aa <assert_failed>
  ISM330DHCXTask *p_if_owner = ISM330DHCXTaskGetOwnerFromISensorIF(_this);
 801cdde:	6838      	ldr	r0, [r7, #0]
 801cde0:	f002 f91c 	bl	801f01c <ISM330DHCXTaskGetOwnerFromISensorIF>
 801cde4:	60f8      	str	r0, [r7, #12]
  return *p_if_owner->acc_sensor_descriptor;
 801cde6:	68fb      	ldr	r3, [r7, #12]
 801cde8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 801cdec:	687a      	ldr	r2, [r7, #4]
 801cdee:	4610      	mov	r0, r2
 801cdf0:	4619      	mov	r1, r3
 801cdf2:	23e8      	movs	r3, #232	; 0xe8
 801cdf4:	461a      	mov	r2, r3
 801cdf6:	f006 ff0b 	bl	8023c10 <memcpy>
}
 801cdfa:	6878      	ldr	r0, [r7, #4]
 801cdfc:	3710      	adds	r7, #16
 801cdfe:	46bd      	mov	sp, r7
 801ce00:	bd80      	pop	{r7, pc}
 801ce02:	bf00      	nop
 801ce04:	080274b8 	.word	0x080274b8

0801ce08 <ISM330DHCXTask_vtblGyroGetDescription>:

SensorDescriptor_t ISM330DHCXTask_vtblGyroGetDescription(ISensor_t *_this)
{
 801ce08:	b580      	push	{r7, lr}
 801ce0a:	b084      	sub	sp, #16
 801ce0c:	af00      	add	r7, sp, #0
 801ce0e:	6078      	str	r0, [r7, #4]
 801ce10:	6039      	str	r1, [r7, #0]
  assert_param(_this != NULL);
 801ce12:	683b      	ldr	r3, [r7, #0]
 801ce14:	2b00      	cmp	r3, #0
 801ce16:	d104      	bne.n	801ce22 <ISM330DHCXTask_vtblGyroGetDescription+0x1a>
 801ce18:	f240 5157 	movw	r1, #1367	; 0x557
 801ce1c:	480a      	ldr	r0, [pc, #40]	; (801ce48 <ISM330DHCXTask_vtblGyroGetDescription+0x40>)
 801ce1e:	f7f8 fa44 	bl	80152aa <assert_failed>
  ISM330DHCXTask *p_if_owner = ISM330DHCXTaskGetOwnerFromISensorIF(_this);
 801ce22:	6838      	ldr	r0, [r7, #0]
 801ce24:	f002 f8fa 	bl	801f01c <ISM330DHCXTaskGetOwnerFromISensorIF>
 801ce28:	60f8      	str	r0, [r7, #12]
  return *p_if_owner->gyro_sensor_descriptor;
 801ce2a:	68fb      	ldr	r3, [r7, #12]
 801ce2c:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 801ce30:	687a      	ldr	r2, [r7, #4]
 801ce32:	4610      	mov	r0, r2
 801ce34:	4619      	mov	r1, r3
 801ce36:	23e8      	movs	r3, #232	; 0xe8
 801ce38:	461a      	mov	r2, r3
 801ce3a:	f006 fee9 	bl	8023c10 <memcpy>
}
 801ce3e:	6878      	ldr	r0, [r7, #4]
 801ce40:	3710      	adds	r7, #16
 801ce42:	46bd      	mov	sp, r7
 801ce44:	bd80      	pop	{r7, pc}
 801ce46:	bf00      	nop
 801ce48:	080274b8 	.word	0x080274b8

0801ce4c <ISM330DHCXTask_vtblMlcGetDescription>:

SensorDescriptor_t ISM330DHCXTask_vtblMlcGetDescription(ISensor_t *_this)
{
 801ce4c:	b580      	push	{r7, lr}
 801ce4e:	b084      	sub	sp, #16
 801ce50:	af00      	add	r7, sp, #0
 801ce52:	6078      	str	r0, [r7, #4]
 801ce54:	6039      	str	r1, [r7, #0]
  assert_param(_this != NULL);
 801ce56:	683b      	ldr	r3, [r7, #0]
 801ce58:	2b00      	cmp	r3, #0
 801ce5a:	d104      	bne.n	801ce66 <ISM330DHCXTask_vtblMlcGetDescription+0x1a>
 801ce5c:	f240 515e 	movw	r1, #1374	; 0x55e
 801ce60:	480a      	ldr	r0, [pc, #40]	; (801ce8c <ISM330DHCXTask_vtblMlcGetDescription+0x40>)
 801ce62:	f7f8 fa22 	bl	80152aa <assert_failed>
  ISM330DHCXTask *p_if_owner = ISM330DHCXTaskGetOwnerFromISensorIF(_this);
 801ce66:	6838      	ldr	r0, [r7, #0]
 801ce68:	f002 f8d8 	bl	801f01c <ISM330DHCXTaskGetOwnerFromISensorIF>
 801ce6c:	60f8      	str	r0, [r7, #12]
  return *p_if_owner->mlc_fakesensor_descriptor;
 801ce6e:	68fb      	ldr	r3, [r7, #12]
 801ce70:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 801ce74:	687a      	ldr	r2, [r7, #4]
 801ce76:	4610      	mov	r0, r2
 801ce78:	4619      	mov	r1, r3
 801ce7a:	23e8      	movs	r3, #232	; 0xe8
 801ce7c:	461a      	mov	r2, r3
 801ce7e:	f006 fec7 	bl	8023c10 <memcpy>
}
 801ce82:	6878      	ldr	r0, [r7, #4]
 801ce84:	3710      	adds	r7, #16
 801ce86:	46bd      	mov	sp, r7
 801ce88:	bd80      	pop	{r7, pc}
 801ce8a:	bf00      	nop
 801ce8c:	080274b8 	.word	0x080274b8

0801ce90 <ISM330DHCXTask_vtblAccGetStatus>:

SensorStatus_t ISM330DHCXTask_vtblAccGetStatus(ISensor_t *_this)
{
 801ce90:	b5b0      	push	{r4, r5, r7, lr}
 801ce92:	b084      	sub	sp, #16
 801ce94:	af00      	add	r7, sp, #0
 801ce96:	6078      	str	r0, [r7, #4]
 801ce98:	6039      	str	r1, [r7, #0]
  assert_param(_this != NULL);
 801ce9a:	683b      	ldr	r3, [r7, #0]
 801ce9c:	2b00      	cmp	r3, #0
 801ce9e:	d104      	bne.n	801ceaa <ISM330DHCXTask_vtblAccGetStatus+0x1a>
 801cea0:	f240 5165 	movw	r1, #1381	; 0x565
 801cea4:	480a      	ldr	r0, [pc, #40]	; (801ced0 <ISM330DHCXTask_vtblAccGetStatus+0x40>)
 801cea6:	f7f8 fa00 	bl	80152aa <assert_failed>
  ISM330DHCXTask *p_if_owner = ISM330DHCXTaskGetOwnerFromISensorIF(_this);
 801ceaa:	6838      	ldr	r0, [r7, #0]
 801ceac:	f002 f8b6 	bl	801f01c <ISM330DHCXTaskGetOwnerFromISensorIF>
 801ceb0:	60f8      	str	r0, [r7, #12]
  return p_if_owner->acc_sensor_status;
 801ceb2:	687a      	ldr	r2, [r7, #4]
 801ceb4:	68fb      	ldr	r3, [r7, #12]
 801ceb6:	4615      	mov	r5, r2
 801ceb8:	f103 04ec 	add.w	r4, r3, #236	; 0xec
 801cebc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801cebe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801cec0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801cec4:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 801cec8:	6878      	ldr	r0, [r7, #4]
 801ceca:	3710      	adds	r7, #16
 801cecc:	46bd      	mov	sp, r7
 801cece:	bdb0      	pop	{r4, r5, r7, pc}
 801ced0:	080274b8 	.word	0x080274b8

0801ced4 <ISM330DHCXTask_vtblGyroGetStatus>:

SensorStatus_t ISM330DHCXTask_vtblGyroGetStatus(ISensor_t *_this)
{
 801ced4:	b5b0      	push	{r4, r5, r7, lr}
 801ced6:	b084      	sub	sp, #16
 801ced8:	af00      	add	r7, sp, #0
 801ceda:	6078      	str	r0, [r7, #4]
 801cedc:	6039      	str	r1, [r7, #0]
  assert_param(_this != NULL);
 801cede:	683b      	ldr	r3, [r7, #0]
 801cee0:	2b00      	cmp	r3, #0
 801cee2:	d104      	bne.n	801ceee <ISM330DHCXTask_vtblGyroGetStatus+0x1a>
 801cee4:	f240 516c 	movw	r1, #1388	; 0x56c
 801cee8:	480a      	ldr	r0, [pc, #40]	; (801cf14 <ISM330DHCXTask_vtblGyroGetStatus+0x40>)
 801ceea:	f7f8 f9de 	bl	80152aa <assert_failed>
  ISM330DHCXTask *p_if_owner = ISM330DHCXTaskGetOwnerFromISensorIF(_this);
 801ceee:	6838      	ldr	r0, [r7, #0]
 801cef0:	f002 f894 	bl	801f01c <ISM330DHCXTaskGetOwnerFromISensorIF>
 801cef4:	60f8      	str	r0, [r7, #12]
  return p_if_owner->gyro_sensor_status;
 801cef6:	687a      	ldr	r2, [r7, #4]
 801cef8:	68fb      	ldr	r3, [r7, #12]
 801cefa:	4615      	mov	r5, r2
 801cefc:	f503 7488 	add.w	r4, r3, #272	; 0x110
 801cf00:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801cf02:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801cf04:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801cf08:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 801cf0c:	6878      	ldr	r0, [r7, #4]
 801cf0e:	3710      	adds	r7, #16
 801cf10:	46bd      	mov	sp, r7
 801cf12:	bdb0      	pop	{r4, r5, r7, pc}
 801cf14:	080274b8 	.word	0x080274b8

0801cf18 <ISM330DHCXTask_vtblMlcGetStatus>:

SensorStatus_t ISM330DHCXTask_vtblMlcGetStatus(ISensor_t *_this)
{
 801cf18:	b5b0      	push	{r4, r5, r7, lr}
 801cf1a:	b084      	sub	sp, #16
 801cf1c:	af00      	add	r7, sp, #0
 801cf1e:	6078      	str	r0, [r7, #4]
 801cf20:	6039      	str	r1, [r7, #0]
  assert_param(_this != NULL);
 801cf22:	683b      	ldr	r3, [r7, #0]
 801cf24:	2b00      	cmp	r3, #0
 801cf26:	d104      	bne.n	801cf32 <ISM330DHCXTask_vtblMlcGetStatus+0x1a>
 801cf28:	f240 5173 	movw	r1, #1395	; 0x573
 801cf2c:	480a      	ldr	r0, [pc, #40]	; (801cf58 <ISM330DHCXTask_vtblMlcGetStatus+0x40>)
 801cf2e:	f7f8 f9bc 	bl	80152aa <assert_failed>
  ISM330DHCXTask *p_if_owner = ISM330DHCXTaskGetOwnerFromISensorIF(_this);
 801cf32:	6838      	ldr	r0, [r7, #0]
 801cf34:	f002 f872 	bl	801f01c <ISM330DHCXTaskGetOwnerFromISensorIF>
 801cf38:	60f8      	str	r0, [r7, #12]
  return p_if_owner->mlc_fakesensor_status;
 801cf3a:	687a      	ldr	r2, [r7, #4]
 801cf3c:	68fb      	ldr	r3, [r7, #12]
 801cf3e:	4615      	mov	r5, r2
 801cf40:	f503 749a 	add.w	r4, r3, #308	; 0x134
 801cf44:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801cf46:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801cf48:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801cf4c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 801cf50:	6878      	ldr	r0, [r7, #4]
 801cf52:	3710      	adds	r7, #16
 801cf54:	46bd      	mov	sp, r7
 801cf56:	bdb0      	pop	{r4, r5, r7, pc}
 801cf58:	080274b8 	.word	0x080274b8

0801cf5c <ISM330DHCXTask_vtblSensorMlcIsEnabled>:

boolean_t ISM330DHCXTask_vtblSensorMlcIsEnabled(ISensorMlc_t *_this)
{
 801cf5c:	b580      	push	{r7, lr}
 801cf5e:	b084      	sub	sp, #16
 801cf60:	af00      	add	r7, sp, #0
 801cf62:	6078      	str	r0, [r7, #4]
  assert_param(_this != NULL);
 801cf64:	687b      	ldr	r3, [r7, #4]
 801cf66:	2b00      	cmp	r3, #0
 801cf68:	d104      	bne.n	801cf74 <ISM330DHCXTask_vtblSensorMlcIsEnabled+0x18>
 801cf6a:	f240 517a 	movw	r1, #1402	; 0x57a
 801cf6e:	4807      	ldr	r0, [pc, #28]	; (801cf8c <ISM330DHCXTask_vtblSensorMlcIsEnabled+0x30>)
 801cf70:	f7f8 f99b 	bl	80152aa <assert_failed>
  ISM330DHCXTask *p_if_owner = ISM330DHCXTaskGetOwnerFromISensorMlcIF(_this);
 801cf74:	6878      	ldr	r0, [r7, #4]
 801cf76:	f002 f88b 	bl	801f090 <ISM330DHCXTaskGetOwnerFromISensorMlcIF>
 801cf7a:	60f8      	str	r0, [r7, #12]
  return p_if_owner->mlc_enable;
 801cf7c:	68fb      	ldr	r3, [r7, #12]
 801cf7e:	f893 3157 	ldrb.w	r3, [r3, #343]	; 0x157
}
 801cf82:	4618      	mov	r0, r3
 801cf84:	3710      	adds	r7, #16
 801cf86:	46bd      	mov	sp, r7
 801cf88:	bd80      	pop	{r7, pc}
 801cf8a:	bf00      	nop
 801cf8c:	080274b8 	.word	0x080274b8

0801cf90 <ISM330DHCXTask_vtblSensorMlcLoadUcf>:

sys_error_code_t ISM330DHCXTask_vtblSensorMlcLoadUcf(ISensorMlc_t *_this, uint32_t size, const char *ucf)
{
 801cf90:	b580      	push	{r7, lr}
 801cf92:	b08c      	sub	sp, #48	; 0x30
 801cf94:	af00      	add	r7, sp, #0
 801cf96:	60f8      	str	r0, [r7, #12]
 801cf98:	60b9      	str	r1, [r7, #8]
 801cf9a:	607a      	str	r2, [r7, #4]
  assert_param(_this != NULL);
 801cf9c:	68fb      	ldr	r3, [r7, #12]
 801cf9e:	2b00      	cmp	r3, #0
 801cfa0:	d104      	bne.n	801cfac <ISM330DHCXTask_vtblSensorMlcLoadUcf+0x1c>
 801cfa2:	f240 5181 	movw	r1, #1409	; 0x581
 801cfa6:	4839      	ldr	r0, [pc, #228]	; (801d08c <ISM330DHCXTask_vtblSensorMlcLoadUcf+0xfc>)
 801cfa8:	f7f8 f97f 	bl	80152aa <assert_failed>
  sys_error_code_t res = SYS_NO_ERROR_CODE;
 801cfac:	2300      	movs	r3, #0
 801cfae:	85fb      	strh	r3, [r7, #46]	; 0x2e
  ISM330DHCXTask *p_if_owner = ISM330DHCXTaskGetOwnerFromISensorMlcIF(_this);
 801cfb0:	68f8      	ldr	r0, [r7, #12]
 801cfb2:	f002 f86d 	bl	801f090 <ISM330DHCXTaskGetOwnerFromISensorMlcIF>
 801cfb6:	6278      	str	r0, [r7, #36]	; 0x24
  stmdev_ctx_t *p_sensor_drv = (stmdev_ctx_t*) &p_if_owner->p_sensor_bus_if->m_xConnector;
 801cfb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cfba:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 801cfbe:	623b      	str	r3, [r7, #32]
  char ucf_reg[3];
  char ucf_data[3];
  long reg;
  long data;

  for(i = 0; i < size / 4; i++)
 801cfc0:	2300      	movs	r3, #0
 801cfc2:	62bb      	str	r3, [r7, #40]	; 0x28
 801cfc4:	e03f      	b.n	801d046 <ISM330DHCXTask_vtblSensorMlcLoadUcf+0xb6>
  {
    ucf_reg[0] = ucf[4 * i];
 801cfc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cfc8:	009b      	lsls	r3, r3, #2
 801cfca:	687a      	ldr	r2, [r7, #4]
 801cfcc:	4413      	add	r3, r2
 801cfce:	781b      	ldrb	r3, [r3, #0]
 801cfd0:	763b      	strb	r3, [r7, #24]
    ucf_reg[1] = ucf[4 * i + 1];
 801cfd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cfd4:	009b      	lsls	r3, r3, #2
 801cfd6:	3301      	adds	r3, #1
 801cfd8:	687a      	ldr	r2, [r7, #4]
 801cfda:	4413      	add	r3, r2
 801cfdc:	781b      	ldrb	r3, [r3, #0]
 801cfde:	767b      	strb	r3, [r7, #25]
    ucf_reg[2] = '\0';
 801cfe0:	2300      	movs	r3, #0
 801cfe2:	76bb      	strb	r3, [r7, #26]
    ucf_data[0] = ucf[4 * i + 2];
 801cfe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cfe6:	009b      	lsls	r3, r3, #2
 801cfe8:	3302      	adds	r3, #2
 801cfea:	687a      	ldr	r2, [r7, #4]
 801cfec:	4413      	add	r3, r2
 801cfee:	781b      	ldrb	r3, [r3, #0]
 801cff0:	753b      	strb	r3, [r7, #20]
    ucf_data[1] = ucf[4 * i + 3];
 801cff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cff4:	009b      	lsls	r3, r3, #2
 801cff6:	3303      	adds	r3, #3
 801cff8:	687a      	ldr	r2, [r7, #4]
 801cffa:	4413      	add	r3, r2
 801cffc:	781b      	ldrb	r3, [r3, #0]
 801cffe:	757b      	strb	r3, [r7, #21]
    ucf_data[2] = '\0';
 801d000:	2300      	movs	r3, #0
 801d002:	75bb      	strb	r3, [r7, #22]

    reg = strtol(ucf_reg, NULL, 16);
 801d004:	f107 0318 	add.w	r3, r7, #24
 801d008:	2210      	movs	r2, #16
 801d00a:	2100      	movs	r1, #0
 801d00c:	4618      	mov	r0, r3
 801d00e:	f007 faa3 	bl	8024558 <strtol>
 801d012:	61f8      	str	r0, [r7, #28]
    data = strtol(ucf_data, NULL, 16);
 801d014:	f107 0314 	add.w	r3, r7, #20
 801d018:	2210      	movs	r2, #16
 801d01a:	2100      	movs	r1, #0
 801d01c:	4618      	mov	r0, r3
 801d01e:	f007 fa9b 	bl	8024558 <strtol>
 801d022:	4603      	mov	r3, r0
 801d024:	613b      	str	r3, [r7, #16]

    res = ism330dhcx_write_reg(p_sensor_drv, (uint8_t) reg, (uint8_t*) &data, 1);
 801d026:	69fb      	ldr	r3, [r7, #28]
 801d028:	b2d9      	uxtb	r1, r3
 801d02a:	f107 0210 	add.w	r2, r7, #16
 801d02e:	2301      	movs	r3, #1
 801d030:	6a38      	ldr	r0, [r7, #32]
 801d032:	f7e4 fb33 	bl	800169c <ism330dhcx_write_reg>
 801d036:	4603      	mov	r3, r0
 801d038:	85fb      	strh	r3, [r7, #46]	; 0x2e
    if(res != SYS_NO_ERROR_CODE)
 801d03a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801d03c:	2b00      	cmp	r3, #0
 801d03e:	d108      	bne.n	801d052 <ISM330DHCXTask_vtblSensorMlcLoadUcf+0xc2>
  for(i = 0; i < size / 4; i++)
 801d040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d042:	3301      	adds	r3, #1
 801d044:	62bb      	str	r3, [r7, #40]	; 0x28
 801d046:	68bb      	ldr	r3, [r7, #8]
 801d048:	089b      	lsrs	r3, r3, #2
 801d04a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801d04c:	429a      	cmp	r2, r3
 801d04e:	d3ba      	bcc.n	801cfc6 <ISM330DHCXTask_vtblSensorMlcLoadUcf+0x36>
 801d050:	e000      	b.n	801d054 <ISM330DHCXTask_vtblSensorMlcLoadUcf+0xc4>
      break;
 801d052:	bf00      	nop
  }

  if(!SYS_IS_ERROR_CODE(res))
 801d054:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801d056:	2b00      	cmp	r3, #0
 801d058:	d113      	bne.n	801d082 <ISM330DHCXTask_vtblSensorMlcLoadUcf+0xf2>
  {
    p_if_owner->mlc_enable = TRUE;
 801d05a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d05c:	2201      	movs	r2, #1
 801d05e:	f883 2157 	strb.w	r2, [r3, #343]	; 0x157
    p_if_owner->mlc_fakesensor_status.IsActive = TRUE;
 801d062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d064:	2201      	movs	r2, #1
 801d066:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c

    ISM330DHCX_XL_ODR_From_UCF(p_if_owner);
 801d06a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801d06c:	f002 f8a0 	bl	801f1b0 <ISM330DHCX_XL_ODR_From_UCF>
    ISM330DHCX_XL_FS_From_UCF(p_if_owner);
 801d070:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801d072:	f002 f925 	bl	801f2c0 <ISM330DHCX_XL_FS_From_UCF>
    ISM330DHCX_GY_ODR_From_UCF(p_if_owner);
 801d076:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801d078:	f002 f96c 	bl	801f354 <ISM330DHCX_GY_ODR_From_UCF>
    ISM330DHCX_GY_FS_From_UCF(p_if_owner);
 801d07c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801d07e:	f002 f9f1 	bl	801f464 <ISM330DHCX_GY_FS_From_UCF>
  }
  return res;
 801d082:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
}
 801d084:	4618      	mov	r0, r3
 801d086:	3730      	adds	r7, #48	; 0x30
 801d088:	46bd      	mov	sp, r7
 801d08a:	bd80      	pop	{r7, pc}
 801d08c:	080274b8 	.word	0x080274b8

0801d090 <ISM330DHCXTaskExecuteStepState1>:

// Private function definition
// ***************************

static sys_error_code_t ISM330DHCXTaskExecuteStepState1(AManagedTask *_this)
{
 801d090:	b580      	push	{r7, lr}
 801d092:	b08a      	sub	sp, #40	; 0x28
 801d094:	af02      	add	r7, sp, #8
 801d096:	6078      	str	r0, [r7, #4]
  assert_param(_this != NULL);
 801d098:	687b      	ldr	r3, [r7, #4]
 801d09a:	2b00      	cmp	r3, #0
 801d09c:	d104      	bne.n	801d0a8 <ISM330DHCXTaskExecuteStepState1+0x18>
 801d09e:	f240 51af 	movw	r1, #1455	; 0x5af
 801d0a2:	485a      	ldr	r0, [pc, #360]	; (801d20c <ISM330DHCXTaskExecuteStepState1+0x17c>)
 801d0a4:	f7f8 f901 	bl	80152aa <assert_failed>
  sys_error_code_t res = SYS_NO_ERROR_CODE;
 801d0a8:	2300      	movs	r3, #0
 801d0aa:	83fb      	strh	r3, [r7, #30]
  ISM330DHCXTask *p_obj = (ISM330DHCXTask*) _this;
 801d0ac:	687b      	ldr	r3, [r7, #4]
 801d0ae:	61bb      	str	r3, [r7, #24]
  SMMessage report =
 801d0b0:	f107 0308 	add.w	r3, r7, #8
 801d0b4:	2200      	movs	r2, #0
 801d0b6:	601a      	str	r2, [r3, #0]
 801d0b8:	605a      	str	r2, [r3, #4]
 801d0ba:	609a      	str	r2, [r3, #8]
 801d0bc:	60da      	str	r2, [r3, #12]
  {
      0
  };

  AMTExSetInactiveState((AManagedTaskEx*) _this, TRUE);
 801d0be:	2101      	movs	r1, #1
 801d0c0:	6878      	ldr	r0, [r7, #4]
 801d0c2:	f7fe fe4d 	bl	801bd60 <AMTExSetInactiveState>
  if(TX_SUCCESS == tx_queue_receive(&p_obj->in_queue, &report, TX_WAIT_FOREVER))
 801d0c6:	69bb      	ldr	r3, [r7, #24]
 801d0c8:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 801d0cc:	f107 0108 	add.w	r1, r7, #8
 801d0d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801d0d4:	4618      	mov	r0, r3
 801d0d6:	f7f5 feb1 	bl	8012e3c <_txe_queue_receive>
 801d0da:	4603      	mov	r3, r0
 801d0dc:	2b00      	cmp	r3, #0
 801d0de:	f040 808c 	bne.w	801d1fa <ISM330DHCXTaskExecuteStepState1+0x16a>
  {
    AMTExSetInactiveState((AManagedTaskEx*) _this, FALSE);
 801d0e2:	2100      	movs	r1, #0
 801d0e4:	6878      	ldr	r0, [r7, #4]
 801d0e6:	f7fe fe3b 	bl	801bd60 <AMTExSetInactiveState>

    switch(report.messageID)
 801d0ea:	7a3b      	ldrb	r3, [r7, #8]
 801d0ec:	2b04      	cmp	r3, #4
 801d0ee:	d003      	beq.n	801d0f8 <ISM330DHCXTaskExecuteStepState1+0x68>
 801d0f0:	2bfe      	cmp	r3, #254	; 0xfe
 801d0f2:	d16a      	bne.n	801d1ca <ISM330DHCXTaskExecuteStepState1+0x13a>
    {
      case SM_MESSAGE_ID_FORCE_STEP:
        {
          // do nothing. I need only to resume.
          __NOP();
 801d0f4:	bf00      	nop
          break;
 801d0f6:	e083      	b.n	801d200 <ISM330DHCXTaskExecuteStepState1+0x170>
        }
      case SM_MESSAGE_ID_SENSOR_CMD:
        {
          switch(report.sensorMessage.nCmdID)
 801d0f8:	897b      	ldrh	r3, [r7, #10]
 801d0fa:	3b02      	subs	r3, #2
 801d0fc:	2b03      	cmp	r3, #3
 801d0fe:	d84b      	bhi.n	801d198 <ISM330DHCXTaskExecuteStepState1+0x108>
 801d100:	a201      	add	r2, pc, #4	; (adr r2, 801d108 <ISM330DHCXTaskExecuteStepState1+0x78>)
 801d102:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d106:	bf00      	nop
 801d108:	0801d119 	.word	0x0801d119
 801d10c:	0801d139 	.word	0x0801d139
 801d110:	0801d159 	.word	0x0801d159
 801d114:	0801d179 	.word	0x0801d179
          {
            case SENSOR_CMD_ID_SET_ODR:
              res = ISM330DHCXTaskSensorSetODR(p_obj, report);
 801d118:	466a      	mov	r2, sp
 801d11a:	f107 0310 	add.w	r3, r7, #16
 801d11e:	e893 0003 	ldmia.w	r3, {r0, r1}
 801d122:	e882 0003 	stmia.w	r2, {r0, r1}
 801d126:	f107 0308 	add.w	r3, r7, #8
 801d12a:	cb0c      	ldmia	r3, {r2, r3}
 801d12c:	69b8      	ldr	r0, [r7, #24]
 801d12e:	f001 fb55 	bl	801e7dc <ISM330DHCXTaskSensorSetODR>
 801d132:	4603      	mov	r3, r0
 801d134:	83fb      	strh	r3, [r7, #30]
              break;
 801d136:	e047      	b.n	801d1c8 <ISM330DHCXTaskExecuteStepState1+0x138>
            case SENSOR_CMD_ID_SET_FS:
              res = ISM330DHCXTaskSensorSetFS(p_obj, report);
 801d138:	466a      	mov	r2, sp
 801d13a:	f107 0310 	add.w	r3, r7, #16
 801d13e:	e893 0003 	ldmia.w	r3, {r0, r1}
 801d142:	e882 0003 	stmia.w	r2, {r0, r1}
 801d146:	f107 0308 	add.w	r3, r7, #8
 801d14a:	cb0c      	ldmia	r3, {r2, r3}
 801d14c:	69b8      	ldr	r0, [r7, #24]
 801d14e:	f001 fcf1 	bl	801eb34 <ISM330DHCXTaskSensorSetFS>
 801d152:	4603      	mov	r3, r0
 801d154:	83fb      	strh	r3, [r7, #30]
              break;
 801d156:	e037      	b.n	801d1c8 <ISM330DHCXTaskExecuteStepState1+0x138>
            case SENSOR_CMD_ID_ENABLE:
              res = ISM330DHCXTaskSensorEnable(p_obj, report);
 801d158:	466a      	mov	r2, sp
 801d15a:	f107 0310 	add.w	r3, r7, #16
 801d15e:	e893 0003 	ldmia.w	r3, {r0, r1}
 801d162:	e882 0003 	stmia.w	r2, {r0, r1}
 801d166:	f107 0308 	add.w	r3, r7, #8
 801d16a:	cb0c      	ldmia	r3, {r2, r3}
 801d16c:	69b8      	ldr	r0, [r7, #24]
 801d16e:	f001 fdf1 	bl	801ed54 <ISM330DHCXTaskSensorEnable>
 801d172:	4603      	mov	r3, r0
 801d174:	83fb      	strh	r3, [r7, #30]
              break;
 801d176:	e027      	b.n	801d1c8 <ISM330DHCXTaskExecuteStepState1+0x138>
            case SENSOR_CMD_ID_DISABLE:
              res = ISM330DHCXTaskSensorDisable(p_obj, report);
 801d178:	466a      	mov	r2, sp
 801d17a:	f107 0310 	add.w	r3, r7, #16
 801d17e:	e893 0003 	ldmia.w	r3, {r0, r1}
 801d182:	e882 0003 	stmia.w	r2, {r0, r1}
 801d186:	f107 0308 	add.w	r3, r7, #8
 801d18a:	cb0c      	ldmia	r3, {r2, r3}
 801d18c:	69b8      	ldr	r0, [r7, #24]
 801d18e:	f001 fe19 	bl	801edc4 <ISM330DHCXTaskSensorDisable>
 801d192:	4603      	mov	r3, r0
 801d194:	83fb      	strh	r3, [r7, #30]
              break;
 801d196:	e017      	b.n	801d1c8 <ISM330DHCXTaskExecuteStepState1+0x138>
            default:
              // unwanted report
              res = SYS_APP_TASK_UNKNOWN_REPORT_ERROR_CODE;
 801d198:	f240 3322 	movw	r3, #802	; 0x322
 801d19c:	83fb      	strh	r3, [r7, #30]
              SYS_SET_SERVICE_LEVEL_ERROR_CODE(SYS_APP_TASK_UNKNOWN_REPORT_ERROR_CODE);
 801d19e:	4b1c      	ldr	r3, [pc, #112]	; (801d210 <ISM330DHCXTaskExecuteStepState1+0x180>)
 801d1a0:	f240 3222 	movw	r2, #802	; 0x322
 801d1a4:	805a      	strh	r2, [r3, #2]

              SYS_DEBUGF(SYS_DBG_LEVEL_WARNING, ("ISM330DHCX: unexpected report in Run: %i\r\n", report.messageID));
 801d1a6:	4b1b      	ldr	r3, [pc, #108]	; (801d214 <ISM330DHCXTaskExecuteStepState1+0x184>)
 801d1a8:	781b      	ldrb	r3, [r3, #0]
 801d1aa:	2b05      	cmp	r3, #5
 801d1ac:	d80b      	bhi.n	801d1c6 <ISM330DHCXTaskExecuteStepState1+0x136>
 801d1ae:	4b1a      	ldr	r3, [pc, #104]	; (801d218 <ISM330DHCXTaskExecuteStepState1+0x188>)
 801d1b0:	681b      	ldr	r3, [r3, #0]
 801d1b2:	4798      	blx	r3
 801d1b4:	4b19      	ldr	r3, [pc, #100]	; (801d21c <ISM330DHCXTaskExecuteStepState1+0x18c>)
 801d1b6:	681b      	ldr	r3, [r3, #0]
 801d1b8:	7a3a      	ldrb	r2, [r7, #8]
 801d1ba:	4611      	mov	r1, r2
 801d1bc:	4818      	ldr	r0, [pc, #96]	; (801d220 <ISM330DHCXTaskExecuteStepState1+0x190>)
 801d1be:	4798      	blx	r3
 801d1c0:	4b18      	ldr	r3, [pc, #96]	; (801d224 <ISM330DHCXTaskExecuteStepState1+0x194>)
 801d1c2:	681b      	ldr	r3, [r3, #0]
 801d1c4:	4798      	blx	r3
              break;
 801d1c6:	bf00      	nop
          }
          break;
 801d1c8:	e01a      	b.n	801d200 <ISM330DHCXTaskExecuteStepState1+0x170>
        }
      default:
        {
          // unwanted report
          res = SYS_APP_TASK_UNKNOWN_REPORT_ERROR_CODE;
 801d1ca:	f240 3322 	movw	r3, #802	; 0x322
 801d1ce:	83fb      	strh	r3, [r7, #30]
          SYS_SET_SERVICE_LEVEL_ERROR_CODE(SYS_APP_TASK_UNKNOWN_REPORT_ERROR_CODE);
 801d1d0:	4b0f      	ldr	r3, [pc, #60]	; (801d210 <ISM330DHCXTaskExecuteStepState1+0x180>)
 801d1d2:	f240 3222 	movw	r2, #802	; 0x322
 801d1d6:	805a      	strh	r2, [r3, #2]

          SYS_DEBUGF(SYS_DBG_LEVEL_WARNING, ("ISM330DHCX: unexpected report in Run: %i\r\n", report.messageID));
 801d1d8:	4b0e      	ldr	r3, [pc, #56]	; (801d214 <ISM330DHCXTaskExecuteStepState1+0x184>)
 801d1da:	781b      	ldrb	r3, [r3, #0]
 801d1dc:	2b05      	cmp	r3, #5
 801d1de:	d80e      	bhi.n	801d1fe <ISM330DHCXTaskExecuteStepState1+0x16e>
 801d1e0:	4b0d      	ldr	r3, [pc, #52]	; (801d218 <ISM330DHCXTaskExecuteStepState1+0x188>)
 801d1e2:	681b      	ldr	r3, [r3, #0]
 801d1e4:	4798      	blx	r3
 801d1e6:	4b0d      	ldr	r3, [pc, #52]	; (801d21c <ISM330DHCXTaskExecuteStepState1+0x18c>)
 801d1e8:	681b      	ldr	r3, [r3, #0]
 801d1ea:	7a3a      	ldrb	r2, [r7, #8]
 801d1ec:	4611      	mov	r1, r2
 801d1ee:	480c      	ldr	r0, [pc, #48]	; (801d220 <ISM330DHCXTaskExecuteStepState1+0x190>)
 801d1f0:	4798      	blx	r3
 801d1f2:	4b0c      	ldr	r3, [pc, #48]	; (801d224 <ISM330DHCXTaskExecuteStepState1+0x194>)
 801d1f4:	681b      	ldr	r3, [r3, #0]
 801d1f6:	4798      	blx	r3
          break;
 801d1f8:	e001      	b.n	801d1fe <ISM330DHCXTaskExecuteStepState1+0x16e>
        }
    }
  }
 801d1fa:	bf00      	nop
 801d1fc:	e000      	b.n	801d200 <ISM330DHCXTaskExecuteStepState1+0x170>
          break;
 801d1fe:	bf00      	nop

  return res;
 801d200:	8bfb      	ldrh	r3, [r7, #30]
}
 801d202:	4618      	mov	r0, r3
 801d204:	3720      	adds	r7, #32
 801d206:	46bd      	mov	sp, r7
 801d208:	bd80      	pop	{r7, pc}
 801d20a:	bf00      	nop
 801d20c:	080274b8 	.word	0x080274b8
 801d210:	20000700 	.word	0x20000700
 801d214:	2000002c 	.word	0x2000002c
 801d218:	20000030 	.word	0x20000030
 801d21c:	20000038 	.word	0x20000038
 801d220:	0802761c 	.word	0x0802761c
 801d224:	20000034 	.word	0x20000034

0801d228 <ISM330DHCXTaskExecuteStepDatalog>:

static sys_error_code_t ISM330DHCXTaskExecuteStepDatalog(AManagedTask *_this)
{
 801d228:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801d22c:	b0c6      	sub	sp, #280	; 0x118
 801d22e:	af04      	add	r7, sp, #16
 801d230:	60f8      	str	r0, [r7, #12]
  assert_param(_this != NULL);
 801d232:	68fb      	ldr	r3, [r7, #12]
 801d234:	2b00      	cmp	r3, #0
 801d236:	d104      	bne.n	801d242 <ISM330DHCXTaskExecuteStepDatalog+0x1a>
 801d238:	f240 51ef 	movw	r1, #1519	; 0x5ef
 801d23c:	48bb      	ldr	r0, [pc, #748]	; (801d52c <ISM330DHCXTaskExecuteStepDatalog+0x304>)
 801d23e:	f7f8 f834 	bl	80152aa <assert_failed>
  sys_error_code_t res = SYS_NO_ERROR_CODE;
 801d242:	2300      	movs	r3, #0
 801d244:	f8a7 3106 	strh.w	r3, [r7, #262]	; 0x106
  ISM330DHCXTask *p_obj = (ISM330DHCXTask*) _this;
 801d248:	68fb      	ldr	r3, [r7, #12]
 801d24a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  SMMessage report =
 801d24e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801d252:	2200      	movs	r2, #0
 801d254:	601a      	str	r2, [r3, #0]
 801d256:	605a      	str	r2, [r3, #4]
 801d258:	609a      	str	r2, [r3, #8]
 801d25a:	60da      	str	r2, [r3, #12]
  {
      0
  };

  AMTExSetInactiveState((AManagedTaskEx*) _this, TRUE);
 801d25c:	2101      	movs	r1, #1
 801d25e:	68f8      	ldr	r0, [r7, #12]
 801d260:	f7fe fd7e 	bl	801bd60 <AMTExSetInactiveState>
  if(TX_SUCCESS == tx_queue_receive(&p_obj->in_queue, &report, TX_WAIT_FOREVER))
 801d264:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801d268:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 801d26c:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 801d270:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801d274:	4618      	mov	r0, r3
 801d276:	f7f5 fde1 	bl	8012e3c <_txe_queue_receive>
 801d27a:	4603      	mov	r3, r0
 801d27c:	2b00      	cmp	r3, #0
 801d27e:	f040 84a1 	bne.w	801dbc4 <ISM330DHCXTaskExecuteStepDatalog+0x99c>
  {
    AMTExSetInactiveState((AManagedTaskEx*) _this, FALSE);
 801d282:	2100      	movs	r1, #0
 801d284:	68f8      	ldr	r0, [r7, #12]
 801d286:	f7fe fd6b 	bl	801bd60 <AMTExSetInactiveState>

    switch(report.messageID)
 801d28a:	f897 30d0 	ldrb.w	r3, [r7, #208]	; 0xd0
 801d28e:	2bfe      	cmp	r3, #254	; 0xfe
 801d290:	d00f      	beq.n	801d2b2 <ISM330DHCXTaskExecuteStepDatalog+0x8a>
 801d292:	2bfe      	cmp	r3, #254	; 0xfe
 801d294:	f300 847c 	bgt.w	801db90 <ISM330DHCXTaskExecuteStepDatalog+0x968>
 801d298:	2b04      	cmp	r3, #4
 801d29a:	f000 83be 	beq.w	801da1a <ISM330DHCXTaskExecuteStepDatalog+0x7f2>
 801d29e:	2b04      	cmp	r3, #4
 801d2a0:	f300 8476 	bgt.w	801db90 <ISM330DHCXTaskExecuteStepDatalog+0x968>
 801d2a4:	2b01      	cmp	r3, #1
 801d2a6:	d007      	beq.n	801d2b8 <ISM330DHCXTaskExecuteStepDatalog+0x90>
 801d2a8:	2b02      	cmp	r3, #2
 801d2aa:	f000 82d8 	beq.w	801d85e <ISM330DHCXTaskExecuteStepDatalog+0x636>
 801d2ae:	f000 bc6f 	b.w	801db90 <ISM330DHCXTaskExecuteStepDatalog+0x968>
    {
      case SM_MESSAGE_ID_FORCE_STEP:
        {
          // do nothing. I need only to resume.
          __NOP();
 801d2b2:	bf00      	nop
          break;
 801d2b4:	f000 bc8d 	b.w	801dbd2 <ISM330DHCXTaskExecuteStepDatalog+0x9aa>
        }

      case SM_MESSAGE_ID_DATA_READY:
        {
//        SYS_DEBUGF(SYS_DBG_LEVEL_VERBOSE, ("ISM330DHCX: new data.\r\n"));
          if(p_obj->pIRQConfig == NULL)
 801d2b8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801d2bc:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 801d2c0:	2b00      	cmp	r3, #0
 801d2c2:	d110      	bne.n	801d2e6 <ISM330DHCXTaskExecuteStepDatalog+0xbe>
          {
            if(TX_SUCCESS != tx_timer_change(&p_obj->read_timer, AMT_MS_TO_TICKS(ISM330DHCX_TASK_CFG_TIMER_PERIOD_MS), AMT_MS_TO_TICKS(ISM330DHCX_TASK_CFG_TIMER_PERIOD_MS)))
 801d2c4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801d2c8:	f603 33b4 	addw	r3, r3, #2996	; 0xbb4
 801d2cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801d2d0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 801d2d4:	4618      	mov	r0, r3
 801d2d6:	f7f6 f8ef 	bl	80134b8 <_txe_timer_change>
 801d2da:	4603      	mov	r3, r0
 801d2dc:	2b00      	cmp	r3, #0
 801d2de:	d002      	beq.n	801d2e6 <ISM330DHCXTaskExecuteStepDatalog+0xbe>
            {
              return SYS_UNDEFINED_ERROR_CODE;
 801d2e0:	2302      	movs	r3, #2
 801d2e2:	f000 bc78 	b.w	801dbd6 <ISM330DHCXTaskExecuteStepDatalog+0x9ae>
            }
          }

          res = ISM330DHCXTaskSensorReadData(p_obj);
 801d2e6:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 801d2ea:	f001 f82f 	bl	801e34c <ISM330DHCXTaskSensorReadData>
 801d2ee:	4603      	mov	r3, r0
 801d2f0:	f8a7 3106 	strh.w	r3, [r7, #262]	; 0x106
          if(!SYS_IS_ERROR_CODE(res))
 801d2f4:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 801d2f8:	2b00      	cmp	r3, #0
 801d2fa:	f040 8465 	bne.w	801dbc8 <ISM330DHCXTaskExecuteStepDatalog+0x9a0>
          {
            // update the time stamp
            uint32_t period = 0;
 801d2fe:	2300      	movs	r3, #0
 801d300:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
            if(p_obj->timestamp_tick >= p_obj->old_timestamp_tick)
 801d304:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801d308:	f8d3 2c0c 	ldr.w	r2, [r3, #3084]	; 0xc0c
 801d30c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801d310:	f8d3 3c10 	ldr.w	r3, [r3, #3088]	; 0xc10
 801d314:	429a      	cmp	r2, r3
 801d316:	d30b      	bcc.n	801d330 <ISM330DHCXTaskExecuteStepDatalog+0x108>
            {
              period = p_obj->timestamp_tick - p_obj->old_timestamp_tick;
 801d318:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801d31c:	f8d3 2c0c 	ldr.w	r2, [r3, #3084]	; 0xc0c
 801d320:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801d324:	f8d3 3c10 	ldr.w	r3, [r3, #3088]	; 0xc10
 801d328:	1ad3      	subs	r3, r2, r3
 801d32a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 801d32e:	e00b      	b.n	801d348 <ISM330DHCXTaskExecuteStepDatalog+0x120>
            }
            else
            {
              // overflow of the hw timer
              period = p_obj->timestamp_tick + (0xFFFFFFFF - p_obj->old_timestamp_tick);
 801d330:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801d334:	f8d3 2c0c 	ldr.w	r2, [r3, #3084]	; 0xc0c
 801d338:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801d33c:	f8d3 3c10 	ldr.w	r3, [r3, #3088]	; 0xc10
 801d340:	1ad3      	subs	r3, r2, r3
 801d342:	3b01      	subs	r3, #1
 801d344:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
            }
            p_obj->old_timestamp_tick = p_obj->timestamp_tick;
 801d348:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801d34c:	f8d3 2c0c 	ldr.w	r2, [r3, #3084]	; 0xc0c
 801d350:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801d354:	f8c3 2c10 	str.w	r2, [r3, #3088]	; 0xc10
            p_obj->timestamp += period;
 801d358:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801d35c:	f503 6342 	add.w	r3, r3, #3104	; 0xc20
 801d360:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801d364:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 801d368:	2000      	movs	r0, #0
 801d36a:	4688      	mov	r8, r1
 801d36c:	4681      	mov	r9, r0
 801d36e:	eb12 0108 	adds.w	r1, r2, r8
 801d372:	6039      	str	r1, [r7, #0]
 801d374:	eb43 0309 	adc.w	r3, r3, r9
 801d378:	607b      	str	r3, [r7, #4]
 801d37a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801d37e:	f503 6342 	add.w	r3, r3, #3104	; 0xc20
 801d382:	e9d7 1200 	ldrd	r1, r2, [r7]
 801d386:	e943 1202 	strd	r1, r2, [r3, #-8]
            // notify the listeners...
            double timestamp = (double) p_obj->timestamp / (double) (SystemCoreClock);
 801d38a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801d38e:	f503 6342 	add.w	r3, r3, #3104	; 0xc20
 801d392:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801d396:	4610      	mov	r0, r2
 801d398:	4619      	mov	r1, r3
 801d39a:	f7e3 fa2b 	bl	80007f4 <__aeabi_ul2d>
 801d39e:	4604      	mov	r4, r0
 801d3a0:	460d      	mov	r5, r1
 801d3a2:	4b63      	ldr	r3, [pc, #396]	; (801d530 <ISM330DHCXTaskExecuteStepDatalog+0x308>)
 801d3a4:	681b      	ldr	r3, [r3, #0]
 801d3a6:	4618      	mov	r0, r3
 801d3a8:	f7e3 f9e0 	bl	800076c <__aeabi_ui2d>
 801d3ac:	4602      	mov	r2, r0
 801d3ae:	460b      	mov	r3, r1
 801d3b0:	4620      	mov	r0, r4
 801d3b2:	4629      	mov	r1, r5
 801d3b4:	f7e3 fb7e 	bl	8000ab4 <__aeabi_ddiv>
 801d3b8:	4602      	mov	r2, r0
 801d3ba:	460b      	mov	r3, r1
 801d3bc:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
            double delta_timestamp = (double) period / (double) (SystemCoreClock);
 801d3c0:	f8d7 0100 	ldr.w	r0, [r7, #256]	; 0x100
 801d3c4:	f7e3 f9d2 	bl	800076c <__aeabi_ui2d>
 801d3c8:	4604      	mov	r4, r0
 801d3ca:	460d      	mov	r5, r1
 801d3cc:	4b58      	ldr	r3, [pc, #352]	; (801d530 <ISM330DHCXTaskExecuteStepDatalog+0x308>)
 801d3ce:	681b      	ldr	r3, [r3, #0]
 801d3d0:	4618      	mov	r0, r3
 801d3d2:	f7e3 f9cb 	bl	800076c <__aeabi_ui2d>
 801d3d6:	4602      	mov	r2, r0
 801d3d8:	460b      	mov	r3, r1
 801d3da:	4620      	mov	r0, r4
 801d3dc:	4629      	mov	r1, r5
 801d3de:	f7e3 fb69 	bl	8000ab4 <__aeabi_ddiv>
 801d3e2:	4602      	mov	r2, r0
 801d3e4:	460b      	mov	r3, r1
 801d3e6:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0

            if((p_obj->acc_sensor_status.IsActive) && (p_obj->gyro_sensor_status.IsActive)) /* Read both ACC and GYRO */
 801d3ea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801d3ee:	f893 30f4 	ldrb.w	r3, [r3, #244]	; 0xf4
 801d3f2:	2b00      	cmp	r3, #0
 801d3f4:	f000 8150 	beq.w	801d698 <ISM330DHCXTaskExecuteStepDatalog+0x470>
 801d3f8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801d3fc:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 801d400:	2b00      	cmp	r3, #0
 801d402:	f000 8149 	beq.w	801d698 <ISM330DHCXTaskExecuteStepDatalog+0x470>
            {
              SensorEvent evt_acc, evt_gyro;

              if(p_obj->acc_sensor_status.ODR > p_obj->gyro_sensor_status.ODR) /* Acc is faster than Gyro */
 801d406:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801d40a:	ed93 7a3e 	vldr	s14, [r3, #248]	; 0xf8
 801d40e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801d412:	edd3 7a47 	vldr	s15, [r3, #284]	; 0x11c
 801d416:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801d41a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d41e:	f340 808b 	ble.w	801d538 <ISM330DHCXTaskExecuteStepDatalog+0x310>
              {
                AI_SP_Stream_t streamAcc =
 801d422:	f107 0314 	add.w	r3, r7, #20
 801d426:	222c      	movs	r2, #44	; 0x2c
 801d428:	2100      	movs	r1, #0
 801d42a:	4618      	mov	r0, r3
 801d42c:	f006 fbfd 	bl	8023c2a <memset>
                {
                    .packet.payload = p_obj->p_fast_sensor_data_buff,
 801d430:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801d434:	f503 73c8 	add.w	r3, r3, #400	; 0x190
                AI_SP_Stream_t streamAcc =
 801d438:	61bb      	str	r3, [r7, #24]
 801d43a:	4b3e      	ldr	r3, [pc, #248]	; (801d534 <ISM330DHCXTaskExecuteStepDatalog+0x30c>)
 801d43c:	61fb      	str	r3, [r7, #28]
 801d43e:	2302      	movs	r3, #2
 801d440:	87bb      	strh	r3, [r7, #60]	; 0x3c
                    //.packet.payload_size = p_obj->samples_per_it, /* what is the paylod size in this case ? */
                    .packet.payload_fmt = AI_SP_FMT_INT16_RESET(),
                    .mode = AI_SP_MODE_COLUMN };
                ai_logging_create_shape_2d(&streamAcc.packet.shape, 3, p_obj->acc_samples_count);
 801d442:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801d446:	f8b3 2ba2 	ldrh.w	r2, [r3, #2978]	; 0xba2
 801d44a:	f107 0314 	add.w	r3, r7, #20
 801d44e:	3310      	adds	r3, #16
 801d450:	2103      	movs	r1, #3
 801d452:	4618      	mov	r0, r3
 801d454:	f7f8 fc3f 	bl	8015cd6 <ai_logging_create_shape_2d>
                streamAcc.packet.payload_size = 2 * streamAcc.packet.shape.shapes[0] * streamAcc.packet.shape.shapes[1];
 801d458:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801d45a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 801d45c:	fb02 f303 	mul.w	r3, r2, r3
 801d460:	005b      	lsls	r3, r3, #1
 801d462:	623b      	str	r3, [r7, #32]

                SensorEventInit((IEvent*) &evt_acc, p_obj->p_acc_event_src, (ai_logging_packet_t*) &streamAcc, timestamp, p_obj->acc_id);
 801d464:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801d468:	f8d3 1ba8 	ldr.w	r1, [r3, #2984]	; 0xba8
 801d46c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801d470:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 801d474:	b29b      	uxth	r3, r3
 801d476:	f107 0414 	add.w	r4, r7, #20
 801d47a:	f107 00b8 	add.w	r0, r7, #184	; 0xb8
 801d47e:	9302      	str	r3, [sp, #8]
 801d480:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 801d484:	e9cd 2300 	strd	r2, r3, [sp]
 801d488:	4622      	mov	r2, r4
 801d48a:	f7fe fcdf 	bl	801be4c <SensorEventInit>

                AI_SP_Stream_t streamGyro =
 801d48e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801d492:	222c      	movs	r2, #44	; 0x2c
 801d494:	2100      	movs	r1, #0
 801d496:	4618      	mov	r0, r3
 801d498:	f006 fbc7 	bl	8023c2a <memset>
                {
                    .packet.payload = p_obj->p_slow_sensor_data_buff,
 801d49c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801d4a0:	f503 6309 	add.w	r3, r3, #2192	; 0x890
                AI_SP_Stream_t streamGyro =
 801d4a4:	647b      	str	r3, [r7, #68]	; 0x44
 801d4a6:	4b23      	ldr	r3, [pc, #140]	; (801d534 <ISM330DHCXTaskExecuteStepDatalog+0x30c>)
 801d4a8:	64bb      	str	r3, [r7, #72]	; 0x48
 801d4aa:	2302      	movs	r3, #2
 801d4ac:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
                    //.packet.payload_size = p_obj->samples_per_it, /* what is the paylod size in this case ? */
                    .packet.payload_fmt = AI_SP_FMT_INT16_RESET(),
                    .mode = AI_SP_MODE_COLUMN };
                ai_logging_create_shape_2d(&streamGyro.packet.shape, 3, p_obj->gyro_samples_count);
 801d4b0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801d4b4:	f8b3 2ba4 	ldrh.w	r2, [r3, #2980]	; 0xba4
 801d4b8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801d4bc:	3310      	adds	r3, #16
 801d4be:	2103      	movs	r1, #3
 801d4c0:	4618      	mov	r0, r3
 801d4c2:	f7f8 fc08 	bl	8015cd6 <ai_logging_create_shape_2d>
                streamGyro.packet.payload_size = 2 * streamGyro.packet.shape.shapes[0] * streamGyro.packet.shape.shapes[1];
 801d4c6:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 801d4ca:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 801d4ce:	fb02 f303 	mul.w	r3, r2, r3
 801d4d2:	005b      	lsls	r3, r3, #1
 801d4d4:	64fb      	str	r3, [r7, #76]	; 0x4c

                SensorEventInit((IEvent*) &evt_gyro, p_obj->p_gyro_event_src, (ai_logging_packet_t*) &streamGyro, timestamp, p_obj->gyro_id);
 801d4d6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801d4da:	f8d3 1bac 	ldr.w	r1, [r3, #2988]	; 0xbac
 801d4de:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801d4e2:	f893 3155 	ldrb.w	r3, [r3, #341]	; 0x155
 801d4e6:	b29b      	uxth	r3, r3
 801d4e8:	f107 0440 	add.w	r4, r7, #64	; 0x40
 801d4ec:	f107 00a0 	add.w	r0, r7, #160	; 0xa0
 801d4f0:	9302      	str	r3, [sp, #8]
 801d4f2:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 801d4f6:	e9cd 2300 	strd	r2, r3, [sp]
 801d4fa:	4622      	mov	r2, r4
 801d4fc:	f7fe fca6 	bl	801be4c <SensorEventInit>

                IEventSrcSendEvent(p_obj->p_acc_event_src, (IEvent*) &evt_acc, NULL);
 801d500:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801d504:	f8d3 3ba8 	ldr.w	r3, [r3, #2984]	; 0xba8
 801d508:	f107 01b8 	add.w	r1, r7, #184	; 0xb8
 801d50c:	2200      	movs	r2, #0
 801d50e:	4618      	mov	r0, r3
 801d510:	f7fe fc7b 	bl	801be0a <IEventSrcSendEvent>
                IEventSrcSendEvent(p_obj->p_gyro_event_src, (IEvent*) &evt_gyro, NULL);
 801d514:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801d518:	f8d3 3bac 	ldr.w	r3, [r3, #2988]	; 0xbac
 801d51c:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 801d520:	2200      	movs	r2, #0
 801d522:	4618      	mov	r0, r3
 801d524:	f7fe fc71 	bl	801be0a <IEventSrcSendEvent>
 801d528:	e089      	b.n	801d63e <ISM330DHCXTaskExecuteStepDatalog+0x416>
 801d52a:	bf00      	nop
 801d52c:	080274b8 	.word	0x080274b8
 801d530:	20000044 	.word	0x20000044
 801d534:	00840800 	.word	0x00840800
              }
              else
              {
                AI_SP_Stream_t streamAcc =
 801d538:	f107 0314 	add.w	r3, r7, #20
 801d53c:	222c      	movs	r2, #44	; 0x2c
 801d53e:	2100      	movs	r1, #0
 801d540:	4618      	mov	r0, r3
 801d542:	f006 fb72 	bl	8023c2a <memset>
                {
                    .packet.payload = p_obj->p_slow_sensor_data_buff,
 801d546:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801d54a:	f503 6309 	add.w	r3, r3, #2192	; 0x890
                AI_SP_Stream_t streamAcc =
 801d54e:	61bb      	str	r3, [r7, #24]
 801d550:	4bce      	ldr	r3, [pc, #824]	; (801d88c <ISM330DHCXTaskExecuteStepDatalog+0x664>)
 801d552:	61fb      	str	r3, [r7, #28]
 801d554:	2302      	movs	r3, #2
 801d556:	87bb      	strh	r3, [r7, #60]	; 0x3c
                    .packet.payload_fmt = AI_SP_FMT_INT16_RESET(),
                    .mode = AI_SP_MODE_COLUMN };
                ai_logging_create_shape_2d(&streamAcc.packet.shape, 3, p_obj->acc_samples_count);
 801d558:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801d55c:	f8b3 2ba2 	ldrh.w	r2, [r3, #2978]	; 0xba2
 801d560:	f107 0314 	add.w	r3, r7, #20
 801d564:	3310      	adds	r3, #16
 801d566:	2103      	movs	r1, #3
 801d568:	4618      	mov	r0, r3
 801d56a:	f7f8 fbb4 	bl	8015cd6 <ai_logging_create_shape_2d>
                streamAcc.packet.payload_size = 2 * streamAcc.packet.shape.shapes[0] * streamAcc.packet.shape.shapes[1];
 801d56e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801d570:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 801d572:	fb02 f303 	mul.w	r3, r2, r3
 801d576:	005b      	lsls	r3, r3, #1
 801d578:	623b      	str	r3, [r7, #32]

                SensorEventInit((IEvent*) &evt_acc, p_obj->p_acc_event_src, (ai_logging_packet_t*) &streamAcc, timestamp, p_obj->acc_id);
 801d57a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801d57e:	f8d3 1ba8 	ldr.w	r1, [r3, #2984]	; 0xba8
 801d582:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801d586:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 801d58a:	b29b      	uxth	r3, r3
 801d58c:	f107 0414 	add.w	r4, r7, #20
 801d590:	f107 00b8 	add.w	r0, r7, #184	; 0xb8
 801d594:	9302      	str	r3, [sp, #8]
 801d596:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 801d59a:	e9cd 2300 	strd	r2, r3, [sp]
 801d59e:	4622      	mov	r2, r4
 801d5a0:	f7fe fc54 	bl	801be4c <SensorEventInit>

                AI_SP_Stream_t streamGyro =
 801d5a4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801d5a8:	222c      	movs	r2, #44	; 0x2c
 801d5aa:	2100      	movs	r1, #0
 801d5ac:	4618      	mov	r0, r3
 801d5ae:	f006 fb3c 	bl	8023c2a <memset>
                {
                    .packet.payload = p_obj->p_fast_sensor_data_buff,
 801d5b2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801d5b6:	f503 73c8 	add.w	r3, r3, #400	; 0x190
                AI_SP_Stream_t streamGyro =
 801d5ba:	647b      	str	r3, [r7, #68]	; 0x44
 801d5bc:	4bb3      	ldr	r3, [pc, #716]	; (801d88c <ISM330DHCXTaskExecuteStepDatalog+0x664>)
 801d5be:	64bb      	str	r3, [r7, #72]	; 0x48
 801d5c0:	2302      	movs	r3, #2
 801d5c2:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
                    //.packet.payload_size = p_obj->samples_per_it, /* what is the paylod size in this case ? */
                    .packet.payload_fmt = AI_SP_FMT_INT16_RESET(),
                    .mode = AI_SP_MODE_COLUMN };
                ai_logging_create_shape_2d(&streamGyro.packet.shape, 3, p_obj->gyro_samples_count);
 801d5c6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801d5ca:	f8b3 2ba4 	ldrh.w	r2, [r3, #2980]	; 0xba4
 801d5ce:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801d5d2:	3310      	adds	r3, #16
 801d5d4:	2103      	movs	r1, #3
 801d5d6:	4618      	mov	r0, r3
 801d5d8:	f7f8 fb7d 	bl	8015cd6 <ai_logging_create_shape_2d>
                streamGyro.packet.payload_size = 2 * streamGyro.packet.shape.shapes[0] * streamGyro.packet.shape.shapes[1];
 801d5dc:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 801d5e0:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 801d5e4:	fb02 f303 	mul.w	r3, r2, r3
 801d5e8:	005b      	lsls	r3, r3, #1
 801d5ea:	64fb      	str	r3, [r7, #76]	; 0x4c

                SensorEventInit((IEvent*) &evt_gyro, p_obj->p_gyro_event_src, (ai_logging_packet_t*) &streamGyro, timestamp, p_obj->gyro_id);
 801d5ec:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801d5f0:	f8d3 1bac 	ldr.w	r1, [r3, #2988]	; 0xbac
 801d5f4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801d5f8:	f893 3155 	ldrb.w	r3, [r3, #341]	; 0x155
 801d5fc:	b29b      	uxth	r3, r3
 801d5fe:	f107 0440 	add.w	r4, r7, #64	; 0x40
 801d602:	f107 00a0 	add.w	r0, r7, #160	; 0xa0
 801d606:	9302      	str	r3, [sp, #8]
 801d608:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 801d60c:	e9cd 2300 	strd	r2, r3, [sp]
 801d610:	4622      	mov	r2, r4
 801d612:	f7fe fc1b 	bl	801be4c <SensorEventInit>

                IEventSrcSendEvent(p_obj->p_acc_event_src, (IEvent*) &evt_acc, NULL);
 801d616:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801d61a:	f8d3 3ba8 	ldr.w	r3, [r3, #2984]	; 0xba8
 801d61e:	f107 01b8 	add.w	r1, r7, #184	; 0xb8
 801d622:	2200      	movs	r2, #0
 801d624:	4618      	mov	r0, r3
 801d626:	f7fe fbf0 	bl	801be0a <IEventSrcSendEvent>
                IEventSrcSendEvent(p_obj->p_gyro_event_src, (IEvent*) &evt_gyro, NULL);
 801d62a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801d62e:	f8d3 3bac 	ldr.w	r3, [r3, #2988]	; 0xbac
 801d632:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 801d636:	2200      	movs	r2, #0
 801d638:	4618      	mov	r0, r3
 801d63a:	f7fe fbe6 	bl	801be0a <IEventSrcSendEvent>
              }

              /* update measuredODR */
              p_obj->acc_sensor_status.MeasuredODR = p_obj->acc_samples_count / delta_timestamp;
 801d63e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801d642:	f8b3 3ba2 	ldrh.w	r3, [r3, #2978]	; 0xba2
 801d646:	4618      	mov	r0, r3
 801d648:	f7e3 f8a0 	bl	800078c <__aeabi_i2d>
 801d64c:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 801d650:	f7e3 fa30 	bl	8000ab4 <__aeabi_ddiv>
 801d654:	4602      	mov	r2, r0
 801d656:	460b      	mov	r3, r1
 801d658:	4610      	mov	r0, r2
 801d65a:	4619      	mov	r1, r3
 801d65c:	f7e3 fb12 	bl	8000c84 <__aeabi_d2f>
 801d660:	4602      	mov	r2, r0
 801d662:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801d666:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
              p_obj->gyro_sensor_status.MeasuredODR = p_obj->gyro_samples_count / delta_timestamp;
 801d66a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801d66e:	f8b3 3ba4 	ldrh.w	r3, [r3, #2980]	; 0xba4
 801d672:	4618      	mov	r0, r3
 801d674:	f7e3 f88a 	bl	800078c <__aeabi_i2d>
 801d678:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 801d67c:	f7e3 fa1a 	bl	8000ab4 <__aeabi_ddiv>
 801d680:	4602      	mov	r2, r0
 801d682:	460b      	mov	r3, r1
 801d684:	4610      	mov	r0, r2
 801d686:	4619      	mov	r1, r3
 801d688:	f7e3 fafc 	bl	8000c84 <__aeabi_d2f>
 801d68c:	4602      	mov	r2, r0
 801d68e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801d692:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
            {
 801d696:	e0cc      	b.n	801d832 <ISM330DHCXTaskExecuteStepDatalog+0x60a>

            }
            else /* Only 1 out of 2 is active */
            {
              if(p_obj->acc_sensor_status.IsActive)
 801d698:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801d69c:	f893 30f4 	ldrb.w	r3, [r3, #244]	; 0xf4
 801d6a0:	2b00      	cmp	r3, #0
 801d6a2:	d048      	beq.n	801d736 <ISM330DHCXTaskExecuteStepDatalog+0x50e>
              {
                SensorEvent evt_acc;
                AI_SP_Stream_t streamAcc =
 801d6a4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801d6a8:	222c      	movs	r2, #44	; 0x2c
 801d6aa:	2100      	movs	r1, #0
 801d6ac:	4618      	mov	r0, r3
 801d6ae:	f006 fabc 	bl	8023c2a <memset>
                {
                    .packet.payload = p_obj->p_fast_sensor_data_buff,
 801d6b2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801d6b6:	f503 73c8 	add.w	r3, r3, #400	; 0x190
                AI_SP_Stream_t streamAcc =
 801d6ba:	647b      	str	r3, [r7, #68]	; 0x44
 801d6bc:	4b73      	ldr	r3, [pc, #460]	; (801d88c <ISM330DHCXTaskExecuteStepDatalog+0x664>)
 801d6be:	64bb      	str	r3, [r7, #72]	; 0x48
                    .packet.payload_size = p_obj->samples_per_it,
 801d6c0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801d6c4:	f8b3 3ba0 	ldrh.w	r3, [r3, #2976]	; 0xba0
                AI_SP_Stream_t streamAcc =
 801d6c8:	64fb      	str	r3, [r7, #76]	; 0x4c
 801d6ca:	2302      	movs	r3, #2
 801d6cc:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
                    .packet.payload_fmt = AI_SP_FMT_INT16_RESET(),
                    .mode = AI_SP_MODE_COLUMN };
                ai_logging_create_shape_2d(&streamAcc.packet.shape, 3, p_obj->samples_per_it);
 801d6d0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801d6d4:	f8b3 2ba0 	ldrh.w	r2, [r3, #2976]	; 0xba0
 801d6d8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801d6dc:	3310      	adds	r3, #16
 801d6de:	2103      	movs	r1, #3
 801d6e0:	4618      	mov	r0, r3
 801d6e2:	f7f8 faf8 	bl	8015cd6 <ai_logging_create_shape_2d>
                streamAcc.packet.payload_size = 2 * streamAcc.packet.shape.shapes[0] * streamAcc.packet.shape.shapes[1];
 801d6e6:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 801d6ea:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 801d6ee:	fb02 f303 	mul.w	r3, r2, r3
 801d6f2:	005b      	lsls	r3, r3, #1
 801d6f4:	64fb      	str	r3, [r7, #76]	; 0x4c

                SensorEventInit((IEvent*) &evt_acc, p_obj->p_acc_event_src, (ai_logging_packet_t*) &streamAcc, timestamp, p_obj->acc_id);
 801d6f6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801d6fa:	f8d3 1ba8 	ldr.w	r1, [r3, #2984]	; 0xba8
 801d6fe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801d702:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 801d706:	b29b      	uxth	r3, r3
 801d708:	f107 0440 	add.w	r4, r7, #64	; 0x40
 801d70c:	f107 0088 	add.w	r0, r7, #136	; 0x88
 801d710:	9302      	str	r3, [sp, #8]
 801d712:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 801d716:	e9cd 2300 	strd	r2, r3, [sp]
 801d71a:	4622      	mov	r2, r4
 801d71c:	f7fe fb96 	bl	801be4c <SensorEventInit>
                IEventSrcSendEvent(p_obj->p_acc_event_src, (IEvent*) &evt_acc, NULL);
 801d720:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801d724:	f8d3 3ba8 	ldr.w	r3, [r3, #2984]	; 0xba8
 801d728:	f107 0188 	add.w	r1, r7, #136	; 0x88
 801d72c:	2200      	movs	r2, #0
 801d72e:	4618      	mov	r0, r3
 801d730:	f7fe fb6b 	bl	801be0a <IEventSrcSendEvent>
 801d734:	e051      	b.n	801d7da <ISM330DHCXTaskExecuteStepDatalog+0x5b2>
              }
              else if(p_obj->gyro_sensor_status.IsActive)
 801d736:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801d73a:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 801d73e:	2b00      	cmp	r3, #0
 801d740:	d048      	beq.n	801d7d4 <ISM330DHCXTaskExecuteStepDatalog+0x5ac>
              {
                SensorEvent evt_gyro;
                AI_SP_Stream_t streamGyro =
 801d742:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801d746:	222c      	movs	r2, #44	; 0x2c
 801d748:	2100      	movs	r1, #0
 801d74a:	4618      	mov	r0, r3
 801d74c:	f006 fa6d 	bl	8023c2a <memset>
                {
                    .packet.payload = p_obj->p_fast_sensor_data_buff,
 801d750:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801d754:	f503 73c8 	add.w	r3, r3, #400	; 0x190
                AI_SP_Stream_t streamGyro =
 801d758:	647b      	str	r3, [r7, #68]	; 0x44
 801d75a:	4b4c      	ldr	r3, [pc, #304]	; (801d88c <ISM330DHCXTaskExecuteStepDatalog+0x664>)
 801d75c:	64bb      	str	r3, [r7, #72]	; 0x48
                    .packet.payload_size = p_obj->samples_per_it,
 801d75e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801d762:	f8b3 3ba0 	ldrh.w	r3, [r3, #2976]	; 0xba0
                AI_SP_Stream_t streamGyro =
 801d766:	64fb      	str	r3, [r7, #76]	; 0x4c
 801d768:	2302      	movs	r3, #2
 801d76a:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
                    .packet.payload_fmt = AI_SP_FMT_INT16_RESET(),
                    .mode = AI_SP_MODE_COLUMN };
                ai_logging_create_shape_2d(&streamGyro.packet.shape, 3, p_obj->samples_per_it);
 801d76e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801d772:	f8b3 2ba0 	ldrh.w	r2, [r3, #2976]	; 0xba0
 801d776:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801d77a:	3310      	adds	r3, #16
 801d77c:	2103      	movs	r1, #3
 801d77e:	4618      	mov	r0, r3
 801d780:	f7f8 faa9 	bl	8015cd6 <ai_logging_create_shape_2d>
                streamGyro.packet.payload_size = 2 * streamGyro.packet.shape.shapes[0] * streamGyro.packet.shape.shapes[1];
 801d784:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 801d788:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 801d78c:	fb02 f303 	mul.w	r3, r2, r3
 801d790:	005b      	lsls	r3, r3, #1
 801d792:	64fb      	str	r3, [r7, #76]	; 0x4c

                SensorEventInit((IEvent*) &evt_gyro, p_obj->p_gyro_event_src, (ai_logging_packet_t*) &streamGyro, timestamp, p_obj->gyro_id);
 801d794:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801d798:	f8d3 1bac 	ldr.w	r1, [r3, #2988]	; 0xbac
 801d79c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801d7a0:	f893 3155 	ldrb.w	r3, [r3, #341]	; 0x155
 801d7a4:	b29b      	uxth	r3, r3
 801d7a6:	f107 0440 	add.w	r4, r7, #64	; 0x40
 801d7aa:	f107 0070 	add.w	r0, r7, #112	; 0x70
 801d7ae:	9302      	str	r3, [sp, #8]
 801d7b0:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 801d7b4:	e9cd 2300 	strd	r2, r3, [sp]
 801d7b8:	4622      	mov	r2, r4
 801d7ba:	f7fe fb47 	bl	801be4c <SensorEventInit>
                IEventSrcSendEvent(p_obj->p_gyro_event_src, (IEvent*) &evt_gyro, NULL);
 801d7be:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801d7c2:	f8d3 3bac 	ldr.w	r3, [r3, #2988]	; 0xbac
 801d7c6:	f107 0170 	add.w	r1, r7, #112	; 0x70
 801d7ca:	2200      	movs	r2, #0
 801d7cc:	4618      	mov	r0, r3
 801d7ce:	f7fe fb1c 	bl	801be0a <IEventSrcSendEvent>
 801d7d2:	e002      	b.n	801d7da <ISM330DHCXTaskExecuteStepDatalog+0x5b2>
              }
              else
              {
                res = SYS_INVALID_PARAMETER_ERROR_CODE;
 801d7d4:	2304      	movs	r3, #4
 801d7d6:	f8a7 3106 	strh.w	r3, [r7, #262]	; 0x106
              }

              /* update measuredODR */
              p_obj->acc_sensor_status.MeasuredODR = p_obj->samples_per_it / delta_timestamp;
 801d7da:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801d7de:	f8b3 3ba0 	ldrh.w	r3, [r3, #2976]	; 0xba0
 801d7e2:	4618      	mov	r0, r3
 801d7e4:	f7e2 ffd2 	bl	800078c <__aeabi_i2d>
 801d7e8:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 801d7ec:	f7e3 f962 	bl	8000ab4 <__aeabi_ddiv>
 801d7f0:	4602      	mov	r2, r0
 801d7f2:	460b      	mov	r3, r1
 801d7f4:	4610      	mov	r0, r2
 801d7f6:	4619      	mov	r1, r3
 801d7f8:	f7e3 fa44 	bl	8000c84 <__aeabi_d2f>
 801d7fc:	4602      	mov	r2, r0
 801d7fe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801d802:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
              p_obj->gyro_sensor_status.MeasuredODR = p_obj->samples_per_it / delta_timestamp;
 801d806:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801d80a:	f8b3 3ba0 	ldrh.w	r3, [r3, #2976]	; 0xba0
 801d80e:	4618      	mov	r0, r3
 801d810:	f7e2 ffbc 	bl	800078c <__aeabi_i2d>
 801d814:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 801d818:	f7e3 f94c 	bl	8000ab4 <__aeabi_ddiv>
 801d81c:	4602      	mov	r2, r0
 801d81e:	460b      	mov	r3, r1
 801d820:	4610      	mov	r0, r2
 801d822:	4619      	mov	r1, r3
 801d824:	f7e3 fa2e 	bl	8000c84 <__aeabi_d2f>
 801d828:	4602      	mov	r2, r0
 801d82a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801d82e:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120

            }

//          SYS_DEBUGF(SYS_DBG_LEVEL_VERBOSE, ("ISM330DHCX: ts = %f\r\n", (float)timestamp));
            if(p_obj->pIRQConfig == NULL)
 801d832:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801d836:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 801d83a:	2b00      	cmp	r3, #0
 801d83c:	f040 81c4 	bne.w	801dbc8 <ISM330DHCXTaskExecuteStepDatalog+0x9a0>
            {
              if (TX_SUCCESS != tx_timer_activate(&p_obj->read_timer))
 801d840:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801d844:	f603 33b4 	addw	r3, r3, #2996	; 0xbb4
 801d848:	4618      	mov	r0, r3
 801d84a:	f7f5 fe09 	bl	8013460 <_txe_timer_activate>
 801d84e:	4603      	mov	r3, r0
 801d850:	2b00      	cmp	r3, #0
 801d852:	f000 81b9 	beq.w	801dbc8 <ISM330DHCXTaskExecuteStepDatalog+0x9a0>
              {
                res = SYS_UNDEFINED_ERROR_CODE;
 801d856:	2302      	movs	r3, #2
 801d858:	f8a7 3106 	strh.w	r3, [r7, #262]	; 0x106
              }
            }

          }
          break;
 801d85c:	e1b4      	b.n	801dbc8 <ISM330DHCXTaskExecuteStepDatalog+0x9a0>
        }

      case SM_MESSAGE_ID_DATA_READY_MLC:
        {
          if(p_obj->pMLCConfig == NULL)
 801d85e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801d862:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 801d866:	2b00      	cmp	r3, #0
 801d868:	d112      	bne.n	801d890 <ISM330DHCXTaskExecuteStepDatalog+0x668>
          {
            if(TX_SUCCESS != tx_timer_change(&p_obj->mlc_timer, AMT_MS_TO_TICKS(ISM330DHCX_TASK_CFG_MLC_TIMER_PERIOD_MS), AMT_MS_TO_TICKS(ISM330DHCX_TASK_CFG_MLC_TIMER_PERIOD_MS)))
 801d86a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801d86e:	f503 633e 	add.w	r3, r3, #3040	; 0xbe0
 801d872:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 801d876:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 801d87a:	4618      	mov	r0, r3
 801d87c:	f7f5 fe1c 	bl	80134b8 <_txe_timer_change>
 801d880:	4603      	mov	r3, r0
 801d882:	2b00      	cmp	r3, #0
 801d884:	d004      	beq.n	801d890 <ISM330DHCXTaskExecuteStepDatalog+0x668>
            {
              return SYS_UNDEFINED_ERROR_CODE;
 801d886:	2302      	movs	r3, #2
 801d888:	e1a5      	b.n	801dbd6 <ISM330DHCXTaskExecuteStepDatalog+0x9ae>
 801d88a:	bf00      	nop
 801d88c:	00840800 	.word	0x00840800
            }
          }
          res = ISM330DHCXTaskSensorReadMLC(p_obj);
 801d890:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 801d894:	f000 fe76 	bl	801e584 <ISM330DHCXTaskSensorReadMLC>
 801d898:	4603      	mov	r3, r0
 801d89a:	f8a7 3106 	strh.w	r3, [r7, #262]	; 0x106
          if(!SYS_IS_ERROR_CODE(res))
 801d89e:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 801d8a2:	2b00      	cmp	r3, #0
 801d8a4:	f040 8192 	bne.w	801dbcc <ISM330DHCXTaskExecuteStepDatalog+0x9a4>
          {
            // update the time stamp
            uint32_t period = 0;
 801d8a8:	2300      	movs	r3, #0
 801d8aa:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
            if(p_obj->timestamp_tick >= p_obj->old_timestamp_tick)
 801d8ae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801d8b2:	f8d3 2c0c 	ldr.w	r2, [r3, #3084]	; 0xc0c
 801d8b6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801d8ba:	f8d3 3c10 	ldr.w	r3, [r3, #3088]	; 0xc10
 801d8be:	429a      	cmp	r2, r3
 801d8c0:	d30b      	bcc.n	801d8da <ISM330DHCXTaskExecuteStepDatalog+0x6b2>
            {
              period = p_obj->timestamp_tick - p_obj->old_timestamp_tick;
 801d8c2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801d8c6:	f8d3 2c0c 	ldr.w	r2, [r3, #3084]	; 0xc0c
 801d8ca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801d8ce:	f8d3 3c10 	ldr.w	r3, [r3, #3088]	; 0xc10
 801d8d2:	1ad3      	subs	r3, r2, r3
 801d8d4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 801d8d8:	e00b      	b.n	801d8f2 <ISM330DHCXTaskExecuteStepDatalog+0x6ca>
            }
            else
            {
              // overflow of the hw timer
              period = p_obj->timestamp_tick + (0xFFFFFFFF - p_obj->old_timestamp_tick);
 801d8da:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801d8de:	f8d3 2c0c 	ldr.w	r2, [r3, #3084]	; 0xc0c
 801d8e2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801d8e6:	f8d3 3c10 	ldr.w	r3, [r3, #3088]	; 0xc10
 801d8ea:	1ad3      	subs	r3, r2, r3
 801d8ec:	3b01      	subs	r3, #1
 801d8ee:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
            }
            p_obj->old_timestamp_tick = p_obj->timestamp_tick;
 801d8f2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801d8f6:	f8d3 2c0c 	ldr.w	r2, [r3, #3084]	; 0xc0c
 801d8fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801d8fe:	f8c3 2c10 	str.w	r2, [r3, #3088]	; 0xc10
            p_obj->timestamp += period;
 801d902:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801d906:	f503 6342 	add.w	r3, r3, #3104	; 0xc20
 801d90a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801d90e:	f8d7 10fc 	ldr.w	r1, [r7, #252]	; 0xfc
 801d912:	2000      	movs	r0, #0
 801d914:	460c      	mov	r4, r1
 801d916:	4605      	mov	r5, r0
 801d918:	eb12 0a04 	adds.w	sl, r2, r4
 801d91c:	eb43 0b05 	adc.w	fp, r3, r5
 801d920:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801d924:	f503 6342 	add.w	r3, r3, #3104	; 0xc20
 801d928:	e943 ab02 	strd	sl, fp, [r3, #-8]
            // notify the listeners...
            double timestamp = (double) p_obj->timestamp / (double) (SystemCoreClock);
 801d92c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801d930:	f503 6342 	add.w	r3, r3, #3104	; 0xc20
 801d934:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801d938:	4610      	mov	r0, r2
 801d93a:	4619      	mov	r1, r3
 801d93c:	f7e2 ff5a 	bl	80007f4 <__aeabi_ul2d>
 801d940:	4604      	mov	r4, r0
 801d942:	460d      	mov	r5, r1
 801d944:	4ba7      	ldr	r3, [pc, #668]	; (801dbe4 <ISM330DHCXTaskExecuteStepDatalog+0x9bc>)
 801d946:	681b      	ldr	r3, [r3, #0]
 801d948:	4618      	mov	r0, r3
 801d94a:	f7e2 ff0f 	bl	800076c <__aeabi_ui2d>
 801d94e:	4602      	mov	r2, r0
 801d950:	460b      	mov	r3, r1
 801d952:	4620      	mov	r0, r4
 801d954:	4629      	mov	r1, r5
 801d956:	f7e3 f8ad 	bl	8000ab4 <__aeabi_ddiv>
 801d95a:	4602      	mov	r2, r0
 801d95c:	460b      	mov	r3, r1
 801d95e:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0

            if(p_obj->mlc_enable)
 801d962:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801d966:	f893 3157 	ldrb.w	r3, [r3, #343]	; 0x157
 801d96a:	2b00      	cmp	r3, #0
 801d96c:	d03c      	beq.n	801d9e8 <ISM330DHCXTaskExecuteStepDatalog+0x7c0>
            {
              IEvent evt_mlc;
              AI_SP_Stream_t streamMlc =
 801d96e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801d972:	222c      	movs	r2, #44	; 0x2c
 801d974:	2100      	movs	r1, #0
 801d976:	4618      	mov	r0, r3
 801d978:	f006 f957 	bl	8023c2a <memset>
              {
                  .packet.payload = (uint8_t*) p_obj->p_mlc_sensor_data_buff,
 801d97c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801d980:	f503 6339 	add.w	r3, r3, #2960	; 0xb90
              AI_SP_Stream_t streamMlc =
 801d984:	647b      	str	r3, [r7, #68]	; 0x44
 801d986:	4b98      	ldr	r3, [pc, #608]	; (801dbe8 <ISM330DHCXTaskExecuteStepDatalog+0x9c0>)
 801d988:	64bb      	str	r3, [r7, #72]	; 0x48
 801d98a:	2308      	movs	r3, #8
 801d98c:	64fb      	str	r3, [r7, #76]	; 0x4c
 801d98e:	2302      	movs	r3, #2
 801d990:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
                  .packet.payload_size = 8,
                  .packet.payload_fmt = AI_SP_FMT_INT16_RESET(),
                  .mode = AI_SP_MODE_COLUMN };
              ai_logging_create_shape_1d(&streamMlc.packet.shape, 8);
 801d994:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801d998:	3310      	adds	r3, #16
 801d99a:	2108      	movs	r1, #8
 801d99c:	4618      	mov	r0, r3
 801d99e:	f7f8 f985 	bl	8015cac <ai_logging_create_shape_1d>
              streamMlc.packet.payload_size = streamMlc.packet.shape.shapes[0];
 801d9a2:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 801d9a6:	64fb      	str	r3, [r7, #76]	; 0x4c

              /* TODO: setup the proper sendevent */
//              IEventInit((IEvent*) &evt_mlc, p_obj->p_mlc_event_src);
//              IEventSrcSendEvent(p_obj->p_mlc_event_src, (IEvent*) &evt_mlc, (void*) &timestamp);
              SensorEventInit((IEvent*) &evt_mlc, p_obj->p_mlc_event_src, (ai_logging_packet_t*) &streamMlc, timestamp, p_obj->mlc_id);
 801d9a8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801d9ac:	f8d3 1bb0 	ldr.w	r1, [r3, #2992]	; 0xbb0
 801d9b0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801d9b4:	f893 3156 	ldrb.w	r3, [r3, #342]	; 0x156
 801d9b8:	b29b      	uxth	r3, r3
 801d9ba:	f107 0440 	add.w	r4, r7, #64	; 0x40
 801d9be:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 801d9c2:	9302      	str	r3, [sp, #8]
 801d9c4:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 801d9c8:	e9cd 2300 	strd	r2, r3, [sp]
 801d9cc:	4622      	mov	r2, r4
 801d9ce:	f7fe fa3d 	bl	801be4c <SensorEventInit>
              IEventSrcSendEvent(p_obj->p_mlc_event_src, (IEvent*) &evt_mlc, NULL);
 801d9d2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801d9d6:	f8d3 3bb0 	ldr.w	r3, [r3, #2992]	; 0xbb0
 801d9da:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 801d9de:	2200      	movs	r2, #0
 801d9e0:	4618      	mov	r0, r3
 801d9e2:	f7fe fa12 	bl	801be0a <IEventSrcSendEvent>
 801d9e6:	e002      	b.n	801d9ee <ISM330DHCXTaskExecuteStepDatalog+0x7c6>
            }
            else
            {
              res = SYS_INVALID_PARAMETER_ERROR_CODE;
 801d9e8:	2304      	movs	r3, #4
 801d9ea:	f8a7 3106 	strh.w	r3, [r7, #262]	; 0x106
            }

            if(p_obj->pMLCConfig == NULL)
 801d9ee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801d9f2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 801d9f6:	2b00      	cmp	r3, #0
 801d9f8:	f040 80e8 	bne.w	801dbcc <ISM330DHCXTaskExecuteStepDatalog+0x9a4>
            {
              if (TX_SUCCESS != tx_timer_activate(&p_obj->mlc_timer))
 801d9fc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801da00:	f503 633e 	add.w	r3, r3, #3040	; 0xbe0
 801da04:	4618      	mov	r0, r3
 801da06:	f7f5 fd2b 	bl	8013460 <_txe_timer_activate>
 801da0a:	4603      	mov	r3, r0
 801da0c:	2b00      	cmp	r3, #0
 801da0e:	f000 80dd 	beq.w	801dbcc <ISM330DHCXTaskExecuteStepDatalog+0x9a4>
              {
                res = SYS_UNDEFINED_ERROR_CODE;
 801da12:	2302      	movs	r3, #2
 801da14:	f8a7 3106 	strh.w	r3, [r7, #262]	; 0x106
              }
            }

          }
          break;
 801da18:	e0d8      	b.n	801dbcc <ISM330DHCXTaskExecuteStepDatalog+0x9a4>
        }

      case SM_MESSAGE_ID_SENSOR_CMD:
        {
          switch(report.sensorMessage.nCmdID)
 801da1a:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	; 0xd2
 801da1e:	3b01      	subs	r3, #1
 801da20:	2b04      	cmp	r3, #4
 801da22:	f200 8097 	bhi.w	801db54 <ISM330DHCXTaskExecuteStepDatalog+0x92c>
 801da26:	a201      	add	r2, pc, #4	; (adr r2, 801da2c <ISM330DHCXTaskExecuteStepDatalog+0x804>)
 801da28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801da2c:	0801da41 	.word	0x0801da41
 801da30:	0801dac5 	.word	0x0801dac5
 801da34:	0801dae9 	.word	0x0801dae9
 801da38:	0801db0d 	.word	0x0801db0d
 801da3c:	0801db31 	.word	0x0801db31
          {
            case SENSOR_CMD_ID_INIT:
              res = ISM330DHCXTaskSensorInit(p_obj);
 801da40:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 801da44:	f000 f966 	bl	801dd14 <ISM330DHCXTaskSensorInit>
 801da48:	4603      	mov	r3, r0
 801da4a:	f8a7 3106 	strh.w	r3, [r7, #262]	; 0x106
              if(!SYS_IS_ERROR_CODE(res))
 801da4e:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 801da52:	2b00      	cmp	r3, #0
 801da54:	d118      	bne.n	801da88 <ISM330DHCXTaskExecuteStepDatalog+0x860>
              {
                if(p_obj->pIRQConfig == NULL)
 801da56:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801da5a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 801da5e:	2b00      	cmp	r3, #0
 801da60:	d10d      	bne.n	801da7e <ISM330DHCXTaskExecuteStepDatalog+0x856>
                {
                  if (TX_SUCCESS != tx_timer_activate(&p_obj->read_timer))
 801da62:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801da66:	f603 33b4 	addw	r3, r3, #2996	; 0xbb4
 801da6a:	4618      	mov	r0, r3
 801da6c:	f7f5 fcf8 	bl	8013460 <_txe_timer_activate>
 801da70:	4603      	mov	r3, r0
 801da72:	2b00      	cmp	r3, #0
 801da74:	d008      	beq.n	801da88 <ISM330DHCXTaskExecuteStepDatalog+0x860>
                  {
                    res = SYS_UNDEFINED_ERROR_CODE;
 801da76:	2302      	movs	r3, #2
 801da78:	f8a7 3106 	strh.w	r3, [r7, #262]	; 0x106
 801da7c:	e004      	b.n	801da88 <ISM330DHCXTaskExecuteStepDatalog+0x860>
                  }
        	    }
                else
        	    {
                  ISM330DHCXTaskConfigureIrqPin(p_obj, FALSE);
 801da7e:	2100      	movs	r1, #0
 801da80:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 801da84:	f001 fa2e 	bl	801eee4 <ISM330DHCXTaskConfigureIrqPin>
        	    }
              }
              if(!SYS_IS_ERROR_CODE(res))
 801da88:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 801da8c:	2b00      	cmp	r3, #0
 801da8e:	d17b      	bne.n	801db88 <ISM330DHCXTaskExecuteStepDatalog+0x960>
              {
                if(p_obj->pMLCConfig == NULL)
 801da90:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801da94:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 801da98:	2b00      	cmp	r3, #0
 801da9a:	d10d      	bne.n	801dab8 <ISM330DHCXTaskExecuteStepDatalog+0x890>
                {
                  if (TX_SUCCESS != tx_timer_activate(&p_obj->mlc_timer))
 801da9c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801daa0:	f503 633e 	add.w	r3, r3, #3040	; 0xbe0
 801daa4:	4618      	mov	r0, r3
 801daa6:	f7f5 fcdb 	bl	8013460 <_txe_timer_activate>
 801daaa:	4603      	mov	r3, r0
 801daac:	2b00      	cmp	r3, #0
 801daae:	d06b      	beq.n	801db88 <ISM330DHCXTaskExecuteStepDatalog+0x960>
                  {
                    res = SYS_UNDEFINED_ERROR_CODE;
 801dab0:	2302      	movs	r3, #2
 801dab2:	f8a7 3106 	strh.w	r3, [r7, #262]	; 0x106
                else
        	    {
                  ISM330DHCXTaskConfigureMLCPin(p_obj, FALSE);
        	    }
              }
              break;
 801dab6:	e067      	b.n	801db88 <ISM330DHCXTaskExecuteStepDatalog+0x960>
                  ISM330DHCXTaskConfigureMLCPin(p_obj, FALSE);
 801dab8:	2100      	movs	r1, #0
 801daba:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 801dabe:	f001 fa5f 	bl	801ef80 <ISM330DHCXTaskConfigureMLCPin>
              break;
 801dac2:	e061      	b.n	801db88 <ISM330DHCXTaskExecuteStepDatalog+0x960>
            case SENSOR_CMD_ID_SET_ODR:
              res = ISM330DHCXTaskSensorSetODR(p_obj, report);
 801dac4:	466a      	mov	r2, sp
 801dac6:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801daca:	e893 0003 	ldmia.w	r3, {r0, r1}
 801dace:	e882 0003 	stmia.w	r2, {r0, r1}
 801dad2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801dad6:	cb0c      	ldmia	r3, {r2, r3}
 801dad8:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 801dadc:	f000 fe7e 	bl	801e7dc <ISM330DHCXTaskSensorSetODR>
 801dae0:	4603      	mov	r3, r0
 801dae2:	f8a7 3106 	strh.w	r3, [r7, #262]	; 0x106
              break;
 801dae6:	e052      	b.n	801db8e <ISM330DHCXTaskExecuteStepDatalog+0x966>
            case SENSOR_CMD_ID_SET_FS:
              res = ISM330DHCXTaskSensorSetFS(p_obj, report);
 801dae8:	466a      	mov	r2, sp
 801daea:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801daee:	e893 0003 	ldmia.w	r3, {r0, r1}
 801daf2:	e882 0003 	stmia.w	r2, {r0, r1}
 801daf6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801dafa:	cb0c      	ldmia	r3, {r2, r3}
 801dafc:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 801db00:	f001 f818 	bl	801eb34 <ISM330DHCXTaskSensorSetFS>
 801db04:	4603      	mov	r3, r0
 801db06:	f8a7 3106 	strh.w	r3, [r7, #262]	; 0x106
              break;
 801db0a:	e040      	b.n	801db8e <ISM330DHCXTaskExecuteStepDatalog+0x966>
            case SENSOR_CMD_ID_ENABLE:
              res = ISM330DHCXTaskSensorEnable(p_obj, report);
 801db0c:	466a      	mov	r2, sp
 801db0e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801db12:	e893 0003 	ldmia.w	r3, {r0, r1}
 801db16:	e882 0003 	stmia.w	r2, {r0, r1}
 801db1a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801db1e:	cb0c      	ldmia	r3, {r2, r3}
 801db20:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 801db24:	f001 f916 	bl	801ed54 <ISM330DHCXTaskSensorEnable>
 801db28:	4603      	mov	r3, r0
 801db2a:	f8a7 3106 	strh.w	r3, [r7, #262]	; 0x106
              break;
 801db2e:	e02e      	b.n	801db8e <ISM330DHCXTaskExecuteStepDatalog+0x966>
            case SENSOR_CMD_ID_DISABLE:
              res = ISM330DHCXTaskSensorDisable(p_obj, report);
 801db30:	466a      	mov	r2, sp
 801db32:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801db36:	e893 0003 	ldmia.w	r3, {r0, r1}
 801db3a:	e882 0003 	stmia.w	r2, {r0, r1}
 801db3e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801db42:	cb0c      	ldmia	r3, {r2, r3}
 801db44:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 801db48:	f001 f93c 	bl	801edc4 <ISM330DHCXTaskSensorDisable>
 801db4c:	4603      	mov	r3, r0
 801db4e:	f8a7 3106 	strh.w	r3, [r7, #262]	; 0x106
              break;
 801db52:	e01c      	b.n	801db8e <ISM330DHCXTaskExecuteStepDatalog+0x966>
            default:
              // unwanted report
              res = SYS_APP_TASK_UNKNOWN_REPORT_ERROR_CODE;
 801db54:	f240 3322 	movw	r3, #802	; 0x322
 801db58:	f8a7 3106 	strh.w	r3, [r7, #262]	; 0x106
              SYS_SET_SERVICE_LEVEL_ERROR_CODE(SYS_APP_TASK_UNKNOWN_REPORT_ERROR_CODE);
 801db5c:	4b23      	ldr	r3, [pc, #140]	; (801dbec <ISM330DHCXTaskExecuteStepDatalog+0x9c4>)
 801db5e:	f240 3222 	movw	r2, #802	; 0x322
 801db62:	805a      	strh	r2, [r3, #2]

              SYS_DEBUGF(SYS_DBG_LEVEL_WARNING, ("ISM330DHCX: unexpected report in Datalog: %i\r\n", report.messageID));
 801db64:	4b22      	ldr	r3, [pc, #136]	; (801dbf0 <ISM330DHCXTaskExecuteStepDatalog+0x9c8>)
 801db66:	781b      	ldrb	r3, [r3, #0]
 801db68:	2b05      	cmp	r3, #5
 801db6a:	d80f      	bhi.n	801db8c <ISM330DHCXTaskExecuteStepDatalog+0x964>
 801db6c:	4b21      	ldr	r3, [pc, #132]	; (801dbf4 <ISM330DHCXTaskExecuteStepDatalog+0x9cc>)
 801db6e:	681b      	ldr	r3, [r3, #0]
 801db70:	4798      	blx	r3
 801db72:	4b21      	ldr	r3, [pc, #132]	; (801dbf8 <ISM330DHCXTaskExecuteStepDatalog+0x9d0>)
 801db74:	681b      	ldr	r3, [r3, #0]
 801db76:	f897 20d0 	ldrb.w	r2, [r7, #208]	; 0xd0
 801db7a:	4611      	mov	r1, r2
 801db7c:	481f      	ldr	r0, [pc, #124]	; (801dbfc <ISM330DHCXTaskExecuteStepDatalog+0x9d4>)
 801db7e:	4798      	blx	r3
 801db80:	4b1f      	ldr	r3, [pc, #124]	; (801dc00 <ISM330DHCXTaskExecuteStepDatalog+0x9d8>)
 801db82:	681b      	ldr	r3, [r3, #0]
 801db84:	4798      	blx	r3
              break;
 801db86:	e001      	b.n	801db8c <ISM330DHCXTaskExecuteStepDatalog+0x964>
              break;
 801db88:	bf00      	nop
 801db8a:	e022      	b.n	801dbd2 <ISM330DHCXTaskExecuteStepDatalog+0x9aa>
              break;
 801db8c:	bf00      	nop
          }
          break;
 801db8e:	e020      	b.n	801dbd2 <ISM330DHCXTaskExecuteStepDatalog+0x9aa>
        }

      default:
        // unwanted report
        res = SYS_APP_TASK_UNKNOWN_REPORT_ERROR_CODE;
 801db90:	f240 3322 	movw	r3, #802	; 0x322
 801db94:	f8a7 3106 	strh.w	r3, [r7, #262]	; 0x106
        SYS_SET_SERVICE_LEVEL_ERROR_CODE(SYS_APP_TASK_UNKNOWN_REPORT_ERROR_CODE);
 801db98:	4b14      	ldr	r3, [pc, #80]	; (801dbec <ISM330DHCXTaskExecuteStepDatalog+0x9c4>)
 801db9a:	f240 3222 	movw	r2, #802	; 0x322
 801db9e:	805a      	strh	r2, [r3, #2]

        SYS_DEBUGF(SYS_DBG_LEVEL_WARNING, ("ISM330DHCX: unexpected report in Datalog: %i\r\n", report.messageID));
 801dba0:	4b13      	ldr	r3, [pc, #76]	; (801dbf0 <ISM330DHCXTaskExecuteStepDatalog+0x9c8>)
 801dba2:	781b      	ldrb	r3, [r3, #0]
 801dba4:	2b05      	cmp	r3, #5
 801dba6:	d813      	bhi.n	801dbd0 <ISM330DHCXTaskExecuteStepDatalog+0x9a8>
 801dba8:	4b12      	ldr	r3, [pc, #72]	; (801dbf4 <ISM330DHCXTaskExecuteStepDatalog+0x9cc>)
 801dbaa:	681b      	ldr	r3, [r3, #0]
 801dbac:	4798      	blx	r3
 801dbae:	4b12      	ldr	r3, [pc, #72]	; (801dbf8 <ISM330DHCXTaskExecuteStepDatalog+0x9d0>)
 801dbb0:	681b      	ldr	r3, [r3, #0]
 801dbb2:	f897 20d0 	ldrb.w	r2, [r7, #208]	; 0xd0
 801dbb6:	4611      	mov	r1, r2
 801dbb8:	4810      	ldr	r0, [pc, #64]	; (801dbfc <ISM330DHCXTaskExecuteStepDatalog+0x9d4>)
 801dbba:	4798      	blx	r3
 801dbbc:	4b10      	ldr	r3, [pc, #64]	; (801dc00 <ISM330DHCXTaskExecuteStepDatalog+0x9d8>)
 801dbbe:	681b      	ldr	r3, [r3, #0]
 801dbc0:	4798      	blx	r3
        break;
 801dbc2:	e005      	b.n	801dbd0 <ISM330DHCXTaskExecuteStepDatalog+0x9a8>
    }
  }
 801dbc4:	bf00      	nop
 801dbc6:	e004      	b.n	801dbd2 <ISM330DHCXTaskExecuteStepDatalog+0x9aa>
          break;
 801dbc8:	bf00      	nop
 801dbca:	e002      	b.n	801dbd2 <ISM330DHCXTaskExecuteStepDatalog+0x9aa>
          break;
 801dbcc:	bf00      	nop
 801dbce:	e000      	b.n	801dbd2 <ISM330DHCXTaskExecuteStepDatalog+0x9aa>
        break;
 801dbd0:	bf00      	nop

  return res;
 801dbd2:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
}
 801dbd6:	4618      	mov	r0, r3
 801dbd8:	f507 7784 	add.w	r7, r7, #264	; 0x108
 801dbdc:	46bd      	mov	sp, r7
 801dbde:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801dbe2:	bf00      	nop
 801dbe4:	20000044 	.word	0x20000044
 801dbe8:	00840800 	.word	0x00840800
 801dbec:	20000700 	.word	0x20000700
 801dbf0:	2000002c 	.word	0x2000002c
 801dbf4:	20000030 	.word	0x20000030
 801dbf8:	20000038 	.word	0x20000038
 801dbfc:	08027648 	.word	0x08027648
 801dc00:	20000034 	.word	0x20000034

0801dc04 <ISM330DHCXTaskPostReportToFront>:

static inline sys_error_code_t ISM330DHCXTaskPostReportToFront(ISM330DHCXTask *_this, SMMessage *pReport)
{
 801dc04:	b580      	push	{r7, lr}
 801dc06:	b084      	sub	sp, #16
 801dc08:	af00      	add	r7, sp, #0
 801dc0a:	6078      	str	r0, [r7, #4]
 801dc0c:	6039      	str	r1, [r7, #0]
  assert_param(_this != NULL);
 801dc0e:	687b      	ldr	r3, [r7, #4]
 801dc10:	2b00      	cmp	r3, #0
 801dc12:	d104      	bne.n	801dc1e <ISM330DHCXTaskPostReportToFront+0x1a>
 801dc14:	f240 7123 	movw	r1, #1827	; 0x723
 801dc18:	481a      	ldr	r0, [pc, #104]	; (801dc84 <ISM330DHCXTaskPostReportToFront+0x80>)
 801dc1a:	f7f7 fb46 	bl	80152aa <assert_failed>
  assert_param(pReport);
 801dc1e:	683b      	ldr	r3, [r7, #0]
 801dc20:	2b00      	cmp	r3, #0
 801dc22:	d104      	bne.n	801dc2e <ISM330DHCXTaskPostReportToFront+0x2a>
 801dc24:	f240 7124 	movw	r1, #1828	; 0x724
 801dc28:	4816      	ldr	r0, [pc, #88]	; (801dc84 <ISM330DHCXTaskPostReportToFront+0x80>)
 801dc2a:	f7f7 fb3e 	bl	80152aa <assert_failed>
  sys_error_code_t res = SYS_NO_ERROR_CODE;
 801dc2e:	2300      	movs	r3, #0
 801dc30:	81fb      	strh	r3, [r7, #14]

  if(SYS_IS_CALLED_FROM_ISR())
 801dc32:	4b15      	ldr	r3, [pc, #84]	; (801dc88 <ISM330DHCXTaskPostReportToFront+0x84>)
 801dc34:	685b      	ldr	r3, [r3, #4]
 801dc36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801dc3a:	2b00      	cmp	r3, #0
 801dc3c:	d00e      	beq.n	801dc5c <ISM330DHCXTaskPostReportToFront+0x58>
  {
    if(TX_SUCCESS != tx_queue_front_send(&_this->in_queue, pReport, TX_NO_WAIT))
 801dc3e:	687b      	ldr	r3, [r7, #4]
 801dc40:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 801dc44:	2200      	movs	r2, #0
 801dc46:	6839      	ldr	r1, [r7, #0]
 801dc48:	4618      	mov	r0, r3
 801dc4a:	f7f5 f875 	bl	8012d38 <_txe_queue_front_send>
 801dc4e:	4603      	mov	r3, r0
 801dc50:	2b00      	cmp	r3, #0
 801dc52:	d011      	beq.n	801dc78 <ISM330DHCXTaskPostReportToFront+0x74>
    {
      res = SYS_APP_TASK_REPORT_LOST_ERROR_CODE;
 801dc54:	f240 3323 	movw	r3, #803	; 0x323
 801dc58:	81fb      	strh	r3, [r7, #14]
 801dc5a:	e00d      	b.n	801dc78 <ISM330DHCXTaskPostReportToFront+0x74>
      // this function is private and the caller will ignore this return code.
    }
  }
  else
  {
    if(TX_SUCCESS != tx_queue_front_send(&_this->in_queue, pReport, AMT_MS_TO_TICKS(100)))
 801dc5c:	687b      	ldr	r3, [r7, #4]
 801dc5e:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 801dc62:	2264      	movs	r2, #100	; 0x64
 801dc64:	6839      	ldr	r1, [r7, #0]
 801dc66:	4618      	mov	r0, r3
 801dc68:	f7f5 f866 	bl	8012d38 <_txe_queue_front_send>
 801dc6c:	4603      	mov	r3, r0
 801dc6e:	2b00      	cmp	r3, #0
 801dc70:	d002      	beq.n	801dc78 <ISM330DHCXTaskPostReportToFront+0x74>
    {
      res = SYS_APP_TASK_REPORT_LOST_ERROR_CODE;
 801dc72:	f240 3323 	movw	r3, #803	; 0x323
 801dc76:	81fb      	strh	r3, [r7, #14]
      // this function is private and the caller will ignore this return code.
    }
  }

  return res;
 801dc78:	89fb      	ldrh	r3, [r7, #14]
}
 801dc7a:	4618      	mov	r0, r3
 801dc7c:	3710      	adds	r7, #16
 801dc7e:	46bd      	mov	sp, r7
 801dc80:	bd80      	pop	{r7, pc}
 801dc82:	bf00      	nop
 801dc84:	080274b8 	.word	0x080274b8
 801dc88:	e000ed00 	.word	0xe000ed00

0801dc8c <ISM330DHCXTaskPostReportToBack>:

static inline sys_error_code_t ISM330DHCXTaskPostReportToBack(ISM330DHCXTask *_this, SMMessage *pReport)
{
 801dc8c:	b580      	push	{r7, lr}
 801dc8e:	b084      	sub	sp, #16
 801dc90:	af00      	add	r7, sp, #0
 801dc92:	6078      	str	r0, [r7, #4]
 801dc94:	6039      	str	r1, [r7, #0]
  assert_param(_this != NULL);
 801dc96:	687b      	ldr	r3, [r7, #4]
 801dc98:	2b00      	cmp	r3, #0
 801dc9a:	d104      	bne.n	801dca6 <ISM330DHCXTaskPostReportToBack+0x1a>
 801dc9c:	f240 713d 	movw	r1, #1853	; 0x73d
 801dca0:	481a      	ldr	r0, [pc, #104]	; (801dd0c <ISM330DHCXTaskPostReportToBack+0x80>)
 801dca2:	f7f7 fb02 	bl	80152aa <assert_failed>
  assert_param(pReport);
 801dca6:	683b      	ldr	r3, [r7, #0]
 801dca8:	2b00      	cmp	r3, #0
 801dcaa:	d104      	bne.n	801dcb6 <ISM330DHCXTaskPostReportToBack+0x2a>
 801dcac:	f240 713e 	movw	r1, #1854	; 0x73e
 801dcb0:	4816      	ldr	r0, [pc, #88]	; (801dd0c <ISM330DHCXTaskPostReportToBack+0x80>)
 801dcb2:	f7f7 fafa 	bl	80152aa <assert_failed>
  sys_error_code_t res = SYS_NO_ERROR_CODE;
 801dcb6:	2300      	movs	r3, #0
 801dcb8:	81fb      	strh	r3, [r7, #14]

  if(SYS_IS_CALLED_FROM_ISR())
 801dcba:	4b15      	ldr	r3, [pc, #84]	; (801dd10 <ISM330DHCXTaskPostReportToBack+0x84>)
 801dcbc:	685b      	ldr	r3, [r3, #4]
 801dcbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801dcc2:	2b00      	cmp	r3, #0
 801dcc4:	d00e      	beq.n	801dce4 <ISM330DHCXTaskPostReportToBack+0x58>
  {
    if(TX_SUCCESS != tx_queue_send(&_this->in_queue, pReport, TX_NO_WAIT))
 801dcc6:	687b      	ldr	r3, [r7, #4]
 801dcc8:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 801dccc:	2200      	movs	r2, #0
 801dcce:	6839      	ldr	r1, [r7, #0]
 801dcd0:	4618      	mov	r0, r3
 801dcd2:	f7f5 f90b 	bl	8012eec <_txe_queue_send>
 801dcd6:	4603      	mov	r3, r0
 801dcd8:	2b00      	cmp	r3, #0
 801dcda:	d011      	beq.n	801dd00 <ISM330DHCXTaskPostReportToBack+0x74>
    {
      res = SYS_APP_TASK_REPORT_LOST_ERROR_CODE;
 801dcdc:	f240 3323 	movw	r3, #803	; 0x323
 801dce0:	81fb      	strh	r3, [r7, #14]
 801dce2:	e00d      	b.n	801dd00 <ISM330DHCXTaskPostReportToBack+0x74>
      // this function is private and the caller will ignore this return code.
    }
  }
  else
  {
    if(TX_SUCCESS != tx_queue_send(&_this->in_queue, pReport, AMT_MS_TO_TICKS(100)))
 801dce4:	687b      	ldr	r3, [r7, #4]
 801dce6:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 801dcea:	2264      	movs	r2, #100	; 0x64
 801dcec:	6839      	ldr	r1, [r7, #0]
 801dcee:	4618      	mov	r0, r3
 801dcf0:	f7f5 f8fc 	bl	8012eec <_txe_queue_send>
 801dcf4:	4603      	mov	r3, r0
 801dcf6:	2b00      	cmp	r3, #0
 801dcf8:	d002      	beq.n	801dd00 <ISM330DHCXTaskPostReportToBack+0x74>
    {
      res = SYS_APP_TASK_REPORT_LOST_ERROR_CODE;
 801dcfa:	f240 3323 	movw	r3, #803	; 0x323
 801dcfe:	81fb      	strh	r3, [r7, #14]
      // this function is private and the caller will ignore this return code.
    }
  }

  return res;
 801dd00:	89fb      	ldrh	r3, [r7, #14]
}
 801dd02:	4618      	mov	r0, r3
 801dd04:	3710      	adds	r7, #16
 801dd06:	46bd      	mov	sp, r7
 801dd08:	bd80      	pop	{r7, pc}
 801dd0a:	bf00      	nop
 801dd0c:	080274b8 	.word	0x080274b8
 801dd10:	e000ed00 	.word	0xe000ed00

0801dd14 <ISM330DHCXTaskSensorInit>:

static sys_error_code_t ISM330DHCXTaskSensorInit(ISM330DHCXTask *_this)
{
 801dd14:	b580      	push	{r7, lr}
 801dd16:	b08c      	sub	sp, #48	; 0x30
 801dd18:	af00      	add	r7, sp, #0
 801dd1a:	6078      	str	r0, [r7, #4]
  assert_param(_this != NULL);
 801dd1c:	687b      	ldr	r3, [r7, #4]
 801dd1e:	2b00      	cmp	r3, #0
 801dd20:	d104      	bne.n	801dd2c <ISM330DHCXTaskSensorInit+0x18>
 801dd22:	f240 7157 	movw	r1, #1879	; 0x757
 801dd26:	48bc      	ldr	r0, [pc, #752]	; (801e018 <ISM330DHCXTaskSensorInit+0x304>)
 801dd28:	f7f7 fabf 	bl	80152aa <assert_failed>
  sys_error_code_t res = SYS_NO_ERROR_CODE;
 801dd2c:	2300      	movs	r3, #0
 801dd2e:	853b      	strh	r3, [r7, #40]	; 0x28
  stmdev_ctx_t *p_sensor_drv = (stmdev_ctx_t*) &_this->p_sensor_bus_if->m_xConnector;
 801dd30:	687b      	ldr	r3, [r7, #4]
 801dd32:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 801dd36:	627b      	str	r3, [r7, #36]	; 0x24

  /* Setup acc and gyro */
  uint8_t reg0 = 0;
 801dd38:	2300      	movs	r3, #0
 801dd3a:	76fb      	strb	r3, [r7, #27]
  uint16_t ism330dhcx_wtm_level = 0;
 801dd3c:	2300      	movs	r3, #0
 801dd3e:	85fb      	strh	r3, [r7, #46]	; 0x2e
  uint16_t ism330dhcx_wtm_level_acc;
  uint16_t ism330dhcx_wtm_level_gyro;
  ism330dhcx_odr_xl_t ism330dhcx_odr_xl = ISM330DHCX_XL_ODR_OFF;
 801dd40:	2300      	movs	r3, #0
 801dd42:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  ism330dhcx_bdr_xl_t ism330dhcx_bdr_xl = ISM330DHCX_XL_NOT_BATCHED;
 801dd46:	2300      	movs	r3, #0
 801dd48:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  ism330dhcx_odr_g_t ism330dhcx_odr_g = ISM330DHCX_GY_ODR_OFF;
 801dd4c:	2300      	movs	r3, #0
 801dd4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  ism330dhcx_bdr_gy_t ism330dhcx_bdr_gy = ISM330DHCX_GY_NOT_BATCHED;
 801dd52:	2300      	movs	r3, #0
 801dd54:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  int32_t ret_val = 0;
 801dd58:	2300      	movs	r3, #0
 801dd5a:	623b      	str	r3, [r7, #32]

  // if this variable need to persist then I move it in the managed task class declaration.
  ism330dhcx_pin_int1_route_t int1_route =
 801dd5c:	f107 0314 	add.w	r3, r7, #20
 801dd60:	2200      	movs	r2, #0
 801dd62:	601a      	str	r2, [r3, #0]
 801dd64:	809a      	strh	r2, [r3, #4]
  {
      0 };
  ism330dhcx_pin_int2_route_t int2_route =
 801dd66:	f107 030c 	add.w	r3, r7, #12
 801dd6a:	2200      	movs	r2, #0
 801dd6c:	601a      	str	r2, [r3, #0]
 801dd6e:	809a      	strh	r2, [r3, #4]
  {
      0 };

  ret_val = ism330dhcx_i2c_interface_set(p_sensor_drv, ISM330DHCX_I2C_DISABLE);
 801dd70:	2101      	movs	r1, #1
 801dd72:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801dd74:	f7e4 f9a0 	bl	80020b8 <ism330dhcx_i2c_interface_set>
 801dd78:	6238      	str	r0, [r7, #32]

  ret_val = ism330dhcx_device_id_get(p_sensor_drv, (uint8_t*) &reg0);
 801dd7a:	f107 031b 	add.w	r3, r7, #27
 801dd7e:	4619      	mov	r1, r3
 801dd80:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801dd82:	f7e4 f949 	bl	8002018 <ism330dhcx_device_id_get>
 801dd86:	6238      	str	r0, [r7, #32]
  if(!ret_val)
 801dd88:	6a3b      	ldr	r3, [r7, #32]
 801dd8a:	2b00      	cmp	r3, #0
 801dd8c:	d107      	bne.n	801dd9e <ISM330DHCXTaskSensorInit+0x8a>
  {
    ABusIFSetWhoAmI(_this->p_sensor_bus_if, reg0);
 801dd8e:	687b      	ldr	r3, [r7, #4]
 801dd90:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 801dd94:	7efa      	ldrb	r2, [r7, #27]
 801dd96:	4611      	mov	r1, r2
 801dd98:	4618      	mov	r0, r3
 801dd9a:	f7fc f9f1 	bl	801a180 <ABusIFSetWhoAmI>
  }
  SYS_DEBUGF(SYS_DBG_LEVEL_VERBOSE, ("ISM330DHCX: sensor - I am 0x%x.\r\n", reg0));
 801dd9e:	4b9f      	ldr	r3, [pc, #636]	; (801e01c <ISM330DHCXTaskSensorInit+0x308>)
 801dda0:	781b      	ldrb	r3, [r3, #0]
 801dda2:	2b01      	cmp	r3, #1
 801dda4:	d80b      	bhi.n	801ddbe <ISM330DHCXTaskSensorInit+0xaa>
 801dda6:	4b9e      	ldr	r3, [pc, #632]	; (801e020 <ISM330DHCXTaskSensorInit+0x30c>)
 801dda8:	681b      	ldr	r3, [r3, #0]
 801ddaa:	4798      	blx	r3
 801ddac:	4b9d      	ldr	r3, [pc, #628]	; (801e024 <ISM330DHCXTaskSensorInit+0x310>)
 801ddae:	681b      	ldr	r3, [r3, #0]
 801ddb0:	7efa      	ldrb	r2, [r7, #27]
 801ddb2:	4611      	mov	r1, r2
 801ddb4:	489c      	ldr	r0, [pc, #624]	; (801e028 <ISM330DHCXTaskSensorInit+0x314>)
 801ddb6:	4798      	blx	r3
 801ddb8:	4b9c      	ldr	r3, [pc, #624]	; (801e02c <ISM330DHCXTaskSensorInit+0x318>)
 801ddba:	681b      	ldr	r3, [r3, #0]
 801ddbc:	4798      	blx	r3

  ret_val = ism330dhcx_reset_set(p_sensor_drv, 1);
 801ddbe:	2101      	movs	r1, #1
 801ddc0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801ddc2:	f7e4 f93a 	bl	800203a <ism330dhcx_reset_set>
 801ddc6:	6238      	str	r0, [r7, #32]
  do
  {
    ism330dhcx_reset_get(p_sensor_drv, &reg0);
 801ddc8:	f107 031b 	add.w	r3, r7, #27
 801ddcc:	4619      	mov	r1, r3
 801ddce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801ddd0:	f7e4 f959 	bl	8002086 <ism330dhcx_reset_get>
  }
  while(reg0);
 801ddd4:	7efb      	ldrb	r3, [r7, #27]
 801ddd6:	2b00      	cmp	r3, #0
 801ddd8:	d1f6      	bne.n	801ddc8 <ISM330DHCXTaskSensorInit+0xb4>
  ret_val = ism330dhcx_i2c_interface_set(p_sensor_drv, ISM330DHCX_I2C_DISABLE);
 801ddda:	2101      	movs	r1, #1
 801dddc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801ddde:	f7e4 f96b 	bl	80020b8 <ism330dhcx_i2c_interface_set>
 801dde2:	6238      	str	r0, [r7, #32]

  /* AXL FS */
  if(_this->acc_sensor_status.FS < 3.0f)
 801dde4:	687b      	ldr	r3, [r7, #4]
 801dde6:	edd3 7a3b 	vldr	s15, [r3, #236]	; 0xec
 801ddea:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 801ddee:	eef4 7ac7 	vcmpe.f32	s15, s14
 801ddf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ddf6:	d504      	bpl.n	801de02 <ISM330DHCXTaskSensorInit+0xee>
    ism330dhcx_xl_full_scale_set(p_sensor_drv, ISM330DHCX_2g);
 801ddf8:	2100      	movs	r1, #0
 801ddfa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801ddfc:	f7e3 fc66 	bl	80016cc <ism330dhcx_xl_full_scale_set>
 801de00:	e021      	b.n	801de46 <ISM330DHCXTaskSensorInit+0x132>
  else if(_this->acc_sensor_status.FS < 5.0f)
 801de02:	687b      	ldr	r3, [r7, #4]
 801de04:	edd3 7a3b 	vldr	s15, [r3, #236]	; 0xec
 801de08:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 801de0c:	eef4 7ac7 	vcmpe.f32	s15, s14
 801de10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801de14:	d504      	bpl.n	801de20 <ISM330DHCXTaskSensorInit+0x10c>
    ism330dhcx_xl_full_scale_set(p_sensor_drv, ISM330DHCX_4g);
 801de16:	2102      	movs	r1, #2
 801de18:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801de1a:	f7e3 fc57 	bl	80016cc <ism330dhcx_xl_full_scale_set>
 801de1e:	e012      	b.n	801de46 <ISM330DHCXTaskSensorInit+0x132>
  else if(_this->acc_sensor_status.FS < 9.0f)
 801de20:	687b      	ldr	r3, [r7, #4]
 801de22:	edd3 7a3b 	vldr	s15, [r3, #236]	; 0xec
 801de26:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 801de2a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801de2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801de32:	d504      	bpl.n	801de3e <ISM330DHCXTaskSensorInit+0x12a>
    ism330dhcx_xl_full_scale_set(p_sensor_drv, ISM330DHCX_8g);
 801de34:	2103      	movs	r1, #3
 801de36:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801de38:	f7e3 fc48 	bl	80016cc <ism330dhcx_xl_full_scale_set>
 801de3c:	e003      	b.n	801de46 <ISM330DHCXTaskSensorInit+0x132>
  else
    ism330dhcx_xl_full_scale_set(p_sensor_drv, ISM330DHCX_16g);
 801de3e:	2101      	movs	r1, #1
 801de40:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801de42:	f7e3 fc43 	bl	80016cc <ism330dhcx_xl_full_scale_set>

  /* GYRO FS */
  if(_this->gyro_sensor_status.FS < 126.0f)
 801de46:	687b      	ldr	r3, [r7, #4]
 801de48:	edd3 7a44 	vldr	s15, [r3, #272]	; 0x110
 801de4c:	ed9f 7a78 	vldr	s14, [pc, #480]	; 801e030 <ISM330DHCXTaskSensorInit+0x31c>
 801de50:	eef4 7ac7 	vcmpe.f32	s15, s14
 801de54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801de58:	d504      	bpl.n	801de64 <ISM330DHCXTaskSensorInit+0x150>
    ism330dhcx_gy_full_scale_set(p_sensor_drv, ISM330DHCX_125dps);
 801de5a:	2102      	movs	r1, #2
 801de5c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801de5e:	f7e3 fe6b 	bl	8001b38 <ism330dhcx_gy_full_scale_set>
 801de62:	e03f      	b.n	801dee4 <ISM330DHCXTaskSensorInit+0x1d0>
  else if(_this->gyro_sensor_status.FS < 251.0f)
 801de64:	687b      	ldr	r3, [r7, #4]
 801de66:	edd3 7a44 	vldr	s15, [r3, #272]	; 0x110
 801de6a:	ed9f 7a72 	vldr	s14, [pc, #456]	; 801e034 <ISM330DHCXTaskSensorInit+0x320>
 801de6e:	eef4 7ac7 	vcmpe.f32	s15, s14
 801de72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801de76:	d504      	bpl.n	801de82 <ISM330DHCXTaskSensorInit+0x16e>
    ism330dhcx_gy_full_scale_set(p_sensor_drv, ISM330DHCX_250dps);
 801de78:	2100      	movs	r1, #0
 801de7a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801de7c:	f7e3 fe5c 	bl	8001b38 <ism330dhcx_gy_full_scale_set>
 801de80:	e030      	b.n	801dee4 <ISM330DHCXTaskSensorInit+0x1d0>
  else if(_this->gyro_sensor_status.FS < 501.0f)
 801de82:	687b      	ldr	r3, [r7, #4]
 801de84:	edd3 7a44 	vldr	s15, [r3, #272]	; 0x110
 801de88:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 801e038 <ISM330DHCXTaskSensorInit+0x324>
 801de8c:	eef4 7ac7 	vcmpe.f32	s15, s14
 801de90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801de94:	d504      	bpl.n	801dea0 <ISM330DHCXTaskSensorInit+0x18c>
    ism330dhcx_gy_full_scale_set(p_sensor_drv, ISM330DHCX_500dps);
 801de96:	2104      	movs	r1, #4
 801de98:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801de9a:	f7e3 fe4d 	bl	8001b38 <ism330dhcx_gy_full_scale_set>
 801de9e:	e021      	b.n	801dee4 <ISM330DHCXTaskSensorInit+0x1d0>
  else if(_this->gyro_sensor_status.FS < 1001.0f)
 801dea0:	687b      	ldr	r3, [r7, #4]
 801dea2:	edd3 7a44 	vldr	s15, [r3, #272]	; 0x110
 801dea6:	ed9f 7a65 	vldr	s14, [pc, #404]	; 801e03c <ISM330DHCXTaskSensorInit+0x328>
 801deaa:	eef4 7ac7 	vcmpe.f32	s15, s14
 801deae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801deb2:	d504      	bpl.n	801debe <ISM330DHCXTaskSensorInit+0x1aa>
    ism330dhcx_gy_full_scale_set(p_sensor_drv, ISM330DHCX_1000dps);
 801deb4:	2108      	movs	r1, #8
 801deb6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801deb8:	f7e3 fe3e 	bl	8001b38 <ism330dhcx_gy_full_scale_set>
 801debc:	e012      	b.n	801dee4 <ISM330DHCXTaskSensorInit+0x1d0>
  else if(_this->gyro_sensor_status.FS < 2001.0f)
 801debe:	687b      	ldr	r3, [r7, #4]
 801dec0:	edd3 7a44 	vldr	s15, [r3, #272]	; 0x110
 801dec4:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 801e040 <ISM330DHCXTaskSensorInit+0x32c>
 801dec8:	eef4 7ac7 	vcmpe.f32	s15, s14
 801decc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ded0:	d504      	bpl.n	801dedc <ISM330DHCXTaskSensorInit+0x1c8>
    ism330dhcx_gy_full_scale_set(p_sensor_drv, ISM330DHCX_2000dps);
 801ded2:	210c      	movs	r1, #12
 801ded4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801ded6:	f7e3 fe2f 	bl	8001b38 <ism330dhcx_gy_full_scale_set>
 801deda:	e003      	b.n	801dee4 <ISM330DHCXTaskSensorInit+0x1d0>
  else
    ism330dhcx_gy_full_scale_set(p_sensor_drv, ISM330DHCX_4000dps);
 801dedc:	2101      	movs	r1, #1
 801dede:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801dee0:	f7e3 fe2a 	bl	8001b38 <ism330dhcx_gy_full_scale_set>

  if(_this->acc_sensor_status.ODR < 13.0f)
 801dee4:	687b      	ldr	r3, [r7, #4]
 801dee6:	edd3 7a3e 	vldr	s15, [r3, #248]	; 0xf8
 801deea:	eeb2 7a0a 	vmov.f32	s14, #42	; 0x41500000  13.0
 801deee:	eef4 7ac7 	vcmpe.f32	s15, s14
 801def2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801def6:	d506      	bpl.n	801df06 <ISM330DHCXTaskSensorInit+0x1f2>
  {
    ism330dhcx_odr_xl = ISM330DHCX_XL_ODR_12Hz5;
 801def8:	2301      	movs	r3, #1
 801defa:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    ism330dhcx_bdr_xl = ISM330DHCX_XL_BATCHED_AT_12Hz5;
 801defe:	2301      	movs	r3, #1
 801df00:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 801df04:	e0b2      	b.n	801e06c <ISM330DHCXTaskSensorInit+0x358>
  }
  else if(_this->acc_sensor_status.ODR < 27.0f)
 801df06:	687b      	ldr	r3, [r7, #4]
 801df08:	edd3 7a3e 	vldr	s15, [r3, #248]	; 0xf8
 801df0c:	eeb3 7a0b 	vmov.f32	s14, #59	; 0x41d80000  27.0
 801df10:	eef4 7ac7 	vcmpe.f32	s15, s14
 801df14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801df18:	d506      	bpl.n	801df28 <ISM330DHCXTaskSensorInit+0x214>
  {
    ism330dhcx_odr_xl = ISM330DHCX_XL_ODR_26Hz;
 801df1a:	2302      	movs	r3, #2
 801df1c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    ism330dhcx_bdr_xl = ISM330DHCX_XL_BATCHED_AT_26Hz;
 801df20:	2302      	movs	r3, #2
 801df22:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 801df26:	e0a1      	b.n	801e06c <ISM330DHCXTaskSensorInit+0x358>
  }
  else if(_this->acc_sensor_status.ODR < 53.0f)
 801df28:	687b      	ldr	r3, [r7, #4]
 801df2a:	edd3 7a3e 	vldr	s15, [r3, #248]	; 0xf8
 801df2e:	ed9f 7a45 	vldr	s14, [pc, #276]	; 801e044 <ISM330DHCXTaskSensorInit+0x330>
 801df32:	eef4 7ac7 	vcmpe.f32	s15, s14
 801df36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801df3a:	d506      	bpl.n	801df4a <ISM330DHCXTaskSensorInit+0x236>
  {
    ism330dhcx_odr_xl = ISM330DHCX_XL_ODR_52Hz;
 801df3c:	2303      	movs	r3, #3
 801df3e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    ism330dhcx_bdr_xl = ISM330DHCX_XL_BATCHED_AT_52Hz;
 801df42:	2303      	movs	r3, #3
 801df44:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 801df48:	e090      	b.n	801e06c <ISM330DHCXTaskSensorInit+0x358>
  }
  else if(_this->acc_sensor_status.ODR < 105.0f)
 801df4a:	687b      	ldr	r3, [r7, #4]
 801df4c:	edd3 7a3e 	vldr	s15, [r3, #248]	; 0xf8
 801df50:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 801e048 <ISM330DHCXTaskSensorInit+0x334>
 801df54:	eef4 7ac7 	vcmpe.f32	s15, s14
 801df58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801df5c:	d506      	bpl.n	801df6c <ISM330DHCXTaskSensorInit+0x258>
  {
    ism330dhcx_odr_xl = ISM330DHCX_XL_ODR_104Hz;
 801df5e:	2304      	movs	r3, #4
 801df60:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    ism330dhcx_bdr_xl = ISM330DHCX_XL_BATCHED_AT_104Hz;
 801df64:	2304      	movs	r3, #4
 801df66:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 801df6a:	e07f      	b.n	801e06c <ISM330DHCXTaskSensorInit+0x358>
  }
  else if(_this->acc_sensor_status.ODR < 209.0f)
 801df6c:	687b      	ldr	r3, [r7, #4]
 801df6e:	edd3 7a3e 	vldr	s15, [r3, #248]	; 0xf8
 801df72:	ed9f 7a36 	vldr	s14, [pc, #216]	; 801e04c <ISM330DHCXTaskSensorInit+0x338>
 801df76:	eef4 7ac7 	vcmpe.f32	s15, s14
 801df7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801df7e:	d506      	bpl.n	801df8e <ISM330DHCXTaskSensorInit+0x27a>
  {
    ism330dhcx_odr_xl = ISM330DHCX_XL_ODR_208Hz;
 801df80:	2305      	movs	r3, #5
 801df82:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    ism330dhcx_bdr_xl = ISM330DHCX_XL_BATCHED_AT_208Hz;
 801df86:	2305      	movs	r3, #5
 801df88:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 801df8c:	e06e      	b.n	801e06c <ISM330DHCXTaskSensorInit+0x358>
  }
  else if(_this->acc_sensor_status.ODR < 417.0f)
 801df8e:	687b      	ldr	r3, [r7, #4]
 801df90:	edd3 7a3e 	vldr	s15, [r3, #248]	; 0xf8
 801df94:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 801e050 <ISM330DHCXTaskSensorInit+0x33c>
 801df98:	eef4 7ac7 	vcmpe.f32	s15, s14
 801df9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dfa0:	d506      	bpl.n	801dfb0 <ISM330DHCXTaskSensorInit+0x29c>
  {
    ism330dhcx_odr_xl = ISM330DHCX_XL_ODR_416Hz;
 801dfa2:	2306      	movs	r3, #6
 801dfa4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    ism330dhcx_bdr_xl = ISM330DHCX_XL_BATCHED_AT_417Hz;
 801dfa8:	2306      	movs	r3, #6
 801dfaa:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 801dfae:	e05d      	b.n	801e06c <ISM330DHCXTaskSensorInit+0x358>
  }
  else if(_this->acc_sensor_status.ODR < 834.0f)
 801dfb0:	687b      	ldr	r3, [r7, #4]
 801dfb2:	edd3 7a3e 	vldr	s15, [r3, #248]	; 0xf8
 801dfb6:	ed9f 7a27 	vldr	s14, [pc, #156]	; 801e054 <ISM330DHCXTaskSensorInit+0x340>
 801dfba:	eef4 7ac7 	vcmpe.f32	s15, s14
 801dfbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dfc2:	d506      	bpl.n	801dfd2 <ISM330DHCXTaskSensorInit+0x2be>
  {
    ism330dhcx_odr_xl = ISM330DHCX_XL_ODR_833Hz;
 801dfc4:	2307      	movs	r3, #7
 801dfc6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    ism330dhcx_bdr_xl = ISM330DHCX_XL_BATCHED_AT_833Hz;
 801dfca:	2307      	movs	r3, #7
 801dfcc:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 801dfd0:	e04c      	b.n	801e06c <ISM330DHCXTaskSensorInit+0x358>
  }
  else if(_this->acc_sensor_status.ODR < 1667.0f)
 801dfd2:	687b      	ldr	r3, [r7, #4]
 801dfd4:	edd3 7a3e 	vldr	s15, [r3, #248]	; 0xf8
 801dfd8:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 801e058 <ISM330DHCXTaskSensorInit+0x344>
 801dfdc:	eef4 7ac7 	vcmpe.f32	s15, s14
 801dfe0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dfe4:	d506      	bpl.n	801dff4 <ISM330DHCXTaskSensorInit+0x2e0>
  {
    ism330dhcx_odr_xl = ISM330DHCX_XL_ODR_1666Hz;
 801dfe6:	2308      	movs	r3, #8
 801dfe8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    ism330dhcx_bdr_xl = ISM330DHCX_XL_BATCHED_AT_1667Hz;
 801dfec:	2308      	movs	r3, #8
 801dfee:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 801dff2:	e03b      	b.n	801e06c <ISM330DHCXTaskSensorInit+0x358>
  }
  else if(_this->acc_sensor_status.ODR < 3333.0f)
 801dff4:	687b      	ldr	r3, [r7, #4]
 801dff6:	edd3 7a3e 	vldr	s15, [r3, #248]	; 0xf8
 801dffa:	ed9f 7a18 	vldr	s14, [pc, #96]	; 801e05c <ISM330DHCXTaskSensorInit+0x348>
 801dffe:	eef4 7ac7 	vcmpe.f32	s15, s14
 801e002:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e006:	d52b      	bpl.n	801e060 <ISM330DHCXTaskSensorInit+0x34c>
  {
    ism330dhcx_odr_xl = ISM330DHCX_XL_ODR_3332Hz;
 801e008:	2309      	movs	r3, #9
 801e00a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    ism330dhcx_bdr_xl = ISM330DHCX_XL_BATCHED_AT_3333Hz;
 801e00e:	2309      	movs	r3, #9
 801e010:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 801e014:	e02a      	b.n	801e06c <ISM330DHCXTaskSensorInit+0x358>
 801e016:	bf00      	nop
 801e018:	080274b8 	.word	0x080274b8
 801e01c:	2000002c 	.word	0x2000002c
 801e020:	20000030 	.word	0x20000030
 801e024:	20000038 	.word	0x20000038
 801e028:	08027678 	.word	0x08027678
 801e02c:	20000034 	.word	0x20000034
 801e030:	42fc0000 	.word	0x42fc0000
 801e034:	437b0000 	.word	0x437b0000
 801e038:	43fa8000 	.word	0x43fa8000
 801e03c:	447a4000 	.word	0x447a4000
 801e040:	44fa2000 	.word	0x44fa2000
 801e044:	42540000 	.word	0x42540000
 801e048:	42d20000 	.word	0x42d20000
 801e04c:	43510000 	.word	0x43510000
 801e050:	43d08000 	.word	0x43d08000
 801e054:	44508000 	.word	0x44508000
 801e058:	44d06000 	.word	0x44d06000
 801e05c:	45505000 	.word	0x45505000
  }
  else
  {
    ism330dhcx_odr_xl = ISM330DHCX_XL_ODR_6667Hz;
 801e060:	230a      	movs	r3, #10
 801e062:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    ism330dhcx_bdr_xl = ISM330DHCX_XL_BATCHED_AT_6667Hz;
 801e066:	230a      	movs	r3, #10
 801e068:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  }

  if(_this->gyro_sensor_status.ODR < 13.0f)
 801e06c:	687b      	ldr	r3, [r7, #4]
 801e06e:	edd3 7a47 	vldr	s15, [r3, #284]	; 0x11c
 801e072:	eeb2 7a0a 	vmov.f32	s14, #42	; 0x41500000  13.0
 801e076:	eef4 7ac7 	vcmpe.f32	s15, s14
 801e07a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e07e:	d506      	bpl.n	801e08e <ISM330DHCXTaskSensorInit+0x37a>
  {
    ism330dhcx_odr_g = ISM330DHCX_GY_ODR_12Hz5;
 801e080:	2301      	movs	r3, #1
 801e082:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    ism330dhcx_bdr_gy = ISM330DHCX_GY_BATCHED_AT_12Hz5;
 801e086:	2301      	movs	r3, #1
 801e088:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 801e08c:	e08d      	b.n	801e1aa <ISM330DHCXTaskSensorInit+0x496>
  }
  else if(_this->gyro_sensor_status.ODR < 27.0f)
 801e08e:	687b      	ldr	r3, [r7, #4]
 801e090:	edd3 7a47 	vldr	s15, [r3, #284]	; 0x11c
 801e094:	eeb3 7a0b 	vmov.f32	s14, #59	; 0x41d80000  27.0
 801e098:	eef4 7ac7 	vcmpe.f32	s15, s14
 801e09c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e0a0:	d506      	bpl.n	801e0b0 <ISM330DHCXTaskSensorInit+0x39c>
  {
    ism330dhcx_odr_g = ISM330DHCX_GY_ODR_26Hz;
 801e0a2:	2302      	movs	r3, #2
 801e0a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    ism330dhcx_bdr_gy = ISM330DHCX_GY_BATCHED_AT_26Hz;
 801e0a8:	2302      	movs	r3, #2
 801e0aa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 801e0ae:	e07c      	b.n	801e1aa <ISM330DHCXTaskSensorInit+0x496>
  }
  else if(_this->gyro_sensor_status.ODR < 53.0f)
 801e0b0:	687b      	ldr	r3, [r7, #4]
 801e0b2:	edd3 7a47 	vldr	s15, [r3, #284]	; 0x11c
 801e0b6:	ed1f 7a1d 	vldr	s14, [pc, #-116]	; 801e044 <ISM330DHCXTaskSensorInit+0x330>
 801e0ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 801e0be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e0c2:	d506      	bpl.n	801e0d2 <ISM330DHCXTaskSensorInit+0x3be>
  {
    ism330dhcx_odr_g = ISM330DHCX_GY_ODR_52Hz;
 801e0c4:	2303      	movs	r3, #3
 801e0c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    ism330dhcx_bdr_gy = ISM330DHCX_GY_BATCHED_AT_52Hz;
 801e0ca:	2303      	movs	r3, #3
 801e0cc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 801e0d0:	e06b      	b.n	801e1aa <ISM330DHCXTaskSensorInit+0x496>
  }
  else if(_this->gyro_sensor_status.ODR < 105.0f)
 801e0d2:	687b      	ldr	r3, [r7, #4]
 801e0d4:	edd3 7a47 	vldr	s15, [r3, #284]	; 0x11c
 801e0d8:	ed1f 7a25 	vldr	s14, [pc, #-148]	; 801e048 <ISM330DHCXTaskSensorInit+0x334>
 801e0dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 801e0e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e0e4:	d506      	bpl.n	801e0f4 <ISM330DHCXTaskSensorInit+0x3e0>
  {
    ism330dhcx_odr_g = ISM330DHCX_GY_ODR_104Hz;
 801e0e6:	2304      	movs	r3, #4
 801e0e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    ism330dhcx_bdr_gy = ISM330DHCX_GY_BATCHED_AT_104Hz;
 801e0ec:	2304      	movs	r3, #4
 801e0ee:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 801e0f2:	e05a      	b.n	801e1aa <ISM330DHCXTaskSensorInit+0x496>
  }
  else if(_this->gyro_sensor_status.ODR < 209.0f)
 801e0f4:	687b      	ldr	r3, [r7, #4]
 801e0f6:	edd3 7a47 	vldr	s15, [r3, #284]	; 0x11c
 801e0fa:	ed1f 7a2c 	vldr	s14, [pc, #-176]	; 801e04c <ISM330DHCXTaskSensorInit+0x338>
 801e0fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 801e102:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e106:	d506      	bpl.n	801e116 <ISM330DHCXTaskSensorInit+0x402>
  {
    ism330dhcx_odr_g = ISM330DHCX_GY_ODR_208Hz;
 801e108:	2305      	movs	r3, #5
 801e10a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    ism330dhcx_bdr_gy = ISM330DHCX_GY_BATCHED_AT_208Hz;
 801e10e:	2305      	movs	r3, #5
 801e110:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 801e114:	e049      	b.n	801e1aa <ISM330DHCXTaskSensorInit+0x496>
  }
  else if(_this->gyro_sensor_status.ODR < 417.0f)
 801e116:	687b      	ldr	r3, [r7, #4]
 801e118:	edd3 7a47 	vldr	s15, [r3, #284]	; 0x11c
 801e11c:	ed1f 7a34 	vldr	s14, [pc, #-208]	; 801e050 <ISM330DHCXTaskSensorInit+0x33c>
 801e120:	eef4 7ac7 	vcmpe.f32	s15, s14
 801e124:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e128:	d506      	bpl.n	801e138 <ISM330DHCXTaskSensorInit+0x424>
  {
    ism330dhcx_odr_g = ISM330DHCX_GY_ODR_416Hz;
 801e12a:	2306      	movs	r3, #6
 801e12c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    ism330dhcx_bdr_gy = ISM330DHCX_GY_BATCHED_AT_417Hz;
 801e130:	2306      	movs	r3, #6
 801e132:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 801e136:	e038      	b.n	801e1aa <ISM330DHCXTaskSensorInit+0x496>
  }
  else if(_this->gyro_sensor_status.ODR < 834.0f)
 801e138:	687b      	ldr	r3, [r7, #4]
 801e13a:	edd3 7a47 	vldr	s15, [r3, #284]	; 0x11c
 801e13e:	ed1f 7a3b 	vldr	s14, [pc, #-236]	; 801e054 <ISM330DHCXTaskSensorInit+0x340>
 801e142:	eef4 7ac7 	vcmpe.f32	s15, s14
 801e146:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e14a:	d506      	bpl.n	801e15a <ISM330DHCXTaskSensorInit+0x446>
  {
    ism330dhcx_odr_g = ISM330DHCX_GY_ODR_833Hz;
 801e14c:	2307      	movs	r3, #7
 801e14e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    ism330dhcx_bdr_gy = ISM330DHCX_GY_BATCHED_AT_833Hz;
 801e152:	2307      	movs	r3, #7
 801e154:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 801e158:	e027      	b.n	801e1aa <ISM330DHCXTaskSensorInit+0x496>
  }
  else if(_this->gyro_sensor_status.ODR < 1667.0f)
 801e15a:	687b      	ldr	r3, [r7, #4]
 801e15c:	edd3 7a47 	vldr	s15, [r3, #284]	; 0x11c
 801e160:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 801e058 <ISM330DHCXTaskSensorInit+0x344>
 801e164:	eef4 7ac7 	vcmpe.f32	s15, s14
 801e168:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e16c:	d506      	bpl.n	801e17c <ISM330DHCXTaskSensorInit+0x468>
  {
    ism330dhcx_odr_g = ISM330DHCX_GY_ODR_1666Hz;
 801e16e:	2308      	movs	r3, #8
 801e170:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    ism330dhcx_bdr_gy = ISM330DHCX_GY_BATCHED_AT_1667Hz;
 801e174:	2308      	movs	r3, #8
 801e176:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 801e17a:	e016      	b.n	801e1aa <ISM330DHCXTaskSensorInit+0x496>
  }
  else if(_this->gyro_sensor_status.ODR < 3333.0f)
 801e17c:	687b      	ldr	r3, [r7, #4]
 801e17e:	edd3 7a47 	vldr	s15, [r3, #284]	; 0x11c
 801e182:	ed1f 7a4a 	vldr	s14, [pc, #-296]	; 801e05c <ISM330DHCXTaskSensorInit+0x348>
 801e186:	eef4 7ac7 	vcmpe.f32	s15, s14
 801e18a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e18e:	d506      	bpl.n	801e19e <ISM330DHCXTaskSensorInit+0x48a>
  {
    ism330dhcx_odr_g = ISM330DHCX_GY_ODR_3332Hz;
 801e190:	2309      	movs	r3, #9
 801e192:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    ism330dhcx_bdr_gy = ISM330DHCX_GY_BATCHED_AT_3333Hz;
 801e196:	2309      	movs	r3, #9
 801e198:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 801e19c:	e005      	b.n	801e1aa <ISM330DHCXTaskSensorInit+0x496>
  }
  else
  {
    ism330dhcx_odr_g = ISM330DHCX_GY_ODR_6667Hz;
 801e19e:	230a      	movs	r3, #10
 801e1a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    ism330dhcx_bdr_gy = ISM330DHCX_GY_BATCHED_AT_6667Hz;
 801e1a4:	230a      	movs	r3, #10
 801e1a6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  }

  if(_this->acc_sensor_status.IsActive)
 801e1aa:	687b      	ldr	r3, [r7, #4]
 801e1ac:	f893 30f4 	ldrb.w	r3, [r3, #244]	; 0xf4
 801e1b0:	2b00      	cmp	r3, #0
 801e1b2:	d00c      	beq.n	801e1ce <ISM330DHCXTaskSensorInit+0x4ba>
  {
    ism330dhcx_xl_data_rate_set(p_sensor_drv, ism330dhcx_odr_xl);
 801e1b4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801e1b8:	4619      	mov	r1, r3
 801e1ba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801e1bc:	f7e3 fae4 	bl	8001788 <ism330dhcx_xl_data_rate_set>
    ism330dhcx_fifo_xl_batch_set(p_sensor_drv, ism330dhcx_bdr_xl);
 801e1c0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801e1c4:	4619      	mov	r1, r3
 801e1c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801e1c8:	f7e4 fbd4 	bl	8002974 <ism330dhcx_fifo_xl_batch_set>
 801e1cc:	e007      	b.n	801e1de <ISM330DHCXTaskSensorInit+0x4ca>
  }
  else
  {
    ism330dhcx_xl_data_rate_set(p_sensor_drv, ISM330DHCX_XL_ODR_OFF);
 801e1ce:	2100      	movs	r1, #0
 801e1d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801e1d2:	f7e3 fad9 	bl	8001788 <ism330dhcx_xl_data_rate_set>
    ism330dhcx_fifo_xl_batch_set(p_sensor_drv, ISM330DHCX_XL_NOT_BATCHED);
 801e1d6:	2100      	movs	r1, #0
 801e1d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801e1da:	f7e4 fbcb 	bl	8002974 <ism330dhcx_fifo_xl_batch_set>
  }

  if(_this->gyro_sensor_status.IsActive)
 801e1de:	687b      	ldr	r3, [r7, #4]
 801e1e0:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 801e1e4:	2b00      	cmp	r3, #0
 801e1e6:	d00c      	beq.n	801e202 <ISM330DHCXTaskSensorInit+0x4ee>
  {
    ism330dhcx_gy_data_rate_set(p_sensor_drv, ism330dhcx_odr_g);
 801e1e8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801e1ec:	4619      	mov	r1, r3
 801e1ee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801e1f0:	f7e3 fd1a 	bl	8001c28 <ism330dhcx_gy_data_rate_set>
    ism330dhcx_fifo_gy_batch_set(p_sensor_drv, ism330dhcx_bdr_gy);
 801e1f4:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 801e1f8:	4619      	mov	r1, r3
 801e1fa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801e1fc:	f7e4 fbe0 	bl	80029c0 <ism330dhcx_fifo_gy_batch_set>
 801e200:	e007      	b.n	801e212 <ISM330DHCXTaskSensorInit+0x4fe>
  }
  else
  {
    ism330dhcx_gy_data_rate_set(p_sensor_drv, ISM330DHCX_GY_ODR_OFF);
 801e202:	2100      	movs	r1, #0
 801e204:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801e206:	f7e3 fd0f 	bl	8001c28 <ism330dhcx_gy_data_rate_set>
    ism330dhcx_fifo_gy_batch_set(p_sensor_drv, ISM330DHCX_GY_NOT_BATCHED);
 801e20a:	2100      	movs	r1, #0
 801e20c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801e20e:	f7e4 fbd7 	bl	80029c0 <ism330dhcx_fifo_gy_batch_set>
  }

  /* Calculation of watermark and samples per int*/
  ism330dhcx_wtm_level_acc = ((uint16_t) _this->acc_sensor_status.ODR * (uint16_t) ISM330DHCX_MAX_DRDY_PERIOD);
 801e212:	687b      	ldr	r3, [r7, #4]
 801e214:	edd3 7a3e 	vldr	s15, [r3, #248]	; 0xf8
 801e218:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801e21c:	ee17 3a90 	vmov	r3, s15
 801e220:	83fb      	strh	r3, [r7, #30]
  ism330dhcx_wtm_level_gyro = ((uint16_t) _this->gyro_sensor_status.ODR * (uint16_t) ISM330DHCX_MAX_DRDY_PERIOD);
 801e222:	687b      	ldr	r3, [r7, #4]
 801e224:	edd3 7a47 	vldr	s15, [r3, #284]	; 0x11c
 801e228:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801e22c:	ee17 3a90 	vmov	r3, s15
 801e230:	83bb      	strh	r3, [r7, #28]

  if(_this->acc_sensor_status.IsActive && _this->gyro_sensor_status.IsActive) /* Both subSensor is active */
 801e232:	687b      	ldr	r3, [r7, #4]
 801e234:	f893 30f4 	ldrb.w	r3, [r3, #244]	; 0xf4
 801e238:	2b00      	cmp	r3, #0
 801e23a:	d00e      	beq.n	801e25a <ISM330DHCXTaskSensorInit+0x546>
 801e23c:	687b      	ldr	r3, [r7, #4]
 801e23e:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 801e242:	2b00      	cmp	r3, #0
 801e244:	d009      	beq.n	801e25a <ISM330DHCXTaskSensorInit+0x546>
  {
    if(ism330dhcx_wtm_level_acc > ism330dhcx_wtm_level_gyro)
 801e246:	8bfa      	ldrh	r2, [r7, #30]
 801e248:	8bbb      	ldrh	r3, [r7, #28]
 801e24a:	429a      	cmp	r2, r3
 801e24c:	d902      	bls.n	801e254 <ISM330DHCXTaskSensorInit+0x540>
    {
      ism330dhcx_wtm_level = ism330dhcx_wtm_level_acc;
 801e24e:	8bfb      	ldrh	r3, [r7, #30]
 801e250:	85fb      	strh	r3, [r7, #46]	; 0x2e
    if(ism330dhcx_wtm_level_acc > ism330dhcx_wtm_level_gyro)
 801e252:	e00c      	b.n	801e26e <ISM330DHCXTaskSensorInit+0x55a>
    }
    else
    {
      ism330dhcx_wtm_level = ism330dhcx_wtm_level_gyro;
 801e254:	8bbb      	ldrh	r3, [r7, #28]
 801e256:	85fb      	strh	r3, [r7, #46]	; 0x2e
    if(ism330dhcx_wtm_level_acc > ism330dhcx_wtm_level_gyro)
 801e258:	e009      	b.n	801e26e <ISM330DHCXTaskSensorInit+0x55a>
    }
  }
  else /* Only one subSensor is active */
  {
    if(_this->acc_sensor_status.IsActive)
 801e25a:	687b      	ldr	r3, [r7, #4]
 801e25c:	f893 30f4 	ldrb.w	r3, [r3, #244]	; 0xf4
 801e260:	2b00      	cmp	r3, #0
 801e262:	d002      	beq.n	801e26a <ISM330DHCXTaskSensorInit+0x556>
    {
      ism330dhcx_wtm_level = ism330dhcx_wtm_level_acc;
 801e264:	8bfb      	ldrh	r3, [r7, #30]
 801e266:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801e268:	e001      	b.n	801e26e <ISM330DHCXTaskSensorInit+0x55a>
    }
    else
    {
      ism330dhcx_wtm_level = ism330dhcx_wtm_level_gyro;
 801e26a:	8bbb      	ldrh	r3, [r7, #28]
 801e26c:	85fb      	strh	r3, [r7, #46]	; 0x2e
    }
  }

  if(ism330dhcx_wtm_level > ISM330DHCX_MAX_WTM_LEVEL)
 801e26e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801e270:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801e274:	d903      	bls.n	801e27e <ISM330DHCXTaskSensorInit+0x56a>
  {
    ism330dhcx_wtm_level = ISM330DHCX_MAX_WTM_LEVEL;
 801e276:	f44f 7380 	mov.w	r3, #256	; 0x100
 801e27a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801e27c:	e004      	b.n	801e288 <ISM330DHCXTaskSensorInit+0x574>
  }
  else if(ism330dhcx_wtm_level < ISM330DHCX_MIN_WTM_LEVEL)
 801e27e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801e280:	2b0f      	cmp	r3, #15
 801e282:	d801      	bhi.n	801e288 <ISM330DHCXTaskSensorInit+0x574>
  {
    ism330dhcx_wtm_level = ISM330DHCX_MIN_WTM_LEVEL;
 801e284:	2310      	movs	r3, #16
 801e286:	85fb      	strh	r3, [r7, #46]	; 0x2e
  }
  _this->samples_per_it = ism330dhcx_wtm_level;
 801e288:	687b      	ldr	r3, [r7, #4]
 801e28a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801e28c:	f8a3 2ba0 	strh.w	r2, [r3, #2976]	; 0xba0

  /* Setup int for FIFO */
  ism330dhcx_fifo_watermark_set(p_sensor_drv, ism330dhcx_wtm_level);
 801e290:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801e292:	4619      	mov	r1, r3
 801e294:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801e296:	f7e4 fb37 	bl	8002908 <ism330dhcx_fifo_watermark_set>

  int1_route.int1_ctrl.int1_fifo_th = 1;
 801e29a:	7d3b      	ldrb	r3, [r7, #20]
 801e29c:	f043 0308 	orr.w	r3, r3, #8
 801e2a0:	753b      	strb	r3, [r7, #20]
  ism330dhcx_pin_int1_route_set(p_sensor_drv, &int1_route);
 801e2a2:	f107 0314 	add.w	r3, r7, #20
 801e2a6:	4619      	mov	r1, r3
 801e2a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801e2aa:	f7e3 ff2b 	bl	8002104 <ism330dhcx_pin_int1_route_set>

  ism330dhcx_fifo_mode_set(p_sensor_drv, ISM330DHCX_STREAM_MODE);
 801e2ae:	2106      	movs	r1, #6
 801e2b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801e2b2:	f7e4 fbab 	bl	8002a0c <ism330dhcx_fifo_mode_set>

  /* Setup mlc */
  if(_this->mlc_enable)
 801e2b6:	687b      	ldr	r3, [r7, #4]
 801e2b8:	f893 3157 	ldrb.w	r3, [r3, #343]	; 0x157
 801e2bc:	2b00      	cmp	r3, #0
 801e2be:	d03f      	beq.n	801e340 <ISM330DHCXTaskSensorInit+0x62c>
  {
    ism330dhcx_pin_int1_route_get(p_sensor_drv, &int1_route);
 801e2c0:	f107 0314 	add.w	r3, r7, #20
 801e2c4:	4619      	mov	r1, r3
 801e2c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801e2c8:	f7e4 f8cc 	bl	8002464 <ism330dhcx_pin_int1_route_get>
    ism330dhcx_pin_int2_route_get(p_sensor_drv, &int2_route);
 801e2cc:	f107 030c 	add.w	r3, r7, #12
 801e2d0:	4619      	mov	r1, r3
 801e2d2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801e2d4:	f7e4 fac0 	bl	8002858 <ism330dhcx_pin_int2_route_get>

    if(int1_route.mlc_int1.int1_mlc1 == 1 || int1_route.md1_cfg.int1_emb_func == 1)
 801e2d8:	7e7b      	ldrb	r3, [r7, #25]
 801e2da:	f003 0301 	and.w	r3, r3, #1
 801e2de:	b2db      	uxtb	r3, r3
 801e2e0:	2b00      	cmp	r3, #0
 801e2e2:	d105      	bne.n	801e2f0 <ISM330DHCXTaskSensorInit+0x5dc>
 801e2e4:	7d7b      	ldrb	r3, [r7, #21]
 801e2e6:	f003 0302 	and.w	r3, r3, #2
 801e2ea:	b2db      	uxtb	r3, r3
 801e2ec:	2b00      	cmp	r3, #0
 801e2ee:	d00d      	beq.n	801e30c <ISM330DHCXTaskSensorInit+0x5f8>
    {
      int1_route.mlc_int1.int1_mlc1 = 0;
 801e2f0:	7e7b      	ldrb	r3, [r7, #25]
 801e2f2:	f36f 0300 	bfc	r3, #0, #1
 801e2f6:	767b      	strb	r3, [r7, #25]
      int1_route.md1_cfg.int1_emb_func = 0;
 801e2f8:	7d7b      	ldrb	r3, [r7, #21]
 801e2fa:	f36f 0341 	bfc	r3, #1, #1
 801e2fe:	757b      	strb	r3, [r7, #21]
      ism330dhcx_pin_int1_route_set(p_sensor_drv, &int1_route);
 801e300:	f107 0314 	add.w	r3, r7, #20
 801e304:	4619      	mov	r1, r3
 801e306:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801e308:	f7e3 fefc 	bl	8002104 <ism330dhcx_pin_int1_route_set>
    }

    if(int2_route.mlc_int2.int2_mlc1 == 0 || int2_route.md2_cfg.int2_emb_func == 0)
 801e30c:	7c7b      	ldrb	r3, [r7, #17]
 801e30e:	f003 0301 	and.w	r3, r3, #1
 801e312:	b2db      	uxtb	r3, r3
 801e314:	2b00      	cmp	r3, #0
 801e316:	d005      	beq.n	801e324 <ISM330DHCXTaskSensorInit+0x610>
 801e318:	7b7b      	ldrb	r3, [r7, #13]
 801e31a:	f003 0302 	and.w	r3, r3, #2
 801e31e:	b2db      	uxtb	r3, r3
 801e320:	2b00      	cmp	r3, #0
 801e322:	d10d      	bne.n	801e340 <ISM330DHCXTaskSensorInit+0x62c>
    {
      int2_route.mlc_int2.int2_mlc1 = 1;
 801e324:	7c7b      	ldrb	r3, [r7, #17]
 801e326:	f043 0301 	orr.w	r3, r3, #1
 801e32a:	747b      	strb	r3, [r7, #17]
      int2_route.md2_cfg.int2_emb_func = 1;
 801e32c:	7b7b      	ldrb	r3, [r7, #13]
 801e32e:	f043 0302 	orr.w	r3, r3, #2
 801e332:	737b      	strb	r3, [r7, #13]
      ism330dhcx_pin_int2_route_set(p_sensor_drv, &int2_route);
 801e334:	f107 030c 	add.w	r3, r7, #12
 801e338:	4619      	mov	r1, r3
 801e33a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801e33c:	f7e4 f8ea 	bl	8002514 <ism330dhcx_pin_int2_route_set>
    }
  }

  return res;
 801e340:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
}
 801e342:	4618      	mov	r0, r3
 801e344:	3730      	adds	r7, #48	; 0x30
 801e346:	46bd      	mov	sp, r7
 801e348:	bd80      	pop	{r7, pc}
 801e34a:	bf00      	nop

0801e34c <ISM330DHCXTaskSensorReadData>:

static sys_error_code_t ISM330DHCXTaskSensorReadData(ISM330DHCXTask *_this)
{
 801e34c:	b580      	push	{r7, lr}
 801e34e:	b08e      	sub	sp, #56	; 0x38
 801e350:	af00      	add	r7, sp, #0
 801e352:	6078      	str	r0, [r7, #4]
  assert_param(_this != NULL);
 801e354:	687b      	ldr	r3, [r7, #4]
 801e356:	2b00      	cmp	r3, #0
 801e358:	d104      	bne.n	801e364 <ISM330DHCXTaskSensorReadData+0x18>
 801e35a:	f640 015a 	movw	r1, #2138	; 0x85a
 801e35e:	4888      	ldr	r0, [pc, #544]	; (801e580 <ISM330DHCXTaskSensorReadData+0x234>)
 801e360:	f7f6 ffa3 	bl	80152aa <assert_failed>
  sys_error_code_t res = SYS_NO_ERROR_CODE;
 801e364:	2300      	movs	r3, #0
 801e366:	86fb      	strh	r3, [r7, #54]	; 0x36
  stmdev_ctx_t *p_sensor_drv = (stmdev_ctx_t*) &_this->p_sensor_bus_if->m_xConnector;
 801e368:	687b      	ldr	r3, [r7, #4]
 801e36a:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 801e36e:	61fb      	str	r3, [r7, #28]
  uint8_t reg[2];
  uint16_t i;

  /* Check FIFO_WTM_IA and fifo level. We do not use PID in order to avoid reading one register twice */
  ism330dhcx_read_reg(p_sensor_drv, ISM330DHCX_FIFO_STATUS1, reg, 2);
 801e370:	f107 0208 	add.w	r2, r7, #8
 801e374:	2302      	movs	r3, #2
 801e376:	213a      	movs	r1, #58	; 0x3a
 801e378:	69f8      	ldr	r0, [r7, #28]
 801e37a:	f7e3 f977 	bl	800166c <ism330dhcx_read_reg>

  uint16_t fifo_level = ((reg[1] & 0x03) << 8) + reg[0];
 801e37e:	7a7b      	ldrb	r3, [r7, #9]
 801e380:	021b      	lsls	r3, r3, #8
 801e382:	b29b      	uxth	r3, r3
 801e384:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801e388:	b29a      	uxth	r2, r3
 801e38a:	7a3b      	ldrb	r3, [r7, #8]
 801e38c:	b29b      	uxth	r3, r3
 801e38e:	4413      	add	r3, r2
 801e390:	837b      	strh	r3, [r7, #26]

  if((reg[1]) & 0x80 && (fifo_level >= _this->samples_per_it))
 801e392:	7a7b      	ldrb	r3, [r7, #9]
 801e394:	b25b      	sxtb	r3, r3
 801e396:	2b00      	cmp	r3, #0
 801e398:	f280 80eb 	bge.w	801e572 <ISM330DHCXTaskSensorReadData+0x226>
 801e39c:	687b      	ldr	r3, [r7, #4]
 801e39e:	f8b3 3ba0 	ldrh.w	r3, [r3, #2976]	; 0xba0
 801e3a2:	8b7a      	ldrh	r2, [r7, #26]
 801e3a4:	429a      	cmp	r2, r3
 801e3a6:	f0c0 80e4 	bcc.w	801e572 <ISM330DHCXTaskSensorReadData+0x226>
  {
    ism330dhcx_read_reg(p_sensor_drv, ISM330DHCX_FIFO_DATA_OUT_TAG, _this->p_fast_sensor_data_buff, _this->samples_per_it * 7);
 801e3aa:	687b      	ldr	r3, [r7, #4]
 801e3ac:	f503 72c8 	add.w	r2, r3, #400	; 0x190
 801e3b0:	687b      	ldr	r3, [r7, #4]
 801e3b2:	f8b3 3ba0 	ldrh.w	r3, [r3, #2976]	; 0xba0
 801e3b6:	4619      	mov	r1, r3
 801e3b8:	00c9      	lsls	r1, r1, #3
 801e3ba:	1acb      	subs	r3, r1, r3
 801e3bc:	b29b      	uxth	r3, r3
 801e3be:	2178      	movs	r1, #120	; 0x78
 801e3c0:	69f8      	ldr	r0, [r7, #28]
 801e3c2:	f7e3 f953 	bl	800166c <ism330dhcx_read_reg>
        *p16++ = dummyDataCounter_gyro++;
        *p16++ = dummyDataCounter_gyro++;
      }
    }
#endif
    if((_this->acc_sensor_status.IsActive) && (_this->gyro_sensor_status.IsActive))
 801e3c6:	687b      	ldr	r3, [r7, #4]
 801e3c8:	f893 30f4 	ldrb.w	r3, [r3, #244]	; 0xf4
 801e3cc:	2b00      	cmp	r3, #0
 801e3ce:	f000 809c 	beq.w	801e50a <ISM330DHCXTaskSensorReadData+0x1be>
 801e3d2:	687b      	ldr	r3, [r7, #4]
 801e3d4:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 801e3d8:	2b00      	cmp	r3, #0
 801e3da:	f000 8096 	beq.w	801e50a <ISM330DHCXTaskSensorReadData+0x1be>
    { /* Read both ACC and GYRO */

      uint32_t odr_acc = (uint32_t) _this->acc_sensor_status.ODR;
 801e3de:	687b      	ldr	r3, [r7, #4]
 801e3e0:	edd3 7a3e 	vldr	s15, [r3, #248]	; 0xf8
 801e3e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801e3e8:	ee17 3a90 	vmov	r3, s15
 801e3ec:	617b      	str	r3, [r7, #20]
      uint32_t odr_gyro = (uint32_t) _this->gyro_sensor_status.ODR;
 801e3ee:	687b      	ldr	r3, [r7, #4]
 801e3f0:	edd3 7a47 	vldr	s15, [r3, #284]	; 0x11c
 801e3f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801e3f8:	ee17 3a90 	vmov	r3, s15
 801e3fc:	613b      	str	r3, [r7, #16]

      int16_t *p16_src = (int16_t*) _this->p_fast_sensor_data_buff;
 801e3fe:	687b      	ldr	r3, [r7, #4]
 801e400:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 801e404:	60fb      	str	r3, [r7, #12]
      int16_t *p_acc, *p_gyro;

      _this->acc_samples_count = 0;
 801e406:	687b      	ldr	r3, [r7, #4]
 801e408:	2200      	movs	r2, #0
 801e40a:	f8a3 2ba2 	strh.w	r2, [r3, #2978]	; 0xba2
      _this->gyro_samples_count = 0;
 801e40e:	687b      	ldr	r3, [r7, #4]
 801e410:	2200      	movs	r2, #0
 801e412:	f8a3 2ba4 	strh.w	r2, [r3, #2980]	; 0xba4

      if(odr_acc > odr_gyro) /* Acc is faster than Gyro */
 801e416:	697a      	ldr	r2, [r7, #20]
 801e418:	693b      	ldr	r3, [r7, #16]
 801e41a:	429a      	cmp	r2, r3
 801e41c:	d908      	bls.n	801e430 <ISM330DHCXTaskSensorReadData+0xe4>
      {
        p_acc = (int16_t*) _this->p_fast_sensor_data_buff;
 801e41e:	687b      	ldr	r3, [r7, #4]
 801e420:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 801e424:	633b      	str	r3, [r7, #48]	; 0x30
        p_gyro = (int16_t*) _this->p_slow_sensor_data_buff;
 801e426:	687b      	ldr	r3, [r7, #4]
 801e428:	f503 6309 	add.w	r3, r3, #2192	; 0x890
 801e42c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801e42e:	e007      	b.n	801e440 <ISM330DHCXTaskSensorReadData+0xf4>
      }
      else
      {
        p_acc = (int16_t*) _this->p_slow_sensor_data_buff;
 801e430:	687b      	ldr	r3, [r7, #4]
 801e432:	f503 6309 	add.w	r3, r3, #2192	; 0x890
 801e436:	633b      	str	r3, [r7, #48]	; 0x30
        p_gyro = (int16_t*) _this->p_fast_sensor_data_buff;
 801e438:	687b      	ldr	r3, [r7, #4]
 801e43a:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 801e43e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      uint8_t *p_tag = (uint8_t*) p16_src;
 801e440:	68fb      	ldr	r3, [r7, #12]
 801e442:	62bb      	str	r3, [r7, #40]	; 0x28

      for(i = 0; i < _this->samples_per_it; i++)
 801e444:	2300      	movs	r3, #0
 801e446:	86bb      	strh	r3, [r7, #52]	; 0x34
 801e448:	e058      	b.n	801e4fc <ISM330DHCXTaskSensorReadData+0x1b0>
      {
        if(((*p_tag) >> 3) == ISM330DHCX_TAG_ACC)
 801e44a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e44c:	781b      	ldrb	r3, [r3, #0]
 801e44e:	08db      	lsrs	r3, r3, #3
 801e450:	b2db      	uxtb	r3, r3
 801e452:	2b02      	cmp	r3, #2
 801e454:	d126      	bne.n	801e4a4 <ISM330DHCXTaskSensorReadData+0x158>
        {
          p16_src = (int16_t*) (p_tag + 1);
 801e456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e458:	3301      	adds	r3, #1
 801e45a:	60fb      	str	r3, [r7, #12]
          *p_acc++ = *p16_src++;
 801e45c:	68fa      	ldr	r2, [r7, #12]
 801e45e:	1c93      	adds	r3, r2, #2
 801e460:	60fb      	str	r3, [r7, #12]
 801e462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e464:	1c99      	adds	r1, r3, #2
 801e466:	6339      	str	r1, [r7, #48]	; 0x30
 801e468:	f9b2 2000 	ldrsh.w	r2, [r2]
 801e46c:	801a      	strh	r2, [r3, #0]
          *p_acc++ = *p16_src++;
 801e46e:	68fa      	ldr	r2, [r7, #12]
 801e470:	1c93      	adds	r3, r2, #2
 801e472:	60fb      	str	r3, [r7, #12]
 801e474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e476:	1c99      	adds	r1, r3, #2
 801e478:	6339      	str	r1, [r7, #48]	; 0x30
 801e47a:	f9b2 2000 	ldrsh.w	r2, [r2]
 801e47e:	801a      	strh	r2, [r3, #0]
          *p_acc++ = *p16_src++;
 801e480:	68fa      	ldr	r2, [r7, #12]
 801e482:	1c93      	adds	r3, r2, #2
 801e484:	60fb      	str	r3, [r7, #12]
 801e486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e488:	1c99      	adds	r1, r3, #2
 801e48a:	6339      	str	r1, [r7, #48]	; 0x30
 801e48c:	f9b2 2000 	ldrsh.w	r2, [r2]
 801e490:	801a      	strh	r2, [r3, #0]
          _this->acc_samples_count++;
 801e492:	687b      	ldr	r3, [r7, #4]
 801e494:	f8b3 3ba2 	ldrh.w	r3, [r3, #2978]	; 0xba2
 801e498:	3301      	adds	r3, #1
 801e49a:	b29a      	uxth	r2, r3
 801e49c:	687b      	ldr	r3, [r7, #4]
 801e49e:	f8a3 2ba2 	strh.w	r2, [r3, #2978]	; 0xba2
 801e4a2:	e025      	b.n	801e4f0 <ISM330DHCXTaskSensorReadData+0x1a4>
        }
        else
        {
          p16_src = (int16_t*) (p_tag + 1);
 801e4a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e4a6:	3301      	adds	r3, #1
 801e4a8:	60fb      	str	r3, [r7, #12]
          *p_gyro++ = *p16_src++;
 801e4aa:	68fa      	ldr	r2, [r7, #12]
 801e4ac:	1c93      	adds	r3, r2, #2
 801e4ae:	60fb      	str	r3, [r7, #12]
 801e4b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e4b2:	1c99      	adds	r1, r3, #2
 801e4b4:	62f9      	str	r1, [r7, #44]	; 0x2c
 801e4b6:	f9b2 2000 	ldrsh.w	r2, [r2]
 801e4ba:	801a      	strh	r2, [r3, #0]
          *p_gyro++ = *p16_src++;
 801e4bc:	68fa      	ldr	r2, [r7, #12]
 801e4be:	1c93      	adds	r3, r2, #2
 801e4c0:	60fb      	str	r3, [r7, #12]
 801e4c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e4c4:	1c99      	adds	r1, r3, #2
 801e4c6:	62f9      	str	r1, [r7, #44]	; 0x2c
 801e4c8:	f9b2 2000 	ldrsh.w	r2, [r2]
 801e4cc:	801a      	strh	r2, [r3, #0]
          *p_gyro++ = *p16_src++;
 801e4ce:	68fa      	ldr	r2, [r7, #12]
 801e4d0:	1c93      	adds	r3, r2, #2
 801e4d2:	60fb      	str	r3, [r7, #12]
 801e4d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e4d6:	1c99      	adds	r1, r3, #2
 801e4d8:	62f9      	str	r1, [r7, #44]	; 0x2c
 801e4da:	f9b2 2000 	ldrsh.w	r2, [r2]
 801e4de:	801a      	strh	r2, [r3, #0]
          _this->gyro_samples_count++;
 801e4e0:	687b      	ldr	r3, [r7, #4]
 801e4e2:	f8b3 3ba4 	ldrh.w	r3, [r3, #2980]	; 0xba4
 801e4e6:	3301      	adds	r3, #1
 801e4e8:	b29a      	uxth	r2, r3
 801e4ea:	687b      	ldr	r3, [r7, #4]
 801e4ec:	f8a3 2ba4 	strh.w	r2, [r3, #2980]	; 0xba4
        }
        p_tag += 7;
 801e4f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e4f2:	3307      	adds	r3, #7
 801e4f4:	62bb      	str	r3, [r7, #40]	; 0x28
      for(i = 0; i < _this->samples_per_it; i++)
 801e4f6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801e4f8:	3301      	adds	r3, #1
 801e4fa:	86bb      	strh	r3, [r7, #52]	; 0x34
 801e4fc:	687b      	ldr	r3, [r7, #4]
 801e4fe:	f8b3 3ba0 	ldrh.w	r3, [r3, #2976]	; 0xba0
 801e502:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 801e504:	429a      	cmp	r2, r3
 801e506:	d3a0      	bcc.n	801e44a <ISM330DHCXTaskSensorReadData+0xfe>
    { /* Read both ACC and GYRO */
 801e508:	e032      	b.n	801e570 <ISM330DHCXTaskSensorReadData+0x224>
      }
    }
    else /* 1 subsensor active only --> simply drop TAGS */
    {
      int16_t *p16_src = (int16_t*) _this->p_fast_sensor_data_buff;
 801e50a:	687b      	ldr	r3, [r7, #4]
 801e50c:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 801e510:	627b      	str	r3, [r7, #36]	; 0x24
      int16_t *p16_dest = (int16_t*) _this->p_fast_sensor_data_buff;
 801e512:	687b      	ldr	r3, [r7, #4]
 801e514:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 801e518:	623b      	str	r3, [r7, #32]
      for(i = 0; i < _this->samples_per_it; i++)
 801e51a:	2300      	movs	r3, #0
 801e51c:	86bb      	strh	r3, [r7, #52]	; 0x34
 801e51e:	e020      	b.n	801e562 <ISM330DHCXTaskSensorReadData+0x216>
      {
        p16_src = (int16_t*) &((uint8_t*) (p16_src))[1];
 801e520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e522:	3301      	adds	r3, #1
 801e524:	627b      	str	r3, [r7, #36]	; 0x24
        *p16_dest++ = *p16_src++;
 801e526:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801e528:	1c93      	adds	r3, r2, #2
 801e52a:	627b      	str	r3, [r7, #36]	; 0x24
 801e52c:	6a3b      	ldr	r3, [r7, #32]
 801e52e:	1c99      	adds	r1, r3, #2
 801e530:	6239      	str	r1, [r7, #32]
 801e532:	f9b2 2000 	ldrsh.w	r2, [r2]
 801e536:	801a      	strh	r2, [r3, #0]
        *p16_dest++ = *p16_src++;
 801e538:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801e53a:	1c93      	adds	r3, r2, #2
 801e53c:	627b      	str	r3, [r7, #36]	; 0x24
 801e53e:	6a3b      	ldr	r3, [r7, #32]
 801e540:	1c99      	adds	r1, r3, #2
 801e542:	6239      	str	r1, [r7, #32]
 801e544:	f9b2 2000 	ldrsh.w	r2, [r2]
 801e548:	801a      	strh	r2, [r3, #0]
        *p16_dest++ = *p16_src++;
 801e54a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801e54c:	1c93      	adds	r3, r2, #2
 801e54e:	627b      	str	r3, [r7, #36]	; 0x24
 801e550:	6a3b      	ldr	r3, [r7, #32]
 801e552:	1c99      	adds	r1, r3, #2
 801e554:	6239      	str	r1, [r7, #32]
 801e556:	f9b2 2000 	ldrsh.w	r2, [r2]
 801e55a:	801a      	strh	r2, [r3, #0]
      for(i = 0; i < _this->samples_per_it; i++)
 801e55c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801e55e:	3301      	adds	r3, #1
 801e560:	86bb      	strh	r3, [r7, #52]	; 0x34
 801e562:	687b      	ldr	r3, [r7, #4]
 801e564:	f8b3 3ba0 	ldrh.w	r3, [r3, #2976]	; 0xba0
 801e568:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 801e56a:	429a      	cmp	r2, r3
 801e56c:	d3d8      	bcc.n	801e520 <ISM330DHCXTaskSensorReadData+0x1d4>
    if((_this->acc_sensor_status.IsActive) && (_this->gyro_sensor_status.IsActive))
 801e56e:	e002      	b.n	801e576 <ISM330DHCXTaskSensorReadData+0x22a>
 801e570:	e001      	b.n	801e576 <ISM330DHCXTaskSensorReadData+0x22a>
    }

  }
  else
  {
    res = SYS_BASE_ERROR_CODE;
 801e572:	2301      	movs	r3, #1
 801e574:	86fb      	strh	r3, [r7, #54]	; 0x36
  }

  return res;
 801e576:	8efb      	ldrh	r3, [r7, #54]	; 0x36
}
 801e578:	4618      	mov	r0, r3
 801e57a:	3738      	adds	r7, #56	; 0x38
 801e57c:	46bd      	mov	sp, r7
 801e57e:	bd80      	pop	{r7, pc}
 801e580:	080274b8 	.word	0x080274b8

0801e584 <ISM330DHCXTaskSensorReadMLC>:

static sys_error_code_t ISM330DHCXTaskSensorReadMLC(ISM330DHCXTask *_this)
{
 801e584:	b580      	push	{r7, lr}
 801e586:	b086      	sub	sp, #24
 801e588:	af00      	add	r7, sp, #0
 801e58a:	6078      	str	r0, [r7, #4]
  assert_param(_this != NULL);
 801e58c:	687b      	ldr	r3, [r7, #4]
 801e58e:	2b00      	cmp	r3, #0
 801e590:	d104      	bne.n	801e59c <ISM330DHCXTaskSensorReadMLC+0x18>
 801e592:	f640 01c3 	movw	r1, #2243	; 0x8c3
 801e596:	481b      	ldr	r0, [pc, #108]	; (801e604 <ISM330DHCXTaskSensorReadMLC+0x80>)
 801e598:	f7f6 fe87 	bl	80152aa <assert_failed>
  sys_error_code_t res = SYS_NO_ERROR_CODE;
 801e59c:	2300      	movs	r3, #0
 801e59e:	82bb      	strh	r3, [r7, #20]
  stmdev_ctx_t *p_sensor_drv = (stmdev_ctx_t*) &_this->p_sensor_bus_if->m_xConnector;
 801e5a0:	687b      	ldr	r3, [r7, #4]
 801e5a2:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 801e5a6:	613b      	str	r3, [r7, #16]
  ism330dhcx_mlc_status_mainpage_t mlc_status;
  uint8_t ii;

  if(_this->mlc_enable)
 801e5a8:	687b      	ldr	r3, [r7, #4]
 801e5aa:	f893 3157 	ldrb.w	r3, [r3, #343]	; 0x157
 801e5ae:	2b00      	cmp	r3, #0
 801e5b0:	d023      	beq.n	801e5fa <ISM330DHCXTaskSensorReadMLC+0x76>
  {
    for(ii = 0; ii < 8; ii++)
 801e5b2:	2300      	movs	r3, #0
 801e5b4:	75fb      	strb	r3, [r7, #23]
 801e5b6:	e017      	b.n	801e5e8 <ISM330DHCXTaskSensorReadMLC+0x64>
    {
      ism330dhcx_mem_bank_set(p_sensor_drv, ISM330DHCX_EMBEDDED_FUNC_BANK);
 801e5b8:	2102      	movs	r1, #2
 801e5ba:	6938      	ldr	r0, [r7, #16]
 801e5bc:	f7e3 fd06 	bl	8001fcc <ism330dhcx_mem_bank_set>
      ism330dhcx_read_reg(p_sensor_drv, ISM330DHCX_MLC0_SRC + ii, (uint8_t*) (&_this->p_mlc_sensor_data_buff[ii]), 1);
 801e5c0:	7dfb      	ldrb	r3, [r7, #23]
 801e5c2:	3370      	adds	r3, #112	; 0x70
 801e5c4:	b2d9      	uxtb	r1, r3
 801e5c6:	7dfb      	ldrb	r3, [r7, #23]
 801e5c8:	f503 63b9 	add.w	r3, r3, #1480	; 0x5c8
 801e5cc:	005b      	lsls	r3, r3, #1
 801e5ce:	687a      	ldr	r2, [r7, #4]
 801e5d0:	441a      	add	r2, r3
 801e5d2:	2301      	movs	r3, #1
 801e5d4:	6938      	ldr	r0, [r7, #16]
 801e5d6:	f7e3 f849 	bl	800166c <ism330dhcx_read_reg>
      ism330dhcx_mem_bank_set(p_sensor_drv, ISM330DHCX_USER_BANK);
 801e5da:	2100      	movs	r1, #0
 801e5dc:	6938      	ldr	r0, [r7, #16]
 801e5de:	f7e3 fcf5 	bl	8001fcc <ism330dhcx_mem_bank_set>
    for(ii = 0; ii < 8; ii++)
 801e5e2:	7dfb      	ldrb	r3, [r7, #23]
 801e5e4:	3301      	adds	r3, #1
 801e5e6:	75fb      	strb	r3, [r7, #23]
 801e5e8:	7dfb      	ldrb	r3, [r7, #23]
 801e5ea:	2b07      	cmp	r3, #7
 801e5ec:	d9e4      	bls.n	801e5b8 <ISM330DHCXTaskSensorReadMLC+0x34>
    }
    ism330dhcx_mlc_status_get(p_sensor_drv, &mlc_status);
 801e5ee:	f107 030c 	add.w	r3, r7, #12
 801e5f2:	4619      	mov	r1, r3
 801e5f4:	6938      	ldr	r0, [r7, #16]
 801e5f6:	f7e4 facc 	bl	8002b92 <ism330dhcx_mlc_status_get>
  }
  return res;
 801e5fa:	8abb      	ldrh	r3, [r7, #20]
}
 801e5fc:	4618      	mov	r0, r3
 801e5fe:	3718      	adds	r7, #24
 801e600:	46bd      	mov	sp, r7
 801e602:	bd80      	pop	{r7, pc}
 801e604:	080274b8 	.word	0x080274b8

0801e608 <ISM330DHCXTaskSensorRegister>:

static sys_error_code_t ISM330DHCXTaskSensorRegister(ISM330DHCXTask *_this)
{
 801e608:	b580      	push	{r7, lr}
 801e60a:	b086      	sub	sp, #24
 801e60c:	af00      	add	r7, sp, #0
 801e60e:	6078      	str	r0, [r7, #4]
  assert_param(_this != NULL);
 801e610:	687b      	ldr	r3, [r7, #4]
 801e612:	2b00      	cmp	r3, #0
 801e614:	d104      	bne.n	801e620 <ISM330DHCXTaskSensorRegister+0x18>
 801e616:	f640 01d8 	movw	r1, #2264	; 0x8d8
 801e61a:	4817      	ldr	r0, [pc, #92]	; (801e678 <ISM330DHCXTaskSensorRegister+0x70>)
 801e61c:	f7f6 fe45 	bl	80152aa <assert_failed>
  sys_error_code_t res = SYS_NO_ERROR_CODE;
 801e620:	2300      	movs	r3, #0
 801e622:	82fb      	strh	r3, [r7, #22]

  ISensor_t *acc_if = (ISensor_t*) ISM330DHCXTaskGetAccSensorIF(_this);
 801e624:	6878      	ldr	r0, [r7, #4]
 801e626:	f7fd fc37 	bl	801be98 <ISM330DHCXTaskGetAccSensorIF>
 801e62a:	6138      	str	r0, [r7, #16]
  ISensor_t *gyro_if = (ISensor_t*) ISM330DHCXTaskGetGyroSensorIF(_this);
 801e62c:	6878      	ldr	r0, [r7, #4]
 801e62e:	f7fd fc3f 	bl	801beb0 <ISM330DHCXTaskGetGyroSensorIF>
 801e632:	60f8      	str	r0, [r7, #12]
  ISensor_t *mlc_if = (ISensor_t*) ISM330DHCXTaskGetMlcFakeSensorIF(_this);
 801e634:	6878      	ldr	r0, [r7, #4]
 801e636:	f7fd fc47 	bl	801bec8 <ISM330DHCXTaskGetMlcFakeSensorIF>
 801e63a:	60b8      	str	r0, [r7, #8]

  _this->acc_id = SMAddSensor(acc_if);
 801e63c:	6938      	ldr	r0, [r7, #16]
 801e63e:	f001 fed5 	bl	80203ec <SMAddSensor>
 801e642:	4603      	mov	r3, r0
 801e644:	461a      	mov	r2, r3
 801e646:	687b      	ldr	r3, [r7, #4]
 801e648:	f883 2154 	strb.w	r2, [r3, #340]	; 0x154
  _this->gyro_id = SMAddSensor(gyro_if);
 801e64c:	68f8      	ldr	r0, [r7, #12]
 801e64e:	f001 fecd 	bl	80203ec <SMAddSensor>
 801e652:	4603      	mov	r3, r0
 801e654:	461a      	mov	r2, r3
 801e656:	687b      	ldr	r3, [r7, #4]
 801e658:	f883 2155 	strb.w	r2, [r3, #341]	; 0x155
  _this->mlc_id = SMAddSensor(mlc_if);
 801e65c:	68b8      	ldr	r0, [r7, #8]
 801e65e:	f001 fec5 	bl	80203ec <SMAddSensor>
 801e662:	4603      	mov	r3, r0
 801e664:	461a      	mov	r2, r3
 801e666:	687b      	ldr	r3, [r7, #4]
 801e668:	f883 2156 	strb.w	r2, [r3, #342]	; 0x156

  return res;
 801e66c:	8afb      	ldrh	r3, [r7, #22]
}
 801e66e:	4618      	mov	r0, r3
 801e670:	3718      	adds	r7, #24
 801e672:	46bd      	mov	sp, r7
 801e674:	bd80      	pop	{r7, pc}
 801e676:	bf00      	nop
 801e678:	080274b8 	.word	0x080274b8

0801e67c <ISM330DHCXTaskSensorInitTaskParams>:

static sys_error_code_t ISM330DHCXTaskSensorInitTaskParams(ISM330DHCXTask *_this)
{
 801e67c:	b580      	push	{r7, lr}
 801e67e:	b084      	sub	sp, #16
 801e680:	af00      	add	r7, sp, #0
 801e682:	6078      	str	r0, [r7, #4]
  assert_param(_this != NULL);
 801e684:	687b      	ldr	r3, [r7, #4]
 801e686:	2b00      	cmp	r3, #0
 801e688:	d104      	bne.n	801e694 <ISM330DHCXTaskSensorInitTaskParams+0x18>
 801e68a:	f640 01e8 	movw	r1, #2280	; 0x8e8
 801e68e:	484e      	ldr	r0, [pc, #312]	; (801e7c8 <ISM330DHCXTaskSensorInitTaskParams+0x14c>)
 801e690:	f7f6 fe0b 	bl	80152aa <assert_failed>
  sys_error_code_t res = SYS_NO_ERROR_CODE;
 801e694:	2300      	movs	r3, #0
 801e696:	81fb      	strh	r3, [r7, #14]

  /* ACCELEROMETER STATUS */
  _this->acc_sensor_status.DataType = DATA_TYPE_INT16;
 801e698:	687b      	ldr	r3, [r7, #4]
 801e69a:	2203      	movs	r2, #3
 801e69c:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
  _this->acc_sensor_status.Dimensions = 3;
 801e6a0:	687b      	ldr	r3, [r7, #4]
 801e6a2:	2203      	movs	r2, #3
 801e6a4:	f8a3 210a 	strh.w	r2, [r3, #266]	; 0x10a
  _this->acc_sensor_status.IsActive = TRUE;
 801e6a8:	687b      	ldr	r3, [r7, #4]
 801e6aa:	2201      	movs	r2, #1
 801e6ac:	f883 20f4 	strb.w	r2, [r3, #244]	; 0xf4
  _this->acc_sensor_status.FS = 16.0f;
 801e6b0:	687b      	ldr	r3, [r7, #4]
 801e6b2:	f04f 4283 	mov.w	r2, #1098907648	; 0x41800000
 801e6b6:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
  _this->acc_sensor_status.Sensitivity = 0.0000305f * _this->acc_sensor_status.FS;
 801e6ba:	687b      	ldr	r3, [r7, #4]
 801e6bc:	edd3 7a3b 	vldr	s15, [r3, #236]	; 0xec
 801e6c0:	ed9f 7a42 	vldr	s14, [pc, #264]	; 801e7cc <ISM330DHCXTaskSensorInitTaskParams+0x150>
 801e6c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 801e6c8:	687b      	ldr	r3, [r7, #4]
 801e6ca:	edc3 7a3c 	vstr	s15, [r3, #240]	; 0xf0
  _this->acc_sensor_status.ODR = 6667.0f;
 801e6ce:	687b      	ldr	r3, [r7, #4]
 801e6d0:	4a3f      	ldr	r2, [pc, #252]	; (801e7d0 <ISM330DHCXTaskSensorInitTaskParams+0x154>)
 801e6d2:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
  _this->acc_sensor_status.MeasuredODR = 0.0f;
 801e6d6:	687b      	ldr	r3, [r7, #4]
 801e6d8:	f04f 0200 	mov.w	r2, #0
 801e6dc:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
  _this->acc_sensor_status.InitialOffset = 0.0f;
 801e6e0:	687b      	ldr	r3, [r7, #4]
 801e6e2:	f04f 0200 	mov.w	r2, #0
 801e6e6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  _this->acc_sensor_status.DataPacketSize = 2048;
 801e6ea:	687b      	ldr	r3, [r7, #4]
 801e6ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801e6f0:	f8a3 2106 	strh.w	r2, [r3, #262]	; 0x106
#if (HSD_USE_DUMMY_DATA == 1)
  _this->acc_sensor_status.SamplesPerTimestamp = 0;
#else
  _this->acc_sensor_status.SamplesPerTimestamp = 1000;
 801e6f4:	687b      	ldr	r3, [r7, #4]
 801e6f6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801e6fa:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
#endif

  /* GYROSCOPE STATUS */
  _this->gyro_sensor_status.DataType = DATA_TYPE_INT16;
 801e6fe:	687b      	ldr	r3, [r7, #4]
 801e700:	2203      	movs	r2, #3
 801e702:	f883 212c 	strb.w	r2, [r3, #300]	; 0x12c
  _this->gyro_sensor_status.Dimensions = 3;
 801e706:	687b      	ldr	r3, [r7, #4]
 801e708:	2203      	movs	r2, #3
 801e70a:	f8a3 212e 	strh.w	r2, [r3, #302]	; 0x12e
  _this->gyro_sensor_status.IsActive = TRUE;
 801e70e:	687b      	ldr	r3, [r7, #4]
 801e710:	2201      	movs	r2, #1
 801e712:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
  _this->gyro_sensor_status.FS = 4000.0f;
 801e716:	687b      	ldr	r3, [r7, #4]
 801e718:	4a2e      	ldr	r2, [pc, #184]	; (801e7d4 <ISM330DHCXTaskSensorInitTaskParams+0x158>)
 801e71a:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
  _this->gyro_sensor_status.Sensitivity = 0.035f * _this->gyro_sensor_status.FS;
 801e71e:	687b      	ldr	r3, [r7, #4]
 801e720:	edd3 7a44 	vldr	s15, [r3, #272]	; 0x110
 801e724:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 801e7d8 <ISM330DHCXTaskSensorInitTaskParams+0x15c>
 801e728:	ee67 7a87 	vmul.f32	s15, s15, s14
 801e72c:	687b      	ldr	r3, [r7, #4]
 801e72e:	edc3 7a45 	vstr	s15, [r3, #276]	; 0x114
  _this->gyro_sensor_status.ODR = 6667.0f;
 801e732:	687b      	ldr	r3, [r7, #4]
 801e734:	4a26      	ldr	r2, [pc, #152]	; (801e7d0 <ISM330DHCXTaskSensorInitTaskParams+0x154>)
 801e736:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
  _this->gyro_sensor_status.MeasuredODR = 0.0f;
 801e73a:	687b      	ldr	r3, [r7, #4]
 801e73c:	f04f 0200 	mov.w	r2, #0
 801e740:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
  _this->gyro_sensor_status.InitialOffset = 0.0f;
 801e744:	687b      	ldr	r3, [r7, #4]
 801e746:	f04f 0200 	mov.w	r2, #0
 801e74a:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
  _this->gyro_sensor_status.DataPacketSize = 2048;
 801e74e:	687b      	ldr	r3, [r7, #4]
 801e750:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801e754:	f8a3 212a 	strh.w	r2, [r3, #298]	; 0x12a
#if (HSD_USE_DUMMY_DATA == 1)
  _this->gyro_sensor_status.SamplesPerTimestamp = 0;
#else
  _this->gyro_sensor_status.SamplesPerTimestamp = 1000;
 801e758:	687b      	ldr	r3, [r7, #4]
 801e75a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801e75e:	f8a3 2128 	strh.w	r2, [r3, #296]	; 0x128
#endif

  /* MLC STATUS */
  _this->mlc_fakesensor_status.DataType = DATA_TYPE_INT8;
 801e762:	687b      	ldr	r3, [r7, #4]
 801e764:	2201      	movs	r2, #1
 801e766:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
  _this->mlc_fakesensor_status.Dimensions = 8;
 801e76a:	687b      	ldr	r3, [r7, #4]
 801e76c:	2208      	movs	r2, #8
 801e76e:	f8a3 2152 	strh.w	r2, [r3, #338]	; 0x152
  _this->mlc_fakesensor_status.IsActive = FALSE;
 801e772:	687b      	ldr	r3, [r7, #4]
 801e774:	2200      	movs	r2, #0
 801e776:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
  _this->mlc_fakesensor_status.FS = 1.0f;
 801e77a:	687b      	ldr	r3, [r7, #4]
 801e77c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 801e780:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
  _this->mlc_fakesensor_status.Sensitivity = 1.0f;
 801e784:	687b      	ldr	r3, [r7, #4]
 801e786:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 801e78a:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
  _this->mlc_fakesensor_status.ODR = 1.0f;
 801e78e:	687b      	ldr	r3, [r7, #4]
 801e790:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 801e794:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
  _this->mlc_fakesensor_status.MeasuredODR = 0.0f;
 801e798:	687b      	ldr	r3, [r7, #4]
 801e79a:	f04f 0200 	mov.w	r2, #0
 801e79e:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
  _this->mlc_fakesensor_status.InitialOffset = 0.0f;
 801e7a2:	687b      	ldr	r3, [r7, #4]
 801e7a4:	f04f 0200 	mov.w	r2, #0
 801e7a8:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  _this->mlc_fakesensor_status.DataPacketSize = 16;
 801e7ac:	687b      	ldr	r3, [r7, #4]
 801e7ae:	2210      	movs	r2, #16
 801e7b0:	f8a3 214e 	strh.w	r2, [r3, #334]	; 0x14e
#if (HSD_USE_DUMMY_DATA == 1)
  _this->mlc_fakesensor_status.SamplesPerTimestamp = 0;
#else
  _this->mlc_fakesensor_status.SamplesPerTimestamp = 1;
 801e7b4:	687b      	ldr	r3, [r7, #4]
 801e7b6:	2201      	movs	r2, #1
 801e7b8:	f8a3 214c 	strh.w	r2, [r3, #332]	; 0x14c
#endif

  return res;
 801e7bc:	89fb      	ldrh	r3, [r7, #14]
}
 801e7be:	4618      	mov	r0, r3
 801e7c0:	3710      	adds	r7, #16
 801e7c2:	46bd      	mov	sp, r7
 801e7c4:	bd80      	pop	{r7, pc}
 801e7c6:	bf00      	nop
 801e7c8:	080274b8 	.word	0x080274b8
 801e7cc:	37ffda40 	.word	0x37ffda40
 801e7d0:	45d05800 	.word	0x45d05800
 801e7d4:	457a0000 	.word	0x457a0000
 801e7d8:	3d0f5c29 	.word	0x3d0f5c29

0801e7dc <ISM330DHCXTaskSensorSetODR>:

static sys_error_code_t ISM330DHCXTaskSensorSetODR(ISM330DHCXTask *_this, SMMessage report)
{
 801e7dc:	b082      	sub	sp, #8
 801e7de:	b580      	push	{r7, lr}
 801e7e0:	b086      	sub	sp, #24
 801e7e2:	af00      	add	r7, sp, #0
 801e7e4:	6078      	str	r0, [r7, #4]
 801e7e6:	f107 0120 	add.w	r1, r7, #32
 801e7ea:	e881 000c 	stmia.w	r1, {r2, r3}
  assert_param(_this != NULL);
 801e7ee:	687b      	ldr	r3, [r7, #4]
 801e7f0:	2b00      	cmp	r3, #0
 801e7f2:	d104      	bne.n	801e7fe <ISM330DHCXTaskSensorSetODR+0x22>
 801e7f4:	f44f 6112 	mov.w	r1, #2336	; 0x920
 801e7f8:	48b7      	ldr	r0, [pc, #732]	; (801ead8 <ISM330DHCXTaskSensorSetODR+0x2fc>)
 801e7fa:	f7f6 fd56 	bl	80152aa <assert_failed>
  sys_error_code_t res = SYS_NO_ERROR_CODE;
 801e7fe:	2300      	movs	r3, #0
 801e800:	82fb      	strh	r3, [r7, #22]

  stmdev_ctx_t *p_sensor_drv = (stmdev_ctx_t*) &_this->p_sensor_bus_if->m_xConnector;
 801e802:	687b      	ldr	r3, [r7, #4]
 801e804:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 801e808:	60fb      	str	r3, [r7, #12]
  float ODR = (float) report.sensorMessage.nParam;
 801e80a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e80c:	ee07 3a90 	vmov	s15, r3
 801e810:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e814:	edc7 7a04 	vstr	s15, [r7, #16]
  uint8_t id = report.sensorMessage.nSensorId;
 801e818:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 801e81c:	72fb      	strb	r3, [r7, #11]

  /* Changing ODR must disable MLC sensor: MLC can work properly only when setup from UCF */
  _this->mlc_enable = FALSE;
 801e81e:	687b      	ldr	r3, [r7, #4]
 801e820:	2200      	movs	r2, #0
 801e822:	f883 2157 	strb.w	r2, [r3, #343]	; 0x157
  _this->mlc_fakesensor_status.IsActive = FALSE;
 801e826:	687b      	ldr	r3, [r7, #4]
 801e828:	2200      	movs	r2, #0
 801e82a:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c

  if(id == _this->acc_id)
 801e82e:	687b      	ldr	r3, [r7, #4]
 801e830:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 801e834:	7afa      	ldrb	r2, [r7, #11]
 801e836:	429a      	cmp	r2, r3
 801e838:	f040 80a4 	bne.w	801e984 <ISM330DHCXTaskSensorSetODR+0x1a8>
  {
    if(ODR < 13.0f)
 801e83c:	edd7 7a04 	vldr	s15, [r7, #16]
 801e840:	eeb2 7a0a 	vmov.f32	s14, #42	; 0x41500000  13.0
 801e844:	eef4 7ac7 	vcmpe.f32	s15, s14
 801e848:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e84c:	d506      	bpl.n	801e85c <ISM330DHCXTaskSensorSetODR+0x80>
    {
      ism330dhcx_xl_data_rate_set(p_sensor_drv, ISM330DHCX_XL_ODR_12Hz5);
 801e84e:	2101      	movs	r1, #1
 801e850:	68f8      	ldr	r0, [r7, #12]
 801e852:	f7e2 ff99 	bl	8001788 <ism330dhcx_xl_data_rate_set>
      ODR = 12.5f;
 801e856:	4ba1      	ldr	r3, [pc, #644]	; (801eadc <ISM330DHCXTaskSensorSetODR+0x300>)
 801e858:	613b      	str	r3, [r7, #16]
 801e85a:	e085      	b.n	801e968 <ISM330DHCXTaskSensorSetODR+0x18c>
    }
    else if(ODR < 27.0f)
 801e85c:	edd7 7a04 	vldr	s15, [r7, #16]
 801e860:	eeb3 7a0b 	vmov.f32	s14, #59	; 0x41d80000  27.0
 801e864:	eef4 7ac7 	vcmpe.f32	s15, s14
 801e868:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e86c:	d506      	bpl.n	801e87c <ISM330DHCXTaskSensorSetODR+0xa0>
    {
      ism330dhcx_xl_data_rate_set(p_sensor_drv, ISM330DHCX_XL_ODR_26Hz);
 801e86e:	2102      	movs	r1, #2
 801e870:	68f8      	ldr	r0, [r7, #12]
 801e872:	f7e2 ff89 	bl	8001788 <ism330dhcx_xl_data_rate_set>
      ODR = 26.0f;
 801e876:	4b9a      	ldr	r3, [pc, #616]	; (801eae0 <ISM330DHCXTaskSensorSetODR+0x304>)
 801e878:	613b      	str	r3, [r7, #16]
 801e87a:	e075      	b.n	801e968 <ISM330DHCXTaskSensorSetODR+0x18c>
    }
    else if(ODR < 53.0f)
 801e87c:	edd7 7a04 	vldr	s15, [r7, #16]
 801e880:	ed9f 7a98 	vldr	s14, [pc, #608]	; 801eae4 <ISM330DHCXTaskSensorSetODR+0x308>
 801e884:	eef4 7ac7 	vcmpe.f32	s15, s14
 801e888:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e88c:	d506      	bpl.n	801e89c <ISM330DHCXTaskSensorSetODR+0xc0>
    {
      ism330dhcx_xl_data_rate_set(p_sensor_drv, ISM330DHCX_XL_ODR_52Hz);
 801e88e:	2103      	movs	r1, #3
 801e890:	68f8      	ldr	r0, [r7, #12]
 801e892:	f7e2 ff79 	bl	8001788 <ism330dhcx_xl_data_rate_set>
      ODR = 52.0f;
 801e896:	4b94      	ldr	r3, [pc, #592]	; (801eae8 <ISM330DHCXTaskSensorSetODR+0x30c>)
 801e898:	613b      	str	r3, [r7, #16]
 801e89a:	e065      	b.n	801e968 <ISM330DHCXTaskSensorSetODR+0x18c>
    }
    else if(ODR < 105.0f)
 801e89c:	edd7 7a04 	vldr	s15, [r7, #16]
 801e8a0:	ed9f 7a92 	vldr	s14, [pc, #584]	; 801eaec <ISM330DHCXTaskSensorSetODR+0x310>
 801e8a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 801e8a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e8ac:	d506      	bpl.n	801e8bc <ISM330DHCXTaskSensorSetODR+0xe0>
    {
      ism330dhcx_xl_data_rate_set(p_sensor_drv, ISM330DHCX_XL_ODR_104Hz);
 801e8ae:	2104      	movs	r1, #4
 801e8b0:	68f8      	ldr	r0, [r7, #12]
 801e8b2:	f7e2 ff69 	bl	8001788 <ism330dhcx_xl_data_rate_set>
      ODR = 104.0f;
 801e8b6:	4b8e      	ldr	r3, [pc, #568]	; (801eaf0 <ISM330DHCXTaskSensorSetODR+0x314>)
 801e8b8:	613b      	str	r3, [r7, #16]
 801e8ba:	e055      	b.n	801e968 <ISM330DHCXTaskSensorSetODR+0x18c>
    }
    else if(ODR < 209.0f)
 801e8bc:	edd7 7a04 	vldr	s15, [r7, #16]
 801e8c0:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 801eaf4 <ISM330DHCXTaskSensorSetODR+0x318>
 801e8c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 801e8c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e8cc:	d506      	bpl.n	801e8dc <ISM330DHCXTaskSensorSetODR+0x100>
    {
      ism330dhcx_xl_data_rate_set(p_sensor_drv, ISM330DHCX_XL_ODR_208Hz);
 801e8ce:	2105      	movs	r1, #5
 801e8d0:	68f8      	ldr	r0, [r7, #12]
 801e8d2:	f7e2 ff59 	bl	8001788 <ism330dhcx_xl_data_rate_set>
      ODR = 208.0f;
 801e8d6:	4b88      	ldr	r3, [pc, #544]	; (801eaf8 <ISM330DHCXTaskSensorSetODR+0x31c>)
 801e8d8:	613b      	str	r3, [r7, #16]
 801e8da:	e045      	b.n	801e968 <ISM330DHCXTaskSensorSetODR+0x18c>
    }
    else if(ODR < 417.0f)
 801e8dc:	edd7 7a04 	vldr	s15, [r7, #16]
 801e8e0:	ed9f 7a86 	vldr	s14, [pc, #536]	; 801eafc <ISM330DHCXTaskSensorSetODR+0x320>
 801e8e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 801e8e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e8ec:	d506      	bpl.n	801e8fc <ISM330DHCXTaskSensorSetODR+0x120>
    {
      ism330dhcx_xl_data_rate_set(p_sensor_drv, ISM330DHCX_XL_ODR_416Hz);
 801e8ee:	2106      	movs	r1, #6
 801e8f0:	68f8      	ldr	r0, [r7, #12]
 801e8f2:	f7e2 ff49 	bl	8001788 <ism330dhcx_xl_data_rate_set>
      ODR = 416.0f;
 801e8f6:	4b82      	ldr	r3, [pc, #520]	; (801eb00 <ISM330DHCXTaskSensorSetODR+0x324>)
 801e8f8:	613b      	str	r3, [r7, #16]
 801e8fa:	e035      	b.n	801e968 <ISM330DHCXTaskSensorSetODR+0x18c>
    }
    else if(ODR < 834.0f)
 801e8fc:	edd7 7a04 	vldr	s15, [r7, #16]
 801e900:	ed9f 7a80 	vldr	s14, [pc, #512]	; 801eb04 <ISM330DHCXTaskSensorSetODR+0x328>
 801e904:	eef4 7ac7 	vcmpe.f32	s15, s14
 801e908:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e90c:	d506      	bpl.n	801e91c <ISM330DHCXTaskSensorSetODR+0x140>
    {
      ism330dhcx_xl_data_rate_set(p_sensor_drv, ISM330DHCX_XL_ODR_833Hz);
 801e90e:	2107      	movs	r1, #7
 801e910:	68f8      	ldr	r0, [r7, #12]
 801e912:	f7e2 ff39 	bl	8001788 <ism330dhcx_xl_data_rate_set>
      ODR = 833.0f;
 801e916:	4b7c      	ldr	r3, [pc, #496]	; (801eb08 <ISM330DHCXTaskSensorSetODR+0x32c>)
 801e918:	613b      	str	r3, [r7, #16]
 801e91a:	e025      	b.n	801e968 <ISM330DHCXTaskSensorSetODR+0x18c>
    }
    else if(ODR < 1667.0f)
 801e91c:	edd7 7a04 	vldr	s15, [r7, #16]
 801e920:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 801eb0c <ISM330DHCXTaskSensorSetODR+0x330>
 801e924:	eef4 7ac7 	vcmpe.f32	s15, s14
 801e928:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e92c:	d506      	bpl.n	801e93c <ISM330DHCXTaskSensorSetODR+0x160>
    {
      ism330dhcx_xl_data_rate_set(p_sensor_drv, ISM330DHCX_XL_ODR_1666Hz);
 801e92e:	2108      	movs	r1, #8
 801e930:	68f8      	ldr	r0, [r7, #12]
 801e932:	f7e2 ff29 	bl	8001788 <ism330dhcx_xl_data_rate_set>
      ODR = 1666.0f;
 801e936:	4b76      	ldr	r3, [pc, #472]	; (801eb10 <ISM330DHCXTaskSensorSetODR+0x334>)
 801e938:	613b      	str	r3, [r7, #16]
 801e93a:	e015      	b.n	801e968 <ISM330DHCXTaskSensorSetODR+0x18c>
    }
    else if(ODR < 3333.0f)
 801e93c:	edd7 7a04 	vldr	s15, [r7, #16]
 801e940:	ed9f 7a74 	vldr	s14, [pc, #464]	; 801eb14 <ISM330DHCXTaskSensorSetODR+0x338>
 801e944:	eef4 7ac7 	vcmpe.f32	s15, s14
 801e948:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e94c:	d506      	bpl.n	801e95c <ISM330DHCXTaskSensorSetODR+0x180>
    {
      ism330dhcx_xl_data_rate_set(p_sensor_drv, ISM330DHCX_XL_ODR_3332Hz);
 801e94e:	2109      	movs	r1, #9
 801e950:	68f8      	ldr	r0, [r7, #12]
 801e952:	f7e2 ff19 	bl	8001788 <ism330dhcx_xl_data_rate_set>
      ODR = 3332.0f;
 801e956:	4b70      	ldr	r3, [pc, #448]	; (801eb18 <ISM330DHCXTaskSensorSetODR+0x33c>)
 801e958:	613b      	str	r3, [r7, #16]
 801e95a:	e005      	b.n	801e968 <ISM330DHCXTaskSensorSetODR+0x18c>
    }
    else
    {
      ism330dhcx_xl_data_rate_set(p_sensor_drv, ISM330DHCX_XL_ODR_6667Hz);
 801e95c:	210a      	movs	r1, #10
 801e95e:	68f8      	ldr	r0, [r7, #12]
 801e960:	f7e2 ff12 	bl	8001788 <ism330dhcx_xl_data_rate_set>
      ODR = 6667;
 801e964:	4b6d      	ldr	r3, [pc, #436]	; (801eb1c <ISM330DHCXTaskSensorSetODR+0x340>)
 801e966:	613b      	str	r3, [r7, #16]
    }

    if(!SYS_IS_ERROR_CODE(res))
 801e968:	8afb      	ldrh	r3, [r7, #22]
 801e96a:	2b00      	cmp	r3, #0
 801e96c:	f040 80da 	bne.w	801eb24 <ISM330DHCXTaskSensorSetODR+0x348>
    {
      _this->acc_sensor_status.ODR = ODR;
 801e970:	687b      	ldr	r3, [r7, #4]
 801e972:	693a      	ldr	r2, [r7, #16]
 801e974:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
      _this->acc_sensor_status.MeasuredODR = 0.0f;
 801e978:	687b      	ldr	r3, [r7, #4]
 801e97a:	f04f 0200 	mov.w	r2, #0
 801e97e:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
 801e982:	e0cf      	b.n	801eb24 <ISM330DHCXTaskSensorSetODR+0x348>
    }
  }
  else if(id == _this->gyro_id)
 801e984:	687b      	ldr	r3, [r7, #4]
 801e986:	f893 3155 	ldrb.w	r3, [r3, #341]	; 0x155
 801e98a:	7afa      	ldrb	r2, [r7, #11]
 801e98c:	429a      	cmp	r2, r3
 801e98e:	f040 80c7 	bne.w	801eb20 <ISM330DHCXTaskSensorSetODR+0x344>
  {
    if(ODR < 13.0f)
 801e992:	edd7 7a04 	vldr	s15, [r7, #16]
 801e996:	eeb2 7a0a 	vmov.f32	s14, #42	; 0x41500000  13.0
 801e99a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801e99e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e9a2:	d506      	bpl.n	801e9b2 <ISM330DHCXTaskSensorSetODR+0x1d6>
    {
      ism330dhcx_gy_data_rate_set(p_sensor_drv, ISM330DHCX_GY_ODR_12Hz5);
 801e9a4:	2101      	movs	r1, #1
 801e9a6:	68f8      	ldr	r0, [r7, #12]
 801e9a8:	f7e3 f93e 	bl	8001c28 <ism330dhcx_gy_data_rate_set>
      ODR = 12.5f;
 801e9ac:	4b4b      	ldr	r3, [pc, #300]	; (801eadc <ISM330DHCXTaskSensorSetODR+0x300>)
 801e9ae:	613b      	str	r3, [r7, #16]
 801e9b0:	e085      	b.n	801eabe <ISM330DHCXTaskSensorSetODR+0x2e2>
    }
    else if(ODR < 27.0f)
 801e9b2:	edd7 7a04 	vldr	s15, [r7, #16]
 801e9b6:	eeb3 7a0b 	vmov.f32	s14, #59	; 0x41d80000  27.0
 801e9ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 801e9be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e9c2:	d506      	bpl.n	801e9d2 <ISM330DHCXTaskSensorSetODR+0x1f6>
    {
      ism330dhcx_gy_data_rate_set(p_sensor_drv, ISM330DHCX_GY_ODR_26Hz);
 801e9c4:	2102      	movs	r1, #2
 801e9c6:	68f8      	ldr	r0, [r7, #12]
 801e9c8:	f7e3 f92e 	bl	8001c28 <ism330dhcx_gy_data_rate_set>
      ODR = 26.0f;
 801e9cc:	4b44      	ldr	r3, [pc, #272]	; (801eae0 <ISM330DHCXTaskSensorSetODR+0x304>)
 801e9ce:	613b      	str	r3, [r7, #16]
 801e9d0:	e075      	b.n	801eabe <ISM330DHCXTaskSensorSetODR+0x2e2>
    }
    else if(ODR < 53.0f)
 801e9d2:	edd7 7a04 	vldr	s15, [r7, #16]
 801e9d6:	ed9f 7a43 	vldr	s14, [pc, #268]	; 801eae4 <ISM330DHCXTaskSensorSetODR+0x308>
 801e9da:	eef4 7ac7 	vcmpe.f32	s15, s14
 801e9de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e9e2:	d506      	bpl.n	801e9f2 <ISM330DHCXTaskSensorSetODR+0x216>
    {
      ism330dhcx_gy_data_rate_set(p_sensor_drv, ISM330DHCX_GY_ODR_52Hz);
 801e9e4:	2103      	movs	r1, #3
 801e9e6:	68f8      	ldr	r0, [r7, #12]
 801e9e8:	f7e3 f91e 	bl	8001c28 <ism330dhcx_gy_data_rate_set>
      ODR = 52.0f;
 801e9ec:	4b3e      	ldr	r3, [pc, #248]	; (801eae8 <ISM330DHCXTaskSensorSetODR+0x30c>)
 801e9ee:	613b      	str	r3, [r7, #16]
 801e9f0:	e065      	b.n	801eabe <ISM330DHCXTaskSensorSetODR+0x2e2>
    }
    else if(ODR < 105.0f)
 801e9f2:	edd7 7a04 	vldr	s15, [r7, #16]
 801e9f6:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 801eaec <ISM330DHCXTaskSensorSetODR+0x310>
 801e9fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 801e9fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ea02:	d506      	bpl.n	801ea12 <ISM330DHCXTaskSensorSetODR+0x236>
    {
      ism330dhcx_gy_data_rate_set(p_sensor_drv, ISM330DHCX_GY_ODR_104Hz);
 801ea04:	2104      	movs	r1, #4
 801ea06:	68f8      	ldr	r0, [r7, #12]
 801ea08:	f7e3 f90e 	bl	8001c28 <ism330dhcx_gy_data_rate_set>
      ODR = 104.0f;
 801ea0c:	4b38      	ldr	r3, [pc, #224]	; (801eaf0 <ISM330DHCXTaskSensorSetODR+0x314>)
 801ea0e:	613b      	str	r3, [r7, #16]
 801ea10:	e055      	b.n	801eabe <ISM330DHCXTaskSensorSetODR+0x2e2>
    }
    else if(ODR < 209.0f)
 801ea12:	edd7 7a04 	vldr	s15, [r7, #16]
 801ea16:	ed9f 7a37 	vldr	s14, [pc, #220]	; 801eaf4 <ISM330DHCXTaskSensorSetODR+0x318>
 801ea1a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801ea1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ea22:	d506      	bpl.n	801ea32 <ISM330DHCXTaskSensorSetODR+0x256>
    {
      ism330dhcx_gy_data_rate_set(p_sensor_drv, ISM330DHCX_GY_ODR_208Hz);
 801ea24:	2105      	movs	r1, #5
 801ea26:	68f8      	ldr	r0, [r7, #12]
 801ea28:	f7e3 f8fe 	bl	8001c28 <ism330dhcx_gy_data_rate_set>
      ODR = 208.0f;
 801ea2c:	4b32      	ldr	r3, [pc, #200]	; (801eaf8 <ISM330DHCXTaskSensorSetODR+0x31c>)
 801ea2e:	613b      	str	r3, [r7, #16]
 801ea30:	e045      	b.n	801eabe <ISM330DHCXTaskSensorSetODR+0x2e2>
    }
    else if(ODR < 417.0f)
 801ea32:	edd7 7a04 	vldr	s15, [r7, #16]
 801ea36:	ed9f 7a31 	vldr	s14, [pc, #196]	; 801eafc <ISM330DHCXTaskSensorSetODR+0x320>
 801ea3a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801ea3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ea42:	d506      	bpl.n	801ea52 <ISM330DHCXTaskSensorSetODR+0x276>
    {
      ism330dhcx_gy_data_rate_set(p_sensor_drv, ISM330DHCX_GY_ODR_416Hz);
 801ea44:	2106      	movs	r1, #6
 801ea46:	68f8      	ldr	r0, [r7, #12]
 801ea48:	f7e3 f8ee 	bl	8001c28 <ism330dhcx_gy_data_rate_set>
      ODR = 416.0f;
 801ea4c:	4b2c      	ldr	r3, [pc, #176]	; (801eb00 <ISM330DHCXTaskSensorSetODR+0x324>)
 801ea4e:	613b      	str	r3, [r7, #16]
 801ea50:	e035      	b.n	801eabe <ISM330DHCXTaskSensorSetODR+0x2e2>
    }
    else if(ODR < 834.0f)
 801ea52:	edd7 7a04 	vldr	s15, [r7, #16]
 801ea56:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 801eb04 <ISM330DHCXTaskSensorSetODR+0x328>
 801ea5a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801ea5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ea62:	d506      	bpl.n	801ea72 <ISM330DHCXTaskSensorSetODR+0x296>
    {
      ism330dhcx_gy_data_rate_set(p_sensor_drv, ISM330DHCX_GY_ODR_833Hz);
 801ea64:	2107      	movs	r1, #7
 801ea66:	68f8      	ldr	r0, [r7, #12]
 801ea68:	f7e3 f8de 	bl	8001c28 <ism330dhcx_gy_data_rate_set>
      ODR = 833.0f;
 801ea6c:	4b26      	ldr	r3, [pc, #152]	; (801eb08 <ISM330DHCXTaskSensorSetODR+0x32c>)
 801ea6e:	613b      	str	r3, [r7, #16]
 801ea70:	e025      	b.n	801eabe <ISM330DHCXTaskSensorSetODR+0x2e2>
    }
    else if(ODR < 1667.0f)
 801ea72:	edd7 7a04 	vldr	s15, [r7, #16]
 801ea76:	ed9f 7a25 	vldr	s14, [pc, #148]	; 801eb0c <ISM330DHCXTaskSensorSetODR+0x330>
 801ea7a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801ea7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ea82:	d506      	bpl.n	801ea92 <ISM330DHCXTaskSensorSetODR+0x2b6>
    {
      ism330dhcx_gy_data_rate_set(p_sensor_drv, ISM330DHCX_GY_ODR_1666Hz);
 801ea84:	2108      	movs	r1, #8
 801ea86:	68f8      	ldr	r0, [r7, #12]
 801ea88:	f7e3 f8ce 	bl	8001c28 <ism330dhcx_gy_data_rate_set>
      ODR = 1666.0f;
 801ea8c:	4b20      	ldr	r3, [pc, #128]	; (801eb10 <ISM330DHCXTaskSensorSetODR+0x334>)
 801ea8e:	613b      	str	r3, [r7, #16]
 801ea90:	e015      	b.n	801eabe <ISM330DHCXTaskSensorSetODR+0x2e2>
    }
    else if(ODR < 3333.0f)
 801ea92:	edd7 7a04 	vldr	s15, [r7, #16]
 801ea96:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 801eb14 <ISM330DHCXTaskSensorSetODR+0x338>
 801ea9a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801ea9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801eaa2:	d506      	bpl.n	801eab2 <ISM330DHCXTaskSensorSetODR+0x2d6>
    {
      ism330dhcx_gy_data_rate_set(p_sensor_drv, ISM330DHCX_GY_ODR_3332Hz);
 801eaa4:	2109      	movs	r1, #9
 801eaa6:	68f8      	ldr	r0, [r7, #12]
 801eaa8:	f7e3 f8be 	bl	8001c28 <ism330dhcx_gy_data_rate_set>
      ODR = 3332.0f;
 801eaac:	4b1a      	ldr	r3, [pc, #104]	; (801eb18 <ISM330DHCXTaskSensorSetODR+0x33c>)
 801eaae:	613b      	str	r3, [r7, #16]
 801eab0:	e005      	b.n	801eabe <ISM330DHCXTaskSensorSetODR+0x2e2>
    }
    else
    {
      ism330dhcx_gy_data_rate_set(p_sensor_drv, ISM330DHCX_GY_ODR_6667Hz);
 801eab2:	210a      	movs	r1, #10
 801eab4:	68f8      	ldr	r0, [r7, #12]
 801eab6:	f7e3 f8b7 	bl	8001c28 <ism330dhcx_gy_data_rate_set>
      ODR = 6667.0f;
 801eaba:	4b18      	ldr	r3, [pc, #96]	; (801eb1c <ISM330DHCXTaskSensorSetODR+0x340>)
 801eabc:	613b      	str	r3, [r7, #16]
    }

    if(!SYS_IS_ERROR_CODE(res))
 801eabe:	8afb      	ldrh	r3, [r7, #22]
 801eac0:	2b00      	cmp	r3, #0
 801eac2:	d12f      	bne.n	801eb24 <ISM330DHCXTaskSensorSetODR+0x348>
    {
      _this->gyro_sensor_status.ODR = ODR;
 801eac4:	687b      	ldr	r3, [r7, #4]
 801eac6:	693a      	ldr	r2, [r7, #16]
 801eac8:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
      _this->gyro_sensor_status.MeasuredODR = 0.0f;
 801eacc:	687b      	ldr	r3, [r7, #4]
 801eace:	f04f 0200 	mov.w	r2, #0
 801ead2:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
 801ead6:	e025      	b.n	801eb24 <ISM330DHCXTaskSensorSetODR+0x348>
 801ead8:	080274b8 	.word	0x080274b8
 801eadc:	41480000 	.word	0x41480000
 801eae0:	41d00000 	.word	0x41d00000
 801eae4:	42540000 	.word	0x42540000
 801eae8:	42500000 	.word	0x42500000
 801eaec:	42d20000 	.word	0x42d20000
 801eaf0:	42d00000 	.word	0x42d00000
 801eaf4:	43510000 	.word	0x43510000
 801eaf8:	43500000 	.word	0x43500000
 801eafc:	43d08000 	.word	0x43d08000
 801eb00:	43d00000 	.word	0x43d00000
 801eb04:	44508000 	.word	0x44508000
 801eb08:	44504000 	.word	0x44504000
 801eb0c:	44d06000 	.word	0x44d06000
 801eb10:	44d04000 	.word	0x44d04000
 801eb14:	45505000 	.word	0x45505000
 801eb18:	45504000 	.word	0x45504000
 801eb1c:	45d05800 	.word	0x45d05800
    }
  }
  else
  {
    res = SYS_INVALID_PARAMETER_ERROR_CODE;
 801eb20:	2304      	movs	r3, #4
 801eb22:	82fb      	strh	r3, [r7, #22]
  }

  return res;
 801eb24:	8afb      	ldrh	r3, [r7, #22]
}
 801eb26:	4618      	mov	r0, r3
 801eb28:	3718      	adds	r7, #24
 801eb2a:	46bd      	mov	sp, r7
 801eb2c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801eb30:	b002      	add	sp, #8
 801eb32:	4770      	bx	lr

0801eb34 <ISM330DHCXTaskSensorSetFS>:

static sys_error_code_t ISM330DHCXTaskSensorSetFS(ISM330DHCXTask *_this, SMMessage report)
{
 801eb34:	b082      	sub	sp, #8
 801eb36:	b580      	push	{r7, lr}
 801eb38:	b086      	sub	sp, #24
 801eb3a:	af00      	add	r7, sp, #0
 801eb3c:	6078      	str	r0, [r7, #4]
 801eb3e:	f107 0120 	add.w	r1, r7, #32
 801eb42:	e881 000c 	stmia.w	r1, {r2, r3}
  assert_param(_this != NULL);
 801eb46:	687b      	ldr	r3, [r7, #4]
 801eb48:	2b00      	cmp	r3, #0
 801eb4a:	d104      	bne.n	801eb56 <ISM330DHCXTaskSensorSetFS+0x22>
 801eb4c:	f640 11ab 	movw	r1, #2475	; 0x9ab
 801eb50:	4872      	ldr	r0, [pc, #456]	; (801ed1c <ISM330DHCXTaskSensorSetFS+0x1e8>)
 801eb52:	f7f6 fbaa 	bl	80152aa <assert_failed>
  sys_error_code_t res = SYS_NO_ERROR_CODE;
 801eb56:	2300      	movs	r3, #0
 801eb58:	82fb      	strh	r3, [r7, #22]

  stmdev_ctx_t *p_sensor_drv = (stmdev_ctx_t*) &_this->p_sensor_bus_if->m_xConnector;
 801eb5a:	687b      	ldr	r3, [r7, #4]
 801eb5c:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 801eb60:	60fb      	str	r3, [r7, #12]
  float FS = (float) report.sensorMessage.nParam;
 801eb62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801eb64:	ee07 3a90 	vmov	s15, r3
 801eb68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801eb6c:	edc7 7a04 	vstr	s15, [r7, #16]
  uint8_t id = report.sensorMessage.nSensorId;
 801eb70:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 801eb74:	72fb      	strb	r3, [r7, #11]

  /* Changing FS must disable MLC sensor: MLC can work properly only when setup from UCF */
  _this->mlc_enable = FALSE;
 801eb76:	687b      	ldr	r3, [r7, #4]
 801eb78:	2200      	movs	r2, #0
 801eb7a:	f883 2157 	strb.w	r2, [r3, #343]	; 0x157
  _this->mlc_fakesensor_status.IsActive = FALSE;
 801eb7e:	687b      	ldr	r3, [r7, #4]
 801eb80:	2200      	movs	r2, #0
 801eb82:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c

  if(id == _this->acc_id)
 801eb86:	687b      	ldr	r3, [r7, #4]
 801eb88:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 801eb8c:	7afa      	ldrb	r2, [r7, #11]
 801eb8e:	429a      	cmp	r2, r3
 801eb90:	d14b      	bne.n	801ec2a <ISM330DHCXTaskSensorSetFS+0xf6>
  {
    if(FS < 3.0f)
 801eb92:	edd7 7a04 	vldr	s15, [r7, #16]
 801eb96:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 801eb9a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801eb9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801eba2:	d507      	bpl.n	801ebb4 <ISM330DHCXTaskSensorSetFS+0x80>
    {
      ism330dhcx_xl_full_scale_set(p_sensor_drv, ISM330DHCX_2g);
 801eba4:	2100      	movs	r1, #0
 801eba6:	68f8      	ldr	r0, [r7, #12]
 801eba8:	f7e2 fd90 	bl	80016cc <ism330dhcx_xl_full_scale_set>
      FS = 2.0f;
 801ebac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801ebb0:	613b      	str	r3, [r7, #16]
 801ebb2:	e028      	b.n	801ec06 <ISM330DHCXTaskSensorSetFS+0xd2>
    }
    else if(FS < 5.0f)
 801ebb4:	edd7 7a04 	vldr	s15, [r7, #16]
 801ebb8:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 801ebbc:	eef4 7ac7 	vcmpe.f32	s15, s14
 801ebc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ebc4:	d507      	bpl.n	801ebd6 <ISM330DHCXTaskSensorSetFS+0xa2>
    {
      ism330dhcx_xl_full_scale_set(p_sensor_drv, ISM330DHCX_4g);
 801ebc6:	2102      	movs	r1, #2
 801ebc8:	68f8      	ldr	r0, [r7, #12]
 801ebca:	f7e2 fd7f 	bl	80016cc <ism330dhcx_xl_full_scale_set>
      FS = 4.0f;
 801ebce:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
 801ebd2:	613b      	str	r3, [r7, #16]
 801ebd4:	e017      	b.n	801ec06 <ISM330DHCXTaskSensorSetFS+0xd2>
    }
    else if(FS < 9.0f)
 801ebd6:	edd7 7a04 	vldr	s15, [r7, #16]
 801ebda:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 801ebde:	eef4 7ac7 	vcmpe.f32	s15, s14
 801ebe2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ebe6:	d507      	bpl.n	801ebf8 <ISM330DHCXTaskSensorSetFS+0xc4>
    {
      ism330dhcx_xl_full_scale_set(p_sensor_drv, ISM330DHCX_8g);
 801ebe8:	2103      	movs	r1, #3
 801ebea:	68f8      	ldr	r0, [r7, #12]
 801ebec:	f7e2 fd6e 	bl	80016cc <ism330dhcx_xl_full_scale_set>
      FS = 8.0f;
 801ebf0:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 801ebf4:	613b      	str	r3, [r7, #16]
 801ebf6:	e006      	b.n	801ec06 <ISM330DHCXTaskSensorSetFS+0xd2>
    }
    else
    {
      ism330dhcx_xl_full_scale_set(p_sensor_drv, ISM330DHCX_16g);
 801ebf8:	2101      	movs	r1, #1
 801ebfa:	68f8      	ldr	r0, [r7, #12]
 801ebfc:	f7e2 fd66 	bl	80016cc <ism330dhcx_xl_full_scale_set>
      FS = 16.0f;
 801ec00:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 801ec04:	613b      	str	r3, [r7, #16]
    }

    if(!SYS_IS_ERROR_CODE(res))
 801ec06:	8afb      	ldrh	r3, [r7, #22]
 801ec08:	2b00      	cmp	r3, #0
 801ec0a:	d17e      	bne.n	801ed0a <ISM330DHCXTaskSensorSetFS+0x1d6>
    {
      _this->acc_sensor_status.FS = FS;
 801ec0c:	687b      	ldr	r3, [r7, #4]
 801ec0e:	693a      	ldr	r2, [r7, #16]
 801ec10:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
      _this->acc_sensor_status.Sensitivity = 0.0000305f * _this->acc_sensor_status.FS;
 801ec14:	687b      	ldr	r3, [r7, #4]
 801ec16:	edd3 7a3b 	vldr	s15, [r3, #236]	; 0xec
 801ec1a:	ed9f 7a41 	vldr	s14, [pc, #260]	; 801ed20 <ISM330DHCXTaskSensorSetFS+0x1ec>
 801ec1e:	ee67 7a87 	vmul.f32	s15, s15, s14
 801ec22:	687b      	ldr	r3, [r7, #4]
 801ec24:	edc3 7a3c 	vstr	s15, [r3, #240]	; 0xf0
 801ec28:	e06f      	b.n	801ed0a <ISM330DHCXTaskSensorSetFS+0x1d6>
    }
  }
  else if(id == _this->gyro_id)
 801ec2a:	687b      	ldr	r3, [r7, #4]
 801ec2c:	f893 3155 	ldrb.w	r3, [r3, #341]	; 0x155
 801ec30:	7afa      	ldrb	r2, [r7, #11]
 801ec32:	429a      	cmp	r2, r3
 801ec34:	d167      	bne.n	801ed06 <ISM330DHCXTaskSensorSetFS+0x1d2>
  {
    if(FS < 126.0f)
 801ec36:	edd7 7a04 	vldr	s15, [r7, #16]
 801ec3a:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 801ed24 <ISM330DHCXTaskSensorSetFS+0x1f0>
 801ec3e:	eef4 7ac7 	vcmpe.f32	s15, s14
 801ec42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ec46:	d506      	bpl.n	801ec56 <ISM330DHCXTaskSensorSetFS+0x122>
    {
      ism330dhcx_gy_full_scale_set(p_sensor_drv, ISM330DHCX_125dps);
 801ec48:	2102      	movs	r1, #2
 801ec4a:	68f8      	ldr	r0, [r7, #12]
 801ec4c:	f7e2 ff74 	bl	8001b38 <ism330dhcx_gy_full_scale_set>
      FS = 125.0f;
 801ec50:	4b35      	ldr	r3, [pc, #212]	; (801ed28 <ISM330DHCXTaskSensorSetFS+0x1f4>)
 801ec52:	613b      	str	r3, [r7, #16]
 801ec54:	e045      	b.n	801ece2 <ISM330DHCXTaskSensorSetFS+0x1ae>
    }
    else if(FS < 251.0f)
 801ec56:	edd7 7a04 	vldr	s15, [r7, #16]
 801ec5a:	ed9f 7a34 	vldr	s14, [pc, #208]	; 801ed2c <ISM330DHCXTaskSensorSetFS+0x1f8>
 801ec5e:	eef4 7ac7 	vcmpe.f32	s15, s14
 801ec62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ec66:	d506      	bpl.n	801ec76 <ISM330DHCXTaskSensorSetFS+0x142>
    {
      ism330dhcx_gy_full_scale_set(p_sensor_drv, ISM330DHCX_250dps);
 801ec68:	2100      	movs	r1, #0
 801ec6a:	68f8      	ldr	r0, [r7, #12]
 801ec6c:	f7e2 ff64 	bl	8001b38 <ism330dhcx_gy_full_scale_set>
      FS = 250.0f;
 801ec70:	4b2f      	ldr	r3, [pc, #188]	; (801ed30 <ISM330DHCXTaskSensorSetFS+0x1fc>)
 801ec72:	613b      	str	r3, [r7, #16]
 801ec74:	e035      	b.n	801ece2 <ISM330DHCXTaskSensorSetFS+0x1ae>
    }
    else if(FS < 501.0f)
 801ec76:	edd7 7a04 	vldr	s15, [r7, #16]
 801ec7a:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 801ed34 <ISM330DHCXTaskSensorSetFS+0x200>
 801ec7e:	eef4 7ac7 	vcmpe.f32	s15, s14
 801ec82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ec86:	d506      	bpl.n	801ec96 <ISM330DHCXTaskSensorSetFS+0x162>
    {
      ism330dhcx_gy_full_scale_set(p_sensor_drv, ISM330DHCX_500dps);
 801ec88:	2104      	movs	r1, #4
 801ec8a:	68f8      	ldr	r0, [r7, #12]
 801ec8c:	f7e2 ff54 	bl	8001b38 <ism330dhcx_gy_full_scale_set>
      FS = 500.0f;
 801ec90:	4b29      	ldr	r3, [pc, #164]	; (801ed38 <ISM330DHCXTaskSensorSetFS+0x204>)
 801ec92:	613b      	str	r3, [r7, #16]
 801ec94:	e025      	b.n	801ece2 <ISM330DHCXTaskSensorSetFS+0x1ae>
    }
    else if(FS < 1001.0f)
 801ec96:	edd7 7a04 	vldr	s15, [r7, #16]
 801ec9a:	ed9f 7a28 	vldr	s14, [pc, #160]	; 801ed3c <ISM330DHCXTaskSensorSetFS+0x208>
 801ec9e:	eef4 7ac7 	vcmpe.f32	s15, s14
 801eca2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801eca6:	d506      	bpl.n	801ecb6 <ISM330DHCXTaskSensorSetFS+0x182>
    {
      ism330dhcx_gy_full_scale_set(p_sensor_drv, ISM330DHCX_1000dps);
 801eca8:	2108      	movs	r1, #8
 801ecaa:	68f8      	ldr	r0, [r7, #12]
 801ecac:	f7e2 ff44 	bl	8001b38 <ism330dhcx_gy_full_scale_set>
      FS = 1000.0f;
 801ecb0:	4b23      	ldr	r3, [pc, #140]	; (801ed40 <ISM330DHCXTaskSensorSetFS+0x20c>)
 801ecb2:	613b      	str	r3, [r7, #16]
 801ecb4:	e015      	b.n	801ece2 <ISM330DHCXTaskSensorSetFS+0x1ae>
    }
    else if(FS < 2001.0f)
 801ecb6:	edd7 7a04 	vldr	s15, [r7, #16]
 801ecba:	ed9f 7a22 	vldr	s14, [pc, #136]	; 801ed44 <ISM330DHCXTaskSensorSetFS+0x210>
 801ecbe:	eef4 7ac7 	vcmpe.f32	s15, s14
 801ecc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ecc6:	d506      	bpl.n	801ecd6 <ISM330DHCXTaskSensorSetFS+0x1a2>
    {
      ism330dhcx_gy_full_scale_set(p_sensor_drv, ISM330DHCX_2000dps);
 801ecc8:	210c      	movs	r1, #12
 801ecca:	68f8      	ldr	r0, [r7, #12]
 801eccc:	f7e2 ff34 	bl	8001b38 <ism330dhcx_gy_full_scale_set>
      FS = 2000.0f;
 801ecd0:	4b1d      	ldr	r3, [pc, #116]	; (801ed48 <ISM330DHCXTaskSensorSetFS+0x214>)
 801ecd2:	613b      	str	r3, [r7, #16]
 801ecd4:	e005      	b.n	801ece2 <ISM330DHCXTaskSensorSetFS+0x1ae>
    }
    else
    {
      ism330dhcx_gy_full_scale_set(p_sensor_drv, ISM330DHCX_4000dps);
 801ecd6:	2101      	movs	r1, #1
 801ecd8:	68f8      	ldr	r0, [r7, #12]
 801ecda:	f7e2 ff2d 	bl	8001b38 <ism330dhcx_gy_full_scale_set>
      FS = 4000.0f;
 801ecde:	4b1b      	ldr	r3, [pc, #108]	; (801ed4c <ISM330DHCXTaskSensorSetFS+0x218>)
 801ece0:	613b      	str	r3, [r7, #16]
    }

    if(!SYS_IS_ERROR_CODE(res))
 801ece2:	8afb      	ldrh	r3, [r7, #22]
 801ece4:	2b00      	cmp	r3, #0
 801ece6:	d110      	bne.n	801ed0a <ISM330DHCXTaskSensorSetFS+0x1d6>
    {
      _this->gyro_sensor_status.FS = FS;
 801ece8:	687b      	ldr	r3, [r7, #4]
 801ecea:	693a      	ldr	r2, [r7, #16]
 801ecec:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
      _this->gyro_sensor_status.Sensitivity = 0.035f * _this->gyro_sensor_status.FS;
 801ecf0:	687b      	ldr	r3, [r7, #4]
 801ecf2:	edd3 7a44 	vldr	s15, [r3, #272]	; 0x110
 801ecf6:	ed9f 7a16 	vldr	s14, [pc, #88]	; 801ed50 <ISM330DHCXTaskSensorSetFS+0x21c>
 801ecfa:	ee67 7a87 	vmul.f32	s15, s15, s14
 801ecfe:	687b      	ldr	r3, [r7, #4]
 801ed00:	edc3 7a45 	vstr	s15, [r3, #276]	; 0x114
 801ed04:	e001      	b.n	801ed0a <ISM330DHCXTaskSensorSetFS+0x1d6>
    }
  }
  else
  {
    res = SYS_INVALID_PARAMETER_ERROR_CODE;
 801ed06:	2304      	movs	r3, #4
 801ed08:	82fb      	strh	r3, [r7, #22]
  }

  return res;
 801ed0a:	8afb      	ldrh	r3, [r7, #22]
}
 801ed0c:	4618      	mov	r0, r3
 801ed0e:	3718      	adds	r7, #24
 801ed10:	46bd      	mov	sp, r7
 801ed12:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801ed16:	b002      	add	sp, #8
 801ed18:	4770      	bx	lr
 801ed1a:	bf00      	nop
 801ed1c:	080274b8 	.word	0x080274b8
 801ed20:	37ffda40 	.word	0x37ffda40
 801ed24:	42fc0000 	.word	0x42fc0000
 801ed28:	42fa0000 	.word	0x42fa0000
 801ed2c:	437b0000 	.word	0x437b0000
 801ed30:	437a0000 	.word	0x437a0000
 801ed34:	43fa8000 	.word	0x43fa8000
 801ed38:	43fa0000 	.word	0x43fa0000
 801ed3c:	447a4000 	.word	0x447a4000
 801ed40:	447a0000 	.word	0x447a0000
 801ed44:	44fa2000 	.word	0x44fa2000
 801ed48:	44fa0000 	.word	0x44fa0000
 801ed4c:	457a0000 	.word	0x457a0000
 801ed50:	3d0f5c29 	.word	0x3d0f5c29

0801ed54 <ISM330DHCXTaskSensorEnable>:

static sys_error_code_t ISM330DHCXTaskSensorEnable(ISM330DHCXTask *_this, SMMessage report)
{
 801ed54:	b082      	sub	sp, #8
 801ed56:	b580      	push	{r7, lr}
 801ed58:	b084      	sub	sp, #16
 801ed5a:	af00      	add	r7, sp, #0
 801ed5c:	6078      	str	r0, [r7, #4]
 801ed5e:	f107 0118 	add.w	r1, r7, #24
 801ed62:	e881 000c 	stmia.w	r1, {r2, r3}
  assert_param(_this != NULL);
 801ed66:	687b      	ldr	r3, [r7, #4]
 801ed68:	2b00      	cmp	r3, #0
 801ed6a:	d104      	bne.n	801ed76 <ISM330DHCXTaskSensorEnable+0x22>
 801ed6c:	f640 2104 	movw	r1, #2564	; 0xa04
 801ed70:	4813      	ldr	r0, [pc, #76]	; (801edc0 <ISM330DHCXTaskSensorEnable+0x6c>)
 801ed72:	f7f6 fa9a 	bl	80152aa <assert_failed>
  sys_error_code_t res = SYS_NO_ERROR_CODE;
 801ed76:	2300      	movs	r3, #0
 801ed78:	81fb      	strh	r3, [r7, #14]

  uint8_t id = report.sensorMessage.nSensorId;
 801ed7a:	7e7b      	ldrb	r3, [r7, #25]
 801ed7c:	737b      	strb	r3, [r7, #13]

  if(id == _this->acc_id)
 801ed7e:	687b      	ldr	r3, [r7, #4]
 801ed80:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 801ed84:	7b7a      	ldrb	r2, [r7, #13]
 801ed86:	429a      	cmp	r2, r3
 801ed88:	d104      	bne.n	801ed94 <ISM330DHCXTaskSensorEnable+0x40>
    _this->acc_sensor_status.IsActive = TRUE;
 801ed8a:	687b      	ldr	r3, [r7, #4]
 801ed8c:	2201      	movs	r2, #1
 801ed8e:	f883 20f4 	strb.w	r2, [r3, #244]	; 0xf4
 801ed92:	e00c      	b.n	801edae <ISM330DHCXTaskSensorEnable+0x5a>
  else if(id == _this->gyro_id)
 801ed94:	687b      	ldr	r3, [r7, #4]
 801ed96:	f893 3155 	ldrb.w	r3, [r3, #341]	; 0x155
 801ed9a:	7b7a      	ldrb	r2, [r7, #13]
 801ed9c:	429a      	cmp	r2, r3
 801ed9e:	d104      	bne.n	801edaa <ISM330DHCXTaskSensorEnable+0x56>
    _this->gyro_sensor_status.IsActive = TRUE;
 801eda0:	687b      	ldr	r3, [r7, #4]
 801eda2:	2201      	movs	r2, #1
 801eda4:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
 801eda8:	e001      	b.n	801edae <ISM330DHCXTaskSensorEnable+0x5a>
  else
    res = SYS_INVALID_PARAMETER_ERROR_CODE;
 801edaa:	2304      	movs	r3, #4
 801edac:	81fb      	strh	r3, [r7, #14]

  return res;
 801edae:	89fb      	ldrh	r3, [r7, #14]
}
 801edb0:	4618      	mov	r0, r3
 801edb2:	3710      	adds	r7, #16
 801edb4:	46bd      	mov	sp, r7
 801edb6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801edba:	b002      	add	sp, #8
 801edbc:	4770      	bx	lr
 801edbe:	bf00      	nop
 801edc0:	080274b8 	.word	0x080274b8

0801edc4 <ISM330DHCXTaskSensorDisable>:

static sys_error_code_t ISM330DHCXTaskSensorDisable(ISM330DHCXTask *_this, SMMessage report)
{
 801edc4:	b082      	sub	sp, #8
 801edc6:	b580      	push	{r7, lr}
 801edc8:	b084      	sub	sp, #16
 801edca:	af00      	add	r7, sp, #0
 801edcc:	6078      	str	r0, [r7, #4]
 801edce:	f107 0118 	add.w	r1, r7, #24
 801edd2:	e881 000c 	stmia.w	r1, {r2, r3}
  assert_param(_this != NULL);
 801edd6:	687b      	ldr	r3, [r7, #4]
 801edd8:	2b00      	cmp	r3, #0
 801edda:	d104      	bne.n	801ede6 <ISM330DHCXTaskSensorDisable+0x22>
 801eddc:	f640 2115 	movw	r1, #2581	; 0xa15
 801ede0:	4813      	ldr	r0, [pc, #76]	; (801ee30 <ISM330DHCXTaskSensorDisable+0x6c>)
 801ede2:	f7f6 fa62 	bl	80152aa <assert_failed>
  sys_error_code_t res = SYS_NO_ERROR_CODE;
 801ede6:	2300      	movs	r3, #0
 801ede8:	81fb      	strh	r3, [r7, #14]

  uint8_t id = report.sensorMessage.nSensorId;
 801edea:	7e7b      	ldrb	r3, [r7, #25]
 801edec:	737b      	strb	r3, [r7, #13]

  if(id == _this->acc_id)
 801edee:	687b      	ldr	r3, [r7, #4]
 801edf0:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 801edf4:	7b7a      	ldrb	r2, [r7, #13]
 801edf6:	429a      	cmp	r2, r3
 801edf8:	d104      	bne.n	801ee04 <ISM330DHCXTaskSensorDisable+0x40>
    _this->acc_sensor_status.IsActive = FALSE;
 801edfa:	687b      	ldr	r3, [r7, #4]
 801edfc:	2200      	movs	r2, #0
 801edfe:	f883 20f4 	strb.w	r2, [r3, #244]	; 0xf4
 801ee02:	e00c      	b.n	801ee1e <ISM330DHCXTaskSensorDisable+0x5a>
  else if(id == _this->gyro_id)
 801ee04:	687b      	ldr	r3, [r7, #4]
 801ee06:	f893 3155 	ldrb.w	r3, [r3, #341]	; 0x155
 801ee0a:	7b7a      	ldrb	r2, [r7, #13]
 801ee0c:	429a      	cmp	r2, r3
 801ee0e:	d104      	bne.n	801ee1a <ISM330DHCXTaskSensorDisable+0x56>
    _this->gyro_sensor_status.IsActive = FALSE;
 801ee10:	687b      	ldr	r3, [r7, #4]
 801ee12:	2200      	movs	r2, #0
 801ee14:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
 801ee18:	e001      	b.n	801ee1e <ISM330DHCXTaskSensorDisable+0x5a>
  else
    res = SYS_INVALID_PARAMETER_ERROR_CODE;
 801ee1a:	2304      	movs	r3, #4
 801ee1c:	81fb      	strh	r3, [r7, #14]

  return res;
 801ee1e:	89fb      	ldrh	r3, [r7, #14]
}
 801ee20:	4618      	mov	r0, r3
 801ee22:	3710      	adds	r7, #16
 801ee24:	46bd      	mov	sp, r7
 801ee26:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801ee2a:	b002      	add	sp, #8
 801ee2c:	4770      	bx	lr
 801ee2e:	bf00      	nop
 801ee30:	080274b8 	.word	0x080274b8

0801ee34 <ISM330DHCXTaskSensorIsActive>:

static boolean_t ISM330DHCXTaskSensorIsActive(const ISM330DHCXTask *_this)
{
 801ee34:	b580      	push	{r7, lr}
 801ee36:	b082      	sub	sp, #8
 801ee38:	af00      	add	r7, sp, #0
 801ee3a:	6078      	str	r0, [r7, #4]
  assert_param(_this != NULL);
 801ee3c:	687b      	ldr	r3, [r7, #4]
 801ee3e:	2b00      	cmp	r3, #0
 801ee40:	d104      	bne.n	801ee4c <ISM330DHCXTaskSensorIsActive+0x18>
 801ee42:	f640 2126 	movw	r1, #2598	; 0xa26
 801ee46:	480b      	ldr	r0, [pc, #44]	; (801ee74 <ISM330DHCXTaskSensorIsActive+0x40>)
 801ee48:	f7f6 fa2f 	bl	80152aa <assert_failed>
  return (_this->acc_sensor_status.IsActive || _this->gyro_sensor_status.IsActive);
 801ee4c:	687b      	ldr	r3, [r7, #4]
 801ee4e:	f893 30f4 	ldrb.w	r3, [r3, #244]	; 0xf4
 801ee52:	2b00      	cmp	r3, #0
 801ee54:	d104      	bne.n	801ee60 <ISM330DHCXTaskSensorIsActive+0x2c>
 801ee56:	687b      	ldr	r3, [r7, #4]
 801ee58:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 801ee5c:	2b00      	cmp	r3, #0
 801ee5e:	d001      	beq.n	801ee64 <ISM330DHCXTaskSensorIsActive+0x30>
 801ee60:	2301      	movs	r3, #1
 801ee62:	e000      	b.n	801ee66 <ISM330DHCXTaskSensorIsActive+0x32>
 801ee64:	2300      	movs	r3, #0
 801ee66:	f003 0301 	and.w	r3, r3, #1
 801ee6a:	b2db      	uxtb	r3, r3
}
 801ee6c:	4618      	mov	r0, r3
 801ee6e:	3708      	adds	r7, #8
 801ee70:	46bd      	mov	sp, r7
 801ee72:	bd80      	pop	{r7, pc}
 801ee74:	080274b8 	.word	0x080274b8

0801ee78 <ISM330DHCXTaskEnterLowPowerMode>:

static sys_error_code_t ISM330DHCXTaskEnterLowPowerMode(const ISM330DHCXTask *_this)
{
 801ee78:	b580      	push	{r7, lr}
 801ee7a:	b086      	sub	sp, #24
 801ee7c:	af00      	add	r7, sp, #0
 801ee7e:	6078      	str	r0, [r7, #4]
  assert_param(_this != NULL);
 801ee80:	687b      	ldr	r3, [r7, #4]
 801ee82:	2b00      	cmp	r3, #0
 801ee84:	d104      	bne.n	801ee90 <ISM330DHCXTaskEnterLowPowerMode+0x18>
 801ee86:	f640 212c 	movw	r1, #2604	; 0xa2c
 801ee8a:	4815      	ldr	r0, [pc, #84]	; (801eee0 <ISM330DHCXTaskEnterLowPowerMode+0x68>)
 801ee8c:	f7f6 fa0d 	bl	80152aa <assert_failed>
  sys_error_code_t res = SYS_NO_ERROR_CODE;
 801ee90:	2300      	movs	r3, #0
 801ee92:	82fb      	strh	r3, [r7, #22]
  stmdev_ctx_t *p_sensor_drv = (stmdev_ctx_t*) &_this->p_sensor_bus_if->m_xConnector;
 801ee94:	687b      	ldr	r3, [r7, #4]
 801ee96:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 801ee9a:	613b      	str	r3, [r7, #16]

  ism330dhcx_odr_xl_t ism330dhcx_odr_xl = ISM330DHCX_XL_ODR_OFF;
 801ee9c:	2300      	movs	r3, #0
 801ee9e:	73fb      	strb	r3, [r7, #15]
  ism330dhcx_bdr_xl_t ism330dhcx_bdr_xl = ISM330DHCX_XL_NOT_BATCHED;
 801eea0:	2300      	movs	r3, #0
 801eea2:	73bb      	strb	r3, [r7, #14]
  ism330dhcx_odr_g_t ism330dhcx_odr_g = ISM330DHCX_GY_ODR_OFF;
 801eea4:	2300      	movs	r3, #0
 801eea6:	737b      	strb	r3, [r7, #13]
  ism330dhcx_bdr_gy_t ism330dhcx_bdr_gy = ISM330DHCX_GY_NOT_BATCHED;
 801eea8:	2300      	movs	r3, #0
 801eeaa:	733b      	strb	r3, [r7, #12]

  ism330dhcx_xl_data_rate_set(p_sensor_drv, ism330dhcx_odr_xl);
 801eeac:	7bfb      	ldrb	r3, [r7, #15]
 801eeae:	4619      	mov	r1, r3
 801eeb0:	6938      	ldr	r0, [r7, #16]
 801eeb2:	f7e2 fc69 	bl	8001788 <ism330dhcx_xl_data_rate_set>
  ism330dhcx_fifo_xl_batch_set(p_sensor_drv, ism330dhcx_bdr_xl);
 801eeb6:	7bbb      	ldrb	r3, [r7, #14]
 801eeb8:	4619      	mov	r1, r3
 801eeba:	6938      	ldr	r0, [r7, #16]
 801eebc:	f7e3 fd5a 	bl	8002974 <ism330dhcx_fifo_xl_batch_set>
  ism330dhcx_gy_data_rate_set(p_sensor_drv, ism330dhcx_odr_g);
 801eec0:	7b7b      	ldrb	r3, [r7, #13]
 801eec2:	4619      	mov	r1, r3
 801eec4:	6938      	ldr	r0, [r7, #16]
 801eec6:	f7e2 feaf 	bl	8001c28 <ism330dhcx_gy_data_rate_set>
  ism330dhcx_fifo_gy_batch_set(p_sensor_drv, ism330dhcx_bdr_gy);
 801eeca:	7b3b      	ldrb	r3, [r7, #12]
 801eecc:	4619      	mov	r1, r3
 801eece:	6938      	ldr	r0, [r7, #16]
 801eed0:	f7e3 fd76 	bl	80029c0 <ism330dhcx_fifo_gy_batch_set>

  return res;
 801eed4:	8afb      	ldrh	r3, [r7, #22]
}
 801eed6:	4618      	mov	r0, r3
 801eed8:	3718      	adds	r7, #24
 801eeda:	46bd      	mov	sp, r7
 801eedc:	bd80      	pop	{r7, pc}
 801eede:	bf00      	nop
 801eee0:	080274b8 	.word	0x080274b8

0801eee4 <ISM330DHCXTaskConfigureIrqPin>:

static sys_error_code_t ISM330DHCXTaskConfigureIrqPin(const ISM330DHCXTask *_this, boolean_t LowPower)
{
 801eee4:	b580      	push	{r7, lr}
 801eee6:	b088      	sub	sp, #32
 801eee8:	af00      	add	r7, sp, #0
 801eeea:	6078      	str	r0, [r7, #4]
 801eeec:	460b      	mov	r3, r1
 801eeee:	70fb      	strb	r3, [r7, #3]
  assert_param(_this != NULL);
 801eef0:	687b      	ldr	r3, [r7, #4]
 801eef2:	2b00      	cmp	r3, #0
 801eef4:	d104      	bne.n	801ef00 <ISM330DHCXTaskConfigureIrqPin+0x1c>
 801eef6:	f640 213f 	movw	r1, #2623	; 0xa3f
 801eefa:	4820      	ldr	r0, [pc, #128]	; (801ef7c <ISM330DHCXTaskConfigureIrqPin+0x98>)
 801eefc:	f7f6 f9d5 	bl	80152aa <assert_failed>
  sys_error_code_t res = SYS_NO_ERROR_CODE;
 801ef00:	2300      	movs	r3, #0
 801ef02:	83fb      	strh	r3, [r7, #30]

  if (!LowPower)
 801ef04:	78fb      	ldrb	r3, [r7, #3]
 801ef06:	f083 0301 	eor.w	r3, r3, #1
 801ef0a:	b2db      	uxtb	r3, r3
 801ef0c:	2b00      	cmp	r3, #0
 801ef0e:	d005      	beq.n	801ef1c <ISM330DHCXTaskConfigureIrqPin+0x38>
  {
    /* Configure INT Pin */
    _this->pIRQConfig->p_mx_init_f();
 801ef10:	687b      	ldr	r3, [r7, #4]
 801ef12:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 801ef16:	681b      	ldr	r3, [r3, #0]
 801ef18:	4798      	blx	r3
 801ef1a:	e02a      	b.n	801ef72 <ISM330DHCXTaskConfigureIrqPin+0x8e>
  }
  else
  {
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 801ef1c:	f107 0308 	add.w	r3, r7, #8
 801ef20:	2200      	movs	r2, #0
 801ef22:	601a      	str	r2, [r3, #0]
 801ef24:	605a      	str	r2, [r3, #4]
 801ef26:	609a      	str	r2, [r3, #8]
 801ef28:	60da      	str	r2, [r3, #12]
 801ef2a:	611a      	str	r2, [r3, #16]

    // first disable the IRQ to avoid spurious interrupt to wake the MCU up.
    HAL_NVIC_DisableIRQ(_this->pIRQConfig->irq_n);
 801ef2c:	687b      	ldr	r3, [r7, #4]
 801ef2e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 801ef32:	f993 3004 	ldrsb.w	r3, [r3, #4]
 801ef36:	4618      	mov	r0, r3
 801ef38:	f7e4 f858 	bl	8002fec <HAL_NVIC_DisableIRQ>
    HAL_NVIC_ClearPendingIRQ(_this->pIRQConfig->irq_n);
 801ef3c:	687b      	ldr	r3, [r7, #4]
 801ef3e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 801ef42:	f993 3004 	ldrsb.w	r3, [r3, #4]
 801ef46:	4618      	mov	r0, r3
 801ef48:	f7e4 f868 	bl	800301c <HAL_NVIC_ClearPendingIRQ>
    // then reconfigure the PIN in analog high impedance to reduce the power consumption.
    GPIO_InitStruct.Pin =  _this->pIRQConfig->pin;
 801ef4c:	687b      	ldr	r3, [r7, #4]
 801ef4e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 801ef52:	689b      	ldr	r3, [r3, #8]
 801ef54:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 801ef56:	2303      	movs	r3, #3
 801ef58:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801ef5a:	2300      	movs	r3, #0
 801ef5c:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(_this->pIRQConfig->port, &GPIO_InitStruct);
 801ef5e:	687b      	ldr	r3, [r7, #4]
 801ef60:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 801ef64:	68db      	ldr	r3, [r3, #12]
 801ef66:	f107 0208 	add.w	r2, r7, #8
 801ef6a:	4611      	mov	r1, r2
 801ef6c:	4618      	mov	r0, r3
 801ef6e:	f7e5 f999 	bl	80042a4 <HAL_GPIO_Init>
  }

  return res;
 801ef72:	8bfb      	ldrh	r3, [r7, #30]
}
 801ef74:	4618      	mov	r0, r3
 801ef76:	3720      	adds	r7, #32
 801ef78:	46bd      	mov	sp, r7
 801ef7a:	bd80      	pop	{r7, pc}
 801ef7c:	080274b8 	.word	0x080274b8

0801ef80 <ISM330DHCXTaskConfigureMLCPin>:

static sys_error_code_t ISM330DHCXTaskConfigureMLCPin(const ISM330DHCXTask *_this, boolean_t LowPower)
{
 801ef80:	b580      	push	{r7, lr}
 801ef82:	b088      	sub	sp, #32
 801ef84:	af00      	add	r7, sp, #0
 801ef86:	6078      	str	r0, [r7, #4]
 801ef88:	460b      	mov	r3, r1
 801ef8a:	70fb      	strb	r3, [r7, #3]
  assert_param(_this != NULL);
 801ef8c:	687b      	ldr	r3, [r7, #4]
 801ef8e:	2b00      	cmp	r3, #0
 801ef90:	d104      	bne.n	801ef9c <ISM330DHCXTaskConfigureMLCPin+0x1c>
 801ef92:	f640 215a 	movw	r1, #2650	; 0xa5a
 801ef96:	4820      	ldr	r0, [pc, #128]	; (801f018 <ISM330DHCXTaskConfigureMLCPin+0x98>)
 801ef98:	f7f6 f987 	bl	80152aa <assert_failed>
  sys_error_code_t res = SYS_NO_ERROR_CODE;
 801ef9c:	2300      	movs	r3, #0
 801ef9e:	83fb      	strh	r3, [r7, #30]

  if (!LowPower)
 801efa0:	78fb      	ldrb	r3, [r7, #3]
 801efa2:	f083 0301 	eor.w	r3, r3, #1
 801efa6:	b2db      	uxtb	r3, r3
 801efa8:	2b00      	cmp	r3, #0
 801efaa:	d005      	beq.n	801efb8 <ISM330DHCXTaskConfigureMLCPin+0x38>
  {
    /* Configure MLC INT Pin */
    _this->pMLCConfig->p_mx_init_f();
 801efac:	687b      	ldr	r3, [r7, #4]
 801efae:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 801efb2:	681b      	ldr	r3, [r3, #0]
 801efb4:	4798      	blx	r3
 801efb6:	e02a      	b.n	801f00e <ISM330DHCXTaskConfigureMLCPin+0x8e>
  }
  else
  {
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 801efb8:	f107 0308 	add.w	r3, r7, #8
 801efbc:	2200      	movs	r2, #0
 801efbe:	601a      	str	r2, [r3, #0]
 801efc0:	605a      	str	r2, [r3, #4]
 801efc2:	609a      	str	r2, [r3, #8]
 801efc4:	60da      	str	r2, [r3, #12]
 801efc6:	611a      	str	r2, [r3, #16]

    // first disable the IRQ to avoid spurious interrupt to wake the MCU up.
    HAL_NVIC_DisableIRQ(_this->pMLCConfig->irq_n);
 801efc8:	687b      	ldr	r3, [r7, #4]
 801efca:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 801efce:	f993 3004 	ldrsb.w	r3, [r3, #4]
 801efd2:	4618      	mov	r0, r3
 801efd4:	f7e4 f80a 	bl	8002fec <HAL_NVIC_DisableIRQ>
    HAL_NVIC_ClearPendingIRQ(_this->pMLCConfig->irq_n);
 801efd8:	687b      	ldr	r3, [r7, #4]
 801efda:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 801efde:	f993 3004 	ldrsb.w	r3, [r3, #4]
 801efe2:	4618      	mov	r0, r3
 801efe4:	f7e4 f81a 	bl	800301c <HAL_NVIC_ClearPendingIRQ>
    // then reconfigure the PIN in analog high impedance to reduce the power consumption.
    GPIO_InitStruct.Pin =  _this->pMLCConfig->pin;
 801efe8:	687b      	ldr	r3, [r7, #4]
 801efea:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 801efee:	689b      	ldr	r3, [r3, #8]
 801eff0:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 801eff2:	2303      	movs	r3, #3
 801eff4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801eff6:	2300      	movs	r3, #0
 801eff8:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(_this->pMLCConfig->port, &GPIO_InitStruct);
 801effa:	687b      	ldr	r3, [r7, #4]
 801effc:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 801f000:	68db      	ldr	r3, [r3, #12]
 801f002:	f107 0208 	add.w	r2, r7, #8
 801f006:	4611      	mov	r1, r2
 801f008:	4618      	mov	r0, r3
 801f00a:	f7e5 f94b 	bl	80042a4 <HAL_GPIO_Init>
  }

  return res;
 801f00e:	8bfb      	ldrh	r3, [r7, #30]
}
 801f010:	4618      	mov	r0, r3
 801f012:	3720      	adds	r7, #32
 801f014:	46bd      	mov	sp, r7
 801f016:	bd80      	pop	{r7, pc}
 801f018:	080274b8 	.word	0x080274b8

0801f01c <ISM330DHCXTaskGetOwnerFromISensorIF>:

static inline ISM330DHCXTask* ISM330DHCXTaskGetOwnerFromISensorIF(ISensor_t *p_if)
{
 801f01c:	b580      	push	{r7, lr}
 801f01e:	b084      	sub	sp, #16
 801f020:	af00      	add	r7, sp, #0
 801f022:	6078      	str	r0, [r7, #4]
  assert_param(p_if != NULL);
 801f024:	687b      	ldr	r3, [r7, #4]
 801f026:	2b00      	cmp	r3, #0
 801f028:	d104      	bne.n	801f034 <ISM330DHCXTaskGetOwnerFromISensorIF+0x18>
 801f02a:	f640 2175 	movw	r1, #2677	; 0xa75
 801f02e:	4814      	ldr	r0, [pc, #80]	; (801f080 <ISM330DHCXTaskGetOwnerFromISensorIF+0x64>)
 801f030:	f7f6 f93b 	bl	80152aa <assert_failed>
  ISM330DHCXTask *p_if_owner = NULL;
 801f034:	2300      	movs	r3, #0
 801f036:	60fb      	str	r3, [r7, #12]

  /* check if the virtual function has been called from the mlc fake sensor IF  */
  p_if_owner = (ISM330DHCXTask*) ((uint32_t) p_if - offsetof(ISM330DHCXTask, mlc_fakesensor_if));
 801f038:	687b      	ldr	r3, [r7, #4]
 801f03a:	3be0      	subs	r3, #224	; 0xe0
 801f03c:	60fb      	str	r3, [r7, #12]
  if(!(p_if_owner->gyro_sensor_if.vptr == &sTheClass.gyro_sensor_if_vtbl) || !(p_if_owner->super.vptr == &sTheClass.vtbl))
 801f03e:	68fb      	ldr	r3, [r7, #12]
 801f040:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 801f044:	4a0f      	ldr	r2, [pc, #60]	; (801f084 <ISM330DHCXTaskGetOwnerFromISensorIF+0x68>)
 801f046:	4293      	cmp	r3, r2
 801f048:	d104      	bne.n	801f054 <ISM330DHCXTaskGetOwnerFromISensorIF+0x38>
 801f04a:	68fb      	ldr	r3, [r7, #12]
 801f04c:	681b      	ldr	r3, [r3, #0]
 801f04e:	4a0e      	ldr	r2, [pc, #56]	; (801f088 <ISM330DHCXTaskGetOwnerFromISensorIF+0x6c>)
 801f050:	4293      	cmp	r3, r2
 801f052:	d002      	beq.n	801f05a <ISM330DHCXTaskGetOwnerFromISensorIF+0x3e>
  {
    /* then the virtual function has been called from the gyro IF  */
    p_if_owner = (ISM330DHCXTask*) ((uint32_t) p_if - offsetof(ISM330DHCXTask, gyro_sensor_if));
 801f054:	687b      	ldr	r3, [r7, #4]
 801f056:	3bdc      	subs	r3, #220	; 0xdc
 801f058:	60fb      	str	r3, [r7, #12]
  }
  if(!(p_if_owner->acc_sensor_if.vptr == &sTheClass.acc_sensor_if_vtbl) || !(p_if_owner->super.vptr == &sTheClass.vtbl))
 801f05a:	68fb      	ldr	r3, [r7, #12]
 801f05c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 801f060:	4a0a      	ldr	r2, [pc, #40]	; (801f08c <ISM330DHCXTaskGetOwnerFromISensorIF+0x70>)
 801f062:	4293      	cmp	r3, r2
 801f064:	d104      	bne.n	801f070 <ISM330DHCXTaskGetOwnerFromISensorIF+0x54>
 801f066:	68fb      	ldr	r3, [r7, #12]
 801f068:	681b      	ldr	r3, [r3, #0]
 801f06a:	4a07      	ldr	r2, [pc, #28]	; (801f088 <ISM330DHCXTaskGetOwnerFromISensorIF+0x6c>)
 801f06c:	4293      	cmp	r3, r2
 801f06e:	d002      	beq.n	801f076 <ISM330DHCXTaskGetOwnerFromISensorIF+0x5a>
  {
    /* then the virtual function has been called from the acc IF  */
    p_if_owner = (ISM330DHCXTask*) ((uint32_t) p_if - offsetof(ISM330DHCXTask, acc_sensor_if));
 801f070:	687b      	ldr	r3, [r7, #4]
 801f072:	3bd8      	subs	r3, #216	; 0xd8
 801f074:	60fb      	str	r3, [r7, #12]
  }

  return p_if_owner;
 801f076:	68fb      	ldr	r3, [r7, #12]
}
 801f078:	4618      	mov	r0, r3
 801f07a:	3710      	adds	r7, #16
 801f07c:	46bd      	mov	sp, r7
 801f07e:	bd80      	pop	{r7, pc}
 801f080:	080274b8 	.word	0x080274b8
 801f084:	080359e8 	.word	0x080359e8
 801f088:	08035994 	.word	0x08035994
 801f08c:	080359b0 	.word	0x080359b0

0801f090 <ISM330DHCXTaskGetOwnerFromISensorMlcIF>:

static inline ISM330DHCXTask* ISM330DHCXTaskGetOwnerFromISensorMlcIF(ISensorMlc_t *p_if)
{
 801f090:	b580      	push	{r7, lr}
 801f092:	b084      	sub	sp, #16
 801f094:	af00      	add	r7, sp, #0
 801f096:	6078      	str	r0, [r7, #4]
  assert_param(p_if != NULL);
 801f098:	687b      	ldr	r3, [r7, #4]
 801f09a:	2b00      	cmp	r3, #0
 801f09c:	d104      	bne.n	801f0a8 <ISM330DHCXTaskGetOwnerFromISensorMlcIF+0x18>
 801f09e:	f640 218a 	movw	r1, #2698	; 0xa8a
 801f0a2:	4806      	ldr	r0, [pc, #24]	; (801f0bc <ISM330DHCXTaskGetOwnerFromISensorMlcIF+0x2c>)
 801f0a4:	f7f6 f901 	bl	80152aa <assert_failed>
  ISM330DHCXTask *p_if_owner = NULL;
 801f0a8:	2300      	movs	r3, #0
 801f0aa:	60fb      	str	r3, [r7, #12]
  p_if_owner = (ISM330DHCXTask*) ((uint32_t) p_if - offsetof(ISM330DHCXTask, mlc_sensor_if));
 801f0ac:	687b      	ldr	r3, [r7, #4]
 801f0ae:	3be4      	subs	r3, #228	; 0xe4
 801f0b0:	60fb      	str	r3, [r7, #12]

  return p_if_owner;
 801f0b2:	68fb      	ldr	r3, [r7, #12]
}
 801f0b4:	4618      	mov	r0, r3
 801f0b6:	3710      	adds	r7, #16
 801f0b8:	46bd      	mov	sp, r7
 801f0ba:	bd80      	pop	{r7, pc}
 801f0bc:	080274b8 	.word	0x080274b8

0801f0c0 <ISM330DHCXTaskTimerCallbackFunction>:

static void ISM330DHCXTaskTimerCallbackFunction(ULONG timer)
{
 801f0c0:	b580      	push	{r7, lr}
 801f0c2:	b086      	sub	sp, #24
 801f0c4:	af00      	add	r7, sp, #0
 801f0c6:	6078      	str	r0, [r7, #4]
  SMMessage report =
 801f0c8:	f107 0308 	add.w	r3, r7, #8
 801f0cc:	2200      	movs	r2, #0
 801f0ce:	601a      	str	r2, [r3, #0]
 801f0d0:	605a      	str	r2, [r3, #4]
 801f0d2:	609a      	str	r2, [r3, #8]
 801f0d4:	60da      	str	r2, [r3, #12]
 801f0d6:	2301      	movs	r3, #1
 801f0d8:	723b      	strb	r3, [r7, #8]
    .sensorDataReadyMessage.messageId = SM_MESSAGE_ID_DATA_READY,
    //.sensorDataReadyMessage.fTimestamp = SysTsGetTimestampF(SysGetTimestampSrv())
  };

  // if (sTaskObj.in_queue != NULL ) {//TODO: STF.Port - how to check if the queue has been initialized ??
  if(TX_SUCCESS != tx_queue_send(&sTaskObj.in_queue, &report, TX_NO_WAIT))
 801f0da:	f107 0308 	add.w	r3, r7, #8
 801f0de:	2200      	movs	r2, #0
 801f0e0:	4619      	mov	r1, r3
 801f0e2:	4809      	ldr	r0, [pc, #36]	; (801f108 <ISM330DHCXTaskTimerCallbackFunction+0x48>)
 801f0e4:	f7f3 ff02 	bl	8012eec <_txe_queue_send>
 801f0e8:	4603      	mov	r3, r0
 801f0ea:	2b00      	cmp	r3, #0
 801f0ec:	d001      	beq.n	801f0f2 <ISM330DHCXTaskTimerCallbackFunction+0x32>
  {
    // unable to send the message. Signal the error
    sys_error_handler();
 801f0ee:	f7ef fe33 	bl	800ed58 <sys_error_handler>
  }
  sTaskObj.timestamp_tick = SMUtilGetTimeStamp();
 801f0f2:	f000 fabd 	bl	801f670 <SMUtilGetTimeStamp>
 801f0f6:	4603      	mov	r3, r0
 801f0f8:	4a04      	ldr	r2, [pc, #16]	; (801f10c <ISM330DHCXTaskTimerCallbackFunction+0x4c>)
 801f0fa:	f8c2 3c0c 	str.w	r3, [r2, #3084]	; 0xc0c
  //}
}
 801f0fe:	bf00      	nop
 801f100:	3718      	adds	r7, #24
 801f102:	46bd      	mov	sp, r7
 801f104:	bd80      	pop	{r7, pc}
 801f106:	bf00      	nop
 801f108:	2003a118 	.word	0x2003a118
 801f10c:	20039fc0 	.word	0x20039fc0

0801f110 <ISM330DHCXTaskMLCTimerCallbackFunction>:

static void ISM330DHCXTaskMLCTimerCallbackFunction(ULONG timer)
{
 801f110:	b580      	push	{r7, lr}
 801f112:	b086      	sub	sp, #24
 801f114:	af00      	add	r7, sp, #0
 801f116:	6078      	str	r0, [r7, #4]
  SMMessage report =
 801f118:	f107 0308 	add.w	r3, r7, #8
 801f11c:	2200      	movs	r2, #0
 801f11e:	601a      	str	r2, [r3, #0]
 801f120:	605a      	str	r2, [r3, #4]
 801f122:	609a      	str	r2, [r3, #8]
 801f124:	60da      	str	r2, [r3, #12]
 801f126:	2302      	movs	r3, #2
 801f128:	723b      	strb	r3, [r7, #8]
    .sensorDataReadyMessage.messageId = SM_MESSAGE_ID_DATA_READY_MLC,
    //.sensorDataReadyMessage.fTimestamp = SysTsGetTimestampF(SysGetTimestampSrv())
  };

  // if (sTaskObj.in_queue != NULL ) {//TODO: STF.Port - how to check if the queue has been initialized ??
  if(TX_SUCCESS != tx_queue_send(&sTaskObj.in_queue, &report, TX_NO_WAIT))
 801f12a:	f107 0308 	add.w	r3, r7, #8
 801f12e:	2200      	movs	r2, #0
 801f130:	4619      	mov	r1, r3
 801f132:	4809      	ldr	r0, [pc, #36]	; (801f158 <ISM330DHCXTaskMLCTimerCallbackFunction+0x48>)
 801f134:	f7f3 feda 	bl	8012eec <_txe_queue_send>
 801f138:	4603      	mov	r3, r0
 801f13a:	2b00      	cmp	r3, #0
 801f13c:	d001      	beq.n	801f142 <ISM330DHCXTaskMLCTimerCallbackFunction+0x32>
  {
    // unable to send the message. Signal the error
    sys_error_handler();
 801f13e:	f7ef fe0b 	bl	800ed58 <sys_error_handler>
  }
  sTaskObj.timestamp_tick = SMUtilGetTimeStamp();
 801f142:	f000 fa95 	bl	801f670 <SMUtilGetTimeStamp>
 801f146:	4603      	mov	r3, r0
 801f148:	4a04      	ldr	r2, [pc, #16]	; (801f15c <ISM330DHCXTaskMLCTimerCallbackFunction+0x4c>)
 801f14a:	f8c2 3c0c 	str.w	r3, [r2, #3084]	; 0xc0c
  //}
}
 801f14e:	bf00      	nop
 801f150:	3718      	adds	r7, #24
 801f152:	46bd      	mov	sp, r7
 801f154:	bd80      	pop	{r7, pc}
 801f156:	bf00      	nop
 801f158:	2003a118 	.word	0x2003a118
 801f15c:	20039fc0 	.word	0x20039fc0

0801f160 <ISM330DHCXTask_EXTI_Callback>:

/**
 * Interrupt callback
 */
void ISM330DHCXTask_EXTI_Callback(uint16_t Pin)
{
 801f160:	b580      	push	{r7, lr}
 801f162:	b086      	sub	sp, #24
 801f164:	af00      	add	r7, sp, #0
 801f166:	4603      	mov	r3, r0
 801f168:	80fb      	strh	r3, [r7, #6]
  SMMessage report =
 801f16a:	f107 0308 	add.w	r3, r7, #8
 801f16e:	2200      	movs	r2, #0
 801f170:	601a      	str	r2, [r3, #0]
 801f172:	605a      	str	r2, [r3, #4]
 801f174:	609a      	str	r2, [r3, #8]
 801f176:	60da      	str	r2, [r3, #12]
 801f178:	2301      	movs	r3, #1
 801f17a:	723b      	strb	r3, [r7, #8]
    .sensorDataReadyMessage.messageId = SM_MESSAGE_ID_DATA_READY,
    //.sensorDataReadyMessage.fTimestamp = SysTsGetTimestampF(SysGetTimestampSrv())
  };

//  if (sTaskObj.in_queue != NULL) { //TODO: STF.Port - how to check if the queue has been initialized ??
  if(TX_SUCCESS != tx_queue_send(&sTaskObj.in_queue, &report, TX_NO_WAIT))
 801f17c:	f107 0308 	add.w	r3, r7, #8
 801f180:	2200      	movs	r2, #0
 801f182:	4619      	mov	r1, r3
 801f184:	4808      	ldr	r0, [pc, #32]	; (801f1a8 <ISM330DHCXTask_EXTI_Callback+0x48>)
 801f186:	f7f3 feb1 	bl	8012eec <_txe_queue_send>
 801f18a:	4603      	mov	r3, r0
 801f18c:	2b00      	cmp	r3, #0
 801f18e:	d001      	beq.n	801f194 <ISM330DHCXTask_EXTI_Callback+0x34>
  {
    // unable to send the report. Signal the error
    sys_error_handler();
 801f190:	f7ef fde2 	bl	800ed58 <sys_error_handler>
  }
  sTaskObj.timestamp_tick = SMUtilGetTimeStamp();
 801f194:	f000 fa6c 	bl	801f670 <SMUtilGetTimeStamp>
 801f198:	4603      	mov	r3, r0
 801f19a:	4a04      	ldr	r2, [pc, #16]	; (801f1ac <ISM330DHCXTask_EXTI_Callback+0x4c>)
 801f19c:	f8c2 3c0c 	str.w	r3, [r2, #3084]	; 0xc0c
//  }
}
 801f1a0:	bf00      	nop
 801f1a2:	3718      	adds	r7, #24
 801f1a4:	46bd      	mov	sp, r7
 801f1a6:	bd80      	pop	{r7, pc}
 801f1a8:	2003a118 	.word	0x2003a118
 801f1ac:	20039fc0 	.word	0x20039fc0

0801f1b0 <ISM330DHCX_XL_ODR_From_UCF>:
  sTaskObj.timestamp_tick = SMUtilGetTimeStamp();
//  }
}

static sys_error_code_t ISM330DHCX_XL_ODR_From_UCF(ISM330DHCXTask *_this)
{
 801f1b0:	b580      	push	{r7, lr}
 801f1b2:	b086      	sub	sp, #24
 801f1b4:	af00      	add	r7, sp, #0
 801f1b6:	6078      	str	r0, [r7, #4]
  assert_param(_this != NULL);
 801f1b8:	687b      	ldr	r3, [r7, #4]
 801f1ba:	2b00      	cmp	r3, #0
 801f1bc:	d104      	bne.n	801f1c8 <ISM330DHCX_XL_ODR_From_UCF+0x18>
 801f1be:	f640 21e1 	movw	r1, #2785	; 0xae1
 801f1c2:	4834      	ldr	r0, [pc, #208]	; (801f294 <ISM330DHCX_XL_ODR_From_UCF+0xe4>)
 801f1c4:	f7f6 f871 	bl	80152aa <assert_failed>
  sys_error_code_t res = SYS_NO_ERROR_CODE;
 801f1c8:	2300      	movs	r3, #0
 801f1ca:	827b      	strh	r3, [r7, #18]
  stmdev_ctx_t *p_sensor_drv = (stmdev_ctx_t*) &_this->p_sensor_bus_if->m_xConnector;
 801f1cc:	687b      	ldr	r3, [r7, #4]
 801f1ce:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 801f1d2:	60fb      	str	r3, [r7, #12]

  float Odr = 12.5f;
 801f1d4:	4b30      	ldr	r3, [pc, #192]	; (801f298 <ISM330DHCX_XL_ODR_From_UCF+0xe8>)
 801f1d6:	617b      	str	r3, [r7, #20]
  ism330dhcx_odr_xl_t ism330dhcx_odr_xl = ISM330DHCX_XL_ODR_OFF;
 801f1d8:	2300      	movs	r3, #0
 801f1da:	72fb      	strb	r3, [r7, #11]
  ism330dhcx_xl_data_rate_get(p_sensor_drv, &ism330dhcx_odr_xl);
 801f1dc:	f107 030b 	add.w	r3, r7, #11
 801f1e0:	4619      	mov	r1, r3
 801f1e2:	68f8      	ldr	r0, [r7, #12]
 801f1e4:	f7e2 fc40 	bl	8001a68 <ism330dhcx_xl_data_rate_get>

  _this->acc_sensor_status.IsActive = TRUE;
 801f1e8:	687b      	ldr	r3, [r7, #4]
 801f1ea:	2201      	movs	r2, #1
 801f1ec:	f883 20f4 	strb.w	r2, [r3, #244]	; 0xf4

  switch(ism330dhcx_odr_xl)
 801f1f0:	7afb      	ldrb	r3, [r7, #11]
 801f1f2:	2b0a      	cmp	r3, #10
 801f1f4:	d83b      	bhi.n	801f26e <ISM330DHCX_XL_ODR_From_UCF+0xbe>
 801f1f6:	a201      	add	r2, pc, #4	; (adr r2, 801f1fc <ISM330DHCX_XL_ODR_From_UCF+0x4c>)
 801f1f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801f1fc:	0801f229 	.word	0x0801f229
 801f200:	0801f233 	.word	0x0801f233
 801f204:	0801f239 	.word	0x0801f239
 801f208:	0801f23f 	.word	0x0801f23f
 801f20c:	0801f245 	.word	0x0801f245
 801f210:	0801f24b 	.word	0x0801f24b
 801f214:	0801f251 	.word	0x0801f251
 801f218:	0801f257 	.word	0x0801f257
 801f21c:	0801f25d 	.word	0x0801f25d
 801f220:	0801f263 	.word	0x0801f263
 801f224:	0801f269 	.word	0x0801f269
  {
    case ISM330DHCX_XL_ODR_OFF:
      _this->acc_sensor_status.IsActive = FALSE;
 801f228:	687b      	ldr	r3, [r7, #4]
 801f22a:	2200      	movs	r2, #0
 801f22c:	f883 20f4 	strb.w	r2, [r3, #244]	; 0xf4
      break;
 801f230:	e01e      	b.n	801f270 <ISM330DHCX_XL_ODR_From_UCF+0xc0>

    case ISM330DHCX_XL_ODR_12Hz5:
      Odr = 12.5f;
 801f232:	4b19      	ldr	r3, [pc, #100]	; (801f298 <ISM330DHCX_XL_ODR_From_UCF+0xe8>)
 801f234:	617b      	str	r3, [r7, #20]
      break;
 801f236:	e01b      	b.n	801f270 <ISM330DHCX_XL_ODR_From_UCF+0xc0>

    case ISM330DHCX_XL_ODR_26Hz:
      Odr = 26.0f;
 801f238:	4b18      	ldr	r3, [pc, #96]	; (801f29c <ISM330DHCX_XL_ODR_From_UCF+0xec>)
 801f23a:	617b      	str	r3, [r7, #20]
      break;
 801f23c:	e018      	b.n	801f270 <ISM330DHCX_XL_ODR_From_UCF+0xc0>

    case ISM330DHCX_XL_ODR_52Hz:
      Odr = 52.0f;
 801f23e:	4b18      	ldr	r3, [pc, #96]	; (801f2a0 <ISM330DHCX_XL_ODR_From_UCF+0xf0>)
 801f240:	617b      	str	r3, [r7, #20]
      break;
 801f242:	e015      	b.n	801f270 <ISM330DHCX_XL_ODR_From_UCF+0xc0>

    case ISM330DHCX_XL_ODR_104Hz:
      Odr = 104.0f;
 801f244:	4b17      	ldr	r3, [pc, #92]	; (801f2a4 <ISM330DHCX_XL_ODR_From_UCF+0xf4>)
 801f246:	617b      	str	r3, [r7, #20]
      break;
 801f248:	e012      	b.n	801f270 <ISM330DHCX_XL_ODR_From_UCF+0xc0>

    case ISM330DHCX_XL_ODR_208Hz:
      Odr = 208.0f;
 801f24a:	4b17      	ldr	r3, [pc, #92]	; (801f2a8 <ISM330DHCX_XL_ODR_From_UCF+0xf8>)
 801f24c:	617b      	str	r3, [r7, #20]
      break;
 801f24e:	e00f      	b.n	801f270 <ISM330DHCX_XL_ODR_From_UCF+0xc0>

    case ISM330DHCX_XL_ODR_416Hz:
      Odr = 416.0f;
 801f250:	4b16      	ldr	r3, [pc, #88]	; (801f2ac <ISM330DHCX_XL_ODR_From_UCF+0xfc>)
 801f252:	617b      	str	r3, [r7, #20]
      break;
 801f254:	e00c      	b.n	801f270 <ISM330DHCX_XL_ODR_From_UCF+0xc0>

    case ISM330DHCX_XL_ODR_833Hz:
      Odr = 833.0f;
 801f256:	4b16      	ldr	r3, [pc, #88]	; (801f2b0 <ISM330DHCX_XL_ODR_From_UCF+0x100>)
 801f258:	617b      	str	r3, [r7, #20]
      break;
 801f25a:	e009      	b.n	801f270 <ISM330DHCX_XL_ODR_From_UCF+0xc0>

    case ISM330DHCX_XL_ODR_1666Hz:
      Odr = 1666.0f;
 801f25c:	4b15      	ldr	r3, [pc, #84]	; (801f2b4 <ISM330DHCX_XL_ODR_From_UCF+0x104>)
 801f25e:	617b      	str	r3, [r7, #20]
      break;
 801f260:	e006      	b.n	801f270 <ISM330DHCX_XL_ODR_From_UCF+0xc0>

    case ISM330DHCX_XL_ODR_3332Hz:
      Odr = 3332.0f;
 801f262:	4b15      	ldr	r3, [pc, #84]	; (801f2b8 <ISM330DHCX_XL_ODR_From_UCF+0x108>)
 801f264:	617b      	str	r3, [r7, #20]
      break;
 801f266:	e003      	b.n	801f270 <ISM330DHCX_XL_ODR_From_UCF+0xc0>

    case ISM330DHCX_XL_ODR_6667Hz:
      Odr = 6667.0f;
 801f268:	4b14      	ldr	r3, [pc, #80]	; (801f2bc <ISM330DHCX_XL_ODR_From_UCF+0x10c>)
 801f26a:	617b      	str	r3, [r7, #20]
      break;
 801f26c:	e000      	b.n	801f270 <ISM330DHCX_XL_ODR_From_UCF+0xc0>

    default:
      break;
 801f26e:	bf00      	nop
  }

  if(!SYS_IS_ERROR_CODE(res))
 801f270:	8a7b      	ldrh	r3, [r7, #18]
 801f272:	2b00      	cmp	r3, #0
 801f274:	d108      	bne.n	801f288 <ISM330DHCX_XL_ODR_From_UCF+0xd8>
  {
    _this->acc_sensor_status.ODR = Odr;
 801f276:	687b      	ldr	r3, [r7, #4]
 801f278:	697a      	ldr	r2, [r7, #20]
 801f27a:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
    _this->acc_sensor_status.MeasuredODR = 0.0f;
 801f27e:	687b      	ldr	r3, [r7, #4]
 801f280:	f04f 0200 	mov.w	r2, #0
 801f284:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
  }

  return res;
 801f288:	8a7b      	ldrh	r3, [r7, #18]
}
 801f28a:	4618      	mov	r0, r3
 801f28c:	3718      	adds	r7, #24
 801f28e:	46bd      	mov	sp, r7
 801f290:	bd80      	pop	{r7, pc}
 801f292:	bf00      	nop
 801f294:	080274b8 	.word	0x080274b8
 801f298:	41480000 	.word	0x41480000
 801f29c:	41d00000 	.word	0x41d00000
 801f2a0:	42500000 	.word	0x42500000
 801f2a4:	42d00000 	.word	0x42d00000
 801f2a8:	43500000 	.word	0x43500000
 801f2ac:	43d00000 	.word	0x43d00000
 801f2b0:	44504000 	.word	0x44504000
 801f2b4:	44d04000 	.word	0x44d04000
 801f2b8:	45504000 	.word	0x45504000
 801f2bc:	45d05800 	.word	0x45d05800

0801f2c0 <ISM330DHCX_XL_FS_From_UCF>:

static sys_error_code_t ISM330DHCX_XL_FS_From_UCF(ISM330DHCXTask *_this)
{
 801f2c0:	b580      	push	{r7, lr}
 801f2c2:	b086      	sub	sp, #24
 801f2c4:	af00      	add	r7, sp, #0
 801f2c6:	6078      	str	r0, [r7, #4]
  assert_param(_this != NULL);
 801f2c8:	687b      	ldr	r3, [r7, #4]
 801f2ca:	2b00      	cmp	r3, #0
 801f2cc:	d104      	bne.n	801f2d8 <ISM330DHCX_XL_FS_From_UCF+0x18>
 801f2ce:	f640 3128 	movw	r1, #2856	; 0xb28
 801f2d2:	481f      	ldr	r0, [pc, #124]	; (801f350 <ISM330DHCX_XL_FS_From_UCF+0x90>)
 801f2d4:	f7f5 ffe9 	bl	80152aa <assert_failed>
  sys_error_code_t res = SYS_NO_ERROR_CODE;
 801f2d8:	2300      	movs	r3, #0
 801f2da:	827b      	strh	r3, [r7, #18]
  stmdev_ctx_t *p_sensor_drv = (stmdev_ctx_t*) &_this->p_sensor_bus_if->m_xConnector;
 801f2dc:	687b      	ldr	r3, [r7, #4]
 801f2de:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 801f2e2:	60fb      	str	r3, [r7, #12]

  float FullScale = 2.0;
 801f2e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801f2e8:	617b      	str	r3, [r7, #20]
  ism330dhcx_fs_xl_t fs_xl;
  ism330dhcx_xl_full_scale_get(p_sensor_drv, &fs_xl);
 801f2ea:	f107 030b 	add.w	r3, r7, #11
 801f2ee:	4619      	mov	r1, r3
 801f2f0:	68f8      	ldr	r0, [r7, #12]
 801f2f2:	f7e2 fa11 	bl	8001718 <ism330dhcx_xl_full_scale_get>

  switch(fs_xl)
 801f2f6:	7afb      	ldrb	r3, [r7, #11]
 801f2f8:	2b03      	cmp	r3, #3
 801f2fa:	d81b      	bhi.n	801f334 <ISM330DHCX_XL_FS_From_UCF+0x74>
 801f2fc:	a201      	add	r2, pc, #4	; (adr r2, 801f304 <ISM330DHCX_XL_FS_From_UCF+0x44>)
 801f2fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801f302:	bf00      	nop
 801f304:	0801f315 	.word	0x0801f315
 801f308:	0801f32d 	.word	0x0801f32d
 801f30c:	0801f31d 	.word	0x0801f31d
 801f310:	0801f325 	.word	0x0801f325
  {
    case ISM330DHCX_2g:
      FullScale = 2.0;
 801f314:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801f318:	617b      	str	r3, [r7, #20]
      break;
 801f31a:	e00c      	b.n	801f336 <ISM330DHCX_XL_FS_From_UCF+0x76>

    case ISM330DHCX_4g:
      FullScale = 4.0;
 801f31c:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
 801f320:	617b      	str	r3, [r7, #20]
      break;
 801f322:	e008      	b.n	801f336 <ISM330DHCX_XL_FS_From_UCF+0x76>

    case ISM330DHCX_8g:
      FullScale = 8.0;
 801f324:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 801f328:	617b      	str	r3, [r7, #20]
      break;
 801f32a:	e004      	b.n	801f336 <ISM330DHCX_XL_FS_From_UCF+0x76>

    case ISM330DHCX_16g:
      FullScale = 16.0;
 801f32c:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 801f330:	617b      	str	r3, [r7, #20]
      break;
 801f332:	e000      	b.n	801f336 <ISM330DHCX_XL_FS_From_UCF+0x76>

    default:
      break;
 801f334:	bf00      	nop
  }

  if(!SYS_IS_ERROR_CODE(res))
 801f336:	8a7b      	ldrh	r3, [r7, #18]
 801f338:	2b00      	cmp	r3, #0
 801f33a:	d103      	bne.n	801f344 <ISM330DHCX_XL_FS_From_UCF+0x84>
  {
    _this->acc_sensor_status.FS = FullScale;
 801f33c:	687b      	ldr	r3, [r7, #4]
 801f33e:	697a      	ldr	r2, [r7, #20]
 801f340:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
  }

  return res;
 801f344:	8a7b      	ldrh	r3, [r7, #18]
}
 801f346:	4618      	mov	r0, r3
 801f348:	3718      	adds	r7, #24
 801f34a:	46bd      	mov	sp, r7
 801f34c:	bd80      	pop	{r7, pc}
 801f34e:	bf00      	nop
 801f350:	080274b8 	.word	0x080274b8

0801f354 <ISM330DHCX_GY_ODR_From_UCF>:

static sys_error_code_t ISM330DHCX_GY_ODR_From_UCF(ISM330DHCXTask *_this)
{
 801f354:	b580      	push	{r7, lr}
 801f356:	b086      	sub	sp, #24
 801f358:	af00      	add	r7, sp, #0
 801f35a:	6078      	str	r0, [r7, #4]
  assert_param(_this != NULL);
 801f35c:	687b      	ldr	r3, [r7, #4]
 801f35e:	2b00      	cmp	r3, #0
 801f360:	d104      	bne.n	801f36c <ISM330DHCX_GY_ODR_From_UCF+0x18>
 801f362:	f44f 6135 	mov.w	r1, #2896	; 0xb50
 801f366:	4834      	ldr	r0, [pc, #208]	; (801f438 <ISM330DHCX_GY_ODR_From_UCF+0xe4>)
 801f368:	f7f5 ff9f 	bl	80152aa <assert_failed>
  sys_error_code_t res = SYS_NO_ERROR_CODE;
 801f36c:	2300      	movs	r3, #0
 801f36e:	827b      	strh	r3, [r7, #18]
  stmdev_ctx_t *p_sensor_drv = (stmdev_ctx_t*) &_this->p_sensor_bus_if->m_xConnector;
 801f370:	687b      	ldr	r3, [r7, #4]
 801f372:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 801f376:	60fb      	str	r3, [r7, #12]

  float Odr = 12.5f;
 801f378:	4b30      	ldr	r3, [pc, #192]	; (801f43c <ISM330DHCX_GY_ODR_From_UCF+0xe8>)
 801f37a:	617b      	str	r3, [r7, #20]
  ism330dhcx_odr_g_t ism330dhcx_odr_g = ISM330DHCX_GY_ODR_OFF;
 801f37c:	2300      	movs	r3, #0
 801f37e:	72fb      	strb	r3, [r7, #11]
  ism330dhcx_gy_data_rate_get(p_sensor_drv, &ism330dhcx_odr_g);
 801f380:	f107 030b 	add.w	r3, r7, #11
 801f384:	4619      	mov	r1, r3
 801f386:	68f8      	ldr	r0, [r7, #12]
 801f388:	f7e2 fdbe 	bl	8001f08 <ism330dhcx_gy_data_rate_get>

  _this->gyro_sensor_status.IsActive = TRUE;
 801f38c:	687b      	ldr	r3, [r7, #4]
 801f38e:	2201      	movs	r2, #1
 801f390:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118

  switch(ism330dhcx_odr_g)
 801f394:	7afb      	ldrb	r3, [r7, #11]
 801f396:	2b0a      	cmp	r3, #10
 801f398:	d83b      	bhi.n	801f412 <ISM330DHCX_GY_ODR_From_UCF+0xbe>
 801f39a:	a201      	add	r2, pc, #4	; (adr r2, 801f3a0 <ISM330DHCX_GY_ODR_From_UCF+0x4c>)
 801f39c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801f3a0:	0801f3cd 	.word	0x0801f3cd
 801f3a4:	0801f3d7 	.word	0x0801f3d7
 801f3a8:	0801f3dd 	.word	0x0801f3dd
 801f3ac:	0801f3e3 	.word	0x0801f3e3
 801f3b0:	0801f3e9 	.word	0x0801f3e9
 801f3b4:	0801f3ef 	.word	0x0801f3ef
 801f3b8:	0801f3f5 	.word	0x0801f3f5
 801f3bc:	0801f3fb 	.word	0x0801f3fb
 801f3c0:	0801f401 	.word	0x0801f401
 801f3c4:	0801f407 	.word	0x0801f407
 801f3c8:	0801f40d 	.word	0x0801f40d
  {
    case ISM330DHCX_GY_ODR_OFF:
      _this->gyro_sensor_status.IsActive = FALSE;
 801f3cc:	687b      	ldr	r3, [r7, #4]
 801f3ce:	2200      	movs	r2, #0
 801f3d0:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
      break;
 801f3d4:	e01e      	b.n	801f414 <ISM330DHCX_GY_ODR_From_UCF+0xc0>

    case ISM330DHCX_GY_ODR_12Hz5:
      Odr = 12.5f;
 801f3d6:	4b19      	ldr	r3, [pc, #100]	; (801f43c <ISM330DHCX_GY_ODR_From_UCF+0xe8>)
 801f3d8:	617b      	str	r3, [r7, #20]
      break;
 801f3da:	e01b      	b.n	801f414 <ISM330DHCX_GY_ODR_From_UCF+0xc0>

    case ISM330DHCX_GY_ODR_26Hz:
      Odr = 26.0f;
 801f3dc:	4b18      	ldr	r3, [pc, #96]	; (801f440 <ISM330DHCX_GY_ODR_From_UCF+0xec>)
 801f3de:	617b      	str	r3, [r7, #20]
      break;
 801f3e0:	e018      	b.n	801f414 <ISM330DHCX_GY_ODR_From_UCF+0xc0>

    case ISM330DHCX_GY_ODR_52Hz:
      Odr = 52.0f;
 801f3e2:	4b18      	ldr	r3, [pc, #96]	; (801f444 <ISM330DHCX_GY_ODR_From_UCF+0xf0>)
 801f3e4:	617b      	str	r3, [r7, #20]
      break;
 801f3e6:	e015      	b.n	801f414 <ISM330DHCX_GY_ODR_From_UCF+0xc0>

    case ISM330DHCX_GY_ODR_104Hz:
      Odr = 104.0f;
 801f3e8:	4b17      	ldr	r3, [pc, #92]	; (801f448 <ISM330DHCX_GY_ODR_From_UCF+0xf4>)
 801f3ea:	617b      	str	r3, [r7, #20]
      break;
 801f3ec:	e012      	b.n	801f414 <ISM330DHCX_GY_ODR_From_UCF+0xc0>

    case ISM330DHCX_GY_ODR_208Hz:
      Odr = 208.0f;
 801f3ee:	4b17      	ldr	r3, [pc, #92]	; (801f44c <ISM330DHCX_GY_ODR_From_UCF+0xf8>)
 801f3f0:	617b      	str	r3, [r7, #20]
      break;
 801f3f2:	e00f      	b.n	801f414 <ISM330DHCX_GY_ODR_From_UCF+0xc0>

    case ISM330DHCX_GY_ODR_416Hz:
      Odr = 416.0f;
 801f3f4:	4b16      	ldr	r3, [pc, #88]	; (801f450 <ISM330DHCX_GY_ODR_From_UCF+0xfc>)
 801f3f6:	617b      	str	r3, [r7, #20]
      break;
 801f3f8:	e00c      	b.n	801f414 <ISM330DHCX_GY_ODR_From_UCF+0xc0>

    case ISM330DHCX_GY_ODR_833Hz:
      Odr = 833.0f;
 801f3fa:	4b16      	ldr	r3, [pc, #88]	; (801f454 <ISM330DHCX_GY_ODR_From_UCF+0x100>)
 801f3fc:	617b      	str	r3, [r7, #20]
      break;
 801f3fe:	e009      	b.n	801f414 <ISM330DHCX_GY_ODR_From_UCF+0xc0>

    case ISM330DHCX_GY_ODR_1666Hz:
      Odr = 1666.0f;
 801f400:	4b15      	ldr	r3, [pc, #84]	; (801f458 <ISM330DHCX_GY_ODR_From_UCF+0x104>)
 801f402:	617b      	str	r3, [r7, #20]
      break;
 801f404:	e006      	b.n	801f414 <ISM330DHCX_GY_ODR_From_UCF+0xc0>

    case ISM330DHCX_GY_ODR_3332Hz:
      Odr = 3332.0f;
 801f406:	4b15      	ldr	r3, [pc, #84]	; (801f45c <ISM330DHCX_GY_ODR_From_UCF+0x108>)
 801f408:	617b      	str	r3, [r7, #20]
      break;
 801f40a:	e003      	b.n	801f414 <ISM330DHCX_GY_ODR_From_UCF+0xc0>

    case ISM330DHCX_GY_ODR_6667Hz:
      Odr = 6667.0f;
 801f40c:	4b14      	ldr	r3, [pc, #80]	; (801f460 <ISM330DHCX_GY_ODR_From_UCF+0x10c>)
 801f40e:	617b      	str	r3, [r7, #20]
      break;
 801f410:	e000      	b.n	801f414 <ISM330DHCX_GY_ODR_From_UCF+0xc0>

    default:
      break;
 801f412:	bf00      	nop
  }

  if(!SYS_IS_ERROR_CODE(res))
 801f414:	8a7b      	ldrh	r3, [r7, #18]
 801f416:	2b00      	cmp	r3, #0
 801f418:	d108      	bne.n	801f42c <ISM330DHCX_GY_ODR_From_UCF+0xd8>
  {
    _this->gyro_sensor_status.ODR = Odr;
 801f41a:	687b      	ldr	r3, [r7, #4]
 801f41c:	697a      	ldr	r2, [r7, #20]
 801f41e:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    _this->gyro_sensor_status.MeasuredODR = 0.0f;
 801f422:	687b      	ldr	r3, [r7, #4]
 801f424:	f04f 0200 	mov.w	r2, #0
 801f428:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
  }

  return res;
 801f42c:	8a7b      	ldrh	r3, [r7, #18]
}
 801f42e:	4618      	mov	r0, r3
 801f430:	3718      	adds	r7, #24
 801f432:	46bd      	mov	sp, r7
 801f434:	bd80      	pop	{r7, pc}
 801f436:	bf00      	nop
 801f438:	080274b8 	.word	0x080274b8
 801f43c:	41480000 	.word	0x41480000
 801f440:	41d00000 	.word	0x41d00000
 801f444:	42500000 	.word	0x42500000
 801f448:	42d00000 	.word	0x42d00000
 801f44c:	43500000 	.word	0x43500000
 801f450:	43d00000 	.word	0x43d00000
 801f454:	44504000 	.word	0x44504000
 801f458:	44d04000 	.word	0x44d04000
 801f45c:	45504000 	.word	0x45504000
 801f460:	45d05800 	.word	0x45d05800

0801f464 <ISM330DHCX_GY_FS_From_UCF>:

static sys_error_code_t ISM330DHCX_GY_FS_From_UCF(ISM330DHCXTask *_this)
{
 801f464:	b580      	push	{r7, lr}
 801f466:	b086      	sub	sp, #24
 801f468:	af00      	add	r7, sp, #0
 801f46a:	6078      	str	r0, [r7, #4]
  assert_param(_this != NULL);
 801f46c:	687b      	ldr	r3, [r7, #4]
 801f46e:	2b00      	cmp	r3, #0
 801f470:	d104      	bne.n	801f47c <ISM330DHCX_GY_FS_From_UCF+0x18>
 801f472:	f640 3197 	movw	r1, #2967	; 0xb97
 801f476:	4828      	ldr	r0, [pc, #160]	; (801f518 <ISM330DHCX_GY_FS_From_UCF+0xb4>)
 801f478:	f7f5 ff17 	bl	80152aa <assert_failed>
  sys_error_code_t res = SYS_NO_ERROR_CODE;
 801f47c:	2300      	movs	r3, #0
 801f47e:	827b      	strh	r3, [r7, #18]
  stmdev_ctx_t *p_sensor_drv = (stmdev_ctx_t*) &_this->p_sensor_bus_if->m_xConnector;
 801f480:	687b      	ldr	r3, [r7, #4]
 801f482:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 801f486:	60fb      	str	r3, [r7, #12]

  float FullScale = 125;
 801f488:	4b24      	ldr	r3, [pc, #144]	; (801f51c <ISM330DHCX_GY_FS_From_UCF+0xb8>)
 801f48a:	617b      	str	r3, [r7, #20]
  ism330dhcx_fs_g_t fs_g;
  ism330dhcx_gy_full_scale_get(p_sensor_drv, &fs_g);
 801f48c:	f107 030b 	add.w	r3, r7, #11
 801f490:	4619      	mov	r1, r3
 801f492:	68f8      	ldr	r0, [r7, #12]
 801f494:	f7e2 fb76 	bl	8001b84 <ism330dhcx_gy_full_scale_get>

  switch(fs_g)
 801f498:	7afb      	ldrb	r3, [r7, #11]
 801f49a:	2b0c      	cmp	r3, #12
 801f49c:	d82e      	bhi.n	801f4fc <ISM330DHCX_GY_FS_From_UCF+0x98>
 801f49e:	a201      	add	r2, pc, #4	; (adr r2, 801f4a4 <ISM330DHCX_GY_FS_From_UCF+0x40>)
 801f4a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801f4a4:	0801f4df 	.word	0x0801f4df
 801f4a8:	0801f4f7 	.word	0x0801f4f7
 801f4ac:	0801f4d9 	.word	0x0801f4d9
 801f4b0:	0801f4fd 	.word	0x0801f4fd
 801f4b4:	0801f4e5 	.word	0x0801f4e5
 801f4b8:	0801f4fd 	.word	0x0801f4fd
 801f4bc:	0801f4fd 	.word	0x0801f4fd
 801f4c0:	0801f4fd 	.word	0x0801f4fd
 801f4c4:	0801f4eb 	.word	0x0801f4eb
 801f4c8:	0801f4fd 	.word	0x0801f4fd
 801f4cc:	0801f4fd 	.word	0x0801f4fd
 801f4d0:	0801f4fd 	.word	0x0801f4fd
 801f4d4:	0801f4f1 	.word	0x0801f4f1
  {
    case ISM330DHCX_125dps:
      FullScale = 125;
 801f4d8:	4b10      	ldr	r3, [pc, #64]	; (801f51c <ISM330DHCX_GY_FS_From_UCF+0xb8>)
 801f4da:	617b      	str	r3, [r7, #20]
      break;
 801f4dc:	e00f      	b.n	801f4fe <ISM330DHCX_GY_FS_From_UCF+0x9a>

    case ISM330DHCX_250dps:
      FullScale = 250;
 801f4de:	4b10      	ldr	r3, [pc, #64]	; (801f520 <ISM330DHCX_GY_FS_From_UCF+0xbc>)
 801f4e0:	617b      	str	r3, [r7, #20]
      break;
 801f4e2:	e00c      	b.n	801f4fe <ISM330DHCX_GY_FS_From_UCF+0x9a>

    case ISM330DHCX_500dps:
      FullScale = 500;
 801f4e4:	4b0f      	ldr	r3, [pc, #60]	; (801f524 <ISM330DHCX_GY_FS_From_UCF+0xc0>)
 801f4e6:	617b      	str	r3, [r7, #20]
      break;
 801f4e8:	e009      	b.n	801f4fe <ISM330DHCX_GY_FS_From_UCF+0x9a>

    case ISM330DHCX_1000dps:
      FullScale = 1000;
 801f4ea:	4b0f      	ldr	r3, [pc, #60]	; (801f528 <ISM330DHCX_GY_FS_From_UCF+0xc4>)
 801f4ec:	617b      	str	r3, [r7, #20]
      break;
 801f4ee:	e006      	b.n	801f4fe <ISM330DHCX_GY_FS_From_UCF+0x9a>

    case ISM330DHCX_2000dps:
      FullScale = 2000;
 801f4f0:	4b0e      	ldr	r3, [pc, #56]	; (801f52c <ISM330DHCX_GY_FS_From_UCF+0xc8>)
 801f4f2:	617b      	str	r3, [r7, #20]
      break;
 801f4f4:	e003      	b.n	801f4fe <ISM330DHCX_GY_FS_From_UCF+0x9a>

    case ISM330DHCX_4000dps:
      FullScale = 4000;
 801f4f6:	4b0e      	ldr	r3, [pc, #56]	; (801f530 <ISM330DHCX_GY_FS_From_UCF+0xcc>)
 801f4f8:	617b      	str	r3, [r7, #20]
      break;
 801f4fa:	e000      	b.n	801f4fe <ISM330DHCX_GY_FS_From_UCF+0x9a>

    default:
      break;
 801f4fc:	bf00      	nop
  }

  if(!SYS_IS_ERROR_CODE(res))
 801f4fe:	8a7b      	ldrh	r3, [r7, #18]
 801f500:	2b00      	cmp	r3, #0
 801f502:	d103      	bne.n	801f50c <ISM330DHCX_GY_FS_From_UCF+0xa8>
  {
    _this->gyro_sensor_status.FS = FullScale;
 801f504:	687b      	ldr	r3, [r7, #4]
 801f506:	697a      	ldr	r2, [r7, #20]
 801f508:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
  }

  return res;
 801f50c:	8a7b      	ldrh	r3, [r7, #18]
}
 801f50e:	4618      	mov	r0, r3
 801f510:	3718      	adds	r7, #24
 801f512:	46bd      	mov	sp, r7
 801f514:	bd80      	pop	{r7, pc}
 801f516:	bf00      	nop
 801f518:	080274b8 	.word	0x080274b8
 801f51c:	42fa0000 	.word	0x42fa0000
 801f520:	437a0000 	.word	0x437a0000
 801f524:	43fa0000 	.word	0x43fa0000
 801f528:	447a0000 	.word	0x447a0000
 801f52c:	44fa0000 	.word	0x44fa0000
 801f530:	457a0000 	.word	0x457a0000

0801f534 <ISensorSetODR>:


  // Inline functions definition
  // ***************************

  inline sys_error_code_t ISensorSetODR(ISensor_t *_this, float ODR){
 801f534:	b580      	push	{r7, lr}
 801f536:	b082      	sub	sp, #8
 801f538:	af00      	add	r7, sp, #0
 801f53a:	6078      	str	r0, [r7, #4]
 801f53c:	ed87 0a00 	vstr	s0, [r7]
    return _this->vptr->SensorSetODR(_this, ODR);
 801f540:	687b      	ldr	r3, [r7, #4]
 801f542:	681b      	ldr	r3, [r3, #0]
 801f544:	69db      	ldr	r3, [r3, #28]
 801f546:	ed97 0a00 	vldr	s0, [r7]
 801f54a:	6878      	ldr	r0, [r7, #4]
 801f54c:	4798      	blx	r3
 801f54e:	4603      	mov	r3, r0
  }
 801f550:	4618      	mov	r0, r3
 801f552:	3708      	adds	r7, #8
 801f554:	46bd      	mov	sp, r7
 801f556:	bd80      	pop	{r7, pc}

0801f558 <ISensorSetFS>:

  inline sys_error_code_t ISensorSetFS(ISensor_t *_this, float FS){
 801f558:	b580      	push	{r7, lr}
 801f55a:	b082      	sub	sp, #8
 801f55c:	af00      	add	r7, sp, #0
 801f55e:	6078      	str	r0, [r7, #4]
 801f560:	ed87 0a00 	vstr	s0, [r7]
    return _this->vptr->SensorSetFS(_this, FS);
 801f564:	687b      	ldr	r3, [r7, #4]
 801f566:	681b      	ldr	r3, [r3, #0]
 801f568:	6a1b      	ldr	r3, [r3, #32]
 801f56a:	ed97 0a00 	vldr	s0, [r7]
 801f56e:	6878      	ldr	r0, [r7, #4]
 801f570:	4798      	blx	r3
 801f572:	4603      	mov	r3, r0
  }
 801f574:	4618      	mov	r0, r3
 801f576:	3708      	adds	r7, #8
 801f578:	46bd      	mov	sp, r7
 801f57a:	bd80      	pop	{r7, pc}

0801f57c <ISensorEnable>:

  inline sys_error_code_t ISensorEnable(ISensor_t *_this){
 801f57c:	b580      	push	{r7, lr}
 801f57e:	b082      	sub	sp, #8
 801f580:	af00      	add	r7, sp, #0
 801f582:	6078      	str	r0, [r7, #4]
    return _this->vptr->SensorEnable(_this);
 801f584:	687b      	ldr	r3, [r7, #4]
 801f586:	681b      	ldr	r3, [r3, #0]
 801f588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f58a:	6878      	ldr	r0, [r7, #4]
 801f58c:	4798      	blx	r3
 801f58e:	4603      	mov	r3, r0
  }
 801f590:	4618      	mov	r0, r3
 801f592:	3708      	adds	r7, #8
 801f594:	46bd      	mov	sp, r7
 801f596:	bd80      	pop	{r7, pc}

0801f598 <ISensorDisable>:

  inline sys_error_code_t ISensorDisable(ISensor_t *_this){
 801f598:	b580      	push	{r7, lr}
 801f59a:	b082      	sub	sp, #8
 801f59c:	af00      	add	r7, sp, #0
 801f59e:	6078      	str	r0, [r7, #4]
    return _this->vptr->SensorDisable(_this);
 801f5a0:	687b      	ldr	r3, [r7, #4]
 801f5a2:	681b      	ldr	r3, [r3, #0]
 801f5a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801f5a6:	6878      	ldr	r0, [r7, #4]
 801f5a8:	4798      	blx	r3
 801f5aa:	4603      	mov	r3, r0
  }
 801f5ac:	4618      	mov	r0, r3
 801f5ae:	3708      	adds	r7, #8
 801f5b0:	46bd      	mov	sp, r7
 801f5b2:	bd80      	pop	{r7, pc}

0801f5b4 <ISensorIsEnabled>:

  inline boolean_t ISensorIsEnabled(ISensor_t *_this){
 801f5b4:	b580      	push	{r7, lr}
 801f5b6:	b082      	sub	sp, #8
 801f5b8:	af00      	add	r7, sp, #0
 801f5ba:	6078      	str	r0, [r7, #4]
    return _this->vptr->SensorIsEnabled(_this);
 801f5bc:	687b      	ldr	r3, [r7, #4]
 801f5be:	681b      	ldr	r3, [r3, #0]
 801f5c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f5c2:	6878      	ldr	r0, [r7, #4]
 801f5c4:	4798      	blx	r3
 801f5c6:	4603      	mov	r3, r0
  }
 801f5c8:	4618      	mov	r0, r3
 801f5ca:	3708      	adds	r7, #8
 801f5cc:	46bd      	mov	sp, r7
 801f5ce:	bd80      	pop	{r7, pc}

0801f5d0 <ISensorGetDescription>:

  inline SensorDescriptor_t ISensorGetDescription(ISensor_t *_this){
 801f5d0:	b580      	push	{r7, lr}
 801f5d2:	b082      	sub	sp, #8
 801f5d4:	af00      	add	r7, sp, #0
 801f5d6:	6078      	str	r0, [r7, #4]
 801f5d8:	6039      	str	r1, [r7, #0]
    return _this->vptr->SensorGetDescription(_this);
 801f5da:	683b      	ldr	r3, [r7, #0]
 801f5dc:	681b      	ldr	r3, [r3, #0]
 801f5de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801f5e0:	687a      	ldr	r2, [r7, #4]
 801f5e2:	6839      	ldr	r1, [r7, #0]
 801f5e4:	4610      	mov	r0, r2
 801f5e6:	4798      	blx	r3
  }
 801f5e8:	6878      	ldr	r0, [r7, #4]
 801f5ea:	3708      	adds	r7, #8
 801f5ec:	46bd      	mov	sp, r7
 801f5ee:	bd80      	pop	{r7, pc}

0801f5f0 <SMMessageGetSize>:
 */

#include "SMMessageParser.h"

uint16_t SMMessageGetSize(uint8_t message_id)
{
 801f5f0:	b480      	push	{r7}
 801f5f2:	b085      	sub	sp, #20
 801f5f4:	af00      	add	r7, sp, #0
 801f5f6:	4603      	mov	r3, r0
 801f5f8:	71fb      	strb	r3, [r7, #7]
  uint16_t nSize;
  switch(message_id)
 801f5fa:	79fb      	ldrb	r3, [r7, #7]
 801f5fc:	2b09      	cmp	r3, #9
 801f5fe:	dc19      	bgt.n	801f634 <SMMessageGetSize+0x44>
 801f600:	2b00      	cmp	r3, #0
 801f602:	dd2c      	ble.n	801f65e <SMMessageGetSize+0x6e>
 801f604:	3b01      	subs	r3, #1
 801f606:	2b08      	cmp	r3, #8
 801f608:	d829      	bhi.n	801f65e <SMMessageGetSize+0x6e>
 801f60a:	a201      	add	r2, pc, #4	; (adr r2, 801f610 <SMMessageGetSize+0x20>)
 801f60c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801f610:	0801f63b 	.word	0x0801f63b
 801f614:	0801f65f 	.word	0x0801f65f
 801f618:	0801f65f 	.word	0x0801f65f
 801f61c:	0801f64d 	.word	0x0801f64d
 801f620:	0801f647 	.word	0x0801f647
 801f624:	0801f653 	.word	0x0801f653
 801f628:	0801f653 	.word	0x0801f653
 801f62c:	0801f659 	.word	0x0801f659
 801f630:	0801f659 	.word	0x0801f659
 801f634:	2bfe      	cmp	r3, #254	; 0xfe
 801f636:	d003      	beq.n	801f640 <SMMessageGetSize+0x50>
 801f638:	e011      	b.n	801f65e <SMMessageGetSize+0x6e>
  {
  case SM_MESSAGE_ID_DATA_READY:
    nSize = sizeof(struct sensorDataReadyMessage_t);
 801f63a:	2310      	movs	r3, #16
 801f63c:	81fb      	strh	r3, [r7, #14]
    break;
 801f63e:	e010      	b.n	801f662 <SMMessageGetSize+0x72>

  case SM_MESSAGE_ID_FORCE_STEP:
    nSize = sizeof(struct internalMessageFE_t);
 801f640:	2302      	movs	r3, #2
 801f642:	81fb      	strh	r3, [r7, #14]
    break;
 801f644:	e00d      	b.n	801f662 <SMMessageGetSize+0x72>

  case SM_MESSAGE_ID_SD_CMD:
    nSize = sizeof(struct sdMessage_t);
 801f646:	2308      	movs	r3, #8
 801f648:	81fb      	strh	r3, [r7, #14]
    break;
 801f64a:	e00a      	b.n	801f662 <SMMessageGetSize+0x72>

  case SM_MESSAGE_ID_SENSOR_CMD:
    nSize = sizeof(struct sensorMessage_t);
 801f64c:	2308      	movs	r3, #8
 801f64e:	81fb      	strh	r3, [r7, #14]
    break;
 801f650:	e007      	b.n	801f662 <SMMessageGetSize+0x72>

  case SM_MESSAGE_ID_SPI_BUS_READ:
  case SM_MESSAGE_ID_SPI_BUS_WRITE:
    nSize = sizeof(struct spiIOMessage_t);
 801f652:	230c      	movs	r3, #12
 801f654:	81fb      	strh	r3, [r7, #14]
    break;
 801f656:	e004      	b.n	801f662 <SMMessageGetSize+0x72>

  case SM_MESSAGE_ID_I2C_BUS_READ:
  case SM_MESSAGE_ID_I2C_BUS_WRITE:
    nSize = sizeof(struct i2cIOMessage_t);
 801f658:	230c      	movs	r3, #12
 801f65a:	81fb      	strh	r3, [r7, #14]
    break;
 801f65c:	e001      	b.n	801f662 <SMMessageGetSize+0x72>

  default:
    nSize = sizeof(struct internalMessageFE_t);
 801f65e:	2302      	movs	r3, #2
 801f660:	81fb      	strh	r3, [r7, #14]
  }

  return nSize;
 801f662:	89fb      	ldrh	r3, [r7, #14]
}
 801f664:	4618      	mov	r0, r3
 801f666:	3714      	adds	r7, #20
 801f668:	46bd      	mov	sp, r7
 801f66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f66e:	4770      	bx	lr

0801f670 <SMUtilGetTimeStamp>:

/* Public API definition */
/*************************/

uint32_t SMUtilGetTimeStamp(void)
{
 801f670:	b580      	push	{r7, lr}
 801f672:	b082      	sub	sp, #8
 801f674:	af00      	add	r7, sp, #0
  uint32_t timestamp = 0;
 801f676:	2300      	movs	r3, #0
 801f678:	607b      	str	r3, [r7, #4]
  SMUtilityDriver_t *p_drv = GetSMUtilityDriver();
 801f67a:	f000 f80d 	bl	801f698 <GetSMUtilityDriver>
 801f67e:	6038      	str	r0, [r7, #0]
  if(p_drv != NULL)
 801f680:	683b      	ldr	r3, [r7, #0]
 801f682:	2b00      	cmp	r3, #0
 801f684:	d003      	beq.n	801f68e <SMUtilGetTimeStamp+0x1e>
  {
    timestamp = SMUtilityDrvGetTimeStamp(p_drv);
 801f686:	6838      	ldr	r0, [r7, #0]
 801f688:	f000 ff30 	bl	80204ec <SMUtilityDrvGetTimeStamp>
 801f68c:	6078      	str	r0, [r7, #4]
  }

  return timestamp;
 801f68e:	687b      	ldr	r3, [r7, #4]
}
 801f690:	4618      	mov	r0, r3
 801f692:	3708      	adds	r7, #8
 801f694:	46bd      	mov	sp, r7
 801f696:	bd80      	pop	{r7, pc}

0801f698 <GetSMUtilityDriver>:

__weak SMUtilityDriver_t* GetSMUtilityDriver(void)
{
 801f698:	b480      	push	{r7}
 801f69a:	af00      	add	r7, sp, #0
  return NULL;
 801f69c:	2300      	movs	r3, #0
}
 801f69e:	4618      	mov	r0, r3
 801f6a0:	46bd      	mov	sp, r7
 801f6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f6a6:	4770      	bx	lr

0801f6a8 <SPIBusIFAlloc>:

// Public API implementation.
// **************************

ABusIF *SPIBusIFAlloc(uint8_t nWhoAmI, GPIO_TypeDef* pxSSPinPort, uint16_t nSSPin, uint8_t nAutoInc)
{
 801f6a8:	b580      	push	{r7, lr}
 801f6aa:	b084      	sub	sp, #16
 801f6ac:	af00      	add	r7, sp, #0
 801f6ae:	6039      	str	r1, [r7, #0]
 801f6b0:	4611      	mov	r1, r2
 801f6b2:	461a      	mov	r2, r3
 801f6b4:	4603      	mov	r3, r0
 801f6b6:	71fb      	strb	r3, [r7, #7]
 801f6b8:	460b      	mov	r3, r1
 801f6ba:	80bb      	strh	r3, [r7, #4]
 801f6bc:	4613      	mov	r3, r2
 801f6be:	71bb      	strb	r3, [r7, #6]
  SPIBusIF *_this = NULL;
 801f6c0:	2300      	movs	r3, #0
 801f6c2:	60fb      	str	r3, [r7, #12]

  _this = SysAlloc(sizeof(SPIBusIF));
 801f6c4:	203c      	movs	r0, #60	; 0x3c
 801f6c6:	f7ef fde3 	bl	800f290 <SysAlloc>
 801f6ca:	60f8      	str	r0, [r7, #12]
  if(_this != NULL) {
 801f6cc:	68fb      	ldr	r3, [r7, #12]
 801f6ce:	2b00      	cmp	r3, #0
 801f6d0:	d024      	beq.n	801f71c <SPIBusIFAlloc+0x74>
    ABusIFInit(&_this->super, nWhoAmI);
 801f6d2:	68fb      	ldr	r3, [r7, #12]
 801f6d4:	79fa      	ldrb	r2, [r7, #7]
 801f6d6:	4611      	mov	r1, r2
 801f6d8:	4618      	mov	r0, r3
 801f6da:	f7fa fd2b 	bl	801a134 <ABusIFInit>

    _this->m_pxSSPinPort = pxSSPinPort;
 801f6de:	68fb      	ldr	r3, [r7, #12]
 801f6e0:	683a      	ldr	r2, [r7, #0]
 801f6e2:	619a      	str	r2, [r3, #24]
    _this->m_nSSPin = nSSPin;
 801f6e4:	68fb      	ldr	r3, [r7, #12]
 801f6e6:	88ba      	ldrh	r2, [r7, #4]
 801f6e8:	839a      	strh	r2, [r3, #28]
    _this->m_nAutoInc = nAutoInc;
 801f6ea:	68fb      	ldr	r3, [r7, #12]
 801f6ec:	79ba      	ldrb	r2, [r7, #6]
 801f6ee:	779a      	strb	r2, [r3, #30]

    // initialize the software resources
    if(TX_SUCCESS != tx_semaphore_create(&_this->m_xSyncObj, "SPI_IP_S", 0))
 801f6f0:	68fb      	ldr	r3, [r7, #12]
 801f6f2:	f103 0020 	add.w	r0, r3, #32
 801f6f6:	231c      	movs	r3, #28
 801f6f8:	2200      	movs	r2, #0
 801f6fa:	490b      	ldr	r1, [pc, #44]	; (801f728 <SPIBusIFAlloc+0x80>)
 801f6fc:	f7f3 fc4e 	bl	8012f9c <_txe_semaphore_create>
 801f700:	4603      	mov	r3, r0
 801f702:	2b00      	cmp	r3, #0
 801f704:	d005      	beq.n	801f712 <SPIBusIFAlloc+0x6a>
    {
      SysFree(_this);
 801f706:	68f8      	ldr	r0, [r7, #12]
 801f708:	f7ef fddc 	bl	800f2c4 <SysFree>
      _this = NULL;
 801f70c:	2300      	movs	r3, #0
 801f70e:	60fb      	str	r3, [r7, #12]
 801f710:	e004      	b.n	801f71c <SPIBusIFAlloc+0x74>
    }
    else {
      ABusIFSetHandle(&_this->super, _this);
 801f712:	68fb      	ldr	r3, [r7, #12]
 801f714:	68f9      	ldr	r1, [r7, #12]
 801f716:	4618      	mov	r0, r3
 801f718:	f7fa fcf6 	bl	801a108 <ABusIFSetHandle>
    }
  }

  return (ABusIF *)_this;
 801f71c:	68fb      	ldr	r3, [r7, #12]
}
 801f71e:	4618      	mov	r0, r3
 801f720:	3710      	adds	r7, #16
 801f722:	46bd      	mov	sp, r7
 801f724:	bd80      	pop	{r7, pc}
 801f726:	bf00      	nop
 801f728:	0802769c 	.word	0x0802769c

0801f72c <SPIBusIFWaitIOComplete>:

sys_error_code_t SPIBusIFWaitIOComplete(SPIBusIF *_this)
{
 801f72c:	b580      	push	{r7, lr}
 801f72e:	b084      	sub	sp, #16
 801f730:	af00      	add	r7, sp, #0
 801f732:	6078      	str	r0, [r7, #4]
  assert_param(_this);
 801f734:	687b      	ldr	r3, [r7, #4]
 801f736:	2b00      	cmp	r3, #0
 801f738:	d103      	bne.n	801f742 <SPIBusIFWaitIOComplete+0x16>
 801f73a:	2142      	movs	r1, #66	; 0x42
 801f73c:	480c      	ldr	r0, [pc, #48]	; (801f770 <SPIBusIFWaitIOComplete+0x44>)
 801f73e:	f7f5 fdb4 	bl	80152aa <assert_failed>
  sys_error_code_t xRes = SYS_NO_ERROR_CODE;
 801f742:	2300      	movs	r3, #0
 801f744:	81fb      	strh	r3, [r7, #14]

  if(TX_SUCCESS != tx_semaphore_get(&_this->m_xSyncObj, TX_WAIT_FOREVER))
 801f746:	687b      	ldr	r3, [r7, #4]
 801f748:	3320      	adds	r3, #32
 801f74a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801f74e:	4618      	mov	r0, r3
 801f750:	f7f3 fcc2 	bl	80130d8 <_txe_semaphore_get>
 801f754:	4603      	mov	r3, r0
 801f756:	2b00      	cmp	r3, #0
 801f758:	d004      	beq.n	801f764 <SPIBusIFWaitIOComplete+0x38>
  {
    SYS_SET_SERVICE_LEVEL_ERROR_CODE(SYS_UNDEFINED_ERROR_CODE);
 801f75a:	4b06      	ldr	r3, [pc, #24]	; (801f774 <SPIBusIFWaitIOComplete+0x48>)
 801f75c:	2202      	movs	r2, #2
 801f75e:	805a      	strh	r2, [r3, #2]
    xRes = SYS_UNDEFINED_ERROR_CODE;
 801f760:	2302      	movs	r3, #2
 801f762:	81fb      	strh	r3, [r7, #14]
  }

  return xRes;
 801f764:	89fb      	ldrh	r3, [r7, #14]
}
 801f766:	4618      	mov	r0, r3
 801f768:	3710      	adds	r7, #16
 801f76a:	46bd      	mov	sp, r7
 801f76c:	bd80      	pop	{r7, pc}
 801f76e:	bf00      	nop
 801f770:	080276a8 	.word	0x080276a8
 801f774:	20000700 	.word	0x20000700

0801f778 <SPIBusIFNotifyIOComplete>:

sys_error_code_t SPIBusIFNotifyIOComplete(SPIBusIF *_this)
{
 801f778:	b580      	push	{r7, lr}
 801f77a:	b084      	sub	sp, #16
 801f77c:	af00      	add	r7, sp, #0
 801f77e:	6078      	str	r0, [r7, #4]
  assert_param(_this);
 801f780:	687b      	ldr	r3, [r7, #4]
 801f782:	2b00      	cmp	r3, #0
 801f784:	d103      	bne.n	801f78e <SPIBusIFNotifyIOComplete+0x16>
 801f786:	2150      	movs	r1, #80	; 0x50
 801f788:	480b      	ldr	r0, [pc, #44]	; (801f7b8 <SPIBusIFNotifyIOComplete+0x40>)
 801f78a:	f7f5 fd8e 	bl	80152aa <assert_failed>
  sys_error_code_t xRes = SYS_NO_ERROR_CODE;
 801f78e:	2300      	movs	r3, #0
 801f790:	81fb      	strh	r3, [r7, #14]

  if(TX_SUCCESS != tx_semaphore_put(&_this->m_xSyncObj))
 801f792:	687b      	ldr	r3, [r7, #4]
 801f794:	3320      	adds	r3, #32
 801f796:	4618      	mov	r0, r3
 801f798:	f7f3 fce0 	bl	801315c <_txe_semaphore_put>
 801f79c:	4603      	mov	r3, r0
 801f79e:	2b00      	cmp	r3, #0
 801f7a0:	d004      	beq.n	801f7ac <SPIBusIFNotifyIOComplete+0x34>
  {
    SYS_SET_SERVICE_LEVEL_ERROR_CODE(SYS_UNDEFINED_ERROR_CODE);
 801f7a2:	4b06      	ldr	r3, [pc, #24]	; (801f7bc <SPIBusIFNotifyIOComplete+0x44>)
 801f7a4:	2202      	movs	r2, #2
 801f7a6:	805a      	strh	r2, [r3, #2]
    xRes = SYS_UNDEFINED_ERROR_CODE;
 801f7a8:	2302      	movs	r3, #2
 801f7aa:	81fb      	strh	r3, [r7, #14]
  }

  return xRes;
 801f7ac:	89fb      	ldrh	r3, [r7, #14]
}
 801f7ae:	4618      	mov	r0, r3
 801f7b0:	3710      	adds	r7, #16
 801f7b2:	46bd      	mov	sp, r7
 801f7b4:	bd80      	pop	{r7, pc}
 801f7b6:	bf00      	nop
 801f7b8:	080276a8 	.word	0x080276a8
 801f7bc:	20000700 	.word	0x20000700

0801f7c0 <AMTInitEx>:
sys_error_code_t AMTInitEx(AManagedTaskEx *_this) {
 801f7c0:	b480      	push	{r7}
 801f7c2:	b083      	sub	sp, #12
 801f7c4:	af00      	add	r7, sp, #0
 801f7c6:	6078      	str	r0, [r7, #4]
  _this->m_pNext = NULL;
 801f7c8:	687b      	ldr	r3, [r7, #4]
 801f7ca:	2200      	movs	r2, #0
 801f7cc:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  _this->m_pfPMState2FuncMap = NULL;
 801f7d0:	687b      	ldr	r3, [r7, #4]
 801f7d2:	2200      	movs	r2, #0
 801f7d4:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
  _this->m_pPMState2PMStateMap = NULL;
 801f7d8:	687b      	ldr	r3, [r7, #4]
 801f7da:	2200      	movs	r2, #0
 801f7dc:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  _this->m_pfPMState2FuncMap = NULL;
 801f7e0:	687b      	ldr	r3, [r7, #4]
 801f7e2:	2200      	movs	r2, #0
 801f7e4:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
  _this->m_pPMState2PMStateMap = NULL;
 801f7e8:	687b      	ldr	r3, [r7, #4]
 801f7ea:	2200      	movs	r2, #0
 801f7ec:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  _this->m_xStatus.nDelayPowerModeSwitch = 1;
 801f7f0:	687a      	ldr	r2, [r7, #4]
 801f7f2:	f892 30c0 	ldrb.w	r3, [r2, #192]	; 0xc0
 801f7f6:	f043 0301 	orr.w	r3, r3, #1
 801f7fa:	f882 30c0 	strb.w	r3, [r2, #192]	; 0xc0
  _this->m_xStatus.nPowerModeSwitchPending = 0;
 801f7fe:	687a      	ldr	r2, [r7, #4]
 801f800:	f892 30c0 	ldrb.w	r3, [r2, #192]	; 0xc0
 801f804:	f36f 0341 	bfc	r3, #1, #1
 801f808:	f882 30c0 	strb.w	r3, [r2, #192]	; 0xc0
  _this->m_xStatus.nPowerModeSwitchDone = 0;
 801f80c:	687a      	ldr	r2, [r7, #4]
 801f80e:	f892 30c0 	ldrb.w	r3, [r2, #192]	; 0xc0
 801f812:	f36f 0382 	bfc	r3, #2, #1
 801f816:	f882 30c0 	strb.w	r3, [r2, #192]	; 0xc0
  _this->m_xStatus.nIsTaskStillRunning = 0;
 801f81a:	687a      	ldr	r2, [r7, #4]
 801f81c:	f892 30c0 	ldrb.w	r3, [r2, #192]	; 0xc0
 801f820:	f36f 03c3 	bfc	r3, #3, #1
 801f824:	f882 30c0 	strb.w	r3, [r2, #192]	; 0xc0
  _this->m_xStatus.nErrorCount = 0;
 801f828:	687a      	ldr	r2, [r7, #4]
 801f82a:	f892 30c0 	ldrb.w	r3, [r2, #192]	; 0xc0
 801f82e:	f36f 1305 	bfc	r3, #4, #2
 801f832:	f882 30c0 	strb.w	r3, [r2, #192]	; 0xc0
  _this->m_xStatus.nAutoStart = 0;
 801f836:	687a      	ldr	r2, [r7, #4]
 801f838:	f892 30c0 	ldrb.w	r3, [r2, #192]	; 0xc0
 801f83c:	f36f 1386 	bfc	r3, #6, #1
 801f840:	f882 30c0 	strb.w	r3, [r2, #192]	; 0xc0
  _this->m_xStatus.nReserved = 1; // this identifies the task as an AManagedTaskEx.
 801f844:	687a      	ldr	r2, [r7, #4]
 801f846:	f892 30c0 	ldrb.w	r3, [r2, #192]	; 0xc0
 801f84a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801f84e:	f882 30c0 	strb.w	r3, [r2, #192]	; 0xc0
  _this->m_xStatusEx.nIsWaitingNoTimeout = 0;
 801f852:	687a      	ldr	r2, [r7, #4]
 801f854:	f892 30c1 	ldrb.w	r3, [r2, #193]	; 0xc1
 801f858:	f36f 0300 	bfc	r3, #0, #1
 801f85c:	f882 30c1 	strb.w	r3, [r2, #193]	; 0xc1
  _this->m_xStatusEx.nPowerModeClass = E_PM_CLASS_0;
 801f860:	687a      	ldr	r2, [r7, #4]
 801f862:	f892 30c1 	ldrb.w	r3, [r2, #193]	; 0xc1
 801f866:	f36f 0342 	bfc	r3, #1, #2
 801f86a:	f882 30c1 	strb.w	r3, [r2, #193]	; 0xc1
  _this->m_xStatusEx.nUnused = 0;
 801f86e:	687a      	ldr	r2, [r7, #4]
 801f870:	f892 30c1 	ldrb.w	r3, [r2, #193]	; 0xc1
 801f874:	f36f 03c6 	bfc	r3, #3, #4
 801f878:	f882 30c1 	strb.w	r3, [r2, #193]	; 0xc1
  _this->m_xStatusEx.nReserved = 0;
 801f87c:	687a      	ldr	r2, [r7, #4]
 801f87e:	f892 30c1 	ldrb.w	r3, [r2, #193]	; 0xc1
 801f882:	f36f 13c7 	bfc	r3, #7, #1
 801f886:	f882 30c1 	strb.w	r3, [r2, #193]	; 0xc1
  return SYS_NO_ERROR_CODE;
 801f88a:	2300      	movs	r3, #0
}
 801f88c:	4618      	mov	r0, r3
 801f88e:	370c      	adds	r7, #12
 801f890:	46bd      	mov	sp, r7
 801f892:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f896:	4770      	bx	lr

0801f898 <AMTExSetInactiveState>:
sys_error_code_t AMTExSetInactiveState(AManagedTaskEx *_this, boolean_t bBlockedSuspended) {
 801f898:	b580      	push	{r7, lr}
 801f89a:	b082      	sub	sp, #8
 801f89c:	af00      	add	r7, sp, #0
 801f89e:	6078      	str	r0, [r7, #4]
 801f8a0:	460b      	mov	r3, r1
 801f8a2:	70fb      	strb	r3, [r7, #3]
  assert_param(_this);
 801f8a4:	687b      	ldr	r3, [r7, #4]
 801f8a6:	2b00      	cmp	r3, #0
 801f8a8:	d103      	bne.n	801f8b2 <AMTExSetInactiveState+0x1a>
 801f8aa:	21a6      	movs	r1, #166	; 0xa6
 801f8ac:	4807      	ldr	r0, [pc, #28]	; (801f8cc <AMTExSetInactiveState+0x34>)
 801f8ae:	f7f5 fcfc 	bl	80152aa <assert_failed>
  _this->m_xStatusEx.nIsWaitingNoTimeout = (uint8_t)bBlockedSuspended;
 801f8b2:	687a      	ldr	r2, [r7, #4]
 801f8b4:	f892 30c1 	ldrb.w	r3, [r2, #193]	; 0xc1
 801f8b8:	78f9      	ldrb	r1, [r7, #3]
 801f8ba:	f361 0300 	bfi	r3, r1, #0, #1
 801f8be:	f882 30c1 	strb.w	r3, [r2, #193]	; 0xc1
  return SYS_NO_ERROR_CODE;
 801f8c2:	2300      	movs	r3, #0
}
 801f8c4:	4618      	mov	r0, r3
 801f8c6:	3708      	adds	r7, #8
 801f8c8:	46bd      	mov	sp, r7
 801f8ca:	bd80      	pop	{r7, pc}
 801f8cc:	08027714 	.word	0x08027714

0801f8d0 <AMTExIsTaskInactive>:
boolean_t AMTExIsTaskInactive(AManagedTaskEx *_this){
 801f8d0:	b580      	push	{r7, lr}
 801f8d2:	b082      	sub	sp, #8
 801f8d4:	af00      	add	r7, sp, #0
 801f8d6:	6078      	str	r0, [r7, #4]
  assert_param(_this);
 801f8d8:	687b      	ldr	r3, [r7, #4]
 801f8da:	2b00      	cmp	r3, #0
 801f8dc:	d103      	bne.n	801f8e6 <AMTExIsTaskInactive+0x16>
 801f8de:	21af      	movs	r1, #175	; 0xaf
 801f8e0:	4808      	ldr	r0, [pc, #32]	; (801f904 <AMTExIsTaskInactive+0x34>)
 801f8e2:	f7f5 fce2 	bl	80152aa <assert_failed>
  return (boolean_t)_this->m_xStatusEx.nIsWaitingNoTimeout;
 801f8e6:	687b      	ldr	r3, [r7, #4]
 801f8e8:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 801f8ec:	f003 0301 	and.w	r3, r3, #1
 801f8f0:	b2db      	uxtb	r3, r3
 801f8f2:	2b00      	cmp	r3, #0
 801f8f4:	bf14      	ite	ne
 801f8f6:	2301      	movne	r3, #1
 801f8f8:	2300      	moveq	r3, #0
 801f8fa:	b2db      	uxtb	r3, r3
}
 801f8fc:	4618      	mov	r0, r3
 801f8fe:	3708      	adds	r7, #8
 801f900:	46bd      	mov	sp, r7
 801f902:	bd80      	pop	{r7, pc}
 801f904:	08027714 	.word	0x08027714

0801f908 <AMTExSetPMClass>:
sys_error_code_t AMTExSetPMClass(AManagedTaskEx *_this, EPMClass eNewPMClass) {
 801f908:	b580      	push	{r7, lr}
 801f90a:	b082      	sub	sp, #8
 801f90c:	af00      	add	r7, sp, #0
 801f90e:	6078      	str	r0, [r7, #4]
 801f910:	460b      	mov	r3, r1
 801f912:	70fb      	strb	r3, [r7, #3]
  assert_param(_this);
 801f914:	687b      	ldr	r3, [r7, #4]
 801f916:	2b00      	cmp	r3, #0
 801f918:	d103      	bne.n	801f922 <AMTExSetPMClass+0x1a>
 801f91a:	21b6      	movs	r1, #182	; 0xb6
 801f91c:	4809      	ldr	r0, [pc, #36]	; (801f944 <AMTExSetPMClass+0x3c>)
 801f91e:	f7f5 fcc4 	bl	80152aa <assert_failed>
  _this->m_xStatusEx.nPowerModeClass = (uint8_t)eNewPMClass;
 801f922:	78fb      	ldrb	r3, [r7, #3]
 801f924:	f003 0303 	and.w	r3, r3, #3
 801f928:	b2d9      	uxtb	r1, r3
 801f92a:	687a      	ldr	r2, [r7, #4]
 801f92c:	f892 30c1 	ldrb.w	r3, [r2, #193]	; 0xc1
 801f930:	f361 0342 	bfi	r3, r1, #1, #2
 801f934:	f882 30c1 	strb.w	r3, [r2, #193]	; 0xc1
  return SYS_NO_ERROR_CODE;
 801f938:	2300      	movs	r3, #0
}
 801f93a:	4618      	mov	r0, r3
 801f93c:	3708      	adds	r7, #8
 801f93e:	46bd      	mov	sp, r7
 801f940:	bd80      	pop	{r7, pc}
 801f942:	bf00      	nop
 801f944:	08027714 	.word	0x08027714

0801f948 <IDrvInit>:
sys_error_code_t IDrvInit(IDriver *_this, void *pParams) {
 801f948:	b580      	push	{r7, lr}
 801f94a:	b082      	sub	sp, #8
 801f94c:	af00      	add	r7, sp, #0
 801f94e:	6078      	str	r0, [r7, #4]
 801f950:	6039      	str	r1, [r7, #0]
  return _this->vptr->Init(_this, pParams);
 801f952:	687b      	ldr	r3, [r7, #4]
 801f954:	681b      	ldr	r3, [r3, #0]
 801f956:	681b      	ldr	r3, [r3, #0]
 801f958:	6839      	ldr	r1, [r7, #0]
 801f95a:	6878      	ldr	r0, [r7, #4]
 801f95c:	4798      	blx	r3
 801f95e:	4603      	mov	r3, r0
}
 801f960:	4618      	mov	r0, r3
 801f962:	3708      	adds	r7, #8
 801f964:	46bd      	mov	sp, r7
 801f966:	bd80      	pop	{r7, pc}

0801f968 <IDrvStart>:
sys_error_code_t IDrvStart(IDriver *_this) {
 801f968:	b580      	push	{r7, lr}
 801f96a:	b082      	sub	sp, #8
 801f96c:	af00      	add	r7, sp, #0
 801f96e:	6078      	str	r0, [r7, #4]
  return _this->vptr->Start(_this);
 801f970:	687b      	ldr	r3, [r7, #4]
 801f972:	681b      	ldr	r3, [r3, #0]
 801f974:	685b      	ldr	r3, [r3, #4]
 801f976:	6878      	ldr	r0, [r7, #4]
 801f978:	4798      	blx	r3
 801f97a:	4603      	mov	r3, r0
}
 801f97c:	4618      	mov	r0, r3
 801f97e:	3708      	adds	r7, #8
 801f980:	46bd      	mov	sp, r7
 801f982:	bd80      	pop	{r7, pc}

0801f984 <IDrvDoEnterPowerMode>:
sys_error_code_t IDrvStop(IDriver *_this) {
  return _this->vptr->Stop(_this);
}

SYS_DEFINE_STATIC_INLINE
sys_error_code_t IDrvDoEnterPowerMode(IDriver *_this, const EPowerMode eActivePowerMode, const EPowerMode eNewPowerMode) {
 801f984:	b580      	push	{r7, lr}
 801f986:	b082      	sub	sp, #8
 801f988:	af00      	add	r7, sp, #0
 801f98a:	6078      	str	r0, [r7, #4]
 801f98c:	460b      	mov	r3, r1
 801f98e:	70fb      	strb	r3, [r7, #3]
 801f990:	4613      	mov	r3, r2
 801f992:	70bb      	strb	r3, [r7, #2]
  return _this->vptr->DoEnterPowerMode(_this, eActivePowerMode, eNewPowerMode);
 801f994:	687b      	ldr	r3, [r7, #4]
 801f996:	681b      	ldr	r3, [r3, #0]
 801f998:	68db      	ldr	r3, [r3, #12]
 801f99a:	78ba      	ldrb	r2, [r7, #2]
 801f99c:	78f9      	ldrb	r1, [r7, #3]
 801f99e:	6878      	ldr	r0, [r7, #4]
 801f9a0:	4798      	blx	r3
 801f9a2:	4603      	mov	r3, r0
}
 801f9a4:	4618      	mov	r0, r3
 801f9a6:	3708      	adds	r7, #8
 801f9a8:	46bd      	mov	sp, r7
 801f9aa:	bd80      	pop	{r7, pc}

0801f9ac <IIODrvWrite>:

// Inline function definition.
// ***************************

SYS_DEFINE_STATIC_INLINE
sys_error_code_t IIODrvWrite(IIODriver *_this, uint8_t *pDataBuffer, uint16_t nDataSize, uint16_t nChannel) {
 801f9ac:	b590      	push	{r4, r7, lr}
 801f9ae:	b085      	sub	sp, #20
 801f9b0:	af00      	add	r7, sp, #0
 801f9b2:	60f8      	str	r0, [r7, #12]
 801f9b4:	60b9      	str	r1, [r7, #8]
 801f9b6:	4611      	mov	r1, r2
 801f9b8:	461a      	mov	r2, r3
 801f9ba:	460b      	mov	r3, r1
 801f9bc:	80fb      	strh	r3, [r7, #6]
 801f9be:	4613      	mov	r3, r2
 801f9c0:	80bb      	strh	r3, [r7, #4]
  return _this->vptr->Write(_this, pDataBuffer, nDataSize, nChannel);
 801f9c2:	68fb      	ldr	r3, [r7, #12]
 801f9c4:	681b      	ldr	r3, [r3, #0]
 801f9c6:	695c      	ldr	r4, [r3, #20]
 801f9c8:	88bb      	ldrh	r3, [r7, #4]
 801f9ca:	88fa      	ldrh	r2, [r7, #6]
 801f9cc:	68b9      	ldr	r1, [r7, #8]
 801f9ce:	68f8      	ldr	r0, [r7, #12]
 801f9d0:	47a0      	blx	r4
 801f9d2:	4603      	mov	r3, r0
}
 801f9d4:	4618      	mov	r0, r3
 801f9d6:	3714      	adds	r7, #20
 801f9d8:	46bd      	mov	sp, r7
 801f9da:	bd90      	pop	{r4, r7, pc}

0801f9dc <IIODrvRead>:

SYS_DEFINE_STATIC_INLINE
sys_error_code_t IIODrvRead(IIODriver *_this, uint8_t *pDataBuffer, uint16_t nDataSize, uint16_t nChannel) {
 801f9dc:	b590      	push	{r4, r7, lr}
 801f9de:	b085      	sub	sp, #20
 801f9e0:	af00      	add	r7, sp, #0
 801f9e2:	60f8      	str	r0, [r7, #12]
 801f9e4:	60b9      	str	r1, [r7, #8]
 801f9e6:	4611      	mov	r1, r2
 801f9e8:	461a      	mov	r2, r3
 801f9ea:	460b      	mov	r3, r1
 801f9ec:	80fb      	strh	r3, [r7, #6]
 801f9ee:	4613      	mov	r3, r2
 801f9f0:	80bb      	strh	r3, [r7, #4]
  return _this->vptr->Read(_this, pDataBuffer, nDataSize, nChannel);
 801f9f2:	68fb      	ldr	r3, [r7, #12]
 801f9f4:	681b      	ldr	r3, [r3, #0]
 801f9f6:	699c      	ldr	r4, [r3, #24]
 801f9f8:	88bb      	ldrh	r3, [r7, #4]
 801f9fa:	88fa      	ldrh	r2, [r7, #6]
 801f9fc:	68b9      	ldr	r1, [r7, #8]
 801f9fe:	68f8      	ldr	r0, [r7, #12]
 801fa00:	47a0      	blx	r4
 801fa02:	4603      	mov	r3, r0
}
 801fa04:	4618      	mov	r0, r3
 801fa06:	3714      	adds	r7, #20
 801fa08:	46bd      	mov	sp, r7
 801fa0a:	bd90      	pop	{r4, r7, pc}

0801fa0c <SPIBusTaskAlloc>:

/* Public API definition */
/*************************/

AManagedTaskEx* SPIBusTaskAlloc(const void *p_mx_drv_cfg)
{
 801fa0c:	b580      	push	{r7, lr}
 801fa0e:	b082      	sub	sp, #8
 801fa10:	af00      	add	r7, sp, #0
 801fa12:	6078      	str	r0, [r7, #4]
  // In this application there is only one Keyboard task,
  // so this allocator implement the singleton design pattern.

  // Initialize the super class
  AMTInitEx(&s_xTaskObj.super);
 801fa14:	4807      	ldr	r0, [pc, #28]	; (801fa34 <SPIBusTaskAlloc+0x28>)
 801fa16:	f7ff fed3 	bl	801f7c0 <AMTInitEx>

  s_xTaskObj.super.vptr = &sTheClass.vtbl;
 801fa1a:	4b06      	ldr	r3, [pc, #24]	; (801fa34 <SPIBusTaskAlloc+0x28>)
 801fa1c:	4a06      	ldr	r2, [pc, #24]	; (801fa38 <SPIBusTaskAlloc+0x2c>)
 801fa1e:	601a      	str	r2, [r3, #0]
  s_xTaskObj.p_mx_drv_cfg = p_mx_drv_cfg;
 801fa20:	4a04      	ldr	r2, [pc, #16]	; (801fa34 <SPIBusTaskAlloc+0x28>)
 801fa22:	687b      	ldr	r3, [r7, #4]
 801fa24:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8

  return (AManagedTaskEx*) &s_xTaskObj;
 801fa28:	4b02      	ldr	r3, [pc, #8]	; (801fa34 <SPIBusTaskAlloc+0x28>)
}
 801fa2a:	4618      	mov	r0, r3
 801fa2c:	3708      	adds	r7, #8
 801fa2e:	46bd      	mov	sp, r7
 801fa30:	bd80      	pop	{r7, pc}
 801fa32:	bf00      	nop
 801fa34:	2003abe0 	.word	0x2003abe0
 801fa38:	08035d50 	.word	0x08035d50

0801fa3c <SPIBusTaskConnectDevice>:

sys_error_code_t SPIBusTaskConnectDevice(SPIBusTask *_this, SPIBusIF *pxBusIF)
{
 801fa3c:	b580      	push	{r7, lr}
 801fa3e:	b082      	sub	sp, #8
 801fa40:	af00      	add	r7, sp, #0
 801fa42:	6078      	str	r0, [r7, #4]
 801fa44:	6039      	str	r1, [r7, #0]
  assert_param(_this);
 801fa46:	687b      	ldr	r3, [r7, #4]
 801fa48:	2b00      	cmp	r3, #0
 801fa4a:	d103      	bne.n	801fa54 <SPIBusTaskConnectDevice+0x18>
 801fa4c:	219c      	movs	r1, #156	; 0x9c
 801fa4e:	4808      	ldr	r0, [pc, #32]	; (801fa70 <SPIBusTaskConnectDevice+0x34>)
 801fa50:	f7f5 fc2b 	bl	80152aa <assert_failed>

  return IBusConnectDevice(_this->m_pBusIF, &pxBusIF->super);
 801fa54:	687b      	ldr	r3, [r7, #4]
 801fa56:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 801fa5a:	683a      	ldr	r2, [r7, #0]
 801fa5c:	4611      	mov	r1, r2
 801fa5e:	4618      	mov	r0, r3
 801fa60:	f7fa fbca 	bl	801a1f8 <IBusConnectDevice>
 801fa64:	4603      	mov	r3, r0
}
 801fa66:	4618      	mov	r0, r3
 801fa68:	3708      	adds	r7, #8
 801fa6a:	46bd      	mov	sp, r7
 801fa6c:	bd80      	pop	{r7, pc}
 801fa6e:	bf00      	nop
 801fa70:	08027760 	.word	0x08027760

0801fa74 <SPIBusTask_vtblHardwareInit>:

// AManagedTask virtual functions definition
// *****************************************

sys_error_code_t SPIBusTask_vtblHardwareInit(AManagedTask *_this, void *pParams)
{
 801fa74:	b580      	push	{r7, lr}
 801fa76:	b086      	sub	sp, #24
 801fa78:	af00      	add	r7, sp, #0
 801fa7a:	6078      	str	r0, [r7, #4]
 801fa7c:	6039      	str	r1, [r7, #0]
  assert_param(_this);
 801fa7e:	687b      	ldr	r3, [r7, #4]
 801fa80:	2b00      	cmp	r3, #0
 801fa82:	d103      	bne.n	801fa8c <SPIBusTask_vtblHardwareInit+0x18>
 801fa84:	21b4      	movs	r1, #180	; 0xb4
 801fa86:	4817      	ldr	r0, [pc, #92]	; (801fae4 <SPIBusTask_vtblHardwareInit+0x70>)
 801fa88:	f7f5 fc0f 	bl	80152aa <assert_failed>
  sys_error_code_t xRes = SYS_NO_ERROR_CODE;
 801fa8c:	2300      	movs	r3, #0
 801fa8e:	82fb      	strh	r3, [r7, #22]
  SPIBusTask *pObj = (SPIBusTask*) _this;
 801fa90:	687b      	ldr	r3, [r7, #4]
 801fa92:	613b      	str	r3, [r7, #16]

  pObj->m_pxDriver = SPIMasterDriverAlloc();
 801fa94:	f000 fd40 	bl	8020518 <SPIMasterDriverAlloc>
 801fa98:	4602      	mov	r2, r0
 801fa9a:	693b      	ldr	r3, [r7, #16]
 801fa9c:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  if(pObj->m_pxDriver == NULL)
 801faa0:	693b      	ldr	r3, [r7, #16]
 801faa2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 801faa6:	2b00      	cmp	r3, #0
 801faa8:	d103      	bne.n	801fab2 <SPIBusTask_vtblHardwareInit+0x3e>
  {
    SYS_DEBUGF(SYS_DBG_LEVEL_SEVERE, ("SPIBus task: unable to alloc driver object.\r\n"));
    xRes = SYS_GET_LAST_LOW_LEVEL_ERROR_CODE();
 801faaa:	4b0f      	ldr	r3, [pc, #60]	; (801fae8 <SPIBusTask_vtblHardwareInit+0x74>)
 801faac:	881b      	ldrh	r3, [r3, #0]
 801faae:	82fb      	strh	r3, [r7, #22]
 801fab0:	e013      	b.n	801fada <SPIBusTask_vtblHardwareInit+0x66>
  }
  else
  {
    SPIMasterDriverParams_t driver_cfg =
 801fab2:	f107 0308 	add.w	r3, r7, #8
 801fab6:	2200      	movs	r2, #0
 801fab8:	601a      	str	r2, [r3, #0]
 801faba:	605a      	str	r2, [r3, #4]
    {
        .p_mx_spi_cfg = (void*) pObj->p_mx_drv_cfg };
 801fabc:	693b      	ldr	r3, [r7, #16]
 801fabe:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
    SPIMasterDriverParams_t driver_cfg =
 801fac2:	60bb      	str	r3, [r7, #8]
    xRes = IDrvInit((IDriver*) pObj->m_pxDriver, &driver_cfg);
 801fac4:	693b      	ldr	r3, [r7, #16]
 801fac6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 801faca:	f107 0208 	add.w	r2, r7, #8
 801face:	4611      	mov	r1, r2
 801fad0:	4618      	mov	r0, r3
 801fad2:	f7ff ff39 	bl	801f948 <IDrvInit>
 801fad6:	4603      	mov	r3, r0
 801fad8:	82fb      	strh	r3, [r7, #22]
    {
      SYS_DEBUGF(SYS_DBG_LEVEL_SEVERE, ("SPIBus task: error during driver initialization\r\n"));
    }
  }

  return xRes;
 801fada:	8afb      	ldrh	r3, [r7, #22]
}
 801fadc:	4618      	mov	r0, r3
 801fade:	3718      	adds	r7, #24
 801fae0:	46bd      	mov	sp, r7
 801fae2:	bd80      	pop	{r7, pc}
 801fae4:	08027760 	.word	0x08027760
 801fae8:	20000700 	.word	0x20000700

0801faec <SPIBusTask_vtblOnCreateTask>:

sys_error_code_t SPIBusTask_vtblOnCreateTask(AManagedTask *_this, tx_entry_function_t *pvTaskCode, CHAR **pcName,
VOID **pvStackStart,
                                             ULONG *pnStackDepth, UINT *pxPriority, UINT *pnPreemptThreshold, ULONG *pnTimeSlice, ULONG *pnAutoStart,
                                             ULONG *pParams)
{
 801faec:	b580      	push	{r7, lr}
 801faee:	b08a      	sub	sp, #40	; 0x28
 801faf0:	af02      	add	r7, sp, #8
 801faf2:	60f8      	str	r0, [r7, #12]
 801faf4:	60b9      	str	r1, [r7, #8]
 801faf6:	607a      	str	r2, [r7, #4]
 801faf8:	603b      	str	r3, [r7, #0]
  assert_param(_this);
 801fafa:	68fb      	ldr	r3, [r7, #12]
 801fafc:	2b00      	cmp	r3, #0
 801fafe:	d103      	bne.n	801fb08 <SPIBusTask_vtblOnCreateTask+0x1c>
 801fb00:	21d2      	movs	r1, #210	; 0xd2
 801fb02:	483d      	ldr	r0, [pc, #244]	; (801fbf8 <SPIBusTask_vtblOnCreateTask+0x10c>)
 801fb04:	f7f5 fbd1 	bl	80152aa <assert_failed>
  sys_error_code_t xRes = SYS_NO_ERROR_CODE;
 801fb08:	2300      	movs	r3, #0
 801fb0a:	83fb      	strh	r3, [r7, #30]
  SPIBusTask *pObj = (SPIBusTask*) _this;
 801fb0c:	68fb      	ldr	r3, [r7, #12]
 801fb0e:	61bb      	str	r3, [r7, #24]

  // initialize the software resources.

  uint16_t nItemSize = SMMessageGetSize(SM_MESSAGE_ID_SPI_BUS_READ);
 801fb10:	2006      	movs	r0, #6
 801fb12:	f7ff fd6d 	bl	801f5f0 <SMMessageGetSize>
 801fb16:	4603      	mov	r3, r0
 801fb18:	82fb      	strh	r3, [r7, #22]
  VOID *pvQueueItemsBuff = SysAlloc(SPIBUS_TASK_CFG_INQUEUE_LENGTH * nItemSize);
 801fb1a:	8afa      	ldrh	r2, [r7, #22]
 801fb1c:	4613      	mov	r3, r2
 801fb1e:	009b      	lsls	r3, r3, #2
 801fb20:	4413      	add	r3, r2
 801fb22:	009b      	lsls	r3, r3, #2
 801fb24:	4618      	mov	r0, r3
 801fb26:	f7ef fbb3 	bl	800f290 <SysAlloc>
 801fb2a:	6138      	str	r0, [r7, #16]

  if(pvQueueItemsBuff != NULL)
 801fb2c:	693b      	ldr	r3, [r7, #16]
 801fb2e:	2b00      	cmp	r3, #0
 801fb30:	d05d      	beq.n	801fbee <SPIBusTask_vtblOnCreateTask+0x102>
  {
    if(TX_SUCCESS == tx_queue_create(&pObj->m_xInQueue, "SPIBUS_Q", nItemSize / 4, pvQueueItemsBuff, SPIBUS_TASK_CFG_INQUEUE_LENGTH * nItemSize))
 801fb32:	69bb      	ldr	r3, [r7, #24]
 801fb34:	f103 00d0 	add.w	r0, r3, #208	; 0xd0
 801fb38:	8afb      	ldrh	r3, [r7, #22]
 801fb3a:	089b      	lsrs	r3, r3, #2
 801fb3c:	b29b      	uxth	r3, r3
 801fb3e:	4619      	mov	r1, r3
 801fb40:	8afa      	ldrh	r2, [r7, #22]
 801fb42:	4613      	mov	r3, r2
 801fb44:	009b      	lsls	r3, r3, #2
 801fb46:	4413      	add	r3, r2
 801fb48:	009b      	lsls	r3, r3, #2
 801fb4a:	461a      	mov	r2, r3
 801fb4c:	2338      	movs	r3, #56	; 0x38
 801fb4e:	9301      	str	r3, [sp, #4]
 801fb50:	9200      	str	r2, [sp, #0]
 801fb52:	693b      	ldr	r3, [r7, #16]
 801fb54:	460a      	mov	r2, r1
 801fb56:	4929      	ldr	r1, [pc, #164]	; (801fbfc <SPIBusTask_vtblOnCreateTask+0x110>)
 801fb58:	f7f3 f818 	bl	8012b8c <_txe_queue_create>
 801fb5c:	4603      	mov	r3, r0
 801fb5e:	2b00      	cmp	r3, #0
 801fb60:	d140      	bne.n	801fbe4 <SPIBusTask_vtblOnCreateTask+0xf8>
    {
      pObj->m_pBusIF = SysAlloc(sizeof(SPIBusTaskIBus));
 801fb62:	2008      	movs	r0, #8
 801fb64:	f7ef fb94 	bl	800f290 <SysAlloc>
 801fb68:	4602      	mov	r2, r0
 801fb6a:	69bb      	ldr	r3, [r7, #24]
 801fb6c:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
      if(pObj->m_pBusIF != NULL)
 801fb70:	69bb      	ldr	r3, [r7, #24]
 801fb72:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 801fb76:	2b00      	cmp	r3, #0
 801fb78:	d02e      	beq.n	801fbd8 <SPIBusTask_vtblOnCreateTask+0xec>
      {
        pObj->m_pBusIF->vptr = &s_xIBus_vtbl;
 801fb7a:	69bb      	ldr	r3, [r7, #24]
 801fb7c:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 801fb80:	4a1f      	ldr	r2, [pc, #124]	; (801fc00 <SPIBusTask_vtblOnCreateTask+0x114>)
 801fb82:	601a      	str	r2, [r3, #0]
        ((SPIBusTaskIBus*) pObj->m_pBusIF)->m_pxOwner = pObj;
 801fb84:	69bb      	ldr	r3, [r7, #24]
 801fb86:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 801fb8a:	69ba      	ldr	r2, [r7, #24]
 801fb8c:	605a      	str	r2, [r3, #4]
        pObj->m_nConnectedDevices = 0;
 801fb8e:	69bb      	ldr	r3, [r7, #24]
 801fb90:	2200      	movs	r2, #0
 801fb92:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
        _this->m_pfPMState2FuncMap = sTheClass.p_pm_state2func_map;
 801fb96:	68fb      	ldr	r3, [r7, #12]
 801fb98:	4a1a      	ldr	r2, [pc, #104]	; (801fc04 <SPIBusTask_vtblOnCreateTask+0x118>)
 801fb9a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

        *pvTaskCode = AMTExRun;
 801fb9e:	68bb      	ldr	r3, [r7, #8]
 801fba0:	4a19      	ldr	r2, [pc, #100]	; (801fc08 <SPIBusTask_vtblOnCreateTask+0x11c>)
 801fba2:	601a      	str	r2, [r3, #0]
        *pcName = "SPIBUS";
 801fba4:	687b      	ldr	r3, [r7, #4]
 801fba6:	4a19      	ldr	r2, [pc, #100]	; (801fc0c <SPIBusTask_vtblOnCreateTask+0x120>)
 801fba8:	601a      	str	r2, [r3, #0]
        *pvStackStart = NULL; // allocate the task stack in the system memory pool.
 801fbaa:	683b      	ldr	r3, [r7, #0]
 801fbac:	2200      	movs	r2, #0
 801fbae:	601a      	str	r2, [r3, #0]
        *pnStackDepth = SPIBUS_TASK_CFG_STACK_DEPTH;
 801fbb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801fbb2:	f44f 7216 	mov.w	r2, #600	; 0x258
 801fbb6:	601a      	str	r2, [r3, #0]
        *pParams = (ULONG) _this;
 801fbb8:	68fa      	ldr	r2, [r7, #12]
 801fbba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801fbbc:	601a      	str	r2, [r3, #0]
        *pxPriority = SPIBUS_TASK_CFG_PRIORITY;
 801fbbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801fbc0:	2204      	movs	r2, #4
 801fbc2:	601a      	str	r2, [r3, #0]
        *pnPreemptThreshold = SPIBUS_TASK_CFG_PRIORITY;
 801fbc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801fbc6:	2204      	movs	r2, #4
 801fbc8:	601a      	str	r2, [r3, #0]
        *pnTimeSlice = TX_NO_TIME_SLICE;
 801fbca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801fbcc:	2200      	movs	r2, #0
 801fbce:	601a      	str	r2, [r3, #0]
        *pnAutoStart = TX_AUTO_START;
 801fbd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801fbd2:	2201      	movs	r2, #1
 801fbd4:	601a      	str	r2, [r3, #0]
 801fbd6:	e00a      	b.n	801fbee <SPIBusTask_vtblOnCreateTask+0x102>
      }
      else
      {
        SYS_SET_SERVICE_LEVEL_ERROR_CODE(SYS_OUT_OF_MEMORY_ERROR_CODE);
 801fbd8:	4b0d      	ldr	r3, [pc, #52]	; (801fc10 <SPIBusTask_vtblOnCreateTask+0x124>)
 801fbda:	2203      	movs	r2, #3
 801fbdc:	805a      	strh	r2, [r3, #2]
        xRes = SYS_OUT_OF_MEMORY_ERROR_CODE;
 801fbde:	2303      	movs	r3, #3
 801fbe0:	83fb      	strh	r3, [r7, #30]
 801fbe2:	e004      	b.n	801fbee <SPIBusTask_vtblOnCreateTask+0x102>
      }
    }
    else
    {
      SYS_SET_SERVICE_LEVEL_ERROR_CODE(SYS_OUT_OF_MEMORY_ERROR_CODE);
 801fbe4:	4b0a      	ldr	r3, [pc, #40]	; (801fc10 <SPIBusTask_vtblOnCreateTask+0x124>)
 801fbe6:	2203      	movs	r2, #3
 801fbe8:	805a      	strh	r2, [r3, #2]
      xRes = SYS_OUT_OF_MEMORY_ERROR_CODE;
 801fbea:	2303      	movs	r3, #3
 801fbec:	83fb      	strh	r3, [r7, #30]
    }
  }

  return xRes;
 801fbee:	8bfb      	ldrh	r3, [r7, #30]
}
 801fbf0:	4618      	mov	r0, r3
 801fbf2:	3720      	adds	r7, #32
 801fbf4:	46bd      	mov	sp, r7
 801fbf6:	bd80      	pop	{r7, pc}
 801fbf8:	08027760 	.word	0x08027760
 801fbfc:	080277cc 	.word	0x080277cc
 801fc00:	08035d44 	.word	0x08035d44
 801fc04:	08035d6c 	.word	0x08035d6c
 801fc08:	0800e949 	.word	0x0800e949
 801fc0c:	080277d8 	.word	0x080277d8
 801fc10:	20000700 	.word	0x20000700

0801fc14 <SPIBusTask_vtblDoEnterPowerMode>:

sys_error_code_t SPIBusTask_vtblDoEnterPowerMode(AManagedTask *_this, const EPowerMode eActivePowerMode, const EPowerMode eNewPowerMode)
{
 801fc14:	b580      	push	{r7, lr}
 801fc16:	b084      	sub	sp, #16
 801fc18:	af00      	add	r7, sp, #0
 801fc1a:	6078      	str	r0, [r7, #4]
 801fc1c:	460b      	mov	r3, r1
 801fc1e:	70fb      	strb	r3, [r7, #3]
 801fc20:	4613      	mov	r3, r2
 801fc22:	70bb      	strb	r3, [r7, #2]
  assert_param(_this);
 801fc24:	687b      	ldr	r3, [r7, #4]
 801fc26:	2b00      	cmp	r3, #0
 801fc28:	d104      	bne.n	801fc34 <SPIBusTask_vtblDoEnterPowerMode+0x20>
 801fc2a:	f240 1103 	movw	r1, #259	; 0x103
 801fc2e:	4813      	ldr	r0, [pc, #76]	; (801fc7c <SPIBusTask_vtblDoEnterPowerMode+0x68>)
 801fc30:	f7f5 fb3b 	bl	80152aa <assert_failed>
  sys_error_code_t xRes = SYS_NO_ERROR_CODE;
 801fc34:	2300      	movs	r3, #0
 801fc36:	81fb      	strh	r3, [r7, #14]
  SPIBusTask *pObj = (SPIBusTask*) _this;
 801fc38:	687b      	ldr	r3, [r7, #4]
 801fc3a:	60bb      	str	r3, [r7, #8]

  IDrvDoEnterPowerMode((IDriver*) pObj->m_pxDriver, eActivePowerMode, eNewPowerMode);
 801fc3c:	68bb      	ldr	r3, [r7, #8]
 801fc3e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 801fc42:	78ba      	ldrb	r2, [r7, #2]
 801fc44:	78f9      	ldrb	r1, [r7, #3]
 801fc46:	4618      	mov	r0, r3
 801fc48:	f7ff fe9c 	bl	801f984 <IDrvDoEnterPowerMode>

  if(eNewPowerMode == E_POWER_MODE_SLEEP_1)
 801fc4c:	78bb      	ldrb	r3, [r7, #2]
 801fc4e:	2b01      	cmp	r3, #1
 801fc50:	d104      	bne.n	801fc5c <SPIBusTask_vtblDoEnterPowerMode+0x48>
  {
    tx_queue_flush(&pObj->m_xInQueue);
 801fc52:	68bb      	ldr	r3, [r7, #8]
 801fc54:	33d0      	adds	r3, #208	; 0xd0
 801fc56:	4618      	mov	r0, r3
 801fc58:	f7f3 f842 	bl	8012ce0 <_txe_queue_flush>
  }

  if((eActivePowerMode == E_POWER_MODE_SENSORS_ACTIVE) && (eNewPowerMode == E_POWER_MODE_STATE1))
 801fc5c:	78fb      	ldrb	r3, [r7, #3]
 801fc5e:	2b02      	cmp	r3, #2
 801fc60:	d107      	bne.n	801fc72 <SPIBusTask_vtblDoEnterPowerMode+0x5e>
 801fc62:	78bb      	ldrb	r3, [r7, #2]
 801fc64:	2b00      	cmp	r3, #0
 801fc66:	d104      	bne.n	801fc72 <SPIBusTask_vtblDoEnterPowerMode+0x5e>
  {
    tx_queue_flush(&pObj->m_xInQueue);
 801fc68:	68bb      	ldr	r3, [r7, #8]
 801fc6a:	33d0      	adds	r3, #208	; 0xd0
 801fc6c:	4618      	mov	r0, r3
 801fc6e:	f7f3 f837 	bl	8012ce0 <_txe_queue_flush>
  }

  SYS_DEBUGF(SYS_DBG_LEVEL_VERBOSE, ("SPIBUS: -> %d\r\n", eNewPowerMode));

  return xRes;
 801fc72:	89fb      	ldrh	r3, [r7, #14]
}
 801fc74:	4618      	mov	r0, r3
 801fc76:	3710      	adds	r7, #16
 801fc78:	46bd      	mov	sp, r7
 801fc7a:	bd80      	pop	{r7, pc}
 801fc7c:	08027760 	.word	0x08027760

0801fc80 <SPIBusTask_vtblHandleError>:

sys_error_code_t SPIBusTask_vtblHandleError(AManagedTask *_this, SysEvent xError)
{
 801fc80:	b580      	push	{r7, lr}
 801fc82:	b084      	sub	sp, #16
 801fc84:	af00      	add	r7, sp, #0
 801fc86:	6078      	str	r0, [r7, #4]
 801fc88:	6039      	str	r1, [r7, #0]
  assert_param(_this);
 801fc8a:	687b      	ldr	r3, [r7, #4]
 801fc8c:	2b00      	cmp	r3, #0
 801fc8e:	d104      	bne.n	801fc9a <SPIBusTask_vtblHandleError+0x1a>
 801fc90:	f44f 718d 	mov.w	r1, #282	; 0x11a
 801fc94:	4804      	ldr	r0, [pc, #16]	; (801fca8 <SPIBusTask_vtblHandleError+0x28>)
 801fc96:	f7f5 fb08 	bl	80152aa <assert_failed>
  sys_error_code_t xRes = SYS_NO_ERROR_CODE;
 801fc9a:	2300      	movs	r3, #0
 801fc9c:	81fb      	strh	r3, [r7, #14]
//  SPIBusTask *pObj = (SPIBusTask*)_this;

  return xRes;
 801fc9e:	89fb      	ldrh	r3, [r7, #14]
}
 801fca0:	4618      	mov	r0, r3
 801fca2:	3710      	adds	r7, #16
 801fca4:	46bd      	mov	sp, r7
 801fca6:	bd80      	pop	{r7, pc}
 801fca8:	08027760 	.word	0x08027760

0801fcac <SPIBusTask_vtblOnEnterTaskControlLoop>:

sys_error_code_t SPIBusTask_vtblOnEnterTaskControlLoop(AManagedTask *_this)
{
 801fcac:	b580      	push	{r7, lr}
 801fcae:	b084      	sub	sp, #16
 801fcb0:	af00      	add	r7, sp, #0
 801fcb2:	6078      	str	r0, [r7, #4]
  assert_param(_this != NULL);
 801fcb4:	687b      	ldr	r3, [r7, #4]
 801fcb6:	2b00      	cmp	r3, #0
 801fcb8:	d104      	bne.n	801fcc4 <SPIBusTask_vtblOnEnterTaskControlLoop+0x18>
 801fcba:	f240 1123 	movw	r1, #291	; 0x123
 801fcbe:	480c      	ldr	r0, [pc, #48]	; (801fcf0 <SPIBusTask_vtblOnEnterTaskControlLoop+0x44>)
 801fcc0:	f7f5 faf3 	bl	80152aa <assert_failed>
  sys_error_code_t xRes = SYS_NO_ERROR_CODE;
 801fcc4:	2300      	movs	r3, #0
 801fcc6:	817b      	strh	r3, [r7, #10]
  SPIBusTask *pObj = (SPIBusTask*) _this;
 801fcc8:	687b      	ldr	r3, [r7, #4]
 801fcca:	60fb      	str	r3, [r7, #12]

  SYS_DEBUGF(SYS_DBG_LEVEL_VERBOSE, ("SPI: start.\r\n"));

  SYS_DEBUGF(SYS_DBG_LEVEL_VERBOSE, ("SPIBUS: start the driver.\r\n"));

  xRes = IDrvStart((IDriver*) pObj->m_pxDriver);
 801fccc:	68fb      	ldr	r3, [r7, #12]
 801fcce:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 801fcd2:	4618      	mov	r0, r3
 801fcd4:	f7ff fe48 	bl	801f968 <IDrvStart>
 801fcd8:	4603      	mov	r3, r0
 801fcda:	817b      	strh	r3, [r7, #10]
  if(SYS_IS_ERROR_CODE(xRes))
 801fcdc:	897b      	ldrh	r3, [r7, #10]
 801fcde:	2b00      	cmp	r3, #0
 801fce0:	d001      	beq.n	801fce6 <SPIBusTask_vtblOnEnterTaskControlLoop+0x3a>
  {
    SYS_DEBUGF(SYS_DBG_LEVEL_WARNING, ("SPIBUS - Driver start failed.\r\n"));
    xRes = SYS_BASE_LOW_LEVEL_ERROR_CODE;
 801fce2:	2301      	movs	r3, #1
 801fce4:	817b      	strh	r3, [r7, #10]
  }

  return xRes;
 801fce6:	897b      	ldrh	r3, [r7, #10]
}
 801fce8:	4618      	mov	r0, r3
 801fcea:	3710      	adds	r7, #16
 801fcec:	46bd      	mov	sp, r7
 801fcee:	bd80      	pop	{r7, pc}
 801fcf0:	08027760 	.word	0x08027760

0801fcf4 <SPIBusTask_vtblForceExecuteStep>:

sys_error_code_t SPIBusTask_vtblForceExecuteStep(AManagedTaskEx *_this, EPowerMode eActivePowerMode)
{
 801fcf4:	b580      	push	{r7, lr}
 801fcf6:	b090      	sub	sp, #64	; 0x40
 801fcf8:	af06      	add	r7, sp, #24
 801fcfa:	6078      	str	r0, [r7, #4]
 801fcfc:	460b      	mov	r3, r1
 801fcfe:	70fb      	strb	r3, [r7, #3]
  assert_param(_this);
 801fd00:	687b      	ldr	r3, [r7, #4]
 801fd02:	2b00      	cmp	r3, #0
 801fd04:	d104      	bne.n	801fd10 <SPIBusTask_vtblForceExecuteStep+0x1c>
 801fd06:	f240 1137 	movw	r1, #311	; 0x137
 801fd0a:	4829      	ldr	r0, [pc, #164]	; (801fdb0 <SPIBusTask_vtblForceExecuteStep+0xbc>)
 801fd0c:	f7f5 facd 	bl	80152aa <assert_failed>
  sys_error_code_t xRes = SYS_NO_ERROR_CODE;
 801fd10:	2300      	movs	r3, #0
 801fd12:	84fb      	strh	r3, [r7, #38]	; 0x26
  SPIBusTask *pObj = (SPIBusTask*) _this;
 801fd14:	687b      	ldr	r3, [r7, #4]
 801fd16:	623b      	str	r3, [r7, #32]

  // to resume the task we send a fake empty message.
  SMMessage xReport =
 801fd18:	f107 0310 	add.w	r3, r7, #16
 801fd1c:	2200      	movs	r2, #0
 801fd1e:	601a      	str	r2, [r3, #0]
 801fd20:	605a      	str	r2, [r3, #4]
 801fd22:	609a      	str	r2, [r3, #8]
 801fd24:	60da      	str	r2, [r3, #12]
 801fd26:	23fe      	movs	r3, #254	; 0xfe
 801fd28:	743b      	strb	r3, [r7, #16]
  {
      .messageID = SM_MESSAGE_ID_FORCE_STEP };
  if((eActivePowerMode == E_POWER_MODE_STATE1) || (eActivePowerMode == E_POWER_MODE_SENSORS_ACTIVE))
 801fd2a:	78fb      	ldrb	r3, [r7, #3]
 801fd2c:	2b00      	cmp	r3, #0
 801fd2e:	d002      	beq.n	801fd36 <SPIBusTask_vtblForceExecuteStep+0x42>
 801fd30:	78fb      	ldrb	r3, [r7, #3]
 801fd32:	2b02      	cmp	r3, #2
 801fd34:	d118      	bne.n	801fd68 <SPIBusTask_vtblForceExecuteStep+0x74>
  {
    if(AMTExIsTaskInactive(_this))
 801fd36:	6878      	ldr	r0, [r7, #4]
 801fd38:	f7ff fdca 	bl	801f8d0 <AMTExIsTaskInactive>
 801fd3c:	4603      	mov	r3, r0
 801fd3e:	2b00      	cmp	r3, #0
 801fd40:	d030      	beq.n	801fda4 <SPIBusTask_vtblForceExecuteStep+0xb0>
    {
      if(TX_SUCCESS != tx_queue_front_send(&pObj->m_xInQueue, &xReport, AMT_MS_TO_TICKS(100)))
 801fd42:	6a3b      	ldr	r3, [r7, #32]
 801fd44:	33d0      	adds	r3, #208	; 0xd0
 801fd46:	f107 0110 	add.w	r1, r7, #16
 801fd4a:	2264      	movs	r2, #100	; 0x64
 801fd4c:	4618      	mov	r0, r3
 801fd4e:	f7f2 fff3 	bl	8012d38 <_txe_queue_front_send>
 801fd52:	4603      	mov	r3, r0
 801fd54:	2b00      	cmp	r3, #0
 801fd56:	d025      	beq.n	801fda4 <SPIBusTask_vtblForceExecuteStep+0xb0>
      {

        SYS_DEBUGF(SYS_DBG_LEVEL_WARNING, ("SPIBUS: unable to resume the task.\r\n"));

        xRes = SYS_SPIBUS_TASK_RESUME_ERROR_CODE;
 801fd58:	f240 33eb 	movw	r3, #1003	; 0x3eb
 801fd5c:	84fb      	strh	r3, [r7, #38]	; 0x26
        SYS_SET_SERVICE_LEVEL_ERROR_CODE(SYS_SPIBUS_TASK_RESUME_ERROR_CODE);
 801fd5e:	4b15      	ldr	r3, [pc, #84]	; (801fdb4 <SPIBusTask_vtblForceExecuteStep+0xc0>)
 801fd60:	f240 32eb 	movw	r2, #1003	; 0x3eb
 801fd64:	805a      	strh	r2, [r3, #2]
    if(AMTExIsTaskInactive(_this))
 801fd66:	e01d      	b.n	801fda4 <SPIBusTask_vtblForceExecuteStep+0xb0>
    }
  }
  else
  {
    UINT state;
    if(TX_SUCCESS == tx_thread_info_get(&_this->m_xThaskHandle, TX_NULL, &state, TX_NULL, TX_NULL, TX_NULL, TX_NULL, TX_NULL, TX_NULL))
 801fd68:	687b      	ldr	r3, [r7, #4]
 801fd6a:	1d18      	adds	r0, r3, #4
 801fd6c:	f107 020c 	add.w	r2, r7, #12
 801fd70:	2300      	movs	r3, #0
 801fd72:	9304      	str	r3, [sp, #16]
 801fd74:	2300      	movs	r3, #0
 801fd76:	9303      	str	r3, [sp, #12]
 801fd78:	2300      	movs	r3, #0
 801fd7a:	9302      	str	r3, [sp, #8]
 801fd7c:	2300      	movs	r3, #0
 801fd7e:	9301      	str	r3, [sp, #4]
 801fd80:	2300      	movs	r3, #0
 801fd82:	9300      	str	r3, [sp, #0]
 801fd84:	2300      	movs	r3, #0
 801fd86:	2100      	movs	r1, #0
 801fd88:	f7f3 fb00 	bl	801338c <_txe_thread_info_get>
 801fd8c:	4603      	mov	r3, r0
 801fd8e:	2b00      	cmp	r3, #0
 801fd90:	d109      	bne.n	801fda6 <SPIBusTask_vtblForceExecuteStep+0xb2>
    {
      if(state == TX_SUSPENDED)
 801fd92:	68fb      	ldr	r3, [r7, #12]
 801fd94:	2b03      	cmp	r3, #3
 801fd96:	d106      	bne.n	801fda6 <SPIBusTask_vtblForceExecuteStep+0xb2>
      {
        tx_thread_resume(&_this->m_xThaskHandle);
 801fd98:	687b      	ldr	r3, [r7, #4]
 801fd9a:	3304      	adds	r3, #4
 801fd9c:	4618      	mov	r0, r3
 801fd9e:	f7f3 fb23 	bl	80133e8 <_txe_thread_resume>
 801fda2:	e000      	b.n	801fda6 <SPIBusTask_vtblForceExecuteStep+0xb2>
    if(AMTExIsTaskInactive(_this))
 801fda4:	bf00      	nop
      }
    }
  }

  return xRes;
 801fda6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
 801fda8:	4618      	mov	r0, r3
 801fdaa:	3728      	adds	r7, #40	; 0x28
 801fdac:	46bd      	mov	sp, r7
 801fdae:	bd80      	pop	{r7, pc}
 801fdb0:	08027760 	.word	0x08027760
 801fdb4:	20000700 	.word	0x20000700

0801fdb8 <SPIBusTask_vtblOnEnterPowerMode>:

sys_error_code_t SPIBusTask_vtblOnEnterPowerMode(AManagedTaskEx *_this, const EPowerMode eActivePowerMode, const EPowerMode eNewPowerMode)
{
 801fdb8:	b580      	push	{r7, lr}
 801fdba:	b084      	sub	sp, #16
 801fdbc:	af00      	add	r7, sp, #0
 801fdbe:	6078      	str	r0, [r7, #4]
 801fdc0:	460b      	mov	r3, r1
 801fdc2:	70fb      	strb	r3, [r7, #3]
 801fdc4:	4613      	mov	r3, r2
 801fdc6:	70bb      	strb	r3, [r7, #2]
  assert_param(_this);
 801fdc8:	687b      	ldr	r3, [r7, #4]
 801fdca:	2b00      	cmp	r3, #0
 801fdcc:	d104      	bne.n	801fdd8 <SPIBusTask_vtblOnEnterPowerMode+0x20>
 801fdce:	f240 1163 	movw	r1, #355	; 0x163
 801fdd2:	4807      	ldr	r0, [pc, #28]	; (801fdf0 <SPIBusTask_vtblOnEnterPowerMode+0x38>)
 801fdd4:	f7f5 fa69 	bl	80152aa <assert_failed>
  sys_error_code_t xRes = SYS_NO_ERROR_CODE;
 801fdd8:	2300      	movs	r3, #0
 801fdda:	81fb      	strh	r3, [r7, #14]
//  SPIBusTask *pObj = (SPIBusTask*)_this;

  AMTExSetPMClass(_this, E_PM_CLASS_1);
 801fddc:	2101      	movs	r1, #1
 801fdde:	6878      	ldr	r0, [r7, #4]
 801fde0:	f7ff fd92 	bl	801f908 <AMTExSetPMClass>

  return xRes;
 801fde4:	89fb      	ldrh	r3, [r7, #14]
}
 801fde6:	4618      	mov	r0, r3
 801fde8:	3710      	adds	r7, #16
 801fdea:	46bd      	mov	sp, r7
 801fdec:	bd80      	pop	{r7, pc}
 801fdee:	bf00      	nop
 801fdf0:	08027760 	.word	0x08027760

0801fdf4 <SPIBusTask_vtblCtrl>:

// IBus virtual functions definition
// *********************************

sys_error_code_t SPIBusTask_vtblCtrl(IBus *_this, EBusCtrlCmd eCtrlCmd, uint32_t nParams)
{
 801fdf4:	b580      	push	{r7, lr}
 801fdf6:	b086      	sub	sp, #24
 801fdf8:	af00      	add	r7, sp, #0
 801fdfa:	60f8      	str	r0, [r7, #12]
 801fdfc:	460b      	mov	r3, r1
 801fdfe:	607a      	str	r2, [r7, #4]
 801fe00:	72fb      	strb	r3, [r7, #11]
  assert_param(_this);
 801fe02:	68fb      	ldr	r3, [r7, #12]
 801fe04:	2b00      	cmp	r3, #0
 801fe06:	d104      	bne.n	801fe12 <SPIBusTask_vtblCtrl+0x1e>
 801fe08:	f240 1171 	movw	r1, #369	; 0x171
 801fe0c:	4804      	ldr	r0, [pc, #16]	; (801fe20 <SPIBusTask_vtblCtrl+0x2c>)
 801fe0e:	f7f5 fa4c 	bl	80152aa <assert_failed>
  sys_error_code_t xRes = SYS_NO_ERROR_CODE;
 801fe12:	2300      	movs	r3, #0
 801fe14:	82fb      	strh	r3, [r7, #22]

  return xRes;
 801fe16:	8afb      	ldrh	r3, [r7, #22]
}
 801fe18:	4618      	mov	r0, r3
 801fe1a:	3718      	adds	r7, #24
 801fe1c:	46bd      	mov	sp, r7
 801fe1e:	bd80      	pop	{r7, pc}
 801fe20:	08027760 	.word	0x08027760

0801fe24 <SPIBusTask_vtblConnectDevice>:

sys_error_code_t SPIBusTask_vtblConnectDevice(IBus *_this, ABusIF *pxBusIF)
{
 801fe24:	b580      	push	{r7, lr}
 801fe26:	b084      	sub	sp, #16
 801fe28:	af00      	add	r7, sp, #0
 801fe2a:	6078      	str	r0, [r7, #4]
 801fe2c:	6039      	str	r1, [r7, #0]
  assert_param(_this);
 801fe2e:	687b      	ldr	r3, [r7, #4]
 801fe30:	2b00      	cmp	r3, #0
 801fe32:	d104      	bne.n	801fe3e <SPIBusTask_vtblConnectDevice+0x1a>
 801fe34:	f240 1179 	movw	r1, #377	; 0x179
 801fe38:	4813      	ldr	r0, [pc, #76]	; (801fe88 <SPIBusTask_vtblConnectDevice+0x64>)
 801fe3a:	f7f5 fa36 	bl	80152aa <assert_failed>
  sys_error_code_t xRes = SYS_NO_ERROR_CODE;
 801fe3e:	2300      	movs	r3, #0
 801fe40:	81fb      	strh	r3, [r7, #14]

  if(pxBusIF != NULL)
 801fe42:	683b      	ldr	r3, [r7, #0]
 801fe44:	2b00      	cmp	r3, #0
 801fe46:	d014      	beq.n	801fe72 <SPIBusTask_vtblConnectDevice+0x4e>
  {
    pxBusIF->m_xConnector.pfReadReg = SPIBusTaskRead;
 801fe48:	683b      	ldr	r3, [r7, #0]
 801fe4a:	4a10      	ldr	r2, [pc, #64]	; (801fe8c <SPIBusTask_vtblConnectDevice+0x68>)
 801fe4c:	605a      	str	r2, [r3, #4]
    pxBusIF->m_xConnector.pfWriteReg = SPIBusTaskWrite;
 801fe4e:	683b      	ldr	r3, [r7, #0]
 801fe50:	4a0f      	ldr	r2, [pc, #60]	; (801fe90 <SPIBusTask_vtblConnectDevice+0x6c>)
 801fe52:	601a      	str	r2, [r3, #0]
    pxBusIF->m_pfBusCtrl = SPIBusTaskCtrl;
 801fe54:	683b      	ldr	r3, [r7, #0]
 801fe56:	4a0f      	ldr	r2, [pc, #60]	; (801fe94 <SPIBusTask_vtblConnectDevice+0x70>)
 801fe58:	615a      	str	r2, [r3, #20]
    pxBusIF->m_pxBus = _this;
 801fe5a:	683b      	ldr	r3, [r7, #0]
 801fe5c:	687a      	ldr	r2, [r7, #4]
 801fe5e:	611a      	str	r2, [r3, #16]
    ((SPIBusTaskIBus*) _this)->m_pxOwner->m_nConnectedDevices++;
 801fe60:	687b      	ldr	r3, [r7, #4]
 801fe62:	685b      	ldr	r3, [r3, #4]
 801fe64:	f893 2108 	ldrb.w	r2, [r3, #264]	; 0x108
 801fe68:	3201      	adds	r2, #1
 801fe6a:	b2d2      	uxtb	r2, r2
 801fe6c:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
 801fe70:	e004      	b.n	801fe7c <SPIBusTask_vtblConnectDevice+0x58>

    SYS_DEBUGF(SYS_DBG_LEVEL_VERBOSE, ("SPIBUS: connected device: %d\r\n", ((SPIBusTaskIBus*)_this)->m_pxOwner->m_nConnectedDevices));
  }
  else
  {
    xRes = SYS_INVALID_PARAMETER_ERROR_CODE;
 801fe72:	2304      	movs	r3, #4
 801fe74:	81fb      	strh	r3, [r7, #14]
    SYS_SET_SERVICE_LEVEL_ERROR_CODE(SYS_INVALID_PARAMETER_ERROR_CODE);
 801fe76:	4b08      	ldr	r3, [pc, #32]	; (801fe98 <SPIBusTask_vtblConnectDevice+0x74>)
 801fe78:	2204      	movs	r2, #4
 801fe7a:	805a      	strh	r2, [r3, #2]
  }

  return xRes;
 801fe7c:	89fb      	ldrh	r3, [r7, #14]
}
 801fe7e:	4618      	mov	r0, r3
 801fe80:	3710      	adds	r7, #16
 801fe82:	46bd      	mov	sp, r7
 801fe84:	bd80      	pop	{r7, pc}
 801fe86:	bf00      	nop
 801fe88:	08027760 	.word	0x08027760
 801fe8c:	08020115 	.word	0x08020115
 801fe90:	08020061 	.word	0x08020061
 801fe94:	0801ff0d 	.word	0x0801ff0d
 801fe98:	20000700 	.word	0x20000700

0801fe9c <SPIBusTask_vtblDisconnectDevice>:

sys_error_code_t SPIBusTask_vtblDisconnectDevice(IBus *_this, ABusIF *pxBusIF)
{
 801fe9c:	b580      	push	{r7, lr}
 801fe9e:	b084      	sub	sp, #16
 801fea0:	af00      	add	r7, sp, #0
 801fea2:	6078      	str	r0, [r7, #4]
 801fea4:	6039      	str	r1, [r7, #0]
  assert_param(_this);
 801fea6:	687b      	ldr	r3, [r7, #4]
 801fea8:	2b00      	cmp	r3, #0
 801feaa:	d104      	bne.n	801feb6 <SPIBusTask_vtblDisconnectDevice+0x1a>
 801feac:	f240 1191 	movw	r1, #401	; 0x191
 801feb0:	4813      	ldr	r0, [pc, #76]	; (801ff00 <SPIBusTask_vtblDisconnectDevice+0x64>)
 801feb2:	f7f5 f9fa 	bl	80152aa <assert_failed>
  sys_error_code_t xRes = SYS_NO_ERROR_CODE;
 801feb6:	2300      	movs	r3, #0
 801feb8:	81fb      	strh	r3, [r7, #14]

  if(pxBusIF != NULL)
 801feba:	683b      	ldr	r3, [r7, #0]
 801febc:	2b00      	cmp	r3, #0
 801febe:	d014      	beq.n	801feea <SPIBusTask_vtblDisconnectDevice+0x4e>
  {
    pxBusIF->m_xConnector.pfReadReg = ABusIFNullRW;
 801fec0:	683b      	ldr	r3, [r7, #0]
 801fec2:	4a10      	ldr	r2, [pc, #64]	; (801ff04 <SPIBusTask_vtblDisconnectDevice+0x68>)
 801fec4:	605a      	str	r2, [r3, #4]
    pxBusIF->m_xConnector.pfWriteReg = ABusIFNullRW;
 801fec6:	683b      	ldr	r3, [r7, #0]
 801fec8:	4a0e      	ldr	r2, [pc, #56]	; (801ff04 <SPIBusTask_vtblDisconnectDevice+0x68>)
 801feca:	601a      	str	r2, [r3, #0]
    pxBusIF->m_pfBusCtrl = NULL;
 801fecc:	683b      	ldr	r3, [r7, #0]
 801fece:	2200      	movs	r2, #0
 801fed0:	615a      	str	r2, [r3, #20]
    pxBusIF->m_pxBus = NULL;
 801fed2:	683b      	ldr	r3, [r7, #0]
 801fed4:	2200      	movs	r2, #0
 801fed6:	611a      	str	r2, [r3, #16]
    ((SPIBusTaskIBus*) _this)->m_pxOwner->m_nConnectedDevices--;
 801fed8:	687b      	ldr	r3, [r7, #4]
 801feda:	685b      	ldr	r3, [r3, #4]
 801fedc:	f893 2108 	ldrb.w	r2, [r3, #264]	; 0x108
 801fee0:	3a01      	subs	r2, #1
 801fee2:	b2d2      	uxtb	r2, r2
 801fee4:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
 801fee8:	e004      	b.n	801fef4 <SPIBusTask_vtblDisconnectDevice+0x58>

    SYS_DEBUGF(SYS_DBG_LEVEL_VERBOSE, ("SPIBUS: connected device: %d\r\n", ((SPIBusTaskIBus*)_this)->m_pxOwner->m_nConnectedDevices));
  }
  else
  {
    xRes = SYS_INVALID_PARAMETER_ERROR_CODE;
 801feea:	2304      	movs	r3, #4
 801feec:	81fb      	strh	r3, [r7, #14]
    SYS_SET_SERVICE_LEVEL_ERROR_CODE(SYS_INVALID_PARAMETER_ERROR_CODE);
 801feee:	4b06      	ldr	r3, [pc, #24]	; (801ff08 <SPIBusTask_vtblDisconnectDevice+0x6c>)
 801fef0:	2204      	movs	r2, #4
 801fef2:	805a      	strh	r2, [r3, #2]
  }

  return xRes;
 801fef4:	89fb      	ldrh	r3, [r7, #14]
}
 801fef6:	4618      	mov	r0, r3
 801fef8:	3710      	adds	r7, #16
 801fefa:	46bd      	mov	sp, r7
 801fefc:	bd80      	pop	{r7, pc}
 801fefe:	bf00      	nop
 801ff00:	08027760 	.word	0x08027760
 801ff04:	0801a1b1 	.word	0x0801a1b1
 801ff08:	20000700 	.word	0x20000700

0801ff0c <SPIBusTaskCtrl>:

// Private function definition
// ***************************

static sys_error_code_t SPIBusTaskCtrl(ABusIF *_this, EBusCtrlCmd eCtrlCmd, uint32_t nParams)
{
 801ff0c:	b580      	push	{r7, lr}
 801ff0e:	b084      	sub	sp, #16
 801ff10:	af00      	add	r7, sp, #0
 801ff12:	60f8      	str	r0, [r7, #12]
 801ff14:	460b      	mov	r3, r1
 801ff16:	607a      	str	r2, [r7, #4]
 801ff18:	72fb      	strb	r3, [r7, #11]
  return IBusCtrl(_this->m_pxBus, eCtrlCmd, nParams);
 801ff1a:	68fb      	ldr	r3, [r7, #12]
 801ff1c:	691b      	ldr	r3, [r3, #16]
 801ff1e:	7af9      	ldrb	r1, [r7, #11]
 801ff20:	687a      	ldr	r2, [r7, #4]
 801ff22:	4618      	mov	r0, r3
 801ff24:	f7fa f955 	bl	801a1d2 <IBusCtrl>
 801ff28:	4603      	mov	r3, r0
}
 801ff2a:	4618      	mov	r0, r3
 801ff2c:	3710      	adds	r7, #16
 801ff2e:	46bd      	mov	sp, r7
 801ff30:	bd80      	pop	{r7, pc}
	...

0801ff34 <SPIBusTaskExecuteStep>:

static sys_error_code_t SPIBusTaskExecuteStep(AManagedTask *_this)
{
 801ff34:	b580      	push	{r7, lr}
 801ff36:	b088      	sub	sp, #32
 801ff38:	af00      	add	r7, sp, #0
 801ff3a:	6078      	str	r0, [r7, #4]
  assert_param(_this);
 801ff3c:	687b      	ldr	r3, [r7, #4]
 801ff3e:	2b00      	cmp	r3, #0
 801ff40:	d104      	bne.n	801ff4c <SPIBusTaskExecuteStep+0x18>
 801ff42:	f240 11b1 	movw	r1, #433	; 0x1b1
 801ff46:	4845      	ldr	r0, [pc, #276]	; (802005c <SPIBusTaskExecuteStep+0x128>)
 801ff48:	f7f5 f9af 	bl	80152aa <assert_failed>
  sys_error_code_t xRes = SYS_NO_ERROR_CODE;
 801ff4c:	2300      	movs	r3, #0
 801ff4e:	83fb      	strh	r3, [r7, #30]
  SPIBusTask *p_obj = (SPIBusTask*) _this;
 801ff50:	687b      	ldr	r3, [r7, #4]
 801ff52:	61bb      	str	r3, [r7, #24]

  struct spiIOMessage_t xMsg =
 801ff54:	f107 030c 	add.w	r3, r7, #12
 801ff58:	2200      	movs	r2, #0
 801ff5a:	601a      	str	r2, [r3, #0]
 801ff5c:	605a      	str	r2, [r3, #4]
 801ff5e:	609a      	str	r2, [r3, #8]
  {
      0 };
  AMTExSetInactiveState((AManagedTaskEx*) _this, TRUE);
 801ff60:	2101      	movs	r1, #1
 801ff62:	6878      	ldr	r0, [r7, #4]
 801ff64:	f7ff fc98 	bl	801f898 <AMTExSetInactiveState>
  if(TX_SUCCESS == tx_queue_receive(&p_obj->m_xInQueue, &xMsg, TX_WAIT_FOREVER))
 801ff68:	69bb      	ldr	r3, [r7, #24]
 801ff6a:	33d0      	adds	r3, #208	; 0xd0
 801ff6c:	f107 010c 	add.w	r1, r7, #12
 801ff70:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801ff74:	4618      	mov	r0, r3
 801ff76:	f7f2 ff61 	bl	8012e3c <_txe_queue_receive>
 801ff7a:	4603      	mov	r3, r0
 801ff7c:	2b00      	cmp	r3, #0
 801ff7e:	d161      	bne.n	8020044 <SPIBusTaskExecuteStep+0x110>
  {
    AMTExSetInactiveState((AManagedTaskEx*) _this, FALSE);
 801ff80:	2100      	movs	r1, #0
 801ff82:	6878      	ldr	r0, [r7, #4]
 801ff84:	f7ff fc88 	bl	801f898 <AMTExSetInactiveState>
    switch(xMsg.messageId)
 801ff88:	7b3b      	ldrb	r3, [r7, #12]
 801ff8a:	2bfe      	cmp	r3, #254	; 0xfe
 801ff8c:	d006      	beq.n	801ff9c <SPIBusTaskExecuteStep+0x68>
 801ff8e:	2bfe      	cmp	r3, #254	; 0xfe
 801ff90:	dc5a      	bgt.n	8020048 <SPIBusTaskExecuteStep+0x114>
 801ff92:	2b06      	cmp	r3, #6
 801ff94:	d004      	beq.n	801ffa0 <SPIBusTaskExecuteStep+0x6c>
 801ff96:	2b07      	cmp	r3, #7
 801ff98:	d02b      	beq.n	801fff2 <SPIBusTaskExecuteStep+0xbe>
        }
        break;

      default:
        //TODO: STF -  need to notify the error
        break;
 801ff9a:	e055      	b.n	8020048 <SPIBusTaskExecuteStep+0x114>
        __NOP();
 801ff9c:	bf00      	nop
        break;
 801ff9e:	e058      	b.n	8020052 <SPIBusTaskExecuteStep+0x11e>
        SPIMasterDriverSelectDevice((SPIMasterDriver_t*) p_obj->m_pxDriver, xMsg.pxSensor->m_pxSSPinPort, xMsg.pxSensor->m_nSSPin);
 801ffa0:	69bb      	ldr	r3, [r7, #24]
 801ffa2:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 801ffa6:	697b      	ldr	r3, [r7, #20]
 801ffa8:	6999      	ldr	r1, [r3, #24]
 801ffaa:	697b      	ldr	r3, [r7, #20]
 801ffac:	8b9b      	ldrh	r3, [r3, #28]
 801ffae:	461a      	mov	r2, r3
 801ffb0:	f000 fc78 	bl	80208a4 <SPIMasterDriverSelectDevice>
        xRes = IIODrvRead(p_obj->m_pxDriver, xMsg.pnData, xMsg.nDataSize, xMsg.nRegAddr);
 801ffb4:	69bb      	ldr	r3, [r7, #24]
 801ffb6:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 801ffba:	6939      	ldr	r1, [r7, #16]
 801ffbc:	89fa      	ldrh	r2, [r7, #14]
 801ffbe:	7b7b      	ldrb	r3, [r7, #13]
 801ffc0:	b29b      	uxth	r3, r3
 801ffc2:	f7ff fd0b 	bl	801f9dc <IIODrvRead>
 801ffc6:	4603      	mov	r3, r0
 801ffc8:	83fb      	strh	r3, [r7, #30]
        SPIMasterDriverDeselectDevice((SPIMasterDriver_t*) p_obj->m_pxDriver, xMsg.pxSensor->m_pxSSPinPort, xMsg.pxSensor->m_nSSPin);
 801ffca:	69bb      	ldr	r3, [r7, #24]
 801ffcc:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 801ffd0:	697b      	ldr	r3, [r7, #20]
 801ffd2:	6999      	ldr	r1, [r3, #24]
 801ffd4:	697b      	ldr	r3, [r7, #20]
 801ffd6:	8b9b      	ldrh	r3, [r3, #28]
 801ffd8:	461a      	mov	r2, r3
 801ffda:	f000 fc75 	bl	80208c8 <SPIMasterDriverDeselectDevice>
        if(!SYS_IS_ERROR_CODE(xRes))
 801ffde:	8bfb      	ldrh	r3, [r7, #30]
 801ffe0:	2b00      	cmp	r3, #0
 801ffe2:	d133      	bne.n	802004c <SPIBusTaskExecuteStep+0x118>
          xRes = SPIBusIFNotifyIOComplete(xMsg.pxSensor);
 801ffe4:	697b      	ldr	r3, [r7, #20]
 801ffe6:	4618      	mov	r0, r3
 801ffe8:	f7ff fbc6 	bl	801f778 <SPIBusIFNotifyIOComplete>
 801ffec:	4603      	mov	r3, r0
 801ffee:	83fb      	strh	r3, [r7, #30]
        break;
 801fff0:	e02c      	b.n	802004c <SPIBusTaskExecuteStep+0x118>
        SPIMasterDriverSelectDevice((SPIMasterDriver_t*) p_obj->m_pxDriver, xMsg.pxSensor->m_pxSSPinPort, xMsg.pxSensor->m_nSSPin);
 801fff2:	69bb      	ldr	r3, [r7, #24]
 801fff4:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 801fff8:	697b      	ldr	r3, [r7, #20]
 801fffa:	6999      	ldr	r1, [r3, #24]
 801fffc:	697b      	ldr	r3, [r7, #20]
 801fffe:	8b9b      	ldrh	r3, [r3, #28]
 8020000:	461a      	mov	r2, r3
 8020002:	f000 fc4f 	bl	80208a4 <SPIMasterDriverSelectDevice>
        xRes = IIODrvWrite(p_obj->m_pxDriver, xMsg.pnData, xMsg.nDataSize, xMsg.nRegAddr);
 8020006:	69bb      	ldr	r3, [r7, #24]
 8020008:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 802000c:	6939      	ldr	r1, [r7, #16]
 802000e:	89fa      	ldrh	r2, [r7, #14]
 8020010:	7b7b      	ldrb	r3, [r7, #13]
 8020012:	b29b      	uxth	r3, r3
 8020014:	f7ff fcca 	bl	801f9ac <IIODrvWrite>
 8020018:	4603      	mov	r3, r0
 802001a:	83fb      	strh	r3, [r7, #30]
        SPIMasterDriverDeselectDevice((SPIMasterDriver_t*) p_obj->m_pxDriver, xMsg.pxSensor->m_pxSSPinPort, xMsg.pxSensor->m_nSSPin);
 802001c:	69bb      	ldr	r3, [r7, #24]
 802001e:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 8020022:	697b      	ldr	r3, [r7, #20]
 8020024:	6999      	ldr	r1, [r3, #24]
 8020026:	697b      	ldr	r3, [r7, #20]
 8020028:	8b9b      	ldrh	r3, [r3, #28]
 802002a:	461a      	mov	r2, r3
 802002c:	f000 fc4c 	bl	80208c8 <SPIMasterDriverDeselectDevice>
        if(!SYS_IS_ERROR_CODE(xRes))
 8020030:	8bfb      	ldrh	r3, [r7, #30]
 8020032:	2b00      	cmp	r3, #0
 8020034:	d10c      	bne.n	8020050 <SPIBusTaskExecuteStep+0x11c>
          xRes = SPIBusIFNotifyIOComplete(xMsg.pxSensor);
 8020036:	697b      	ldr	r3, [r7, #20]
 8020038:	4618      	mov	r0, r3
 802003a:	f7ff fb9d 	bl	801f778 <SPIBusIFNotifyIOComplete>
 802003e:	4603      	mov	r3, r0
 8020040:	83fb      	strh	r3, [r7, #30]
        break;
 8020042:	e005      	b.n	8020050 <SPIBusTaskExecuteStep+0x11c>
    }
  }
 8020044:	bf00      	nop
 8020046:	e004      	b.n	8020052 <SPIBusTaskExecuteStep+0x11e>
        break;
 8020048:	bf00      	nop
 802004a:	e002      	b.n	8020052 <SPIBusTaskExecuteStep+0x11e>
        break;
 802004c:	bf00      	nop
 802004e:	e000      	b.n	8020052 <SPIBusTaskExecuteStep+0x11e>
        break;
 8020050:	bf00      	nop

  return xRes;
 8020052:	8bfb      	ldrh	r3, [r7, #30]
}
 8020054:	4618      	mov	r0, r3
 8020056:	3720      	adds	r7, #32
 8020058:	46bd      	mov	sp, r7
 802005a:	bd80      	pop	{r7, pc}
 802005c:	08027760 	.word	0x08027760

08020060 <SPIBusTaskWrite>:

static int32_t SPIBusTaskWrite(void *pxSensor, uint8_t nRegAddr, uint8_t *pnData, uint16_t nSize)
{
 8020060:	b580      	push	{r7, lr}
 8020062:	b08a      	sub	sp, #40	; 0x28
 8020064:	af00      	add	r7, sp, #0
 8020066:	60f8      	str	r0, [r7, #12]
 8020068:	607a      	str	r2, [r7, #4]
 802006a:	461a      	mov	r2, r3
 802006c:	460b      	mov	r3, r1
 802006e:	72fb      	strb	r3, [r7, #11]
 8020070:	4613      	mov	r3, r2
 8020072:	813b      	strh	r3, [r7, #8]
  assert_param(pxSensor);
 8020074:	68fb      	ldr	r3, [r7, #12]
 8020076:	2b00      	cmp	r3, #0
 8020078:	d104      	bne.n	8020084 <SPIBusTaskWrite+0x24>
 802007a:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 802007e:	4821      	ldr	r0, [pc, #132]	; (8020104 <SPIBusTaskWrite+0xa4>)
 8020080:	f7f5 f913 	bl	80152aa <assert_failed>
  SPIBusIF *pxSPISensor = (SPIBusIF*) pxSensor;
 8020084:	68fb      	ldr	r3, [r7, #12]
 8020086:	623b      	str	r3, [r7, #32]
  sys_error_code_t xRes = SYS_NO_ERROR_CODE;
 8020088:	2300      	movs	r3, #0
 802008a:	84fb      	strh	r3, [r7, #38]	; 0x26
  uint8_t nAutoInc = pxSPISensor->m_nAutoInc;
 802008c:	6a3b      	ldr	r3, [r7, #32]
 802008e:	7f9b      	ldrb	r3, [r3, #30]
 8020090:	77fb      	strb	r3, [r7, #31]

  struct spiIOMessage_t xMsg =
 8020092:	2307      	movs	r3, #7
 8020094:	743b      	strb	r3, [r7, #16]
 8020096:	7afa      	ldrb	r2, [r7, #11]
 8020098:	7ffb      	ldrb	r3, [r7, #31]
 802009a:	4313      	orrs	r3, r2
 802009c:	b2db      	uxtb	r3, r3
 802009e:	747b      	strb	r3, [r7, #17]
 80200a0:	893b      	ldrh	r3, [r7, #8]
 80200a2:	827b      	strh	r3, [r7, #18]
 80200a4:	687b      	ldr	r3, [r7, #4]
 80200a6:	617b      	str	r3, [r7, #20]
 80200a8:	6a3b      	ldr	r3, [r7, #32]
 80200aa:	61bb      	str	r3, [r7, #24]
      .nRegAddr = nRegAddr | nAutoInc,
      .pnData = pnData,
      .nDataSize = nSize };

  // if (s_xTaskObj.m_xInQueue != NULL) {//TODO: STF.Port - how to know if the task has been initialized ??
  if(SYS_IS_CALLED_FROM_ISR())
 80200ac:	4b16      	ldr	r3, [pc, #88]	; (8020108 <SPIBusTaskWrite+0xa8>)
 80200ae:	685b      	ldr	r3, [r3, #4]
 80200b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80200b4:	2b00      	cmp	r3, #0
 80200b6:	d007      	beq.n	80200c8 <SPIBusTaskWrite+0x68>
  {
    // we cannot read and write in the SPI BUS from an ISR. Notify the error
    SYS_SET_SERVICE_LEVEL_ERROR_CODE(SYS_SPIBUS_TASK_IO_ERROR_CODE);
 80200b8:	4b14      	ldr	r3, [pc, #80]	; (802010c <SPIBusTaskWrite+0xac>)
 80200ba:	f240 32ea 	movw	r2, #1002	; 0x3ea
 80200be:	805a      	strh	r2, [r3, #2]
    xRes = SYS_SPIBUS_TASK_IO_ERROR_CODE;
 80200c0:	f240 33ea 	movw	r3, #1002	; 0x3ea
 80200c4:	84fb      	strh	r3, [r7, #38]	; 0x26
 80200c6:	e010      	b.n	80200ea <SPIBusTaskWrite+0x8a>
  }
  else
  {
    if(TX_SUCCESS != tx_queue_send(&s_xTaskObj.m_xInQueue, &xMsg, AMT_MS_TO_TICKS(SPIBUS_OP_WAIT_MS)))
 80200c8:	f107 0310 	add.w	r3, r7, #16
 80200cc:	2232      	movs	r2, #50	; 0x32
 80200ce:	4619      	mov	r1, r3
 80200d0:	480f      	ldr	r0, [pc, #60]	; (8020110 <SPIBusTaskWrite+0xb0>)
 80200d2:	f7f2 ff0b 	bl	8012eec <_txe_queue_send>
 80200d6:	4603      	mov	r3, r0
 80200d8:	2b00      	cmp	r3, #0
 80200da:	d006      	beq.n	80200ea <SPIBusTaskWrite+0x8a>
    {
      SYS_SET_SERVICE_LEVEL_ERROR_CODE(SYS_SPIBUS_TASK_IO_ERROR_CODE);
 80200dc:	4b0b      	ldr	r3, [pc, #44]	; (802010c <SPIBusTaskWrite+0xac>)
 80200de:	f240 32ea 	movw	r2, #1002	; 0x3ea
 80200e2:	805a      	strh	r2, [r3, #2]
      xRes = SYS_SPIBUS_TASK_IO_ERROR_CODE;
 80200e4:	f240 33ea 	movw	r3, #1002	; 0x3ea
 80200e8:	84fb      	strh	r3, [r7, #38]	; 0x26
    }
  }
//  }

  if(!SYS_IS_ERROR_CODE(xRes))
 80200ea:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80200ec:	2b00      	cmp	r3, #0
 80200ee:	d104      	bne.n	80200fa <SPIBusTaskWrite+0x9a>
  {
    // suspend the sensor task.
    xRes = SPIBusIFWaitIOComplete(pxSPISensor);
 80200f0:	6a38      	ldr	r0, [r7, #32]
 80200f2:	f7ff fb1b 	bl	801f72c <SPIBusIFWaitIOComplete>
 80200f6:	4603      	mov	r3, r0
 80200f8:	84fb      	strh	r3, [r7, #38]	; 0x26
  }

  return xRes;
 80200fa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
 80200fc:	4618      	mov	r0, r3
 80200fe:	3728      	adds	r7, #40	; 0x28
 8020100:	46bd      	mov	sp, r7
 8020102:	bd80      	pop	{r7, pc}
 8020104:	08027760 	.word	0x08027760
 8020108:	e000ed00 	.word	0xe000ed00
 802010c:	20000700 	.word	0x20000700
 8020110:	2003acb0 	.word	0x2003acb0

08020114 <SPIBusTaskRead>:

static int32_t SPIBusTaskRead(void *pxSensor, uint8_t nRegAddr, uint8_t *pnData, uint16_t nSize)
{
 8020114:	b580      	push	{r7, lr}
 8020116:	b08a      	sub	sp, #40	; 0x28
 8020118:	af00      	add	r7, sp, #0
 802011a:	60f8      	str	r0, [r7, #12]
 802011c:	607a      	str	r2, [r7, #4]
 802011e:	461a      	mov	r2, r3
 8020120:	460b      	mov	r3, r1
 8020122:	72fb      	strb	r3, [r7, #11]
 8020124:	4613      	mov	r3, r2
 8020126:	813b      	strh	r3, [r7, #8]
  assert_param(pxSensor);
 8020128:	68fb      	ldr	r3, [r7, #12]
 802012a:	2b00      	cmp	r3, #0
 802012c:	d104      	bne.n	8020138 <SPIBusTaskRead+0x24>
 802012e:	f240 210b 	movw	r1, #523	; 0x20b
 8020132:	4822      	ldr	r0, [pc, #136]	; (80201bc <SPIBusTaskRead+0xa8>)
 8020134:	f7f5 f8b9 	bl	80152aa <assert_failed>
  SPIBusIF *pxSPISensor = (SPIBusIF*) pxSensor;
 8020138:	68fb      	ldr	r3, [r7, #12]
 802013a:	623b      	str	r3, [r7, #32]
  sys_error_code_t xRes = SYS_NO_ERROR_CODE;
 802013c:	2300      	movs	r3, #0
 802013e:	84fb      	strh	r3, [r7, #38]	; 0x26

  uint8_t nAutoInc = 0x00;
 8020140:	2300      	movs	r3, #0
 8020142:	77fb      	strb	r3, [r7, #31]
  struct spiIOMessage_t xMsg =
 8020144:	2306      	movs	r3, #6
 8020146:	743b      	strb	r3, [r7, #16]
 8020148:	7afa      	ldrb	r2, [r7, #11]
 802014a:	7ffb      	ldrb	r3, [r7, #31]
 802014c:	4313      	orrs	r3, r2
 802014e:	b2db      	uxtb	r3, r3
 8020150:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8020154:	b2db      	uxtb	r3, r3
 8020156:	747b      	strb	r3, [r7, #17]
 8020158:	893b      	ldrh	r3, [r7, #8]
 802015a:	827b      	strh	r3, [r7, #18]
 802015c:	687b      	ldr	r3, [r7, #4]
 802015e:	617b      	str	r3, [r7, #20]
 8020160:	6a3b      	ldr	r3, [r7, #32]
 8020162:	61bb      	str	r3, [r7, #24]
      .nRegAddr = nRegAddr | 0x80 | nAutoInc,
      .pnData = pnData,
      .nDataSize = nSize };

  // if (s_xTaskObj.m_xInQueue != NULL) { //TODO: STF.Port - how to know if the task has been initialized ??
  if(SYS_IS_CALLED_FROM_ISR())
 8020164:	4b16      	ldr	r3, [pc, #88]	; (80201c0 <SPIBusTaskRead+0xac>)
 8020166:	685b      	ldr	r3, [r3, #4]
 8020168:	f3c3 0308 	ubfx	r3, r3, #0, #9
 802016c:	2b00      	cmp	r3, #0
 802016e:	d007      	beq.n	8020180 <SPIBusTaskRead+0x6c>
  {
    // we cannot read and write in the SPI BUS from an ISR. Notify the error
    SYS_SET_SERVICE_LEVEL_ERROR_CODE(SYS_SPIBUS_TASK_IO_ERROR_CODE);
 8020170:	4b14      	ldr	r3, [pc, #80]	; (80201c4 <SPIBusTaskRead+0xb0>)
 8020172:	f240 32ea 	movw	r2, #1002	; 0x3ea
 8020176:	805a      	strh	r2, [r3, #2]
    xRes = SYS_SPIBUS_TASK_IO_ERROR_CODE;
 8020178:	f240 33ea 	movw	r3, #1002	; 0x3ea
 802017c:	84fb      	strh	r3, [r7, #38]	; 0x26
 802017e:	e010      	b.n	80201a2 <SPIBusTaskRead+0x8e>
  }
  else
  {
    if(TX_SUCCESS != tx_queue_send(&s_xTaskObj.m_xInQueue, &xMsg, AMT_MS_TO_TICKS(SPIBUS_OP_WAIT_MS)))
 8020180:	f107 0310 	add.w	r3, r7, #16
 8020184:	2232      	movs	r2, #50	; 0x32
 8020186:	4619      	mov	r1, r3
 8020188:	480f      	ldr	r0, [pc, #60]	; (80201c8 <SPIBusTaskRead+0xb4>)
 802018a:	f7f2 feaf 	bl	8012eec <_txe_queue_send>
 802018e:	4603      	mov	r3, r0
 8020190:	2b00      	cmp	r3, #0
 8020192:	d006      	beq.n	80201a2 <SPIBusTaskRead+0x8e>
    {
      SYS_SET_SERVICE_LEVEL_ERROR_CODE(SYS_SPIBUS_TASK_IO_ERROR_CODE);
 8020194:	4b0b      	ldr	r3, [pc, #44]	; (80201c4 <SPIBusTaskRead+0xb0>)
 8020196:	f240 32ea 	movw	r2, #1002	; 0x3ea
 802019a:	805a      	strh	r2, [r3, #2]
      xRes = SYS_SPIBUS_TASK_IO_ERROR_CODE;
 802019c:	f240 33ea 	movw	r3, #1002	; 0x3ea
 80201a0:	84fb      	strh	r3, [r7, #38]	; 0x26
    }
  }
//  }

  if(!SYS_IS_ERROR_CODE(xRes))
 80201a2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80201a4:	2b00      	cmp	r3, #0
 80201a6:	d104      	bne.n	80201b2 <SPIBusTaskRead+0x9e>
  {
    xRes = SPIBusIFWaitIOComplete(pxSPISensor);
 80201a8:	6a38      	ldr	r0, [r7, #32]
 80201aa:	f7ff fabf 	bl	801f72c <SPIBusIFWaitIOComplete>
 80201ae:	4603      	mov	r3, r0
 80201b0:	84fb      	strh	r3, [r7, #38]	; 0x26
  }

  return xRes;
 80201b2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
 80201b4:	4618      	mov	r0, r3
 80201b6:	3728      	adds	r7, #40	; 0x28
 80201b8:	46bd      	mov	sp, r7
 80201ba:	bd80      	pop	{r7, pc}
 80201bc:	08027760 	.word	0x08027760
 80201c0:	e000ed00 	.word	0xe000ed00
 80201c4:	20000700 	.word	0x20000700
 80201c8:	2003acb0 	.word	0x2003acb0

080201cc <SMGetNsensor>:
/* Private variables ---------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Private functions ---------------------------------------------------------*/

uint16_t SMGetNsensor(void)
{
 80201cc:	b480      	push	{r7}
 80201ce:	af00      	add	r7, sp, #0
  return spSMObj.n_sensors;
 80201d0:	4b03      	ldr	r3, [pc, #12]	; (80201e0 <SMGetNsensor+0x14>)
 80201d2:	899b      	ldrh	r3, [r3, #12]
}
 80201d4:	4618      	mov	r0, r3
 80201d6:	46bd      	mov	sp, r7
 80201d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80201dc:	4770      	bx	lr
 80201de:	bf00      	nop
 80201e0:	2003acec 	.word	0x2003acec

080201e4 <SMGetSensorObserver>:

ISourceObservable* SMGetSensorObserver(uint8_t id)
{
 80201e4:	b590      	push	{r4, r7, lr}
 80201e6:	b083      	sub	sp, #12
 80201e8:	af00      	add	r7, sp, #0
 80201ea:	4603      	mov	r3, r0
 80201ec:	71fb      	strb	r3, [r7, #7]
  if(id < SMGetNsensor())
 80201ee:	79fb      	ldrb	r3, [r7, #7]
 80201f0:	b29c      	uxth	r4, r3
 80201f2:	f7ff ffeb 	bl	80201cc <SMGetNsensor>
 80201f6:	4603      	mov	r3, r0
 80201f8:	429c      	cmp	r4, r3
 80201fa:	d204      	bcs.n	8020206 <SMGetSensorObserver+0x22>
  {
    return (ISourceObservable*) (spSMObj.Sensors[id]);
 80201fc:	79fb      	ldrb	r3, [r7, #7]
 80201fe:	4a06      	ldr	r2, [pc, #24]	; (8020218 <SMGetSensorObserver+0x34>)
 8020200:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8020204:	e003      	b.n	802020e <SMGetSensorObserver+0x2a>
  }
  else
  {
    SYS_SET_SERVICE_LEVEL_ERROR_CODE(SYS_INVALID_PARAMETER_ERROR_CODE);
 8020206:	4b05      	ldr	r3, [pc, #20]	; (802021c <SMGetSensorObserver+0x38>)
 8020208:	2204      	movs	r2, #4
 802020a:	805a      	strh	r2, [r3, #2]
    return 0;
 802020c:	2300      	movs	r3, #0
  }
}
 802020e:	4618      	mov	r0, r3
 8020210:	370c      	adds	r7, #12
 8020212:	46bd      	mov	sp, r7
 8020214:	bd90      	pop	{r4, r7, pc}
 8020216:	bf00      	nop
 8020218:	2003acec 	.word	0x2003acec
 802021c:	20000700 	.word	0x20000700

08020220 <SMSensorSetODR>:

sys_error_code_t SMSensorSetODR(uint8_t id, float ODR)
{
 8020220:	b590      	push	{r4, r7, lr}
 8020222:	b085      	sub	sp, #20
 8020224:	af00      	add	r7, sp, #0
 8020226:	4603      	mov	r3, r0
 8020228:	ed87 0a00 	vstr	s0, [r7]
 802022c:	71fb      	strb	r3, [r7, #7]
  sys_error_code_t res = SYS_NO_ERROR_CODE;
 802022e:	2300      	movs	r3, #0
 8020230:	81fb      	strh	r3, [r7, #14]

  if(id < SMGetNsensor())
 8020232:	79fb      	ldrb	r3, [r7, #7]
 8020234:	b29c      	uxth	r4, r3
 8020236:	f7ff ffc9 	bl	80201cc <SMGetNsensor>
 802023a:	4603      	mov	r3, r0
 802023c:	429c      	cmp	r4, r3
 802023e:	d20c      	bcs.n	802025a <SMSensorSetODR+0x3a>
  {
    ISensor_t *p_obj = (ISensor_t*) (spSMObj.Sensors[id]);
 8020240:	79fb      	ldrb	r3, [r7, #7]
 8020242:	4a0b      	ldr	r2, [pc, #44]	; (8020270 <SMSensorSetODR+0x50>)
 8020244:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8020248:	60bb      	str	r3, [r7, #8]
    res = ISensorSetODR(p_obj, ODR);
 802024a:	ed97 0a00 	vldr	s0, [r7]
 802024e:	68b8      	ldr	r0, [r7, #8]
 8020250:	f7ff f970 	bl	801f534 <ISensorSetODR>
 8020254:	4603      	mov	r3, r0
 8020256:	81fb      	strh	r3, [r7, #14]
 8020258:	e004      	b.n	8020264 <SMSensorSetODR+0x44>
  }
  else
  {
    res = SYS_INVALID_PARAMETER_ERROR_CODE;
 802025a:	2304      	movs	r3, #4
 802025c:	81fb      	strh	r3, [r7, #14]
    SYS_SET_SERVICE_LEVEL_ERROR_CODE(SYS_INVALID_PARAMETER_ERROR_CODE);
 802025e:	4b05      	ldr	r3, [pc, #20]	; (8020274 <SMSensorSetODR+0x54>)
 8020260:	2204      	movs	r2, #4
 8020262:	805a      	strh	r2, [r3, #2]
  }

  return res;
 8020264:	89fb      	ldrh	r3, [r7, #14]
}
 8020266:	4618      	mov	r0, r3
 8020268:	3714      	adds	r7, #20
 802026a:	46bd      	mov	sp, r7
 802026c:	bd90      	pop	{r4, r7, pc}
 802026e:	bf00      	nop
 8020270:	2003acec 	.word	0x2003acec
 8020274:	20000700 	.word	0x20000700

08020278 <SMSensorSetFS>:

sys_error_code_t SMSensorSetFS(uint8_t id, float FS)
{
 8020278:	b590      	push	{r4, r7, lr}
 802027a:	b085      	sub	sp, #20
 802027c:	af00      	add	r7, sp, #0
 802027e:	4603      	mov	r3, r0
 8020280:	ed87 0a00 	vstr	s0, [r7]
 8020284:	71fb      	strb	r3, [r7, #7]
  sys_error_code_t res = SYS_NO_ERROR_CODE;
 8020286:	2300      	movs	r3, #0
 8020288:	81fb      	strh	r3, [r7, #14]

  if(id < SMGetNsensor())
 802028a:	79fb      	ldrb	r3, [r7, #7]
 802028c:	b29c      	uxth	r4, r3
 802028e:	f7ff ff9d 	bl	80201cc <SMGetNsensor>
 8020292:	4603      	mov	r3, r0
 8020294:	429c      	cmp	r4, r3
 8020296:	d20c      	bcs.n	80202b2 <SMSensorSetFS+0x3a>
  {
    ISensor_t *p_obj = (ISensor_t*) (spSMObj.Sensors[id]);
 8020298:	79fb      	ldrb	r3, [r7, #7]
 802029a:	4a0b      	ldr	r2, [pc, #44]	; (80202c8 <SMSensorSetFS+0x50>)
 802029c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80202a0:	60bb      	str	r3, [r7, #8]
    res = ISensorSetFS(p_obj, FS);
 80202a2:	ed97 0a00 	vldr	s0, [r7]
 80202a6:	68b8      	ldr	r0, [r7, #8]
 80202a8:	f7ff f956 	bl	801f558 <ISensorSetFS>
 80202ac:	4603      	mov	r3, r0
 80202ae:	81fb      	strh	r3, [r7, #14]
 80202b0:	e004      	b.n	80202bc <SMSensorSetFS+0x44>
  }
  else
  {
    res = SYS_INVALID_PARAMETER_ERROR_CODE;
 80202b2:	2304      	movs	r3, #4
 80202b4:	81fb      	strh	r3, [r7, #14]
    SYS_SET_SERVICE_LEVEL_ERROR_CODE(SYS_INVALID_PARAMETER_ERROR_CODE);
 80202b6:	4b05      	ldr	r3, [pc, #20]	; (80202cc <SMSensorSetFS+0x54>)
 80202b8:	2204      	movs	r2, #4
 80202ba:	805a      	strh	r2, [r3, #2]
  }

  return res;
 80202bc:	89fb      	ldrh	r3, [r7, #14]
}
 80202be:	4618      	mov	r0, r3
 80202c0:	3714      	adds	r7, #20
 80202c2:	46bd      	mov	sp, r7
 80202c4:	bd90      	pop	{r4, r7, pc}
 80202c6:	bf00      	nop
 80202c8:	2003acec 	.word	0x2003acec
 80202cc:	20000700 	.word	0x20000700

080202d0 <SMSensorEnable>:

sys_error_code_t SMSensorEnable(uint8_t id)
{
 80202d0:	b590      	push	{r4, r7, lr}
 80202d2:	b085      	sub	sp, #20
 80202d4:	af00      	add	r7, sp, #0
 80202d6:	4603      	mov	r3, r0
 80202d8:	71fb      	strb	r3, [r7, #7]
  sys_error_code_t res = SYS_NO_ERROR_CODE;
 80202da:	2300      	movs	r3, #0
 80202dc:	81fb      	strh	r3, [r7, #14]

  if(id < SMGetNsensor())
 80202de:	79fb      	ldrb	r3, [r7, #7]
 80202e0:	b29c      	uxth	r4, r3
 80202e2:	f7ff ff73 	bl	80201cc <SMGetNsensor>
 80202e6:	4603      	mov	r3, r0
 80202e8:	429c      	cmp	r4, r3
 80202ea:	d20a      	bcs.n	8020302 <SMSensorEnable+0x32>
  {
    ISensor_t *p_obj = (ISensor_t*) (spSMObj.Sensors[id]);
 80202ec:	79fb      	ldrb	r3, [r7, #7]
 80202ee:	4a0a      	ldr	r2, [pc, #40]	; (8020318 <SMSensorEnable+0x48>)
 80202f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80202f4:	60bb      	str	r3, [r7, #8]
    res = ISensorEnable(p_obj);
 80202f6:	68b8      	ldr	r0, [r7, #8]
 80202f8:	f7ff f940 	bl	801f57c <ISensorEnable>
 80202fc:	4603      	mov	r3, r0
 80202fe:	81fb      	strh	r3, [r7, #14]
 8020300:	e004      	b.n	802030c <SMSensorEnable+0x3c>
  }
  else
  {
    res = SYS_INVALID_PARAMETER_ERROR_CODE;
 8020302:	2304      	movs	r3, #4
 8020304:	81fb      	strh	r3, [r7, #14]
    SYS_SET_SERVICE_LEVEL_ERROR_CODE(SYS_INVALID_PARAMETER_ERROR_CODE);
 8020306:	4b05      	ldr	r3, [pc, #20]	; (802031c <SMSensorEnable+0x4c>)
 8020308:	2204      	movs	r2, #4
 802030a:	805a      	strh	r2, [r3, #2]
  }

  return res;
 802030c:	89fb      	ldrh	r3, [r7, #14]
}
 802030e:	4618      	mov	r0, r3
 8020310:	3714      	adds	r7, #20
 8020312:	46bd      	mov	sp, r7
 8020314:	bd90      	pop	{r4, r7, pc}
 8020316:	bf00      	nop
 8020318:	2003acec 	.word	0x2003acec
 802031c:	20000700 	.word	0x20000700

08020320 <SMSensorDisable>:

sys_error_code_t SMSensorDisable(uint8_t id)
{
 8020320:	b590      	push	{r4, r7, lr}
 8020322:	b085      	sub	sp, #20
 8020324:	af00      	add	r7, sp, #0
 8020326:	4603      	mov	r3, r0
 8020328:	71fb      	strb	r3, [r7, #7]
  sys_error_code_t res = SYS_NO_ERROR_CODE;
 802032a:	2300      	movs	r3, #0
 802032c:	81fb      	strh	r3, [r7, #14]

  if(id < SMGetNsensor())
 802032e:	79fb      	ldrb	r3, [r7, #7]
 8020330:	b29c      	uxth	r4, r3
 8020332:	f7ff ff4b 	bl	80201cc <SMGetNsensor>
 8020336:	4603      	mov	r3, r0
 8020338:	429c      	cmp	r4, r3
 802033a:	d20a      	bcs.n	8020352 <SMSensorDisable+0x32>
  {
    ISensor_t *p_obj = (ISensor_t*) (spSMObj.Sensors[id]);
 802033c:	79fb      	ldrb	r3, [r7, #7]
 802033e:	4a0a      	ldr	r2, [pc, #40]	; (8020368 <SMSensorDisable+0x48>)
 8020340:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8020344:	60bb      	str	r3, [r7, #8]
    res = ISensorDisable(p_obj);
 8020346:	68b8      	ldr	r0, [r7, #8]
 8020348:	f7ff f926 	bl	801f598 <ISensorDisable>
 802034c:	4603      	mov	r3, r0
 802034e:	81fb      	strh	r3, [r7, #14]
 8020350:	e004      	b.n	802035c <SMSensorDisable+0x3c>
  }
  else
  {
    res = SYS_INVALID_PARAMETER_ERROR_CODE;
 8020352:	2304      	movs	r3, #4
 8020354:	81fb      	strh	r3, [r7, #14]
    SYS_SET_SERVICE_LEVEL_ERROR_CODE(SYS_INVALID_PARAMETER_ERROR_CODE);
 8020356:	4b05      	ldr	r3, [pc, #20]	; (802036c <SMSensorDisable+0x4c>)
 8020358:	2204      	movs	r2, #4
 802035a:	805a      	strh	r2, [r3, #2]
  }

  return res;
 802035c:	89fb      	ldrh	r3, [r7, #14]
}
 802035e:	4618      	mov	r0, r3
 8020360:	3714      	adds	r7, #20
 8020362:	46bd      	mov	sp, r7
 8020364:	bd90      	pop	{r4, r7, pc}
 8020366:	bf00      	nop
 8020368:	2003acec 	.word	0x2003acec
 802036c:	20000700 	.word	0x20000700

08020370 <SMSensorGetDescription>:

SensorDescriptor_t SMSensorGetDescription(uint8_t id)
{
 8020370:	b590      	push	{r4, r7, lr}
 8020372:	b0bf      	sub	sp, #252	; 0xfc
 8020374:	af00      	add	r7, sp, #0
 8020376:	6078      	str	r0, [r7, #4]
 8020378:	460b      	mov	r3, r1
 802037a:	70fb      	strb	r3, [r7, #3]
  if(id < SMGetNsensor())
 802037c:	78fb      	ldrb	r3, [r7, #3]
 802037e:	b29c      	uxth	r4, r3
 8020380:	f7ff ff24 	bl	80201cc <SMGetNsensor>
 8020384:	4603      	mov	r3, r0
 8020386:	429c      	cmp	r4, r3
 8020388:	d20c      	bcs.n	80203a4 <SMSensorGetDescription+0x34>
  {
    ISensor_t *p_obj = (ISensor_t*) (spSMObj.Sensors[id]);
 802038a:	78fb      	ldrb	r3, [r7, #3]
 802038c:	4a10      	ldr	r2, [pc, #64]	; (80203d0 <SMSensorGetDescription+0x60>)
 802038e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8020392:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    return ISensorGetDescription(p_obj);
 8020396:	687b      	ldr	r3, [r7, #4]
 8020398:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 802039c:	4618      	mov	r0, r3
 802039e:	f7ff f917 	bl	801f5d0 <ISensorGetDescription>
 80203a2:	e011      	b.n	80203c8 <SMSensorGetDescription+0x58>
  }
  else
  {
    SYS_SET_SERVICE_LEVEL_ERROR_CODE(SYS_INVALID_PARAMETER_ERROR_CODE);
 80203a4:	4b0b      	ldr	r3, [pc, #44]	; (80203d4 <SMSensorGetDescription+0x64>)
 80203a6:	2204      	movs	r2, #4
 80203a8:	805a      	strh	r2, [r3, #2]
    SensorDescriptor_t device_description;
    memset(&device_description, 0, sizeof(SensorDescriptor_t));
 80203aa:	f107 030c 	add.w	r3, r7, #12
 80203ae:	22e8      	movs	r2, #232	; 0xe8
 80203b0:	2100      	movs	r1, #0
 80203b2:	4618      	mov	r0, r3
 80203b4:	f003 fc39 	bl	8023c2a <memset>
    return device_description;
 80203b8:	687b      	ldr	r3, [r7, #4]
 80203ba:	4618      	mov	r0, r3
 80203bc:	f107 030c 	add.w	r3, r7, #12
 80203c0:	22e8      	movs	r2, #232	; 0xe8
 80203c2:	4619      	mov	r1, r3
 80203c4:	f003 fc24 	bl	8023c10 <memcpy>
  }
}
 80203c8:	6878      	ldr	r0, [r7, #4]
 80203ca:	37fc      	adds	r7, #252	; 0xfc
 80203cc:	46bd      	mov	sp, r7
 80203ce:	bd90      	pop	{r4, r7, pc}
 80203d0:	2003acec 	.word	0x2003acec
 80203d4:	20000700 	.word	0x20000700

080203d8 <SMGetSensorManager>:
    return SYS_OUT_OF_MEMORY_ERROR_CODE;
  }
}

SensorManager_t* SMGetSensorManager(void)
{
 80203d8:	b480      	push	{r7}
 80203da:	af00      	add	r7, sp, #0
  return &spSMObj;
 80203dc:	4b02      	ldr	r3, [pc, #8]	; (80203e8 <SMGetSensorManager+0x10>)
}
 80203de:	4618      	mov	r0, r3
 80203e0:	46bd      	mov	sp, r7
 80203e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80203e6:	4770      	bx	lr
 80203e8:	2003acec 	.word	0x2003acec

080203ec <SMAddSensor>:
/* Private variables ---------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Private functions ---------------------------------------------------------*/

uint8_t SMAddSensor(ISensor_t *pSensor)
{
 80203ec:	b580      	push	{r7, lr}
 80203ee:	b086      	sub	sp, #24
 80203f0:	af00      	add	r7, sp, #0
 80203f2:	6078      	str	r0, [r7, #4]
  assert_param(pSensor != NULL);
 80203f4:	687b      	ldr	r3, [r7, #4]
 80203f6:	2b00      	cmp	r3, #0
 80203f8:	d103      	bne.n	8020402 <SMAddSensor+0x16>
 80203fa:	2128      	movs	r1, #40	; 0x28
 80203fc:	4834      	ldr	r0, [pc, #208]	; (80204d0 <SMAddSensor+0xe4>)
 80203fe:	f7f4 ff54 	bl	80152aa <assert_failed>
  uint8_t id = SM_INVALID_SENSOR_ID;
 8020402:	23ff      	movs	r3, #255	; 0xff
 8020404:	75fb      	strb	r3, [r7, #23]
  uint16_t ii = 0;
 8020406:	2300      	movs	r3, #0
 8020408:	82bb      	strh	r3, [r7, #20]
  boolean_t add_ok = FALSE;
 802040a:	2300      	movs	r3, #0
 802040c:	74fb      	strb	r3, [r7, #19]
  SensorManager_t *spSMObj = SMGetSensorManager();
 802040e:	f7ff ffe3 	bl	80203d8 <SMGetSensorManager>
 8020412:	60f8      	str	r0, [r7, #12]

  /* check if the sensor has been already registered with the SensorManager. */
  for(ii = 0; ii < spSMObj->n_sensors; ++ii)
 8020414:	2300      	movs	r3, #0
 8020416:	82bb      	strh	r3, [r7, #20]
 8020418:	e01d      	b.n	8020456 <SMAddSensor+0x6a>
  {
    if(spSMObj->Sensors[ii] == pSensor)
 802041a:	8aba      	ldrh	r2, [r7, #20]
 802041c:	68fb      	ldr	r3, [r7, #12]
 802041e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8020422:	687a      	ldr	r2, [r7, #4]
 8020424:	429a      	cmp	r2, r3
 8020426:	d113      	bne.n	8020450 <SMAddSensor+0x64>
    {
      /* sensor already registered with the SensorManager. */

      SYS_DEBUGF(SYS_DBG_LEVEL_WARNING, ("SM: sensor ID=%d already registered.\r\n", ii));
 8020428:	4b2a      	ldr	r3, [pc, #168]	; (80204d4 <SMAddSensor+0xe8>)
 802042a:	781b      	ldrb	r3, [r3, #0]
 802042c:	2b05      	cmp	r3, #5
 802042e:	d80b      	bhi.n	8020448 <SMAddSensor+0x5c>
 8020430:	4b29      	ldr	r3, [pc, #164]	; (80204d8 <SMAddSensor+0xec>)
 8020432:	681b      	ldr	r3, [r3, #0]
 8020434:	4798      	blx	r3
 8020436:	4b29      	ldr	r3, [pc, #164]	; (80204dc <SMAddSensor+0xf0>)
 8020438:	681b      	ldr	r3, [r3, #0]
 802043a:	8aba      	ldrh	r2, [r7, #20]
 802043c:	4611      	mov	r1, r2
 802043e:	4828      	ldr	r0, [pc, #160]	; (80204e0 <SMAddSensor+0xf4>)
 8020440:	4798      	blx	r3
 8020442:	4b28      	ldr	r3, [pc, #160]	; (80204e4 <SMAddSensor+0xf8>)
 8020444:	681b      	ldr	r3, [r3, #0]
 8020446:	4798      	blx	r3

      id = ii;
 8020448:	8abb      	ldrh	r3, [r7, #20]
 802044a:	75fb      	strb	r3, [r7, #23]
      return id;
 802044c:	7dfb      	ldrb	r3, [r7, #23]
 802044e:	e03b      	b.n	80204c8 <SMAddSensor+0xdc>
  for(ii = 0; ii < spSMObj->n_sensors; ++ii)
 8020450:	8abb      	ldrh	r3, [r7, #20]
 8020452:	3301      	adds	r3, #1
 8020454:	82bb      	strh	r3, [r7, #20]
 8020456:	68fb      	ldr	r3, [r7, #12]
 8020458:	899b      	ldrh	r3, [r3, #12]
 802045a:	8aba      	ldrh	r2, [r7, #20]
 802045c:	429a      	cmp	r2, r3
 802045e:	d3dc      	bcc.n	802041a <SMAddSensor+0x2e>
    }
  }

  for(ii = 0; ii < spSMObj->n_sensors + 1; ii++)
 8020460:	2300      	movs	r3, #0
 8020462:	82bb      	strh	r3, [r7, #20]
 8020464:	e011      	b.n	802048a <SMAddSensor+0x9e>
  {
    if(spSMObj->Sensors[ii] == NULL)
 8020466:	8aba      	ldrh	r2, [r7, #20]
 8020468:	68fb      	ldr	r3, [r7, #12]
 802046a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802046e:	2b00      	cmp	r3, #0
 8020470:	d108      	bne.n	8020484 <SMAddSensor+0x98>
    {
      spSMObj->Sensors[ii] = pSensor;
 8020472:	8aba      	ldrh	r2, [r7, #20]
 8020474:	68fb      	ldr	r3, [r7, #12]
 8020476:	6879      	ldr	r1, [r7, #4]
 8020478:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      add_ok = TRUE;
 802047c:	2301      	movs	r3, #1
 802047e:	74fb      	strb	r3, [r7, #19]
      id = ii;
 8020480:	8abb      	ldrh	r3, [r7, #20]
 8020482:	75fb      	strb	r3, [r7, #23]
  for(ii = 0; ii < spSMObj->n_sensors + 1; ii++)
 8020484:	8abb      	ldrh	r3, [r7, #20]
 8020486:	3301      	adds	r3, #1
 8020488:	82bb      	strh	r3, [r7, #20]
 802048a:	68fb      	ldr	r3, [r7, #12]
 802048c:	899b      	ldrh	r3, [r3, #12]
 802048e:	8aba      	ldrh	r2, [r7, #20]
 8020490:	429a      	cmp	r2, r3
 8020492:	d9e8      	bls.n	8020466 <SMAddSensor+0x7a>
    }
  }

  if(add_ok)
 8020494:	7cfb      	ldrb	r3, [r7, #19]
 8020496:	2b00      	cmp	r3, #0
 8020498:	d006      	beq.n	80204a8 <SMAddSensor+0xbc>
  {
    spSMObj->n_sensors++;
 802049a:	68fb      	ldr	r3, [r7, #12]
 802049c:	899b      	ldrh	r3, [r3, #12]
 802049e:	3301      	adds	r3, #1
 80204a0:	b29a      	uxth	r2, r3
 80204a2:	68fb      	ldr	r3, [r7, #12]
 80204a4:	819a      	strh	r2, [r3, #12]
 80204a6:	e00e      	b.n	80204c6 <SMAddSensor+0xda>
  }
#if defined(DEBUG) || defined(SYS_DEBUG)
  else
  {
    SYS_DEBUGF(SYS_DBG_LEVEL_WARNING, ("SM: unable to add sensor. MAX_SENSORS = %d\r\n", COM_MAX_SENSORS));
 80204a8:	4b0a      	ldr	r3, [pc, #40]	; (80204d4 <SMAddSensor+0xe8>)
 80204aa:	781b      	ldrb	r3, [r3, #0]
 80204ac:	2b05      	cmp	r3, #5
 80204ae:	d80a      	bhi.n	80204c6 <SMAddSensor+0xda>
 80204b0:	4b09      	ldr	r3, [pc, #36]	; (80204d8 <SMAddSensor+0xec>)
 80204b2:	681b      	ldr	r3, [r3, #0]
 80204b4:	4798      	blx	r3
 80204b6:	4b09      	ldr	r3, [pc, #36]	; (80204dc <SMAddSensor+0xf0>)
 80204b8:	681b      	ldr	r3, [r3, #0]
 80204ba:	2103      	movs	r1, #3
 80204bc:	480a      	ldr	r0, [pc, #40]	; (80204e8 <SMAddSensor+0xfc>)
 80204be:	4798      	blx	r3
 80204c0:	4b08      	ldr	r3, [pc, #32]	; (80204e4 <SMAddSensor+0xf8>)
 80204c2:	681b      	ldr	r3, [r3, #0]
 80204c4:	4798      	blx	r3
  }
#endif

  return id;
 80204c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80204c8:	4618      	mov	r0, r3
 80204ca:	3718      	adds	r7, #24
 80204cc:	46bd      	mov	sp, r7
 80204ce:	bd80      	pop	{r7, pc}
 80204d0:	080277e0 	.word	0x080277e0
 80204d4:	2000002c 	.word	0x2000002c
 80204d8:	20000030 	.word	0x20000030
 80204dc:	20000038 	.word	0x20000038
 80204e0:	08027850 	.word	0x08027850
 80204e4:	20000034 	.word	0x20000034
 80204e8:	08027878 	.word	0x08027878

080204ec <SMUtilityDrvGetTimeStamp>:
/* Inline functions definition */
/*******************************/

SYS_DEFINE_INLINE
uint32_t SMUtilityDrvGetTimeStamp(SMUtilityDriver_t *_this)
{
 80204ec:	b580      	push	{r7, lr}
 80204ee:	b082      	sub	sp, #8
 80204f0:	af00      	add	r7, sp, #0
 80204f2:	6078      	str	r0, [r7, #4]
  assert_param(_this != NULL);
 80204f4:	687b      	ldr	r3, [r7, #4]
 80204f6:	2b00      	cmp	r3, #0
 80204f8:	d103      	bne.n	8020502 <SMUtilityDrvGetTimeStamp+0x16>
 80204fa:	216a      	movs	r1, #106	; 0x6a
 80204fc:	4805      	ldr	r0, [pc, #20]	; (8020514 <SMUtilityDrvGetTimeStamp+0x28>)
 80204fe:	f7f4 fed4 	bl	80152aa <assert_failed>

  return _this->mx_handle.p_mx_tim_cfg->p_tim->Instance->CNT;
 8020502:	687b      	ldr	r3, [r7, #4]
 8020504:	685b      	ldr	r3, [r3, #4]
 8020506:	681b      	ldr	r3, [r3, #0]
 8020508:	681b      	ldr	r3, [r3, #0]
 802050a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 802050c:	4618      	mov	r0, r3
 802050e:	3708      	adds	r7, #8
 8020510:	46bd      	mov	sp, r7
 8020512:	bd80      	pop	{r7, pc}
 8020514:	08027918 	.word	0x08027918

08020518 <SPIMasterDriverAlloc>:

/* Public API definition */
/*************************/

IIODriver* SPIMasterDriverAlloc(void)
{
 8020518:	b580      	push	{r7, lr}
 802051a:	b082      	sub	sp, #8
 802051c:	af00      	add	r7, sp, #0
  IIODriver *p_new_obj = (IIODriver*) SysAlloc(sizeof(SPIMasterDriver_t));
 802051e:	2028      	movs	r0, #40	; 0x28
 8020520:	f7ee feb6 	bl	800f290 <SysAlloc>
 8020524:	6078      	str	r0, [r7, #4]

  if(p_new_obj == NULL)
 8020526:	687b      	ldr	r3, [r7, #4]
 8020528:	2b00      	cmp	r3, #0
 802052a:	d103      	bne.n	8020534 <SPIMasterDriverAlloc+0x1c>
  {
    SYS_SET_LOW_LEVEL_ERROR_CODE(SYS_OUT_OF_MEMORY_ERROR_CODE);
 802052c:	4b05      	ldr	r3, [pc, #20]	; (8020544 <SPIMasterDriverAlloc+0x2c>)
 802052e:	2203      	movs	r2, #3
 8020530:	801a      	strh	r2, [r3, #0]
 8020532:	e002      	b.n	802053a <SPIMasterDriverAlloc+0x22>
    SYS_DEBUGF(SYS_DBG_LEVEL_WARNING, ("SPIMasterDriver - alloc failed.\r\n"));
  }
  else
  {
    p_new_obj->vptr = &sSPIMasterDriver_vtbl;
 8020534:	687b      	ldr	r3, [r7, #4]
 8020536:	4a04      	ldr	r2, [pc, #16]	; (8020548 <SPIMasterDriverAlloc+0x30>)
 8020538:	601a      	str	r2, [r3, #0]
  }

  return p_new_obj;
 802053a:	687b      	ldr	r3, [r7, #4]
}
 802053c:	4618      	mov	r0, r3
 802053e:	3708      	adds	r7, #8
 8020540:	46bd      	mov	sp, r7
 8020542:	bd80      	pop	{r7, pc}
 8020544:	20000700 	.word	0x20000700
 8020548:	08035d78 	.word	0x08035d78

0802054c <SPIMasterDriver_vtblInit>:

sys_error_code_t SPIMasterDriver_vtblInit(IDriver *_this, void *p_params)
{
 802054c:	b580      	push	{r7, lr}
 802054e:	b086      	sub	sp, #24
 8020550:	af00      	add	r7, sp, #0
 8020552:	6078      	str	r0, [r7, #4]
 8020554:	6039      	str	r1, [r7, #0]
  assert_param(_this != NULL);
 8020556:	687b      	ldr	r3, [r7, #4]
 8020558:	2b00      	cmp	r3, #0
 802055a:	d103      	bne.n	8020564 <SPIMasterDriver_vtblInit+0x18>
 802055c:	216b      	movs	r1, #107	; 0x6b
 802055e:	482b      	ldr	r0, [pc, #172]	; (802060c <SPIMasterDriver_vtblInit+0xc0>)
 8020560:	f7f4 fea3 	bl	80152aa <assert_failed>
  assert_param(p_params != NULL);
 8020564:	683b      	ldr	r3, [r7, #0]
 8020566:	2b00      	cmp	r3, #0
 8020568:	d103      	bne.n	8020572 <SPIMasterDriver_vtblInit+0x26>
 802056a:	216c      	movs	r1, #108	; 0x6c
 802056c:	4827      	ldr	r0, [pc, #156]	; (802060c <SPIMasterDriver_vtblInit+0xc0>)
 802056e:	f7f4 fe9c 	bl	80152aa <assert_failed>
  sys_error_code_t res = SYS_NO_ERROR_CODE;
 8020572:	2300      	movs	r3, #0
 8020574:	82fb      	strh	r3, [r7, #22]
  UINT nRes = TX_SUCCESS;
 8020576:	2300      	movs	r3, #0
 8020578:	613b      	str	r3, [r7, #16]
  SPIMasterDriver_t *p_obj = (SPIMasterDriver_t*) _this;
 802057a:	687b      	ldr	r3, [r7, #4]
 802057c:	60fb      	str	r3, [r7, #12]
  p_obj->mx_handle.p_mx_spi_cfg = ((SPIMasterDriverParams_t*) p_params)->p_mx_spi_cfg;
 802057e:	683b      	ldr	r3, [r7, #0]
 8020580:	681a      	ldr	r2, [r3, #0]
 8020582:	68fb      	ldr	r3, [r7, #12]
 8020584:	605a      	str	r2, [r3, #4]
  SPI_HandleTypeDef *p_spi = p_obj->mx_handle.p_mx_spi_cfg->p_spi_handle;
 8020586:	68fb      	ldr	r3, [r7, #12]
 8020588:	685b      	ldr	r3, [r3, #4]
 802058a:	681b      	ldr	r3, [r3, #0]
 802058c:	60bb      	str	r3, [r7, #8]

  p_obj->mx_handle.p_mx_spi_cfg->p_mx_dma_init_f();
 802058e:	68fb      	ldr	r3, [r7, #12]
 8020590:	685b      	ldr	r3, [r3, #4]
 8020592:	68db      	ldr	r3, [r3, #12]
 8020594:	4798      	blx	r3
  p_obj->mx_handle.p_mx_spi_cfg->p_mx_init_f();
 8020596:	68fb      	ldr	r3, [r7, #12]
 8020598:	685b      	ldr	r3, [r3, #4]
 802059a:	689b      	ldr	r3, [r3, #8]
 802059c:	4798      	blx	r3

  /* Register SPI DMA complete Callback */
  if(HAL_OK != HAL_SPI_RegisterCallback(p_spi, HAL_SPI_RX_COMPLETE_CB_ID, SPIMasterDriverTxRxCpltCallback))
 802059e:	4a1c      	ldr	r2, [pc, #112]	; (8020610 <SPIMasterDriver_vtblInit+0xc4>)
 80205a0:	2101      	movs	r1, #1
 80205a2:	68b8      	ldr	r0, [r7, #8]
 80205a4:	f7ea f9fa 	bl	800a99c <HAL_SPI_RegisterCallback>
 80205a8:	4603      	mov	r3, r0
 80205aa:	2b00      	cmp	r3, #0
 80205ac:	d005      	beq.n	80205ba <SPIMasterDriver_vtblInit+0x6e>
  {
    SYS_SET_LOW_LEVEL_ERROR_CODE(SYS_UNDEFINED_ERROR_CODE);
 80205ae:	4b19      	ldr	r3, [pc, #100]	; (8020614 <SPIMasterDriver_vtblInit+0xc8>)
 80205b0:	2202      	movs	r2, #2
 80205b2:	801a      	strh	r2, [r3, #0]
    res = SYS_UNDEFINED_ERROR_CODE;
 80205b4:	2302      	movs	r3, #2
 80205b6:	82fb      	strh	r3, [r7, #22]
 80205b8:	e022      	b.n	8020600 <SPIMasterDriver_vtblInit+0xb4>
  }
  else if(HAL_OK != HAL_SPI_RegisterCallback(p_spi, HAL_SPI_TX_COMPLETE_CB_ID, SPIMasterDriverTxRxCpltCallback))
 80205ba:	4a15      	ldr	r2, [pc, #84]	; (8020610 <SPIMasterDriver_vtblInit+0xc4>)
 80205bc:	2100      	movs	r1, #0
 80205be:	68b8      	ldr	r0, [r7, #8]
 80205c0:	f7ea f9ec 	bl	800a99c <HAL_SPI_RegisterCallback>
 80205c4:	4603      	mov	r3, r0
 80205c6:	2b00      	cmp	r3, #0
 80205c8:	d005      	beq.n	80205d6 <SPIMasterDriver_vtblInit+0x8a>
  {
    SYS_SET_LOW_LEVEL_ERROR_CODE(SYS_UNDEFINED_ERROR_CODE);
 80205ca:	4b12      	ldr	r3, [pc, #72]	; (8020614 <SPIMasterDriver_vtblInit+0xc8>)
 80205cc:	2202      	movs	r2, #2
 80205ce:	801a      	strh	r2, [r3, #0]
    res = SYS_UNDEFINED_ERROR_CODE;
 80205d0:	2302      	movs	r3, #2
 80205d2:	82fb      	strh	r3, [r7, #22]
 80205d4:	e014      	b.n	8020600 <SPIMasterDriver_vtblInit+0xb4>
  }
  else
  {
    /* initialize the software resources */
    nRes = tx_semaphore_create(&p_obj->sync_obj, "SPI2Drv", 0);
 80205d6:	68fb      	ldr	r3, [r7, #12]
 80205d8:	f103 000c 	add.w	r0, r3, #12
 80205dc:	231c      	movs	r3, #28
 80205de:	2200      	movs	r2, #0
 80205e0:	490d      	ldr	r1, [pc, #52]	; (8020618 <SPIMasterDriver_vtblInit+0xcc>)
 80205e2:	f7f2 fcdb 	bl	8012f9c <_txe_semaphore_create>
 80205e6:	6138      	str	r0, [r7, #16]
    if(nRes != TX_SUCCESS)
 80205e8:	693b      	ldr	r3, [r7, #16]
 80205ea:	2b00      	cmp	r3, #0
 80205ec:	d004      	beq.n	80205f8 <SPIMasterDriver_vtblInit+0xac>
    {
      SYS_SET_LOW_LEVEL_ERROR_CODE(SYS_OUT_OF_MEMORY_ERROR_CODE);
 80205ee:	4b09      	ldr	r3, [pc, #36]	; (8020614 <SPIMasterDriver_vtblInit+0xc8>)
 80205f0:	2203      	movs	r2, #3
 80205f2:	801a      	strh	r2, [r3, #0]
      res = SYS_OUT_OF_MEMORY_ERROR_CODE;
 80205f4:	2303      	movs	r3, #3
 80205f6:	82fb      	strh	r3, [r7, #22]
    }
    spHwResouces[0].sync_obj = &p_obj->sync_obj;
 80205f8:	68fb      	ldr	r3, [r7, #12]
 80205fa:	330c      	adds	r3, #12
 80205fc:	4a07      	ldr	r2, [pc, #28]	; (802061c <SPIMasterDriver_vtblInit+0xd0>)
 80205fe:	6013      	str	r3, [r2, #0]
  }

  SYS_DEBUGF(SYS_DBG_LEVEL_VERBOSE, ("SPIMasterDriver: initialization done.\r\n"));

  return res;
 8020600:	8afb      	ldrh	r3, [r7, #22]
}
 8020602:	4618      	mov	r0, r3
 8020604:	3718      	adds	r7, #24
 8020606:	46bd      	mov	sp, r7
 8020608:	bd80      	pop	{r7, pc}
 802060a:	bf00      	nop
 802060c:	080279ec 	.word	0x080279ec
 8020610:	080208ed 	.word	0x080208ed
 8020614:	20000700 	.word	0x20000700
 8020618:	08027a68 	.word	0x08027a68
 802061c:	2003acfc 	.word	0x2003acfc

08020620 <SPIMasterDriver_vtblStart>:

sys_error_code_t SPIMasterDriver_vtblStart(IDriver *_this)
{
 8020620:	b580      	push	{r7, lr}
 8020622:	b084      	sub	sp, #16
 8020624:	af00      	add	r7, sp, #0
 8020626:	6078      	str	r0, [r7, #4]
  assert_param(_this != NULL);
 8020628:	687b      	ldr	r3, [r7, #4]
 802062a:	2b00      	cmp	r3, #0
 802062c:	d103      	bne.n	8020636 <SPIMasterDriver_vtblStart+0x16>
 802062e:	2194      	movs	r1, #148	; 0x94
 8020630:	480c      	ldr	r0, [pc, #48]	; (8020664 <SPIMasterDriver_vtblStart+0x44>)
 8020632:	f7f4 fe3a 	bl	80152aa <assert_failed>
  sys_error_code_t res = SYS_NO_ERROR_CODE;
 8020636:	2300      	movs	r3, #0
 8020638:	81fb      	strh	r3, [r7, #14]
  SPIMasterDriver_t *p_obj = (SPIMasterDriver_t*) _this;
 802063a:	687b      	ldr	r3, [r7, #4]
 802063c:	60bb      	str	r3, [r7, #8]

  /*enable the IRQ*/
  HAL_NVIC_EnableIRQ(p_obj->mx_handle.p_mx_spi_cfg->spi_dma_rx_irq_n);
 802063e:	68bb      	ldr	r3, [r7, #8]
 8020640:	685b      	ldr	r3, [r3, #4]
 8020642:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8020646:	4618      	mov	r0, r3
 8020648:	f7e2 fcb8 	bl	8002fbc <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(p_obj->mx_handle.p_mx_spi_cfg->spi_dma_tx_irq_n);
 802064c:	68bb      	ldr	r3, [r7, #8]
 802064e:	685b      	ldr	r3, [r3, #4]
 8020650:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8020654:	4618      	mov	r0, r3
 8020656:	f7e2 fcb1 	bl	8002fbc <HAL_NVIC_EnableIRQ>

  return res;
 802065a:	89fb      	ldrh	r3, [r7, #14]
}
 802065c:	4618      	mov	r0, r3
 802065e:	3710      	adds	r7, #16
 8020660:	46bd      	mov	sp, r7
 8020662:	bd80      	pop	{r7, pc}
 8020664:	080279ec 	.word	0x080279ec

08020668 <SPIMasterDriver_vtblStop>:

sys_error_code_t SPIMasterDriver_vtblStop(IDriver *_this)
{
 8020668:	b580      	push	{r7, lr}
 802066a:	b084      	sub	sp, #16
 802066c:	af00      	add	r7, sp, #0
 802066e:	6078      	str	r0, [r7, #4]
  assert_param(_this != NULL);
 8020670:	687b      	ldr	r3, [r7, #4]
 8020672:	2b00      	cmp	r3, #0
 8020674:	d103      	bne.n	802067e <SPIMasterDriver_vtblStop+0x16>
 8020676:	21a1      	movs	r1, #161	; 0xa1
 8020678:	480c      	ldr	r0, [pc, #48]	; (80206ac <SPIMasterDriver_vtblStop+0x44>)
 802067a:	f7f4 fe16 	bl	80152aa <assert_failed>
  sys_error_code_t res = SYS_NO_ERROR_CODE;
 802067e:	2300      	movs	r3, #0
 8020680:	81fb      	strh	r3, [r7, #14]
  SPIMasterDriver_t *p_obj = (SPIMasterDriver_t*) _this;
 8020682:	687b      	ldr	r3, [r7, #4]
 8020684:	60bb      	str	r3, [r7, #8]

  /*disable the IRQ*/
  /*enable the IRQ*/
  HAL_NVIC_DisableIRQ(p_obj->mx_handle.p_mx_spi_cfg->spi_dma_rx_irq_n);
 8020686:	68bb      	ldr	r3, [r7, #8]
 8020688:	685b      	ldr	r3, [r3, #4]
 802068a:	f993 3004 	ldrsb.w	r3, [r3, #4]
 802068e:	4618      	mov	r0, r3
 8020690:	f7e2 fcac 	bl	8002fec <HAL_NVIC_DisableIRQ>
  HAL_NVIC_DisableIRQ(p_obj->mx_handle.p_mx_spi_cfg->spi_dma_tx_irq_n);
 8020694:	68bb      	ldr	r3, [r7, #8]
 8020696:	685b      	ldr	r3, [r3, #4]
 8020698:	f993 3005 	ldrsb.w	r3, [r3, #5]
 802069c:	4618      	mov	r0, r3
 802069e:	f7e2 fca5 	bl	8002fec <HAL_NVIC_DisableIRQ>

  return res;
 80206a2:	89fb      	ldrh	r3, [r7, #14]
}
 80206a4:	4618      	mov	r0, r3
 80206a6:	3710      	adds	r7, #16
 80206a8:	46bd      	mov	sp, r7
 80206aa:	bd80      	pop	{r7, pc}
 80206ac:	080279ec 	.word	0x080279ec

080206b0 <SPIMasterDriver_vtblDoEnterPowerMode>:

sys_error_code_t SPIMasterDriver_vtblDoEnterPowerMode(IDriver *_this, const EPowerMode active_power_mode, const EPowerMode new_power_mode)
{
 80206b0:	b580      	push	{r7, lr}
 80206b2:	b084      	sub	sp, #16
 80206b4:	af00      	add	r7, sp, #0
 80206b6:	6078      	str	r0, [r7, #4]
 80206b8:	460b      	mov	r3, r1
 80206ba:	70fb      	strb	r3, [r7, #3]
 80206bc:	4613      	mov	r3, r2
 80206be:	70bb      	strb	r3, [r7, #2]
  assert_param(_this != NULL);
 80206c0:	687b      	ldr	r3, [r7, #4]
 80206c2:	2b00      	cmp	r3, #0
 80206c4:	d103      	bne.n	80206ce <SPIMasterDriver_vtblDoEnterPowerMode+0x1e>
 80206c6:	21af      	movs	r1, #175	; 0xaf
 80206c8:	4804      	ldr	r0, [pc, #16]	; (80206dc <SPIMasterDriver_vtblDoEnterPowerMode+0x2c>)
 80206ca:	f7f4 fdee 	bl	80152aa <assert_failed>
  sys_error_code_t res = SYS_NO_ERROR_CODE;
 80206ce:	2300      	movs	r3, #0
 80206d0:	81fb      	strh	r3, [r7, #14]
  /*SPIMasterDriver *p_obj = (SPIMasterDriver*)_this;*/

  return res;
 80206d2:	89fb      	ldrh	r3, [r7, #14]
}
 80206d4:	4618      	mov	r0, r3
 80206d6:	3710      	adds	r7, #16
 80206d8:	46bd      	mov	sp, r7
 80206da:	bd80      	pop	{r7, pc}
 80206dc:	080279ec 	.word	0x080279ec

080206e0 <SPIMasterDriver_vtblReset>:

sys_error_code_t SPIMasterDriver_vtblReset(IDriver *_this, void *p_params)
{
 80206e0:	b580      	push	{r7, lr}
 80206e2:	b084      	sub	sp, #16
 80206e4:	af00      	add	r7, sp, #0
 80206e6:	6078      	str	r0, [r7, #4]
 80206e8:	6039      	str	r1, [r7, #0]
  assert_param(_this != NULL);
 80206ea:	687b      	ldr	r3, [r7, #4]
 80206ec:	2b00      	cmp	r3, #0
 80206ee:	d103      	bne.n	80206f8 <SPIMasterDriver_vtblReset+0x18>
 80206f0:	21b8      	movs	r1, #184	; 0xb8
 80206f2:	4805      	ldr	r0, [pc, #20]	; (8020708 <SPIMasterDriver_vtblReset+0x28>)
 80206f4:	f7f4 fdd9 	bl	80152aa <assert_failed>
  sys_error_code_t res = SYS_NO_ERROR_CODE;
 80206f8:	2300      	movs	r3, #0
 80206fa:	81fb      	strh	r3, [r7, #14]
  /*SPIMasterDriver *p_obj = (SPIMasterDriver*)_this;*/

  return res;
 80206fc:	89fb      	ldrh	r3, [r7, #14]
}
 80206fe:	4618      	mov	r0, r3
 8020700:	3710      	adds	r7, #16
 8020702:	46bd      	mov	sp, r7
 8020704:	bd80      	pop	{r7, pc}
 8020706:	bf00      	nop
 8020708:	080279ec 	.word	0x080279ec

0802070c <SPIMasterDriver_vtblWrite>:

sys_error_code_t SPIMasterDriver_vtblWrite(IIODriver *_this, uint8_t *p_data_buffer, uint16_t data_size, uint16_t channel)
{
 802070c:	b580      	push	{r7, lr}
 802070e:	b088      	sub	sp, #32
 8020710:	af00      	add	r7, sp, #0
 8020712:	60f8      	str	r0, [r7, #12]
 8020714:	60b9      	str	r1, [r7, #8]
 8020716:	4611      	mov	r1, r2
 8020718:	461a      	mov	r2, r3
 802071a:	460b      	mov	r3, r1
 802071c:	80fb      	strh	r3, [r7, #6]
 802071e:	4613      	mov	r3, r2
 8020720:	80bb      	strh	r3, [r7, #4]
  assert_param(_this != NULL);
 8020722:	68fb      	ldr	r3, [r7, #12]
 8020724:	2b00      	cmp	r3, #0
 8020726:	d103      	bne.n	8020730 <SPIMasterDriver_vtblWrite+0x24>
 8020728:	21c1      	movs	r1, #193	; 0xc1
 802072a:	481d      	ldr	r0, [pc, #116]	; (80207a0 <SPIMasterDriver_vtblWrite+0x94>)
 802072c:	f7f4 fdbd 	bl	80152aa <assert_failed>
  sys_error_code_t res = SYS_NO_ERROR_CODE;
 8020730:	2300      	movs	r3, #0
 8020732:	83fb      	strh	r3, [r7, #30]
  SPIMasterDriver_t *p_obj = (SPIMasterDriver_t*) _this;
 8020734:	68fb      	ldr	r3, [r7, #12]
 8020736:	61bb      	str	r3, [r7, #24]
  SPI_HandleTypeDef *p_spi = p_obj->mx_handle.p_mx_spi_cfg->p_spi_handle;
 8020738:	69bb      	ldr	r3, [r7, #24]
 802073a:	685b      	ldr	r3, [r3, #4]
 802073c:	681b      	ldr	r3, [r3, #0]
 802073e:	617b      	str	r3, [r7, #20]

  res = SPIMasterDriverTransmitRegAddr(p_obj, channel, 500);
 8020740:	88bb      	ldrh	r3, [r7, #4]
 8020742:	b2db      	uxtb	r3, r3
 8020744:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8020748:	4619      	mov	r1, r3
 802074a:	69b8      	ldr	r0, [r7, #24]
 802074c:	f000 f878 	bl	8020840 <SPIMasterDriverTransmitRegAddr>
 8020750:	4603      	mov	r3, r0
 8020752:	83fb      	strh	r3, [r7, #30]
  if(!SYS_IS_ERROR_CODE(res))
 8020754:	8bfb      	ldrh	r3, [r7, #30]
 8020756:	2b00      	cmp	r3, #0
 8020758:	d11c      	bne.n	8020794 <SPIMasterDriver_vtblWrite+0x88>
  {
    while(HAL_SPI_Transmit_DMA(p_spi, p_data_buffer, data_size) != HAL_OK)
 802075a:	e00b      	b.n	8020774 <SPIMasterDriver_vtblWrite+0x68>
    {
      if(HAL_SPI_GetError(p_spi) != HAL_BUSY)
 802075c:	6978      	ldr	r0, [r7, #20]
 802075e:	f7eb fcd1 	bl	800c104 <HAL_SPI_GetError>
 8020762:	4603      	mov	r3, r0
 8020764:	2b02      	cmp	r3, #2
 8020766:	d005      	beq.n	8020774 <SPIMasterDriver_vtblWrite+0x68>
      {
        SYS_SET_LOW_LEVEL_ERROR_CODE(SYS_SPI_M_WRITE_READ_ERROR_CODE);
 8020768:	4b0e      	ldr	r3, [pc, #56]	; (80207a4 <SPIMasterDriver_vtblWrite+0x98>)
 802076a:	f240 32ee 	movw	r2, #1006	; 0x3ee
 802076e:	801a      	strh	r2, [r3, #0]
        sys_error_handler();
 8020770:	f7ee faf2 	bl	800ed58 <sys_error_handler>
    while(HAL_SPI_Transmit_DMA(p_spi, p_data_buffer, data_size) != HAL_OK)
 8020774:	88fb      	ldrh	r3, [r7, #6]
 8020776:	461a      	mov	r2, r3
 8020778:	68b9      	ldr	r1, [r7, #8]
 802077a:	6978      	ldr	r0, [r7, #20]
 802077c:	f7ea fbea 	bl	800af54 <HAL_SPI_Transmit_DMA>
 8020780:	4603      	mov	r3, r0
 8020782:	2b00      	cmp	r3, #0
 8020784:	d1ea      	bne.n	802075c <SPIMasterDriver_vtblWrite+0x50>
      }
    }
    /* Suspend the calling task until the operation is completed.*/
    tx_semaphore_get(&p_obj->sync_obj, TX_WAIT_FOREVER);
 8020786:	69bb      	ldr	r3, [r7, #24]
 8020788:	330c      	adds	r3, #12
 802078a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 802078e:	4618      	mov	r0, r3
 8020790:	f7f2 fca2 	bl	80130d8 <_txe_semaphore_get>
  }

  return res;
 8020794:	8bfb      	ldrh	r3, [r7, #30]
}
 8020796:	4618      	mov	r0, r3
 8020798:	3720      	adds	r7, #32
 802079a:	46bd      	mov	sp, r7
 802079c:	bd80      	pop	{r7, pc}
 802079e:	bf00      	nop
 80207a0:	080279ec 	.word	0x080279ec
 80207a4:	20000700 	.word	0x20000700

080207a8 <SPIMasterDriver_vtblRead>:

sys_error_code_t SPIMasterDriver_vtblRead(IIODriver *_this, uint8_t *p_data_buffer, uint16_t data_size, uint16_t channel)
{
 80207a8:	b580      	push	{r7, lr}
 80207aa:	b088      	sub	sp, #32
 80207ac:	af00      	add	r7, sp, #0
 80207ae:	60f8      	str	r0, [r7, #12]
 80207b0:	60b9      	str	r1, [r7, #8]
 80207b2:	4611      	mov	r1, r2
 80207b4:	461a      	mov	r2, r3
 80207b6:	460b      	mov	r3, r1
 80207b8:	80fb      	strh	r3, [r7, #6]
 80207ba:	4613      	mov	r3, r2
 80207bc:	80bb      	strh	r3, [r7, #4]
  assert_param(_this != NULL);
 80207be:	68fb      	ldr	r3, [r7, #12]
 80207c0:	2b00      	cmp	r3, #0
 80207c2:	d103      	bne.n	80207cc <SPIMasterDriver_vtblRead+0x24>
 80207c4:	21da      	movs	r1, #218	; 0xda
 80207c6:	481c      	ldr	r0, [pc, #112]	; (8020838 <SPIMasterDriver_vtblRead+0x90>)
 80207c8:	f7f4 fd6f 	bl	80152aa <assert_failed>
  sys_error_code_t res = SYS_NO_ERROR_CODE;
 80207cc:	2300      	movs	r3, #0
 80207ce:	83fb      	strh	r3, [r7, #30]
  SPIMasterDriver_t *p_obj = (SPIMasterDriver_t*) _this;
 80207d0:	68fb      	ldr	r3, [r7, #12]
 80207d2:	61bb      	str	r3, [r7, #24]
  SPI_HandleTypeDef *p_spi = p_obj->mx_handle.p_mx_spi_cfg->p_spi_handle;
 80207d4:	69bb      	ldr	r3, [r7, #24]
 80207d6:	685b      	ldr	r3, [r3, #4]
 80207d8:	681b      	ldr	r3, [r3, #0]
 80207da:	617b      	str	r3, [r7, #20]

  res = SPIMasterDriverTransmitRegAddr(p_obj, channel, 500);
 80207dc:	88bb      	ldrh	r3, [r7, #4]
 80207de:	b2db      	uxtb	r3, r3
 80207e0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80207e4:	4619      	mov	r1, r3
 80207e6:	69b8      	ldr	r0, [r7, #24]
 80207e8:	f000 f82a 	bl	8020840 <SPIMasterDriverTransmitRegAddr>
 80207ec:	4603      	mov	r3, r0
 80207ee:	83fb      	strh	r3, [r7, #30]
  if(!SYS_IS_ERROR_CODE(res))
 80207f0:	8bfb      	ldrh	r3, [r7, #30]
 80207f2:	2b00      	cmp	r3, #0
 80207f4:	d11a      	bne.n	802082c <SPIMasterDriver_vtblRead+0x84>
  {
    while(HAL_SPI_Receive_DMA(p_spi, p_data_buffer, data_size) != HAL_OK)
 80207f6:	e009      	b.n	802080c <SPIMasterDriver_vtblRead+0x64>
    {
      if(HAL_SPI_GetError(p_spi) != HAL_BUSY)
 80207f8:	6978      	ldr	r0, [r7, #20]
 80207fa:	f7eb fc83 	bl	800c104 <HAL_SPI_GetError>
 80207fe:	4603      	mov	r3, r0
 8020800:	2b02      	cmp	r3, #2
 8020802:	d003      	beq.n	802080c <SPIMasterDriver_vtblRead+0x64>
      {
        SYS_SET_LOW_LEVEL_ERROR_CODE(SYS_SPI_M_WRITE_READ_ERROR_CODE);
 8020804:	4b0d      	ldr	r3, [pc, #52]	; (802083c <SPIMasterDriver_vtblRead+0x94>)
 8020806:	f240 32ee 	movw	r2, #1006	; 0x3ee
 802080a:	801a      	strh	r2, [r3, #0]
    while(HAL_SPI_Receive_DMA(p_spi, p_data_buffer, data_size) != HAL_OK)
 802080c:	88fb      	ldrh	r3, [r7, #6]
 802080e:	461a      	mov	r2, r3
 8020810:	68b9      	ldr	r1, [r7, #8]
 8020812:	6978      	ldr	r0, [r7, #20]
 8020814:	f7ea fd7e 	bl	800b314 <HAL_SPI_Receive_DMA>
 8020818:	4603      	mov	r3, r0
 802081a:	2b00      	cmp	r3, #0
 802081c:	d1ec      	bne.n	80207f8 <SPIMasterDriver_vtblRead+0x50>
        SYS_DEBUGF(SYS_DBG_LEVEL_WARNING, ("SPIMasterDriver - Read failed.\r\n"));
      }
    }
    /* Suspend the calling task until the operation is completed.*/
    tx_semaphore_get(&p_obj->sync_obj, TX_WAIT_FOREVER);
 802081e:	69bb      	ldr	r3, [r7, #24]
 8020820:	330c      	adds	r3, #12
 8020822:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8020826:	4618      	mov	r0, r3
 8020828:	f7f2 fc56 	bl	80130d8 <_txe_semaphore_get>
  }

  return res;
 802082c:	8bfb      	ldrh	r3, [r7, #30]
}
 802082e:	4618      	mov	r0, r3
 8020830:	3720      	adds	r7, #32
 8020832:	46bd      	mov	sp, r7
 8020834:	bd80      	pop	{r7, pc}
 8020836:	bf00      	nop
 8020838:	080279ec 	.word	0x080279ec
 802083c:	20000700 	.word	0x20000700

08020840 <SPIMasterDriverTransmitRegAddr>:

sys_error_code_t SPIMasterDriverTransmitRegAddr(SPIMasterDriver_t *_this, uint8_t reg_addr, uint32_t timeout_ms)
{
 8020840:	b580      	push	{r7, lr}
 8020842:	b088      	sub	sp, #32
 8020844:	af00      	add	r7, sp, #0
 8020846:	60f8      	str	r0, [r7, #12]
 8020848:	460b      	mov	r3, r1
 802084a:	607a      	str	r2, [r7, #4]
 802084c:	72fb      	strb	r3, [r7, #11]
  assert_param(_this != NULL);
 802084e:	68fb      	ldr	r3, [r7, #12]
 8020850:	2b00      	cmp	r3, #0
 8020852:	d103      	bne.n	802085c <SPIMasterDriverTransmitRegAddr+0x1c>
 8020854:	21f3      	movs	r1, #243	; 0xf3
 8020856:	4811      	ldr	r0, [pc, #68]	; (802089c <SPIMasterDriverTransmitRegAddr+0x5c>)
 8020858:	f7f4 fd27 	bl	80152aa <assert_failed>
  sys_error_code_t res = SYS_NO_ERROR_CODE;
 802085c:	2300      	movs	r3, #0
 802085e:	83fb      	strh	r3, [r7, #30]
  SPIMasterDriver_t *p_obj = (SPIMasterDriver_t*) _this;
 8020860:	68fb      	ldr	r3, [r7, #12]
 8020862:	61bb      	str	r3, [r7, #24]
  SPI_HandleTypeDef *p_spi = p_obj->mx_handle.p_mx_spi_cfg->p_spi_handle;
 8020864:	69bb      	ldr	r3, [r7, #24]
 8020866:	685b      	ldr	r3, [r3, #4]
 8020868:	681b      	ldr	r3, [r3, #0]
 802086a:	617b      	str	r3, [r7, #20]

  if(HAL_OK != HAL_SPI_Transmit(p_spi, &reg_addr, 1, timeout_ms))
 802086c:	f107 010b 	add.w	r1, r7, #11
 8020870:	687b      	ldr	r3, [r7, #4]
 8020872:	2201      	movs	r2, #1
 8020874:	6978      	ldr	r0, [r7, #20]
 8020876:	f7ea f947 	bl	800ab08 <HAL_SPI_Transmit>
 802087a:	4603      	mov	r3, r0
 802087c:	2b00      	cmp	r3, #0
 802087e:	d008      	beq.n	8020892 <SPIMasterDriverTransmitRegAddr+0x52>
  {
    res = SYS_SPI_M_WRITE_ERROR_CODE;
 8020880:	f240 33ef 	movw	r3, #1007	; 0x3ef
 8020884:	83fb      	strh	r3, [r7, #30]
    SYS_SET_LOW_LEVEL_ERROR_CODE(SYS_SPI_M_WRITE_ERROR_CODE);
 8020886:	4b06      	ldr	r3, [pc, #24]	; (80208a0 <SPIMasterDriverTransmitRegAddr+0x60>)
 8020888:	f240 32ef 	movw	r2, #1007	; 0x3ef
 802088c:	801a      	strh	r2, [r3, #0]
    /* block the application*/
    sys_error_handler();
 802088e:	f7ee fa63 	bl	800ed58 <sys_error_handler>
  }

  return res;
 8020892:	8bfb      	ldrh	r3, [r7, #30]
}
 8020894:	4618      	mov	r0, r3
 8020896:	3720      	adds	r7, #32
 8020898:	46bd      	mov	sp, r7
 802089a:	bd80      	pop	{r7, pc}
 802089c:	080279ec 	.word	0x080279ec
 80208a0:	20000700 	.word	0x20000700

080208a4 <SPIMasterDriverSelectDevice>:

  return res;
}

sys_error_code_t SPIMasterDriverSelectDevice(SPIMasterDriver_t *_this, GPIO_TypeDef *p_device_gpio_port, uint16_t device_gpio_pin)
{
 80208a4:	b580      	push	{r7, lr}
 80208a6:	b084      	sub	sp, #16
 80208a8:	af00      	add	r7, sp, #0
 80208aa:	60f8      	str	r0, [r7, #12]
 80208ac:	60b9      	str	r1, [r7, #8]
 80208ae:	4613      	mov	r3, r2
 80208b0:	80fb      	strh	r3, [r7, #6]
  /* this is a class method so pointer _this is not used*/
  UNUSED(_this);

  HAL_GPIO_WritePin(p_device_gpio_port, device_gpio_pin, GPIO_PIN_RESET);
 80208b2:	88fb      	ldrh	r3, [r7, #6]
 80208b4:	2200      	movs	r2, #0
 80208b6:	4619      	mov	r1, r3
 80208b8:	68b8      	ldr	r0, [r7, #8]
 80208ba:	f7e4 f91f 	bl	8004afc <HAL_GPIO_WritePin>

  return SYS_NO_ERROR_CODE;
 80208be:	2300      	movs	r3, #0
}
 80208c0:	4618      	mov	r0, r3
 80208c2:	3710      	adds	r7, #16
 80208c4:	46bd      	mov	sp, r7
 80208c6:	bd80      	pop	{r7, pc}

080208c8 <SPIMasterDriverDeselectDevice>:

sys_error_code_t SPIMasterDriverDeselectDevice(SPIMasterDriver_t *_this, GPIO_TypeDef *device_gpio_port, uint16_t device_gpio_pin)
{
 80208c8:	b580      	push	{r7, lr}
 80208ca:	b084      	sub	sp, #16
 80208cc:	af00      	add	r7, sp, #0
 80208ce:	60f8      	str	r0, [r7, #12]
 80208d0:	60b9      	str	r1, [r7, #8]
 80208d2:	4613      	mov	r3, r2
 80208d4:	80fb      	strh	r3, [r7, #6]
  /* this is a class method so pointer _this is not used*/
  UNUSED(_this);

  HAL_GPIO_WritePin(device_gpio_port, device_gpio_pin, GPIO_PIN_SET);
 80208d6:	88fb      	ldrh	r3, [r7, #6]
 80208d8:	2201      	movs	r2, #1
 80208da:	4619      	mov	r1, r3
 80208dc:	68b8      	ldr	r0, [r7, #8]
 80208de:	f7e4 f90d 	bl	8004afc <HAL_GPIO_WritePin>

  return SYS_NO_ERROR_CODE;
 80208e2:	2300      	movs	r3, #0
}
 80208e4:	4618      	mov	r0, r3
 80208e6:	3710      	adds	r7, #16
 80208e8:	46bd      	mov	sp, r7
 80208ea:	bd80      	pop	{r7, pc}

080208ec <SPIMasterDriverTxRxCpltCallback>:

/* CubeMX integration */
/**********************/

static void SPIMasterDriverTxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80208ec:	b580      	push	{r7, lr}
 80208ee:	b082      	sub	sp, #8
 80208f0:	af00      	add	r7, sp, #0
 80208f2:	6078      	str	r0, [r7, #4]
  if (xTraceIsRecordingEnabled()) {
    vTraceStoreISRBegin(spHwResouces[0].m_xSpiTraceHandle);
  }
#endif

  if(spHwResouces[0].sync_obj)
 80208f4:	4b06      	ldr	r3, [pc, #24]	; (8020910 <SPIMasterDriverTxRxCpltCallback+0x24>)
 80208f6:	681b      	ldr	r3, [r3, #0]
 80208f8:	2b00      	cmp	r3, #0
 80208fa:	d004      	beq.n	8020906 <SPIMasterDriverTxRxCpltCallback+0x1a>
  {
    tx_semaphore_put(spHwResouces[0].sync_obj);
 80208fc:	4b04      	ldr	r3, [pc, #16]	; (8020910 <SPIMasterDriverTxRxCpltCallback+0x24>)
 80208fe:	681b      	ldr	r3, [r3, #0]
 8020900:	4618      	mov	r0, r3
 8020902:	f7f2 fc2b 	bl	801315c <_txe_semaphore_put>
#if (SYS_DBG_ENABLE_TA4 == 1)
  if (xTraceIsRecordingEnabled()) {
    vTraceStoreISREnd(0);
  }
#endif
}
 8020906:	bf00      	nop
 8020908:	3708      	adds	r7, #8
 802090a:	46bd      	mov	sp, r7
 802090c:	bd80      	pop	{r7, pc}
 802090e:	bf00      	nop
 8020910:	2003acfc 	.word	0x2003acfc

08020914 <ISensorEventListenerOnNewDataReady>:

// Inline functions definition
// ***************************

SYS_DEFINE_INLINE
sys_error_code_t ISensorEventListenerOnNewDataReady(IEventListener *_this, const SensorEvent *pxEvt) {
 8020914:	b580      	push	{r7, lr}
 8020916:	b082      	sub	sp, #8
 8020918:	af00      	add	r7, sp, #0
 802091a:	6078      	str	r0, [r7, #4]
 802091c:	6039      	str	r1, [r7, #0]
  assert_param(_this);
 802091e:	687b      	ldr	r3, [r7, #4]
 8020920:	2b00      	cmp	r3, #0
 8020922:	d103      	bne.n	802092c <ISensorEventListenerOnNewDataReady+0x18>
 8020924:	2144      	movs	r1, #68	; 0x44
 8020926:	4807      	ldr	r0, [pc, #28]	; (8020944 <ISensorEventListenerOnNewDataReady+0x30>)
 8020928:	f7f4 fcbf 	bl	80152aa <assert_failed>

  return ((ISensorEventListener*)_this)->vptr->OnNewDataReady(_this, pxEvt);
 802092c:	687b      	ldr	r3, [r7, #4]
 802092e:	681b      	ldr	r3, [r3, #0]
 8020930:	68db      	ldr	r3, [r3, #12]
 8020932:	6839      	ldr	r1, [r7, #0]
 8020934:	6878      	ldr	r0, [r7, #4]
 8020936:	4798      	blx	r3
 8020938:	4603      	mov	r3, r0
}
 802093a:	4618      	mov	r0, r3
 802093c:	3708      	adds	r7, #8
 802093e:	46bd      	mov	sp, r7
 8020940:	bd80      	pop	{r7, pc}
 8020942:	bf00      	nop
 8020944:	08027a70 	.word	0x08027a70

08020948 <SensorEventSrcAlloc>:

// Public functions definition
// ***************************

IEventSrc* SensorEventSrcAlloc()
{
 8020948:	b580      	push	{r7, lr}
 802094a:	b082      	sub	sp, #8
 802094c:	af00      	add	r7, sp, #0
  IEventSrc *pxObj = (IEventSrc*) SysAlloc(sizeof(SensorEventSrc));
 802094e:	2010      	movs	r0, #16
 8020950:	f7ee fc9e 	bl	800f290 <SysAlloc>
 8020954:	6078      	str	r0, [r7, #4]

  if(pxObj != NULL)
 8020956:	687b      	ldr	r3, [r7, #4]
 8020958:	2b00      	cmp	r3, #0
 802095a:	d002      	beq.n	8020962 <SensorEventSrcAlloc+0x1a>
  {
    pxObj->vptr = &s_xSensorEvent_vtbl;
 802095c:	687b      	ldr	r3, [r7, #4]
 802095e:	4a03      	ldr	r2, [pc, #12]	; (802096c <SensorEventSrcAlloc+0x24>)
 8020960:	601a      	str	r2, [r3, #0]
  }

  return pxObj;
 8020962:	687b      	ldr	r3, [r7, #4]
}
 8020964:	4618      	mov	r0, r3
 8020966:	3708      	adds	r7, #8
 8020968:	46bd      	mov	sp, r7
 802096a:	bd80      	pop	{r7, pc}
 802096c:	08035d94 	.word	0x08035d94

08020970 <SensorEventSrc_vtblSendEvent>:

// IEventSoruce virtual functions definition.
// ******************************************

sys_error_code_t SensorEventSrc_vtblSendEvent(const IEventSrc *_this, const IEvent *pxEvent, void *pvParams)
{
 8020970:	b580      	push	{r7, lr}
 8020972:	b088      	sub	sp, #32
 8020974:	af00      	add	r7, sp, #0
 8020976:	60f8      	str	r0, [r7, #12]
 8020978:	60b9      	str	r1, [r7, #8]
 802097a:	607a      	str	r2, [r7, #4]
  assert_param(_this);
 802097c:	68fb      	ldr	r3, [r7, #12]
 802097e:	2b00      	cmp	r3, #0
 8020980:	d103      	bne.n	802098a <SensorEventSrc_vtblSendEvent+0x1a>
 8020982:	2146      	movs	r1, #70	; 0x46
 8020984:	4812      	ldr	r0, [pc, #72]	; (80209d0 <SensorEventSrc_vtblSendEvent+0x60>)
 8020986:	f7f4 fc90 	bl	80152aa <assert_failed>
  SensorEventSrc *pObj = (SensorEventSrc*) _this;
 802098a:	68fb      	ldr	r3, [r7, #12]
 802098c:	61bb      	str	r3, [r7, #24]
  sys_error_code_t xRes = SYS_NO_ERROR_CODE;
 802098e:	2300      	movs	r3, #0
 8020990:	82fb      	strh	r3, [r7, #22]
  UNUSED(pvParams);

  for(uint8_t i = 0; i < AEVENT_SRC_CFG_MAX_LISTENERS; ++i)
 8020992:	2300      	movs	r3, #0
 8020994:	77fb      	strb	r3, [r7, #31]
 8020996:	e012      	b.n	80209be <SensorEventSrc_vtblSendEvent+0x4e>
  {
    if(pObj->super.m_pxListeners[i] != NULL)
 8020998:	7ffb      	ldrb	r3, [r7, #31]
 802099a:	69ba      	ldr	r2, [r7, #24]
 802099c:	009b      	lsls	r3, r3, #2
 802099e:	4413      	add	r3, r2
 80209a0:	685b      	ldr	r3, [r3, #4]
 80209a2:	2b00      	cmp	r3, #0
 80209a4:	d008      	beq.n	80209b8 <SensorEventSrc_vtblSendEvent+0x48>
    {
      ISensorEventListenerOnNewDataReady(pObj->super.m_pxListeners[i], (SensorEvent*) pxEvent);
 80209a6:	7ffb      	ldrb	r3, [r7, #31]
 80209a8:	69ba      	ldr	r2, [r7, #24]
 80209aa:	009b      	lsls	r3, r3, #2
 80209ac:	4413      	add	r3, r2
 80209ae:	685b      	ldr	r3, [r3, #4]
 80209b0:	68b9      	ldr	r1, [r7, #8]
 80209b2:	4618      	mov	r0, r3
 80209b4:	f7ff ffae 	bl	8020914 <ISensorEventListenerOnNewDataReady>
  for(uint8_t i = 0; i < AEVENT_SRC_CFG_MAX_LISTENERS; ++i)
 80209b8:	7ffb      	ldrb	r3, [r7, #31]
 80209ba:	3301      	adds	r3, #1
 80209bc:	77fb      	strb	r3, [r7, #31]
 80209be:	7ffb      	ldrb	r3, [r7, #31]
 80209c0:	2b01      	cmp	r3, #1
 80209c2:	d9e9      	bls.n	8020998 <SensorEventSrc_vtblSendEvent+0x28>
    }
  }

  return xRes;
 80209c4:	8afb      	ldrh	r3, [r7, #22]
}
 80209c6:	4618      	mov	r0, r3
 80209c8:	3720      	adds	r7, #32
 80209ca:	46bd      	mov	sp, r7
 80209cc:	bd80      	pop	{r7, pc}
 80209ce:	bf00      	nop
 80209d0:	08027ad4 	.word	0x08027ad4

080209d4 <SIInit>:

/* Public functions definition */
/*******************************/

sys_error_code_t SIInit(SIterator_t *_this, SensorManager_t *p_sm)
{
 80209d4:	b580      	push	{r7, lr}
 80209d6:	b084      	sub	sp, #16
 80209d8:	af00      	add	r7, sp, #0
 80209da:	6078      	str	r0, [r7, #4]
 80209dc:	6039      	str	r1, [r7, #0]
  assert_param(_this != NULL);
 80209de:	687b      	ldr	r3, [r7, #4]
 80209e0:	2b00      	cmp	r3, #0
 80209e2:	d103      	bne.n	80209ec <SIInit+0x18>
 80209e4:	2121      	movs	r1, #33	; 0x21
 80209e6:	480f      	ldr	r0, [pc, #60]	; (8020a24 <SIInit+0x50>)
 80209e8:	f7f4 fc5f 	bl	80152aa <assert_failed>
  sys_error_code_t res = SYS_NO_ERROR_CODE;
 80209ec:	2300      	movs	r3, #0
 80209ee:	81fb      	strh	r3, [r7, #14]

  /* parameters validation */
  if(p_sm == NULL)
 80209f0:	683b      	ldr	r3, [r7, #0]
 80209f2:	2b00      	cmp	r3, #0
 80209f4:	d105      	bne.n	8020a02 <SIInit+0x2e>
  {
    res = SYS_INVALID_PARAMETER_ERROR_CODE;
 80209f6:	2304      	movs	r3, #4
 80209f8:	81fb      	strh	r3, [r7, #14]
    SYS_SET_SERVICE_LEVEL_ERROR_CODE(SYS_INVALID_PARAMETER_ERROR_CODE);
 80209fa:	4b0b      	ldr	r3, [pc, #44]	; (8020a28 <SIInit+0x54>)
 80209fc:	2204      	movs	r2, #4
 80209fe:	805a      	strh	r2, [r3, #2]
 8020a00:	e00b      	b.n	8020a1a <SIInit+0x46>
  }
  else
  {
    _this->p_sm = p_sm;
 8020a02:	687b      	ldr	r3, [r7, #4]
 8020a04:	683a      	ldr	r2, [r7, #0]
 8020a06:	601a      	str	r2, [r3, #0]
    _this->sensor_idx = 0;
 8020a08:	687b      	ldr	r3, [r7, #4]
 8020a0a:	2200      	movs	r2, #0
 8020a0c:	80da      	strh	r2, [r3, #6]
    _this->sensors_count = SMGetNsensor();
 8020a0e:	f7ff fbdd 	bl	80201cc <SMGetNsensor>
 8020a12:	4603      	mov	r3, r0
 8020a14:	461a      	mov	r2, r3
 8020a16:	687b      	ldr	r3, [r7, #4]
 8020a18:	809a      	strh	r2, [r3, #4]
  }

  return res;
 8020a1a:	89fb      	ldrh	r3, [r7, #14]
}
 8020a1c:	4618      	mov	r0, r3
 8020a1e:	3710      	adds	r7, #16
 8020a20:	46bd      	mov	sp, r7
 8020a22:	bd80      	pop	{r7, pc}
 8020a24:	08027b4c 	.word	0x08027b4c
 8020a28:	20000700 	.word	0x20000700

08020a2c <SIHasNext>:

bool SIHasNext(SIterator_t *_this)
{
 8020a2c:	b580      	push	{r7, lr}
 8020a2e:	b082      	sub	sp, #8
 8020a30:	af00      	add	r7, sp, #0
 8020a32:	6078      	str	r0, [r7, #4]
  assert_param(_this != NULL);
 8020a34:	687b      	ldr	r3, [r7, #4]
 8020a36:	2b00      	cmp	r3, #0
 8020a38:	d103      	bne.n	8020a42 <SIHasNext+0x16>
 8020a3a:	2136      	movs	r1, #54	; 0x36
 8020a3c:	4807      	ldr	r0, [pc, #28]	; (8020a5c <SIHasNext+0x30>)
 8020a3e:	f7f4 fc34 	bl	80152aa <assert_failed>

  return _this->sensor_idx < _this->sensors_count ? true : false;
 8020a42:	687b      	ldr	r3, [r7, #4]
 8020a44:	88da      	ldrh	r2, [r3, #6]
 8020a46:	687b      	ldr	r3, [r7, #4]
 8020a48:	889b      	ldrh	r3, [r3, #4]
 8020a4a:	429a      	cmp	r2, r3
 8020a4c:	bf34      	ite	cc
 8020a4e:	2301      	movcc	r3, #1
 8020a50:	2300      	movcs	r3, #0
 8020a52:	b2db      	uxtb	r3, r3
}
 8020a54:	4618      	mov	r0, r3
 8020a56:	3708      	adds	r7, #8
 8020a58:	46bd      	mov	sp, r7
 8020a5a:	bd80      	pop	{r7, pc}
 8020a5c:	08027b4c 	.word	0x08027b4c

08020a60 <SINext>:

uint16_t SINext(SIterator_t *_this)
{
 8020a60:	b580      	push	{r7, lr}
 8020a62:	b084      	sub	sp, #16
 8020a64:	af00      	add	r7, sp, #0
 8020a66:	6078      	str	r0, [r7, #4]
  assert_param(_this != NULL);
 8020a68:	687b      	ldr	r3, [r7, #4]
 8020a6a:	2b00      	cmp	r3, #0
 8020a6c:	d103      	bne.n	8020a76 <SINext+0x16>
 8020a6e:	213d      	movs	r1, #61	; 0x3d
 8020a70:	480b      	ldr	r0, [pc, #44]	; (8020aa0 <SINext+0x40>)
 8020a72:	f7f4 fc1a 	bl	80152aa <assert_failed>
  uint16_t sensor_id = SI_NULL_SENSOR_ID;
 8020a76:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8020a7a:	81fb      	strh	r3, [r7, #14]

  if(_this->sensor_idx < _this->sensors_count)
 8020a7c:	687b      	ldr	r3, [r7, #4]
 8020a7e:	88da      	ldrh	r2, [r3, #6]
 8020a80:	687b      	ldr	r3, [r7, #4]
 8020a82:	889b      	ldrh	r3, [r3, #4]
 8020a84:	429a      	cmp	r2, r3
 8020a86:	d206      	bcs.n	8020a96 <SINext+0x36>
  {
    sensor_id = _this->sensor_idx++;
 8020a88:	687b      	ldr	r3, [r7, #4]
 8020a8a:	88db      	ldrh	r3, [r3, #6]
 8020a8c:	1c5a      	adds	r2, r3, #1
 8020a8e:	b291      	uxth	r1, r2
 8020a90:	687a      	ldr	r2, [r7, #4]
 8020a92:	80d1      	strh	r1, [r2, #6]
 8020a94:	81fb      	strh	r3, [r7, #14]
  }

  return sensor_id;
 8020a96:	89fb      	ldrh	r3, [r7, #14]
}
 8020a98:	4618      	mov	r0, r3
 8020a9a:	3710      	adds	r7, #16
 8020a9c:	46bd      	mov	sp, r7
 8020a9e:	bd80      	pop	{r7, pc}
 8020aa0:	08027b4c 	.word	0x08027b4c

08020aa4 <SQInit>:

#include "services/SQuery.h"
#include <string.h>

sys_error_code_t SQInit(SQuery_t *_this, SensorManager_t *p_sm)
{
 8020aa4:	b580      	push	{r7, lr}
 8020aa6:	b082      	sub	sp, #8
 8020aa8:	af00      	add	r7, sp, #0
 8020aaa:	6078      	str	r0, [r7, #4]
 8020aac:	6039      	str	r1, [r7, #0]
  assert_param(_this != NULL);
 8020aae:	687b      	ldr	r3, [r7, #4]
 8020ab0:	2b00      	cmp	r3, #0
 8020ab2:	d103      	bne.n	8020abc <SQInit+0x18>
 8020ab4:	211f      	movs	r1, #31
 8020ab6:	4806      	ldr	r0, [pc, #24]	; (8020ad0 <SQInit+0x2c>)
 8020ab8:	f7f4 fbf7 	bl	80152aa <assert_failed>

  return SIInit(&_this->iterator, p_sm);
 8020abc:	687b      	ldr	r3, [r7, #4]
 8020abe:	6839      	ldr	r1, [r7, #0]
 8020ac0:	4618      	mov	r0, r3
 8020ac2:	f7ff ff87 	bl	80209d4 <SIInit>
 8020ac6:	4603      	mov	r3, r0
}
 8020ac8:	4618      	mov	r0, r3
 8020aca:	3708      	adds	r7, #8
 8020acc:	46bd      	mov	sp, r7
 8020ace:	bd80      	pop	{r7, pc}
 8020ad0:	08027bc0 	.word	0x08027bc0

08020ad4 <SQNextByNameAndType>:

  return sensor_id;
}

uint16_t SQNextByNameAndType(SQuery_t *_this, const char *sensor_name, uint8_t sensor_type)
{
 8020ad4:	b580      	push	{r7, lr}
 8020ad6:	b0c0      	sub	sp, #256	; 0x100
 8020ad8:	af00      	add	r7, sp, #0
 8020ada:	60f8      	str	r0, [r7, #12]
 8020adc:	60b9      	str	r1, [r7, #8]
 8020ade:	4613      	mov	r3, r2
 8020ae0:	71fb      	strb	r3, [r7, #7]
  assert_param(_this != NULL);
 8020ae2:	68fb      	ldr	r3, [r7, #12]
 8020ae4:	2b00      	cmp	r3, #0
 8020ae6:	d103      	bne.n	8020af0 <SQNextByNameAndType+0x1c>
 8020ae8:	213c      	movs	r1, #60	; 0x3c
 8020aea:	4823      	ldr	r0, [pc, #140]	; (8020b78 <SQNextByNameAndType+0xa4>)
 8020aec:	f7f4 fbdd 	bl	80152aa <assert_failed>
  uint16_t sensor_id = SI_NULL_SENSOR_ID;
 8020af0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8020af4:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
  bool found_next_sensor = false;
 8020af8:	2300      	movs	r3, #0
 8020afa:	f887 30fd 	strb.w	r3, [r7, #253]	; 0xfd

  while(SIHasNext(&_this->iterator) && !found_next_sensor)
 8020afe:	e025      	b.n	8020b4c <SQNextByNameAndType+0x78>
  {
    uint16_t next_sensor_id = SINext(&_this->iterator);
 8020b00:	68fb      	ldr	r3, [r7, #12]
 8020b02:	4618      	mov	r0, r3
 8020b04:	f7ff ffac 	bl	8020a60 <SINext>
 8020b08:	4603      	mov	r3, r0
 8020b0a:	f8a7 30fa 	strh.w	r3, [r7, #250]	; 0xfa
    SensorDescriptor_t descriptor = SMSensorGetDescription(next_sensor_id);
 8020b0e:	f8b7 30fa 	ldrh.w	r3, [r7, #250]	; 0xfa
 8020b12:	b2da      	uxtb	r2, r3
 8020b14:	f107 0310 	add.w	r3, r7, #16
 8020b18:	4611      	mov	r1, r2
 8020b1a:	4618      	mov	r0, r3
 8020b1c:	f7ff fc28 	bl	8020370 <SMSensorGetDescription>
    /* check if the name match the query */
    if(strncmp(sensor_name, descriptor.Name, SM_MAX_DIM_LABELS) == 0)
 8020b20:	f107 0310 	add.w	r3, r7, #16
 8020b24:	2210      	movs	r2, #16
 8020b26:	4619      	mov	r1, r3
 8020b28:	68b8      	ldr	r0, [r7, #8]
 8020b2a:	f003 fc7f 	bl	802442c <strncmp>
 8020b2e:	4603      	mov	r3, r0
 8020b30:	2b00      	cmp	r3, #0
 8020b32:	d10b      	bne.n	8020b4c <SQNextByNameAndType+0x78>
    {
      if(descriptor.SensorType == sensor_type)
 8020b34:	f897 3020 	ldrb.w	r3, [r7, #32]
 8020b38:	79fa      	ldrb	r2, [r7, #7]
 8020b3a:	429a      	cmp	r2, r3
 8020b3c:	d106      	bne.n	8020b4c <SQNextByNameAndType+0x78>
      {
        sensor_id = next_sensor_id;
 8020b3e:	f8b7 30fa 	ldrh.w	r3, [r7, #250]	; 0xfa
 8020b42:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
        found_next_sensor = true;
 8020b46:	2301      	movs	r3, #1
 8020b48:	f887 30fd 	strb.w	r3, [r7, #253]	; 0xfd
  while(SIHasNext(&_this->iterator) && !found_next_sensor)
 8020b4c:	68fb      	ldr	r3, [r7, #12]
 8020b4e:	4618      	mov	r0, r3
 8020b50:	f7ff ff6c 	bl	8020a2c <SIHasNext>
 8020b54:	4603      	mov	r3, r0
 8020b56:	2b00      	cmp	r3, #0
 8020b58:	d006      	beq.n	8020b68 <SQNextByNameAndType+0x94>
 8020b5a:	f897 30fd 	ldrb.w	r3, [r7, #253]	; 0xfd
 8020b5e:	f083 0301 	eor.w	r3, r3, #1
 8020b62:	b2db      	uxtb	r3, r3
 8020b64:	2b00      	cmp	r3, #0
 8020b66:	d1cb      	bne.n	8020b00 <SQNextByNameAndType+0x2c>
      }
    }
  }
  return sensor_id;
 8020b68:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	; 0xfe
}
 8020b6c:	4618      	mov	r0, r3
 8020b6e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8020b72:	46bd      	mov	sp, r7
 8020b74:	bd80      	pop	{r7, pc}
 8020b76:	bf00      	nop
 8020b78:	08027bc0 	.word	0x08027bc0

08020b7c <ai_buffer_get_size>:
 8020b7c:	b358      	cbz	r0, 8020bd6 <ai_buffer_get_size+0x5a>
 8020b7e:	b430      	push	{r4, r5}
 8020b80:	6803      	ldr	r3, [r0, #0]
 8020b82:	4d15      	ldr	r5, [pc, #84]	; (8020bd8 <ai_buffer_get_size+0x5c>)
 8020b84:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8020b88:	6984      	ldr	r4, [r0, #24]
 8020b8a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8020b8e:	42ab      	cmp	r3, r5
 8020b90:	6862      	ldr	r2, [r4, #4]
 8020b92:	d01a      	beq.n	8020bca <ai_buffer_get_size+0x4e>
 8020b94:	7d03      	ldrb	r3, [r0, #20]
 8020b96:	6941      	ldr	r1, [r0, #20]
 8020b98:	f1a3 0301 	sub.w	r3, r3, #1
 8020b9c:	fab3 f383 	clz	r3, r3
 8020ba0:	f3c1 2117 	ubfx	r1, r1, #8, #24
 8020ba4:	095b      	lsrs	r3, r3, #5
 8020ba6:	428b      	cmp	r3, r1
 8020ba8:	da0b      	bge.n	8020bc2 <ai_buffer_get_size+0x46>
 8020baa:	2b01      	cmp	r3, #1
 8020bac:	d102      	bne.n	8020bb4 <ai_buffer_get_size+0x38>
 8020bae:	2902      	cmp	r1, #2
 8020bb0:	d007      	beq.n	8020bc2 <ai_buffer_get_size+0x46>
 8020bb2:	2302      	movs	r3, #2
 8020bb4:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 8020bb8:	3301      	adds	r3, #1
 8020bba:	428b      	cmp	r3, r1
 8020bbc:	fb00 f202 	mul.w	r2, r0, r2
 8020bc0:	d1f3      	bne.n	8020baa <ai_buffer_get_size+0x2e>
 8020bc2:	bc30      	pop	{r4, r5}
 8020bc4:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 8020bc8:	4770      	bx	lr
 8020bca:	2900      	cmp	r1, #0
 8020bcc:	d0e2      	beq.n	8020b94 <ai_buffer_get_size+0x18>
 8020bce:	321f      	adds	r2, #31
 8020bd0:	f022 021f 	bic.w	r2, r2, #31
 8020bd4:	e7de      	b.n	8020b94 <ai_buffer_get_size+0x18>
 8020bd6:	4770      	bx	lr
 8020bd8:	000400c0 	.word	0x000400c0

08020bdc <ai_buffer_get_byte_size>:
 8020bdc:	b128      	cbz	r0, 8020bea <ai_buffer_get_byte_size+0xe>
 8020bde:	f3c1 11c6 	ubfx	r1, r1, #7, #7
 8020be2:	fb00 f001 	mul.w	r0, r0, r1
 8020be6:	3007      	adds	r0, #7
 8020be8:	08c0      	lsrs	r0, r0, #3
 8020bea:	4770      	bx	lr

08020bec <ai_buffer_array_sane>:
 8020bec:	b138      	cbz	r0, 8020bfe <ai_buffer_array_sane+0x12>
 8020bee:	6843      	ldr	r3, [r0, #4]
 8020bf0:	b123      	cbz	r3, 8020bfc <ai_buffer_array_sane+0x10>
 8020bf2:	8840      	ldrh	r0, [r0, #2]
 8020bf4:	3000      	adds	r0, #0
 8020bf6:	bf18      	it	ne
 8020bf8:	2001      	movne	r0, #1
 8020bfa:	4770      	bx	lr
 8020bfc:	4618      	mov	r0, r3
 8020bfe:	4770      	bx	lr

08020c00 <ai_buffer_array_item_set_address>:
 8020c00:	b120      	cbz	r0, 8020c0c <ai_buffer_array_item_set_address+0xc>
 8020c02:	6843      	ldr	r3, [r0, #4]
 8020c04:	b11b      	cbz	r3, 8020c0e <ai_buffer_array_item_set_address+0xe>
 8020c06:	8840      	ldrh	r0, [r0, #2]
 8020c08:	b918      	cbnz	r0, 8020c12 <ai_buffer_array_item_set_address+0x12>
 8020c0a:	4770      	bx	lr
 8020c0c:	4770      	bx	lr
 8020c0e:	4618      	mov	r0, r3
 8020c10:	4770      	bx	lr
 8020c12:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8020c16:	eb13 0081 	adds.w	r0, r3, r1, lsl #2
 8020c1a:	d0f7      	beq.n	8020c0c <ai_buffer_array_item_set_address+0xc>
 8020c1c:	6042      	str	r2, [r0, #4]
 8020c1e:	2001      	movs	r0, #1
 8020c20:	4770      	bx	lr
 8020c22:	bf00      	nop

08020c24 <_ai_platform_acquire_crc>:
 8020c24:	2001      	movs	r0, #1
 8020c26:	4770      	bx	lr

08020c28 <_ai_platform_release_crc>:
 8020c28:	4770      	bx	lr
 8020c2a:	bf00      	nop

08020c2c <ai_platform_get_weights_map>:
 8020c2c:	b192      	cbz	r2, 8020c54 <ai_platform_get_weights_map+0x28>
 8020c2e:	b188      	cbz	r0, 8020c54 <ai_platform_get_weights_map+0x28>
 8020c30:	b181      	cbz	r1, 8020c54 <ai_platform_get_weights_map+0x28>
 8020c32:	b570      	push	{r4, r5, r6, lr}
 8020c34:	4b24      	ldr	r3, [pc, #144]	; (8020cc8 <ai_platform_get_weights_map+0x9c>)
 8020c36:	6814      	ldr	r4, [r2, #0]
 8020c38:	429c      	cmp	r4, r3
 8020c3a:	d00d      	beq.n	8020c58 <ai_platform_get_weights_map+0x2c>
 8020c3c:	6854      	ldr	r4, [r2, #4]
 8020c3e:	b194      	cbz	r4, 8020c66 <ai_platform_get_weights_map+0x3a>
 8020c40:	6825      	ldr	r5, [r4, #0]
 8020c42:	429d      	cmp	r5, r3
 8020c44:	d027      	beq.n	8020c96 <ai_platform_get_weights_map+0x6a>
 8020c46:	6004      	str	r4, [r0, #0]
 8020c48:	f1a1 0001 	sub.w	r0, r1, #1
 8020c4c:	fab0 f080 	clz	r0, r0
 8020c50:	0940      	lsrs	r0, r0, #5
 8020c52:	bd70      	pop	{r4, r5, r6, pc}
 8020c54:	2000      	movs	r0, #0
 8020c56:	4770      	bx	lr
 8020c58:	4605      	mov	r5, r0
 8020c5a:	1d10      	adds	r0, r2, #4
 8020c5c:	4616      	mov	r6, r2
 8020c5e:	460c      	mov	r4, r1
 8020c60:	f7ff ffc4 	bl	8020bec <ai_buffer_array_sane>
 8020c64:	b908      	cbnz	r0, 8020c6a <ai_platform_get_weights_map+0x3e>
 8020c66:	2000      	movs	r0, #0
 8020c68:	bd70      	pop	{r4, r5, r6, pc}
 8020c6a:	88f3      	ldrh	r3, [r6, #6]
 8020c6c:	429c      	cmp	r4, r3
 8020c6e:	d1fa      	bne.n	8020c66 <ai_platform_get_weights_map+0x3a>
 8020c70:	2100      	movs	r1, #0
 8020c72:	4608      	mov	r0, r1
 8020c74:	1f2b      	subs	r3, r5, #4
 8020c76:	68b2      	ldr	r2, [r6, #8]
 8020c78:	440a      	add	r2, r1
 8020c7a:	6852      	ldr	r2, [r2, #4]
 8020c7c:	311c      	adds	r1, #28
 8020c7e:	b12a      	cbz	r2, 8020c8c <ai_platform_get_weights_map+0x60>
 8020c80:	3001      	adds	r0, #1
 8020c82:	4284      	cmp	r4, r0
 8020c84:	f843 2f04 	str.w	r2, [r3, #4]!
 8020c88:	d1f5      	bne.n	8020c76 <ai_platform_get_weights_map+0x4a>
 8020c8a:	4620      	mov	r0, r4
 8020c8c:	1a20      	subs	r0, r4, r0
 8020c8e:	fab0 f080 	clz	r0, r0
 8020c92:	0940      	lsrs	r0, r0, #5
 8020c94:	bd70      	pop	{r4, r5, r6, pc}
 8020c96:	6863      	ldr	r3, [r4, #4]
 8020c98:	3404      	adds	r4, #4
 8020c9a:	42ab      	cmp	r3, r5
 8020c9c:	d0e3      	beq.n	8020c66 <ai_platform_get_weights_map+0x3a>
 8020c9e:	3804      	subs	r0, #4
 8020ca0:	4626      	mov	r6, r4
 8020ca2:	2200      	movs	r2, #0
 8020ca4:	e003      	b.n	8020cae <ai_platform_get_weights_map+0x82>
 8020ca6:	f856 3f04 	ldr.w	r3, [r6, #4]!
 8020caa:	42ab      	cmp	r3, r5
 8020cac:	d0db      	beq.n	8020c66 <ai_platform_get_weights_map+0x3a>
 8020cae:	3201      	adds	r2, #1
 8020cb0:	4291      	cmp	r1, r2
 8020cb2:	f840 3f04 	str.w	r3, [r0, #4]!
 8020cb6:	d1f6      	bne.n	8020ca6 <ai_platform_get_weights_map+0x7a>
 8020cb8:	f854 2021 	ldr.w	r2, [r4, r1, lsl #2]
 8020cbc:	4b02      	ldr	r3, [pc, #8]	; (8020cc8 <ai_platform_get_weights_map+0x9c>)
 8020cbe:	429a      	cmp	r2, r3
 8020cc0:	d1d1      	bne.n	8020c66 <ai_platform_get_weights_map+0x3a>
 8020cc2:	2001      	movs	r0, #1
 8020cc4:	bd70      	pop	{r4, r5, r6, pc}
 8020cc6:	bf00      	nop
 8020cc8:	a1facade 	.word	0xa1facade

08020ccc <ai_platform_get_activations_map>:
 8020ccc:	b192      	cbz	r2, 8020cf4 <ai_platform_get_activations_map+0x28>
 8020cce:	b188      	cbz	r0, 8020cf4 <ai_platform_get_activations_map+0x28>
 8020cd0:	b181      	cbz	r1, 8020cf4 <ai_platform_get_activations_map+0x28>
 8020cd2:	b570      	push	{r4, r5, r6, lr}
 8020cd4:	4b24      	ldr	r3, [pc, #144]	; (8020d68 <ai_platform_get_activations_map+0x9c>)
 8020cd6:	6814      	ldr	r4, [r2, #0]
 8020cd8:	429c      	cmp	r4, r3
 8020cda:	d00d      	beq.n	8020cf8 <ai_platform_get_activations_map+0x2c>
 8020cdc:	6a14      	ldr	r4, [r2, #32]
 8020cde:	b19c      	cbz	r4, 8020d08 <ai_platform_get_activations_map+0x3c>
 8020ce0:	6825      	ldr	r5, [r4, #0]
 8020ce2:	429d      	cmp	r5, r3
 8020ce4:	d028      	beq.n	8020d38 <ai_platform_get_activations_map+0x6c>
 8020ce6:	6004      	str	r4, [r0, #0]
 8020ce8:	f1a1 0001 	sub.w	r0, r1, #1
 8020cec:	fab0 f080 	clz	r0, r0
 8020cf0:	0940      	lsrs	r0, r0, #5
 8020cf2:	bd70      	pop	{r4, r5, r6, pc}
 8020cf4:	2000      	movs	r0, #0
 8020cf6:	4770      	bx	lr
 8020cf8:	4605      	mov	r5, r0
 8020cfa:	f102 000c 	add.w	r0, r2, #12
 8020cfe:	4616      	mov	r6, r2
 8020d00:	460c      	mov	r4, r1
 8020d02:	f7ff ff73 	bl	8020bec <ai_buffer_array_sane>
 8020d06:	b908      	cbnz	r0, 8020d0c <ai_platform_get_activations_map+0x40>
 8020d08:	2000      	movs	r0, #0
 8020d0a:	bd70      	pop	{r4, r5, r6, pc}
 8020d0c:	89f3      	ldrh	r3, [r6, #14]
 8020d0e:	429c      	cmp	r4, r3
 8020d10:	d1fa      	bne.n	8020d08 <ai_platform_get_activations_map+0x3c>
 8020d12:	2100      	movs	r1, #0
 8020d14:	4608      	mov	r0, r1
 8020d16:	1f2b      	subs	r3, r5, #4
 8020d18:	6932      	ldr	r2, [r6, #16]
 8020d1a:	440a      	add	r2, r1
 8020d1c:	6852      	ldr	r2, [r2, #4]
 8020d1e:	311c      	adds	r1, #28
 8020d20:	b12a      	cbz	r2, 8020d2e <ai_platform_get_activations_map+0x62>
 8020d22:	3001      	adds	r0, #1
 8020d24:	4284      	cmp	r4, r0
 8020d26:	f843 2f04 	str.w	r2, [r3, #4]!
 8020d2a:	d1f5      	bne.n	8020d18 <ai_platform_get_activations_map+0x4c>
 8020d2c:	4620      	mov	r0, r4
 8020d2e:	1a20      	subs	r0, r4, r0
 8020d30:	fab0 f080 	clz	r0, r0
 8020d34:	0940      	lsrs	r0, r0, #5
 8020d36:	bd70      	pop	{r4, r5, r6, pc}
 8020d38:	6863      	ldr	r3, [r4, #4]
 8020d3a:	3404      	adds	r4, #4
 8020d3c:	42ab      	cmp	r3, r5
 8020d3e:	d0e3      	beq.n	8020d08 <ai_platform_get_activations_map+0x3c>
 8020d40:	3804      	subs	r0, #4
 8020d42:	4626      	mov	r6, r4
 8020d44:	2200      	movs	r2, #0
 8020d46:	e003      	b.n	8020d50 <ai_platform_get_activations_map+0x84>
 8020d48:	f856 3f04 	ldr.w	r3, [r6, #4]!
 8020d4c:	42ab      	cmp	r3, r5
 8020d4e:	d0db      	beq.n	8020d08 <ai_platform_get_activations_map+0x3c>
 8020d50:	3201      	adds	r2, #1
 8020d52:	4291      	cmp	r1, r2
 8020d54:	f840 3f04 	str.w	r3, [r0, #4]!
 8020d58:	d1f6      	bne.n	8020d48 <ai_platform_get_activations_map+0x7c>
 8020d5a:	f854 2021 	ldr.w	r2, [r4, r1, lsl #2]
 8020d5e:	4b02      	ldr	r3, [pc, #8]	; (8020d68 <ai_platform_get_activations_map+0x9c>)
 8020d60:	429a      	cmp	r2, r3
 8020d62:	d1d1      	bne.n	8020d08 <ai_platform_get_activations_map+0x3c>
 8020d64:	2001      	movs	r0, #1
 8020d66:	bd70      	pop	{r4, r5, r6, pc}
 8020d68:	a1facade 	.word	0xa1facade

08020d6c <ai_platform_bind_network_params>:
 8020d6c:	b1a0      	cbz	r0, 8020d98 <ai_platform_bind_network_params+0x2c>
 8020d6e:	b1c9      	cbz	r1, 8020da4 <ai_platform_bind_network_params+0x38>
 8020d70:	b1aa      	cbz	r2, 8020d9e <ai_platform_bind_network_params+0x32>
 8020d72:	4603      	mov	r3, r0
 8020d74:	b410      	push	{r4}
 8020d76:	480d      	ldr	r0, [pc, #52]	; (8020dac <ai_platform_bind_network_params+0x40>)
 8020d78:	f103 040c 	add.w	r4, r3, #12
 8020d7c:	f843 0b04 	str.w	r0, [r3], #4
 8020d80:	c903      	ldmia	r1, {r0, r1}
 8020d82:	e883 0003 	stmia.w	r3, {r0, r1}
 8020d86:	2301      	movs	r3, #1
 8020d88:	e892 0003 	ldmia.w	r2, {r0, r1}
 8020d8c:	e884 0003 	stmia.w	r4, {r0, r1}
 8020d90:	4618      	mov	r0, r3
 8020d92:	f85d 4b04 	ldr.w	r4, [sp], #4
 8020d96:	4770      	bx	lr
 8020d98:	4603      	mov	r3, r0
 8020d9a:	4618      	mov	r0, r3
 8020d9c:	4770      	bx	lr
 8020d9e:	4613      	mov	r3, r2
 8020da0:	4618      	mov	r0, r3
 8020da2:	4770      	bx	lr
 8020da4:	460b      	mov	r3, r1
 8020da6:	4618      	mov	r0, r3
 8020da8:	4770      	bx	lr
 8020daa:	bf00      	nop
 8020dac:	a1facade 	.word	0xa1facade

08020db0 <ai_platform_runtime_get_revision>:
 8020db0:	b508      	push	{r3, lr}
 8020db2:	4a20      	ldr	r2, [pc, #128]	; (8020e34 <ai_platform_runtime_get_revision+0x84>)
 8020db4:	6813      	ldr	r3, [r2, #0]
 8020db6:	f023 0301 	bic.w	r3, r3, #1
 8020dba:	6013      	str	r3, [r2, #0]
 8020dbc:	f7ff ff32 	bl	8020c24 <_ai_platform_acquire_crc>
 8020dc0:	4b1d      	ldr	r3, [pc, #116]	; (8020e38 <ai_platform_runtime_get_revision+0x88>)
 8020dc2:	f020 5280 	bic.w	r2, r0, #268435456	; 0x10000000
 8020dc6:	429a      	cmp	r2, r3
 8020dc8:	d014      	beq.n	8020df4 <ai_platform_runtime_get_revision+0x44>
 8020dca:	2218      	movs	r2, #24
 8020dcc:	4b1b      	ldr	r3, [pc, #108]	; (8020e3c <ai_platform_runtime_get_revision+0x8c>)
 8020dce:	601a      	str	r2, [r3, #0]
 8020dd0:	681a      	ldr	r2, [r3, #0]
 8020dd2:	2a18      	cmp	r2, #24
 8020dd4:	d01c      	beq.n	8020e10 <ai_platform_runtime_get_revision+0x60>
 8020dd6:	4b1a      	ldr	r3, [pc, #104]	; (8020e40 <ai_platform_runtime_get_revision+0x90>)
 8020dd8:	2201      	movs	r2, #1
 8020dda:	4619      	mov	r1, r3
 8020ddc:	601a      	str	r2, [r3, #0]
 8020dde:	680b      	ldr	r3, [r1, #0]
 8020de0:	2b00      	cmp	r3, #0
 8020de2:	d1fc      	bne.n	8020dde <ai_platform_runtime_get_revision+0x2e>
 8020de4:	4b17      	ldr	r3, [pc, #92]	; (8020e44 <ai_platform_runtime_get_revision+0x94>)
 8020de6:	4918      	ldr	r1, [pc, #96]	; (8020e48 <ai_platform_runtime_get_revision+0x98>)
 8020de8:	4a18      	ldr	r2, [pc, #96]	; (8020e4c <ai_platform_runtime_get_revision+0x9c>)
 8020dea:	6019      	str	r1, [r3, #0]
 8020dec:	681b      	ldr	r3, [r3, #0]
 8020dee:	4293      	cmp	r3, r2
 8020df0:	d01b      	beq.n	8020e2a <ai_platform_runtime_get_revision+0x7a>
 8020df2:	e7fe      	b.n	8020df2 <ai_platform_runtime_get_revision+0x42>
 8020df4:	2301      	movs	r3, #1
 8020df6:	f100 0208 	add.w	r2, r0, #8
 8020dfa:	6083      	str	r3, [r0, #8]
 8020dfc:	6813      	ldr	r3, [r2, #0]
 8020dfe:	2b00      	cmp	r3, #0
 8020e00:	d1fc      	bne.n	8020dfc <ai_platform_runtime_get_revision+0x4c>
 8020e02:	4a11      	ldr	r2, [pc, #68]	; (8020e48 <ai_platform_runtime_get_revision+0x98>)
 8020e04:	4b11      	ldr	r3, [pc, #68]	; (8020e4c <ai_platform_runtime_get_revision+0x9c>)
 8020e06:	6002      	str	r2, [r0, #0]
 8020e08:	6802      	ldr	r2, [r0, #0]
 8020e0a:	429a      	cmp	r2, r3
 8020e0c:	d00d      	beq.n	8020e2a <ai_platform_runtime_get_revision+0x7a>
 8020e0e:	e7fe      	b.n	8020e0e <ai_platform_runtime_get_revision+0x5e>
 8020e10:	2201      	movs	r2, #1
 8020e12:	4619      	mov	r1, r3
 8020e14:	601a      	str	r2, [r3, #0]
 8020e16:	680b      	ldr	r3, [r1, #0]
 8020e18:	2b00      	cmp	r3, #0
 8020e1a:	d1fc      	bne.n	8020e16 <ai_platform_runtime_get_revision+0x66>
 8020e1c:	4b06      	ldr	r3, [pc, #24]	; (8020e38 <ai_platform_runtime_get_revision+0x88>)
 8020e1e:	490a      	ldr	r1, [pc, #40]	; (8020e48 <ai_platform_runtime_get_revision+0x98>)
 8020e20:	4a0a      	ldr	r2, [pc, #40]	; (8020e4c <ai_platform_runtime_get_revision+0x9c>)
 8020e22:	6019      	str	r1, [r3, #0]
 8020e24:	681b      	ldr	r3, [r3, #0]
 8020e26:	4293      	cmp	r3, r2
 8020e28:	d103      	bne.n	8020e32 <ai_platform_runtime_get_revision+0x82>
 8020e2a:	f7ff fefd 	bl	8020c28 <_ai_platform_release_crc>
 8020e2e:	4808      	ldr	r0, [pc, #32]	; (8020e50 <ai_platform_runtime_get_revision+0xa0>)
 8020e30:	bd08      	pop	{r3, pc}
 8020e32:	e7fe      	b.n	8020e32 <ai_platform_runtime_get_revision+0x82>
 8020e34:	e0002000 	.word	0xe0002000
 8020e38:	40023000 	.word	0x40023000
 8020e3c:	40023008 	.word	0x40023008
 8020e40:	50023008 	.word	0x50023008
 8020e44:	50023000 	.word	0x50023000
 8020e48:	f407a5c2 	.word	0xf407a5c2
 8020e4c:	b5e8b5cd 	.word	0xb5e8b5cd
 8020e50:	08035da8 	.word	0x08035da8

08020e54 <ai_platform_runtime_get_version>:
 8020e54:	b500      	push	{lr}
 8020e56:	4a2a      	ldr	r2, [pc, #168]	; (8020f00 <ai_platform_runtime_get_version+0xac>)
 8020e58:	b083      	sub	sp, #12
 8020e5a:	6813      	ldr	r3, [r2, #0]
 8020e5c:	f023 0301 	bic.w	r3, r3, #1
 8020e60:	6013      	str	r3, [r2, #0]
 8020e62:	f7ff fedf 	bl	8020c24 <_ai_platform_acquire_crc>
 8020e66:	4b27      	ldr	r3, [pc, #156]	; (8020f04 <ai_platform_runtime_get_version+0xb0>)
 8020e68:	f020 5280 	bic.w	r2, r0, #268435456	; 0x10000000
 8020e6c:	429a      	cmp	r2, r3
 8020e6e:	d014      	beq.n	8020e9a <ai_platform_runtime_get_version+0x46>
 8020e70:	2218      	movs	r2, #24
 8020e72:	4b25      	ldr	r3, [pc, #148]	; (8020f08 <ai_platform_runtime_get_version+0xb4>)
 8020e74:	601a      	str	r2, [r3, #0]
 8020e76:	681a      	ldr	r2, [r3, #0]
 8020e78:	2a18      	cmp	r2, #24
 8020e7a:	d01c      	beq.n	8020eb6 <ai_platform_runtime_get_version+0x62>
 8020e7c:	4b23      	ldr	r3, [pc, #140]	; (8020f0c <ai_platform_runtime_get_version+0xb8>)
 8020e7e:	2201      	movs	r2, #1
 8020e80:	4619      	mov	r1, r3
 8020e82:	601a      	str	r2, [r3, #0]
 8020e84:	680b      	ldr	r3, [r1, #0]
 8020e86:	2b00      	cmp	r3, #0
 8020e88:	d1fc      	bne.n	8020e84 <ai_platform_runtime_get_version+0x30>
 8020e8a:	4b21      	ldr	r3, [pc, #132]	; (8020f10 <ai_platform_runtime_get_version+0xbc>)
 8020e8c:	4921      	ldr	r1, [pc, #132]	; (8020f14 <ai_platform_runtime_get_version+0xc0>)
 8020e8e:	4a22      	ldr	r2, [pc, #136]	; (8020f18 <ai_platform_runtime_get_version+0xc4>)
 8020e90:	6019      	str	r1, [r3, #0]
 8020e92:	681b      	ldr	r3, [r3, #0]
 8020e94:	4293      	cmp	r3, r2
 8020e96:	d01b      	beq.n	8020ed0 <ai_platform_runtime_get_version+0x7c>
 8020e98:	e7fe      	b.n	8020e98 <ai_platform_runtime_get_version+0x44>
 8020e9a:	2301      	movs	r3, #1
 8020e9c:	f100 0208 	add.w	r2, r0, #8
 8020ea0:	6083      	str	r3, [r0, #8]
 8020ea2:	6813      	ldr	r3, [r2, #0]
 8020ea4:	2b00      	cmp	r3, #0
 8020ea6:	d1fc      	bne.n	8020ea2 <ai_platform_runtime_get_version+0x4e>
 8020ea8:	4a1a      	ldr	r2, [pc, #104]	; (8020f14 <ai_platform_runtime_get_version+0xc0>)
 8020eaa:	4b1b      	ldr	r3, [pc, #108]	; (8020f18 <ai_platform_runtime_get_version+0xc4>)
 8020eac:	6002      	str	r2, [r0, #0]
 8020eae:	6802      	ldr	r2, [r0, #0]
 8020eb0:	429a      	cmp	r2, r3
 8020eb2:	d00d      	beq.n	8020ed0 <ai_platform_runtime_get_version+0x7c>
 8020eb4:	e7fe      	b.n	8020eb4 <ai_platform_runtime_get_version+0x60>
 8020eb6:	2201      	movs	r2, #1
 8020eb8:	4619      	mov	r1, r3
 8020eba:	601a      	str	r2, [r3, #0]
 8020ebc:	680b      	ldr	r3, [r1, #0]
 8020ebe:	2b00      	cmp	r3, #0
 8020ec0:	d1fc      	bne.n	8020ebc <ai_platform_runtime_get_version+0x68>
 8020ec2:	4b10      	ldr	r3, [pc, #64]	; (8020f04 <ai_platform_runtime_get_version+0xb0>)
 8020ec4:	4913      	ldr	r1, [pc, #76]	; (8020f14 <ai_platform_runtime_get_version+0xc0>)
 8020ec6:	4a14      	ldr	r2, [pc, #80]	; (8020f18 <ai_platform_runtime_get_version+0xc4>)
 8020ec8:	6019      	str	r1, [r3, #0]
 8020eca:	681b      	ldr	r3, [r3, #0]
 8020ecc:	4293      	cmp	r3, r2
 8020ece:	d115      	bne.n	8020efc <ai_platform_runtime_get_version+0xa8>
 8020ed0:	f7ff feaa 	bl	8020c28 <_ai_platform_release_crc>
 8020ed4:	2000      	movs	r0, #0
 8020ed6:	4b11      	ldr	r3, [pc, #68]	; (8020f1c <ai_platform_runtime_get_version+0xc8>)
 8020ed8:	681b      	ldr	r3, [r3, #0]
 8020eda:	b2da      	uxtb	r2, r3
 8020edc:	f362 0007 	bfi	r0, r2, #0, #8
 8020ee0:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8020ee4:	f362 200f 	bfi	r0, r2, #8, #8
 8020ee8:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8020eec:	f362 4017 	bfi	r0, r2, #16, #8
 8020ef0:	0e1b      	lsrs	r3, r3, #24
 8020ef2:	f363 601f 	bfi	r0, r3, #24, #8
 8020ef6:	b003      	add	sp, #12
 8020ef8:	f85d fb04 	ldr.w	pc, [sp], #4
 8020efc:	e7fe      	b.n	8020efc <ai_platform_runtime_get_version+0xa8>
 8020efe:	bf00      	nop
 8020f00:	e0002000 	.word	0xe0002000
 8020f04:	40023000 	.word	0x40023000
 8020f08:	40023008 	.word	0x40023008
 8020f0c:	50023008 	.word	0x50023008
 8020f10:	50023000 	.word	0x50023000
 8020f14:	f407a5c2 	.word	0xf407a5c2
 8020f18:	b5e8b5cd 	.word	0xb5e8b5cd
 8020f1c:	08035dac 	.word	0x08035dac

08020f20 <ai_platform_api_get_version>:
 8020f20:	b500      	push	{lr}
 8020f22:	4a2a      	ldr	r2, [pc, #168]	; (8020fcc <ai_platform_api_get_version+0xac>)
 8020f24:	b083      	sub	sp, #12
 8020f26:	6813      	ldr	r3, [r2, #0]
 8020f28:	f023 0301 	bic.w	r3, r3, #1
 8020f2c:	6013      	str	r3, [r2, #0]
 8020f2e:	f7ff fe79 	bl	8020c24 <_ai_platform_acquire_crc>
 8020f32:	4b27      	ldr	r3, [pc, #156]	; (8020fd0 <ai_platform_api_get_version+0xb0>)
 8020f34:	f020 5280 	bic.w	r2, r0, #268435456	; 0x10000000
 8020f38:	429a      	cmp	r2, r3
 8020f3a:	d014      	beq.n	8020f66 <ai_platform_api_get_version+0x46>
 8020f3c:	2218      	movs	r2, #24
 8020f3e:	4b25      	ldr	r3, [pc, #148]	; (8020fd4 <ai_platform_api_get_version+0xb4>)
 8020f40:	601a      	str	r2, [r3, #0]
 8020f42:	681a      	ldr	r2, [r3, #0]
 8020f44:	2a18      	cmp	r2, #24
 8020f46:	d01c      	beq.n	8020f82 <ai_platform_api_get_version+0x62>
 8020f48:	4b23      	ldr	r3, [pc, #140]	; (8020fd8 <ai_platform_api_get_version+0xb8>)
 8020f4a:	2201      	movs	r2, #1
 8020f4c:	4619      	mov	r1, r3
 8020f4e:	601a      	str	r2, [r3, #0]
 8020f50:	680b      	ldr	r3, [r1, #0]
 8020f52:	2b00      	cmp	r3, #0
 8020f54:	d1fc      	bne.n	8020f50 <ai_platform_api_get_version+0x30>
 8020f56:	4b21      	ldr	r3, [pc, #132]	; (8020fdc <ai_platform_api_get_version+0xbc>)
 8020f58:	4921      	ldr	r1, [pc, #132]	; (8020fe0 <ai_platform_api_get_version+0xc0>)
 8020f5a:	4a22      	ldr	r2, [pc, #136]	; (8020fe4 <ai_platform_api_get_version+0xc4>)
 8020f5c:	6019      	str	r1, [r3, #0]
 8020f5e:	681b      	ldr	r3, [r3, #0]
 8020f60:	4293      	cmp	r3, r2
 8020f62:	d01b      	beq.n	8020f9c <ai_platform_api_get_version+0x7c>
 8020f64:	e7fe      	b.n	8020f64 <ai_platform_api_get_version+0x44>
 8020f66:	2301      	movs	r3, #1
 8020f68:	f100 0208 	add.w	r2, r0, #8
 8020f6c:	6083      	str	r3, [r0, #8]
 8020f6e:	6813      	ldr	r3, [r2, #0]
 8020f70:	2b00      	cmp	r3, #0
 8020f72:	d1fc      	bne.n	8020f6e <ai_platform_api_get_version+0x4e>
 8020f74:	4a1a      	ldr	r2, [pc, #104]	; (8020fe0 <ai_platform_api_get_version+0xc0>)
 8020f76:	4b1b      	ldr	r3, [pc, #108]	; (8020fe4 <ai_platform_api_get_version+0xc4>)
 8020f78:	6002      	str	r2, [r0, #0]
 8020f7a:	6802      	ldr	r2, [r0, #0]
 8020f7c:	429a      	cmp	r2, r3
 8020f7e:	d00d      	beq.n	8020f9c <ai_platform_api_get_version+0x7c>
 8020f80:	e7fe      	b.n	8020f80 <ai_platform_api_get_version+0x60>
 8020f82:	2201      	movs	r2, #1
 8020f84:	4619      	mov	r1, r3
 8020f86:	601a      	str	r2, [r3, #0]
 8020f88:	680b      	ldr	r3, [r1, #0]
 8020f8a:	2b00      	cmp	r3, #0
 8020f8c:	d1fc      	bne.n	8020f88 <ai_platform_api_get_version+0x68>
 8020f8e:	4b10      	ldr	r3, [pc, #64]	; (8020fd0 <ai_platform_api_get_version+0xb0>)
 8020f90:	4913      	ldr	r1, [pc, #76]	; (8020fe0 <ai_platform_api_get_version+0xc0>)
 8020f92:	4a14      	ldr	r2, [pc, #80]	; (8020fe4 <ai_platform_api_get_version+0xc4>)
 8020f94:	6019      	str	r1, [r3, #0]
 8020f96:	681b      	ldr	r3, [r3, #0]
 8020f98:	4293      	cmp	r3, r2
 8020f9a:	d115      	bne.n	8020fc8 <ai_platform_api_get_version+0xa8>
 8020f9c:	f7ff fe44 	bl	8020c28 <_ai_platform_release_crc>
 8020fa0:	2000      	movs	r0, #0
 8020fa2:	4b11      	ldr	r3, [pc, #68]	; (8020fe8 <ai_platform_api_get_version+0xc8>)
 8020fa4:	681b      	ldr	r3, [r3, #0]
 8020fa6:	b2da      	uxtb	r2, r3
 8020fa8:	f362 0007 	bfi	r0, r2, #0, #8
 8020fac:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8020fb0:	f362 200f 	bfi	r0, r2, #8, #8
 8020fb4:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8020fb8:	f362 4017 	bfi	r0, r2, #16, #8
 8020fbc:	0e1b      	lsrs	r3, r3, #24
 8020fbe:	f363 601f 	bfi	r0, r3, #24, #8
 8020fc2:	b003      	add	sp, #12
 8020fc4:	f85d fb04 	ldr.w	pc, [sp], #4
 8020fc8:	e7fe      	b.n	8020fc8 <ai_platform_api_get_version+0xa8>
 8020fca:	bf00      	nop
 8020fcc:	e0002000 	.word	0xe0002000
 8020fd0:	40023000 	.word	0x40023000
 8020fd4:	40023008 	.word	0x40023008
 8020fd8:	50023008 	.word	0x50023008
 8020fdc:	50023000 	.word	0x50023000
 8020fe0:	f407a5c2 	.word	0xf407a5c2
 8020fe4:	b5e8b5cd 	.word	0xb5e8b5cd
 8020fe8:	08035db0 	.word	0x08035db0

08020fec <ai_platform_interface_api_get_version>:
 8020fec:	b500      	push	{lr}
 8020fee:	4a2a      	ldr	r2, [pc, #168]	; (8021098 <ai_platform_interface_api_get_version+0xac>)
 8020ff0:	b083      	sub	sp, #12
 8020ff2:	6813      	ldr	r3, [r2, #0]
 8020ff4:	f023 0301 	bic.w	r3, r3, #1
 8020ff8:	6013      	str	r3, [r2, #0]
 8020ffa:	f7ff fe13 	bl	8020c24 <_ai_platform_acquire_crc>
 8020ffe:	4b27      	ldr	r3, [pc, #156]	; (802109c <ai_platform_interface_api_get_version+0xb0>)
 8021000:	f020 5280 	bic.w	r2, r0, #268435456	; 0x10000000
 8021004:	429a      	cmp	r2, r3
 8021006:	d014      	beq.n	8021032 <ai_platform_interface_api_get_version+0x46>
 8021008:	2218      	movs	r2, #24
 802100a:	4b25      	ldr	r3, [pc, #148]	; (80210a0 <ai_platform_interface_api_get_version+0xb4>)
 802100c:	601a      	str	r2, [r3, #0]
 802100e:	681a      	ldr	r2, [r3, #0]
 8021010:	2a18      	cmp	r2, #24
 8021012:	d01c      	beq.n	802104e <ai_platform_interface_api_get_version+0x62>
 8021014:	4b23      	ldr	r3, [pc, #140]	; (80210a4 <ai_platform_interface_api_get_version+0xb8>)
 8021016:	2201      	movs	r2, #1
 8021018:	4619      	mov	r1, r3
 802101a:	601a      	str	r2, [r3, #0]
 802101c:	680b      	ldr	r3, [r1, #0]
 802101e:	2b00      	cmp	r3, #0
 8021020:	d1fc      	bne.n	802101c <ai_platform_interface_api_get_version+0x30>
 8021022:	4b21      	ldr	r3, [pc, #132]	; (80210a8 <ai_platform_interface_api_get_version+0xbc>)
 8021024:	4921      	ldr	r1, [pc, #132]	; (80210ac <ai_platform_interface_api_get_version+0xc0>)
 8021026:	4a22      	ldr	r2, [pc, #136]	; (80210b0 <ai_platform_interface_api_get_version+0xc4>)
 8021028:	6019      	str	r1, [r3, #0]
 802102a:	681b      	ldr	r3, [r3, #0]
 802102c:	4293      	cmp	r3, r2
 802102e:	d01b      	beq.n	8021068 <ai_platform_interface_api_get_version+0x7c>
 8021030:	e7fe      	b.n	8021030 <ai_platform_interface_api_get_version+0x44>
 8021032:	2301      	movs	r3, #1
 8021034:	f100 0208 	add.w	r2, r0, #8
 8021038:	6083      	str	r3, [r0, #8]
 802103a:	6813      	ldr	r3, [r2, #0]
 802103c:	2b00      	cmp	r3, #0
 802103e:	d1fc      	bne.n	802103a <ai_platform_interface_api_get_version+0x4e>
 8021040:	4a1a      	ldr	r2, [pc, #104]	; (80210ac <ai_platform_interface_api_get_version+0xc0>)
 8021042:	4b1b      	ldr	r3, [pc, #108]	; (80210b0 <ai_platform_interface_api_get_version+0xc4>)
 8021044:	6002      	str	r2, [r0, #0]
 8021046:	6802      	ldr	r2, [r0, #0]
 8021048:	429a      	cmp	r2, r3
 802104a:	d00d      	beq.n	8021068 <ai_platform_interface_api_get_version+0x7c>
 802104c:	e7fe      	b.n	802104c <ai_platform_interface_api_get_version+0x60>
 802104e:	2201      	movs	r2, #1
 8021050:	4619      	mov	r1, r3
 8021052:	601a      	str	r2, [r3, #0]
 8021054:	680b      	ldr	r3, [r1, #0]
 8021056:	2b00      	cmp	r3, #0
 8021058:	d1fc      	bne.n	8021054 <ai_platform_interface_api_get_version+0x68>
 802105a:	4b10      	ldr	r3, [pc, #64]	; (802109c <ai_platform_interface_api_get_version+0xb0>)
 802105c:	4913      	ldr	r1, [pc, #76]	; (80210ac <ai_platform_interface_api_get_version+0xc0>)
 802105e:	4a14      	ldr	r2, [pc, #80]	; (80210b0 <ai_platform_interface_api_get_version+0xc4>)
 8021060:	6019      	str	r1, [r3, #0]
 8021062:	681b      	ldr	r3, [r3, #0]
 8021064:	4293      	cmp	r3, r2
 8021066:	d115      	bne.n	8021094 <ai_platform_interface_api_get_version+0xa8>
 8021068:	f7ff fdde 	bl	8020c28 <_ai_platform_release_crc>
 802106c:	2000      	movs	r0, #0
 802106e:	4b11      	ldr	r3, [pc, #68]	; (80210b4 <ai_platform_interface_api_get_version+0xc8>)
 8021070:	681b      	ldr	r3, [r3, #0]
 8021072:	b2da      	uxtb	r2, r3
 8021074:	f362 0007 	bfi	r0, r2, #0, #8
 8021078:	f3c3 2207 	ubfx	r2, r3, #8, #8
 802107c:	f362 200f 	bfi	r0, r2, #8, #8
 8021080:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8021084:	f362 4017 	bfi	r0, r2, #16, #8
 8021088:	0e1b      	lsrs	r3, r3, #24
 802108a:	f363 601f 	bfi	r0, r3, #24, #8
 802108e:	b003      	add	sp, #12
 8021090:	f85d fb04 	ldr.w	pc, [sp], #4
 8021094:	e7fe      	b.n	8021094 <ai_platform_interface_api_get_version+0xa8>
 8021096:	bf00      	nop
 8021098:	e0002000 	.word	0xe0002000
 802109c:	40023000 	.word	0x40023000
 80210a0:	40023008 	.word	0x40023008
 80210a4:	50023008 	.word	0x50023008
 80210a8:	50023000 	.word	0x50023000
 80210ac:	f407a5c2 	.word	0xf407a5c2
 80210b0:	b5e8b5cd 	.word	0xb5e8b5cd
 80210b4:	08035db4 	.word	0x08035db4

080210b8 <ai_platform_context_acquire>:
 80210b8:	b510      	push	{r4, lr}
 80210ba:	4604      	mov	r4, r0
 80210bc:	b120      	cbz	r0, 80210c8 <ai_platform_context_acquire+0x10>
 80210be:	4b23      	ldr	r3, [pc, #140]	; (802114c <ai_platform_context_acquire+0x94>)
 80210c0:	6802      	ldr	r2, [r0, #0]
 80210c2:	429a      	cmp	r2, r3
 80210c4:	bf18      	it	ne
 80210c6:	2400      	movne	r4, #0
 80210c8:	4a21      	ldr	r2, [pc, #132]	; (8021150 <ai_platform_context_acquire+0x98>)
 80210ca:	6813      	ldr	r3, [r2, #0]
 80210cc:	f023 0301 	bic.w	r3, r3, #1
 80210d0:	6013      	str	r3, [r2, #0]
 80210d2:	f7ff fda7 	bl	8020c24 <_ai_platform_acquire_crc>
 80210d6:	4b1f      	ldr	r3, [pc, #124]	; (8021154 <ai_platform_context_acquire+0x9c>)
 80210d8:	f020 5280 	bic.w	r2, r0, #268435456	; 0x10000000
 80210dc:	429a      	cmp	r2, r3
 80210de:	d014      	beq.n	802110a <ai_platform_context_acquire+0x52>
 80210e0:	2218      	movs	r2, #24
 80210e2:	4b1d      	ldr	r3, [pc, #116]	; (8021158 <ai_platform_context_acquire+0xa0>)
 80210e4:	601a      	str	r2, [r3, #0]
 80210e6:	681a      	ldr	r2, [r3, #0]
 80210e8:	2a18      	cmp	r2, #24
 80210ea:	d01c      	beq.n	8021126 <ai_platform_context_acquire+0x6e>
 80210ec:	4b1b      	ldr	r3, [pc, #108]	; (802115c <ai_platform_context_acquire+0xa4>)
 80210ee:	2201      	movs	r2, #1
 80210f0:	4619      	mov	r1, r3
 80210f2:	601a      	str	r2, [r3, #0]
 80210f4:	680b      	ldr	r3, [r1, #0]
 80210f6:	2b00      	cmp	r3, #0
 80210f8:	d1fc      	bne.n	80210f4 <ai_platform_context_acquire+0x3c>
 80210fa:	4b19      	ldr	r3, [pc, #100]	; (8021160 <ai_platform_context_acquire+0xa8>)
 80210fc:	4919      	ldr	r1, [pc, #100]	; (8021164 <ai_platform_context_acquire+0xac>)
 80210fe:	4a1a      	ldr	r2, [pc, #104]	; (8021168 <ai_platform_context_acquire+0xb0>)
 8021100:	6019      	str	r1, [r3, #0]
 8021102:	681b      	ldr	r3, [r3, #0]
 8021104:	4293      	cmp	r3, r2
 8021106:	d01b      	beq.n	8021140 <ai_platform_context_acquire+0x88>
 8021108:	e7fe      	b.n	8021108 <ai_platform_context_acquire+0x50>
 802110a:	2301      	movs	r3, #1
 802110c:	f100 0208 	add.w	r2, r0, #8
 8021110:	6083      	str	r3, [r0, #8]
 8021112:	6813      	ldr	r3, [r2, #0]
 8021114:	2b00      	cmp	r3, #0
 8021116:	d1fc      	bne.n	8021112 <ai_platform_context_acquire+0x5a>
 8021118:	4a12      	ldr	r2, [pc, #72]	; (8021164 <ai_platform_context_acquire+0xac>)
 802111a:	4b13      	ldr	r3, [pc, #76]	; (8021168 <ai_platform_context_acquire+0xb0>)
 802111c:	6002      	str	r2, [r0, #0]
 802111e:	6802      	ldr	r2, [r0, #0]
 8021120:	429a      	cmp	r2, r3
 8021122:	d00d      	beq.n	8021140 <ai_platform_context_acquire+0x88>
 8021124:	e7fe      	b.n	8021124 <ai_platform_context_acquire+0x6c>
 8021126:	2201      	movs	r2, #1
 8021128:	4619      	mov	r1, r3
 802112a:	601a      	str	r2, [r3, #0]
 802112c:	680b      	ldr	r3, [r1, #0]
 802112e:	2b00      	cmp	r3, #0
 8021130:	d1fc      	bne.n	802112c <ai_platform_context_acquire+0x74>
 8021132:	4b08      	ldr	r3, [pc, #32]	; (8021154 <ai_platform_context_acquire+0x9c>)
 8021134:	490b      	ldr	r1, [pc, #44]	; (8021164 <ai_platform_context_acquire+0xac>)
 8021136:	4a0c      	ldr	r2, [pc, #48]	; (8021168 <ai_platform_context_acquire+0xb0>)
 8021138:	6019      	str	r1, [r3, #0]
 802113a:	681b      	ldr	r3, [r3, #0]
 802113c:	4293      	cmp	r3, r2
 802113e:	d103      	bne.n	8021148 <ai_platform_context_acquire+0x90>
 8021140:	f7ff fd72 	bl	8020c28 <_ai_platform_release_crc>
 8021144:	4620      	mov	r0, r4
 8021146:	bd10      	pop	{r4, pc}
 8021148:	e7fe      	b.n	8021148 <ai_platform_context_acquire+0x90>
 802114a:	bf00      	nop
 802114c:	a1c00100 	.word	0xa1c00100
 8021150:	e0002000 	.word	0xe0002000
 8021154:	40023000 	.word	0x40023000
 8021158:	40023008 	.word	0x40023008
 802115c:	50023008 	.word	0x50023008
 8021160:	50023000 	.word	0x50023000
 8021164:	f407a5c2 	.word	0xf407a5c2
 8021168:	b5e8b5cd 	.word	0xb5e8b5cd

0802116c <ai_platform_network_get_error>:
 802116c:	b510      	push	{r4, lr}
 802116e:	b120      	cbz	r0, 802117a <ai_platform_network_get_error+0xe>
 8021170:	4b45      	ldr	r3, [pc, #276]	; (8021288 <ai_platform_network_get_error+0x11c>)
 8021172:	6802      	ldr	r2, [r0, #0]
 8021174:	4604      	mov	r4, r0
 8021176:	429a      	cmp	r2, r3
 8021178:	d033      	beq.n	80211e2 <ai_platform_network_get_error+0x76>
 802117a:	4a44      	ldr	r2, [pc, #272]	; (802128c <ai_platform_network_get_error+0x120>)
 802117c:	6813      	ldr	r3, [r2, #0]
 802117e:	f023 0301 	bic.w	r3, r3, #1
 8021182:	6013      	str	r3, [r2, #0]
 8021184:	f7ff fd4e 	bl	8020c24 <_ai_platform_acquire_crc>
 8021188:	4b41      	ldr	r3, [pc, #260]	; (8021290 <ai_platform_network_get_error+0x124>)
 802118a:	f020 5280 	bic.w	r2, r0, #268435456	; 0x10000000
 802118e:	429a      	cmp	r2, r3
 8021190:	d014      	beq.n	80211bc <ai_platform_network_get_error+0x50>
 8021192:	2218      	movs	r2, #24
 8021194:	4b3f      	ldr	r3, [pc, #252]	; (8021294 <ai_platform_network_get_error+0x128>)
 8021196:	601a      	str	r2, [r3, #0]
 8021198:	681a      	ldr	r2, [r3, #0]
 802119a:	2a18      	cmp	r2, #24
 802119c:	d042      	beq.n	8021224 <ai_platform_network_get_error+0xb8>
 802119e:	4b3e      	ldr	r3, [pc, #248]	; (8021298 <ai_platform_network_get_error+0x12c>)
 80211a0:	2201      	movs	r2, #1
 80211a2:	4619      	mov	r1, r3
 80211a4:	601a      	str	r2, [r3, #0]
 80211a6:	680b      	ldr	r3, [r1, #0]
 80211a8:	2b00      	cmp	r3, #0
 80211aa:	d1fc      	bne.n	80211a6 <ai_platform_network_get_error+0x3a>
 80211ac:	4b3b      	ldr	r3, [pc, #236]	; (802129c <ai_platform_network_get_error+0x130>)
 80211ae:	493c      	ldr	r1, [pc, #240]	; (80212a0 <ai_platform_network_get_error+0x134>)
 80211b0:	4a3c      	ldr	r2, [pc, #240]	; (80212a4 <ai_platform_network_get_error+0x138>)
 80211b2:	6019      	str	r1, [r3, #0]
 80211b4:	681b      	ldr	r3, [r3, #0]
 80211b6:	4293      	cmp	r3, r2
 80211b8:	d00d      	beq.n	80211d6 <ai_platform_network_get_error+0x6a>
 80211ba:	e7fe      	b.n	80211ba <ai_platform_network_get_error+0x4e>
 80211bc:	2301      	movs	r3, #1
 80211be:	f100 0208 	add.w	r2, r0, #8
 80211c2:	6083      	str	r3, [r0, #8]
 80211c4:	6813      	ldr	r3, [r2, #0]
 80211c6:	2b00      	cmp	r3, #0
 80211c8:	d1fc      	bne.n	80211c4 <ai_platform_network_get_error+0x58>
 80211ca:	4a35      	ldr	r2, [pc, #212]	; (80212a0 <ai_platform_network_get_error+0x134>)
 80211cc:	4b35      	ldr	r3, [pc, #212]	; (80212a4 <ai_platform_network_get_error+0x138>)
 80211ce:	6002      	str	r2, [r0, #0]
 80211d0:	6802      	ldr	r2, [r0, #0]
 80211d2:	429a      	cmp	r2, r3
 80211d4:	d104      	bne.n	80211e0 <ai_platform_network_get_error+0x74>
 80211d6:	f7ff fd27 	bl	8020c28 <_ai_platform_release_crc>
 80211da:	f241 0010 	movw	r0, #4112	; 0x1010
 80211de:	bd10      	pop	{r4, pc}
 80211e0:	e7fe      	b.n	80211e0 <ai_platform_network_get_error+0x74>
 80211e2:	4a2a      	ldr	r2, [pc, #168]	; (802128c <ai_platform_network_get_error+0x120>)
 80211e4:	6813      	ldr	r3, [r2, #0]
 80211e6:	f023 0301 	bic.w	r3, r3, #1
 80211ea:	6013      	str	r3, [r2, #0]
 80211ec:	f7ff fd1a 	bl	8020c24 <_ai_platform_acquire_crc>
 80211f0:	4b27      	ldr	r3, [pc, #156]	; (8021290 <ai_platform_network_get_error+0x124>)
 80211f2:	f020 5280 	bic.w	r2, r0, #268435456	; 0x10000000
 80211f6:	429a      	cmp	r2, r3
 80211f8:	d022      	beq.n	8021240 <ai_platform_network_get_error+0xd4>
 80211fa:	2218      	movs	r2, #24
 80211fc:	4b25      	ldr	r3, [pc, #148]	; (8021294 <ai_platform_network_get_error+0x128>)
 80211fe:	601a      	str	r2, [r3, #0]
 8021200:	681a      	ldr	r2, [r3, #0]
 8021202:	2a18      	cmp	r2, #24
 8021204:	d031      	beq.n	802126a <ai_platform_network_get_error+0xfe>
 8021206:	4b24      	ldr	r3, [pc, #144]	; (8021298 <ai_platform_network_get_error+0x12c>)
 8021208:	2201      	movs	r2, #1
 802120a:	4619      	mov	r1, r3
 802120c:	601a      	str	r2, [r3, #0]
 802120e:	680b      	ldr	r3, [r1, #0]
 8021210:	2b00      	cmp	r3, #0
 8021212:	d1fc      	bne.n	802120e <ai_platform_network_get_error+0xa2>
 8021214:	4b21      	ldr	r3, [pc, #132]	; (802129c <ai_platform_network_get_error+0x130>)
 8021216:	4922      	ldr	r1, [pc, #136]	; (80212a0 <ai_platform_network_get_error+0x134>)
 8021218:	4a22      	ldr	r2, [pc, #136]	; (80212a4 <ai_platform_network_get_error+0x138>)
 802121a:	6019      	str	r1, [r3, #0]
 802121c:	681b      	ldr	r3, [r3, #0]
 802121e:	4293      	cmp	r3, r2
 8021220:	d01b      	beq.n	802125a <ai_platform_network_get_error+0xee>
 8021222:	e7fe      	b.n	8021222 <ai_platform_network_get_error+0xb6>
 8021224:	2201      	movs	r2, #1
 8021226:	4619      	mov	r1, r3
 8021228:	601a      	str	r2, [r3, #0]
 802122a:	680b      	ldr	r3, [r1, #0]
 802122c:	2b00      	cmp	r3, #0
 802122e:	d1fc      	bne.n	802122a <ai_platform_network_get_error+0xbe>
 8021230:	4b17      	ldr	r3, [pc, #92]	; (8021290 <ai_platform_network_get_error+0x124>)
 8021232:	491b      	ldr	r1, [pc, #108]	; (80212a0 <ai_platform_network_get_error+0x134>)
 8021234:	4a1b      	ldr	r2, [pc, #108]	; (80212a4 <ai_platform_network_get_error+0x138>)
 8021236:	6019      	str	r1, [r3, #0]
 8021238:	681b      	ldr	r3, [r3, #0]
 802123a:	4293      	cmp	r3, r2
 802123c:	d0cb      	beq.n	80211d6 <ai_platform_network_get_error+0x6a>
 802123e:	e7fe      	b.n	802123e <ai_platform_network_get_error+0xd2>
 8021240:	2301      	movs	r3, #1
 8021242:	f100 0208 	add.w	r2, r0, #8
 8021246:	6083      	str	r3, [r0, #8]
 8021248:	6813      	ldr	r3, [r2, #0]
 802124a:	2b00      	cmp	r3, #0
 802124c:	d1fc      	bne.n	8021248 <ai_platform_network_get_error+0xdc>
 802124e:	4a14      	ldr	r2, [pc, #80]	; (80212a0 <ai_platform_network_get_error+0x134>)
 8021250:	4b14      	ldr	r3, [pc, #80]	; (80212a4 <ai_platform_network_get_error+0x138>)
 8021252:	6002      	str	r2, [r0, #0]
 8021254:	6802      	ldr	r2, [r0, #0]
 8021256:	429a      	cmp	r2, r3
 8021258:	d115      	bne.n	8021286 <ai_platform_network_get_error+0x11a>
 802125a:	f7ff fce5 	bl	8020c28 <_ai_platform_release_crc>
 802125e:	f104 0010 	add.w	r0, r4, #16
 8021262:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021266:	f001 b9a5 	b.w	80225b4 <core_get_error>
 802126a:	2201      	movs	r2, #1
 802126c:	4619      	mov	r1, r3
 802126e:	601a      	str	r2, [r3, #0]
 8021270:	680b      	ldr	r3, [r1, #0]
 8021272:	2b00      	cmp	r3, #0
 8021274:	d1fc      	bne.n	8021270 <ai_platform_network_get_error+0x104>
 8021276:	4b06      	ldr	r3, [pc, #24]	; (8021290 <ai_platform_network_get_error+0x124>)
 8021278:	4909      	ldr	r1, [pc, #36]	; (80212a0 <ai_platform_network_get_error+0x134>)
 802127a:	4a0a      	ldr	r2, [pc, #40]	; (80212a4 <ai_platform_network_get_error+0x138>)
 802127c:	6019      	str	r1, [r3, #0]
 802127e:	681b      	ldr	r3, [r3, #0]
 8021280:	4293      	cmp	r3, r2
 8021282:	d0ea      	beq.n	802125a <ai_platform_network_get_error+0xee>
 8021284:	e7fe      	b.n	8021284 <ai_platform_network_get_error+0x118>
 8021286:	e7fe      	b.n	8021286 <ai_platform_network_get_error+0x11a>
 8021288:	a1c00100 	.word	0xa1c00100
 802128c:	e0002000 	.word	0xe0002000
 8021290:	40023000 	.word	0x40023000
 8021294:	40023008 	.word	0x40023008
 8021298:	50023008 	.word	0x50023008
 802129c:	50023000 	.word	0x50023000
 80212a0:	f407a5c2 	.word	0xf407a5c2
 80212a4:	b5e8b5cd 	.word	0xb5e8b5cd

080212a8 <ai_platform_network_set_error>:
 80212a8:	b110      	cbz	r0, 80212b0 <ai_platform_network_set_error+0x8>
 80212aa:	3010      	adds	r0, #16
 80212ac:	f001 b988 	b.w	80225c0 <core_set_error>
 80212b0:	4770      	bx	lr
 80212b2:	bf00      	nop

080212b4 <ai_platform_api_get_network_report>:
 80212b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80212b8:	b089      	sub	sp, #36	; 0x24
 80212ba:	b120      	cbz	r0, 80212c6 <ai_platform_api_get_network_report+0x12>
 80212bc:	4b8b      	ldr	r3, [pc, #556]	; (80214ec <ai_platform_api_get_network_report+0x238>)
 80212be:	6802      	ldr	r2, [r0, #0]
 80212c0:	4605      	mov	r5, r0
 80212c2:	429a      	cmp	r2, r3
 80212c4:	d035      	beq.n	8021332 <ai_platform_api_get_network_report+0x7e>
 80212c6:	4a8a      	ldr	r2, [pc, #552]	; (80214f0 <ai_platform_api_get_network_report+0x23c>)
 80212c8:	6813      	ldr	r3, [r2, #0]
 80212ca:	f023 0301 	bic.w	r3, r3, #1
 80212ce:	6013      	str	r3, [r2, #0]
 80212d0:	f7ff fca8 	bl	8020c24 <_ai_platform_acquire_crc>
 80212d4:	4b87      	ldr	r3, [pc, #540]	; (80214f4 <ai_platform_api_get_network_report+0x240>)
 80212d6:	f020 5280 	bic.w	r2, r0, #268435456	; 0x10000000
 80212da:	429a      	cmp	r2, r3
 80212dc:	d014      	beq.n	8021308 <ai_platform_api_get_network_report+0x54>
 80212de:	2218      	movs	r2, #24
 80212e0:	4b85      	ldr	r3, [pc, #532]	; (80214f8 <ai_platform_api_get_network_report+0x244>)
 80212e2:	601a      	str	r2, [r3, #0]
 80212e4:	681a      	ldr	r2, [r3, #0]
 80212e6:	2a18      	cmp	r2, #24
 80212e8:	d045      	beq.n	8021376 <ai_platform_api_get_network_report+0xc2>
 80212ea:	4b84      	ldr	r3, [pc, #528]	; (80214fc <ai_platform_api_get_network_report+0x248>)
 80212ec:	2201      	movs	r2, #1
 80212ee:	4619      	mov	r1, r3
 80212f0:	601a      	str	r2, [r3, #0]
 80212f2:	680b      	ldr	r3, [r1, #0]
 80212f4:	2b00      	cmp	r3, #0
 80212f6:	d1fc      	bne.n	80212f2 <ai_platform_api_get_network_report+0x3e>
 80212f8:	4b81      	ldr	r3, [pc, #516]	; (8021500 <ai_platform_api_get_network_report+0x24c>)
 80212fa:	4982      	ldr	r1, [pc, #520]	; (8021504 <ai_platform_api_get_network_report+0x250>)
 80212fc:	4a82      	ldr	r2, [pc, #520]	; (8021508 <ai_platform_api_get_network_report+0x254>)
 80212fe:	6019      	str	r1, [r3, #0]
 8021300:	681b      	ldr	r3, [r3, #0]
 8021302:	4293      	cmp	r3, r2
 8021304:	d00d      	beq.n	8021322 <ai_platform_api_get_network_report+0x6e>
 8021306:	e7fe      	b.n	8021306 <ai_platform_api_get_network_report+0x52>
 8021308:	2301      	movs	r3, #1
 802130a:	f100 0208 	add.w	r2, r0, #8
 802130e:	6083      	str	r3, [r0, #8]
 8021310:	6813      	ldr	r3, [r2, #0]
 8021312:	2b00      	cmp	r3, #0
 8021314:	d1fc      	bne.n	8021310 <ai_platform_api_get_network_report+0x5c>
 8021316:	4a7b      	ldr	r2, [pc, #492]	; (8021504 <ai_platform_api_get_network_report+0x250>)
 8021318:	4b7b      	ldr	r3, [pc, #492]	; (8021508 <ai_platform_api_get_network_report+0x254>)
 802131a:	6002      	str	r2, [r0, #0]
 802131c:	6802      	ldr	r2, [r0, #0]
 802131e:	429a      	cmp	r2, r3
 8021320:	d106      	bne.n	8021330 <ai_platform_api_get_network_report+0x7c>
 8021322:	f7ff fc81 	bl	8020c28 <_ai_platform_release_crc>
 8021326:	2400      	movs	r4, #0
 8021328:	4620      	mov	r0, r4
 802132a:	b009      	add	sp, #36	; 0x24
 802132c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021330:	e7fe      	b.n	8021330 <ai_platform_api_get_network_report+0x7c>
 8021332:	4a6f      	ldr	r2, [pc, #444]	; (80214f0 <ai_platform_api_get_network_report+0x23c>)
 8021334:	460c      	mov	r4, r1
 8021336:	6813      	ldr	r3, [r2, #0]
 8021338:	f023 0301 	bic.w	r3, r3, #1
 802133c:	6013      	str	r3, [r2, #0]
 802133e:	f7ff fc71 	bl	8020c24 <_ai_platform_acquire_crc>
 8021342:	4b6c      	ldr	r3, [pc, #432]	; (80214f4 <ai_platform_api_get_network_report+0x240>)
 8021344:	f020 5280 	bic.w	r2, r0, #268435456	; 0x10000000
 8021348:	429a      	cmp	r2, r3
 802134a:	d022      	beq.n	8021392 <ai_platform_api_get_network_report+0xde>
 802134c:	2218      	movs	r2, #24
 802134e:	4b6a      	ldr	r3, [pc, #424]	; (80214f8 <ai_platform_api_get_network_report+0x244>)
 8021350:	601a      	str	r2, [r3, #0]
 8021352:	681a      	ldr	r2, [r3, #0]
 8021354:	2a18      	cmp	r2, #24
 8021356:	d04b      	beq.n	80213f0 <ai_platform_api_get_network_report+0x13c>
 8021358:	4b68      	ldr	r3, [pc, #416]	; (80214fc <ai_platform_api_get_network_report+0x248>)
 802135a:	2201      	movs	r2, #1
 802135c:	4619      	mov	r1, r3
 802135e:	601a      	str	r2, [r3, #0]
 8021360:	680b      	ldr	r3, [r1, #0]
 8021362:	2b00      	cmp	r3, #0
 8021364:	d1fc      	bne.n	8021360 <ai_platform_api_get_network_report+0xac>
 8021366:	4b66      	ldr	r3, [pc, #408]	; (8021500 <ai_platform_api_get_network_report+0x24c>)
 8021368:	4966      	ldr	r1, [pc, #408]	; (8021504 <ai_platform_api_get_network_report+0x250>)
 802136a:	4a67      	ldr	r2, [pc, #412]	; (8021508 <ai_platform_api_get_network_report+0x254>)
 802136c:	6019      	str	r1, [r3, #0]
 802136e:	681b      	ldr	r3, [r3, #0]
 8021370:	4293      	cmp	r3, r2
 8021372:	d01c      	beq.n	80213ae <ai_platform_api_get_network_report+0xfa>
 8021374:	e7fe      	b.n	8021374 <ai_platform_api_get_network_report+0xc0>
 8021376:	2201      	movs	r2, #1
 8021378:	4619      	mov	r1, r3
 802137a:	601a      	str	r2, [r3, #0]
 802137c:	680b      	ldr	r3, [r1, #0]
 802137e:	2b00      	cmp	r3, #0
 8021380:	d1fc      	bne.n	802137c <ai_platform_api_get_network_report+0xc8>
 8021382:	4b5c      	ldr	r3, [pc, #368]	; (80214f4 <ai_platform_api_get_network_report+0x240>)
 8021384:	495f      	ldr	r1, [pc, #380]	; (8021504 <ai_platform_api_get_network_report+0x250>)
 8021386:	4a60      	ldr	r2, [pc, #384]	; (8021508 <ai_platform_api_get_network_report+0x254>)
 8021388:	6019      	str	r1, [r3, #0]
 802138a:	681b      	ldr	r3, [r3, #0]
 802138c:	4293      	cmp	r3, r2
 802138e:	d0c8      	beq.n	8021322 <ai_platform_api_get_network_report+0x6e>
 8021390:	e7fe      	b.n	8021390 <ai_platform_api_get_network_report+0xdc>
 8021392:	2301      	movs	r3, #1
 8021394:	f100 0208 	add.w	r2, r0, #8
 8021398:	6083      	str	r3, [r0, #8]
 802139a:	6813      	ldr	r3, [r2, #0]
 802139c:	2b00      	cmp	r3, #0
 802139e:	d1fc      	bne.n	802139a <ai_platform_api_get_network_report+0xe6>
 80213a0:	4a58      	ldr	r2, [pc, #352]	; (8021504 <ai_platform_api_get_network_report+0x250>)
 80213a2:	4b59      	ldr	r3, [pc, #356]	; (8021508 <ai_platform_api_get_network_report+0x254>)
 80213a4:	6002      	str	r2, [r0, #0]
 80213a6:	6802      	ldr	r2, [r0, #0]
 80213a8:	429a      	cmp	r2, r3
 80213aa:	f040 82d7 	bne.w	802195c <ai_platform_api_get_network_report+0x6a8>
 80213ae:	f7ff fc3b 	bl	8020c28 <_ai_platform_release_crc>
 80213b2:	2c00      	cmp	r4, #0
 80213b4:	d0b8      	beq.n	8021328 <ai_platform_api_get_network_report+0x74>
 80213b6:	2300      	movs	r3, #0
 80213b8:	6763      	str	r3, [r4, #116]	; 0x74
 80213ba:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80213bc:	b182      	cbz	r2, 80213e0 <ai_platform_api_get_network_report+0x12c>
 80213be:	2301      	movs	r3, #1
 80213c0:	6763      	str	r3, [r4, #116]	; 0x74
 80213c2:	6913      	ldr	r3, [r2, #16]
 80213c4:	429a      	cmp	r2, r3
 80213c6:	d021      	beq.n	802140c <ai_platform_api_get_network_report+0x158>
 80213c8:	b303      	cbz	r3, 802140c <ai_platform_api_get_network_report+0x158>
 80213ca:	2202      	movs	r2, #2
 80213cc:	e003      	b.n	80213d6 <ai_platform_api_get_network_report+0x122>
 80213ce:	1c50      	adds	r0, r2, #1
 80213d0:	460b      	mov	r3, r1
 80213d2:	b121      	cbz	r1, 80213de <ai_platform_api_get_network_report+0x12a>
 80213d4:	4602      	mov	r2, r0
 80213d6:	6762      	str	r2, [r4, #116]	; 0x74
 80213d8:	6919      	ldr	r1, [r3, #16]
 80213da:	4299      	cmp	r1, r3
 80213dc:	d1f7      	bne.n	80213ce <ai_platform_api_get_network_report+0x11a>
 80213de:	b9aa      	cbnz	r2, 802140c <ai_platform_api_get_network_report+0x158>
 80213e0:	f105 0010 	add.w	r0, r5, #16
 80213e4:	2218      	movs	r2, #24
 80213e6:	2111      	movs	r1, #17
 80213e8:	f001 f8ea 	bl	80225c0 <core_set_error>
 80213ec:	2400      	movs	r4, #0
 80213ee:	e79b      	b.n	8021328 <ai_platform_api_get_network_report+0x74>
 80213f0:	2201      	movs	r2, #1
 80213f2:	4619      	mov	r1, r3
 80213f4:	601a      	str	r2, [r3, #0]
 80213f6:	680b      	ldr	r3, [r1, #0]
 80213f8:	2b00      	cmp	r3, #0
 80213fa:	d1fc      	bne.n	80213f6 <ai_platform_api_get_network_report+0x142>
 80213fc:	4b3d      	ldr	r3, [pc, #244]	; (80214f4 <ai_platform_api_get_network_report+0x240>)
 80213fe:	4941      	ldr	r1, [pc, #260]	; (8021504 <ai_platform_api_get_network_report+0x250>)
 8021400:	4a41      	ldr	r2, [pc, #260]	; (8021508 <ai_platform_api_get_network_report+0x254>)
 8021402:	6019      	str	r1, [r3, #0]
 8021404:	681b      	ldr	r3, [r3, #0]
 8021406:	4293      	cmp	r3, r2
 8021408:	d0d1      	beq.n	80213ae <ai_platform_api_get_network_report+0xfa>
 802140a:	e7fe      	b.n	802140a <ai_platform_api_get_network_report+0x156>
 802140c:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
 802140e:	2b00      	cmp	r3, #0
 8021410:	d061      	beq.n	80214d6 <ai_platform_api_get_network_report+0x222>
 8021412:	f8d5 8030 	ldr.w	r8, [r5, #48]	; 0x30
 8021416:	f1b8 0f00 	cmp.w	r8, #0
 802141a:	d05c      	beq.n	80214d6 <ai_platform_api_get_network_report+0x222>
 802141c:	f8b8 3000 	ldrh.w	r3, [r8]
 8021420:	2b00      	cmp	r3, #0
 8021422:	d058      	beq.n	80214d6 <ai_platform_api_get_network_report+0x222>
 8021424:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8021428:	2b00      	cmp	r3, #0
 802142a:	d054      	beq.n	80214d6 <ai_platform_api_get_network_report+0x222>
 802142c:	681e      	ldr	r6, [r3, #0]
 802142e:	2e00      	cmp	r6, #0
 8021430:	d051      	beq.n	80214d6 <ai_platform_api_get_network_report+0x222>
 8021432:	2100      	movs	r1, #0
 8021434:	9402      	str	r4, [sp, #8]
 8021436:	4689      	mov	r9, r1
 8021438:	468b      	mov	fp, r1
 802143a:	e024      	b.n	8021486 <ai_platform_api_get_network_report+0x1d2>
 802143c:	69b3      	ldr	r3, [r6, #24]
 802143e:	2000      	movs	r0, #0
 8021440:	f04f 0601 	mov.w	r6, #1
 8021444:	685b      	ldr	r3, [r3, #4]
 8021446:	753e      	strb	r6, [r7, #20]
 8021448:	697e      	ldr	r6, [r7, #20]
 802144a:	613b      	str	r3, [r7, #16]
 802144c:	9b00      	ldr	r3, [sp, #0]
 802144e:	e9c7 2100 	strd	r2, r1, [r7]
 8021452:	f363 261f 	bfi	r6, r3, #8, #24
 8021456:	2300      	movs	r3, #0
 8021458:	60fb      	str	r3, [r7, #12]
 802145a:	9b01      	ldr	r3, [sp, #4]
 802145c:	60b8      	str	r0, [r7, #8]
 802145e:	e9c7 6305 	strd	r6, r3, [r7, #20]
 8021462:	f8b8 1000 	ldrh.w	r1, [r8]
 8021466:	f109 0401 	add.w	r4, r9, #1
 802146a:	428c      	cmp	r4, r1
 802146c:	46a1      	mov	r9, r4
 802146e:	b2a3      	uxth	r3, r4
 8021470:	d24c      	bcs.n	802150c <ai_platform_api_get_network_report+0x258>
 8021472:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8021476:	2900      	cmp	r1, #0
 8021478:	d048      	beq.n	802150c <ai_platform_api_get_network_report+0x258>
 802147a:	f851 6024 	ldr.w	r6, [r1, r4, lsl #2]
 802147e:	f10b 0b1c 	add.w	fp, fp, #28
 8021482:	2e00      	cmp	r6, #0
 8021484:	d042      	beq.n	802150c <ai_platform_api_get_network_report+0x258>
 8021486:	68b3      	ldr	r3, [r6, #8]
 8021488:	f8d8 0008 	ldr.w	r0, [r8, #8]
 802148c:	69b1      	ldr	r1, [r6, #24]
 802148e:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8021492:	9300      	str	r3, [sp, #0]
 8021494:	68f3      	ldr	r3, [r6, #12]
 8021496:	6847      	ldr	r7, [r0, #4]
 8021498:	f8d0 a008 	ldr.w	sl, [r0, #8]
 802149c:	6808      	ldr	r0, [r1, #0]
 802149e:	9301      	str	r3, [sp, #4]
 80214a0:	f002 fa50 	bl	8023944 <ai_array_to_buffer_fmt>
 80214a4:	ea4f 04c9 	mov.w	r4, r9, lsl #3
 80214a8:	69b3      	ldr	r3, [r6, #24]
 80214aa:	4602      	mov	r2, r0
 80214ac:	eb0a 0004 	add.w	r0, sl, r4
 80214b0:	445f      	add	r7, fp
 80214b2:	6899      	ldr	r1, [r3, #8]
 80214b4:	2800      	cmp	r0, #0
 80214b6:	d0c2      	beq.n	802143e <ai_platform_api_get_network_report+0x18a>
 80214b8:	2300      	movs	r3, #0
 80214ba:	f84a 3039 	str.w	r3, [sl, r9, lsl #3]
 80214be:	6833      	ldr	r3, [r6, #0]
 80214c0:	6043      	str	r3, [r0, #4]
 80214c2:	2b00      	cmp	r3, #0
 80214c4:	d0ba      	beq.n	802143c <ai_platform_api_get_network_report+0x188>
 80214c6:	885b      	ldrh	r3, [r3, #2]
 80214c8:	2b00      	cmp	r3, #0
 80214ca:	d0b7      	beq.n	802143c <ai_platform_api_get_network_report+0x188>
 80214cc:	2301      	movs	r3, #1
 80214ce:	f84a 3004 	str.w	r3, [sl, r4]
 80214d2:	69b3      	ldr	r3, [r6, #24]
 80214d4:	e7b4      	b.n	8021440 <ai_platform_api_get_network_report+0x18c>
 80214d6:	2600      	movs	r6, #0
 80214d8:	f105 0010 	add.w	r0, r5, #16
 80214dc:	8626      	strh	r6, [r4, #48]	; 0x30
 80214de:	2218      	movs	r2, #24
 80214e0:	2112      	movs	r1, #18
 80214e2:	f001 f86d 	bl	80225c0 <core_set_error>
 80214e6:	4634      	mov	r4, r6
 80214e8:	e71e      	b.n	8021328 <ai_platform_api_get_network_report+0x74>
 80214ea:	bf00      	nop
 80214ec:	a1c00100 	.word	0xa1c00100
 80214f0:	e0002000 	.word	0xe0002000
 80214f4:	40023000 	.word	0x40023000
 80214f8:	40023008 	.word	0x40023008
 80214fc:	50023008 	.word	0x50023008
 8021500:	50023000 	.word	0x50023000
 8021504:	f407a5c2 	.word	0xf407a5c2
 8021508:	b5e8b5cd 	.word	0xb5e8b5cd
 802150c:	9c02      	ldr	r4, [sp, #8]
 802150e:	2b00      	cmp	r3, #0
 8021510:	d0e1      	beq.n	80214d6 <ai_platform_api_get_network_report+0x222>
 8021512:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8021516:	6852      	ldr	r2, [r2, #4]
 8021518:	8623      	strh	r3, [r4, #48]	; 0x30
 802151a:	6362      	str	r2, [r4, #52]	; 0x34
 802151c:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
 802151e:	2b01      	cmp	r3, #1
 8021520:	f240 8206 	bls.w	8021930 <ai_platform_api_get_network_report+0x67c>
 8021524:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8021526:	f04f 0800 	mov.w	r8, #0
 802152a:	4689      	mov	r9, r1
 802152c:	f101 030c 	add.w	r3, r1, #12
 8021530:	9300      	str	r3, [sp, #0]
 8021532:	9a00      	ldr	r2, [sp, #0]
 8021534:	fa1f f388 	uxth.w	r3, r8
 8021538:	2a00      	cmp	r2, #0
 802153a:	d04a      	beq.n	80215d2 <ai_platform_api_get_network_report+0x31e>
 802153c:	f8b9 200c 	ldrh.w	r2, [r9, #12]
 8021540:	4590      	cmp	r8, r2
 8021542:	d246      	bcs.n	80215d2 <ai_platform_api_get_network_report+0x31e>
 8021544:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8021548:	2a00      	cmp	r2, #0
 802154a:	d042      	beq.n	80215d2 <ai_platform_api_get_network_report+0x31e>
 802154c:	f852 6028 	ldr.w	r6, [r2, r8, lsl #2]
 8021550:	2e00      	cmp	r6, #0
 8021552:	d03e      	beq.n	80215d2 <ai_platform_api_get_network_report+0x31e>
 8021554:	201c      	movs	r0, #28
 8021556:	68b3      	ldr	r3, [r6, #8]
 8021558:	69b1      	ldr	r1, [r6, #24]
 802155a:	f3c3 2317 	ubfx	r3, r3, #8, #24
 802155e:	f8d9 2014 	ldr.w	r2, [r9, #20]
 8021562:	9301      	str	r3, [sp, #4]
 8021564:	68f3      	ldr	r3, [r6, #12]
 8021566:	fb00 fa08 	mul.w	sl, r0, r8
 802156a:	6808      	ldr	r0, [r1, #0]
 802156c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8021570:	6897      	ldr	r7, [r2, #8]
 8021572:	f8d2 b004 	ldr.w	fp, [r2, #4]
 8021576:	9302      	str	r3, [sp, #8]
 8021578:	9103      	str	r1, [sp, #12]
 802157a:	f002 f9e3 	bl	8023944 <ai_array_to_buffer_fmt>
 802157e:	9903      	ldr	r1, [sp, #12]
 8021580:	69b2      	ldr	r2, [r6, #24]
 8021582:	4684      	mov	ip, r0
 8021584:	1878      	adds	r0, r7, r1
 8021586:	eb0b 030a 	add.w	r3, fp, sl
 802158a:	f8d2 e008 	ldr.w	lr, [r2, #8]
 802158e:	b150      	cbz	r0, 80215a6 <ai_platform_api_get_network_report+0x2f2>
 8021590:	2200      	movs	r2, #0
 8021592:	f847 2038 	str.w	r2, [r7, r8, lsl #3]
 8021596:	6832      	ldr	r2, [r6, #0]
 8021598:	6042      	str	r2, [r0, #4]
 802159a:	b11a      	cbz	r2, 80215a4 <ai_platform_api_get_network_report+0x2f0>
 802159c:	8852      	ldrh	r2, [r2, #2]
 802159e:	2a00      	cmp	r2, #0
 80215a0:	f040 81d8 	bne.w	8021954 <ai_platform_api_get_network_report+0x6a0>
 80215a4:	69b2      	ldr	r2, [r6, #24]
 80215a6:	2000      	movs	r0, #0
 80215a8:	6851      	ldr	r1, [r2, #4]
 80215aa:	f04f 0201 	mov.w	r2, #1
 80215ae:	f84b c00a 	str.w	ip, [fp, sl]
 80215b2:	751a      	strb	r2, [r3, #20]
 80215b4:	695a      	ldr	r2, [r3, #20]
 80215b6:	6119      	str	r1, [r3, #16]
 80215b8:	9901      	ldr	r1, [sp, #4]
 80215ba:	e9c3 e001 	strd	lr, r0, [r3, #4]
 80215be:	f361 221f 	bfi	r2, r1, #8, #24
 80215c2:	2100      	movs	r1, #0
 80215c4:	60d9      	str	r1, [r3, #12]
 80215c6:	9902      	ldr	r1, [sp, #8]
 80215c8:	f108 0801 	add.w	r8, r8, #1
 80215cc:	6199      	str	r1, [r3, #24]
 80215ce:	615a      	str	r2, [r3, #20]
 80215d0:	e7af      	b.n	8021532 <ai_platform_api_get_network_report+0x27e>
 80215d2:	2b00      	cmp	r3, #0
 80215d4:	f000 81ad 	beq.w	8021932 <ai_platform_api_get_network_report+0x67e>
 80215d8:	9a00      	ldr	r2, [sp, #0]
 80215da:	f105 0924 	add.w	r9, r5, #36	; 0x24
 80215de:	6892      	ldr	r2, [r2, #8]
 80215e0:	4648      	mov	r0, r9
 80215e2:	6852      	ldr	r2, [r2, #4]
 80215e4:	8663      	strh	r3, [r4, #50]	; 0x32
 80215e6:	63a2      	str	r2, [r4, #56]	; 0x38
 80215e8:	f7ff fb00 	bl	8020bec <ai_buffer_array_sane>
 80215ec:	4606      	mov	r6, r0
 80215ee:	b938      	cbnz	r0, 8021600 <ai_platform_api_get_network_report+0x34c>
 80215f0:	4648      	mov	r0, r9
 80215f2:	f7ff fafb 	bl	8020bec <ai_buffer_array_sane>
 80215f6:	b118      	cbz	r0, 8021600 <ai_platform_api_get_network_report+0x34c>
 80215f8:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
 80215fa:	2b00      	cmp	r3, #0
 80215fc:	f040 81a2 	bne.w	8021944 <ai_platform_api_get_network_report+0x690>
 8021600:	f105 081c 	add.w	r8, r5, #28
 8021604:	4640      	mov	r0, r8
 8021606:	f7ff faf1 	bl	8020bec <ai_buffer_array_sane>
 802160a:	4606      	mov	r6, r0
 802160c:	b928      	cbnz	r0, 802161a <ai_platform_api_get_network_report+0x366>
 802160e:	4640      	mov	r0, r8
 8021610:	f7ff faec 	bl	8020bec <ai_buffer_array_sane>
 8021614:	b108      	cbz	r0, 802161a <ai_platform_api_get_network_report+0x366>
 8021616:	8beb      	ldrh	r3, [r5, #30]
 8021618:	bb13      	cbnz	r3, 8021660 <ai_platform_api_get_network_report+0x3ac>
 802161a:	686b      	ldr	r3, [r5, #4]
 802161c:	4a7e      	ldr	r2, [pc, #504]	; (8021818 <ai_platform_api_get_network_report+0x564>)
 802161e:	67a3      	str	r3, [r4, #120]	; 0x78
 8021620:	6813      	ldr	r3, [r2, #0]
 8021622:	f023 0301 	bic.w	r3, r3, #1
 8021626:	6013      	str	r3, [r2, #0]
 8021628:	f7ff fafc 	bl	8020c24 <_ai_platform_acquire_crc>
 802162c:	4b7b      	ldr	r3, [pc, #492]	; (802181c <ai_platform_api_get_network_report+0x568>)
 802162e:	f020 5280 	bic.w	r2, r0, #268435456	; 0x10000000
 8021632:	429a      	cmp	r2, r3
 8021634:	d01c      	beq.n	8021670 <ai_platform_api_get_network_report+0x3bc>
 8021636:	2218      	movs	r2, #24
 8021638:	4b79      	ldr	r3, [pc, #484]	; (8021820 <ai_platform_api_get_network_report+0x56c>)
 802163a:	601a      	str	r2, [r3, #0]
 802163c:	681a      	ldr	r2, [r3, #0]
 802163e:	2a18      	cmp	r2, #24
 8021640:	d048      	beq.n	80216d4 <ai_platform_api_get_network_report+0x420>
 8021642:	4b78      	ldr	r3, [pc, #480]	; (8021824 <ai_platform_api_get_network_report+0x570>)
 8021644:	2201      	movs	r2, #1
 8021646:	4619      	mov	r1, r3
 8021648:	601a      	str	r2, [r3, #0]
 802164a:	680b      	ldr	r3, [r1, #0]
 802164c:	2b00      	cmp	r3, #0
 802164e:	d1fc      	bne.n	802164a <ai_platform_api_get_network_report+0x396>
 8021650:	4b75      	ldr	r3, [pc, #468]	; (8021828 <ai_platform_api_get_network_report+0x574>)
 8021652:	4976      	ldr	r1, [pc, #472]	; (802182c <ai_platform_api_get_network_report+0x578>)
 8021654:	4a76      	ldr	r2, [pc, #472]	; (8021830 <ai_platform_api_get_network_report+0x57c>)
 8021656:	6019      	str	r1, [r3, #0]
 8021658:	681b      	ldr	r3, [r3, #0]
 802165a:	4293      	cmp	r3, r2
 802165c:	d015      	beq.n	802168a <ai_platform_api_get_network_report+0x3d6>
 802165e:	e7fe      	b.n	802165e <ai_platform_api_get_network_report+0x3aa>
 8021660:	f105 0010 	add.w	r0, r5, #16
 8021664:	2212      	movs	r2, #18
 8021666:	2111      	movs	r1, #17
 8021668:	f000 ffaa 	bl	80225c0 <core_set_error>
 802166c:	4634      	mov	r4, r6
 802166e:	e65b      	b.n	8021328 <ai_platform_api_get_network_report+0x74>
 8021670:	2301      	movs	r3, #1
 8021672:	6083      	str	r3, [r0, #8]
 8021674:	f100 0308 	add.w	r3, r0, #8
 8021678:	681a      	ldr	r2, [r3, #0]
 802167a:	2a00      	cmp	r2, #0
 802167c:	d1fc      	bne.n	8021678 <ai_platform_api_get_network_report+0x3c4>
 802167e:	4a6b      	ldr	r2, [pc, #428]	; (802182c <ai_platform_api_get_network_report+0x578>)
 8021680:	4b6b      	ldr	r3, [pc, #428]	; (8021830 <ai_platform_api_get_network_report+0x57c>)
 8021682:	6002      	str	r2, [r0, #0]
 8021684:	6802      	ldr	r2, [r0, #0]
 8021686:	429a      	cmp	r2, r3
 8021688:	d174      	bne.n	8021774 <ai_platform_api_get_network_report+0x4c0>
 802168a:	f7ff facd 	bl	8020c28 <_ai_platform_release_crc>
 802168e:	4b69      	ldr	r3, [pc, #420]	; (8021834 <ai_platform_api_get_network_report+0x580>)
 8021690:	4a61      	ldr	r2, [pc, #388]	; (8021818 <ai_platform_api_get_network_report+0x564>)
 8021692:	6123      	str	r3, [r4, #16]
 8021694:	6813      	ldr	r3, [r2, #0]
 8021696:	f023 0301 	bic.w	r3, r3, #1
 802169a:	6013      	str	r3, [r2, #0]
 802169c:	f7ff fac2 	bl	8020c24 <_ai_platform_acquire_crc>
 80216a0:	4b5e      	ldr	r3, [pc, #376]	; (802181c <ai_platform_api_get_network_report+0x568>)
 80216a2:	f020 5280 	bic.w	r2, r0, #268435456	; 0x10000000
 80216a6:	429a      	cmp	r2, r3
 80216a8:	d030      	beq.n	802170c <ai_platform_api_get_network_report+0x458>
 80216aa:	2218      	movs	r2, #24
 80216ac:	4b5c      	ldr	r3, [pc, #368]	; (8021820 <ai_platform_api_get_network_report+0x56c>)
 80216ae:	601a      	str	r2, [r3, #0]
 80216b0:	681a      	ldr	r2, [r3, #0]
 80216b2:	2a18      	cmp	r2, #24
 80216b4:	d01c      	beq.n	80216f0 <ai_platform_api_get_network_report+0x43c>
 80216b6:	4b5b      	ldr	r3, [pc, #364]	; (8021824 <ai_platform_api_get_network_report+0x570>)
 80216b8:	2201      	movs	r2, #1
 80216ba:	4619      	mov	r1, r3
 80216bc:	601a      	str	r2, [r3, #0]
 80216be:	680b      	ldr	r3, [r1, #0]
 80216c0:	2b00      	cmp	r3, #0
 80216c2:	d1fc      	bne.n	80216be <ai_platform_api_get_network_report+0x40a>
 80216c4:	4b58      	ldr	r3, [pc, #352]	; (8021828 <ai_platform_api_get_network_report+0x574>)
 80216c6:	4959      	ldr	r1, [pc, #356]	; (802182c <ai_platform_api_get_network_report+0x578>)
 80216c8:	4a59      	ldr	r2, [pc, #356]	; (8021830 <ai_platform_api_get_network_report+0x57c>)
 80216ca:	6019      	str	r1, [r3, #0]
 80216cc:	681b      	ldr	r3, [r3, #0]
 80216ce:	4293      	cmp	r3, r2
 80216d0:	d029      	beq.n	8021726 <ai_platform_api_get_network_report+0x472>
 80216d2:	e7fe      	b.n	80216d2 <ai_platform_api_get_network_report+0x41e>
 80216d4:	2201      	movs	r2, #1
 80216d6:	4619      	mov	r1, r3
 80216d8:	601a      	str	r2, [r3, #0]
 80216da:	680b      	ldr	r3, [r1, #0]
 80216dc:	2b00      	cmp	r3, #0
 80216de:	d1fc      	bne.n	80216da <ai_platform_api_get_network_report+0x426>
 80216e0:	4b4e      	ldr	r3, [pc, #312]	; (802181c <ai_platform_api_get_network_report+0x568>)
 80216e2:	4952      	ldr	r1, [pc, #328]	; (802182c <ai_platform_api_get_network_report+0x578>)
 80216e4:	4a52      	ldr	r2, [pc, #328]	; (8021830 <ai_platform_api_get_network_report+0x57c>)
 80216e6:	6019      	str	r1, [r3, #0]
 80216e8:	681b      	ldr	r3, [r3, #0]
 80216ea:	4293      	cmp	r3, r2
 80216ec:	d0cd      	beq.n	802168a <ai_platform_api_get_network_report+0x3d6>
 80216ee:	e7fe      	b.n	80216ee <ai_platform_api_get_network_report+0x43a>
 80216f0:	2201      	movs	r2, #1
 80216f2:	4619      	mov	r1, r3
 80216f4:	601a      	str	r2, [r3, #0]
 80216f6:	680b      	ldr	r3, [r1, #0]
 80216f8:	2b00      	cmp	r3, #0
 80216fa:	d1fc      	bne.n	80216f6 <ai_platform_api_get_network_report+0x442>
 80216fc:	4b47      	ldr	r3, [pc, #284]	; (802181c <ai_platform_api_get_network_report+0x568>)
 80216fe:	494b      	ldr	r1, [pc, #300]	; (802182c <ai_platform_api_get_network_report+0x578>)
 8021700:	4a4b      	ldr	r2, [pc, #300]	; (8021830 <ai_platform_api_get_network_report+0x57c>)
 8021702:	6019      	str	r1, [r3, #0]
 8021704:	681b      	ldr	r3, [r3, #0]
 8021706:	4293      	cmp	r3, r2
 8021708:	d00d      	beq.n	8021726 <ai_platform_api_get_network_report+0x472>
 802170a:	e7fe      	b.n	802170a <ai_platform_api_get_network_report+0x456>
 802170c:	2301      	movs	r3, #1
 802170e:	6083      	str	r3, [r0, #8]
 8021710:	f100 0308 	add.w	r3, r0, #8
 8021714:	681a      	ldr	r2, [r3, #0]
 8021716:	2a00      	cmp	r2, #0
 8021718:	d1fc      	bne.n	8021714 <ai_platform_api_get_network_report+0x460>
 802171a:	4a44      	ldr	r2, [pc, #272]	; (802182c <ai_platform_api_get_network_report+0x578>)
 802171c:	4b44      	ldr	r3, [pc, #272]	; (8021830 <ai_platform_api_get_network_report+0x57c>)
 802171e:	6002      	str	r2, [r0, #0]
 8021720:	6802      	ldr	r2, [r0, #0]
 8021722:	429a      	cmp	r2, r3
 8021724:	d125      	bne.n	8021772 <ai_platform_api_get_network_report+0x4be>
 8021726:	f7ff fa7f 	bl	8020c28 <_ai_platform_release_crc>
 802172a:	f240 1307 	movw	r3, #263	; 0x107
 802172e:	4a3a      	ldr	r2, [pc, #232]	; (8021818 <ai_platform_api_get_network_report+0x564>)
 8021730:	6163      	str	r3, [r4, #20]
 8021732:	6813      	ldr	r3, [r2, #0]
 8021734:	f023 0301 	bic.w	r3, r3, #1
 8021738:	6013      	str	r3, [r2, #0]
 802173a:	f7ff fa73 	bl	8020c24 <_ai_platform_acquire_crc>
 802173e:	4b37      	ldr	r3, [pc, #220]	; (802181c <ai_platform_api_get_network_report+0x568>)
 8021740:	f020 5280 	bic.w	r2, r0, #268435456	; 0x10000000
 8021744:	429a      	cmp	r2, r3
 8021746:	d016      	beq.n	8021776 <ai_platform_api_get_network_report+0x4c2>
 8021748:	2218      	movs	r2, #24
 802174a:	4b35      	ldr	r3, [pc, #212]	; (8021820 <ai_platform_api_get_network_report+0x56c>)
 802174c:	601a      	str	r2, [r3, #0]
 802174e:	681a      	ldr	r2, [r3, #0]
 8021750:	2a18      	cmp	r2, #24
 8021752:	d044      	beq.n	80217de <ai_platform_api_get_network_report+0x52a>
 8021754:	4b33      	ldr	r3, [pc, #204]	; (8021824 <ai_platform_api_get_network_report+0x570>)
 8021756:	2201      	movs	r2, #1
 8021758:	4619      	mov	r1, r3
 802175a:	601a      	str	r2, [r3, #0]
 802175c:	680b      	ldr	r3, [r1, #0]
 802175e:	2b00      	cmp	r3, #0
 8021760:	d1fc      	bne.n	802175c <ai_platform_api_get_network_report+0x4a8>
 8021762:	4b31      	ldr	r3, [pc, #196]	; (8021828 <ai_platform_api_get_network_report+0x574>)
 8021764:	4931      	ldr	r1, [pc, #196]	; (802182c <ai_platform_api_get_network_report+0x578>)
 8021766:	4a32      	ldr	r2, [pc, #200]	; (8021830 <ai_platform_api_get_network_report+0x57c>)
 8021768:	6019      	str	r1, [r3, #0]
 802176a:	681b      	ldr	r3, [r3, #0]
 802176c:	4293      	cmp	r3, r2
 802176e:	d010      	beq.n	8021792 <ai_platform_api_get_network_report+0x4de>
 8021770:	e7fe      	b.n	8021770 <ai_platform_api_get_network_report+0x4bc>
 8021772:	e7fe      	b.n	8021772 <ai_platform_api_get_network_report+0x4be>
 8021774:	e7fe      	b.n	8021774 <ai_platform_api_get_network_report+0x4c0>
 8021776:	2301      	movs	r3, #1
 8021778:	6083      	str	r3, [r0, #8]
 802177a:	f100 0308 	add.w	r3, r0, #8
 802177e:	681a      	ldr	r2, [r3, #0]
 8021780:	2a00      	cmp	r2, #0
 8021782:	d1fc      	bne.n	802177e <ai_platform_api_get_network_report+0x4ca>
 8021784:	4a29      	ldr	r2, [pc, #164]	; (802182c <ai_platform_api_get_network_report+0x578>)
 8021786:	4b2a      	ldr	r3, [pc, #168]	; (8021830 <ai_platform_api_get_network_report+0x57c>)
 8021788:	6002      	str	r2, [r0, #0]
 802178a:	6802      	ldr	r2, [r0, #0]
 802178c:	429a      	cmp	r2, r3
 802178e:	f040 809a 	bne.w	80218c6 <ai_platform_api_get_network_report+0x612>
 8021792:	f7ff fa49 	bl	8020c28 <_ai_platform_release_crc>
 8021796:	f240 2301 	movw	r3, #513	; 0x201
 802179a:	4a1f      	ldr	r2, [pc, #124]	; (8021818 <ai_platform_api_get_network_report+0x564>)
 802179c:	6263      	str	r3, [r4, #36]	; 0x24
 802179e:	6813      	ldr	r3, [r2, #0]
 80217a0:	f023 0301 	bic.w	r3, r3, #1
 80217a4:	6013      	str	r3, [r2, #0]
 80217a6:	f7ff fa3d 	bl	8020c24 <_ai_platform_acquire_crc>
 80217aa:	4b1c      	ldr	r3, [pc, #112]	; (802181c <ai_platform_api_get_network_report+0x568>)
 80217ac:	f020 5280 	bic.w	r2, r0, #268435456	; 0x10000000
 80217b0:	429a      	cmp	r2, r3
 80217b2:	d041      	beq.n	8021838 <ai_platform_api_get_network_report+0x584>
 80217b4:	2218      	movs	r2, #24
 80217b6:	4b1a      	ldr	r3, [pc, #104]	; (8021820 <ai_platform_api_get_network_report+0x56c>)
 80217b8:	601a      	str	r2, [r3, #0]
 80217ba:	681a      	ldr	r2, [r3, #0]
 80217bc:	2a18      	cmp	r2, #24
 80217be:	d01c      	beq.n	80217fa <ai_platform_api_get_network_report+0x546>
 80217c0:	4b18      	ldr	r3, [pc, #96]	; (8021824 <ai_platform_api_get_network_report+0x570>)
 80217c2:	2201      	movs	r2, #1
 80217c4:	4619      	mov	r1, r3
 80217c6:	601a      	str	r2, [r3, #0]
 80217c8:	680b      	ldr	r3, [r1, #0]
 80217ca:	2b00      	cmp	r3, #0
 80217cc:	d1fc      	bne.n	80217c8 <ai_platform_api_get_network_report+0x514>
 80217ce:	4b16      	ldr	r3, [pc, #88]	; (8021828 <ai_platform_api_get_network_report+0x574>)
 80217d0:	4916      	ldr	r1, [pc, #88]	; (802182c <ai_platform_api_get_network_report+0x578>)
 80217d2:	4a17      	ldr	r2, [pc, #92]	; (8021830 <ai_platform_api_get_network_report+0x57c>)
 80217d4:	6019      	str	r1, [r3, #0]
 80217d6:	681b      	ldr	r3, [r3, #0]
 80217d8:	4293      	cmp	r3, r2
 80217da:	d03a      	beq.n	8021852 <ai_platform_api_get_network_report+0x59e>
 80217dc:	e7fe      	b.n	80217dc <ai_platform_api_get_network_report+0x528>
 80217de:	2201      	movs	r2, #1
 80217e0:	4619      	mov	r1, r3
 80217e2:	601a      	str	r2, [r3, #0]
 80217e4:	680b      	ldr	r3, [r1, #0]
 80217e6:	2b00      	cmp	r3, #0
 80217e8:	d1fc      	bne.n	80217e4 <ai_platform_api_get_network_report+0x530>
 80217ea:	4b0c      	ldr	r3, [pc, #48]	; (802181c <ai_platform_api_get_network_report+0x568>)
 80217ec:	490f      	ldr	r1, [pc, #60]	; (802182c <ai_platform_api_get_network_report+0x578>)
 80217ee:	4a10      	ldr	r2, [pc, #64]	; (8021830 <ai_platform_api_get_network_report+0x57c>)
 80217f0:	6019      	str	r1, [r3, #0]
 80217f2:	681b      	ldr	r3, [r3, #0]
 80217f4:	4293      	cmp	r3, r2
 80217f6:	d0cc      	beq.n	8021792 <ai_platform_api_get_network_report+0x4de>
 80217f8:	e7fe      	b.n	80217f8 <ai_platform_api_get_network_report+0x544>
 80217fa:	2201      	movs	r2, #1
 80217fc:	4619      	mov	r1, r3
 80217fe:	601a      	str	r2, [r3, #0]
 8021800:	680b      	ldr	r3, [r1, #0]
 8021802:	2b00      	cmp	r3, #0
 8021804:	d1fc      	bne.n	8021800 <ai_platform_api_get_network_report+0x54c>
 8021806:	4b05      	ldr	r3, [pc, #20]	; (802181c <ai_platform_api_get_network_report+0x568>)
 8021808:	4908      	ldr	r1, [pc, #32]	; (802182c <ai_platform_api_get_network_report+0x578>)
 802180a:	4a09      	ldr	r2, [pc, #36]	; (8021830 <ai_platform_api_get_network_report+0x57c>)
 802180c:	6019      	str	r1, [r3, #0]
 802180e:	681b      	ldr	r3, [r3, #0]
 8021810:	4293      	cmp	r3, r2
 8021812:	d01e      	beq.n	8021852 <ai_platform_api_get_network_report+0x59e>
 8021814:	e7fe      	b.n	8021814 <ai_platform_api_get_network_report+0x560>
 8021816:	bf00      	nop
 8021818:	e0002000 	.word	0xe0002000
 802181c:	40023000 	.word	0x40023000
 8021820:	40023008 	.word	0x40023008
 8021824:	50023008 	.word	0x50023008
 8021828:	50023000 	.word	0x50023000
 802182c:	f407a5c2 	.word	0xf407a5c2
 8021830:	b5e8b5cd 	.word	0xb5e8b5cd
 8021834:	08035da8 	.word	0x08035da8
 8021838:	2301      	movs	r3, #1
 802183a:	6083      	str	r3, [r0, #8]
 802183c:	f100 0308 	add.w	r3, r0, #8
 8021840:	681a      	ldr	r2, [r3, #0]
 8021842:	2a00      	cmp	r2, #0
 8021844:	d1fc      	bne.n	8021840 <ai_platform_api_get_network_report+0x58c>
 8021846:	4a46      	ldr	r2, [pc, #280]	; (8021960 <ai_platform_api_get_network_report+0x6ac>)
 8021848:	4b46      	ldr	r3, [pc, #280]	; (8021964 <ai_platform_api_get_network_report+0x6b0>)
 802184a:	6002      	str	r2, [r0, #0]
 802184c:	6802      	ldr	r2, [r0, #0]
 802184e:	429a      	cmp	r2, r3
 8021850:	d138      	bne.n	80218c4 <ai_platform_api_get_network_report+0x610>
 8021852:	f7ff f9e9 	bl	8020c28 <_ai_platform_release_crc>
 8021856:	f240 5301 	movw	r3, #1281	; 0x501
 802185a:	62a3      	str	r3, [r4, #40]	; 0x28
 802185c:	6c68      	ldr	r0, [r5, #68]	; 0x44
 802185e:	f002 f84b 	bl	80238f8 <ai_platform_version_get>
 8021862:	4b41      	ldr	r3, [pc, #260]	; (8021968 <ai_platform_api_get_network_report+0x6b4>)
 8021864:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8021866:	6220      	str	r0, [r4, #32]
 8021868:	429a      	cmp	r2, r3
 802186a:	d047      	beq.n	80218fc <ai_platform_api_get_network_report+0x648>
 802186c:	2200      	movs	r2, #0
 802186e:	f240 4101 	movw	r1, #1025	; 0x401
 8021872:	f104 063c 	add.w	r6, r4, #60	; 0x3c
 8021876:	f104 0758 	add.w	r7, r4, #88	; 0x58
 802187a:	46b6      	mov	lr, r6
 802187c:	46bc      	mov	ip, r7
 802187e:	e9c4 2210 	strd	r2, r2, [r4, #64]	; 0x40
 8021882:	e9c4 2212 	strd	r2, r2, [r4, #72]	; 0x48
 8021886:	f8df b0e8 	ldr.w	fp, [pc, #232]	; 8021970 <ai_platform_api_get_network_report+0x6bc>
 802188a:	f10d 0a10 	add.w	sl, sp, #16
 802188e:	4b37      	ldr	r3, [pc, #220]	; (802196c <ai_platform_api_get_network_report+0x6b8>)
 8021890:	6521      	str	r1, [r4, #80]	; 0x50
 8021892:	f8c4 a054 	str.w	sl, [r4, #84]	; 0x54
 8021896:	f8c4 b03c 	str.w	fp, [r4, #60]	; 0x3c
 802189a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 802189c:	e88a 000f 	stmia.w	sl, {r0, r1, r2, r3}
 80218a0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80218a4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80218a8:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 80218ac:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 80218b0:	4648      	mov	r0, r9
 80218b2:	f7ff f99b 	bl	8020bec <ai_buffer_array_sane>
 80218b6:	b9a0      	cbnz	r0, 80218e2 <ai_platform_api_get_network_report+0x62e>
 80218b8:	4640      	mov	r0, r8
 80218ba:	f7ff f997 	bl	8020bec <ai_buffer_array_sane>
 80218be:	b918      	cbnz	r0, 80218c8 <ai_platform_api_get_network_report+0x614>
 80218c0:	2401      	movs	r4, #1
 80218c2:	e531      	b.n	8021328 <ai_platform_api_get_network_report+0x74>
 80218c4:	e7fe      	b.n	80218c4 <ai_platform_api_get_network_report+0x610>
 80218c6:	e7fe      	b.n	80218c6 <ai_platform_api_get_network_report+0x612>
 80218c8:	4640      	mov	r0, r8
 80218ca:	f7ff f98f 	bl	8020bec <ai_buffer_array_sane>
 80218ce:	b318      	cbz	r0, 8021918 <ai_platform_api_get_network_report+0x664>
 80218d0:	6a2d      	ldr	r5, [r5, #32]
 80218d2:	2401      	movs	r4, #1
 80218d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80218d6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80218d8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80218dc:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 80218e0:	e522      	b.n	8021328 <ai_platform_api_get_network_report+0x74>
 80218e2:	4648      	mov	r0, r9
 80218e4:	f7ff f982 	bl	8020bec <ai_buffer_array_sane>
 80218e8:	b1f8      	cbz	r0, 802192a <ai_platform_api_get_network_report+0x676>
 80218ea:	463c      	mov	r4, r7
 80218ec:	6aaf      	ldr	r7, [r5, #40]	; 0x28
 80218ee:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80218f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80218f2:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 80218f6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80218fa:	e7dd      	b.n	80218b8 <ai_platform_api_get_network_report+0x604>
 80218fc:	f104 0348 	add.w	r3, r4, #72	; 0x48
 8021900:	e899 0003 	ldmia.w	r9, {r0, r1}
 8021904:	e883 0003 	stmia.w	r3, {r0, r1}
 8021908:	f104 0340 	add.w	r3, r4, #64	; 0x40
 802190c:	e898 0003 	ldmia.w	r8, {r0, r1}
 8021910:	2401      	movs	r4, #1
 8021912:	e883 0003 	stmia.w	r3, {r0, r1}
 8021916:	e507      	b.n	8021328 <ai_platform_api_get_network_report+0x74>
 8021918:	4605      	mov	r5, r0
 802191a:	4634      	mov	r4, r6
 802191c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 802191e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8021920:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8021924:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8021928:	deff      	udf	#255	; 0xff
 802192a:	4605      	mov	r5, r0
 802192c:	463c      	mov	r4, r7
 802192e:	e7f5      	b.n	802191c <ai_platform_api_get_network_report+0x668>
 8021930:	2300      	movs	r3, #0
 8021932:	8663      	strh	r3, [r4, #50]	; 0x32
 8021934:	f105 0010 	add.w	r0, r5, #16
 8021938:	2218      	movs	r2, #24
 802193a:	2113      	movs	r1, #19
 802193c:	f000 fe40 	bl	80225c0 <core_set_error>
 8021940:	2400      	movs	r4, #0
 8021942:	e4f1      	b.n	8021328 <ai_platform_api_get_network_report+0x74>
 8021944:	f105 0010 	add.w	r0, r5, #16
 8021948:	2213      	movs	r2, #19
 802194a:	2111      	movs	r1, #17
 802194c:	f000 fe38 	bl	80225c0 <core_set_error>
 8021950:	4634      	mov	r4, r6
 8021952:	e4e9      	b.n	8021328 <ai_platform_api_get_network_report+0x74>
 8021954:	2201      	movs	r2, #1
 8021956:	507a      	str	r2, [r7, r1]
 8021958:	69b2      	ldr	r2, [r6, #24]
 802195a:	e625      	b.n	80215a8 <ai_platform_api_get_network_report+0x2f4>
 802195c:	e7fe      	b.n	802195c <ai_platform_api_get_network_report+0x6a8>
 802195e:	bf00      	nop
 8021960:	f407a5c2 	.word	0xf407a5c2
 8021964:	b5e8b5cd 	.word	0xb5e8b5cd
 8021968:	a1facade 	.word	0xa1facade
 802196c:	08027c34 	.word	0x08027c34
 8021970:	00040440 	.word	0x00040440

08021974 <ai_platform_network_create>:
 8021974:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021978:	b082      	sub	sp, #8
 802197a:	4605      	mov	r5, r0
 802197c:	4614      	mov	r4, r2
 802197e:	461e      	mov	r6, r3
 8021980:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 8021984:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
 8021988:	f7ff f94c 	bl	8020c24 <_ai_platform_acquire_crc>
 802198c:	2800      	cmp	r0, #0
 802198e:	d043      	beq.n	8021a18 <ai_platform_network_create+0xa4>
 8021990:	4b70      	ldr	r3, [pc, #448]	; (8021b54 <ai_platform_network_create+0x1e0>)
 8021992:	4298      	cmp	r0, r3
 8021994:	d00a      	beq.n	80219ac <ai_platform_network_create+0x38>
 8021996:	4b70      	ldr	r3, [pc, #448]	; (8021b58 <ai_platform_network_create+0x1e4>)
 8021998:	4298      	cmp	r0, r3
 802199a:	d035      	beq.n	8021a08 <ai_platform_network_create+0x94>
 802199c:	2218      	movs	r2, #24
 802199e:	f103 4370 	add.w	r3, r3, #4026531840	; 0xf0000000
 80219a2:	3308      	adds	r3, #8
 80219a4:	601a      	str	r2, [r3, #0]
 80219a6:	681b      	ldr	r3, [r3, #0]
 80219a8:	4293      	cmp	r3, r2
 80219aa:	d12d      	bne.n	8021a08 <ai_platform_network_create+0x94>
 80219ac:	2218      	movs	r2, #24
 80219ae:	4b6b      	ldr	r3, [pc, #428]	; (8021b5c <ai_platform_network_create+0x1e8>)
 80219b0:	601a      	str	r2, [r3, #0]
 80219b2:	681a      	ldr	r2, [r3, #0]
 80219b4:	2a18      	cmp	r2, #24
 80219b6:	d12d      	bne.n	8021a14 <ai_platform_network_create+0xa0>
 80219b8:	2201      	movs	r2, #1
 80219ba:	601a      	str	r2, [r3, #0]
 80219bc:	681a      	ldr	r2, [r3, #0]
 80219be:	2a00      	cmp	r2, #0
 80219c0:	d1fc      	bne.n	80219bc <ai_platform_network_create+0x48>
 80219c2:	f7ff f931 	bl	8020c28 <_ai_platform_release_crc>
 80219c6:	4a66      	ldr	r2, [pc, #408]	; (8021b60 <ai_platform_network_create+0x1ec>)
 80219c8:	6813      	ldr	r3, [r2, #0]
 80219ca:	f023 0301 	bic.w	r3, r3, #1
 80219ce:	6013      	str	r3, [r2, #0]
 80219d0:	f7ff f928 	bl	8020c24 <_ai_platform_acquire_crc>
 80219d4:	4b5f      	ldr	r3, [pc, #380]	; (8021b54 <ai_platform_network_create+0x1e0>)
 80219d6:	f020 5280 	bic.w	r2, r0, #268435456	; 0x10000000
 80219da:	429a      	cmp	r2, r3
 80219dc:	d022      	beq.n	8021a24 <ai_platform_network_create+0xb0>
 80219de:	2218      	movs	r2, #24
 80219e0:	4b5e      	ldr	r3, [pc, #376]	; (8021b5c <ai_platform_network_create+0x1e8>)
 80219e2:	601a      	str	r2, [r3, #0]
 80219e4:	681a      	ldr	r2, [r3, #0]
 80219e6:	2a18      	cmp	r2, #24
 80219e8:	d02a      	beq.n	8021a40 <ai_platform_network_create+0xcc>
 80219ea:	4b5e      	ldr	r3, [pc, #376]	; (8021b64 <ai_platform_network_create+0x1f0>)
 80219ec:	2201      	movs	r2, #1
 80219ee:	4619      	mov	r1, r3
 80219f0:	601a      	str	r2, [r3, #0]
 80219f2:	680b      	ldr	r3, [r1, #0]
 80219f4:	2b00      	cmp	r3, #0
 80219f6:	d1fc      	bne.n	80219f2 <ai_platform_network_create+0x7e>
 80219f8:	4b57      	ldr	r3, [pc, #348]	; (8021b58 <ai_platform_network_create+0x1e4>)
 80219fa:	495b      	ldr	r1, [pc, #364]	; (8021b68 <ai_platform_network_create+0x1f4>)
 80219fc:	4a5b      	ldr	r2, [pc, #364]	; (8021b6c <ai_platform_network_create+0x1f8>)
 80219fe:	6019      	str	r1, [r3, #0]
 8021a00:	681b      	ldr	r3, [r3, #0]
 8021a02:	4293      	cmp	r3, r2
 8021a04:	d029      	beq.n	8021a5a <ai_platform_network_create+0xe6>
 8021a06:	e7fe      	b.n	8021a06 <ai_platform_network_create+0x92>
 8021a08:	2218      	movs	r2, #24
 8021a0a:	4b56      	ldr	r3, [pc, #344]	; (8021b64 <ai_platform_network_create+0x1f0>)
 8021a0c:	601a      	str	r2, [r3, #0]
 8021a0e:	681a      	ldr	r2, [r3, #0]
 8021a10:	2a18      	cmp	r2, #24
 8021a12:	d0d1      	beq.n	80219b8 <ai_platform_network_create+0x44>
 8021a14:	f7ff f908 	bl	8020c28 <_ai_platform_release_crc>
 8021a18:	f244 1333 	movw	r3, #16691	; 0x4133
 8021a1c:	4618      	mov	r0, r3
 8021a1e:	b002      	add	sp, #8
 8021a20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021a24:	2301      	movs	r3, #1
 8021a26:	6083      	str	r3, [r0, #8]
 8021a28:	f100 0308 	add.w	r3, r0, #8
 8021a2c:	681a      	ldr	r2, [r3, #0]
 8021a2e:	2a00      	cmp	r2, #0
 8021a30:	d1fc      	bne.n	8021a2c <ai_platform_network_create+0xb8>
 8021a32:	4a4d      	ldr	r2, [pc, #308]	; (8021b68 <ai_platform_network_create+0x1f4>)
 8021a34:	4b4d      	ldr	r3, [pc, #308]	; (8021b6c <ai_platform_network_create+0x1f8>)
 8021a36:	6002      	str	r2, [r0, #0]
 8021a38:	6802      	ldr	r2, [r0, #0]
 8021a3a:	429a      	cmp	r2, r3
 8021a3c:	d00d      	beq.n	8021a5a <ai_platform_network_create+0xe6>
 8021a3e:	e7fe      	b.n	8021a3e <ai_platform_network_create+0xca>
 8021a40:	2201      	movs	r2, #1
 8021a42:	4619      	mov	r1, r3
 8021a44:	601a      	str	r2, [r3, #0]
 8021a46:	680b      	ldr	r3, [r1, #0]
 8021a48:	2b00      	cmp	r3, #0
 8021a4a:	d1fc      	bne.n	8021a46 <ai_platform_network_create+0xd2>
 8021a4c:	4b41      	ldr	r3, [pc, #260]	; (8021b54 <ai_platform_network_create+0x1e0>)
 8021a4e:	4946      	ldr	r1, [pc, #280]	; (8021b68 <ai_platform_network_create+0x1f4>)
 8021a50:	4a46      	ldr	r2, [pc, #280]	; (8021b6c <ai_platform_network_create+0x1f8>)
 8021a52:	6019      	str	r1, [r3, #0]
 8021a54:	681b      	ldr	r3, [r3, #0]
 8021a56:	4293      	cmp	r3, r2
 8021a58:	d12d      	bne.n	8021ab6 <ai_platform_network_create+0x142>
 8021a5a:	f7ff f8e5 	bl	8020c28 <_ai_platform_release_crc>
 8021a5e:	2d00      	cmp	r5, #0
 8021a60:	d075      	beq.n	8021b4e <ai_platform_network_create+0x1da>
 8021a62:	4b43      	ldr	r3, [pc, #268]	; (8021b70 <ai_platform_network_create+0x1fc>)
 8021a64:	6023      	str	r3, [r4, #0]
 8021a66:	602c      	str	r4, [r5, #0]
 8021a68:	f000 fda2 	bl	80225b0 <core_init>
 8021a6c:	b910      	cbnz	r0, 8021a74 <ai_platform_network_create+0x100>
 8021a6e:	f04f 0930 	mov.w	r9, #48	; 0x30
 8021a72:	e03f      	b.n	8021af4 <ai_platform_network_create+0x180>
 8021a74:	4a3a      	ldr	r2, [pc, #232]	; (8021b60 <ai_platform_network_create+0x1ec>)
 8021a76:	6813      	ldr	r3, [r2, #0]
 8021a78:	f023 0301 	bic.w	r3, r3, #1
 8021a7c:	6013      	str	r3, [r2, #0]
 8021a7e:	f7ff f8d1 	bl	8020c24 <_ai_platform_acquire_crc>
 8021a82:	4b34      	ldr	r3, [pc, #208]	; (8021b54 <ai_platform_network_create+0x1e0>)
 8021a84:	f020 5280 	bic.w	r2, r0, #268435456	; 0x10000000
 8021a88:	429a      	cmp	r2, r3
 8021a8a:	d015      	beq.n	8021ab8 <ai_platform_network_create+0x144>
 8021a8c:	2218      	movs	r2, #24
 8021a8e:	4b33      	ldr	r3, [pc, #204]	; (8021b5c <ai_platform_network_create+0x1e8>)
 8021a90:	601a      	str	r2, [r3, #0]
 8021a92:	681a      	ldr	r2, [r3, #0]
 8021a94:	2a18      	cmp	r2, #24
 8021a96:	d03d      	beq.n	8021b14 <ai_platform_network_create+0x1a0>
 8021a98:	4b32      	ldr	r3, [pc, #200]	; (8021b64 <ai_platform_network_create+0x1f0>)
 8021a9a:	2201      	movs	r2, #1
 8021a9c:	4619      	mov	r1, r3
 8021a9e:	601a      	str	r2, [r3, #0]
 8021aa0:	680b      	ldr	r3, [r1, #0]
 8021aa2:	2b00      	cmp	r3, #0
 8021aa4:	d1fc      	bne.n	8021aa0 <ai_platform_network_create+0x12c>
 8021aa6:	4b2c      	ldr	r3, [pc, #176]	; (8021b58 <ai_platform_network_create+0x1e4>)
 8021aa8:	492f      	ldr	r1, [pc, #188]	; (8021b68 <ai_platform_network_create+0x1f4>)
 8021aaa:	4a30      	ldr	r2, [pc, #192]	; (8021b6c <ai_platform_network_create+0x1f8>)
 8021aac:	6019      	str	r1, [r3, #0]
 8021aae:	681b      	ldr	r3, [r3, #0]
 8021ab0:	4293      	cmp	r3, r2
 8021ab2:	d00e      	beq.n	8021ad2 <ai_platform_network_create+0x15e>
 8021ab4:	e7fe      	b.n	8021ab4 <ai_platform_network_create+0x140>
 8021ab6:	e7fe      	b.n	8021ab6 <ai_platform_network_create+0x142>
 8021ab8:	2301      	movs	r3, #1
 8021aba:	6083      	str	r3, [r0, #8]
 8021abc:	f100 0308 	add.w	r3, r0, #8
 8021ac0:	681a      	ldr	r2, [r3, #0]
 8021ac2:	2a00      	cmp	r2, #0
 8021ac4:	d1fc      	bne.n	8021ac0 <ai_platform_network_create+0x14c>
 8021ac6:	4a28      	ldr	r2, [pc, #160]	; (8021b68 <ai_platform_network_create+0x1f4>)
 8021ac8:	4b28      	ldr	r3, [pc, #160]	; (8021b6c <ai_platform_network_create+0x1f8>)
 8021aca:	6002      	str	r2, [r0, #0]
 8021acc:	6802      	ldr	r2, [r0, #0]
 8021ace:	429a      	cmp	r2, r3
 8021ad0:	d139      	bne.n	8021b46 <ai_platform_network_create+0x1d2>
 8021ad2:	f7ff f8a9 	bl	8020c28 <_ai_platform_release_crc>
 8021ad6:	2200      	movs	r2, #0
 8021ad8:	4639      	mov	r1, r7
 8021ada:	4630      	mov	r0, r6
 8021adc:	f001 ff06 	bl	80238ec <ai_version_get>
 8021ae0:	2200      	movs	r2, #0
 8021ae2:	4681      	mov	r9, r0
 8021ae4:	2105      	movs	r1, #5
 8021ae6:	2001      	movs	r0, #1
 8021ae8:	f001 ff00 	bl	80238ec <ai_version_get>
 8021aec:	4581      	cmp	r9, r0
 8021aee:	d01f      	beq.n	8021b30 <ai_platform_network_create+0x1bc>
 8021af0:	f04f 0901 	mov.w	r9, #1
 8021af4:	2300      	movs	r3, #0
 8021af6:	f04f 0a10 	mov.w	sl, #16
 8021afa:	602b      	str	r3, [r5, #0]
 8021afc:	4642      	mov	r2, r8
 8021afe:	4639      	mov	r1, r7
 8021b00:	4630      	mov	r0, r6
 8021b02:	f001 fef3 	bl	80238ec <ai_version_get>
 8021b06:	2300      	movs	r3, #0
 8021b08:	f369 0307 	bfi	r3, r9, #0, #8
 8021b0c:	6460      	str	r0, [r4, #68]	; 0x44
 8021b0e:	f36a 231f 	bfi	r3, sl, #8, #24
 8021b12:	e783      	b.n	8021a1c <ai_platform_network_create+0xa8>
 8021b14:	2201      	movs	r2, #1
 8021b16:	4619      	mov	r1, r3
 8021b18:	601a      	str	r2, [r3, #0]
 8021b1a:	680b      	ldr	r3, [r1, #0]
 8021b1c:	2b00      	cmp	r3, #0
 8021b1e:	d1fc      	bne.n	8021b1a <ai_platform_network_create+0x1a6>
 8021b20:	4b0c      	ldr	r3, [pc, #48]	; (8021b54 <ai_platform_network_create+0x1e0>)
 8021b22:	4911      	ldr	r1, [pc, #68]	; (8021b68 <ai_platform_network_create+0x1f4>)
 8021b24:	4a11      	ldr	r2, [pc, #68]	; (8021b6c <ai_platform_network_create+0x1f8>)
 8021b26:	6019      	str	r1, [r3, #0]
 8021b28:	681b      	ldr	r3, [r3, #0]
 8021b2a:	4293      	cmp	r3, r2
 8021b2c:	d0d1      	beq.n	8021ad2 <ai_platform_network_create+0x15e>
 8021b2e:	e7fe      	b.n	8021b2e <ai_platform_network_create+0x1ba>
 8021b30:	4b10      	ldr	r3, [pc, #64]	; (8021b74 <ai_platform_network_create+0x200>)
 8021b32:	a802      	add	r0, sp, #8
 8021b34:	f840 3d04 	str.w	r3, [r0, #-4]!
 8021b38:	f001 fe2e 	bl	8023798 <ai_check_custom_types>
 8021b3c:	b120      	cbz	r0, 8021b48 <ai_platform_network_create+0x1d4>
 8021b3e:	f04f 0a00 	mov.w	sl, #0
 8021b42:	46d1      	mov	r9, sl
 8021b44:	e7da      	b.n	8021afc <ai_platform_network_create+0x188>
 8021b46:	e7fe      	b.n	8021b46 <ai_platform_network_create+0x1d2>
 8021b48:	f04f 0902 	mov.w	r9, #2
 8021b4c:	e7d2      	b.n	8021af4 <ai_platform_network_create+0x180>
 8021b4e:	f241 0310 	movw	r3, #4112	; 0x1010
 8021b52:	e763      	b.n	8021a1c <ai_platform_network_create+0xa8>
 8021b54:	40023000 	.word	0x40023000
 8021b58:	50023000 	.word	0x50023000
 8021b5c:	40023008 	.word	0x40023008
 8021b60:	e0002000 	.word	0xe0002000
 8021b64:	50023008 	.word	0x50023008
 8021b68:	f407a5c2 	.word	0xf407a5c2
 8021b6c:	b5e8b5cd 	.word	0xb5e8b5cd
 8021b70:	a1c00100 	.word	0xa1c00100
 8021b74:	84048403 	.word	0x84048403

08021b78 <ai_platform_network_destroy>:
 8021b78:	b510      	push	{r4, lr}
 8021b7a:	4604      	mov	r4, r0
 8021b7c:	b118      	cbz	r0, 8021b86 <ai_platform_network_destroy+0xe>
 8021b7e:	4b44      	ldr	r3, [pc, #272]	; (8021c90 <ai_platform_network_destroy+0x118>)
 8021b80:	6802      	ldr	r2, [r0, #0]
 8021b82:	429a      	cmp	r2, r3
 8021b84:	d03f      	beq.n	8021c06 <ai_platform_network_destroy+0x8e>
 8021b86:	4a43      	ldr	r2, [pc, #268]	; (8021c94 <ai_platform_network_destroy+0x11c>)
 8021b88:	6813      	ldr	r3, [r2, #0]
 8021b8a:	f023 0301 	bic.w	r3, r3, #1
 8021b8e:	6013      	str	r3, [r2, #0]
 8021b90:	f7ff f848 	bl	8020c24 <_ai_platform_acquire_crc>
 8021b94:	4b40      	ldr	r3, [pc, #256]	; (8021c98 <ai_platform_network_destroy+0x120>)
 8021b96:	f020 5280 	bic.w	r2, r0, #268435456	; 0x10000000
 8021b9a:	429a      	cmp	r2, r3
 8021b9c:	d014      	beq.n	8021bc8 <ai_platform_network_destroy+0x50>
 8021b9e:	2218      	movs	r2, #24
 8021ba0:	4b3e      	ldr	r3, [pc, #248]	; (8021c9c <ai_platform_network_destroy+0x124>)
 8021ba2:	601a      	str	r2, [r3, #0]
 8021ba4:	681a      	ldr	r2, [r3, #0]
 8021ba6:	2a18      	cmp	r2, #24
 8021ba8:	d01c      	beq.n	8021be4 <ai_platform_network_destroy+0x6c>
 8021baa:	4b3d      	ldr	r3, [pc, #244]	; (8021ca0 <ai_platform_network_destroy+0x128>)
 8021bac:	2201      	movs	r2, #1
 8021bae:	4619      	mov	r1, r3
 8021bb0:	601a      	str	r2, [r3, #0]
 8021bb2:	680b      	ldr	r3, [r1, #0]
 8021bb4:	2b00      	cmp	r3, #0
 8021bb6:	d1fc      	bne.n	8021bb2 <ai_platform_network_destroy+0x3a>
 8021bb8:	4b3a      	ldr	r3, [pc, #232]	; (8021ca4 <ai_platform_network_destroy+0x12c>)
 8021bba:	493b      	ldr	r1, [pc, #236]	; (8021ca8 <ai_platform_network_destroy+0x130>)
 8021bbc:	4a3b      	ldr	r2, [pc, #236]	; (8021cac <ai_platform_network_destroy+0x134>)
 8021bbe:	6019      	str	r1, [r3, #0]
 8021bc0:	681b      	ldr	r3, [r3, #0]
 8021bc2:	4293      	cmp	r3, r2
 8021bc4:	d01b      	beq.n	8021bfe <ai_platform_network_destroy+0x86>
 8021bc6:	e7fe      	b.n	8021bc6 <ai_platform_network_destroy+0x4e>
 8021bc8:	2301      	movs	r3, #1
 8021bca:	f100 0208 	add.w	r2, r0, #8
 8021bce:	6083      	str	r3, [r0, #8]
 8021bd0:	6813      	ldr	r3, [r2, #0]
 8021bd2:	2b00      	cmp	r3, #0
 8021bd4:	d1fc      	bne.n	8021bd0 <ai_platform_network_destroy+0x58>
 8021bd6:	4a34      	ldr	r2, [pc, #208]	; (8021ca8 <ai_platform_network_destroy+0x130>)
 8021bd8:	4b34      	ldr	r3, [pc, #208]	; (8021cac <ai_platform_network_destroy+0x134>)
 8021bda:	6002      	str	r2, [r0, #0]
 8021bdc:	6802      	ldr	r2, [r0, #0]
 8021bde:	429a      	cmp	r2, r3
 8021be0:	d00d      	beq.n	8021bfe <ai_platform_network_destroy+0x86>
 8021be2:	e7fe      	b.n	8021be2 <ai_platform_network_destroy+0x6a>
 8021be4:	2201      	movs	r2, #1
 8021be6:	4619      	mov	r1, r3
 8021be8:	601a      	str	r2, [r3, #0]
 8021bea:	680b      	ldr	r3, [r1, #0]
 8021bec:	2b00      	cmp	r3, #0
 8021bee:	d1fc      	bne.n	8021bea <ai_platform_network_destroy+0x72>
 8021bf0:	4b29      	ldr	r3, [pc, #164]	; (8021c98 <ai_platform_network_destroy+0x120>)
 8021bf2:	492d      	ldr	r1, [pc, #180]	; (8021ca8 <ai_platform_network_destroy+0x130>)
 8021bf4:	4a2d      	ldr	r2, [pc, #180]	; (8021cac <ai_platform_network_destroy+0x134>)
 8021bf6:	6019      	str	r1, [r3, #0]
 8021bf8:	681b      	ldr	r3, [r3, #0]
 8021bfa:	4293      	cmp	r3, r2
 8021bfc:	d140      	bne.n	8021c80 <ai_platform_network_destroy+0x108>
 8021bfe:	f7ff f813 	bl	8020c28 <_ai_platform_release_crc>
 8021c02:	4620      	mov	r0, r4
 8021c04:	bd10      	pop	{r4, pc}
 8021c06:	4a23      	ldr	r2, [pc, #140]	; (8021c94 <ai_platform_network_destroy+0x11c>)
 8021c08:	6813      	ldr	r3, [r2, #0]
 8021c0a:	f023 0301 	bic.w	r3, r3, #1
 8021c0e:	6013      	str	r3, [r2, #0]
 8021c10:	f7ff f808 	bl	8020c24 <_ai_platform_acquire_crc>
 8021c14:	4b20      	ldr	r3, [pc, #128]	; (8021c98 <ai_platform_network_destroy+0x120>)
 8021c16:	f020 5280 	bic.w	r2, r0, #268435456	; 0x10000000
 8021c1a:	429a      	cmp	r2, r3
 8021c1c:	d022      	beq.n	8021c64 <ai_platform_network_destroy+0xec>
 8021c1e:	2218      	movs	r2, #24
 8021c20:	4b1e      	ldr	r3, [pc, #120]	; (8021c9c <ai_platform_network_destroy+0x124>)
 8021c22:	601a      	str	r2, [r3, #0]
 8021c24:	681a      	ldr	r2, [r3, #0]
 8021c26:	2a18      	cmp	r2, #24
 8021c28:	d00e      	beq.n	8021c48 <ai_platform_network_destroy+0xd0>
 8021c2a:	4b1d      	ldr	r3, [pc, #116]	; (8021ca0 <ai_platform_network_destroy+0x128>)
 8021c2c:	2201      	movs	r2, #1
 8021c2e:	4619      	mov	r1, r3
 8021c30:	601a      	str	r2, [r3, #0]
 8021c32:	680b      	ldr	r3, [r1, #0]
 8021c34:	2b00      	cmp	r3, #0
 8021c36:	d1fc      	bne.n	8021c32 <ai_platform_network_destroy+0xba>
 8021c38:	4b1a      	ldr	r3, [pc, #104]	; (8021ca4 <ai_platform_network_destroy+0x12c>)
 8021c3a:	491b      	ldr	r1, [pc, #108]	; (8021ca8 <ai_platform_network_destroy+0x130>)
 8021c3c:	4a1b      	ldr	r2, [pc, #108]	; (8021cac <ai_platform_network_destroy+0x134>)
 8021c3e:	6019      	str	r1, [r3, #0]
 8021c40:	681b      	ldr	r3, [r3, #0]
 8021c42:	4293      	cmp	r3, r2
 8021c44:	d01d      	beq.n	8021c82 <ai_platform_network_destroy+0x10a>
 8021c46:	e7fe      	b.n	8021c46 <ai_platform_network_destroy+0xce>
 8021c48:	2201      	movs	r2, #1
 8021c4a:	4619      	mov	r1, r3
 8021c4c:	601a      	str	r2, [r3, #0]
 8021c4e:	680b      	ldr	r3, [r1, #0]
 8021c50:	2b00      	cmp	r3, #0
 8021c52:	d1fc      	bne.n	8021c4e <ai_platform_network_destroy+0xd6>
 8021c54:	4b10      	ldr	r3, [pc, #64]	; (8021c98 <ai_platform_network_destroy+0x120>)
 8021c56:	4914      	ldr	r1, [pc, #80]	; (8021ca8 <ai_platform_network_destroy+0x130>)
 8021c58:	4a14      	ldr	r2, [pc, #80]	; (8021cac <ai_platform_network_destroy+0x134>)
 8021c5a:	6019      	str	r1, [r3, #0]
 8021c5c:	681b      	ldr	r3, [r3, #0]
 8021c5e:	4293      	cmp	r3, r2
 8021c60:	d00f      	beq.n	8021c82 <ai_platform_network_destroy+0x10a>
 8021c62:	e7fe      	b.n	8021c62 <ai_platform_network_destroy+0xea>
 8021c64:	2301      	movs	r3, #1
 8021c66:	f100 0208 	add.w	r2, r0, #8
 8021c6a:	6083      	str	r3, [r0, #8]
 8021c6c:	6813      	ldr	r3, [r2, #0]
 8021c6e:	2b00      	cmp	r3, #0
 8021c70:	d1fc      	bne.n	8021c6c <ai_platform_network_destroy+0xf4>
 8021c72:	4a0d      	ldr	r2, [pc, #52]	; (8021ca8 <ai_platform_network_destroy+0x130>)
 8021c74:	4b0d      	ldr	r3, [pc, #52]	; (8021cac <ai_platform_network_destroy+0x134>)
 8021c76:	6002      	str	r2, [r0, #0]
 8021c78:	6802      	ldr	r2, [r0, #0]
 8021c7a:	429a      	cmp	r2, r3
 8021c7c:	d001      	beq.n	8021c82 <ai_platform_network_destroy+0x10a>
 8021c7e:	e7fe      	b.n	8021c7e <ai_platform_network_destroy+0x106>
 8021c80:	e7fe      	b.n	8021c80 <ai_platform_network_destroy+0x108>
 8021c82:	f7fe ffd1 	bl	8020c28 <_ai_platform_release_crc>
 8021c86:	4620      	mov	r0, r4
 8021c88:	f001 fe1a 	bl	80238c0 <ai_layers_destroy_all>
 8021c8c:	2400      	movs	r4, #0
 8021c8e:	e7b8      	b.n	8021c02 <ai_platform_network_destroy+0x8a>
 8021c90:	a1c00100 	.word	0xa1c00100
 8021c94:	e0002000 	.word	0xe0002000
 8021c98:	40023000 	.word	0x40023000
 8021c9c:	40023008 	.word	0x40023008
 8021ca0:	50023008 	.word	0x50023008
 8021ca4:	50023000 	.word	0x50023000
 8021ca8:	f407a5c2 	.word	0xf407a5c2
 8021cac:	b5e8b5cd 	.word	0xb5e8b5cd

08021cb0 <ai_platform_network_init>:
 8021cb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021cb4:	2800      	cmp	r0, #0
 8021cb6:	d034      	beq.n	8021d22 <ai_platform_network_init+0x72>
 8021cb8:	4b8f      	ldr	r3, [pc, #572]	; (8021ef8 <ai_platform_network_init+0x248>)
 8021cba:	6802      	ldr	r2, [r0, #0]
 8021cbc:	4604      	mov	r4, r0
 8021cbe:	429a      	cmp	r2, r3
 8021cc0:	d12f      	bne.n	8021d22 <ai_platform_network_init+0x72>
 8021cc2:	4a8e      	ldr	r2, [pc, #568]	; (8021efc <ai_platform_network_init+0x24c>)
 8021cc4:	460e      	mov	r6, r1
 8021cc6:	6813      	ldr	r3, [r2, #0]
 8021cc8:	f023 0301 	bic.w	r3, r3, #1
 8021ccc:	6013      	str	r3, [r2, #0]
 8021cce:	f7fe ffa9 	bl	8020c24 <_ai_platform_acquire_crc>
 8021cd2:	4b8b      	ldr	r3, [pc, #556]	; (8021f00 <ai_platform_network_init+0x250>)
 8021cd4:	f020 5280 	bic.w	r2, r0, #268435456	; 0x10000000
 8021cd8:	429a      	cmp	r2, r3
 8021cda:	d014      	beq.n	8021d06 <ai_platform_network_init+0x56>
 8021cdc:	2218      	movs	r2, #24
 8021cde:	4b89      	ldr	r3, [pc, #548]	; (8021f04 <ai_platform_network_init+0x254>)
 8021ce0:	601a      	str	r2, [r3, #0]
 8021ce2:	681a      	ldr	r2, [r3, #0]
 8021ce4:	2a18      	cmp	r2, #24
 8021ce6:	d03f      	beq.n	8021d68 <ai_platform_network_init+0xb8>
 8021ce8:	4b87      	ldr	r3, [pc, #540]	; (8021f08 <ai_platform_network_init+0x258>)
 8021cea:	2201      	movs	r2, #1
 8021cec:	4619      	mov	r1, r3
 8021cee:	601a      	str	r2, [r3, #0]
 8021cf0:	680b      	ldr	r3, [r1, #0]
 8021cf2:	2b00      	cmp	r3, #0
 8021cf4:	d1fc      	bne.n	8021cf0 <ai_platform_network_init+0x40>
 8021cf6:	4b85      	ldr	r3, [pc, #532]	; (8021f0c <ai_platform_network_init+0x25c>)
 8021cf8:	4985      	ldr	r1, [pc, #532]	; (8021f10 <ai_platform_network_init+0x260>)
 8021cfa:	4a86      	ldr	r2, [pc, #536]	; (8021f14 <ai_platform_network_init+0x264>)
 8021cfc:	6019      	str	r1, [r3, #0]
 8021cfe:	681b      	ldr	r3, [r3, #0]
 8021d00:	4293      	cmp	r3, r2
 8021d02:	d03f      	beq.n	8021d84 <ai_platform_network_init+0xd4>
 8021d04:	e7fe      	b.n	8021d04 <ai_platform_network_init+0x54>
 8021d06:	2301      	movs	r3, #1
 8021d08:	f100 0208 	add.w	r2, r0, #8
 8021d0c:	6083      	str	r3, [r0, #8]
 8021d0e:	6813      	ldr	r3, [r2, #0]
 8021d10:	2b00      	cmp	r3, #0
 8021d12:	d1fc      	bne.n	8021d0e <ai_platform_network_init+0x5e>
 8021d14:	4a7e      	ldr	r2, [pc, #504]	; (8021f10 <ai_platform_network_init+0x260>)
 8021d16:	4b7f      	ldr	r3, [pc, #508]	; (8021f14 <ai_platform_network_init+0x264>)
 8021d18:	6002      	str	r2, [r0, #0]
 8021d1a:	6802      	ldr	r2, [r0, #0]
 8021d1c:	429a      	cmp	r2, r3
 8021d1e:	d031      	beq.n	8021d84 <ai_platform_network_init+0xd4>
 8021d20:	e7fe      	b.n	8021d20 <ai_platform_network_init+0x70>
 8021d22:	4a76      	ldr	r2, [pc, #472]	; (8021efc <ai_platform_network_init+0x24c>)
 8021d24:	6813      	ldr	r3, [r2, #0]
 8021d26:	f023 0301 	bic.w	r3, r3, #1
 8021d2a:	6013      	str	r3, [r2, #0]
 8021d2c:	f7fe ff7a 	bl	8020c24 <_ai_platform_acquire_crc>
 8021d30:	4b73      	ldr	r3, [pc, #460]	; (8021f00 <ai_platform_network_init+0x250>)
 8021d32:	f020 5280 	bic.w	r2, r0, #268435456	; 0x10000000
 8021d36:	429a      	cmp	r2, r3
 8021d38:	d056      	beq.n	8021de8 <ai_platform_network_init+0x138>
 8021d3a:	2218      	movs	r2, #24
 8021d3c:	4b71      	ldr	r3, [pc, #452]	; (8021f04 <ai_platform_network_init+0x254>)
 8021d3e:	601a      	str	r2, [r3, #0]
 8021d40:	681a      	ldr	r2, [r3, #0]
 8021d42:	2a18      	cmp	r2, #24
 8021d44:	f000 80c4 	beq.w	8021ed0 <ai_platform_network_init+0x220>
 8021d48:	4b6f      	ldr	r3, [pc, #444]	; (8021f08 <ai_platform_network_init+0x258>)
 8021d4a:	2201      	movs	r2, #1
 8021d4c:	4619      	mov	r1, r3
 8021d4e:	601a      	str	r2, [r3, #0]
 8021d50:	680b      	ldr	r3, [r1, #0]
 8021d52:	2b00      	cmp	r3, #0
 8021d54:	d1fc      	bne.n	8021d50 <ai_platform_network_init+0xa0>
 8021d56:	4b6d      	ldr	r3, [pc, #436]	; (8021f0c <ai_platform_network_init+0x25c>)
 8021d58:	496d      	ldr	r1, [pc, #436]	; (8021f10 <ai_platform_network_init+0x260>)
 8021d5a:	4a6e      	ldr	r2, [pc, #440]	; (8021f14 <ai_platform_network_init+0x264>)
 8021d5c:	6019      	str	r1, [r3, #0]
 8021d5e:	681b      	ldr	r3, [r3, #0]
 8021d60:	4293      	cmp	r3, r2
 8021d62:	f000 80c2 	beq.w	8021eea <ai_platform_network_init+0x23a>
 8021d66:	e7fe      	b.n	8021d66 <ai_platform_network_init+0xb6>
 8021d68:	2201      	movs	r2, #1
 8021d6a:	4619      	mov	r1, r3
 8021d6c:	601a      	str	r2, [r3, #0]
 8021d6e:	680b      	ldr	r3, [r1, #0]
 8021d70:	2b00      	cmp	r3, #0
 8021d72:	d1fc      	bne.n	8021d6e <ai_platform_network_init+0xbe>
 8021d74:	4b62      	ldr	r3, [pc, #392]	; (8021f00 <ai_platform_network_init+0x250>)
 8021d76:	4966      	ldr	r1, [pc, #408]	; (8021f10 <ai_platform_network_init+0x260>)
 8021d78:	4a66      	ldr	r2, [pc, #408]	; (8021f14 <ai_platform_network_init+0x264>)
 8021d7a:	6019      	str	r1, [r3, #0]
 8021d7c:	681b      	ldr	r3, [r3, #0]
 8021d7e:	4293      	cmp	r3, r2
 8021d80:	f040 80b8 	bne.w	8021ef4 <ai_platform_network_init+0x244>
 8021d84:	f7fe ff50 	bl	8020c28 <_ai_platform_release_crc>
 8021d88:	2e00      	cmp	r6, #0
 8021d8a:	d07f      	beq.n	8021e8c <ai_platform_network_init+0x1dc>
 8021d8c:	4b62      	ldr	r3, [pc, #392]	; (8021f18 <ai_platform_network_init+0x268>)
 8021d8e:	6832      	ldr	r2, [r6, #0]
 8021d90:	429a      	cmp	r2, r3
 8021d92:	d050      	beq.n	8021e36 <ai_platform_network_init+0x186>
 8021d94:	2101      	movs	r1, #1
 8021d96:	4630      	mov	r0, r6
 8021d98:	f8d6 8004 	ldr.w	r8, [r6, #4]
 8021d9c:	f7fe feee 	bl	8020b7c <ai_buffer_get_size>
 8021da0:	4635      	mov	r5, r6
 8021da2:	f106 071c 	add.w	r7, r6, #28
 8021da6:	2101      	movs	r1, #1
 8021da8:	4606      	mov	r6, r0
 8021daa:	4638      	mov	r0, r7
 8021dac:	f8d5 9020 	ldr.w	r9, [r5, #32]
 8021db0:	f7fe fee4 	bl	8020b7c <ai_buffer_get_size>
 8021db4:	2e00      	cmp	r6, #0
 8021db6:	bf0a      	itet	eq
 8021db8:	46b6      	moveq	lr, r6
 8021dba:	f04f 0e01 	movne.w	lr, #1
 8021dbe:	4635      	moveq	r5, r6
 8021dc0:	2800      	cmp	r0, #0
 8021dc2:	d177      	bne.n	8021eb4 <ai_platform_network_init+0x204>
 8021dc4:	4607      	mov	r7, r0
 8021dc6:	4684      	mov	ip, r0
 8021dc8:	f1b8 0f00 	cmp.w	r8, #0
 8021dcc:	d068      	beq.n	8021ea0 <ai_platform_network_init+0x1f0>
 8021dce:	8be3      	ldrh	r3, [r4, #30]
 8021dd0:	4573      	cmp	r3, lr
 8021dd2:	d217      	bcs.n	8021e04 <ai_platform_network_init+0x154>
 8021dd4:	f104 0010 	add.w	r0, r4, #16
 8021dd8:	2212      	movs	r2, #18
 8021dda:	2116      	movs	r1, #22
 8021ddc:	f000 fbf0 	bl	80225c0 <core_set_error>
 8021de0:	2400      	movs	r4, #0
 8021de2:	4620      	mov	r0, r4
 8021de4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8021de8:	2301      	movs	r3, #1
 8021dea:	f100 0208 	add.w	r2, r0, #8
 8021dee:	6083      	str	r3, [r0, #8]
 8021df0:	6813      	ldr	r3, [r2, #0]
 8021df2:	2b00      	cmp	r3, #0
 8021df4:	d1fc      	bne.n	8021df0 <ai_platform_network_init+0x140>
 8021df6:	4a46      	ldr	r2, [pc, #280]	; (8021f10 <ai_platform_network_init+0x260>)
 8021df8:	4b46      	ldr	r3, [pc, #280]	; (8021f14 <ai_platform_network_init+0x264>)
 8021dfa:	6002      	str	r2, [r0, #0]
 8021dfc:	6802      	ldr	r2, [r0, #0]
 8021dfe:	429a      	cmp	r2, r3
 8021e00:	d073      	beq.n	8021eea <ai_platform_network_init+0x23a>
 8021e02:	e7fe      	b.n	8021e02 <ai_platform_network_init+0x152>
 8021e04:	f1be 0f00 	cmp.w	lr, #0
 8021e08:	d006      	beq.n	8021e18 <ai_platform_network_init+0x168>
 8021e0a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8021e0c:	6a26      	ldr	r6, [r4, #32]
 8021e0e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8021e10:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8021e14:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8021e18:	2600      	movs	r6, #0
 8021e1a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8021e1c:	f8a4 e01e 	strh.w	lr, [r4, #30]
 8021e20:	4563      	cmp	r3, ip
 8021e22:	83a6      	strh	r6, [r4, #28]
 8021e24:	d21b      	bcs.n	8021e5e <ai_platform_network_init+0x1ae>
 8021e26:	f104 0010 	add.w	r0, r4, #16
 8021e2a:	2213      	movs	r2, #19
 8021e2c:	2116      	movs	r1, #22
 8021e2e:	4634      	mov	r4, r6
 8021e30:	f000 fbc6 	bl	80225c0 <core_set_error>
 8021e34:	e7d5      	b.n	8021de2 <ai_platform_network_init+0x132>
 8021e36:	6930      	ldr	r0, [r6, #16]
 8021e38:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 8021e3c:	89b3      	ldrh	r3, [r6, #12]
 8021e3e:	f8b6 c00e 	ldrh.w	ip, [r6, #14]
 8021e42:	e9c4 2107 	strd	r2, r1, [r4, #28]
 8021e46:	62a0      	str	r0, [r4, #40]	; 0x28
 8021e48:	2203      	movs	r2, #3
 8021e4a:	f8a4 c026 	strh.w	ip, [r4, #38]	; 0x26
 8021e4e:	84a3      	strh	r3, [r4, #36]	; 0x24
 8021e50:	60e2      	str	r2, [r4, #12]
 8021e52:	4620      	mov	r0, r4
 8021e54:	f001 fcca 	bl	80237ec <ai_layers_init_all>
 8021e58:	4620      	mov	r0, r4
 8021e5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8021e5e:	f1bc 0f00 	cmp.w	ip, #0
 8021e62:	d01b      	beq.n	8021e9c <ai_platform_network_init+0x1ec>
 8021e64:	ebcc 08cc 	rsb	r8, ip, ip, lsl #3
 8021e68:	ea4f 0888 	mov.w	r8, r8, lsl #2
 8021e6c:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8021e6e:	eb07 0e06 	add.w	lr, r7, r6
 8021e72:	4435      	add	r5, r6
 8021e74:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8021e78:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8021e7a:	361c      	adds	r6, #28
 8021e7c:	4546      	cmp	r6, r8
 8021e7e:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 8021e82:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8021e86:	d1f1      	bne.n	8021e6c <ai_platform_network_init+0x1bc>
 8021e88:	2300      	movs	r3, #0
 8021e8a:	e7dd      	b.n	8021e48 <ai_platform_network_init+0x198>
 8021e8c:	f104 0010 	add.w	r0, r4, #16
 8021e90:	2211      	movs	r2, #17
 8021e92:	2110      	movs	r1, #16
 8021e94:	4634      	mov	r4, r6
 8021e96:	f000 fb93 	bl	80225c0 <core_set_error>
 8021e9a:	e7a2      	b.n	8021de2 <ai_platform_network_init+0x132>
 8021e9c:	4663      	mov	r3, ip
 8021e9e:	e7d3      	b.n	8021e48 <ai_platform_network_init+0x198>
 8021ea0:	2e00      	cmp	r6, #0
 8021ea2:	d094      	beq.n	8021dce <ai_platform_network_init+0x11e>
 8021ea4:	f104 0010 	add.w	r0, r4, #16
 8021ea8:	2212      	movs	r2, #18
 8021eaa:	2110      	movs	r1, #16
 8021eac:	4644      	mov	r4, r8
 8021eae:	f000 fb87 	bl	80225c0 <core_set_error>
 8021eb2:	e796      	b.n	8021de2 <ai_platform_network_init+0x132>
 8021eb4:	f1b9 0f00 	cmp.w	r9, #0
 8021eb8:	d002      	beq.n	8021ec0 <ai_platform_network_init+0x210>
 8021eba:	f04f 0c01 	mov.w	ip, #1
 8021ebe:	e783      	b.n	8021dc8 <ai_platform_network_init+0x118>
 8021ec0:	f104 0010 	add.w	r0, r4, #16
 8021ec4:	2213      	movs	r2, #19
 8021ec6:	2110      	movs	r1, #16
 8021ec8:	464c      	mov	r4, r9
 8021eca:	f000 fb79 	bl	80225c0 <core_set_error>
 8021ece:	e788      	b.n	8021de2 <ai_platform_network_init+0x132>
 8021ed0:	2201      	movs	r2, #1
 8021ed2:	4619      	mov	r1, r3
 8021ed4:	601a      	str	r2, [r3, #0]
 8021ed6:	680b      	ldr	r3, [r1, #0]
 8021ed8:	2b00      	cmp	r3, #0
 8021eda:	d1fc      	bne.n	8021ed6 <ai_platform_network_init+0x226>
 8021edc:	4b08      	ldr	r3, [pc, #32]	; (8021f00 <ai_platform_network_init+0x250>)
 8021ede:	490c      	ldr	r1, [pc, #48]	; (8021f10 <ai_platform_network_init+0x260>)
 8021ee0:	4a0c      	ldr	r2, [pc, #48]	; (8021f14 <ai_platform_network_init+0x264>)
 8021ee2:	6019      	str	r1, [r3, #0]
 8021ee4:	681b      	ldr	r3, [r3, #0]
 8021ee6:	4293      	cmp	r3, r2
 8021ee8:	d103      	bne.n	8021ef2 <ai_platform_network_init+0x242>
 8021eea:	f7fe fe9d 	bl	8020c28 <_ai_platform_release_crc>
 8021eee:	2400      	movs	r4, #0
 8021ef0:	e777      	b.n	8021de2 <ai_platform_network_init+0x132>
 8021ef2:	e7fe      	b.n	8021ef2 <ai_platform_network_init+0x242>
 8021ef4:	e7fe      	b.n	8021ef4 <ai_platform_network_init+0x244>
 8021ef6:	bf00      	nop
 8021ef8:	a1c00100 	.word	0xa1c00100
 8021efc:	e0002000 	.word	0xe0002000
 8021f00:	40023000 	.word	0x40023000
 8021f04:	40023008 	.word	0x40023008
 8021f08:	50023008 	.word	0x50023008
 8021f0c:	50023000 	.word	0x50023000
 8021f10:	f407a5c2 	.word	0xf407a5c2
 8021f14:	b5e8b5cd 	.word	0xb5e8b5cd
 8021f18:	a1facade 	.word	0xa1facade

08021f1c <ai_platform_network_post_init>:
 8021f1c:	b538      	push	{r3, r4, r5, lr}
 8021f1e:	b120      	cbz	r0, 8021f2a <ai_platform_network_post_init+0xe>
 8021f20:	4b52      	ldr	r3, [pc, #328]	; (802206c <ai_platform_network_post_init+0x150>)
 8021f22:	6802      	ldr	r2, [r0, #0]
 8021f24:	4604      	mov	r4, r0
 8021f26:	429a      	cmp	r2, r3
 8021f28:	d032      	beq.n	8021f90 <ai_platform_network_post_init+0x74>
 8021f2a:	4a51      	ldr	r2, [pc, #324]	; (8022070 <ai_platform_network_post_init+0x154>)
 8021f2c:	6813      	ldr	r3, [r2, #0]
 8021f2e:	f023 0301 	bic.w	r3, r3, #1
 8021f32:	6013      	str	r3, [r2, #0]
 8021f34:	f7fe fe76 	bl	8020c24 <_ai_platform_acquire_crc>
 8021f38:	4b4e      	ldr	r3, [pc, #312]	; (8022074 <ai_platform_network_post_init+0x158>)
 8021f3a:	f020 5280 	bic.w	r2, r0, #268435456	; 0x10000000
 8021f3e:	429a      	cmp	r2, r3
 8021f40:	d014      	beq.n	8021f6c <ai_platform_network_post_init+0x50>
 8021f42:	2218      	movs	r2, #24
 8021f44:	4b4c      	ldr	r3, [pc, #304]	; (8022078 <ai_platform_network_post_init+0x15c>)
 8021f46:	601a      	str	r2, [r3, #0]
 8021f48:	681a      	ldr	r2, [r3, #0]
 8021f4a:	2a18      	cmp	r2, #24
 8021f4c:	d041      	beq.n	8021fd2 <ai_platform_network_post_init+0xb6>
 8021f4e:	4b4b      	ldr	r3, [pc, #300]	; (802207c <ai_platform_network_post_init+0x160>)
 8021f50:	2201      	movs	r2, #1
 8021f52:	4619      	mov	r1, r3
 8021f54:	601a      	str	r2, [r3, #0]
 8021f56:	680b      	ldr	r3, [r1, #0]
 8021f58:	2b00      	cmp	r3, #0
 8021f5a:	d1fc      	bne.n	8021f56 <ai_platform_network_post_init+0x3a>
 8021f5c:	4b48      	ldr	r3, [pc, #288]	; (8022080 <ai_platform_network_post_init+0x164>)
 8021f5e:	4949      	ldr	r1, [pc, #292]	; (8022084 <ai_platform_network_post_init+0x168>)
 8021f60:	4a49      	ldr	r2, [pc, #292]	; (8022088 <ai_platform_network_post_init+0x16c>)
 8021f62:	6019      	str	r1, [r3, #0]
 8021f64:	681b      	ldr	r3, [r3, #0]
 8021f66:	4293      	cmp	r3, r2
 8021f68:	d00d      	beq.n	8021f86 <ai_platform_network_post_init+0x6a>
 8021f6a:	e7fe      	b.n	8021f6a <ai_platform_network_post_init+0x4e>
 8021f6c:	2301      	movs	r3, #1
 8021f6e:	f100 0208 	add.w	r2, r0, #8
 8021f72:	6083      	str	r3, [r0, #8]
 8021f74:	6813      	ldr	r3, [r2, #0]
 8021f76:	2b00      	cmp	r3, #0
 8021f78:	d1fc      	bne.n	8021f74 <ai_platform_network_post_init+0x58>
 8021f7a:	4a42      	ldr	r2, [pc, #264]	; (8022084 <ai_platform_network_post_init+0x168>)
 8021f7c:	4b42      	ldr	r3, [pc, #264]	; (8022088 <ai_platform_network_post_init+0x16c>)
 8021f7e:	6002      	str	r2, [r0, #0]
 8021f80:	6802      	ldr	r2, [r0, #0]
 8021f82:	429a      	cmp	r2, r3
 8021f84:	d103      	bne.n	8021f8e <ai_platform_network_post_init+0x72>
 8021f86:	f7fe fe4f 	bl	8020c28 <_ai_platform_release_crc>
 8021f8a:	2000      	movs	r0, #0
 8021f8c:	bd38      	pop	{r3, r4, r5, pc}
 8021f8e:	e7fe      	b.n	8021f8e <ai_platform_network_post_init+0x72>
 8021f90:	4a37      	ldr	r2, [pc, #220]	; (8022070 <ai_platform_network_post_init+0x154>)
 8021f92:	6813      	ldr	r3, [r2, #0]
 8021f94:	f023 0301 	bic.w	r3, r3, #1
 8021f98:	6013      	str	r3, [r2, #0]
 8021f9a:	f7fe fe43 	bl	8020c24 <_ai_platform_acquire_crc>
 8021f9e:	4b35      	ldr	r3, [pc, #212]	; (8022074 <ai_platform_network_post_init+0x158>)
 8021fa0:	f020 5280 	bic.w	r2, r0, #268435456	; 0x10000000
 8021fa4:	429a      	cmp	r2, r3
 8021fa6:	d022      	beq.n	8021fee <ai_platform_network_post_init+0xd2>
 8021fa8:	2218      	movs	r2, #24
 8021faa:	4b33      	ldr	r3, [pc, #204]	; (8022078 <ai_platform_network_post_init+0x15c>)
 8021fac:	601a      	str	r2, [r3, #0]
 8021fae:	681a      	ldr	r2, [r3, #0]
 8021fb0:	2a18      	cmp	r2, #24
 8021fb2:	d041      	beq.n	8022038 <ai_platform_network_post_init+0x11c>
 8021fb4:	4b31      	ldr	r3, [pc, #196]	; (802207c <ai_platform_network_post_init+0x160>)
 8021fb6:	2201      	movs	r2, #1
 8021fb8:	4619      	mov	r1, r3
 8021fba:	601a      	str	r2, [r3, #0]
 8021fbc:	680b      	ldr	r3, [r1, #0]
 8021fbe:	2b00      	cmp	r3, #0
 8021fc0:	d1fc      	bne.n	8021fbc <ai_platform_network_post_init+0xa0>
 8021fc2:	4b2f      	ldr	r3, [pc, #188]	; (8022080 <ai_platform_network_post_init+0x164>)
 8021fc4:	492f      	ldr	r1, [pc, #188]	; (8022084 <ai_platform_network_post_init+0x168>)
 8021fc6:	4a30      	ldr	r2, [pc, #192]	; (8022088 <ai_platform_network_post_init+0x16c>)
 8021fc8:	6019      	str	r1, [r3, #0]
 8021fca:	681b      	ldr	r3, [r3, #0]
 8021fcc:	4293      	cmp	r3, r2
 8021fce:	d01b      	beq.n	8022008 <ai_platform_network_post_init+0xec>
 8021fd0:	e7fe      	b.n	8021fd0 <ai_platform_network_post_init+0xb4>
 8021fd2:	2201      	movs	r2, #1
 8021fd4:	4619      	mov	r1, r3
 8021fd6:	601a      	str	r2, [r3, #0]
 8021fd8:	680b      	ldr	r3, [r1, #0]
 8021fda:	2b00      	cmp	r3, #0
 8021fdc:	d1fc      	bne.n	8021fd8 <ai_platform_network_post_init+0xbc>
 8021fde:	4b25      	ldr	r3, [pc, #148]	; (8022074 <ai_platform_network_post_init+0x158>)
 8021fe0:	4928      	ldr	r1, [pc, #160]	; (8022084 <ai_platform_network_post_init+0x168>)
 8021fe2:	4a29      	ldr	r2, [pc, #164]	; (8022088 <ai_platform_network_post_init+0x16c>)
 8021fe4:	6019      	str	r1, [r3, #0]
 8021fe6:	681b      	ldr	r3, [r3, #0]
 8021fe8:	4293      	cmp	r3, r2
 8021fea:	d0cc      	beq.n	8021f86 <ai_platform_network_post_init+0x6a>
 8021fec:	e7fe      	b.n	8021fec <ai_platform_network_post_init+0xd0>
 8021fee:	2301      	movs	r3, #1
 8021ff0:	f100 0208 	add.w	r2, r0, #8
 8021ff4:	6083      	str	r3, [r0, #8]
 8021ff6:	6813      	ldr	r3, [r2, #0]
 8021ff8:	2b00      	cmp	r3, #0
 8021ffa:	d1fc      	bne.n	8021ff6 <ai_platform_network_post_init+0xda>
 8021ffc:	4a21      	ldr	r2, [pc, #132]	; (8022084 <ai_platform_network_post_init+0x168>)
 8021ffe:	4b22      	ldr	r3, [pc, #136]	; (8022088 <ai_platform_network_post_init+0x16c>)
 8022000:	6002      	str	r2, [r0, #0]
 8022002:	6802      	ldr	r2, [r0, #0]
 8022004:	429a      	cmp	r2, r3
 8022006:	d125      	bne.n	8022054 <ai_platform_network_post_init+0x138>
 8022008:	f7fe fe0e 	bl	8020c28 <_ai_platform_release_crc>
 802200c:	68e3      	ldr	r3, [r4, #12]
 802200e:	f013 0502 	ands.w	r5, r3, #2
 8022012:	d022      	beq.n	802205a <ai_platform_network_post_init+0x13e>
 8022014:	4620      	mov	r0, r4
 8022016:	f001 fbfd 	bl	8023814 <ai_layers_post_init_all>
 802201a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802201c:	b1db      	cbz	r3, 8022056 <ai_platform_network_post_init+0x13a>
 802201e:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8022020:	b1cd      	cbz	r5, 8022056 <ai_platform_network_post_init+0x13a>
 8022022:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8022024:	4629      	mov	r1, r5
 8022026:	2000      	movs	r0, #0
 8022028:	4798      	blx	r3
 802202a:	692b      	ldr	r3, [r5, #16]
 802202c:	42ab      	cmp	r3, r5
 802202e:	d012      	beq.n	8022056 <ai_platform_network_post_init+0x13a>
 8022030:	461d      	mov	r5, r3
 8022032:	b183      	cbz	r3, 8022056 <ai_platform_network_post_init+0x13a>
 8022034:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8022036:	e7f4      	b.n	8022022 <ai_platform_network_post_init+0x106>
 8022038:	2201      	movs	r2, #1
 802203a:	4619      	mov	r1, r3
 802203c:	601a      	str	r2, [r3, #0]
 802203e:	680b      	ldr	r3, [r1, #0]
 8022040:	2b00      	cmp	r3, #0
 8022042:	d1fc      	bne.n	802203e <ai_platform_network_post_init+0x122>
 8022044:	4b0b      	ldr	r3, [pc, #44]	; (8022074 <ai_platform_network_post_init+0x158>)
 8022046:	490f      	ldr	r1, [pc, #60]	; (8022084 <ai_platform_network_post_init+0x168>)
 8022048:	4a0f      	ldr	r2, [pc, #60]	; (8022088 <ai_platform_network_post_init+0x16c>)
 802204a:	6019      	str	r1, [r3, #0]
 802204c:	681b      	ldr	r3, [r3, #0]
 802204e:	4293      	cmp	r3, r2
 8022050:	d0da      	beq.n	8022008 <ai_platform_network_post_init+0xec>
 8022052:	e7fe      	b.n	8022052 <ai_platform_network_post_init+0x136>
 8022054:	e7fe      	b.n	8022054 <ai_platform_network_post_init+0x138>
 8022056:	2001      	movs	r0, #1
 8022058:	bd38      	pop	{r3, r4, r5, pc}
 802205a:	f104 0010 	add.w	r0, r4, #16
 802205e:	2210      	movs	r2, #16
 8022060:	2111      	movs	r1, #17
 8022062:	f000 faad 	bl	80225c0 <core_set_error>
 8022066:	4628      	mov	r0, r5
 8022068:	bd38      	pop	{r3, r4, r5, pc}
 802206a:	bf00      	nop
 802206c:	a1c00100 	.word	0xa1c00100
 8022070:	e0002000 	.word	0xe0002000
 8022074:	40023000 	.word	0x40023000
 8022078:	40023008 	.word	0x40023008
 802207c:	50023008 	.word	0x50023008
 8022080:	50023000 	.word	0x50023000
 8022084:	f407a5c2 	.word	0xf407a5c2
 8022088:	b5e8b5cd 	.word	0xb5e8b5cd

0802208c <ai_platform_network_process>:
 802208c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022090:	b085      	sub	sp, #20
 8022092:	460d      	mov	r5, r1
 8022094:	9202      	str	r2, [sp, #8]
 8022096:	4604      	mov	r4, r0
 8022098:	b120      	cbz	r0, 80220a4 <ai_platform_network_process+0x18>
 802209a:	4b83      	ldr	r3, [pc, #524]	; (80222a8 <ai_platform_network_process+0x21c>)
 802209c:	6802      	ldr	r2, [r0, #0]
 802209e:	429a      	cmp	r2, r3
 80220a0:	bf18      	it	ne
 80220a2:	2400      	movne	r4, #0
 80220a4:	4a81      	ldr	r2, [pc, #516]	; (80222ac <ai_platform_network_process+0x220>)
 80220a6:	6813      	ldr	r3, [r2, #0]
 80220a8:	f023 0301 	bic.w	r3, r3, #1
 80220ac:	6013      	str	r3, [r2, #0]
 80220ae:	f7fe fdb9 	bl	8020c24 <_ai_platform_acquire_crc>
 80220b2:	4b7f      	ldr	r3, [pc, #508]	; (80222b0 <ai_platform_network_process+0x224>)
 80220b4:	f020 5280 	bic.w	r2, r0, #268435456	; 0x10000000
 80220b8:	429a      	cmp	r2, r3
 80220ba:	d014      	beq.n	80220e6 <ai_platform_network_process+0x5a>
 80220bc:	2218      	movs	r2, #24
 80220be:	4b7d      	ldr	r3, [pc, #500]	; (80222b4 <ai_platform_network_process+0x228>)
 80220c0:	601a      	str	r2, [r3, #0]
 80220c2:	681a      	ldr	r2, [r3, #0]
 80220c4:	2a18      	cmp	r2, #24
 80220c6:	d01c      	beq.n	8022102 <ai_platform_network_process+0x76>
 80220c8:	4b7b      	ldr	r3, [pc, #492]	; (80222b8 <ai_platform_network_process+0x22c>)
 80220ca:	2201      	movs	r2, #1
 80220cc:	4619      	mov	r1, r3
 80220ce:	601a      	str	r2, [r3, #0]
 80220d0:	680b      	ldr	r3, [r1, #0]
 80220d2:	2b00      	cmp	r3, #0
 80220d4:	d1fc      	bne.n	80220d0 <ai_platform_network_process+0x44>
 80220d6:	4b79      	ldr	r3, [pc, #484]	; (80222bc <ai_platform_network_process+0x230>)
 80220d8:	4979      	ldr	r1, [pc, #484]	; (80222c0 <ai_platform_network_process+0x234>)
 80220da:	4a7a      	ldr	r2, [pc, #488]	; (80222c4 <ai_platform_network_process+0x238>)
 80220dc:	6019      	str	r1, [r3, #0]
 80220de:	681b      	ldr	r3, [r3, #0]
 80220e0:	4293      	cmp	r3, r2
 80220e2:	d01c      	beq.n	802211e <ai_platform_network_process+0x92>
 80220e4:	e7fe      	b.n	80220e4 <ai_platform_network_process+0x58>
 80220e6:	2301      	movs	r3, #1
 80220e8:	6083      	str	r3, [r0, #8]
 80220ea:	f100 0308 	add.w	r3, r0, #8
 80220ee:	681a      	ldr	r2, [r3, #0]
 80220f0:	2a00      	cmp	r2, #0
 80220f2:	d1fc      	bne.n	80220ee <ai_platform_network_process+0x62>
 80220f4:	4a72      	ldr	r2, [pc, #456]	; (80222c0 <ai_platform_network_process+0x234>)
 80220f6:	4b73      	ldr	r3, [pc, #460]	; (80222c4 <ai_platform_network_process+0x238>)
 80220f8:	6002      	str	r2, [r0, #0]
 80220fa:	6802      	ldr	r2, [r0, #0]
 80220fc:	429a      	cmp	r2, r3
 80220fe:	d00e      	beq.n	802211e <ai_platform_network_process+0x92>
 8022100:	e7fe      	b.n	8022100 <ai_platform_network_process+0x74>
 8022102:	2201      	movs	r2, #1
 8022104:	4619      	mov	r1, r3
 8022106:	601a      	str	r2, [r3, #0]
 8022108:	680b      	ldr	r3, [r1, #0]
 802210a:	2b00      	cmp	r3, #0
 802210c:	d1fc      	bne.n	8022108 <ai_platform_network_process+0x7c>
 802210e:	4b68      	ldr	r3, [pc, #416]	; (80222b0 <ai_platform_network_process+0x224>)
 8022110:	496b      	ldr	r1, [pc, #428]	; (80222c0 <ai_platform_network_process+0x234>)
 8022112:	4a6c      	ldr	r2, [pc, #432]	; (80222c4 <ai_platform_network_process+0x238>)
 8022114:	6019      	str	r1, [r3, #0]
 8022116:	681b      	ldr	r3, [r3, #0]
 8022118:	4293      	cmp	r3, r2
 802211a:	f040 823e 	bne.w	802259a <ai_platform_network_process+0x50e>
 802211e:	f7fe fd83 	bl	8020c28 <_ai_platform_release_crc>
 8022122:	2c00      	cmp	r4, #0
 8022124:	f000 8242 	beq.w	80225ac <ai_platform_network_process+0x520>
 8022128:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 802212a:	2a00      	cmp	r2, #0
 802212c:	f000 808c 	beq.w	8022248 <ai_platform_network_process+0x1bc>
 8022130:	2600      	movs	r6, #0
 8022132:	68e3      	ldr	r3, [r4, #12]
 8022134:	6166      	str	r6, [r4, #20]
 8022136:	f003 0303 	and.w	r3, r3, #3
 802213a:	2b03      	cmp	r3, #3
 802213c:	f8d4 9030 	ldr.w	r9, [r4, #48]	; 0x30
 8022140:	f040 822c 	bne.w	802259c <ai_platform_network_process+0x510>
 8022144:	2d00      	cmp	r5, #0
 8022146:	f000 8086 	beq.w	8022256 <ai_platform_network_process+0x1ca>
 802214a:	f1b9 0f00 	cmp.w	r9, #0
 802214e:	f000 8082 	beq.w	8022256 <ai_platform_network_process+0x1ca>
 8022152:	f8b9 3000 	ldrh.w	r3, [r9]
 8022156:	2b00      	cmp	r3, #0
 8022158:	d07d      	beq.n	8022256 <ai_platform_network_process+0x1ca>
 802215a:	69aa      	ldr	r2, [r5, #24]
 802215c:	9401      	str	r4, [sp, #4]
 802215e:	6817      	ldr	r7, [r2, #0]
 8022160:	429e      	cmp	r6, r3
 8022162:	f080 80b1 	bcs.w	80222c8 <ai_platform_network_process+0x23c>
 8022166:	f8d9 3004 	ldr.w	r3, [r9, #4]
 802216a:	2b00      	cmp	r3, #0
 802216c:	f000 80ac 	beq.w	80222c8 <ai_platform_network_process+0x23c>
 8022170:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
 8022174:	2c00      	cmp	r4, #0
 8022176:	f000 80a7 	beq.w	80222c8 <ai_platform_network_process+0x23c>
 802217a:	f8d9 3008 	ldr.w	r3, [r9, #8]
 802217e:	ea4f 1806 	mov.w	r8, r6, lsl #4
 8022182:	f8d3 b000 	ldr.w	fp, [r3]
 8022186:	eb1b 0a08 	adds.w	sl, fp, r8
 802218a:	f000 808b 	beq.w	80222a4 <ai_platform_network_process+0x218>
 802218e:	69a3      	ldr	r3, [r4, #24]
 8022190:	2101      	movs	r1, #1
 8022192:	685b      	ldr	r3, [r3, #4]
 8022194:	4628      	mov	r0, r5
 8022196:	9303      	str	r3, [sp, #12]
 8022198:	f7fe fcf0 	bl	8020b7c <ai_buffer_get_size>
 802219c:	9b03      	ldr	r3, [sp, #12]
 802219e:	4283      	cmp	r3, r0
 80221a0:	d377      	bcc.n	8022292 <ai_platform_network_process+0x206>
 80221a2:	68e0      	ldr	r0, [r4, #12]
 80221a4:	69a9      	ldr	r1, [r5, #24]
 80221a6:	68c2      	ldr	r2, [r0, #12]
 80221a8:	68cb      	ldr	r3, [r1, #12]
 80221aa:	429a      	cmp	r2, r3
 80221ac:	d171      	bne.n	8022292 <ai_platform_network_process+0x206>
 80221ae:	6882      	ldr	r2, [r0, #8]
 80221b0:	688b      	ldr	r3, [r1, #8]
 80221b2:	429a      	cmp	r2, r3
 80221b4:	d16d      	bne.n	8022292 <ai_platform_network_process+0x206>
 80221b6:	6842      	ldr	r2, [r0, #4]
 80221b8:	684b      	ldr	r3, [r1, #4]
 80221ba:	429a      	cmp	r2, r3
 80221bc:	d169      	bne.n	8022292 <ai_platform_network_process+0x206>
 80221be:	69a3      	ldr	r3, [r4, #24]
 80221c0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80221c4:	f001 fc38 	bl	8023a38 <ai_array_get_data_byte_size>
 80221c8:	9003      	str	r0, [sp, #12]
 80221ca:	4620      	mov	r0, r4
 80221cc:	f001 fba6 	bl	802391c <get_tensor_byte_size>
 80221d0:	9b03      	ldr	r3, [sp, #12]
 80221d2:	4283      	cmp	r3, r0
 80221d4:	d35d      	bcc.n	8022292 <ai_platform_network_process+0x206>
 80221d6:	69a3      	ldr	r3, [r4, #24]
 80221d8:	6818      	ldr	r0, [r3, #0]
 80221da:	f001 fbb3 	bl	8023944 <ai_array_to_buffer_fmt>
 80221de:	682b      	ldr	r3, [r5, #0]
 80221e0:	4043      	eors	r3, r0
 80221e2:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 80221e6:	d14b      	bne.n	8022280 <ai_platform_network_process+0x1f4>
 80221e8:	686b      	ldr	r3, [r5, #4]
 80221ea:	2b00      	cmp	r3, #0
 80221ec:	d05a      	beq.n	80222a4 <ai_platform_network_process+0x218>
 80221ee:	69ab      	ldr	r3, [r5, #24]
 80221f0:	681b      	ldr	r3, [r3, #0]
 80221f2:	2b00      	cmp	r3, #0
 80221f4:	d03a      	beq.n	802226c <ai_platform_network_process+0x1e0>
 80221f6:	4620      	mov	r0, r4
 80221f8:	9303      	str	r3, [sp, #12]
 80221fa:	f001 fb8f 	bl	802391c <get_tensor_byte_size>
 80221fe:	f8ca 0008 	str.w	r0, [sl, #8]
 8022202:	69aa      	ldr	r2, [r5, #24]
 8022204:	9b03      	ldr	r3, [sp, #12]
 8022206:	6812      	ldr	r2, [r2, #0]
 8022208:	429f      	cmp	r7, r3
 802220a:	fb02 f200 	mul.w	r2, r2, r0
 802220e:	f8ca 200c 	str.w	r2, [sl, #12]
 8022212:	6868      	ldr	r0, [r5, #4]
 8022214:	bf38      	it	cc
 8022216:	461f      	movcc	r7, r3
 8022218:	f8ca 0004 	str.w	r0, [sl, #4]
 802221c:	686b      	ldr	r3, [r5, #4]
 802221e:	4413      	add	r3, r2
 8022220:	f84b 3008 	str.w	r3, [fp, r8]
 8022224:	69a1      	ldr	r1, [r4, #24]
 8022226:	680b      	ldr	r3, [r1, #0]
 8022228:	009b      	lsls	r3, r3, #2
 802222a:	d408      	bmi.n	802223e <ai_platform_network_process+0x1b2>
 802222c:	e9d1 3202 	ldrd	r3, r2, [r1, #8]
 8022230:	1a9b      	subs	r3, r3, r2
 8022232:	4418      	add	r0, r3
 8022234:	6088      	str	r0, [r1, #8]
 8022236:	69a3      	ldr	r3, [r4, #24]
 8022238:	f8da 2004 	ldr.w	r2, [sl, #4]
 802223c:	60da      	str	r2, [r3, #12]
 802223e:	f8b9 3000 	ldrh.w	r3, [r9]
 8022242:	3601      	adds	r6, #1
 8022244:	351c      	adds	r5, #28
 8022246:	e78b      	b.n	8022160 <ai_platform_network_process+0xd4>
 8022248:	68e3      	ldr	r3, [r4, #12]
 802224a:	6162      	str	r2, [r4, #20]
 802224c:	f003 0303 	and.w	r3, r3, #3
 8022250:	2b03      	cmp	r3, #3
 8022252:	f040 81a3 	bne.w	802259c <ai_platform_network_process+0x510>
 8022256:	f104 0010 	add.w	r0, r4, #16
 802225a:	2217      	movs	r2, #23
 802225c:	2112      	movs	r1, #18
 802225e:	f000 f9af 	bl	80225c0 <core_set_error>
 8022262:	2300      	movs	r3, #0
 8022264:	4618      	mov	r0, r3
 8022266:	b005      	add	sp, #20
 8022268:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802226c:	469a      	mov	sl, r3
 802226e:	9c01      	ldr	r4, [sp, #4]
 8022270:	2221      	movs	r2, #33	; 0x21
 8022272:	f104 0010 	add.w	r0, r4, #16
 8022276:	2112      	movs	r1, #18
 8022278:	f000 f9a2 	bl	80225c0 <core_set_error>
 802227c:	4653      	mov	r3, sl
 802227e:	e7f1      	b.n	8022264 <ai_platform_network_process+0x1d8>
 8022280:	9c01      	ldr	r4, [sp, #4]
 8022282:	2219      	movs	r2, #25
 8022284:	f104 0010 	add.w	r0, r4, #16
 8022288:	2112      	movs	r1, #18
 802228a:	f000 f999 	bl	80225c0 <core_set_error>
 802228e:	2300      	movs	r3, #0
 8022290:	e7e8      	b.n	8022264 <ai_platform_network_process+0x1d8>
 8022292:	9c01      	ldr	r4, [sp, #4]
 8022294:	2218      	movs	r2, #24
 8022296:	f104 0010 	add.w	r0, r4, #16
 802229a:	2112      	movs	r1, #18
 802229c:	f000 f990 	bl	80225c0 <core_set_error>
 80222a0:	2300      	movs	r3, #0
 80222a2:	e7df      	b.n	8022264 <ai_platform_network_process+0x1d8>
 80222a4:	9c01      	ldr	r4, [sp, #4]
 80222a6:	e7d6      	b.n	8022256 <ai_platform_network_process+0x1ca>
 80222a8:	a1c00100 	.word	0xa1c00100
 80222ac:	e0002000 	.word	0xe0002000
 80222b0:	40023000 	.word	0x40023000
 80222b4:	40023008 	.word	0x40023008
 80222b8:	50023008 	.word	0x50023008
 80222bc:	50023000 	.word	0x50023000
 80222c0:	f407a5c2 	.word	0xf407a5c2
 80222c4:	b5e8b5cd 	.word	0xb5e8b5cd
 80222c8:	9c01      	ldr	r4, [sp, #4]
 80222ca:	9a02      	ldr	r2, [sp, #8]
 80222cc:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 80222ce:	2a00      	cmp	r2, #0
 80222d0:	f000 80ae 	beq.w	8022430 <ai_platform_network_process+0x3a4>
 80222d4:	2b01      	cmp	r3, #1
 80222d6:	f240 80a1 	bls.w	802241c <ai_platform_network_process+0x390>
 80222da:	f8d4 9030 	ldr.w	r9, [r4, #48]	; 0x30
 80222de:	f119 0f0c 	cmn.w	r9, #12
 80222e2:	f000 809b 	beq.w	802241c <ai_platform_network_process+0x390>
 80222e6:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80222ea:	2b00      	cmp	r3, #0
 80222ec:	f000 8096 	beq.w	802241c <ai_platform_network_process+0x390>
 80222f0:	f04f 0800 	mov.w	r8, #0
 80222f4:	9d02      	ldr	r5, [sp, #8]
 80222f6:	9401      	str	r4, [sp, #4]
 80222f8:	4598      	cmp	r8, r3
 80222fa:	f080 8097 	bcs.w	802242c <ai_platform_network_process+0x3a0>
 80222fe:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8022302:	2b00      	cmp	r3, #0
 8022304:	f000 8092 	beq.w	802242c <ai_platform_network_process+0x3a0>
 8022308:	f853 4028 	ldr.w	r4, [r3, r8, lsl #2]
 802230c:	2c00      	cmp	r4, #0
 802230e:	f000 808d 	beq.w	802242c <ai_platform_network_process+0x3a0>
 8022312:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8022316:	ea4f 1608 	mov.w	r6, r8, lsl #4
 802231a:	f8d3 b000 	ldr.w	fp, [r3]
 802231e:	eb1b 0a06 	adds.w	sl, fp, r6
 8022322:	f000 8131 	beq.w	8022588 <ai_platform_network_process+0x4fc>
 8022326:	69a3      	ldr	r3, [r4, #24]
 8022328:	2101      	movs	r1, #1
 802232a:	685b      	ldr	r3, [r3, #4]
 802232c:	4628      	mov	r0, r5
 802232e:	9302      	str	r3, [sp, #8]
 8022330:	f7fe fc24 	bl	8020b7c <ai_buffer_get_size>
 8022334:	9b02      	ldr	r3, [sp, #8]
 8022336:	4283      	cmp	r3, r0
 8022338:	d36f      	bcc.n	802241a <ai_platform_network_process+0x38e>
 802233a:	68e0      	ldr	r0, [r4, #12]
 802233c:	69a9      	ldr	r1, [r5, #24]
 802233e:	68c2      	ldr	r2, [r0, #12]
 8022340:	68cb      	ldr	r3, [r1, #12]
 8022342:	429a      	cmp	r2, r3
 8022344:	d169      	bne.n	802241a <ai_platform_network_process+0x38e>
 8022346:	6882      	ldr	r2, [r0, #8]
 8022348:	688b      	ldr	r3, [r1, #8]
 802234a:	429a      	cmp	r2, r3
 802234c:	d165      	bne.n	802241a <ai_platform_network_process+0x38e>
 802234e:	6842      	ldr	r2, [r0, #4]
 8022350:	684b      	ldr	r3, [r1, #4]
 8022352:	429a      	cmp	r2, r3
 8022354:	d161      	bne.n	802241a <ai_platform_network_process+0x38e>
 8022356:	69a3      	ldr	r3, [r4, #24]
 8022358:	e9d3 0100 	ldrd	r0, r1, [r3]
 802235c:	f001 fb6c 	bl	8023a38 <ai_array_get_data_byte_size>
 8022360:	9002      	str	r0, [sp, #8]
 8022362:	4620      	mov	r0, r4
 8022364:	f001 fada 	bl	802391c <get_tensor_byte_size>
 8022368:	9b02      	ldr	r3, [sp, #8]
 802236a:	4283      	cmp	r3, r0
 802236c:	d355      	bcc.n	802241a <ai_platform_network_process+0x38e>
 802236e:	69a3      	ldr	r3, [r4, #24]
 8022370:	6818      	ldr	r0, [r3, #0]
 8022372:	f001 fae7 	bl	8023944 <ai_array_to_buffer_fmt>
 8022376:	682b      	ldr	r3, [r5, #0]
 8022378:	4043      	eors	r3, r0
 802237a:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 802237e:	d143      	bne.n	8022408 <ai_platform_network_process+0x37c>
 8022380:	686b      	ldr	r3, [r5, #4]
 8022382:	2b00      	cmp	r3, #0
 8022384:	d036      	beq.n	80223f4 <ai_platform_network_process+0x368>
 8022386:	69ab      	ldr	r3, [r5, #24]
 8022388:	681b      	ldr	r3, [r3, #0]
 802238a:	b34b      	cbz	r3, 80223e0 <ai_platform_network_process+0x354>
 802238c:	4620      	mov	r0, r4
 802238e:	9302      	str	r3, [sp, #8]
 8022390:	f001 fac4 	bl	802391c <get_tensor_byte_size>
 8022394:	f8ca 0008 	str.w	r0, [sl, #8]
 8022398:	69aa      	ldr	r2, [r5, #24]
 802239a:	9b02      	ldr	r3, [sp, #8]
 802239c:	6812      	ldr	r2, [r2, #0]
 802239e:	429f      	cmp	r7, r3
 80223a0:	fb02 f200 	mul.w	r2, r2, r0
 80223a4:	f8ca 200c 	str.w	r2, [sl, #12]
 80223a8:	6868      	ldr	r0, [r5, #4]
 80223aa:	bf38      	it	cc
 80223ac:	461f      	movcc	r7, r3
 80223ae:	f8ca 0004 	str.w	r0, [sl, #4]
 80223b2:	686b      	ldr	r3, [r5, #4]
 80223b4:	4413      	add	r3, r2
 80223b6:	f84b 3006 	str.w	r3, [fp, r6]
 80223ba:	69a1      	ldr	r1, [r4, #24]
 80223bc:	680b      	ldr	r3, [r1, #0]
 80223be:	009e      	lsls	r6, r3, #2
 80223c0:	d408      	bmi.n	80223d4 <ai_platform_network_process+0x348>
 80223c2:	e9d1 3202 	ldrd	r3, r2, [r1, #8]
 80223c6:	1a9b      	subs	r3, r3, r2
 80223c8:	4418      	add	r0, r3
 80223ca:	6088      	str	r0, [r1, #8]
 80223cc:	69a3      	ldr	r3, [r4, #24]
 80223ce:	f8da 2004 	ldr.w	r2, [sl, #4]
 80223d2:	60da      	str	r2, [r3, #12]
 80223d4:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80223d8:	f108 0801 	add.w	r8, r8, #1
 80223dc:	351c      	adds	r5, #28
 80223de:	e78b      	b.n	80222f8 <ai_platform_network_process+0x26c>
 80223e0:	469a      	mov	sl, r3
 80223e2:	9c01      	ldr	r4, [sp, #4]
 80223e4:	2221      	movs	r2, #33	; 0x21
 80223e6:	f104 0010 	add.w	r0, r4, #16
 80223ea:	2113      	movs	r1, #19
 80223ec:	f000 f8e8 	bl	80225c0 <core_set_error>
 80223f0:	4653      	mov	r3, sl
 80223f2:	e737      	b.n	8022264 <ai_platform_network_process+0x1d8>
 80223f4:	469a      	mov	sl, r3
 80223f6:	9c01      	ldr	r4, [sp, #4]
 80223f8:	2217      	movs	r2, #23
 80223fa:	f104 0010 	add.w	r0, r4, #16
 80223fe:	2113      	movs	r1, #19
 8022400:	f000 f8de 	bl	80225c0 <core_set_error>
 8022404:	4653      	mov	r3, sl
 8022406:	e72d      	b.n	8022264 <ai_platform_network_process+0x1d8>
 8022408:	9c01      	ldr	r4, [sp, #4]
 802240a:	2219      	movs	r2, #25
 802240c:	f104 0010 	add.w	r0, r4, #16
 8022410:	2113      	movs	r1, #19
 8022412:	f000 f8d5 	bl	80225c0 <core_set_error>
 8022416:	2300      	movs	r3, #0
 8022418:	e724      	b.n	8022264 <ai_platform_network_process+0x1d8>
 802241a:	9c01      	ldr	r4, [sp, #4]
 802241c:	f104 0010 	add.w	r0, r4, #16
 8022420:	2218      	movs	r2, #24
 8022422:	2113      	movs	r1, #19
 8022424:	f000 f8cc 	bl	80225c0 <core_set_error>
 8022428:	2300      	movs	r3, #0
 802242a:	e71b      	b.n	8022264 <ai_platform_network_process+0x1d8>
 802242c:	9c01      	ldr	r4, [sp, #4]
 802242e:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 8022430:	82a7      	strh	r7, [r4, #20]
 8022432:	2b00      	cmp	r3, #0
 8022434:	f000 80a5 	beq.w	8022582 <ai_platform_network_process+0x4f6>
 8022438:	2b01      	cmp	r3, #1
 802243a:	6b25      	ldr	r5, [r4, #48]	; 0x30
 802243c:	f240 809f 	bls.w	802257e <ai_platform_network_process+0x4f2>
 8022440:	f105 070c 	add.w	r7, r5, #12
 8022444:	8ae3      	ldrh	r3, [r4, #22]
 8022446:	8aa2      	ldrh	r2, [r4, #20]
 8022448:	429a      	cmp	r2, r3
 802244a:	f67f af0b 	bls.w	8022264 <ai_platform_network_process+0x1d8>
 802244e:	2d00      	cmp	r5, #0
 8022450:	d035      	beq.n	80224be <ai_platform_network_process+0x432>
 8022452:	882b      	ldrh	r3, [r5, #0]
 8022454:	2b00      	cmp	r3, #0
 8022456:	d032      	beq.n	80224be <ai_platform_network_process+0x432>
 8022458:	686b      	ldr	r3, [r5, #4]
 802245a:	2b00      	cmp	r3, #0
 802245c:	d02f      	beq.n	80224be <ai_platform_network_process+0x432>
 802245e:	681b      	ldr	r3, [r3, #0]
 8022460:	f04f 0800 	mov.w	r8, #0
 8022464:	b35b      	cbz	r3, 80224be <ai_platform_network_process+0x432>
 8022466:	68a9      	ldr	r1, [r5, #8]
 8022468:	699a      	ldr	r2, [r3, #24]
 802246a:	f8d1 a000 	ldr.w	sl, [r1]
 802246e:	6811      	ldr	r1, [r2, #0]
 8022470:	ea4f 1908 	mov.w	r9, r8, lsl #4
 8022474:	eb0a 0609 	add.w	r6, sl, r9
 8022478:	0089      	lsls	r1, r1, #2
 802247a:	f8d6 c004 	ldr.w	ip, [r6, #4]
 802247e:	6890      	ldr	r0, [r2, #8]
 8022480:	d478      	bmi.n	8022574 <ai_platform_network_process+0x4e8>
 8022482:	68d1      	ldr	r1, [r2, #12]
 8022484:	1a40      	subs	r0, r0, r1
 8022486:	eb0c 0100 	add.w	r1, ip, r0
 802248a:	6091      	str	r1, [r2, #8]
 802248c:	699b      	ldr	r3, [r3, #24]
 802248e:	6872      	ldr	r2, [r6, #4]
 8022490:	60da      	str	r2, [r3, #12]
 8022492:	f85a 2009 	ldr.w	r2, [sl, r9]
 8022496:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
 802249a:	440b      	add	r3, r1
 802249c:	4293      	cmp	r3, r2
 802249e:	bf28      	it	cs
 80224a0:	68f3      	ldrcs	r3, [r6, #12]
 80224a2:	f108 0801 	add.w	r8, r8, #1
 80224a6:	bf28      	it	cs
 80224a8:	1ad3      	subcs	r3, r2, r3
 80224aa:	6073      	str	r3, [r6, #4]
 80224ac:	882b      	ldrh	r3, [r5, #0]
 80224ae:	4598      	cmp	r8, r3
 80224b0:	d205      	bcs.n	80224be <ai_platform_network_process+0x432>
 80224b2:	686b      	ldr	r3, [r5, #4]
 80224b4:	b11b      	cbz	r3, 80224be <ai_platform_network_process+0x432>
 80224b6:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 80224ba:	2b00      	cmp	r3, #0
 80224bc:	d1d3      	bne.n	8022466 <ai_platform_network_process+0x3da>
 80224be:	4620      	mov	r0, r4
 80224c0:	f001 f9be 	bl	8023840 <ai_layers_forward_all>
 80224c4:	2f00      	cmp	r7, #0
 80224c6:	d04c      	beq.n	8022562 <ai_platform_network_process+0x4d6>
 80224c8:	883b      	ldrh	r3, [r7, #0]
 80224ca:	2b00      	cmp	r3, #0
 80224cc:	d049      	beq.n	8022562 <ai_platform_network_process+0x4d6>
 80224ce:	687b      	ldr	r3, [r7, #4]
 80224d0:	2b00      	cmp	r3, #0
 80224d2:	d046      	beq.n	8022562 <ai_platform_network_process+0x4d6>
 80224d4:	6818      	ldr	r0, [r3, #0]
 80224d6:	2800      	cmp	r0, #0
 80224d8:	d043      	beq.n	8022562 <ai_platform_network_process+0x4d6>
 80224da:	f04f 0800 	mov.w	r8, #0
 80224de:	e01c      	b.n	802251a <ai_platform_network_process+0x48e>
 80224e0:	f85a 2009 	ldr.w	r2, [sl, r9]
 80224e4:	f108 0801 	add.w	r8, r8, #1
 80224e8:	4596      	cmp	lr, r2
 80224ea:	bf24      	itt	cs
 80224ec:	68f3      	ldrcs	r3, [r6, #12]
 80224ee:	eba2 0e03 	subcs.w	lr, r2, r3
 80224f2:	f8c6 e004 	str.w	lr, [r6, #4]
 80224f6:	6981      	ldr	r1, [r0, #24]
 80224f8:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 80224fc:	1ad2      	subs	r2, r2, r3
 80224fe:	eb0e 0302 	add.w	r3, lr, r2
 8022502:	608b      	str	r3, [r1, #8]
 8022504:	6983      	ldr	r3, [r0, #24]
 8022506:	6872      	ldr	r2, [r6, #4]
 8022508:	60da      	str	r2, [r3, #12]
 802250a:	883b      	ldrh	r3, [r7, #0]
 802250c:	4598      	cmp	r8, r3
 802250e:	d228      	bcs.n	8022562 <ai_platform_network_process+0x4d6>
 8022510:	687b      	ldr	r3, [r7, #4]
 8022512:	b333      	cbz	r3, 8022562 <ai_platform_network_process+0x4d6>
 8022514:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8022518:	b318      	cbz	r0, 8022562 <ai_platform_network_process+0x4d6>
 802251a:	68bb      	ldr	r3, [r7, #8]
 802251c:	6981      	ldr	r1, [r0, #24]
 802251e:	f8d3 a000 	ldr.w	sl, [r3]
 8022522:	680b      	ldr	r3, [r1, #0]
 8022524:	ea4f 1908 	mov.w	r9, r8, lsl #4
 8022528:	eb0a 0609 	add.w	r6, sl, r9
 802252c:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8022530:	e9d6 c201 	ldrd	ip, r2, [r6, #4]
 8022534:	eb0c 0e02 	add.w	lr, ip, r2
 8022538:	d0d2      	beq.n	80224e0 <ai_platform_network_process+0x454>
 802253a:	6889      	ldr	r1, [r1, #8]
 802253c:	4660      	mov	r0, ip
 802253e:	f001 fb67 	bl	8023c10 <memcpy>
 8022542:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
 8022546:	f85a 2009 	ldr.w	r2, [sl, r9]
 802254a:	440b      	add	r3, r1
 802254c:	4293      	cmp	r3, r2
 802254e:	bf28      	it	cs
 8022550:	68f3      	ldrcs	r3, [r6, #12]
 8022552:	f108 0801 	add.w	r8, r8, #1
 8022556:	bf28      	it	cs
 8022558:	1ad3      	subcs	r3, r2, r3
 802255a:	6073      	str	r3, [r6, #4]
 802255c:	883b      	ldrh	r3, [r7, #0]
 802255e:	4598      	cmp	r8, r3
 8022560:	d3d6      	bcc.n	8022510 <ai_platform_network_process+0x484>
 8022562:	8ae3      	ldrh	r3, [r4, #22]
 8022564:	8aa2      	ldrh	r2, [r4, #20]
 8022566:	3301      	adds	r3, #1
 8022568:	b29b      	uxth	r3, r3
 802256a:	429a      	cmp	r2, r3
 802256c:	82e3      	strh	r3, [r4, #22]
 802256e:	f63f af6e 	bhi.w	802244e <ai_platform_network_process+0x3c2>
 8022572:	e677      	b.n	8022264 <ai_platform_network_process+0x1d8>
 8022574:	4661      	mov	r1, ip
 8022576:	68b2      	ldr	r2, [r6, #8]
 8022578:	f001 fb4a 	bl	8023c10 <memcpy>
 802257c:	e789      	b.n	8022492 <ai_platform_network_process+0x406>
 802257e:	2700      	movs	r7, #0
 8022580:	e760      	b.n	8022444 <ai_platform_network_process+0x3b8>
 8022582:	461d      	mov	r5, r3
 8022584:	461f      	mov	r7, r3
 8022586:	e75d      	b.n	8022444 <ai_platform_network_process+0x3b8>
 8022588:	9c01      	ldr	r4, [sp, #4]
 802258a:	2217      	movs	r2, #23
 802258c:	f104 0010 	add.w	r0, r4, #16
 8022590:	2113      	movs	r1, #19
 8022592:	f000 f815 	bl	80225c0 <core_set_error>
 8022596:	4653      	mov	r3, sl
 8022598:	e664      	b.n	8022264 <ai_platform_network_process+0x1d8>
 802259a:	e7fe      	b.n	802259a <ai_platform_network_process+0x50e>
 802259c:	f104 0010 	add.w	r0, r4, #16
 80225a0:	2230      	movs	r2, #48	; 0x30
 80225a2:	2111      	movs	r1, #17
 80225a4:	f000 f80c 	bl	80225c0 <core_set_error>
 80225a8:	2300      	movs	r3, #0
 80225aa:	e65b      	b.n	8022264 <ai_platform_network_process+0x1d8>
 80225ac:	4623      	mov	r3, r4
 80225ae:	e659      	b.n	8022264 <ai_platform_network_process+0x1d8>

080225b0 <core_init>:
 80225b0:	2001      	movs	r0, #1
 80225b2:	4770      	bx	lr

080225b4 <core_get_error>:
 80225b4:	4603      	mov	r3, r0
 80225b6:	2200      	movs	r2, #0
 80225b8:	6800      	ldr	r0, [r0, #0]
 80225ba:	601a      	str	r2, [r3, #0]
 80225bc:	4770      	bx	lr
 80225be:	bf00      	nop

080225c0 <core_set_error>:
 80225c0:	4603      	mov	r3, r0
 80225c2:	7800      	ldrb	r0, [r0, #0]
 80225c4:	b930      	cbnz	r0, 80225d4 <core_set_error+0x14>
 80225c6:	7019      	strb	r1, [r3, #0]
 80225c8:	6819      	ldr	r1, [r3, #0]
 80225ca:	2001      	movs	r0, #1
 80225cc:	f362 211f 	bfi	r1, r2, #8, #24
 80225d0:	6019      	str	r1, [r3, #0]
 80225d2:	4770      	bx	lr
 80225d4:	2000      	movs	r0, #0
 80225d6:	4770      	bx	lr

080225d8 <forward_dense>:
 80225d8:	6983      	ldr	r3, [r0, #24]
 80225da:	8819      	ldrh	r1, [r3, #0]
 80225dc:	2900      	cmp	r1, #0
 80225de:	f000 818d 	beq.w	80228fc <forward_dense+0x324>
 80225e2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80225e6:	f8d3 c004 	ldr.w	ip, [r3, #4]
 80225ea:	b099      	sub	sp, #100	; 0x64
 80225ec:	f8dc 6004 	ldr.w	r6, [ip, #4]
 80225f0:	b106      	cbz	r6, 80225f4 <forward_dense+0x1c>
 80225f2:	6836      	ldr	r6, [r6, #0]
 80225f4:	2901      	cmp	r1, #1
 80225f6:	f240 817e 	bls.w	80228f6 <forward_dense+0x31e>
 80225fa:	f8dc 4010 	ldr.w	r4, [ip, #16]
 80225fe:	b104      	cbz	r4, 8022602 <forward_dense+0x2a>
 8022600:	6824      	ldr	r4, [r4, #0]
 8022602:	2902      	cmp	r1, #2
 8022604:	f000 817c 	beq.w	8022900 <forward_dense+0x328>
 8022608:	f8dc 301c 	ldr.w	r3, [ip, #28]
 802260c:	2b00      	cmp	r3, #0
 802260e:	f040 817a 	bne.w	8022906 <forward_dense+0x32e>
 8022612:	f11c 0218 	adds.w	r2, ip, #24
 8022616:	930d      	str	r3, [sp, #52]	; 0x34
 8022618:	f000 817b 	beq.w	8022912 <forward_dense+0x33a>
 802261c:	f8bc 2018 	ldrh.w	r2, [ip, #24]
 8022620:	2a01      	cmp	r2, #1
 8022622:	f240 83a4 	bls.w	8022d6e <forward_dense+0x796>
 8022626:	2b00      	cmp	r3, #0
 8022628:	f000 8175 	beq.w	8022916 <forward_dense+0x33e>
 802262c:	685b      	ldr	r3, [r3, #4]
 802262e:	930e      	str	r3, [sp, #56]	; 0x38
 8022630:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022632:	68e2      	ldr	r2, [r4, #12]
 8022634:	6998      	ldr	r0, [r3, #24]
 8022636:	e9d2 7501 	ldrd	r7, r5, [r2, #4]
 802263a:	6803      	ldr	r3, [r0, #0]
 802263c:	9501      	str	r5, [sp, #4]
 802263e:	f3c3 5841 	ubfx	r8, r3, #21, #2
 8022642:	f3c3 19c6 	ubfx	r9, r3, #7, #7
 8022646:	fa49 f508 	asr.w	r5, r9, r8
 802264a:	f8d2 800c 	ldr.w	r8, [r2, #12]
 802264e:	68f2      	ldr	r2, [r6, #12]
 8022650:	9512      	str	r5, [sp, #72]	; 0x48
 8022652:	6852      	ldr	r2, [r2, #4]
 8022654:	9d01      	ldr	r5, [sp, #4]
 8022656:	2903      	cmp	r1, #3
 8022658:	fb05 f507 	mul.w	r5, r5, r7
 802265c:	9215      	str	r2, [sp, #84]	; 0x54
 802265e:	f000 836a 	beq.w	8022d36 <forward_dense+0x75e>
 8022662:	f8dc 2028 	ldr.w	r2, [ip, #40]	; 0x28
 8022666:	2a00      	cmp	r2, #0
 8022668:	f000 8368 	beq.w	8022d3c <forward_dense+0x764>
 802266c:	6812      	ldr	r2, [r2, #0]
 802266e:	2a00      	cmp	r2, #0
 8022670:	f000 8364 	beq.w	8022d3c <forward_dense+0x764>
 8022674:	f3c3 4343 	ubfx	r3, r3, #17, #4
 8022678:	2b04      	cmp	r3, #4
 802267a:	f8d2 9018 	ldr.w	r9, [r2, #24]
 802267e:	f000 8363 	beq.w	8022d48 <forward_dense+0x770>
 8022682:	2b08      	cmp	r3, #8
 8022684:	f000 8360 	beq.w	8022d48 <forward_dense+0x770>
 8022688:	f04f 0a00 	mov.w	sl, #0
 802268c:	69a3      	ldr	r3, [r4, #24]
 802268e:	00ad      	lsls	r5, r5, #2
 8022690:	6898      	ldr	r0, [r3, #8]
 8022692:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022694:	fb08 0405 	mla	r4, r8, r5, r0
 8022698:	695b      	ldr	r3, [r3, #20]
 802269a:	69b2      	ldr	r2, [r6, #24]
 802269c:	685b      	ldr	r3, [r3, #4]
 802269e:	00bd      	lsls	r5, r7, #2
 80226a0:	42a0      	cmp	r0, r4
 80226a2:	9002      	str	r0, [sp, #8]
 80226a4:	9410      	str	r4, [sp, #64]	; 0x40
 80226a6:	950f      	str	r5, [sp, #60]	; 0x3c
 80226a8:	6891      	ldr	r1, [r2, #8]
 80226aa:	eb00 0805 	add.w	r8, r0, r5
 80226ae:	9304      	str	r3, [sp, #16]
 80226b0:	f080 811e 	bcs.w	80228f0 <forward_dense+0x318>
 80226b4:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80226b6:	eddf 6a9e 	vldr	s13, [pc, #632]	; 8022930 <forward_dense+0x358>
 80226ba:	08e8      	lsrs	r0, r5, #3
 80226bc:	4606      	mov	r6, r0
 80226be:	0142      	lsls	r2, r0, #5
 80226c0:	f025 0301 	bic.w	r3, r5, #1
 80226c4:	ebc2 0383 	rsb	r3, r2, r3, lsl #2
 80226c8:	9001      	str	r0, [sp, #4]
 80226ca:	ebc0 60c0 	rsb	r0, r0, r0, lsl #27
 80226ce:	00f7      	lsls	r7, r6, #3
 80226d0:	9316      	str	r3, [sp, #88]	; 0x58
 80226d2:	0143      	lsls	r3, r0, #5
 80226d4:	00b6      	lsls	r6, r6, #2
 80226d6:	9306      	str	r3, [sp, #24]
 80226d8:	f107 0308 	add.w	r3, r7, #8
 80226dc:	9303      	str	r3, [sp, #12]
 80226de:	1d33      	adds	r3, r6, #4
 80226e0:	930c      	str	r3, [sp, #48]	; 0x30
 80226e2:	f005 0301 	and.w	r3, r5, #1
 80226e6:	9308      	str	r3, [sp, #32]
 80226e8:	00ab      	lsls	r3, r5, #2
 80226ea:	9311      	str	r3, [sp, #68]	; 0x44
 80226ec:	4653      	mov	r3, sl
 80226ee:	f1a5 0410 	sub.w	r4, r5, #16
 80226f2:	0924      	lsrs	r4, r4, #4
 80226f4:	3401      	adds	r4, #1
 80226f6:	01a4      	lsls	r4, r4, #6
 80226f8:	f005 0907 	and.w	r9, r5, #7
 80226fc:	9713      	str	r7, [sp, #76]	; 0x4c
 80226fe:	960b      	str	r6, [sp, #44]	; 0x2c
 8022700:	9417      	str	r4, [sp, #92]	; 0x5c
 8022702:	eb01 0b02 	add.w	fp, r1, r2
 8022706:	f8cd 9050 	str.w	r9, [sp, #80]	; 0x50
 802270a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 802270c:	9906      	ldr	r1, [sp, #24]
 802270e:	6992      	ldr	r2, [r2, #24]
 8022710:	4459      	add	r1, fp
 8022712:	6894      	ldr	r4, [r2, #8]
 8022714:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8022716:	9105      	str	r1, [sp, #20]
 8022718:	2a00      	cmp	r2, #0
 802271a:	f000 810b 	beq.w	8022934 <forward_dense+0x35c>
 802271e:	6992      	ldr	r2, [r2, #24]
 8022720:	6896      	ldr	r6, [r2, #8]
 8022722:	2b00      	cmp	r3, #0
 8022724:	f000 810a 	beq.w	802293c <forward_dense+0x364>
 8022728:	9a12      	ldr	r2, [sp, #72]	; 0x48
 802272a:	2a04      	cmp	r2, #4
 802272c:	f000 821a 	beq.w	8022b64 <forward_dense+0x58c>
 8022730:	9a02      	ldr	r2, [sp, #8]
 8022732:	4590      	cmp	r8, r2
 8022734:	f240 80d3 	bls.w	80228de <forward_dense+0x306>
 8022738:	4617      	mov	r7, r2
 802273a:	9a06      	ldr	r2, [sp, #24]
 802273c:	f8dd 9010 	ldr.w	r9, [sp, #16]
 8022740:	f102 0c20 	add.w	ip, r2, #32
 8022744:	44dc      	add	ip, fp
 8022746:	46be      	mov	lr, r7
 8022748:	4637      	mov	r7, r6
 802274a:	e9dd a613 	ldrd	sl, r6, [sp, #76]	; 0x4c
 802274e:	2f00      	cmp	r7, #0
 8022750:	f000 80e3 	beq.w	802291a <forward_dense+0x342>
 8022754:	9a01      	ldr	r2, [sp, #4]
 8022756:	edd7 5a00 	vldr	s11, [r7]
 802275a:	3704      	adds	r7, #4
 802275c:	2a00      	cmp	r2, #0
 802275e:	f000 80e2 	beq.w	8022926 <forward_dense+0x34e>
 8022762:	4661      	mov	r1, ip
 8022764:	ed9f 6a72 	vldr	s12, [pc, #456]	; 8022930 <forward_dense+0x358>
 8022768:	9803      	ldr	r0, [sp, #12]
 802276a:	f104 0208 	add.w	r2, r4, #8
 802276e:	1905      	adds	r5, r0, r4
 8022770:	f812 0c07 	ldrb.w	r0, [r2, #-7]
 8022774:	ed51 7a07 	vldr	s15, [r1, #-28]	; 0xffffffe4
 8022778:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 802277c:	ed90 7a00 	vldr	s14, [r0]
 8022780:	f812 0c08 	ldrb.w	r0, [r2, #-8]
 8022784:	ee67 7a27 	vmul.f32	s15, s14, s15
 8022788:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 802278c:	ed90 5a00 	vldr	s10, [r0]
 8022790:	ed11 7a08 	vldr	s14, [r1, #-32]	; 0xffffffe0
 8022794:	f812 0c06 	ldrb.w	r0, [r2, #-6]
 8022798:	eee5 7a07 	vfma.f32	s15, s10, s14
 802279c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80227a0:	ed90 5a00 	vldr	s10, [r0]
 80227a4:	ed11 7a06 	vldr	s14, [r1, #-24]	; 0xffffffe8
 80227a8:	f812 0c05 	ldrb.w	r0, [r2, #-5]
 80227ac:	eee5 7a07 	vfma.f32	s15, s10, s14
 80227b0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80227b4:	ed90 5a00 	vldr	s10, [r0]
 80227b8:	ed11 7a05 	vldr	s14, [r1, #-20]	; 0xffffffec
 80227bc:	f812 0c04 	ldrb.w	r0, [r2, #-4]
 80227c0:	eee5 7a07 	vfma.f32	s15, s10, s14
 80227c4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80227c8:	ed90 5a00 	vldr	s10, [r0]
 80227cc:	ed11 7a04 	vldr	s14, [r1, #-16]
 80227d0:	f812 0c03 	ldrb.w	r0, [r2, #-3]
 80227d4:	eee5 7a07 	vfma.f32	s15, s10, s14
 80227d8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80227dc:	ed90 5a00 	vldr	s10, [r0]
 80227e0:	ed11 7a03 	vldr	s14, [r1, #-12]
 80227e4:	f812 0c02 	ldrb.w	r0, [r2, #-2]
 80227e8:	eee5 7a07 	vfma.f32	s15, s10, s14
 80227ec:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80227f0:	ed90 5a00 	vldr	s10, [r0]
 80227f4:	ed11 7a02 	vldr	s14, [r1, #-8]
 80227f8:	f812 0c01 	ldrb.w	r0, [r2, #-1]
 80227fc:	eee5 7a07 	vfma.f32	s15, s10, s14
 8022800:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8022804:	ed11 7a01 	vldr	s14, [r1, #-4]
 8022808:	ed90 5a00 	vldr	s10, [r0]
 802280c:	eee5 7a07 	vfma.f32	s15, s10, s14
 8022810:	3208      	adds	r2, #8
 8022812:	4295      	cmp	r5, r2
 8022814:	ee36 6a27 	vadd.f32	s12, s12, s15
 8022818:	f101 0120 	add.w	r1, r1, #32
 802281c:	d1a8      	bne.n	8022770 <forward_dense+0x198>
 802281e:	465a      	mov	r2, fp
 8022820:	eb04 010a 	add.w	r1, r4, sl
 8022824:	2e00      	cmp	r6, #0
 8022826:	d04a      	beq.n	80228be <forward_dense+0x2e6>
 8022828:	7808      	ldrb	r0, [r1, #0]
 802282a:	ed92 7a00 	vldr	s14, [r2]
 802282e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8022832:	edd0 7a00 	vldr	s15, [r0]
 8022836:	2e01      	cmp	r6, #1
 8022838:	eea7 6a27 	vfma.f32	s12, s14, s15
 802283c:	d03f      	beq.n	80228be <forward_dense+0x2e6>
 802283e:	7848      	ldrb	r0, [r1, #1]
 8022840:	edd2 7a01 	vldr	s15, [r2, #4]
 8022844:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8022848:	ed90 7a00 	vldr	s14, [r0]
 802284c:	2e02      	cmp	r6, #2
 802284e:	eea7 6a27 	vfma.f32	s12, s14, s15
 8022852:	d034      	beq.n	80228be <forward_dense+0x2e6>
 8022854:	7888      	ldrb	r0, [r1, #2]
 8022856:	edd2 7a02 	vldr	s15, [r2, #8]
 802285a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 802285e:	ed90 7a00 	vldr	s14, [r0]
 8022862:	2e03      	cmp	r6, #3
 8022864:	eea7 6a27 	vfma.f32	s12, s14, s15
 8022868:	d029      	beq.n	80228be <forward_dense+0x2e6>
 802286a:	78c8      	ldrb	r0, [r1, #3]
 802286c:	edd2 7a03 	vldr	s15, [r2, #12]
 8022870:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8022874:	ed90 7a00 	vldr	s14, [r0]
 8022878:	2e04      	cmp	r6, #4
 802287a:	eea7 6a27 	vfma.f32	s12, s14, s15
 802287e:	d01e      	beq.n	80228be <forward_dense+0x2e6>
 8022880:	7908      	ldrb	r0, [r1, #4]
 8022882:	edd2 7a04 	vldr	s15, [r2, #16]
 8022886:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 802288a:	ed90 7a00 	vldr	s14, [r0]
 802288e:	2e05      	cmp	r6, #5
 8022890:	eea7 6a27 	vfma.f32	s12, s14, s15
 8022894:	d013      	beq.n	80228be <forward_dense+0x2e6>
 8022896:	7948      	ldrb	r0, [r1, #5]
 8022898:	edd2 7a05 	vldr	s15, [r2, #20]
 802289c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80228a0:	ed90 7a00 	vldr	s14, [r0]
 80228a4:	2e06      	cmp	r6, #6
 80228a6:	eea7 6a27 	vfma.f32	s12, s14, s15
 80228aa:	d008      	beq.n	80228be <forward_dense+0x2e6>
 80228ac:	7989      	ldrb	r1, [r1, #6]
 80228ae:	edd2 7a06 	vldr	s15, [r2, #24]
 80228b2:	eb03 0281 	add.w	r2, r3, r1, lsl #2
 80228b6:	ed92 7a00 	vldr	s14, [r2]
 80228ba:	eea7 6a27 	vfma.f32	s12, s14, s15
 80228be:	ee35 6a86 	vadd.f32	s12, s11, s12
 80228c2:	ecae 6a01 	vstmia	lr!, {s12}
 80228c6:	45c6      	cmp	lr, r8
 80228c8:	444c      	add	r4, r9
 80228ca:	f4ff af40 	bcc.w	802274e <forward_dense+0x176>
 80228ce:	9902      	ldr	r1, [sp, #8]
 80228d0:	43ca      	mvns	r2, r1
 80228d2:	4442      	add	r2, r8
 80228d4:	f022 0203 	bic.w	r2, r2, #3
 80228d8:	3204      	adds	r2, #4
 80228da:	188a      	adds	r2, r1, r2
 80228dc:	9202      	str	r2, [sp, #8]
 80228de:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80228e0:	9910      	ldr	r1, [sp, #64]	; 0x40
 80228e2:	4490      	add	r8, r2
 80228e4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80228e6:	4493      	add	fp, r2
 80228e8:	9a02      	ldr	r2, [sp, #8]
 80228ea:	428a      	cmp	r2, r1
 80228ec:	f4ff af0d 	bcc.w	802270a <forward_dense+0x132>
 80228f0:	b019      	add	sp, #100	; 0x64
 80228f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80228f6:	2300      	movs	r3, #0
 80228f8:	685b      	ldr	r3, [r3, #4]
 80228fa:	deff      	udf	#255	; 0xff
 80228fc:	684b      	ldr	r3, [r1, #4]
 80228fe:	deff      	udf	#255	; 0xff
 8022900:	2300      	movs	r3, #0
 8022902:	685b      	ldr	r3, [r3, #4]
 8022904:	deff      	udf	#255	; 0xff
 8022906:	681a      	ldr	r2, [r3, #0]
 8022908:	920d      	str	r2, [sp, #52]	; 0x34
 802290a:	f11c 0218 	adds.w	r2, ip, #24
 802290e:	f47f ae85 	bne.w	802261c <forward_dense+0x44>
 8022912:	920e      	str	r2, [sp, #56]	; 0x38
 8022914:	e68c      	b.n	8022630 <forward_dense+0x58>
 8022916:	930e      	str	r3, [sp, #56]	; 0x38
 8022918:	e68a      	b.n	8022630 <forward_dense+0x58>
 802291a:	9a01      	ldr	r2, [sp, #4]
 802291c:	eef0 5a66 	vmov.f32	s11, s13
 8022920:	2a00      	cmp	r2, #0
 8022922:	f47f af1e 	bne.w	8022762 <forward_dense+0x18a>
 8022926:	9a05      	ldr	r2, [sp, #20]
 8022928:	4621      	mov	r1, r4
 802292a:	ed9f 6a01 	vldr	s12, [pc, #4]	; 8022930 <forward_dense+0x358>
 802292e:	e779      	b.n	8022824 <forward_dense+0x24c>
 8022930:	00000000 	.word	0x00000000
 8022934:	4616      	mov	r6, r2
 8022936:	2b00      	cmp	r3, #0
 8022938:	f47f aef6 	bne.w	8022728 <forward_dense+0x150>
 802293c:	9a02      	ldr	r2, [sp, #8]
 802293e:	4590      	cmp	r8, r2
 8022940:	d9cd      	bls.n	80228de <forward_dense+0x306>
 8022942:	4615      	mov	r5, r2
 8022944:	9a06      	ldr	r2, [sp, #24]
 8022946:	9915      	ldr	r1, [sp, #84]	; 0x54
 8022948:	3240      	adds	r2, #64	; 0x40
 802294a:	eb02 070b 	add.w	r7, r2, fp
 802294e:	9a05      	ldr	r2, [sp, #20]
 8022950:	468a      	mov	sl, r1
 8022952:	4610      	mov	r0, r2
 8022954:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8022956:	9307      	str	r3, [sp, #28]
 8022958:	4691      	mov	r9, r2
 802295a:	9b04      	ldr	r3, [sp, #16]
 802295c:	eb00 0c02 	add.w	ip, r0, r2
 8022960:	f001 0e0f 	and.w	lr, r1, #15
 8022964:	2e00      	cmp	r6, #0
 8022966:	f000 81da 	beq.w	8022d1e <forward_dense+0x746>
 802296a:	f1ba 0f0f 	cmp.w	sl, #15
 802296e:	edd6 5a00 	vldr	s11, [r6]
 8022972:	f106 0604 	add.w	r6, r6, #4
 8022976:	f240 81d8 	bls.w	8022d2a <forward_dense+0x752>
 802297a:	4639      	mov	r1, r7
 802297c:	4650      	mov	r0, sl
 802297e:	ed1f 6a14 	vldr	s12, [pc, #-80]	; 8022930 <forward_dense+0x358>
 8022982:	f104 0240 	add.w	r2, r4, #64	; 0x40
 8022986:	ed12 7a0f 	vldr	s14, [r2, #-60]	; 0xffffffc4
 802298a:	ed51 7a0f 	vldr	s15, [r1, #-60]	; 0xffffffc4
 802298e:	ed12 5a10 	vldr	s10, [r2, #-64]	; 0xffffffc0
 8022992:	ee67 7a27 	vmul.f32	s15, s14, s15
 8022996:	ed11 7a10 	vldr	s14, [r1, #-64]	; 0xffffffc0
 802299a:	ed52 4a0e 	vldr	s9, [r2, #-56]	; 0xffffffc8
 802299e:	eee5 7a07 	vfma.f32	s15, s10, s14
 80229a2:	ed11 7a0e 	vldr	s14, [r1, #-56]	; 0xffffffc8
 80229a6:	ed12 5a0d 	vldr	s10, [r2, #-52]	; 0xffffffcc
 80229aa:	eee4 7a87 	vfma.f32	s15, s9, s14
 80229ae:	ed11 7a0d 	vldr	s14, [r1, #-52]	; 0xffffffcc
 80229b2:	ed51 4a0c 	vldr	s9, [r1, #-48]	; 0xffffffd0
 80229b6:	eee5 7a07 	vfma.f32	s15, s10, s14
 80229ba:	ed12 7a0c 	vldr	s14, [r2, #-48]	; 0xffffffd0
 80229be:	ed11 5a0b 	vldr	s10, [r1, #-44]	; 0xffffffd4
 80229c2:	eee4 7a87 	vfma.f32	s15, s9, s14
 80229c6:	ed12 7a0b 	vldr	s14, [r2, #-44]	; 0xffffffd4
 80229ca:	ed51 4a0a 	vldr	s9, [r1, #-40]	; 0xffffffd8
 80229ce:	eee5 7a07 	vfma.f32	s15, s10, s14
 80229d2:	ed12 7a0a 	vldr	s14, [r2, #-40]	; 0xffffffd8
 80229d6:	ed12 5a09 	vldr	s10, [r2, #-36]	; 0xffffffdc
 80229da:	eee4 7a87 	vfma.f32	s15, s9, s14
 80229de:	ed11 7a09 	vldr	s14, [r1, #-36]	; 0xffffffdc
 80229e2:	ed52 4a08 	vldr	s9, [r2, #-32]	; 0xffffffe0
 80229e6:	eee5 7a07 	vfma.f32	s15, s10, s14
 80229ea:	ed11 7a08 	vldr	s14, [r1, #-32]	; 0xffffffe0
 80229ee:	ed12 5a07 	vldr	s10, [r2, #-28]	; 0xffffffe4
 80229f2:	eee4 7a87 	vfma.f32	s15, s9, s14
 80229f6:	ed11 7a07 	vldr	s14, [r1, #-28]	; 0xffffffe4
 80229fa:	ed52 4a06 	vldr	s9, [r2, #-24]	; 0xffffffe8
 80229fe:	eee5 7a07 	vfma.f32	s15, s10, s14
 8022a02:	ed11 7a06 	vldr	s14, [r1, #-24]	; 0xffffffe8
 8022a06:	ed12 5a05 	vldr	s10, [r2, #-20]	; 0xffffffec
 8022a0a:	eee4 7a87 	vfma.f32	s15, s9, s14
 8022a0e:	ed11 7a05 	vldr	s14, [r1, #-20]	; 0xffffffec
 8022a12:	ed51 4a04 	vldr	s9, [r1, #-16]
 8022a16:	eee5 7a07 	vfma.f32	s15, s10, s14
 8022a1a:	ed12 7a04 	vldr	s14, [r2, #-16]
 8022a1e:	ed11 5a03 	vldr	s10, [r1, #-12]
 8022a22:	eee4 7a87 	vfma.f32	s15, s9, s14
 8022a26:	ed12 7a03 	vldr	s14, [r2, #-12]
 8022a2a:	ed51 4a02 	vldr	s9, [r1, #-8]
 8022a2e:	eee5 7a07 	vfma.f32	s15, s10, s14
 8022a32:	ed12 7a02 	vldr	s14, [r2, #-8]
 8022a36:	ed12 5a01 	vldr	s10, [r2, #-4]
 8022a3a:	eee4 7a87 	vfma.f32	s15, s9, s14
 8022a3e:	ed11 7a01 	vldr	s14, [r1, #-4]
 8022a42:	eee5 7a07 	vfma.f32	s15, s10, s14
 8022a46:	3810      	subs	r0, #16
 8022a48:	280f      	cmp	r0, #15
 8022a4a:	f102 0240 	add.w	r2, r2, #64	; 0x40
 8022a4e:	ee36 6a27 	vadd.f32	s12, s12, s15
 8022a52:	f101 0140 	add.w	r1, r1, #64	; 0x40
 8022a56:	d896      	bhi.n	8022986 <forward_dense+0x3ae>
 8022a58:	4672      	mov	r2, lr
 8022a5a:	4661      	mov	r1, ip
 8022a5c:	eb04 0009 	add.w	r0, r4, r9
 8022a60:	2a00      	cmp	r2, #0
 8022a62:	d075      	beq.n	8022b50 <forward_dense+0x578>
 8022a64:	ed90 7a00 	vldr	s14, [r0]
 8022a68:	edd1 7a00 	vldr	s15, [r1]
 8022a6c:	2a01      	cmp	r2, #1
 8022a6e:	eea7 6a27 	vfma.f32	s12, s14, s15
 8022a72:	d06d      	beq.n	8022b50 <forward_dense+0x578>
 8022a74:	ed90 7a01 	vldr	s14, [r0, #4]
 8022a78:	edd1 7a01 	vldr	s15, [r1, #4]
 8022a7c:	2a02      	cmp	r2, #2
 8022a7e:	eea7 6a27 	vfma.f32	s12, s14, s15
 8022a82:	d065      	beq.n	8022b50 <forward_dense+0x578>
 8022a84:	ed90 7a02 	vldr	s14, [r0, #8]
 8022a88:	edd1 7a02 	vldr	s15, [r1, #8]
 8022a8c:	2a03      	cmp	r2, #3
 8022a8e:	eea7 6a27 	vfma.f32	s12, s14, s15
 8022a92:	d05d      	beq.n	8022b50 <forward_dense+0x578>
 8022a94:	ed90 7a03 	vldr	s14, [r0, #12]
 8022a98:	edd1 7a03 	vldr	s15, [r1, #12]
 8022a9c:	2a04      	cmp	r2, #4
 8022a9e:	eea7 6a27 	vfma.f32	s12, s14, s15
 8022aa2:	d055      	beq.n	8022b50 <forward_dense+0x578>
 8022aa4:	ed90 7a04 	vldr	s14, [r0, #16]
 8022aa8:	edd1 7a04 	vldr	s15, [r1, #16]
 8022aac:	2a05      	cmp	r2, #5
 8022aae:	eea7 6a27 	vfma.f32	s12, s14, s15
 8022ab2:	d04d      	beq.n	8022b50 <forward_dense+0x578>
 8022ab4:	ed90 7a05 	vldr	s14, [r0, #20]
 8022ab8:	edd1 7a05 	vldr	s15, [r1, #20]
 8022abc:	2a06      	cmp	r2, #6
 8022abe:	eea7 6a27 	vfma.f32	s12, s14, s15
 8022ac2:	d045      	beq.n	8022b50 <forward_dense+0x578>
 8022ac4:	ed90 7a06 	vldr	s14, [r0, #24]
 8022ac8:	edd1 7a06 	vldr	s15, [r1, #24]
 8022acc:	2a07      	cmp	r2, #7
 8022ace:	eea7 6a27 	vfma.f32	s12, s14, s15
 8022ad2:	d03d      	beq.n	8022b50 <forward_dense+0x578>
 8022ad4:	ed90 7a07 	vldr	s14, [r0, #28]
 8022ad8:	edd1 7a07 	vldr	s15, [r1, #28]
 8022adc:	2a08      	cmp	r2, #8
 8022ade:	eea7 6a27 	vfma.f32	s12, s14, s15
 8022ae2:	d035      	beq.n	8022b50 <forward_dense+0x578>
 8022ae4:	ed90 7a08 	vldr	s14, [r0, #32]
 8022ae8:	edd1 7a08 	vldr	s15, [r1, #32]
 8022aec:	2a09      	cmp	r2, #9
 8022aee:	eea7 6a27 	vfma.f32	s12, s14, s15
 8022af2:	d02d      	beq.n	8022b50 <forward_dense+0x578>
 8022af4:	ed90 7a09 	vldr	s14, [r0, #36]	; 0x24
 8022af8:	edd1 7a09 	vldr	s15, [r1, #36]	; 0x24
 8022afc:	2a0a      	cmp	r2, #10
 8022afe:	eea7 6a27 	vfma.f32	s12, s14, s15
 8022b02:	d025      	beq.n	8022b50 <forward_dense+0x578>
 8022b04:	ed90 7a0a 	vldr	s14, [r0, #40]	; 0x28
 8022b08:	edd1 7a0a 	vldr	s15, [r1, #40]	; 0x28
 8022b0c:	2a0b      	cmp	r2, #11
 8022b0e:	eea7 6a27 	vfma.f32	s12, s14, s15
 8022b12:	d01d      	beq.n	8022b50 <forward_dense+0x578>
 8022b14:	ed90 7a0b 	vldr	s14, [r0, #44]	; 0x2c
 8022b18:	edd1 7a0b 	vldr	s15, [r1, #44]	; 0x2c
 8022b1c:	2a0c      	cmp	r2, #12
 8022b1e:	eea7 6a27 	vfma.f32	s12, s14, s15
 8022b22:	d015      	beq.n	8022b50 <forward_dense+0x578>
 8022b24:	ed90 7a0c 	vldr	s14, [r0, #48]	; 0x30
 8022b28:	edd1 7a0c 	vldr	s15, [r1, #48]	; 0x30
 8022b2c:	2a0d      	cmp	r2, #13
 8022b2e:	eea7 6a27 	vfma.f32	s12, s14, s15
 8022b32:	d00d      	beq.n	8022b50 <forward_dense+0x578>
 8022b34:	ed90 7a0d 	vldr	s14, [r0, #52]	; 0x34
 8022b38:	edd1 7a0d 	vldr	s15, [r1, #52]	; 0x34
 8022b3c:	2a0e      	cmp	r2, #14
 8022b3e:	eea7 6a27 	vfma.f32	s12, s14, s15
 8022b42:	d005      	beq.n	8022b50 <forward_dense+0x578>
 8022b44:	ed90 7a0e 	vldr	s14, [r0, #56]	; 0x38
 8022b48:	edd1 7a0e 	vldr	s15, [r1, #56]	; 0x38
 8022b4c:	eea7 6a27 	vfma.f32	s12, s14, s15
 8022b50:	ee35 6a86 	vadd.f32	s12, s11, s12
 8022b54:	eca5 6a01 	vstmia	r5!, {s12}
 8022b58:	4545      	cmp	r5, r8
 8022b5a:	441c      	add	r4, r3
 8022b5c:	f4ff af02 	bcc.w	8022964 <forward_dense+0x38c>
 8022b60:	9b07      	ldr	r3, [sp, #28]
 8022b62:	e6b4      	b.n	80228ce <forward_dense+0x2f6>
 8022b64:	9902      	ldr	r1, [sp, #8]
 8022b66:	4588      	cmp	r8, r1
 8022b68:	f67f aeb9 	bls.w	80228de <forward_dense+0x306>
 8022b6c:	4689      	mov	r9, r1
 8022b6e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8022b70:	eb02 000b 	add.w	r0, r2, fp
 8022b74:	9a06      	ldr	r2, [sp, #24]
 8022b76:	9007      	str	r0, [sp, #28]
 8022b78:	3220      	adds	r2, #32
 8022b7a:	3007      	adds	r0, #7
 8022b7c:	445a      	add	r2, fp
 8022b7e:	900a      	str	r0, [sp, #40]	; 0x28
 8022b80:	9209      	str	r2, [sp, #36]	; 0x24
 8022b82:	2e00      	cmp	r6, #0
 8022b84:	f000 80b5 	beq.w	8022cf2 <forward_dense+0x71a>
 8022b88:	9a01      	ldr	r2, [sp, #4]
 8022b8a:	edd6 5a00 	vldr	s11, [r6]
 8022b8e:	3604      	adds	r6, #4
 8022b90:	2a00      	cmp	r2, #0
 8022b92:	f000 80b4 	beq.w	8022cfe <forward_dense+0x726>
 8022b96:	ed1f 6a9a 	vldr	s12, [pc, #-616]	; 8022930 <forward_dense+0x358>
 8022b9a:	980c      	ldr	r0, [sp, #48]	; 0x30
 8022b9c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8022b9e:	1d21      	adds	r1, r4, #4
 8022ba0:	1905      	adds	r5, r0, r4
 8022ba2:	f811 0c04 	ldrb.w	r0, [r1, #-4]
 8022ba6:	ed52 7a07 	vldr	s15, [r2, #-28]	; 0xffffffe4
 8022baa:	f000 070f 	and.w	r7, r0, #15
 8022bae:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8022bb2:	ed97 7a00 	vldr	s14, [r7]
 8022bb6:	0900      	lsrs	r0, r0, #4
 8022bb8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8022bbc:	ed90 5a00 	vldr	s10, [r0]
 8022bc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8022bc4:	ed12 7a08 	vldr	s14, [r2, #-32]	; 0xffffffe0
 8022bc8:	f811 0c03 	ldrb.w	r0, [r1, #-3]
 8022bcc:	eee5 7a07 	vfma.f32	s15, s10, s14
 8022bd0:	0907      	lsrs	r7, r0, #4
 8022bd2:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8022bd6:	ed97 5a00 	vldr	s10, [r7]
 8022bda:	ed12 7a06 	vldr	s14, [r2, #-24]	; 0xffffffe8
 8022bde:	f000 000f 	and.w	r0, r0, #15
 8022be2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8022be6:	eee5 7a07 	vfma.f32	s15, s10, s14
 8022bea:	ed90 5a00 	vldr	s10, [r0]
 8022bee:	ed12 7a05 	vldr	s14, [r2, #-20]	; 0xffffffec
 8022bf2:	f811 0c02 	ldrb.w	r0, [r1, #-2]
 8022bf6:	eee5 7a07 	vfma.f32	s15, s10, s14
 8022bfa:	0907      	lsrs	r7, r0, #4
 8022bfc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8022c00:	ed97 5a00 	vldr	s10, [r7]
 8022c04:	ed12 7a04 	vldr	s14, [r2, #-16]
 8022c08:	f000 000f 	and.w	r0, r0, #15
 8022c0c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8022c10:	eee5 7a07 	vfma.f32	s15, s10, s14
 8022c14:	ed90 5a00 	vldr	s10, [r0]
 8022c18:	ed12 7a03 	vldr	s14, [r2, #-12]
 8022c1c:	f811 0c01 	ldrb.w	r0, [r1, #-1]
 8022c20:	eee5 7a07 	vfma.f32	s15, s10, s14
 8022c24:	0907      	lsrs	r7, r0, #4
 8022c26:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8022c2a:	ed12 7a02 	vldr	s14, [r2, #-8]
 8022c2e:	ed97 5a00 	vldr	s10, [r7]
 8022c32:	f000 000f 	and.w	r0, r0, #15
 8022c36:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8022c3a:	eee5 7a07 	vfma.f32	s15, s10, s14
 8022c3e:	ed12 7a01 	vldr	s14, [r2, #-4]
 8022c42:	ed90 5a00 	vldr	s10, [r0]
 8022c46:	eee5 7a07 	vfma.f32	s15, s10, s14
 8022c4a:	3104      	adds	r1, #4
 8022c4c:	428d      	cmp	r5, r1
 8022c4e:	ee36 6a27 	vadd.f32	s12, s12, s15
 8022c52:	f102 0220 	add.w	r2, r2, #32
 8022c56:	d1a4      	bne.n	8022ba2 <forward_dense+0x5ca>
 8022c58:	46de      	mov	lr, fp
 8022c5a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8022c5c:	eb04 0a02 	add.w	sl, r4, r2
 8022c60:	9a07      	ldr	r2, [sp, #28]
 8022c62:	4596      	cmp	lr, r2
 8022c64:	d22c      	bcs.n	8022cc0 <forward_dense+0x6e8>
 8022c66:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8022c68:	f10e 0108 	add.w	r1, lr, #8
 8022c6c:	eba2 0c01 	sub.w	ip, r2, r1
 8022c70:	f02c 0207 	bic.w	r2, ip, #7
 8022c74:	f10e 0710 	add.w	r7, lr, #16
 8022c78:	4417      	add	r7, r2
 8022c7a:	f10a 35ff 	add.w	r5, sl, #4294967295	; 0xffffffff
 8022c7e:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8022c82:	ed51 7a01 	vldr	s15, [r1, #-4]
 8022c86:	f002 000f 	and.w	r0, r2, #15
 8022c8a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8022c8e:	ed90 7a00 	vldr	s14, [r0]
 8022c92:	0912      	lsrs	r2, r2, #4
 8022c94:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8022c98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8022c9c:	ed92 5a00 	vldr	s10, [r2]
 8022ca0:	ed11 7a02 	vldr	s14, [r1, #-8]
 8022ca4:	eee5 7a07 	vfma.f32	s15, s10, s14
 8022ca8:	3108      	adds	r1, #8
 8022caa:	428f      	cmp	r7, r1
 8022cac:	ee36 6a27 	vadd.f32	s12, s12, s15
 8022cb0:	d1e5      	bne.n	8022c7e <forward_dense+0x6a6>
 8022cb2:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 8022cb6:	f10c 0c01 	add.w	ip, ip, #1
 8022cba:	44e2      	add	sl, ip
 8022cbc:	eb0e 0ecc 	add.w	lr, lr, ip, lsl #3
 8022cc0:	9a08      	ldr	r2, [sp, #32]
 8022cc2:	b312      	cbz	r2, 8022d0a <forward_dense+0x732>
 8022cc4:	f89a 2000 	ldrb.w	r2, [sl]
 8022cc8:	edde 7a00 	vldr	s15, [lr]
 8022ccc:	0912      	lsrs	r2, r2, #4
 8022cce:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8022cd2:	ed92 7a00 	vldr	s14, [r2]
 8022cd6:	eea7 6a27 	vfma.f32	s12, s14, s15
 8022cda:	ee76 5a25 	vadd.f32	s11, s12, s11
 8022cde:	ece9 5a01 	vstmia	r9!, {s11}
 8022ce2:	9a04      	ldr	r2, [sp, #16]
 8022ce4:	45c8      	cmp	r8, r9
 8022ce6:	4414      	add	r4, r2
 8022ce8:	f67f adf1 	bls.w	80228ce <forward_dense+0x2f6>
 8022cec:	2e00      	cmp	r6, #0
 8022cee:	f47f af4b 	bne.w	8022b88 <forward_dense+0x5b0>
 8022cf2:	9a01      	ldr	r2, [sp, #4]
 8022cf4:	eef0 5a66 	vmov.f32	s11, s13
 8022cf8:	2a00      	cmp	r2, #0
 8022cfa:	f47f af4c 	bne.w	8022b96 <forward_dense+0x5be>
 8022cfe:	f8dd e014 	ldr.w	lr, [sp, #20]
 8022d02:	46a2      	mov	sl, r4
 8022d04:	ed9f 6a1b 	vldr	s12, [pc, #108]	; 8022d74 <forward_dense+0x79c>
 8022d08:	e7aa      	b.n	8022c60 <forward_dense+0x688>
 8022d0a:	ee35 6a86 	vadd.f32	s12, s11, s12
 8022d0e:	eca9 6a01 	vstmia	r9!, {s12}
 8022d12:	9a04      	ldr	r2, [sp, #16]
 8022d14:	45c1      	cmp	r9, r8
 8022d16:	4414      	add	r4, r2
 8022d18:	f4ff af33 	bcc.w	8022b82 <forward_dense+0x5aa>
 8022d1c:	e5d7      	b.n	80228ce <forward_dense+0x2f6>
 8022d1e:	f1ba 0f0f 	cmp.w	sl, #15
 8022d22:	eef0 5a66 	vmov.f32	s11, s13
 8022d26:	f63f ae28 	bhi.w	802297a <forward_dense+0x3a2>
 8022d2a:	4652      	mov	r2, sl
 8022d2c:	4620      	mov	r0, r4
 8022d2e:	9905      	ldr	r1, [sp, #20]
 8022d30:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8022d74 <forward_dense+0x79c>
 8022d34:	e694      	b.n	8022a60 <forward_dense+0x488>
 8022d36:	2300      	movs	r3, #0
 8022d38:	685b      	ldr	r3, [r3, #4]
 8022d3a:	deff      	udf	#255	; 0xff
 8022d3c:	f3c3 4343 	ubfx	r3, r3, #17, #4
 8022d40:	2b04      	cmp	r3, #4
 8022d42:	4691      	mov	r9, r2
 8022d44:	f47f ac9d 	bne.w	8022682 <forward_dense+0xaa>
 8022d48:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 8022d4c:	f1b9 0f00 	cmp.w	r9, #0
 8022d50:	f43f ac9c 	beq.w	802268c <forward_dense+0xb4>
 8022d54:	e9d9 0100 	ldrd	r0, r1, [r9]
 8022d58:	f000 fe4a 	bl	80239f0 <ai_array_get_byte_size>
 8022d5c:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8022d60:	4602      	mov	r2, r0
 8022d62:	4651      	mov	r1, sl
 8022d64:	4618      	mov	r0, r3
 8022d66:	f000 ff53 	bl	8023c10 <memcpy>
 8022d6a:	4682      	mov	sl, r0
 8022d6c:	e48e      	b.n	802268c <forward_dense+0xb4>
 8022d6e:	2300      	movs	r3, #0
 8022d70:	930e      	str	r3, [sp, #56]	; 0x38
 8022d72:	e45d      	b.n	8022630 <forward_dense+0x58>
 8022d74:	00000000 	.word	0x00000000

08022d78 <svc_ovo_output>:
 8022d78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022d7c:	4683      	mov	fp, r0
 8022d7e:	4618      	mov	r0, r3
 8022d80:	f8db 7008 	ldr.w	r7, [fp, #8]
 8022d84:	b08d      	sub	sp, #52	; 0x34
 8022d86:	f107 5600 	add.w	r6, r7, #536870912	; 0x20000000
 8022d8a:	9307      	str	r3, [sp, #28]
 8022d8c:	3e01      	subs	r6, #1
 8022d8e:	00fb      	lsls	r3, r7, #3
 8022d90:	fb03 0606 	mla	r6, r3, r6, r0
 8022d94:	f8db 3030 	ldr.w	r3, [fp, #48]	; 0x30
 8022d98:	f107 4580 	add.w	r5, r7, #1073741824	; 0x40000000
 8022d9c:	9106      	str	r1, [sp, #24]
 8022d9e:	3d01      	subs	r5, #1
 8022da0:	00b9      	lsls	r1, r7, #2
 8022da2:	9309      	str	r3, [sp, #36]	; 0x24
 8022da4:	1e7b      	subs	r3, r7, #1
 8022da6:	9105      	str	r1, [sp, #20]
 8022da8:	9208      	str	r2, [sp, #32]
 8022daa:	fb01 0505 	mla	r5, r1, r5, r0
 8022dae:	f8db e028 	ldr.w	lr, [fp, #40]	; 0x28
 8022db2:	9304      	str	r3, [sp, #16]
 8022db4:	f000 80b8 	beq.w	8022f28 <svc_ovo_output+0x1b0>
 8022db8:	2f00      	cmp	r7, #0
 8022dba:	f000 80ca 	beq.w	8022f52 <svc_ovo_output+0x1da>
 8022dbe:	2300      	movs	r3, #0
 8022dc0:	46b9      	mov	r9, r7
 8022dc2:	461f      	mov	r7, r3
 8022dc4:	e9cd 6501 	strd	r6, r5, [sp, #4]
 8022dc8:	e9cd 560a 	strd	r5, r6, [sp, #40]	; 0x28
 8022dcc:	9003      	str	r0, [sp, #12]
 8022dce:	2400      	movs	r4, #0
 8022dd0:	e9dd c601 	ldrd	ip, r6, [sp, #4]
 8022dd4:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8022dd8:	9d06      	ldr	r5, [sp, #24]
 8022dda:	f107 0a01 	add.w	sl, r7, #1
 8022dde:	f89b 3024 	ldrb.w	r3, [fp, #36]	; 0x24
 8022de2:	f8db 2034 	ldr.w	r2, [fp, #52]	; 0x34
 8022de6:	2b08      	cmp	r3, #8
 8022de8:	f000 80ac 	beq.w	8022f44 <svc_ovo_output+0x1cc>
 8022dec:	2b10      	cmp	r3, #16
 8022dee:	bf0c      	ite	eq
 8022df0:	f832 0014 	ldrheq.w	r0, [r2, r4, lsl #1]
 8022df4:	f852 0024 	ldrne.w	r0, [r2, r4, lsl #2]
 8022df8:	2800      	cmp	r0, #0
 8022dfa:	f000 80a7 	beq.w	8022f4c <svc_ovo_output+0x1d4>
 8022dfe:	4629      	mov	r1, r5
 8022e00:	4672      	mov	r2, lr
 8022e02:	2300      	movs	r3, #0
 8022e04:	eddf 7a54 	vldr	s15, [pc, #336]	; 8022f58 <svc_ovo_output+0x1e0>
 8022e08:	ecf2 6a01 	vldmia	r2!, {s13}
 8022e0c:	ecb1 7a01 	vldmia	r1!, {s14}
 8022e10:	3301      	adds	r3, #1
 8022e12:	4283      	cmp	r3, r0
 8022e14:	eee6 7a87 	vfma.f32	s15, s13, s14
 8022e18:	d1f6      	bne.n	8022e08 <svc_ovo_output+0x90>
 8022e1a:	009b      	lsls	r3, r3, #2
 8022e1c:	449e      	add	lr, r3
 8022e1e:	441d      	add	r5, r3
 8022e20:	42a7      	cmp	r7, r4
 8022e22:	ece8 7a01 	vstmia	r8!, {s15}
 8022e26:	f846 4b04 	str.w	r4, [r6], #4
 8022e2a:	f104 0401 	add.w	r4, r4, #1
 8022e2e:	d37e      	bcc.n	8022f2e <svc_ovo_output+0x1b6>
 8022e30:	45a1      	cmp	r9, r4
 8022e32:	f84c ab04 	str.w	sl, [ip], #4
 8022e36:	d1d2      	bne.n	8022dde <svc_ovo_output+0x66>
 8022e38:	9a03      	ldr	r2, [sp, #12]
 8022e3a:	9b05      	ldr	r3, [sp, #20]
 8022e3c:	4611      	mov	r1, r2
 8022e3e:	9a02      	ldr	r2, [sp, #8]
 8022e40:	4419      	add	r1, r3
 8022e42:	9103      	str	r1, [sp, #12]
 8022e44:	4611      	mov	r1, r2
 8022e46:	9a01      	ldr	r2, [sp, #4]
 8022e48:	4419      	add	r1, r3
 8022e4a:	441a      	add	r2, r3
 8022e4c:	9b04      	ldr	r3, [sp, #16]
 8022e4e:	4657      	mov	r7, sl
 8022e50:	459a      	cmp	sl, r3
 8022e52:	9102      	str	r1, [sp, #8]
 8022e54:	9201      	str	r2, [sp, #4]
 8022e56:	d1ba      	bne.n	8022dce <svc_ovo_output+0x56>
 8022e58:	e9dd 560a 	ldrd	r5, r6, [sp, #40]	; 0x28
 8022e5c:	464f      	mov	r7, r9
 8022e5e:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8022e62:	461a      	mov	r2, r3
 8022e64:	f04f 0e00 	mov.w	lr, #0
 8022e68:	46b3      	mov	fp, r6
 8022e6a:	469a      	mov	sl, r3
 8022e6c:	fb02 f207 	mul.w	r2, r2, r7
 8022e70:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8022e74:	f10e 0901 	add.w	r9, lr, #1
 8022e78:	454f      	cmp	r7, r9
 8022e7a:	d91b      	bls.n	8022eb4 <svc_ovo_output+0x13c>
 8022e7c:	464c      	mov	r4, r9
 8022e7e:	b1b2      	cbz	r2, 8022eae <svc_ovo_output+0x136>
 8022e80:	4660      	mov	r0, ip
 8022e82:	2300      	movs	r3, #0
 8022e84:	f1ab 0104 	sub.w	r1, fp, #4
 8022e88:	e004      	b.n	8022e94 <svc_ovo_output+0x11c>
 8022e8a:	3301      	adds	r3, #1
 8022e8c:	4293      	cmp	r3, r2
 8022e8e:	f100 0004 	add.w	r0, r0, #4
 8022e92:	d00c      	beq.n	8022eae <svc_ovo_output+0x136>
 8022e94:	f851 6f04 	ldr.w	r6, [r1, #4]!
 8022e98:	42a6      	cmp	r6, r4
 8022e9a:	d1f6      	bne.n	8022e8a <svc_ovo_output+0x112>
 8022e9c:	f855 6023 	ldr.w	r6, [r5, r3, lsl #2]
 8022ea0:	4576      	cmp	r6, lr
 8022ea2:	d1f2      	bne.n	8022e8a <svc_ovo_output+0x112>
 8022ea4:	6803      	ldr	r3, [r0, #0]
 8022ea6:	f108 0804 	add.w	r8, r8, #4
 8022eaa:	f848 3c04 	str.w	r3, [r8, #-4]
 8022eae:	3401      	adds	r4, #1
 8022eb0:	42a7      	cmp	r7, r4
 8022eb2:	d1e4      	bne.n	8022e7e <svc_ovo_output+0x106>
 8022eb4:	45d1      	cmp	r9, sl
 8022eb6:	46ce      	mov	lr, r9
 8022eb8:	d1dc      	bne.n	8022e74 <svc_ovo_output+0xfc>
 8022eba:	e9dd 8c07 	ldrd	r8, ip, [sp, #28]
 8022ebe:	465e      	mov	r6, fp
 8022ec0:	f04f 0e00 	mov.w	lr, #0
 8022ec4:	46ab      	mov	fp, r5
 8022ec6:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8022eca:	f10e 0a01 	add.w	sl, lr, #1
 8022ece:	4557      	cmp	r7, sl
 8022ed0:	d926      	bls.n	8022f20 <svc_ovo_output+0x1a8>
 8022ed2:	4654      	mov	r4, sl
 8022ed4:	b30a      	cbz	r2, 8022f1a <svc_ovo_output+0x1a2>
 8022ed6:	4640      	mov	r0, r8
 8022ed8:	2300      	movs	r3, #0
 8022eda:	f1ab 0104 	sub.w	r1, fp, #4
 8022ede:	e004      	b.n	8022eea <svc_ovo_output+0x172>
 8022ee0:	3301      	adds	r3, #1
 8022ee2:	4293      	cmp	r3, r2
 8022ee4:	f100 0004 	add.w	r0, r0, #4
 8022ee8:	d017      	beq.n	8022f1a <svc_ovo_output+0x1a2>
 8022eea:	f851 5f04 	ldr.w	r5, [r1, #4]!
 8022eee:	42a5      	cmp	r5, r4
 8022ef0:	d1f6      	bne.n	8022ee0 <svc_ovo_output+0x168>
 8022ef2:	f856 5023 	ldr.w	r5, [r6, r3, lsl #2]
 8022ef6:	4575      	cmp	r5, lr
 8022ef8:	d1f2      	bne.n	8022ee0 <svc_ovo_output+0x168>
 8022efa:	edd9 6a00 	vldr	s13, [r9]
 8022efe:	eddc 7a00 	vldr	s15, [ip]
 8022f02:	ed90 7a00 	vldr	s14, [r0]
 8022f06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8022f0a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8022f0e:	f109 0904 	add.w	r9, r9, #4
 8022f12:	edcc 7a00 	vstr	s15, [ip]
 8022f16:	f10c 0c04 	add.w	ip, ip, #4
 8022f1a:	3401      	adds	r4, #1
 8022f1c:	42a7      	cmp	r7, r4
 8022f1e:	d1d9      	bne.n	8022ed4 <svc_ovo_output+0x15c>
 8022f20:	9b04      	ldr	r3, [sp, #16]
 8022f22:	46d6      	mov	lr, sl
 8022f24:	459a      	cmp	sl, r3
 8022f26:	d1d0      	bne.n	8022eca <svc_ovo_output+0x152>
 8022f28:	b00d      	add	sp, #52	; 0x34
 8022f2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022f2e:	45a1      	cmp	r9, r4
 8022f30:	f84c 7b04 	str.w	r7, [ip], #4
 8022f34:	d080      	beq.n	8022e38 <svc_ovo_output+0xc0>
 8022f36:	f89b 3024 	ldrb.w	r3, [fp, #36]	; 0x24
 8022f3a:	f8db 2034 	ldr.w	r2, [fp, #52]	; 0x34
 8022f3e:	2b08      	cmp	r3, #8
 8022f40:	f47f af54 	bne.w	8022dec <svc_ovo_output+0x74>
 8022f44:	5d10      	ldrb	r0, [r2, r4]
 8022f46:	2800      	cmp	r0, #0
 8022f48:	f47f af59 	bne.w	8022dfe <svc_ovo_output+0x86>
 8022f4c:	eddf 7a02 	vldr	s15, [pc, #8]	; 8022f58 <svc_ovo_output+0x1e0>
 8022f50:	e766      	b.n	8022e20 <svc_ovo_output+0xa8>
 8022f52:	4684      	mov	ip, r0
 8022f54:	e785      	b.n	8022e62 <svc_ovo_output+0xea>
 8022f56:	bf00      	nop
 8022f58:	00000000 	.word	0x00000000

08022f5c <svc_ovo_classification_vote>:
 8022f5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022f60:	6885      	ldr	r5, [r0, #8]
 8022f62:	4606      	mov	r6, r0
 8022f64:	4617      	mov	r7, r2
 8022f66:	b39d      	cbz	r5, 8022fd0 <svc_ovo_classification_vote+0x74>
 8022f68:	ea4f 0985 	mov.w	r9, r5, lsl #2
 8022f6c:	4618      	mov	r0, r3
 8022f6e:	460c      	mov	r4, r1
 8022f70:	464a      	mov	r2, r9
 8022f72:	2100      	movs	r1, #0
 8022f74:	f000 fe59 	bl	8023c2a <memset>
 8022f78:	4684      	mov	ip, r0
 8022f7a:	f1a0 0a04 	sub.w	sl, r0, #4
 8022f7e:	44ca      	add	sl, r9
 8022f80:	45d4      	cmp	ip, sl
 8022f82:	4603      	mov	r3, r0
 8022f84:	f1a9 0804 	sub.w	r8, r9, #4
 8022f88:	eb09 0e00 	add.w	lr, r9, r0
 8022f8c:	d020      	beq.n	8022fd0 <svc_ovo_classification_vote+0x74>
 8022f8e:	f10c 0904 	add.w	r9, ip, #4
 8022f92:	464a      	mov	r2, r9
 8022f94:	4620      	mov	r0, r4
 8022f96:	e007      	b.n	8022fa8 <svc_ovo_classification_vote+0x4c>
 8022f98:	f8dc 1000 	ldr.w	r1, [ip]
 8022f9c:	3204      	adds	r2, #4
 8022f9e:	3101      	adds	r1, #1
 8022fa0:	4572      	cmp	r2, lr
 8022fa2:	f8cc 1000 	str.w	r1, [ip]
 8022fa6:	d00d      	beq.n	8022fc4 <svc_ovo_classification_vote+0x68>
 8022fa8:	ecf0 7a01 	vldmia	r0!, {s15}
 8022fac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8022fb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022fb4:	dcf0      	bgt.n	8022f98 <svc_ovo_classification_vote+0x3c>
 8022fb6:	6811      	ldr	r1, [r2, #0]
 8022fb8:	3204      	adds	r2, #4
 8022fba:	3101      	adds	r1, #1
 8022fbc:	f842 1c04 	str.w	r1, [r2, #-4]
 8022fc0:	4572      	cmp	r2, lr
 8022fc2:	d1f1      	bne.n	8022fa8 <svc_ovo_classification_vote+0x4c>
 8022fc4:	46cc      	mov	ip, r9
 8022fc6:	45d4      	cmp	ip, sl
 8022fc8:	4444      	add	r4, r8
 8022fca:	f1a8 0804 	sub.w	r8, r8, #4
 8022fce:	d1de      	bne.n	8022f8e <svc_ovo_classification_vote+0x32>
 8022fd0:	f896 1025 	ldrb.w	r1, [r6, #37]	; 0x25
 8022fd4:	6c32      	ldr	r2, [r6, #64]	; 0x40
 8022fd6:	2908      	cmp	r1, #8
 8022fd8:	d03f      	beq.n	802305a <svc_ovo_classification_vote+0xfe>
 8022fda:	2910      	cmp	r1, #16
 8022fdc:	d01f      	beq.n	802301e <svc_ovo_classification_vote+0xc2>
 8022fde:	edd3 7a00 	vldr	s15, [r3]
 8022fe2:	2d01      	cmp	r5, #1
 8022fe4:	6811      	ldr	r1, [r2, #0]
 8022fe6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8022fea:	d915      	bls.n	8023018 <svc_ovo_classification_vote+0xbc>
 8022fec:	1f18      	subs	r0, r3, #4
 8022fee:	3204      	adds	r2, #4
 8022ff0:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8022ff4:	f853 0f04 	ldr.w	r0, [r3, #4]!
 8022ff8:	3204      	adds	r2, #4
 8022ffa:	ee07 0a90 	vmov	s15, r0
 8022ffe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8023002:	eef4 7ac7 	vcmpe.f32	s15, s14
 8023006:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802300a:	bfc4      	itt	gt
 802300c:	f852 1c04 	ldrgt.w	r1, [r2, #-4]
 8023010:	eeb0 7a67 	vmovgt.f32	s14, s15
 8023014:	429d      	cmp	r5, r3
 8023016:	d1ed      	bne.n	8022ff4 <svc_ovo_classification_vote+0x98>
 8023018:	6039      	str	r1, [r7, #0]
 802301a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802301e:	edd3 7a00 	vldr	s15, [r3]
 8023022:	2d01      	cmp	r5, #1
 8023024:	8811      	ldrh	r1, [r2, #0]
 8023026:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 802302a:	d9f5      	bls.n	8023018 <svc_ovo_classification_vote+0xbc>
 802302c:	1f18      	subs	r0, r3, #4
 802302e:	3202      	adds	r2, #2
 8023030:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8023034:	f853 0f04 	ldr.w	r0, [r3, #4]!
 8023038:	3202      	adds	r2, #2
 802303a:	ee07 0a90 	vmov	s15, r0
 802303e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8023042:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8023046:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802304a:	bf44      	itt	mi
 802304c:	f832 1c02 	ldrhmi.w	r1, [r2, #-2]
 8023050:	eeb0 7a67 	vmovmi.f32	s14, s15
 8023054:	42ab      	cmp	r3, r5
 8023056:	d1ed      	bne.n	8023034 <svc_ovo_classification_vote+0xd8>
 8023058:	e7de      	b.n	8023018 <svc_ovo_classification_vote+0xbc>
 802305a:	edd3 7a00 	vldr	s15, [r3]
 802305e:	2d01      	cmp	r5, #1
 8023060:	7811      	ldrb	r1, [r2, #0]
 8023062:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8023066:	d9d7      	bls.n	8023018 <svc_ovo_classification_vote+0xbc>
 8023068:	1f18      	subs	r0, r3, #4
 802306a:	3201      	adds	r2, #1
 802306c:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8023070:	f853 0f04 	ldr.w	r0, [r3, #4]!
 8023074:	3201      	adds	r2, #1
 8023076:	ee07 0a90 	vmov	s15, r0
 802307a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 802307e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8023082:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023086:	bfc4      	itt	gt
 8023088:	f812 1c01 	ldrbgt.w	r1, [r2, #-1]
 802308c:	eeb0 7a67 	vmovgt.f32	s14, s15
 8023090:	42ab      	cmp	r3, r5
 8023092:	d1ed      	bne.n	8023070 <svc_ovo_classification_vote+0x114>
 8023094:	6039      	str	r1, [r7, #0]
 8023096:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802309a:	bf00      	nop

0802309c <svc_iter_prob_estimate>:
 802309c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80230a0:	6883      	ldr	r3, [r0, #8]
 80230a2:	b089      	sub	sp, #36	; 0x24
 80230a4:	fb03 f803 	mul.w	r8, r3, r3
 80230a8:	9812      	ldr	r0, [sp, #72]	; 0x48
 80230aa:	f103 0901 	add.w	r9, r3, #1
 80230ae:	eb00 0b88 	add.w	fp, r0, r8, lsl #2
 80230b2:	9302      	str	r3, [sp, #8]
 80230b4:	eb00 08c8 	add.w	r8, r0, r8, lsl #3
 80230b8:	ea4f 0989 	mov.w	r9, r9, lsl #2
 80230bc:	2b00      	cmp	r3, #0
 80230be:	f000 8120 	beq.w	8023302 <svc_iter_prob_estimate+0x266>
 80230c2:	f1a9 0a08 	sub.w	sl, r9, #8
 80230c6:	4656      	mov	r6, sl
 80230c8:	f1a9 0504 	sub.w	r5, r9, #4
 80230cc:	1947      	adds	r7, r0, r5
 80230ce:	46bc      	mov	ip, r7
 80230d0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80230d4:	f100 0e04 	add.w	lr, r0, #4
 80230d8:	b1b6      	cbz	r6, 8023108 <svc_iter_prob_estimate+0x6c>
 80230da:	460c      	mov	r4, r1
 80230dc:	4670      	mov	r0, lr
 80230de:	eb0a 030e 	add.w	r3, sl, lr
 80230e2:	edd4 7a00 	vldr	s15, [r4]
 80230e6:	ece0 7a01 	vstmia	r0!, {s15}
 80230ea:	ecf4 7a01 	vldmia	r4!, {s15}
 80230ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80230f2:	4560      	cmp	r0, ip
 80230f4:	edc3 7a00 	vstr	s15, [r3]
 80230f8:	442b      	add	r3, r5
 80230fa:	d1f2      	bne.n	80230e2 <svc_iter_prob_estimate+0x46>
 80230fc:	4431      	add	r1, r6
 80230fe:	3e04      	subs	r6, #4
 8023100:	44ce      	add	lr, r9
 8023102:	44ac      	add	ip, r5
 8023104:	2e00      	cmp	r6, #0
 8023106:	d1e8      	bne.n	80230da <svc_iter_prob_estimate+0x3e>
 8023108:	eddd 7a02 	vldr	s15, [sp, #8]
 802310c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8023110:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8023114:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8023116:	e9cd 8206 	strd	r8, r2, [sp, #24]
 802311a:	ee87 6a27 	vdiv.f32	s12, s14, s15
 802311e:	465b      	mov	r3, fp
 8023120:	f04f 0e04 	mov.w	lr, #4
 8023124:	eddf 6a79 	vldr	s13, [pc, #484]	; 802330c <svc_iter_prob_estimate+0x270>
 8023128:	46a0      	mov	r8, r4
 802312a:	9912      	ldr	r1, [sp, #72]	; 0x48
 802312c:	ebab 0005 	sub.w	r0, fp, r5
 8023130:	4429      	add	r1, r5
 8023132:	3904      	subs	r1, #4
 8023134:	4692      	mov	sl, r2
 8023136:	1b00      	subs	r0, r0, r4
 8023138:	9105      	str	r1, [sp, #20]
 802313a:	9a02      	ldr	r2, [sp, #8]
 802313c:	f1ab 0104 	sub.w	r1, fp, #4
 8023140:	9003      	str	r0, [sp, #12]
 8023142:	9104      	str	r1, [sp, #16]
 8023144:	ecaa 6a01 	vstmia	sl!, {s12}
 8023148:	edc3 6a00 	vstr	s13, [r3]
 802314c:	b1ee      	cbz	r6, 802318a <svc_iter_prob_estimate+0xee>
 802314e:	00b1      	lsls	r1, r6, #2
 8023150:	eb08 0401 	add.w	r4, r8, r1
 8023154:	4459      	add	r1, fp
 8023156:	9101      	str	r1, [sp, #4]
 8023158:	9803      	ldr	r0, [sp, #12]
 802315a:	9904      	ldr	r1, [sp, #16]
 802315c:	eef0 7a66 	vmov.f32	s15, s13
 8023160:	eb01 0c0e 	add.w	ip, r1, lr
 8023164:	4438      	add	r0, r7
 8023166:	9901      	ldr	r1, [sp, #4]
 8023168:	e001      	b.n	802316e <svc_iter_prob_estimate+0xd2>
 802316a:	edd3 7a00 	vldr	s15, [r3]
 802316e:	ed94 7a00 	vldr	s14, [r4]
 8023172:	eee7 7a07 	vfma.f32	s15, s14, s14
 8023176:	edc3 7a00 	vstr	s15, [r3]
 802317a:	edd1 7a00 	vldr	s15, [r1]
 802317e:	ece0 7a01 	vstmia	r0!, {s15}
 8023182:	4584      	cmp	ip, r0
 8023184:	442c      	add	r4, r5
 8023186:	4429      	add	r1, r5
 8023188:	d1ef      	bne.n	802316a <svc_iter_prob_estimate+0xce>
 802318a:	3601      	adds	r6, #1
 802318c:	42b2      	cmp	r2, r6
 802318e:	d01c      	beq.n	80231ca <svc_iter_prob_estimate+0x12e>
 8023190:	9905      	ldr	r1, [sp, #20]
 8023192:	eb08 000e 	add.w	r0, r8, lr
 8023196:	4471      	add	r1, lr
 8023198:	eb0b 040e 	add.w	r4, fp, lr
 802319c:	ed91 7a00 	vldr	s14, [r1]
 80231a0:	edd3 7a00 	vldr	s15, [r3]
 80231a4:	eee7 7a07 	vfma.f32	s15, s14, s14
 80231a8:	edc3 7a00 	vstr	s15, [r3]
 80231ac:	ecf0 7a01 	vldmia	r0!, {s15}
 80231b0:	ed91 7a00 	vldr	s14, [r1]
 80231b4:	ee67 7a67 	vnmul.f32	s15, s14, s15
 80231b8:	4287      	cmp	r7, r0
 80231ba:	4429      	add	r1, r5
 80231bc:	ece4 7a01 	vstmia	r4!, {s15}
 80231c0:	d1ec      	bne.n	802319c <svc_iter_prob_estimate+0x100>
 80231c2:	444b      	add	r3, r9
 80231c4:	442f      	add	r7, r5
 80231c6:	44ce      	add	lr, r9
 80231c8:	e7bc      	b.n	8023144 <svc_iter_prob_estimate+0xa8>
 80231ca:	eddd 7a02 	vldr	s15, [sp, #8]
 80231ce:	e9dd 8206 	ldrd	r8, r2, [sp, #24]
 80231d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80231d6:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8023310 <svc_iter_prob_estimate+0x274>
 80231da:	2364      	movs	r3, #100	; 0x64
 80231dc:	ee87 3a27 	vdiv.f32	s6, s14, s15
 80231e0:	ed9f 4a4a 	vldr	s8, [pc, #296]	; 802330c <svc_iter_prob_estimate+0x270>
 80231e4:	eddf 3a4b 	vldr	s7, [pc, #300]	; 8023314 <svc_iter_prob_estimate+0x278>
 80231e8:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 80231ec:	eb02 0a05 	add.w	sl, r2, r5
 80231f0:	eb08 0e05 	add.w	lr, r8, r5
 80231f4:	9301      	str	r3, [sp, #4]
 80231f6:	9b02      	ldr	r3, [sp, #8]
 80231f8:	2b00      	cmp	r3, #0
 80231fa:	d077      	beq.n	80232ec <svc_iter_prob_estimate+0x250>
 80231fc:	4616      	mov	r6, r2
 80231fe:	4644      	mov	r4, r8
 8023200:	4658      	mov	r0, fp
 8023202:	eddf 5a42 	vldr	s11, [pc, #264]	; 802330c <svc_iter_prob_estimate+0x270>
 8023206:	eca4 4a01 	vstmia	r4!, {s8}
 802320a:	4611      	mov	r1, r2
 802320c:	eddf 7a3f 	vldr	s15, [pc, #252]	; 802330c <svc_iter_prob_estimate+0x270>
 8023210:	4603      	mov	r3, r0
 8023212:	4428      	add	r0, r5
 8023214:	ecf3 6a01 	vldmia	r3!, {s13}
 8023218:	ecb1 7a01 	vldmia	r1!, {s14}
 802321c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8023220:	4283      	cmp	r3, r0
 8023222:	ed44 7a01 	vstr	s15, [r4, #-4]
 8023226:	d1f5      	bne.n	8023214 <svc_iter_prob_estimate+0x178>
 8023228:	ecb6 7a01 	vldmia	r6!, {s14}
 802322c:	45b2      	cmp	sl, r6
 802322e:	4618      	mov	r0, r3
 8023230:	eee7 5a87 	vfma.f32	s11, s15, s14
 8023234:	d1e7      	bne.n	8023206 <svc_iter_prob_estimate+0x16a>
 8023236:	4643      	mov	r3, r8
 8023238:	ed9f 7a34 	vldr	s14, [pc, #208]	; 802330c <svc_iter_prob_estimate+0x270>
 802323c:	ecf3 7a01 	vldmia	r3!, {s15}
 8023240:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8023244:	eef0 7ae7 	vabs.f32	s15, s15
 8023248:	4573      	cmp	r3, lr
 802324a:	fe87 7a27 	vmaxnm.f32	s14, s14, s15
 802324e:	d1f5      	bne.n	802323c <svc_iter_prob_estimate+0x1a0>
 8023250:	eeb4 7ac3 	vcmpe.f32	s14, s6
 8023254:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023258:	d445      	bmi.n	80232e6 <svc_iter_prob_estimate+0x24a>
 802325a:	465f      	mov	r7, fp
 802325c:	4694      	mov	ip, r2
 802325e:	4646      	mov	r6, r8
 8023260:	465c      	mov	r4, fp
 8023262:	edd6 6a00 	vldr	s13, [r6]
 8023266:	ed97 7a00 	vldr	s14, [r7]
 802326a:	ee75 6ae6 	vsub.f32	s13, s11, s13
 802326e:	ee37 7a23 	vadd.f32	s14, s14, s7
 8023272:	eddc 7a00 	vldr	s15, [ip]
 8023276:	ee86 6a87 	vdiv.f32	s12, s13, s14
 802327a:	ee77 7a86 	vadd.f32	s15, s15, s12
 802327e:	ecec 7a01 	vstmia	ip!, {s15}
 8023282:	ecf6 7a01 	vldmia	r6!, {s15}
 8023286:	ed97 7a00 	vldr	s14, [r7]
 802328a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 802328e:	eee7 7a06 	vfma.f32	s15, s14, s12
 8023292:	ee76 6a05 	vadd.f32	s13, s12, s10
 8023296:	eee7 5a86 	vfma.f32	s11, s15, s12
 802329a:	ee66 4aa6 	vmul.f32	s9, s13, s13
 802329e:	eef0 7a65 	vmov.f32	s15, s11
 80232a2:	ee85 7a26 	vdiv.f32	s14, s10, s13
 80232a6:	eec7 5aa4 	vdiv.f32	s11, s15, s9
 80232aa:	4610      	mov	r0, r2
 80232ac:	4641      	mov	r1, r8
 80232ae:	4623      	mov	r3, r4
 80232b0:	442c      	add	r4, r5
 80232b2:	ecf3 6a01 	vldmia	r3!, {s13}
 80232b6:	edd1 7a00 	vldr	s15, [r1]
 80232ba:	eee6 7a86 	vfma.f32	s15, s13, s12
 80232be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80232c2:	ece1 7a01 	vstmia	r1!, {s15}
 80232c6:	edd0 7a00 	vldr	s15, [r0]
 80232ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80232ce:	42a3      	cmp	r3, r4
 80232d0:	ece0 7a01 	vstmia	r0!, {s15}
 80232d4:	d1ed      	bne.n	80232b2 <svc_iter_prob_estimate+0x216>
 80232d6:	45b6      	cmp	lr, r6
 80232d8:	461c      	mov	r4, r3
 80232da:	444f      	add	r7, r9
 80232dc:	d1c1      	bne.n	8023262 <svc_iter_prob_estimate+0x1c6>
 80232de:	9b01      	ldr	r3, [sp, #4]
 80232e0:	3b01      	subs	r3, #1
 80232e2:	9301      	str	r3, [sp, #4]
 80232e4:	d187      	bne.n	80231f6 <svc_iter_prob_estimate+0x15a>
 80232e6:	b009      	add	sp, #36	; 0x24
 80232e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80232ec:	eeb5 3ac0 	vcmpe.f32	s6, #0.0
 80232f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80232f4:	dcf7      	bgt.n	80232e6 <svc_iter_prob_estimate+0x24a>
 80232f6:	9b01      	ldr	r3, [sp, #4]
 80232f8:	3b01      	subs	r3, #1
 80232fa:	9301      	str	r3, [sp, #4]
 80232fc:	f47f af7b 	bne.w	80231f6 <svc_iter_prob_estimate+0x15a>
 8023300:	e7f1      	b.n	80232e6 <svc_iter_prob_estimate+0x24a>
 8023302:	f1a9 0504 	sub.w	r5, r9, #4
 8023306:	ee07 3a90 	vmov	s15, r3
 802330a:	e762      	b.n	80231d2 <svc_iter_prob_estimate+0x136>
 802330c:	00000000 	.word	0x00000000
 8023310:	3ba3d70a 	.word	0x3ba3d70a
 8023314:	34000000 	.word	0x34000000

08023318 <svc_decoder>:
 8023318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802331c:	ed2d 8b04 	vpush	{d8-d9}
 8023320:	461c      	mov	r4, r3
 8023322:	e9d3 9801 	ldrd	r9, r8, [r3, #4]
 8023326:	f108 35ff 	add.w	r5, r8, #4294967295	; 0xffffffff
 802332a:	b089      	sub	sp, #36	; 0x24
 802332c:	fb08 f505 	mul.w	r5, r8, r5
 8023330:	f893 c015 	ldrb.w	ip, [r3, #21]
 8023334:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8023336:	086d      	lsrs	r5, r5, #1
 8023338:	eb03 0689 	add.w	r6, r3, r9, lsl #2
 802333c:	7d23      	ldrb	r3, [r4, #20]
 802333e:	4607      	mov	r7, r0
 8023340:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8023344:	eb06 0585 	add.w	r5, r6, r5, lsl #2
 8023348:	9304      	str	r3, [sp, #16]
 802334a:	f1bc 0f03 	cmp.w	ip, #3
 802334e:	f200 814d 	bhi.w	80235ec <svc_decoder+0x2d4>
 8023352:	e8df f00c 	tbb	[pc, ip]
 8023356:	b187      	.short	0xb187
 8023358:	0254      	.short	0x0254
 802335a:	6823      	ldr	r3, [r4, #0]
 802335c:	edd4 8a06 	vldr	s17, [r4, #24]
 8023360:	ed94 8a07 	vldr	s16, [r4, #28]
 8023364:	f8d4 a02c 	ldr.w	sl, [r4, #44]	; 0x2c
 8023368:	f1b9 0f00 	cmp.w	r9, #0
 802336c:	d022      	beq.n	80233b4 <svc_decoder+0x9c>
 802336e:	f8dd b058 	ldr.w	fp, [sp, #88]	; 0x58
 8023372:	9405      	str	r4, [sp, #20]
 8023374:	461f      	mov	r7, r3
 8023376:	465c      	mov	r4, fp
 8023378:	4683      	mov	fp, r0
 802337a:	ea4f 0983 	mov.w	r9, r3, lsl #2
 802337e:	2f00      	cmp	r7, #0
 8023380:	f000 812e 	beq.w	80235e0 <svc_decoder+0x2c8>
 8023384:	465b      	mov	r3, fp
 8023386:	eddf 7a9b 	vldr	s15, [pc, #620]	; 80235f4 <svc_decoder+0x2dc>
 802338a:	eb0a 0209 	add.w	r2, sl, r9
 802338e:	ecba 7a01 	vldmia	sl!, {s14}
 8023392:	ecf3 6a01 	vldmia	r3!, {s13}
 8023396:	4592      	cmp	sl, r2
 8023398:	eee6 7a87 	vfma.f32	s15, s13, s14
 802339c:	d1f7      	bne.n	802338e <svc_decoder+0x76>
 802339e:	eeb0 0a48 	vmov.f32	s0, s16
 80233a2:	eea8 0aa7 	vfma.f32	s0, s17, s15
 80233a6:	f001 fccd 	bl	8024d44 <tanhf>
 80233aa:	eca4 0a01 	vstmia	r4!, {s0}
 80233ae:	42a6      	cmp	r6, r4
 80233b0:	d1e5      	bne.n	802337e <svc_decoder+0x66>
 80233b2:	9c05      	ldr	r4, [sp, #20]
 80233b4:	2300      	movs	r3, #0
 80233b6:	9305      	str	r3, [sp, #20]
 80233b8:	9b04      	ldr	r3, [sp, #16]
 80233ba:	9916      	ldr	r1, [sp, #88]	; 0x58
 80233bc:	2b00      	cmp	r3, #0
 80233be:	f040 80b8 	bne.w	8023532 <svc_decoder+0x21a>
 80233c2:	9e03      	ldr	r6, [sp, #12]
 80233c4:	462b      	mov	r3, r5
 80233c6:	4632      	mov	r2, r6
 80233c8:	4620      	mov	r0, r4
 80233ca:	f7ff fcd5 	bl	8022d78 <svc_ovo_output>
 80233ce:	462b      	mov	r3, r5
 80233d0:	9a02      	ldr	r2, [sp, #8]
 80233d2:	4631      	mov	r1, r6
 80233d4:	4620      	mov	r0, r4
 80233d6:	f7ff fdc1 	bl	8022f5c <svc_ovo_classification_vote>
 80233da:	f1b8 0f02 	cmp.w	r8, #2
 80233de:	d108      	bne.n	80233f2 <svc_decoder+0xda>
 80233e0:	9b03      	ldr	r3, [sp, #12]
 80233e2:	edd3 7a00 	vldr	s15, [r3]
 80233e6:	eeb1 7a67 	vneg.f32	s14, s15
 80233ea:	edc3 7a01 	vstr	s15, [r3, #4]
 80233ee:	ed83 7a00 	vstr	s14, [r3]
 80233f2:	9805      	ldr	r0, [sp, #20]
 80233f4:	b009      	add	sp, #36	; 0x24
 80233f6:	ecbd 8b04 	vpop	{d8-d9}
 80233fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80233fe:	6823      	ldr	r3, [r4, #0]
 8023400:	ed94 8a06 	vldr	s16, [r4, #24]
 8023404:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8023406:	f1b9 0f00 	cmp.w	r9, #0
 802340a:	d0d3      	beq.n	80233b4 <svc_decoder+0x9c>
 802340c:	f04f 0b00 	mov.w	fp, #0
 8023410:	461f      	mov	r7, r3
 8023412:	f8dd a058 	ldr.w	sl, [sp, #88]	; 0x58
 8023416:	0099      	lsls	r1, r3, #2
 8023418:	9505      	str	r5, [sp, #20]
 802341a:	9406      	str	r4, [sp, #24]
 802341c:	4655      	mov	r5, sl
 802341e:	9607      	str	r6, [sp, #28]
 8023420:	468a      	mov	sl, r1
 8023422:	465e      	mov	r6, fp
 8023424:	4614      	mov	r4, r2
 8023426:	4683      	mov	fp, r0
 8023428:	b1cf      	cbz	r7, 802345e <svc_decoder+0x146>
 802342a:	465b      	mov	r3, fp
 802342c:	ed9f 0a71 	vldr	s0, [pc, #452]	; 80235f4 <svc_decoder+0x2dc>
 8023430:	eb04 0c0a 	add.w	ip, r4, sl
 8023434:	ecf4 7a01 	vldmia	r4!, {s15}
 8023438:	ecb3 7a01 	vldmia	r3!, {s14}
 802343c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8023440:	4564      	cmp	r4, ip
 8023442:	eea7 0aa7 	vfma.f32	s0, s15, s15
 8023446:	d1f5      	bne.n	8023434 <svc_decoder+0x11c>
 8023448:	ee20 0a48 	vnmul.f32	s0, s0, s16
 802344c:	f001 fccc 	bl	8024de8 <expf>
 8023450:	3601      	adds	r6, #1
 8023452:	45b1      	cmp	r9, r6
 8023454:	eca5 0a01 	vstmia	r5!, {s0}
 8023458:	d067      	beq.n	802352a <svc_decoder+0x212>
 802345a:	2f00      	cmp	r7, #0
 802345c:	d1e5      	bne.n	802342a <svc_decoder+0x112>
 802345e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8023462:	e7f5      	b.n	8023450 <svc_decoder+0x138>
 8023464:	6823      	ldr	r3, [r4, #0]
 8023466:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8023468:	f1b9 0f00 	cmp.w	r9, #0
 802346c:	d0a2      	beq.n	80233b4 <svc_decoder+0x9c>
 802346e:	ea4f 0b83 	mov.w	fp, r3, lsl #2
 8023472:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 8023476:	f04f 0c00 	mov.w	ip, #0
 802347a:	b1a3      	cbz	r3, 80234a6 <svc_decoder+0x18e>
 802347c:	4639      	mov	r1, r7
 802347e:	eddf 7a5d 	vldr	s15, [pc, #372]	; 80235f4 <svc_decoder+0x2dc>
 8023482:	eb02 000b 	add.w	r0, r2, fp
 8023486:	ecb2 7a01 	vldmia	r2!, {s14}
 802348a:	ecf1 6a01 	vldmia	r1!, {s13}
 802348e:	4282      	cmp	r2, r0
 8023490:	eee6 7a87 	vfma.f32	s15, s13, s14
 8023494:	d1f7      	bne.n	8023486 <svc_decoder+0x16e>
 8023496:	f10c 0c01 	add.w	ip, ip, #1
 802349a:	45e1      	cmp	r9, ip
 802349c:	ecee 7a01 	vstmia	lr!, {s15}
 80234a0:	d088      	beq.n	80233b4 <svc_decoder+0x9c>
 80234a2:	2b00      	cmp	r3, #0
 80234a4:	d1ea      	bne.n	802347c <svc_decoder+0x164>
 80234a6:	eddf 7a53 	vldr	s15, [pc, #332]	; 80235f4 <svc_decoder+0x2dc>
 80234aa:	f10c 0c01 	add.w	ip, ip, #1
 80234ae:	45e1      	cmp	r9, ip
 80234b0:	ecee 7a01 	vstmia	lr!, {s15}
 80234b4:	d1f5      	bne.n	80234a2 <svc_decoder+0x18a>
 80234b6:	e77d      	b.n	80233b4 <svc_decoder+0x9c>
 80234b8:	6823      	ldr	r3, [r4, #0]
 80234ba:	ed94 9a06 	vldr	s18, [r4, #24]
 80234be:	edd4 8a07 	vldr	s17, [r4, #28]
 80234c2:	6a21      	ldr	r1, [r4, #32]
 80234c4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80234c6:	f1b9 0f00 	cmp.w	r9, #0
 80234ca:	f43f af73 	beq.w	80233b4 <svc_decoder+0x9c>
 80234ce:	ee07 1a90 	vmov	s15, r1
 80234d2:	f04f 0b00 	mov.w	fp, #0
 80234d6:	f8dd a058 	ldr.w	sl, [sp, #88]	; 0x58
 80234da:	0099      	lsls	r1, r3, #2
 80234dc:	9505      	str	r5, [sp, #20]
 80234de:	9406      	str	r4, [sp, #24]
 80234e0:	4655      	mov	r5, sl
 80234e2:	9607      	str	r6, [sp, #28]
 80234e4:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 80234e8:	465e      	mov	r6, fp
 80234ea:	468a      	mov	sl, r1
 80234ec:	4614      	mov	r4, r2
 80234ee:	4683      	mov	fp, r0
 80234f0:	461f      	mov	r7, r3
 80234f2:	2f00      	cmp	r7, #0
 80234f4:	d077      	beq.n	80235e6 <svc_decoder+0x2ce>
 80234f6:	465b      	mov	r3, fp
 80234f8:	eddf 7a3e 	vldr	s15, [pc, #248]	; 80235f4 <svc_decoder+0x2dc>
 80234fc:	eb04 0c0a 	add.w	ip, r4, sl
 8023500:	ecb4 7a01 	vldmia	r4!, {s14}
 8023504:	ecf3 6a01 	vldmia	r3!, {s13}
 8023508:	4564      	cmp	r4, ip
 802350a:	eee6 7a87 	vfma.f32	s15, s13, s14
 802350e:	d1f7      	bne.n	8023500 <svc_decoder+0x1e8>
 8023510:	eeb0 0a68 	vmov.f32	s0, s17
 8023514:	eea9 0a27 	vfma.f32	s0, s18, s15
 8023518:	eef0 0a48 	vmov.f32	s1, s16
 802351c:	f001 fc9a 	bl	8024e54 <powf>
 8023520:	3601      	adds	r6, #1
 8023522:	45b1      	cmp	r9, r6
 8023524:	eca5 0a01 	vstmia	r5!, {s0}
 8023528:	d1e3      	bne.n	80234f2 <svc_decoder+0x1da>
 802352a:	e9dd 5405 	ldrd	r5, r4, [sp, #20]
 802352e:	9e07      	ldr	r6, [sp, #28]
 8023530:	e740      	b.n	80233b4 <svc_decoder+0x9c>
 8023532:	462b      	mov	r3, r5
 8023534:	4632      	mov	r2, r6
 8023536:	4620      	mov	r0, r4
 8023538:	f7ff fc1e 	bl	8022d78 <svc_ovo_output>
 802353c:	462b      	mov	r3, r5
 802353e:	9a02      	ldr	r2, [sp, #8]
 8023540:	4631      	mov	r1, r6
 8023542:	4620      	mov	r0, r4
 8023544:	f7ff fd0a 	bl	8022f5c <svc_ovo_classification_vote>
 8023548:	68a3      	ldr	r3, [r4, #8]
 802354a:	f8d4 9038 	ldr.w	r9, [r4, #56]	; 0x38
 802354e:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 8023552:	fb03 fa0a 	mul.w	sl, r3, sl
 8023556:	ea5f 0a5a 	movs.w	sl, sl, lsr #1
 802355a:	6be7      	ldr	r7, [r4, #60]	; 0x3c
 802355c:	d01f      	beq.n	802359e <svc_decoder+0x286>
 802355e:	46b3      	mov	fp, r6
 8023560:	f04f 0800 	mov.w	r8, #0
 8023564:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8023568:	ecbb 7a01 	vldmia	fp!, {s14}
 802356c:	ecf9 7a01 	vldmia	r9!, {s15}
 8023570:	ecb7 0a01 	vldmia	r7!, {s0}
 8023574:	eea7 0a27 	vfma.f32	s0, s14, s15
 8023578:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 802357c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023580:	db1a      	blt.n	80235b8 <svc_decoder+0x2a0>
 8023582:	eeb1 0a40 	vneg.f32	s0, s0
 8023586:	f001 fc2f 	bl	8024de8 <expf>
 802358a:	ee70 7a08 	vadd.f32	s15, s0, s16
 802358e:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8023592:	f108 0801 	add.w	r8, r8, #1
 8023596:	45c2      	cmp	sl, r8
 8023598:	ed0b 0a01 	vstr	s0, [fp, #-4]
 802359c:	d1e4      	bne.n	8023568 <svc_decoder+0x250>
 802359e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80235a2:	9500      	str	r5, [sp, #0]
 80235a4:	4631      	mov	r1, r6
 80235a6:	4620      	mov	r0, r4
 80235a8:	f7ff fd78 	bl	802309c <svc_iter_prob_estimate>
 80235ac:	9805      	ldr	r0, [sp, #20]
 80235ae:	b009      	add	sp, #36	; 0x24
 80235b0:	ecbd 8b04 	vpop	{d8-d9}
 80235b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80235b8:	f001 fc16 	bl	8024de8 <expf>
 80235bc:	ee30 0a08 	vadd.f32	s0, s0, s16
 80235c0:	eec8 7a00 	vdiv.f32	s15, s16, s0
 80235c4:	f108 0801 	add.w	r8, r8, #1
 80235c8:	45d0      	cmp	r8, sl
 80235ca:	ed4b 7a01 	vstr	s15, [fp, #-4]
 80235ce:	d1cb      	bne.n	8023568 <svc_decoder+0x250>
 80235d0:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80235d4:	9500      	str	r5, [sp, #0]
 80235d6:	4631      	mov	r1, r6
 80235d8:	4620      	mov	r0, r4
 80235da:	f7ff fd5f 	bl	802309c <svc_iter_prob_estimate>
 80235de:	e7e5      	b.n	80235ac <svc_decoder+0x294>
 80235e0:	eeb0 0a48 	vmov.f32	s0, s16
 80235e4:	e6df      	b.n	80233a6 <svc_decoder+0x8e>
 80235e6:	eeb0 0a68 	vmov.f32	s0, s17
 80235ea:	e795      	b.n	8023518 <svc_decoder+0x200>
 80235ec:	f06f 0301 	mvn.w	r3, #1
 80235f0:	9305      	str	r3, [sp, #20]
 80235f2:	e6e1      	b.n	80233b8 <svc_decoder+0xa0>
 80235f4:	00000000 	.word	0x00000000

080235f8 <forward_svc>:
 80235f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80235fc:	6983      	ldr	r3, [r0, #24]
 80235fe:	b0a1      	sub	sp, #132	; 0x84
 8023600:	881c      	ldrh	r4, [r3, #0]
 8023602:	2c00      	cmp	r4, #0
 8023604:	d02f      	beq.n	8023666 <forward_svc+0x6e>
 8023606:	685f      	ldr	r7, [r3, #4]
 8023608:	2c01      	cmp	r4, #1
 802360a:	687b      	ldr	r3, [r7, #4]
 802360c:	bf8c      	ite	hi
 802360e:	f107 020c 	addhi.w	r2, r7, #12
 8023612:	2200      	movls	r2, #0
 8023614:	2b00      	cmp	r3, #0
 8023616:	f000 80ab 	beq.w	8023770 <forward_svc+0x178>
 802361a:	f8d3 9000 	ldr.w	r9, [r3]
 802361e:	6853      	ldr	r3, [r2, #4]
 8023620:	2b00      	cmp	r3, #0
 8023622:	f000 80aa 	beq.w	802377a <forward_svc+0x182>
 8023626:	e9d3 8e00 	ldrd	r8, lr, [r3]
 802362a:	2c02      	cmp	r4, #2
 802362c:	d91f      	bls.n	802366e <forward_svc+0x76>
 802362e:	69fb      	ldr	r3, [r7, #28]
 8023630:	2b00      	cmp	r3, #0
 8023632:	f000 80a8 	beq.w	8023786 <forward_svc+0x18e>
 8023636:	e9d3 c600 	ldrd	ip, r6, [r3]
 802363a:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 802363e:	691d      	ldr	r5, [r3, #16]
 8023640:	2c03      	cmp	r4, #3
 8023642:	d014      	beq.n	802366e <forward_svc+0x76>
 8023644:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8023646:	b184      	cbz	r4, 802366a <forward_svc+0x72>
 8023648:	6827      	ldr	r7, [r4, #0]
 802364a:	f890 4029 	ldrb.w	r4, [r0, #41]	; 0x29
 802364e:	69bf      	ldr	r7, [r7, #24]
 8023650:	68bf      	ldr	r7, [r7, #8]
 8023652:	9702      	str	r7, [sp, #8]
 8023654:	b174      	cbz	r4, 8023674 <forward_svc+0x7c>
 8023656:	2b00      	cmp	r3, #0
 8023658:	f000 809b 	beq.w	8023792 <forward_svc+0x19a>
 802365c:	695f      	ldr	r7, [r3, #20]
 802365e:	699b      	ldr	r3, [r3, #24]
 8023660:	970a      	str	r7, [sp, #40]	; 0x28
 8023662:	930b      	str	r3, [sp, #44]	; 0x2c
 8023664:	e008      	b.n	8023678 <forward_svc+0x80>
 8023666:	6863      	ldr	r3, [r4, #4]
 8023668:	deff      	udf	#255	; 0xff
 802366a:	69a3      	ldr	r3, [r4, #24]
 802366c:	deff      	udf	#255	; 0xff
 802366e:	2300      	movs	r3, #0
 8023670:	685b      	ldr	r3, [r3, #4]
 8023672:	deff      	udf	#255	; 0xff
 8023674:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
 8023678:	f8d9 300c 	ldr.w	r3, [r9, #12]
 802367c:	68f7      	ldr	r7, [r6, #12]
 802367e:	f8dc c018 	ldr.w	ip, [ip, #24]
 8023682:	f8d1 b00c 	ldr.w	fp, [r1, #12]
 8023686:	6989      	ldr	r1, [r1, #24]
 8023688:	685b      	ldr	r3, [r3, #4]
 802368a:	9107      	str	r1, [sp, #28]
 802368c:	68ff      	ldr	r7, [r7, #12]
 802368e:	f8dc 1008 	ldr.w	r1, [ip, #8]
 8023692:	f8d6 a018 	ldr.w	sl, [r6, #24]
 8023696:	9105      	str	r1, [sp, #20]
 8023698:	fbb7 f1f3 	udiv	r1, r7, r3
 802369c:	69ad      	ldr	r5, [r5, #24]
 802369e:	9104      	str	r1, [sp, #16]
 80236a0:	f8da 1008 	ldr.w	r1, [sl, #8]
 80236a4:	68d6      	ldr	r6, [r2, #12]
 80236a6:	9106      	str	r1, [sp, #24]
 80236a8:	68a9      	ldr	r1, [r5, #8]
 80236aa:	6992      	ldr	r2, [r2, #24]
 80236ac:	9108      	str	r1, [sp, #32]
 80236ae:	68f1      	ldr	r1, [r6, #12]
 80236b0:	f8d8 8018 	ldr.w	r8, [r8, #24]
 80236b4:	9103      	str	r1, [sp, #12]
 80236b6:	6891      	ldr	r1, [r2, #8]
 80236b8:	f8de e018 	ldr.w	lr, [lr, #24]
 80236bc:	9109      	str	r1, [sp, #36]	; 0x24
 80236be:	9907      	ldr	r1, [sp, #28]
 80236c0:	f8d9 9018 	ldr.w	r9, [r9, #24]
 80236c4:	6889      	ldr	r1, [r1, #8]
 80236c6:	f8d8 8008 	ldr.w	r8, [r8, #8]
 80236ca:	f8de e008 	ldr.w	lr, [lr, #8]
 80236ce:	f8d9 c008 	ldr.w	ip, [r9, #8]
 80236d2:	f8db 600c 	ldr.w	r6, [fp, #12]
 80236d6:	9107      	str	r1, [sp, #28]
 80236d8:	2c00      	cmp	r4, #0
 80236da:	d051      	beq.n	8023780 <forward_svc+0x188>
 80236dc:	990a      	ldr	r1, [sp, #40]	; 0x28
 80236de:	698f      	ldr	r7, [r1, #24]
 80236e0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80236e2:	f8d7 a008 	ldr.w	sl, [r7, #8]
 80236e6:	6989      	ldr	r1, [r1, #24]
 80236e8:	688f      	ldr	r7, [r1, #8]
 80236ea:	4683      	mov	fp, r0
 80236ec:	ed90 7a07 	vldr	s14, [r0, #28]
 80236f0:	edd0 7a08 	vldr	s15, [r0, #32]
 80236f4:	f04f 0900 	mov.w	r9, #0
 80236f8:	682d      	ldr	r5, [r5, #0]
 80236fa:	6812      	ldr	r2, [r2, #0]
 80236fc:	f88d 404c 	strb.w	r4, [sp, #76]	; 0x4c
 8023700:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8023702:	9902      	ldr	r1, [sp, #8]
 8023704:	941e      	str	r4, [sp, #120]	; 0x78
 8023706:	9c05      	ldr	r4, [sp, #20]
 8023708:	9100      	str	r1, [sp, #0]
 802370a:	9418      	str	r4, [sp, #96]	; 0x60
 802370c:	f3c2 12c6 	ubfx	r2, r2, #7, #7
 8023710:	9c06      	ldr	r4, [sp, #24]
 8023712:	f88d 205d 	strb.w	r2, [sp, #93]	; 0x5d
 8023716:	f8db 2024 	ldr.w	r2, [fp, #36]	; 0x24
 802371a:	9419      	str	r4, [sp, #100]	; 0x64
 802371c:	9c07      	ldr	r4, [sp, #28]
 802371e:	9216      	str	r2, [sp, #88]	; 0x58
 8023720:	f3c5 15c6 	ubfx	r5, r5, #7, #7
 8023724:	9a04      	ldr	r2, [sp, #16]
 8023726:	f88d 505c 	strb.w	r5, [sp, #92]	; 0x5c
 802372a:	941a      	str	r4, [sp, #104]	; 0x68
 802372c:	9d03      	ldr	r5, [sp, #12]
 802372e:	9c08      	ldr	r4, [sp, #32]
 8023730:	4660      	mov	r0, ip
 8023732:	f89b c028 	ldrb.w	ip, [fp, #40]	; 0x28
 8023736:	930e      	str	r3, [sp, #56]	; 0x38
 8023738:	920f      	str	r2, [sp, #60]	; 0x3c
 802373a:	4671      	mov	r1, lr
 802373c:	ab0e      	add	r3, sp, #56	; 0x38
 802373e:	aa0d      	add	r2, sp, #52	; 0x34
 8023740:	ed8d 7a14 	vstr	s14, [sp, #80]	; 0x50
 8023744:	9510      	str	r5, [sp, #64]	; 0x40
 8023746:	9612      	str	r6, [sp, #72]	; 0x48
 8023748:	e9cd 4a1b 	strd	r4, sl, [sp, #108]	; 0x6c
 802374c:	971d      	str	r7, [sp, #116]	; 0x74
 802374e:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 8023752:	edcd 7a15 	vstr	s15, [sp, #84]	; 0x54
 8023756:	f88d c04d 	strb.w	ip, [sp, #77]	; 0x4d
 802375a:	f7ff fddd 	bl	8023318 <svc_decoder>
 802375e:	eddd 7a0d 	vldr	s15, [sp, #52]	; 0x34
 8023762:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8023766:	edc8 7a00 	vstr	s15, [r8]
 802376a:	b021      	add	sp, #132	; 0x84
 802376c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023770:	4699      	mov	r9, r3
 8023772:	6853      	ldr	r3, [r2, #4]
 8023774:	2b00      	cmp	r3, #0
 8023776:	f47f af56 	bne.w	8023626 <forward_svc+0x2e>
 802377a:	4698      	mov	r8, r3
 802377c:	469e      	mov	lr, r3
 802377e:	e754      	b.n	802362a <forward_svc+0x32>
 8023780:	4627      	mov	r7, r4
 8023782:	46a2      	mov	sl, r4
 8023784:	e7b1      	b.n	80236ea <forward_svc+0xf2>
 8023786:	461a      	mov	r2, r3
 8023788:	4619      	mov	r1, r3
 802378a:	461e      	mov	r6, r3
 802378c:	469c      	mov	ip, r3
 802378e:	461d      	mov	r5, r3
 8023790:	e756      	b.n	8023640 <forward_svc+0x48>
 8023792:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
 8023796:	e76f      	b.n	8023678 <forward_svc+0x80>

08023798 <ai_check_custom_types>:
 8023798:	4b13      	ldr	r3, [pc, #76]	; (80237e8 <ai_check_custom_types+0x50>)
 802379a:	b082      	sub	sp, #8
 802379c:	681b      	ldr	r3, [r3, #0]
 802379e:	9301      	str	r3, [sp, #4]
 80237a0:	b118      	cbz	r0, 80237aa <ai_check_custom_types+0x12>
 80237a2:	7803      	ldrb	r3, [r0, #0]
 80237a4:	2b03      	cmp	r3, #3
 80237a6:	d002      	beq.n	80237ae <ai_check_custom_types+0x16>
 80237a8:	2000      	movs	r0, #0
 80237aa:	b002      	add	sp, #8
 80237ac:	4770      	bx	lr
 80237ae:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80237b2:	4293      	cmp	r3, r2
 80237b4:	d004      	beq.n	80237c0 <ai_check_custom_types+0x28>
 80237b6:	2001      	movs	r0, #1
 80237b8:	f080 0001 	eor.w	r0, r0, #1
 80237bc:	b002      	add	sp, #8
 80237be:	4770      	bx	lr
 80237c0:	7842      	ldrb	r2, [r0, #1]
 80237c2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80237c6:	3001      	adds	r0, #1
 80237c8:	429a      	cmp	r2, r3
 80237ca:	d1f4      	bne.n	80237b6 <ai_check_custom_types+0x1e>
 80237cc:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 80237d0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80237d4:	429a      	cmp	r2, r3
 80237d6:	d1ee      	bne.n	80237b6 <ai_check_custom_types+0x1e>
 80237d8:	7842      	ldrb	r2, [r0, #1]
 80237da:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80237de:	429a      	cmp	r2, r3
 80237e0:	d1e9      	bne.n	80237b6 <ai_check_custom_types+0x1e>
 80237e2:	2000      	movs	r0, #0
 80237e4:	e7e8      	b.n	80237b8 <ai_check_custom_types+0x20>
 80237e6:	bf00      	nop
 80237e8:	08027c44 	.word	0x08027c44

080237ec <ai_layers_init_all>:
 80237ec:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80237ee:	b17a      	cbz	r2, 8023810 <ai_layers_init_all+0x24>
 80237f0:	6913      	ldr	r3, [r2, #16]
 80237f2:	60d0      	str	r0, [r2, #12]
 80237f4:	429a      	cmp	r2, r3
 80237f6:	f04f 0201 	mov.w	r2, #1
 80237fa:	d009      	beq.n	8023810 <ai_layers_init_all+0x24>
 80237fc:	b143      	cbz	r3, 8023810 <ai_layers_init_all+0x24>
 80237fe:	6919      	ldr	r1, [r3, #16]
 8023800:	60d8      	str	r0, [r3, #12]
 8023802:	4299      	cmp	r1, r3
 8023804:	f102 0201 	add.w	r2, r2, #1
 8023808:	d002      	beq.n	8023810 <ai_layers_init_all+0x24>
 802380a:	460b      	mov	r3, r1
 802380c:	2b00      	cmp	r3, #0
 802380e:	d1f6      	bne.n	80237fe <ai_layers_init_all+0x12>
 8023810:	4610      	mov	r0, r2
 8023812:	4770      	bx	lr

08023814 <ai_layers_post_init_all>:
 8023814:	b538      	push	{r3, r4, r5, lr}
 8023816:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8023818:	b184      	cbz	r4, 802383c <ai_layers_post_init_all+0x28>
 802381a:	2500      	movs	r5, #0
 802381c:	6863      	ldr	r3, [r4, #4]
 802381e:	07db      	lsls	r3, r3, #31
 8023820:	d504      	bpl.n	802382c <ai_layers_post_init_all+0x18>
 8023822:	6a23      	ldr	r3, [r4, #32]
 8023824:	b113      	cbz	r3, 802382c <ai_layers_post_init_all+0x18>
 8023826:	4620      	mov	r0, r4
 8023828:	4798      	blx	r3
 802382a:	3501      	adds	r5, #1
 802382c:	6923      	ldr	r3, [r4, #16]
 802382e:	42a3      	cmp	r3, r4
 8023830:	d002      	beq.n	8023838 <ai_layers_post_init_all+0x24>
 8023832:	461c      	mov	r4, r3
 8023834:	2b00      	cmp	r3, #0
 8023836:	d1f1      	bne.n	802381c <ai_layers_post_init_all+0x8>
 8023838:	4628      	mov	r0, r5
 802383a:	bd38      	pop	{r3, r4, r5, pc}
 802383c:	4625      	mov	r5, r4
 802383e:	e7fb      	b.n	8023838 <ai_layers_post_init_all+0x24>

08023840 <ai_layers_forward_all>:
 8023840:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023844:	6bc7      	ldr	r7, [r0, #60]	; 0x3c
 8023846:	4604      	mov	r4, r0
 8023848:	6b45      	ldr	r5, [r0, #52]	; 0x34
 802384a:	b31f      	cbz	r7, 8023894 <ai_layers_forward_all+0x54>
 802384c:	b1f5      	cbz	r5, 802388c <ai_layers_forward_all+0x4c>
 802384e:	2600      	movs	r6, #0
 8023850:	6385      	str	r5, [r0, #56]	; 0x38
 8023852:	4629      	mov	r1, r5
 8023854:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8023856:	2001      	movs	r0, #1
 8023858:	47b8      	blx	r7
 802385a:	46b0      	mov	r8, r6
 802385c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 802385e:	e006      	b.n	802386e <ai_layers_forward_all+0x2e>
 8023860:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8023862:	63a1      	str	r1, [r4, #56]	; 0x38
 8023864:	2003      	movs	r0, #3
 8023866:	47b8      	blx	r7
 8023868:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 802386a:	3601      	adds	r6, #1
 802386c:	b179      	cbz	r1, 802388e <ai_layers_forward_all+0x4e>
 802386e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8023870:	2002      	movs	r0, #2
 8023872:	47b8      	blx	r7
 8023874:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8023876:	696b      	ldr	r3, [r5, #20]
 8023878:	4628      	mov	r0, r5
 802387a:	4798      	blx	r3
 802387c:	6929      	ldr	r1, [r5, #16]
 802387e:	428d      	cmp	r5, r1
 8023880:	d1ee      	bne.n	8023860 <ai_layers_forward_all+0x20>
 8023882:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
 8023886:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8023888:	2100      	movs	r1, #0
 802388a:	e7eb      	b.n	8023864 <ai_layers_forward_all+0x24>
 802388c:	462e      	mov	r6, r5
 802388e:	4630      	mov	r0, r6
 8023890:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023894:	2d00      	cmp	r5, #0
 8023896:	d0f9      	beq.n	802388c <ai_layers_forward_all+0x4c>
 8023898:	463e      	mov	r6, r7
 802389a:	6385      	str	r5, [r0, #56]	; 0x38
 802389c:	696b      	ldr	r3, [r5, #20]
 802389e:	4628      	mov	r0, r5
 80238a0:	4798      	blx	r3
 80238a2:	692b      	ldr	r3, [r5, #16]
 80238a4:	3601      	adds	r6, #1
 80238a6:	42ab      	cmp	r3, r5
 80238a8:	d004      	beq.n	80238b4 <ai_layers_forward_all+0x74>
 80238aa:	63a3      	str	r3, [r4, #56]	; 0x38
 80238ac:	461d      	mov	r5, r3
 80238ae:	2b00      	cmp	r3, #0
 80238b0:	d1f4      	bne.n	802389c <ai_layers_forward_all+0x5c>
 80238b2:	e7ec      	b.n	802388e <ai_layers_forward_all+0x4e>
 80238b4:	2300      	movs	r3, #0
 80238b6:	63a3      	str	r3, [r4, #56]	; 0x38
 80238b8:	4630      	mov	r0, r6
 80238ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80238be:	bf00      	nop

080238c0 <ai_layers_destroy_all>:
 80238c0:	b538      	push	{r3, r4, r5, lr}
 80238c2:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80238c4:	b184      	cbz	r4, 80238e8 <ai_layers_destroy_all+0x28>
 80238c6:	2500      	movs	r5, #0
 80238c8:	6863      	ldr	r3, [r4, #4]
 80238ca:	075b      	lsls	r3, r3, #29
 80238cc:	d504      	bpl.n	80238d8 <ai_layers_destroy_all+0x18>
 80238ce:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80238d0:	b113      	cbz	r3, 80238d8 <ai_layers_destroy_all+0x18>
 80238d2:	4620      	mov	r0, r4
 80238d4:	4798      	blx	r3
 80238d6:	3501      	adds	r5, #1
 80238d8:	6923      	ldr	r3, [r4, #16]
 80238da:	42a3      	cmp	r3, r4
 80238dc:	d002      	beq.n	80238e4 <ai_layers_destroy_all+0x24>
 80238de:	461c      	mov	r4, r3
 80238e0:	2b00      	cmp	r3, #0
 80238e2:	d1f1      	bne.n	80238c8 <ai_layers_destroy_all+0x8>
 80238e4:	4628      	mov	r0, r5
 80238e6:	bd38      	pop	{r3, r4, r5, pc}
 80238e8:	4625      	mov	r5, r4
 80238ea:	e7fb      	b.n	80238e4 <ai_layers_destroy_all+0x24>

080238ec <ai_version_get>:
 80238ec:	0212      	lsls	r2, r2, #8
 80238ee:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80238f2:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 80238f6:	4770      	bx	lr

080238f8 <ai_platform_version_get>:
 80238f8:	2300      	movs	r3, #0
 80238fa:	0e02      	lsrs	r2, r0, #24
 80238fc:	f362 0307 	bfi	r3, r2, #0, #8
 8023900:	f3c0 4207 	ubfx	r2, r0, #16, #8
 8023904:	f362 230f 	bfi	r3, r2, #8, #8
 8023908:	f3c0 2007 	ubfx	r0, r0, #8, #8
 802390c:	f360 4317 	bfi	r3, r0, #16, #8
 8023910:	b082      	sub	sp, #8
 8023912:	f023 407f 	bic.w	r0, r3, #4278190080	; 0xff000000
 8023916:	b002      	add	sp, #8
 8023918:	4770      	bx	lr
 802391a:	bf00      	nop

0802391c <get_tensor_byte_size>:
 802391c:	68c1      	ldr	r1, [r0, #12]
 802391e:	6942      	ldr	r2, [r0, #20]
 8023920:	6983      	ldr	r3, [r0, #24]
 8023922:	68c9      	ldr	r1, [r1, #12]
 8023924:	68d0      	ldr	r0, [r2, #12]
 8023926:	681b      	ldr	r3, [r3, #0]
 8023928:	fb00 f001 	mul.w	r0, r0, r1
 802392c:	4a04      	ldr	r2, [pc, #16]	; (8023940 <get_tensor_byte_size+0x24>)
 802392e:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8023932:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8023936:	4293      	cmp	r3, r2
 8023938:	bf04      	itt	eq
 802393a:	3007      	addeq	r0, #7
 802393c:	08c0      	lsreq	r0, r0, #3
 802393e:	4770      	bx	lr
 8023940:	000400c0 	.word	0x000400c0

08023944 <ai_array_to_buffer_fmt>:
 8023944:	f3c0 4343 	ubfx	r3, r0, #17, #4
 8023948:	2b02      	cmp	r3, #2
 802394a:	d036      	beq.n	80239ba <ai_array_to_buffer_fmt+0x76>
 802394c:	4a21      	ldr	r2, [pc, #132]	; (80239d4 <ai_array_to_buffer_fmt+0x90>)
 802394e:	f020 437e 	bic.w	r3, r0, #4261412864	; 0xfe000000
 8023952:	4293      	cmp	r3, r2
 8023954:	d00f      	beq.n	8023976 <ai_array_to_buffer_fmt+0x32>
 8023956:	dd12      	ble.n	802397e <ai_array_to_buffer_fmt+0x3a>
 8023958:	4a1f      	ldr	r2, [pc, #124]	; (80239d8 <ai_array_to_buffer_fmt+0x94>)
 802395a:	4293      	cmp	r3, r2
 802395c:	d00b      	beq.n	8023976 <ai_array_to_buffer_fmt+0x32>
 802395e:	dd1e      	ble.n	802399e <ai_array_to_buffer_fmt+0x5a>
 8023960:	4a1e      	ldr	r2, [pc, #120]	; (80239dc <ai_array_to_buffer_fmt+0x98>)
 8023962:	4293      	cmp	r3, r2
 8023964:	d007      	beq.n	8023976 <ai_array_to_buffer_fmt+0x32>
 8023966:	dd30      	ble.n	80239ca <ai_array_to_buffer_fmt+0x86>
 8023968:	4a1d      	ldr	r2, [pc, #116]	; (80239e0 <ai_array_to_buffer_fmt+0x9c>)
 802396a:	4293      	cmp	r3, r2
 802396c:	d003      	beq.n	8023976 <ai_array_to_buffer_fmt+0x32>
 802396e:	f502 027e 	add.w	r2, r2, #16646144	; 0xfe0000
 8023972:	4293      	cmp	r3, r2
 8023974:	d11f      	bne.n	80239b6 <ai_array_to_buffer_fmt+0x72>
 8023976:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 802397a:	4318      	orrs	r0, r3
 802397c:	4770      	bx	lr
 802397e:	4a19      	ldr	r2, [pc, #100]	; (80239e4 <ai_array_to_buffer_fmt+0xa0>)
 8023980:	4293      	cmp	r3, r2
 8023982:	d0f8      	beq.n	8023976 <ai_array_to_buffer_fmt+0x32>
 8023984:	dd0b      	ble.n	802399e <ai_array_to_buffer_fmt+0x5a>
 8023986:	4a18      	ldr	r2, [pc, #96]	; (80239e8 <ai_array_to_buffer_fmt+0xa4>)
 8023988:	4293      	cmp	r3, r2
 802398a:	d0f4      	beq.n	8023976 <ai_array_to_buffer_fmt+0x32>
 802398c:	f202 72f1 	addw	r2, r2, #2033	; 0x7f1
 8023990:	4293      	cmp	r3, r2
 8023992:	d0f0      	beq.n	8023976 <ai_array_to_buffer_fmt+0x32>
 8023994:	f5a2 6200 	sub.w	r2, r2, #2048	; 0x800
 8023998:	4293      	cmp	r3, r2
 802399a:	d10c      	bne.n	80239b6 <ai_array_to_buffer_fmt+0x72>
 802399c:	e7eb      	b.n	8023976 <ai_array_to_buffer_fmt+0x32>
 802399e:	f2a2 3287 	subw	r2, r2, #903	; 0x387
 80239a2:	4293      	cmp	r3, r2
 80239a4:	d0e7      	beq.n	8023976 <ai_array_to_buffer_fmt+0x32>
 80239a6:	f502 7260 	add.w	r2, r2, #896	; 0x380
 80239aa:	4293      	cmp	r3, r2
 80239ac:	d0e3      	beq.n	8023976 <ai_array_to_buffer_fmt+0x32>
 80239ae:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 80239b2:	4293      	cmp	r3, r2
 80239b4:	d0df      	beq.n	8023976 <ai_array_to_buffer_fmt+0x32>
 80239b6:	2340      	movs	r3, #64	; 0x40
 80239b8:	e7dd      	b.n	8023976 <ai_array_to_buffer_fmt+0x32>
 80239ba:	4b0c      	ldr	r3, [pc, #48]	; (80239ec <ai_array_to_buffer_fmt+0xa8>)
 80239bc:	4003      	ands	r3, r0
 80239be:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80239c2:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 80239c6:	4318      	orrs	r0, r3
 80239c8:	4770      	bx	lr
 80239ca:	3a0f      	subs	r2, #15
 80239cc:	4293      	cmp	r3, r2
 80239ce:	d0d2      	beq.n	8023976 <ai_array_to_buffer_fmt+0x32>
 80239d0:	e7f1      	b.n	80239b6 <ai_array_to_buffer_fmt+0x72>
 80239d2:	bf00      	nop
 80239d4:	00060440 	.word	0x00060440
 80239d8:	00840447 	.word	0x00840447
 80239dc:	0084084f 	.word	0x0084084f
 80239e0:	00841040 	.word	0x00841040
 80239e4:	00040447 	.word	0x00040447
 80239e8:	0004084f 	.word	0x0004084f
 80239ec:	00803fff 	.word	0x00803fff

080239f0 <ai_array_get_byte_size>:
 80239f0:	b1c1      	cbz	r1, 8023a24 <ai_array_get_byte_size+0x34>
 80239f2:	11c3      	asrs	r3, r0, #7
 80239f4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80239f8:	fb01 f102 	mul.w	r1, r1, r2
 80239fc:	f3c0 5241 	ubfx	r2, r0, #21, #2
 8023a00:	3107      	adds	r1, #7
 8023a02:	f3c0 4043 	ubfx	r0, r0, #17, #4
 8023a06:	f021 0107 	bic.w	r1, r1, #7
 8023a0a:	2804      	cmp	r0, #4
 8023a0c:	fa21 f102 	lsr.w	r1, r1, r2
 8023a10:	d00a      	beq.n	8023a28 <ai_array_get_byte_size+0x38>
 8023a12:	2808      	cmp	r0, #8
 8023a14:	d103      	bne.n	8023a1e <ai_array_get_byte_size+0x2e>
 8023a16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8023a1a:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 8023a1e:	3107      	adds	r1, #7
 8023a20:	08c8      	lsrs	r0, r1, #3
 8023a22:	4770      	bx	lr
 8023a24:	4608      	mov	r0, r1
 8023a26:	4770      	bx	lr
 8023a28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8023a2c:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 8023a30:	3107      	adds	r1, #7
 8023a32:	08c8      	lsrs	r0, r1, #3
 8023a34:	4770      	bx	lr
 8023a36:	bf00      	nop

08023a38 <ai_array_get_data_byte_size>:
 8023a38:	b161      	cbz	r1, 8023a54 <ai_array_get_data_byte_size+0x1c>
 8023a3a:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 8023a3e:	fb01 f103 	mul.w	r1, r1, r3
 8023a42:	3107      	adds	r1, #7
 8023a44:	f3c0 5041 	ubfx	r0, r0, #21, #2
 8023a48:	f021 0107 	bic.w	r1, r1, #7
 8023a4c:	40c1      	lsrs	r1, r0
 8023a4e:	3107      	adds	r1, #7
 8023a50:	08c8      	lsrs	r0, r1, #3
 8023a52:	4770      	bx	lr
 8023a54:	4608      	mov	r0, r1
 8023a56:	4770      	bx	lr

08023a58 <__assert_func>:
 8023a58:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8023a5a:	4614      	mov	r4, r2
 8023a5c:	461a      	mov	r2, r3
 8023a5e:	4b09      	ldr	r3, [pc, #36]	; (8023a84 <__assert_func+0x2c>)
 8023a60:	4605      	mov	r5, r0
 8023a62:	681b      	ldr	r3, [r3, #0]
 8023a64:	68d8      	ldr	r0, [r3, #12]
 8023a66:	b14c      	cbz	r4, 8023a7c <__assert_func+0x24>
 8023a68:	4b07      	ldr	r3, [pc, #28]	; (8023a88 <__assert_func+0x30>)
 8023a6a:	9100      	str	r1, [sp, #0]
 8023a6c:	4907      	ldr	r1, [pc, #28]	; (8023a8c <__assert_func+0x34>)
 8023a6e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8023a72:	462b      	mov	r3, r5
 8023a74:	f000 f814 	bl	8023aa0 <fiprintf>
 8023a78:	f000 fe38 	bl	80246ec <abort>
 8023a7c:	4b04      	ldr	r3, [pc, #16]	; (8023a90 <__assert_func+0x38>)
 8023a7e:	461c      	mov	r4, r3
 8023a80:	e7f3      	b.n	8023a6a <__assert_func+0x12>
 8023a82:	bf00      	nop
 8023a84:	20000658 	.word	0x20000658
 8023a88:	08035db8 	.word	0x08035db8
 8023a8c:	08035dc5 	.word	0x08035dc5
 8023a90:	08035df3 	.word	0x08035df3

08023a94 <__errno>:
 8023a94:	4b01      	ldr	r3, [pc, #4]	; (8023a9c <__errno+0x8>)
 8023a96:	6818      	ldr	r0, [r3, #0]
 8023a98:	4770      	bx	lr
 8023a9a:	bf00      	nop
 8023a9c:	20000658 	.word	0x20000658

08023aa0 <fiprintf>:
 8023aa0:	b40e      	push	{r1, r2, r3}
 8023aa2:	b503      	push	{r0, r1, lr}
 8023aa4:	ab03      	add	r3, sp, #12
 8023aa6:	4601      	mov	r1, r0
 8023aa8:	4805      	ldr	r0, [pc, #20]	; (8023ac0 <fiprintf+0x20>)
 8023aaa:	f853 2b04 	ldr.w	r2, [r3], #4
 8023aae:	6800      	ldr	r0, [r0, #0]
 8023ab0:	9301      	str	r3, [sp, #4]
 8023ab2:	f000 f9cd 	bl	8023e50 <_vfiprintf_r>
 8023ab6:	b002      	add	sp, #8
 8023ab8:	f85d eb04 	ldr.w	lr, [sp], #4
 8023abc:	b003      	add	sp, #12
 8023abe:	4770      	bx	lr
 8023ac0:	20000658 	.word	0x20000658

08023ac4 <_fwrite_r>:
 8023ac4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8023ac8:	9c08      	ldr	r4, [sp, #32]
 8023aca:	468a      	mov	sl, r1
 8023acc:	4690      	mov	r8, r2
 8023ace:	fb02 f903 	mul.w	r9, r2, r3
 8023ad2:	4605      	mov	r5, r0
 8023ad4:	b118      	cbz	r0, 8023ade <_fwrite_r+0x1a>
 8023ad6:	6983      	ldr	r3, [r0, #24]
 8023ad8:	b90b      	cbnz	r3, 8023ade <_fwrite_r+0x1a>
 8023ada:	f000 ff27 	bl	802492c <__sinit>
 8023ade:	4b26      	ldr	r3, [pc, #152]	; (8023b78 <_fwrite_r+0xb4>)
 8023ae0:	429c      	cmp	r4, r3
 8023ae2:	d123      	bne.n	8023b2c <_fwrite_r+0x68>
 8023ae4:	686c      	ldr	r4, [r5, #4]
 8023ae6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8023ae8:	07de      	lsls	r6, r3, #31
 8023aea:	d405      	bmi.n	8023af8 <_fwrite_r+0x34>
 8023aec:	89a3      	ldrh	r3, [r4, #12]
 8023aee:	0598      	lsls	r0, r3, #22
 8023af0:	d402      	bmi.n	8023af8 <_fwrite_r+0x34>
 8023af2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8023af4:	f000 f879 	bl	8023bea <__retarget_lock_acquire_recursive>
 8023af8:	89a3      	ldrh	r3, [r4, #12]
 8023afa:	0719      	lsls	r1, r3, #28
 8023afc:	d520      	bpl.n	8023b40 <_fwrite_r+0x7c>
 8023afe:	6923      	ldr	r3, [r4, #16]
 8023b00:	b1f3      	cbz	r3, 8023b40 <_fwrite_r+0x7c>
 8023b02:	2600      	movs	r6, #0
 8023b04:	454e      	cmp	r6, r9
 8023b06:	d029      	beq.n	8023b5c <_fwrite_r+0x98>
 8023b08:	68a7      	ldr	r7, [r4, #8]
 8023b0a:	f81a 1006 	ldrb.w	r1, [sl, r6]
 8023b0e:	3f01      	subs	r7, #1
 8023b10:	2f00      	cmp	r7, #0
 8023b12:	60a7      	str	r7, [r4, #8]
 8023b14:	da04      	bge.n	8023b20 <_fwrite_r+0x5c>
 8023b16:	69a3      	ldr	r3, [r4, #24]
 8023b18:	429f      	cmp	r7, r3
 8023b1a:	db19      	blt.n	8023b50 <_fwrite_r+0x8c>
 8023b1c:	290a      	cmp	r1, #10
 8023b1e:	d017      	beq.n	8023b50 <_fwrite_r+0x8c>
 8023b20:	6823      	ldr	r3, [r4, #0]
 8023b22:	1c5a      	adds	r2, r3, #1
 8023b24:	6022      	str	r2, [r4, #0]
 8023b26:	7019      	strb	r1, [r3, #0]
 8023b28:	3601      	adds	r6, #1
 8023b2a:	e7eb      	b.n	8023b04 <_fwrite_r+0x40>
 8023b2c:	4b13      	ldr	r3, [pc, #76]	; (8023b7c <_fwrite_r+0xb8>)
 8023b2e:	429c      	cmp	r4, r3
 8023b30:	d101      	bne.n	8023b36 <_fwrite_r+0x72>
 8023b32:	68ac      	ldr	r4, [r5, #8]
 8023b34:	e7d7      	b.n	8023ae6 <_fwrite_r+0x22>
 8023b36:	4b12      	ldr	r3, [pc, #72]	; (8023b80 <_fwrite_r+0xbc>)
 8023b38:	429c      	cmp	r4, r3
 8023b3a:	bf08      	it	eq
 8023b3c:	68ec      	ldreq	r4, [r5, #12]
 8023b3e:	e7d2      	b.n	8023ae6 <_fwrite_r+0x22>
 8023b40:	4621      	mov	r1, r4
 8023b42:	4628      	mov	r0, r5
 8023b44:	f000 fd64 	bl	8024610 <__swsetup_r>
 8023b48:	2800      	cmp	r0, #0
 8023b4a:	d0da      	beq.n	8023b02 <_fwrite_r+0x3e>
 8023b4c:	2600      	movs	r6, #0
 8023b4e:	e005      	b.n	8023b5c <_fwrite_r+0x98>
 8023b50:	4622      	mov	r2, r4
 8023b52:	4628      	mov	r0, r5
 8023b54:	f000 fd0a 	bl	802456c <__swbuf_r>
 8023b58:	3001      	adds	r0, #1
 8023b5a:	d1e5      	bne.n	8023b28 <_fwrite_r+0x64>
 8023b5c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8023b5e:	07da      	lsls	r2, r3, #31
 8023b60:	d405      	bmi.n	8023b6e <_fwrite_r+0xaa>
 8023b62:	89a3      	ldrh	r3, [r4, #12]
 8023b64:	059b      	lsls	r3, r3, #22
 8023b66:	d402      	bmi.n	8023b6e <_fwrite_r+0xaa>
 8023b68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8023b6a:	f000 f83f 	bl	8023bec <__retarget_lock_release_recursive>
 8023b6e:	fbb6 f0f8 	udiv	r0, r6, r8
 8023b72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023b76:	bf00      	nop
 8023b78:	08035f4c 	.word	0x08035f4c
 8023b7c:	08035f6c 	.word	0x08035f6c
 8023b80:	08035f2c 	.word	0x08035f2c

08023b84 <fwrite>:
 8023b84:	b507      	push	{r0, r1, r2, lr}
 8023b86:	9300      	str	r3, [sp, #0]
 8023b88:	4613      	mov	r3, r2
 8023b8a:	460a      	mov	r2, r1
 8023b8c:	4601      	mov	r1, r0
 8023b8e:	4803      	ldr	r0, [pc, #12]	; (8023b9c <fwrite+0x18>)
 8023b90:	6800      	ldr	r0, [r0, #0]
 8023b92:	f7ff ff97 	bl	8023ac4 <_fwrite_r>
 8023b96:	b003      	add	sp, #12
 8023b98:	f85d fb04 	ldr.w	pc, [sp], #4
 8023b9c:	20000658 	.word	0x20000658

08023ba0 <__libc_init_array>:
 8023ba0:	b570      	push	{r4, r5, r6, lr}
 8023ba2:	4d0d      	ldr	r5, [pc, #52]	; (8023bd8 <__libc_init_array+0x38>)
 8023ba4:	2600      	movs	r6, #0
 8023ba6:	4c0d      	ldr	r4, [pc, #52]	; (8023bdc <__libc_init_array+0x3c>)
 8023ba8:	1b64      	subs	r4, r4, r5
 8023baa:	10a4      	asrs	r4, r4, #2
 8023bac:	42a6      	cmp	r6, r4
 8023bae:	d109      	bne.n	8023bc4 <__libc_init_array+0x24>
 8023bb0:	4d0b      	ldr	r5, [pc, #44]	; (8023be0 <__libc_init_array+0x40>)
 8023bb2:	2600      	movs	r6, #0
 8023bb4:	4c0b      	ldr	r4, [pc, #44]	; (8023be4 <__libc_init_array+0x44>)
 8023bb6:	f001 ff31 	bl	8025a1c <_init>
 8023bba:	1b64      	subs	r4, r4, r5
 8023bbc:	10a4      	asrs	r4, r4, #2
 8023bbe:	42a6      	cmp	r6, r4
 8023bc0:	d105      	bne.n	8023bce <__libc_init_array+0x2e>
 8023bc2:	bd70      	pop	{r4, r5, r6, pc}
 8023bc4:	f855 3b04 	ldr.w	r3, [r5], #4
 8023bc8:	3601      	adds	r6, #1
 8023bca:	4798      	blx	r3
 8023bcc:	e7ee      	b.n	8023bac <__libc_init_array+0xc>
 8023bce:	f855 3b04 	ldr.w	r3, [r5], #4
 8023bd2:	3601      	adds	r6, #1
 8023bd4:	4798      	blx	r3
 8023bd6:	e7f2      	b.n	8023bbe <__libc_init_array+0x1e>
 8023bd8:	08035fc4 	.word	0x08035fc4
 8023bdc:	08035fc4 	.word	0x08035fc4
 8023be0:	08035fc4 	.word	0x08035fc4
 8023be4:	08035fc8 	.word	0x08035fc8

08023be8 <__retarget_lock_init_recursive>:
 8023be8:	4770      	bx	lr

08023bea <__retarget_lock_acquire_recursive>:
 8023bea:	4770      	bx	lr

08023bec <__retarget_lock_release_recursive>:
 8023bec:	4770      	bx	lr
	...

08023bf0 <malloc>:
 8023bf0:	4b02      	ldr	r3, [pc, #8]	; (8023bfc <malloc+0xc>)
 8023bf2:	4601      	mov	r1, r0
 8023bf4:	6818      	ldr	r0, [r3, #0]
 8023bf6:	f000 b88d 	b.w	8023d14 <_malloc_r>
 8023bfa:	bf00      	nop
 8023bfc:	20000658 	.word	0x20000658

08023c00 <free>:
 8023c00:	4b02      	ldr	r3, [pc, #8]	; (8023c0c <free+0xc>)
 8023c02:	4601      	mov	r1, r0
 8023c04:	6818      	ldr	r0, [r3, #0]
 8023c06:	f000 b819 	b.w	8023c3c <_free_r>
 8023c0a:	bf00      	nop
 8023c0c:	20000658 	.word	0x20000658

08023c10 <memcpy>:
 8023c10:	440a      	add	r2, r1
 8023c12:	1e43      	subs	r3, r0, #1
 8023c14:	4291      	cmp	r1, r2
 8023c16:	d100      	bne.n	8023c1a <memcpy+0xa>
 8023c18:	4770      	bx	lr
 8023c1a:	b510      	push	{r4, lr}
 8023c1c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8023c20:	4291      	cmp	r1, r2
 8023c22:	f803 4f01 	strb.w	r4, [r3, #1]!
 8023c26:	d1f9      	bne.n	8023c1c <memcpy+0xc>
 8023c28:	bd10      	pop	{r4, pc}

08023c2a <memset>:
 8023c2a:	4402      	add	r2, r0
 8023c2c:	4603      	mov	r3, r0
 8023c2e:	4293      	cmp	r3, r2
 8023c30:	d100      	bne.n	8023c34 <memset+0xa>
 8023c32:	4770      	bx	lr
 8023c34:	f803 1b01 	strb.w	r1, [r3], #1
 8023c38:	e7f9      	b.n	8023c2e <memset+0x4>
	...

08023c3c <_free_r>:
 8023c3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8023c3e:	2900      	cmp	r1, #0
 8023c40:	d043      	beq.n	8023cca <_free_r+0x8e>
 8023c42:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8023c46:	1f0c      	subs	r4, r1, #4
 8023c48:	9001      	str	r0, [sp, #4]
 8023c4a:	2b00      	cmp	r3, #0
 8023c4c:	bfb8      	it	lt
 8023c4e:	18e4      	addlt	r4, r4, r3
 8023c50:	f000 ff7c 	bl	8024b4c <__malloc_lock>
 8023c54:	4a1e      	ldr	r2, [pc, #120]	; (8023cd0 <_free_r+0x94>)
 8023c56:	9801      	ldr	r0, [sp, #4]
 8023c58:	6813      	ldr	r3, [r2, #0]
 8023c5a:	b933      	cbnz	r3, 8023c6a <_free_r+0x2e>
 8023c5c:	6063      	str	r3, [r4, #4]
 8023c5e:	6014      	str	r4, [r2, #0]
 8023c60:	b003      	add	sp, #12
 8023c62:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8023c66:	f000 bf77 	b.w	8024b58 <__malloc_unlock>
 8023c6a:	42a3      	cmp	r3, r4
 8023c6c:	d908      	bls.n	8023c80 <_free_r+0x44>
 8023c6e:	6825      	ldr	r5, [r4, #0]
 8023c70:	1961      	adds	r1, r4, r5
 8023c72:	428b      	cmp	r3, r1
 8023c74:	bf01      	itttt	eq
 8023c76:	6819      	ldreq	r1, [r3, #0]
 8023c78:	685b      	ldreq	r3, [r3, #4]
 8023c7a:	1949      	addeq	r1, r1, r5
 8023c7c:	6021      	streq	r1, [r4, #0]
 8023c7e:	e7ed      	b.n	8023c5c <_free_r+0x20>
 8023c80:	461a      	mov	r2, r3
 8023c82:	685b      	ldr	r3, [r3, #4]
 8023c84:	b10b      	cbz	r3, 8023c8a <_free_r+0x4e>
 8023c86:	42a3      	cmp	r3, r4
 8023c88:	d9fa      	bls.n	8023c80 <_free_r+0x44>
 8023c8a:	6811      	ldr	r1, [r2, #0]
 8023c8c:	1855      	adds	r5, r2, r1
 8023c8e:	42a5      	cmp	r5, r4
 8023c90:	d10b      	bne.n	8023caa <_free_r+0x6e>
 8023c92:	6824      	ldr	r4, [r4, #0]
 8023c94:	4421      	add	r1, r4
 8023c96:	1854      	adds	r4, r2, r1
 8023c98:	6011      	str	r1, [r2, #0]
 8023c9a:	42a3      	cmp	r3, r4
 8023c9c:	d1e0      	bne.n	8023c60 <_free_r+0x24>
 8023c9e:	681c      	ldr	r4, [r3, #0]
 8023ca0:	685b      	ldr	r3, [r3, #4]
 8023ca2:	4421      	add	r1, r4
 8023ca4:	6053      	str	r3, [r2, #4]
 8023ca6:	6011      	str	r1, [r2, #0]
 8023ca8:	e7da      	b.n	8023c60 <_free_r+0x24>
 8023caa:	d902      	bls.n	8023cb2 <_free_r+0x76>
 8023cac:	230c      	movs	r3, #12
 8023cae:	6003      	str	r3, [r0, #0]
 8023cb0:	e7d6      	b.n	8023c60 <_free_r+0x24>
 8023cb2:	6825      	ldr	r5, [r4, #0]
 8023cb4:	1961      	adds	r1, r4, r5
 8023cb6:	428b      	cmp	r3, r1
 8023cb8:	bf02      	ittt	eq
 8023cba:	6819      	ldreq	r1, [r3, #0]
 8023cbc:	685b      	ldreq	r3, [r3, #4]
 8023cbe:	1949      	addeq	r1, r1, r5
 8023cc0:	6063      	str	r3, [r4, #4]
 8023cc2:	bf08      	it	eq
 8023cc4:	6021      	streq	r1, [r4, #0]
 8023cc6:	6054      	str	r4, [r2, #4]
 8023cc8:	e7ca      	b.n	8023c60 <_free_r+0x24>
 8023cca:	b003      	add	sp, #12
 8023ccc:	bd30      	pop	{r4, r5, pc}
 8023cce:	bf00      	nop
 8023cd0:	2003ad04 	.word	0x2003ad04

08023cd4 <sbrk_aligned>:
 8023cd4:	b570      	push	{r4, r5, r6, lr}
 8023cd6:	4e0e      	ldr	r6, [pc, #56]	; (8023d10 <sbrk_aligned+0x3c>)
 8023cd8:	460c      	mov	r4, r1
 8023cda:	4605      	mov	r5, r0
 8023cdc:	6831      	ldr	r1, [r6, #0]
 8023cde:	b911      	cbnz	r1, 8023ce6 <sbrk_aligned+0x12>
 8023ce0:	f000 fb94 	bl	802440c <_sbrk_r>
 8023ce4:	6030      	str	r0, [r6, #0]
 8023ce6:	4621      	mov	r1, r4
 8023ce8:	4628      	mov	r0, r5
 8023cea:	f000 fb8f 	bl	802440c <_sbrk_r>
 8023cee:	1c43      	adds	r3, r0, #1
 8023cf0:	d00a      	beq.n	8023d08 <sbrk_aligned+0x34>
 8023cf2:	1cc4      	adds	r4, r0, #3
 8023cf4:	f024 0403 	bic.w	r4, r4, #3
 8023cf8:	42a0      	cmp	r0, r4
 8023cfa:	d007      	beq.n	8023d0c <sbrk_aligned+0x38>
 8023cfc:	1a21      	subs	r1, r4, r0
 8023cfe:	4628      	mov	r0, r5
 8023d00:	f000 fb84 	bl	802440c <_sbrk_r>
 8023d04:	3001      	adds	r0, #1
 8023d06:	d101      	bne.n	8023d0c <sbrk_aligned+0x38>
 8023d08:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8023d0c:	4620      	mov	r0, r4
 8023d0e:	bd70      	pop	{r4, r5, r6, pc}
 8023d10:	2003ad08 	.word	0x2003ad08

08023d14 <_malloc_r>:
 8023d14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023d18:	1ccd      	adds	r5, r1, #3
 8023d1a:	4607      	mov	r7, r0
 8023d1c:	f025 0503 	bic.w	r5, r5, #3
 8023d20:	3508      	adds	r5, #8
 8023d22:	2d0c      	cmp	r5, #12
 8023d24:	bf38      	it	cc
 8023d26:	250c      	movcc	r5, #12
 8023d28:	2d00      	cmp	r5, #0
 8023d2a:	db01      	blt.n	8023d30 <_malloc_r+0x1c>
 8023d2c:	42a9      	cmp	r1, r5
 8023d2e:	d905      	bls.n	8023d3c <_malloc_r+0x28>
 8023d30:	230c      	movs	r3, #12
 8023d32:	2600      	movs	r6, #0
 8023d34:	603b      	str	r3, [r7, #0]
 8023d36:	4630      	mov	r0, r6
 8023d38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023d3c:	4e2e      	ldr	r6, [pc, #184]	; (8023df8 <_malloc_r+0xe4>)
 8023d3e:	f000 ff05 	bl	8024b4c <__malloc_lock>
 8023d42:	6833      	ldr	r3, [r6, #0]
 8023d44:	461c      	mov	r4, r3
 8023d46:	bb34      	cbnz	r4, 8023d96 <_malloc_r+0x82>
 8023d48:	4629      	mov	r1, r5
 8023d4a:	4638      	mov	r0, r7
 8023d4c:	f7ff ffc2 	bl	8023cd4 <sbrk_aligned>
 8023d50:	1c43      	adds	r3, r0, #1
 8023d52:	4604      	mov	r4, r0
 8023d54:	d14d      	bne.n	8023df2 <_malloc_r+0xde>
 8023d56:	6834      	ldr	r4, [r6, #0]
 8023d58:	4626      	mov	r6, r4
 8023d5a:	2e00      	cmp	r6, #0
 8023d5c:	d140      	bne.n	8023de0 <_malloc_r+0xcc>
 8023d5e:	6823      	ldr	r3, [r4, #0]
 8023d60:	4631      	mov	r1, r6
 8023d62:	4638      	mov	r0, r7
 8023d64:	eb04 0803 	add.w	r8, r4, r3
 8023d68:	f000 fb50 	bl	802440c <_sbrk_r>
 8023d6c:	4580      	cmp	r8, r0
 8023d6e:	d13a      	bne.n	8023de6 <_malloc_r+0xd2>
 8023d70:	6821      	ldr	r1, [r4, #0]
 8023d72:	3503      	adds	r5, #3
 8023d74:	4638      	mov	r0, r7
 8023d76:	1a6d      	subs	r5, r5, r1
 8023d78:	f025 0503 	bic.w	r5, r5, #3
 8023d7c:	3508      	adds	r5, #8
 8023d7e:	2d0c      	cmp	r5, #12
 8023d80:	bf38      	it	cc
 8023d82:	250c      	movcc	r5, #12
 8023d84:	4629      	mov	r1, r5
 8023d86:	f7ff ffa5 	bl	8023cd4 <sbrk_aligned>
 8023d8a:	3001      	adds	r0, #1
 8023d8c:	d02b      	beq.n	8023de6 <_malloc_r+0xd2>
 8023d8e:	6823      	ldr	r3, [r4, #0]
 8023d90:	442b      	add	r3, r5
 8023d92:	6023      	str	r3, [r4, #0]
 8023d94:	e00e      	b.n	8023db4 <_malloc_r+0xa0>
 8023d96:	6822      	ldr	r2, [r4, #0]
 8023d98:	1b52      	subs	r2, r2, r5
 8023d9a:	d41e      	bmi.n	8023dda <_malloc_r+0xc6>
 8023d9c:	2a0b      	cmp	r2, #11
 8023d9e:	d916      	bls.n	8023dce <_malloc_r+0xba>
 8023da0:	1961      	adds	r1, r4, r5
 8023da2:	42a3      	cmp	r3, r4
 8023da4:	6025      	str	r5, [r4, #0]
 8023da6:	bf18      	it	ne
 8023da8:	6059      	strne	r1, [r3, #4]
 8023daa:	6863      	ldr	r3, [r4, #4]
 8023dac:	bf08      	it	eq
 8023dae:	6031      	streq	r1, [r6, #0]
 8023db0:	5162      	str	r2, [r4, r5]
 8023db2:	604b      	str	r3, [r1, #4]
 8023db4:	f104 060b 	add.w	r6, r4, #11
 8023db8:	4638      	mov	r0, r7
 8023dba:	f000 fecd 	bl	8024b58 <__malloc_unlock>
 8023dbe:	1d23      	adds	r3, r4, #4
 8023dc0:	f026 0607 	bic.w	r6, r6, #7
 8023dc4:	1af2      	subs	r2, r6, r3
 8023dc6:	d0b6      	beq.n	8023d36 <_malloc_r+0x22>
 8023dc8:	1b9b      	subs	r3, r3, r6
 8023dca:	50a3      	str	r3, [r4, r2]
 8023dcc:	e7b3      	b.n	8023d36 <_malloc_r+0x22>
 8023dce:	6862      	ldr	r2, [r4, #4]
 8023dd0:	42a3      	cmp	r3, r4
 8023dd2:	bf0c      	ite	eq
 8023dd4:	6032      	streq	r2, [r6, #0]
 8023dd6:	605a      	strne	r2, [r3, #4]
 8023dd8:	e7ec      	b.n	8023db4 <_malloc_r+0xa0>
 8023dda:	4623      	mov	r3, r4
 8023ddc:	6864      	ldr	r4, [r4, #4]
 8023dde:	e7b2      	b.n	8023d46 <_malloc_r+0x32>
 8023de0:	4634      	mov	r4, r6
 8023de2:	6876      	ldr	r6, [r6, #4]
 8023de4:	e7b9      	b.n	8023d5a <_malloc_r+0x46>
 8023de6:	230c      	movs	r3, #12
 8023de8:	4638      	mov	r0, r7
 8023dea:	603b      	str	r3, [r7, #0]
 8023dec:	f000 feb4 	bl	8024b58 <__malloc_unlock>
 8023df0:	e7a1      	b.n	8023d36 <_malloc_r+0x22>
 8023df2:	6025      	str	r5, [r4, #0]
 8023df4:	e7de      	b.n	8023db4 <_malloc_r+0xa0>
 8023df6:	bf00      	nop
 8023df8:	2003ad04 	.word	0x2003ad04

08023dfc <__sfputc_r>:
 8023dfc:	6893      	ldr	r3, [r2, #8]
 8023dfe:	3b01      	subs	r3, #1
 8023e00:	2b00      	cmp	r3, #0
 8023e02:	6093      	str	r3, [r2, #8]
 8023e04:	b410      	push	{r4}
 8023e06:	da08      	bge.n	8023e1a <__sfputc_r+0x1e>
 8023e08:	6994      	ldr	r4, [r2, #24]
 8023e0a:	42a3      	cmp	r3, r4
 8023e0c:	db01      	blt.n	8023e12 <__sfputc_r+0x16>
 8023e0e:	290a      	cmp	r1, #10
 8023e10:	d103      	bne.n	8023e1a <__sfputc_r+0x1e>
 8023e12:	f85d 4b04 	ldr.w	r4, [sp], #4
 8023e16:	f000 bba9 	b.w	802456c <__swbuf_r>
 8023e1a:	6813      	ldr	r3, [r2, #0]
 8023e1c:	1c58      	adds	r0, r3, #1
 8023e1e:	6010      	str	r0, [r2, #0]
 8023e20:	4608      	mov	r0, r1
 8023e22:	7019      	strb	r1, [r3, #0]
 8023e24:	f85d 4b04 	ldr.w	r4, [sp], #4
 8023e28:	4770      	bx	lr

08023e2a <__sfputs_r>:
 8023e2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023e2c:	4606      	mov	r6, r0
 8023e2e:	460f      	mov	r7, r1
 8023e30:	4614      	mov	r4, r2
 8023e32:	18d5      	adds	r5, r2, r3
 8023e34:	42ac      	cmp	r4, r5
 8023e36:	d101      	bne.n	8023e3c <__sfputs_r+0x12>
 8023e38:	2000      	movs	r0, #0
 8023e3a:	e007      	b.n	8023e4c <__sfputs_r+0x22>
 8023e3c:	463a      	mov	r2, r7
 8023e3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8023e42:	4630      	mov	r0, r6
 8023e44:	f7ff ffda 	bl	8023dfc <__sfputc_r>
 8023e48:	1c43      	adds	r3, r0, #1
 8023e4a:	d1f3      	bne.n	8023e34 <__sfputs_r+0xa>
 8023e4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08023e50 <_vfiprintf_r>:
 8023e50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023e54:	460d      	mov	r5, r1
 8023e56:	b09d      	sub	sp, #116	; 0x74
 8023e58:	4614      	mov	r4, r2
 8023e5a:	4698      	mov	r8, r3
 8023e5c:	4606      	mov	r6, r0
 8023e5e:	b118      	cbz	r0, 8023e68 <_vfiprintf_r+0x18>
 8023e60:	6983      	ldr	r3, [r0, #24]
 8023e62:	b90b      	cbnz	r3, 8023e68 <_vfiprintf_r+0x18>
 8023e64:	f000 fd62 	bl	802492c <__sinit>
 8023e68:	4b89      	ldr	r3, [pc, #548]	; (8024090 <_vfiprintf_r+0x240>)
 8023e6a:	429d      	cmp	r5, r3
 8023e6c:	d11b      	bne.n	8023ea6 <_vfiprintf_r+0x56>
 8023e6e:	6875      	ldr	r5, [r6, #4]
 8023e70:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8023e72:	07d9      	lsls	r1, r3, #31
 8023e74:	d405      	bmi.n	8023e82 <_vfiprintf_r+0x32>
 8023e76:	89ab      	ldrh	r3, [r5, #12]
 8023e78:	059a      	lsls	r2, r3, #22
 8023e7a:	d402      	bmi.n	8023e82 <_vfiprintf_r+0x32>
 8023e7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8023e7e:	f7ff feb4 	bl	8023bea <__retarget_lock_acquire_recursive>
 8023e82:	89ab      	ldrh	r3, [r5, #12]
 8023e84:	071b      	lsls	r3, r3, #28
 8023e86:	d501      	bpl.n	8023e8c <_vfiprintf_r+0x3c>
 8023e88:	692b      	ldr	r3, [r5, #16]
 8023e8a:	b9eb      	cbnz	r3, 8023ec8 <_vfiprintf_r+0x78>
 8023e8c:	4629      	mov	r1, r5
 8023e8e:	4630      	mov	r0, r6
 8023e90:	f000 fbbe 	bl	8024610 <__swsetup_r>
 8023e94:	b1c0      	cbz	r0, 8023ec8 <_vfiprintf_r+0x78>
 8023e96:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8023e98:	07dc      	lsls	r4, r3, #31
 8023e9a:	d50e      	bpl.n	8023eba <_vfiprintf_r+0x6a>
 8023e9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8023ea0:	b01d      	add	sp, #116	; 0x74
 8023ea2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023ea6:	4b7b      	ldr	r3, [pc, #492]	; (8024094 <_vfiprintf_r+0x244>)
 8023ea8:	429d      	cmp	r5, r3
 8023eaa:	d101      	bne.n	8023eb0 <_vfiprintf_r+0x60>
 8023eac:	68b5      	ldr	r5, [r6, #8]
 8023eae:	e7df      	b.n	8023e70 <_vfiprintf_r+0x20>
 8023eb0:	4b79      	ldr	r3, [pc, #484]	; (8024098 <_vfiprintf_r+0x248>)
 8023eb2:	429d      	cmp	r5, r3
 8023eb4:	bf08      	it	eq
 8023eb6:	68f5      	ldreq	r5, [r6, #12]
 8023eb8:	e7da      	b.n	8023e70 <_vfiprintf_r+0x20>
 8023eba:	89ab      	ldrh	r3, [r5, #12]
 8023ebc:	0598      	lsls	r0, r3, #22
 8023ebe:	d4ed      	bmi.n	8023e9c <_vfiprintf_r+0x4c>
 8023ec0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8023ec2:	f7ff fe93 	bl	8023bec <__retarget_lock_release_recursive>
 8023ec6:	e7e9      	b.n	8023e9c <_vfiprintf_r+0x4c>
 8023ec8:	2300      	movs	r3, #0
 8023eca:	f8cd 800c 	str.w	r8, [sp, #12]
 8023ece:	f04f 0901 	mov.w	r9, #1
 8023ed2:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 802409c <_vfiprintf_r+0x24c>
 8023ed6:	9309      	str	r3, [sp, #36]	; 0x24
 8023ed8:	2320      	movs	r3, #32
 8023eda:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8023ede:	2330      	movs	r3, #48	; 0x30
 8023ee0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8023ee4:	4623      	mov	r3, r4
 8023ee6:	469a      	mov	sl, r3
 8023ee8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8023eec:	b10a      	cbz	r2, 8023ef2 <_vfiprintf_r+0xa2>
 8023eee:	2a25      	cmp	r2, #37	; 0x25
 8023ef0:	d1f9      	bne.n	8023ee6 <_vfiprintf_r+0x96>
 8023ef2:	ebba 0b04 	subs.w	fp, sl, r4
 8023ef6:	d00b      	beq.n	8023f10 <_vfiprintf_r+0xc0>
 8023ef8:	465b      	mov	r3, fp
 8023efa:	4622      	mov	r2, r4
 8023efc:	4629      	mov	r1, r5
 8023efe:	4630      	mov	r0, r6
 8023f00:	f7ff ff93 	bl	8023e2a <__sfputs_r>
 8023f04:	3001      	adds	r0, #1
 8023f06:	f000 80aa 	beq.w	802405e <_vfiprintf_r+0x20e>
 8023f0a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8023f0c:	445a      	add	r2, fp
 8023f0e:	9209      	str	r2, [sp, #36]	; 0x24
 8023f10:	f89a 3000 	ldrb.w	r3, [sl]
 8023f14:	2b00      	cmp	r3, #0
 8023f16:	f000 80a2 	beq.w	802405e <_vfiprintf_r+0x20e>
 8023f1a:	2300      	movs	r3, #0
 8023f1c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8023f20:	f10a 0a01 	add.w	sl, sl, #1
 8023f24:	9304      	str	r3, [sp, #16]
 8023f26:	9307      	str	r3, [sp, #28]
 8023f28:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8023f2c:	931a      	str	r3, [sp, #104]	; 0x68
 8023f2e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8023f32:	4654      	mov	r4, sl
 8023f34:	2205      	movs	r2, #5
 8023f36:	4859      	ldr	r0, [pc, #356]	; (802409c <_vfiprintf_r+0x24c>)
 8023f38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8023f3c:	f000 fdf8 	bl	8024b30 <memchr>
 8023f40:	9a04      	ldr	r2, [sp, #16]
 8023f42:	b9d8      	cbnz	r0, 8023f7c <_vfiprintf_r+0x12c>
 8023f44:	06d1      	lsls	r1, r2, #27
 8023f46:	bf44      	itt	mi
 8023f48:	2320      	movmi	r3, #32
 8023f4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8023f4e:	0713      	lsls	r3, r2, #28
 8023f50:	bf44      	itt	mi
 8023f52:	232b      	movmi	r3, #43	; 0x2b
 8023f54:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8023f58:	f89a 3000 	ldrb.w	r3, [sl]
 8023f5c:	2b2a      	cmp	r3, #42	; 0x2a
 8023f5e:	d015      	beq.n	8023f8c <_vfiprintf_r+0x13c>
 8023f60:	9a07      	ldr	r2, [sp, #28]
 8023f62:	4654      	mov	r4, sl
 8023f64:	2000      	movs	r0, #0
 8023f66:	f04f 0c0a 	mov.w	ip, #10
 8023f6a:	4621      	mov	r1, r4
 8023f6c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8023f70:	3b30      	subs	r3, #48	; 0x30
 8023f72:	2b09      	cmp	r3, #9
 8023f74:	d94e      	bls.n	8024014 <_vfiprintf_r+0x1c4>
 8023f76:	b1b0      	cbz	r0, 8023fa6 <_vfiprintf_r+0x156>
 8023f78:	9207      	str	r2, [sp, #28]
 8023f7a:	e014      	b.n	8023fa6 <_vfiprintf_r+0x156>
 8023f7c:	eba0 0308 	sub.w	r3, r0, r8
 8023f80:	46a2      	mov	sl, r4
 8023f82:	fa09 f303 	lsl.w	r3, r9, r3
 8023f86:	4313      	orrs	r3, r2
 8023f88:	9304      	str	r3, [sp, #16]
 8023f8a:	e7d2      	b.n	8023f32 <_vfiprintf_r+0xe2>
 8023f8c:	9b03      	ldr	r3, [sp, #12]
 8023f8e:	1d19      	adds	r1, r3, #4
 8023f90:	681b      	ldr	r3, [r3, #0]
 8023f92:	2b00      	cmp	r3, #0
 8023f94:	9103      	str	r1, [sp, #12]
 8023f96:	bfbb      	ittet	lt
 8023f98:	425b      	neglt	r3, r3
 8023f9a:	f042 0202 	orrlt.w	r2, r2, #2
 8023f9e:	9307      	strge	r3, [sp, #28]
 8023fa0:	9307      	strlt	r3, [sp, #28]
 8023fa2:	bfb8      	it	lt
 8023fa4:	9204      	strlt	r2, [sp, #16]
 8023fa6:	7823      	ldrb	r3, [r4, #0]
 8023fa8:	2b2e      	cmp	r3, #46	; 0x2e
 8023faa:	d10c      	bne.n	8023fc6 <_vfiprintf_r+0x176>
 8023fac:	7863      	ldrb	r3, [r4, #1]
 8023fae:	2b2a      	cmp	r3, #42	; 0x2a
 8023fb0:	d135      	bne.n	802401e <_vfiprintf_r+0x1ce>
 8023fb2:	9b03      	ldr	r3, [sp, #12]
 8023fb4:	3402      	adds	r4, #2
 8023fb6:	1d1a      	adds	r2, r3, #4
 8023fb8:	681b      	ldr	r3, [r3, #0]
 8023fba:	2b00      	cmp	r3, #0
 8023fbc:	9203      	str	r2, [sp, #12]
 8023fbe:	bfb8      	it	lt
 8023fc0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8023fc4:	9305      	str	r3, [sp, #20]
 8023fc6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80240ac <_vfiprintf_r+0x25c>
 8023fca:	2203      	movs	r2, #3
 8023fcc:	7821      	ldrb	r1, [r4, #0]
 8023fce:	4650      	mov	r0, sl
 8023fd0:	f000 fdae 	bl	8024b30 <memchr>
 8023fd4:	b140      	cbz	r0, 8023fe8 <_vfiprintf_r+0x198>
 8023fd6:	2340      	movs	r3, #64	; 0x40
 8023fd8:	eba0 000a 	sub.w	r0, r0, sl
 8023fdc:	3401      	adds	r4, #1
 8023fde:	fa03 f000 	lsl.w	r0, r3, r0
 8023fe2:	9b04      	ldr	r3, [sp, #16]
 8023fe4:	4303      	orrs	r3, r0
 8023fe6:	9304      	str	r3, [sp, #16]
 8023fe8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8023fec:	2206      	movs	r2, #6
 8023fee:	482c      	ldr	r0, [pc, #176]	; (80240a0 <_vfiprintf_r+0x250>)
 8023ff0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8023ff4:	f000 fd9c 	bl	8024b30 <memchr>
 8023ff8:	2800      	cmp	r0, #0
 8023ffa:	d03f      	beq.n	802407c <_vfiprintf_r+0x22c>
 8023ffc:	4b29      	ldr	r3, [pc, #164]	; (80240a4 <_vfiprintf_r+0x254>)
 8023ffe:	bb1b      	cbnz	r3, 8024048 <_vfiprintf_r+0x1f8>
 8024000:	9b03      	ldr	r3, [sp, #12]
 8024002:	3307      	adds	r3, #7
 8024004:	f023 0307 	bic.w	r3, r3, #7
 8024008:	3308      	adds	r3, #8
 802400a:	9303      	str	r3, [sp, #12]
 802400c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802400e:	443b      	add	r3, r7
 8024010:	9309      	str	r3, [sp, #36]	; 0x24
 8024012:	e767      	b.n	8023ee4 <_vfiprintf_r+0x94>
 8024014:	fb0c 3202 	mla	r2, ip, r2, r3
 8024018:	460c      	mov	r4, r1
 802401a:	2001      	movs	r0, #1
 802401c:	e7a5      	b.n	8023f6a <_vfiprintf_r+0x11a>
 802401e:	2300      	movs	r3, #0
 8024020:	3401      	adds	r4, #1
 8024022:	f04f 0c0a 	mov.w	ip, #10
 8024026:	4619      	mov	r1, r3
 8024028:	9305      	str	r3, [sp, #20]
 802402a:	4620      	mov	r0, r4
 802402c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8024030:	3a30      	subs	r2, #48	; 0x30
 8024032:	2a09      	cmp	r2, #9
 8024034:	d903      	bls.n	802403e <_vfiprintf_r+0x1ee>
 8024036:	2b00      	cmp	r3, #0
 8024038:	d0c5      	beq.n	8023fc6 <_vfiprintf_r+0x176>
 802403a:	9105      	str	r1, [sp, #20]
 802403c:	e7c3      	b.n	8023fc6 <_vfiprintf_r+0x176>
 802403e:	fb0c 2101 	mla	r1, ip, r1, r2
 8024042:	4604      	mov	r4, r0
 8024044:	2301      	movs	r3, #1
 8024046:	e7f0      	b.n	802402a <_vfiprintf_r+0x1da>
 8024048:	ab03      	add	r3, sp, #12
 802404a:	462a      	mov	r2, r5
 802404c:	a904      	add	r1, sp, #16
 802404e:	4630      	mov	r0, r6
 8024050:	9300      	str	r3, [sp, #0]
 8024052:	4b15      	ldr	r3, [pc, #84]	; (80240a8 <_vfiprintf_r+0x258>)
 8024054:	e000      	b.n	8024058 <_vfiprintf_r+0x208>
 8024056:	bf00      	nop
 8024058:	4607      	mov	r7, r0
 802405a:	1c78      	adds	r0, r7, #1
 802405c:	d1d6      	bne.n	802400c <_vfiprintf_r+0x1bc>
 802405e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8024060:	07d9      	lsls	r1, r3, #31
 8024062:	d405      	bmi.n	8024070 <_vfiprintf_r+0x220>
 8024064:	89ab      	ldrh	r3, [r5, #12]
 8024066:	059a      	lsls	r2, r3, #22
 8024068:	d402      	bmi.n	8024070 <_vfiprintf_r+0x220>
 802406a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802406c:	f7ff fdbe 	bl	8023bec <__retarget_lock_release_recursive>
 8024070:	89ab      	ldrh	r3, [r5, #12]
 8024072:	065b      	lsls	r3, r3, #25
 8024074:	f53f af12 	bmi.w	8023e9c <_vfiprintf_r+0x4c>
 8024078:	9809      	ldr	r0, [sp, #36]	; 0x24
 802407a:	e711      	b.n	8023ea0 <_vfiprintf_r+0x50>
 802407c:	ab03      	add	r3, sp, #12
 802407e:	462a      	mov	r2, r5
 8024080:	a904      	add	r1, sp, #16
 8024082:	4630      	mov	r0, r6
 8024084:	9300      	str	r3, [sp, #0]
 8024086:	4b08      	ldr	r3, [pc, #32]	; (80240a8 <_vfiprintf_r+0x258>)
 8024088:	f000 f882 	bl	8024190 <_printf_i>
 802408c:	e7e4      	b.n	8024058 <_vfiprintf_r+0x208>
 802408e:	bf00      	nop
 8024090:	08035f4c 	.word	0x08035f4c
 8024094:	08035f6c 	.word	0x08035f6c
 8024098:	08035f2c 	.word	0x08035f2c
 802409c:	08035df8 	.word	0x08035df8
 80240a0:	08035e02 	.word	0x08035e02
 80240a4:	00000000 	.word	0x00000000
 80240a8:	08023e2b 	.word	0x08023e2b
 80240ac:	08035dfe 	.word	0x08035dfe

080240b0 <_printf_common>:
 80240b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80240b4:	4616      	mov	r6, r2
 80240b6:	4699      	mov	r9, r3
 80240b8:	688a      	ldr	r2, [r1, #8]
 80240ba:	4607      	mov	r7, r0
 80240bc:	690b      	ldr	r3, [r1, #16]
 80240be:	460c      	mov	r4, r1
 80240c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80240c4:	4293      	cmp	r3, r2
 80240c6:	bfb8      	it	lt
 80240c8:	4613      	movlt	r3, r2
 80240ca:	6033      	str	r3, [r6, #0]
 80240cc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80240d0:	b10a      	cbz	r2, 80240d6 <_printf_common+0x26>
 80240d2:	3301      	adds	r3, #1
 80240d4:	6033      	str	r3, [r6, #0]
 80240d6:	6823      	ldr	r3, [r4, #0]
 80240d8:	0699      	lsls	r1, r3, #26
 80240da:	bf42      	ittt	mi
 80240dc:	6833      	ldrmi	r3, [r6, #0]
 80240de:	3302      	addmi	r3, #2
 80240e0:	6033      	strmi	r3, [r6, #0]
 80240e2:	6825      	ldr	r5, [r4, #0]
 80240e4:	f015 0506 	ands.w	r5, r5, #6
 80240e8:	d106      	bne.n	80240f8 <_printf_common+0x48>
 80240ea:	f104 0a19 	add.w	sl, r4, #25
 80240ee:	68e3      	ldr	r3, [r4, #12]
 80240f0:	6832      	ldr	r2, [r6, #0]
 80240f2:	1a9b      	subs	r3, r3, r2
 80240f4:	42ab      	cmp	r3, r5
 80240f6:	dc29      	bgt.n	802414c <_printf_common+0x9c>
 80240f8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80240fc:	1e13      	subs	r3, r2, #0
 80240fe:	6822      	ldr	r2, [r4, #0]
 8024100:	bf18      	it	ne
 8024102:	2301      	movne	r3, #1
 8024104:	0692      	lsls	r2, r2, #26
 8024106:	d42e      	bmi.n	8024166 <_printf_common+0xb6>
 8024108:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802410c:	4649      	mov	r1, r9
 802410e:	4638      	mov	r0, r7
 8024110:	47c0      	blx	r8
 8024112:	3001      	adds	r0, #1
 8024114:	d021      	beq.n	802415a <_printf_common+0xaa>
 8024116:	6823      	ldr	r3, [r4, #0]
 8024118:	341a      	adds	r4, #26
 802411a:	f854 5c0e 	ldr.w	r5, [r4, #-14]
 802411e:	f003 0306 	and.w	r3, r3, #6
 8024122:	6832      	ldr	r2, [r6, #0]
 8024124:	2600      	movs	r6, #0
 8024126:	2b04      	cmp	r3, #4
 8024128:	f854 3c12 	ldr.w	r3, [r4, #-18]
 802412c:	bf08      	it	eq
 802412e:	1aad      	subeq	r5, r5, r2
 8024130:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 8024134:	bf14      	ite	ne
 8024136:	2500      	movne	r5, #0
 8024138:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802413c:	4293      	cmp	r3, r2
 802413e:	bfc4      	itt	gt
 8024140:	1a9b      	subgt	r3, r3, r2
 8024142:	18ed      	addgt	r5, r5, r3
 8024144:	42b5      	cmp	r5, r6
 8024146:	d11a      	bne.n	802417e <_printf_common+0xce>
 8024148:	2000      	movs	r0, #0
 802414a:	e008      	b.n	802415e <_printf_common+0xae>
 802414c:	2301      	movs	r3, #1
 802414e:	4652      	mov	r2, sl
 8024150:	4649      	mov	r1, r9
 8024152:	4638      	mov	r0, r7
 8024154:	47c0      	blx	r8
 8024156:	3001      	adds	r0, #1
 8024158:	d103      	bne.n	8024162 <_printf_common+0xb2>
 802415a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802415e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8024162:	3501      	adds	r5, #1
 8024164:	e7c3      	b.n	80240ee <_printf_common+0x3e>
 8024166:	18e1      	adds	r1, r4, r3
 8024168:	1c5a      	adds	r2, r3, #1
 802416a:	2030      	movs	r0, #48	; 0x30
 802416c:	3302      	adds	r3, #2
 802416e:	4422      	add	r2, r4
 8024170:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8024174:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8024178:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 802417c:	e7c4      	b.n	8024108 <_printf_common+0x58>
 802417e:	2301      	movs	r3, #1
 8024180:	4622      	mov	r2, r4
 8024182:	4649      	mov	r1, r9
 8024184:	4638      	mov	r0, r7
 8024186:	47c0      	blx	r8
 8024188:	3001      	adds	r0, #1
 802418a:	d0e6      	beq.n	802415a <_printf_common+0xaa>
 802418c:	3601      	adds	r6, #1
 802418e:	e7d9      	b.n	8024144 <_printf_common+0x94>

08024190 <_printf_i>:
 8024190:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8024194:	7e0f      	ldrb	r7, [r1, #24]
 8024196:	4691      	mov	r9, r2
 8024198:	4680      	mov	r8, r0
 802419a:	460c      	mov	r4, r1
 802419c:	2f78      	cmp	r7, #120	; 0x78
 802419e:	469a      	mov	sl, r3
 80241a0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80241a2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80241a6:	d807      	bhi.n	80241b8 <_printf_i+0x28>
 80241a8:	2f62      	cmp	r7, #98	; 0x62
 80241aa:	d80a      	bhi.n	80241c2 <_printf_i+0x32>
 80241ac:	2f00      	cmp	r7, #0
 80241ae:	f000 80d8 	beq.w	8024362 <_printf_i+0x1d2>
 80241b2:	2f58      	cmp	r7, #88	; 0x58
 80241b4:	f000 80a3 	beq.w	80242fe <_printf_i+0x16e>
 80241b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80241bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80241c0:	e03a      	b.n	8024238 <_printf_i+0xa8>
 80241c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80241c6:	2b15      	cmp	r3, #21
 80241c8:	d8f6      	bhi.n	80241b8 <_printf_i+0x28>
 80241ca:	a101      	add	r1, pc, #4	; (adr r1, 80241d0 <_printf_i+0x40>)
 80241cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80241d0:	08024229 	.word	0x08024229
 80241d4:	0802423d 	.word	0x0802423d
 80241d8:	080241b9 	.word	0x080241b9
 80241dc:	080241b9 	.word	0x080241b9
 80241e0:	080241b9 	.word	0x080241b9
 80241e4:	080241b9 	.word	0x080241b9
 80241e8:	0802423d 	.word	0x0802423d
 80241ec:	080241b9 	.word	0x080241b9
 80241f0:	080241b9 	.word	0x080241b9
 80241f4:	080241b9 	.word	0x080241b9
 80241f8:	080241b9 	.word	0x080241b9
 80241fc:	08024349 	.word	0x08024349
 8024200:	0802426d 	.word	0x0802426d
 8024204:	0802432b 	.word	0x0802432b
 8024208:	080241b9 	.word	0x080241b9
 802420c:	080241b9 	.word	0x080241b9
 8024210:	0802436b 	.word	0x0802436b
 8024214:	080241b9 	.word	0x080241b9
 8024218:	0802426d 	.word	0x0802426d
 802421c:	080241b9 	.word	0x080241b9
 8024220:	080241b9 	.word	0x080241b9
 8024224:	08024333 	.word	0x08024333
 8024228:	682b      	ldr	r3, [r5, #0]
 802422a:	1d1a      	adds	r2, r3, #4
 802422c:	681b      	ldr	r3, [r3, #0]
 802422e:	602a      	str	r2, [r5, #0]
 8024230:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8024234:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8024238:	2301      	movs	r3, #1
 802423a:	e0a3      	b.n	8024384 <_printf_i+0x1f4>
 802423c:	6820      	ldr	r0, [r4, #0]
 802423e:	6829      	ldr	r1, [r5, #0]
 8024240:	0606      	lsls	r6, r0, #24
 8024242:	f101 0304 	add.w	r3, r1, #4
 8024246:	d50a      	bpl.n	802425e <_printf_i+0xce>
 8024248:	680e      	ldr	r6, [r1, #0]
 802424a:	602b      	str	r3, [r5, #0]
 802424c:	2e00      	cmp	r6, #0
 802424e:	da03      	bge.n	8024258 <_printf_i+0xc8>
 8024250:	232d      	movs	r3, #45	; 0x2d
 8024252:	4276      	negs	r6, r6
 8024254:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8024258:	485e      	ldr	r0, [pc, #376]	; (80243d4 <_printf_i+0x244>)
 802425a:	230a      	movs	r3, #10
 802425c:	e019      	b.n	8024292 <_printf_i+0x102>
 802425e:	680e      	ldr	r6, [r1, #0]
 8024260:	f010 0f40 	tst.w	r0, #64	; 0x40
 8024264:	602b      	str	r3, [r5, #0]
 8024266:	bf18      	it	ne
 8024268:	b236      	sxthne	r6, r6
 802426a:	e7ef      	b.n	802424c <_printf_i+0xbc>
 802426c:	682b      	ldr	r3, [r5, #0]
 802426e:	6820      	ldr	r0, [r4, #0]
 8024270:	1d19      	adds	r1, r3, #4
 8024272:	6029      	str	r1, [r5, #0]
 8024274:	0601      	lsls	r1, r0, #24
 8024276:	d501      	bpl.n	802427c <_printf_i+0xec>
 8024278:	681e      	ldr	r6, [r3, #0]
 802427a:	e002      	b.n	8024282 <_printf_i+0xf2>
 802427c:	0646      	lsls	r6, r0, #25
 802427e:	d5fb      	bpl.n	8024278 <_printf_i+0xe8>
 8024280:	881e      	ldrh	r6, [r3, #0]
 8024282:	2f6f      	cmp	r7, #111	; 0x6f
 8024284:	4853      	ldr	r0, [pc, #332]	; (80243d4 <_printf_i+0x244>)
 8024286:	bf0c      	ite	eq
 8024288:	2308      	moveq	r3, #8
 802428a:	230a      	movne	r3, #10
 802428c:	2100      	movs	r1, #0
 802428e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8024292:	6865      	ldr	r5, [r4, #4]
 8024294:	2d00      	cmp	r5, #0
 8024296:	60a5      	str	r5, [r4, #8]
 8024298:	bfa2      	ittt	ge
 802429a:	6821      	ldrge	r1, [r4, #0]
 802429c:	f021 0104 	bicge.w	r1, r1, #4
 80242a0:	6021      	strge	r1, [r4, #0]
 80242a2:	b90e      	cbnz	r6, 80242a8 <_printf_i+0x118>
 80242a4:	2d00      	cmp	r5, #0
 80242a6:	d04d      	beq.n	8024344 <_printf_i+0x1b4>
 80242a8:	4615      	mov	r5, r2
 80242aa:	fbb6 f1f3 	udiv	r1, r6, r3
 80242ae:	fb03 6711 	mls	r7, r3, r1, r6
 80242b2:	5dc7      	ldrb	r7, [r0, r7]
 80242b4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80242b8:	4637      	mov	r7, r6
 80242ba:	460e      	mov	r6, r1
 80242bc:	42bb      	cmp	r3, r7
 80242be:	d9f4      	bls.n	80242aa <_printf_i+0x11a>
 80242c0:	2b08      	cmp	r3, #8
 80242c2:	d10b      	bne.n	80242dc <_printf_i+0x14c>
 80242c4:	6823      	ldr	r3, [r4, #0]
 80242c6:	07de      	lsls	r6, r3, #31
 80242c8:	d508      	bpl.n	80242dc <_printf_i+0x14c>
 80242ca:	6923      	ldr	r3, [r4, #16]
 80242cc:	6861      	ldr	r1, [r4, #4]
 80242ce:	4299      	cmp	r1, r3
 80242d0:	bfde      	ittt	le
 80242d2:	2330      	movle	r3, #48	; 0x30
 80242d4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80242d8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80242dc:	1b52      	subs	r2, r2, r5
 80242de:	6122      	str	r2, [r4, #16]
 80242e0:	464b      	mov	r3, r9
 80242e2:	aa03      	add	r2, sp, #12
 80242e4:	4621      	mov	r1, r4
 80242e6:	4640      	mov	r0, r8
 80242e8:	f8cd a000 	str.w	sl, [sp]
 80242ec:	f7ff fee0 	bl	80240b0 <_printf_common>
 80242f0:	3001      	adds	r0, #1
 80242f2:	d14c      	bne.n	802438e <_printf_i+0x1fe>
 80242f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80242f8:	b004      	add	sp, #16
 80242fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80242fe:	4835      	ldr	r0, [pc, #212]	; (80243d4 <_printf_i+0x244>)
 8024300:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8024304:	6829      	ldr	r1, [r5, #0]
 8024306:	6823      	ldr	r3, [r4, #0]
 8024308:	f851 6b04 	ldr.w	r6, [r1], #4
 802430c:	6029      	str	r1, [r5, #0]
 802430e:	061d      	lsls	r5, r3, #24
 8024310:	d514      	bpl.n	802433c <_printf_i+0x1ac>
 8024312:	07df      	lsls	r7, r3, #31
 8024314:	bf44      	itt	mi
 8024316:	f043 0320 	orrmi.w	r3, r3, #32
 802431a:	6023      	strmi	r3, [r4, #0]
 802431c:	b91e      	cbnz	r6, 8024326 <_printf_i+0x196>
 802431e:	6823      	ldr	r3, [r4, #0]
 8024320:	f023 0320 	bic.w	r3, r3, #32
 8024324:	6023      	str	r3, [r4, #0]
 8024326:	2310      	movs	r3, #16
 8024328:	e7b0      	b.n	802428c <_printf_i+0xfc>
 802432a:	6823      	ldr	r3, [r4, #0]
 802432c:	f043 0320 	orr.w	r3, r3, #32
 8024330:	6023      	str	r3, [r4, #0]
 8024332:	2378      	movs	r3, #120	; 0x78
 8024334:	4828      	ldr	r0, [pc, #160]	; (80243d8 <_printf_i+0x248>)
 8024336:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 802433a:	e7e3      	b.n	8024304 <_printf_i+0x174>
 802433c:	0659      	lsls	r1, r3, #25
 802433e:	bf48      	it	mi
 8024340:	b2b6      	uxthmi	r6, r6
 8024342:	e7e6      	b.n	8024312 <_printf_i+0x182>
 8024344:	4615      	mov	r5, r2
 8024346:	e7bb      	b.n	80242c0 <_printf_i+0x130>
 8024348:	682b      	ldr	r3, [r5, #0]
 802434a:	6826      	ldr	r6, [r4, #0]
 802434c:	1d18      	adds	r0, r3, #4
 802434e:	6961      	ldr	r1, [r4, #20]
 8024350:	6028      	str	r0, [r5, #0]
 8024352:	0635      	lsls	r5, r6, #24
 8024354:	681b      	ldr	r3, [r3, #0]
 8024356:	d501      	bpl.n	802435c <_printf_i+0x1cc>
 8024358:	6019      	str	r1, [r3, #0]
 802435a:	e002      	b.n	8024362 <_printf_i+0x1d2>
 802435c:	0670      	lsls	r0, r6, #25
 802435e:	d5fb      	bpl.n	8024358 <_printf_i+0x1c8>
 8024360:	8019      	strh	r1, [r3, #0]
 8024362:	2300      	movs	r3, #0
 8024364:	4615      	mov	r5, r2
 8024366:	6123      	str	r3, [r4, #16]
 8024368:	e7ba      	b.n	80242e0 <_printf_i+0x150>
 802436a:	682b      	ldr	r3, [r5, #0]
 802436c:	2100      	movs	r1, #0
 802436e:	1d1a      	adds	r2, r3, #4
 8024370:	602a      	str	r2, [r5, #0]
 8024372:	681d      	ldr	r5, [r3, #0]
 8024374:	6862      	ldr	r2, [r4, #4]
 8024376:	4628      	mov	r0, r5
 8024378:	f000 fbda 	bl	8024b30 <memchr>
 802437c:	b108      	cbz	r0, 8024382 <_printf_i+0x1f2>
 802437e:	1b40      	subs	r0, r0, r5
 8024380:	6060      	str	r0, [r4, #4]
 8024382:	6863      	ldr	r3, [r4, #4]
 8024384:	6123      	str	r3, [r4, #16]
 8024386:	2300      	movs	r3, #0
 8024388:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802438c:	e7a8      	b.n	80242e0 <_printf_i+0x150>
 802438e:	6923      	ldr	r3, [r4, #16]
 8024390:	462a      	mov	r2, r5
 8024392:	4649      	mov	r1, r9
 8024394:	4640      	mov	r0, r8
 8024396:	47d0      	blx	sl
 8024398:	3001      	adds	r0, #1
 802439a:	d0ab      	beq.n	80242f4 <_printf_i+0x164>
 802439c:	6823      	ldr	r3, [r4, #0]
 802439e:	079b      	lsls	r3, r3, #30
 80243a0:	d413      	bmi.n	80243ca <_printf_i+0x23a>
 80243a2:	68e0      	ldr	r0, [r4, #12]
 80243a4:	9b03      	ldr	r3, [sp, #12]
 80243a6:	4298      	cmp	r0, r3
 80243a8:	bfb8      	it	lt
 80243aa:	4618      	movlt	r0, r3
 80243ac:	e7a4      	b.n	80242f8 <_printf_i+0x168>
 80243ae:	2301      	movs	r3, #1
 80243b0:	4632      	mov	r2, r6
 80243b2:	4649      	mov	r1, r9
 80243b4:	4640      	mov	r0, r8
 80243b6:	47d0      	blx	sl
 80243b8:	3001      	adds	r0, #1
 80243ba:	d09b      	beq.n	80242f4 <_printf_i+0x164>
 80243bc:	3501      	adds	r5, #1
 80243be:	68e3      	ldr	r3, [r4, #12]
 80243c0:	9903      	ldr	r1, [sp, #12]
 80243c2:	1a5b      	subs	r3, r3, r1
 80243c4:	42ab      	cmp	r3, r5
 80243c6:	dcf2      	bgt.n	80243ae <_printf_i+0x21e>
 80243c8:	e7eb      	b.n	80243a2 <_printf_i+0x212>
 80243ca:	2500      	movs	r5, #0
 80243cc:	f104 0619 	add.w	r6, r4, #25
 80243d0:	e7f5      	b.n	80243be <_printf_i+0x22e>
 80243d2:	bf00      	nop
 80243d4:	08035e09 	.word	0x08035e09
 80243d8:	08035e1a 	.word	0x08035e1a

080243dc <iprintf>:
 80243dc:	b40f      	push	{r0, r1, r2, r3}
 80243de:	4b0a      	ldr	r3, [pc, #40]	; (8024408 <iprintf+0x2c>)
 80243e0:	b513      	push	{r0, r1, r4, lr}
 80243e2:	681c      	ldr	r4, [r3, #0]
 80243e4:	b124      	cbz	r4, 80243f0 <iprintf+0x14>
 80243e6:	69a3      	ldr	r3, [r4, #24]
 80243e8:	b913      	cbnz	r3, 80243f0 <iprintf+0x14>
 80243ea:	4620      	mov	r0, r4
 80243ec:	f000 fa9e 	bl	802492c <__sinit>
 80243f0:	ab05      	add	r3, sp, #20
 80243f2:	9a04      	ldr	r2, [sp, #16]
 80243f4:	68a1      	ldr	r1, [r4, #8]
 80243f6:	4620      	mov	r0, r4
 80243f8:	9301      	str	r3, [sp, #4]
 80243fa:	f7ff fd29 	bl	8023e50 <_vfiprintf_r>
 80243fe:	b002      	add	sp, #8
 8024400:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8024404:	b004      	add	sp, #16
 8024406:	4770      	bx	lr
 8024408:	20000658 	.word	0x20000658

0802440c <_sbrk_r>:
 802440c:	b538      	push	{r3, r4, r5, lr}
 802440e:	2300      	movs	r3, #0
 8024410:	4d05      	ldr	r5, [pc, #20]	; (8024428 <_sbrk_r+0x1c>)
 8024412:	4604      	mov	r4, r0
 8024414:	4608      	mov	r0, r1
 8024416:	602b      	str	r3, [r5, #0]
 8024418:	f001 faf2 	bl	8025a00 <_sbrk>
 802441c:	1c43      	adds	r3, r0, #1
 802441e:	d102      	bne.n	8024426 <_sbrk_r+0x1a>
 8024420:	682b      	ldr	r3, [r5, #0]
 8024422:	b103      	cbz	r3, 8024426 <_sbrk_r+0x1a>
 8024424:	6023      	str	r3, [r4, #0]
 8024426:	bd38      	pop	{r3, r4, r5, pc}
 8024428:	2003ad0c 	.word	0x2003ad0c

0802442c <strncmp>:
 802442c:	b510      	push	{r4, lr}
 802442e:	b17a      	cbz	r2, 8024450 <strncmp+0x24>
 8024430:	4603      	mov	r3, r0
 8024432:	3901      	subs	r1, #1
 8024434:	1884      	adds	r4, r0, r2
 8024436:	f813 0b01 	ldrb.w	r0, [r3], #1
 802443a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 802443e:	4290      	cmp	r0, r2
 8024440:	d101      	bne.n	8024446 <strncmp+0x1a>
 8024442:	42a3      	cmp	r3, r4
 8024444:	d101      	bne.n	802444a <strncmp+0x1e>
 8024446:	1a80      	subs	r0, r0, r2
 8024448:	bd10      	pop	{r4, pc}
 802444a:	2800      	cmp	r0, #0
 802444c:	d1f3      	bne.n	8024436 <strncmp+0xa>
 802444e:	e7fa      	b.n	8024446 <strncmp+0x1a>
 8024450:	4610      	mov	r0, r2
 8024452:	e7f9      	b.n	8024448 <strncmp+0x1c>

08024454 <_strtol_l.constprop.0>:
 8024454:	2b01      	cmp	r3, #1
 8024456:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802445a:	d001      	beq.n	8024460 <_strtol_l.constprop.0+0xc>
 802445c:	2b24      	cmp	r3, #36	; 0x24
 802445e:	d906      	bls.n	802446e <_strtol_l.constprop.0+0x1a>
 8024460:	f7ff fb18 	bl	8023a94 <__errno>
 8024464:	2316      	movs	r3, #22
 8024466:	6003      	str	r3, [r0, #0]
 8024468:	2000      	movs	r0, #0
 802446a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802446e:	460d      	mov	r5, r1
 8024470:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 8024554 <_strtol_l.constprop.0+0x100>
 8024474:	462e      	mov	r6, r5
 8024476:	f815 4b01 	ldrb.w	r4, [r5], #1
 802447a:	f814 700c 	ldrb.w	r7, [r4, ip]
 802447e:	f017 0708 	ands.w	r7, r7, #8
 8024482:	d1f7      	bne.n	8024474 <_strtol_l.constprop.0+0x20>
 8024484:	2c2d      	cmp	r4, #45	; 0x2d
 8024486:	d132      	bne.n	80244ee <_strtol_l.constprop.0+0x9a>
 8024488:	782c      	ldrb	r4, [r5, #0]
 802448a:	2701      	movs	r7, #1
 802448c:	1cb5      	adds	r5, r6, #2
 802448e:	2b00      	cmp	r3, #0
 8024490:	d05b      	beq.n	802454a <_strtol_l.constprop.0+0xf6>
 8024492:	2b10      	cmp	r3, #16
 8024494:	d109      	bne.n	80244aa <_strtol_l.constprop.0+0x56>
 8024496:	2c30      	cmp	r4, #48	; 0x30
 8024498:	d107      	bne.n	80244aa <_strtol_l.constprop.0+0x56>
 802449a:	782c      	ldrb	r4, [r5, #0]
 802449c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80244a0:	2c58      	cmp	r4, #88	; 0x58
 80244a2:	d14d      	bne.n	8024540 <_strtol_l.constprop.0+0xec>
 80244a4:	786c      	ldrb	r4, [r5, #1]
 80244a6:	2310      	movs	r3, #16
 80244a8:	3502      	adds	r5, #2
 80244aa:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80244ae:	f04f 0c00 	mov.w	ip, #0
 80244b2:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80244b6:	4666      	mov	r6, ip
 80244b8:	fbb8 f9f3 	udiv	r9, r8, r3
 80244bc:	fb03 8a19 	mls	sl, r3, r9, r8
 80244c0:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80244c4:	f1be 0f09 	cmp.w	lr, #9
 80244c8:	d816      	bhi.n	80244f8 <_strtol_l.constprop.0+0xa4>
 80244ca:	4674      	mov	r4, lr
 80244cc:	42a3      	cmp	r3, r4
 80244ce:	dd24      	ble.n	802451a <_strtol_l.constprop.0+0xc6>
 80244d0:	f1bc 0f00 	cmp.w	ip, #0
 80244d4:	db1e      	blt.n	8024514 <_strtol_l.constprop.0+0xc0>
 80244d6:	45b1      	cmp	r9, r6
 80244d8:	d31c      	bcc.n	8024514 <_strtol_l.constprop.0+0xc0>
 80244da:	d101      	bne.n	80244e0 <_strtol_l.constprop.0+0x8c>
 80244dc:	45a2      	cmp	sl, r4
 80244de:	db19      	blt.n	8024514 <_strtol_l.constprop.0+0xc0>
 80244e0:	fb06 4603 	mla	r6, r6, r3, r4
 80244e4:	f04f 0c01 	mov.w	ip, #1
 80244e8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80244ec:	e7e8      	b.n	80244c0 <_strtol_l.constprop.0+0x6c>
 80244ee:	2c2b      	cmp	r4, #43	; 0x2b
 80244f0:	bf04      	itt	eq
 80244f2:	782c      	ldrbeq	r4, [r5, #0]
 80244f4:	1cb5      	addeq	r5, r6, #2
 80244f6:	e7ca      	b.n	802448e <_strtol_l.constprop.0+0x3a>
 80244f8:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80244fc:	f1be 0f19 	cmp.w	lr, #25
 8024500:	d801      	bhi.n	8024506 <_strtol_l.constprop.0+0xb2>
 8024502:	3c37      	subs	r4, #55	; 0x37
 8024504:	e7e2      	b.n	80244cc <_strtol_l.constprop.0+0x78>
 8024506:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 802450a:	f1be 0f19 	cmp.w	lr, #25
 802450e:	d804      	bhi.n	802451a <_strtol_l.constprop.0+0xc6>
 8024510:	3c57      	subs	r4, #87	; 0x57
 8024512:	e7db      	b.n	80244cc <_strtol_l.constprop.0+0x78>
 8024514:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8024518:	e7e6      	b.n	80244e8 <_strtol_l.constprop.0+0x94>
 802451a:	f1bc 0f00 	cmp.w	ip, #0
 802451e:	da05      	bge.n	802452c <_strtol_l.constprop.0+0xd8>
 8024520:	2322      	movs	r3, #34	; 0x22
 8024522:	4646      	mov	r6, r8
 8024524:	6003      	str	r3, [r0, #0]
 8024526:	b942      	cbnz	r2, 802453a <_strtol_l.constprop.0+0xe6>
 8024528:	4630      	mov	r0, r6
 802452a:	e79e      	b.n	802446a <_strtol_l.constprop.0+0x16>
 802452c:	b107      	cbz	r7, 8024530 <_strtol_l.constprop.0+0xdc>
 802452e:	4276      	negs	r6, r6
 8024530:	2a00      	cmp	r2, #0
 8024532:	d0f9      	beq.n	8024528 <_strtol_l.constprop.0+0xd4>
 8024534:	f1bc 0f00 	cmp.w	ip, #0
 8024538:	d000      	beq.n	802453c <_strtol_l.constprop.0+0xe8>
 802453a:	1e69      	subs	r1, r5, #1
 802453c:	6011      	str	r1, [r2, #0]
 802453e:	e7f3      	b.n	8024528 <_strtol_l.constprop.0+0xd4>
 8024540:	2430      	movs	r4, #48	; 0x30
 8024542:	2b00      	cmp	r3, #0
 8024544:	d1b1      	bne.n	80244aa <_strtol_l.constprop.0+0x56>
 8024546:	2308      	movs	r3, #8
 8024548:	e7af      	b.n	80244aa <_strtol_l.constprop.0+0x56>
 802454a:	2c30      	cmp	r4, #48	; 0x30
 802454c:	d0a5      	beq.n	802449a <_strtol_l.constprop.0+0x46>
 802454e:	230a      	movs	r3, #10
 8024550:	e7ab      	b.n	80244aa <_strtol_l.constprop.0+0x56>
 8024552:	bf00      	nop
 8024554:	08035e2c 	.word	0x08035e2c

08024558 <strtol>:
 8024558:	4613      	mov	r3, r2
 802455a:	460a      	mov	r2, r1
 802455c:	4601      	mov	r1, r0
 802455e:	4802      	ldr	r0, [pc, #8]	; (8024568 <strtol+0x10>)
 8024560:	6800      	ldr	r0, [r0, #0]
 8024562:	f7ff bf77 	b.w	8024454 <_strtol_l.constprop.0>
 8024566:	bf00      	nop
 8024568:	20000658 	.word	0x20000658

0802456c <__swbuf_r>:
 802456c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802456e:	460e      	mov	r6, r1
 8024570:	4614      	mov	r4, r2
 8024572:	4605      	mov	r5, r0
 8024574:	b118      	cbz	r0, 802457e <__swbuf_r+0x12>
 8024576:	6983      	ldr	r3, [r0, #24]
 8024578:	b90b      	cbnz	r3, 802457e <__swbuf_r+0x12>
 802457a:	f000 f9d7 	bl	802492c <__sinit>
 802457e:	4b21      	ldr	r3, [pc, #132]	; (8024604 <__swbuf_r+0x98>)
 8024580:	429c      	cmp	r4, r3
 8024582:	d12b      	bne.n	80245dc <__swbuf_r+0x70>
 8024584:	686c      	ldr	r4, [r5, #4]
 8024586:	69a3      	ldr	r3, [r4, #24]
 8024588:	60a3      	str	r3, [r4, #8]
 802458a:	89a3      	ldrh	r3, [r4, #12]
 802458c:	071a      	lsls	r2, r3, #28
 802458e:	d52f      	bpl.n	80245f0 <__swbuf_r+0x84>
 8024590:	6923      	ldr	r3, [r4, #16]
 8024592:	b36b      	cbz	r3, 80245f0 <__swbuf_r+0x84>
 8024594:	6923      	ldr	r3, [r4, #16]
 8024596:	b2f6      	uxtb	r6, r6
 8024598:	6820      	ldr	r0, [r4, #0]
 802459a:	4637      	mov	r7, r6
 802459c:	1ac0      	subs	r0, r0, r3
 802459e:	6963      	ldr	r3, [r4, #20]
 80245a0:	4283      	cmp	r3, r0
 80245a2:	dc04      	bgt.n	80245ae <__swbuf_r+0x42>
 80245a4:	4621      	mov	r1, r4
 80245a6:	4628      	mov	r0, r5
 80245a8:	f000 f92c 	bl	8024804 <_fflush_r>
 80245ac:	bb30      	cbnz	r0, 80245fc <__swbuf_r+0x90>
 80245ae:	68a3      	ldr	r3, [r4, #8]
 80245b0:	3001      	adds	r0, #1
 80245b2:	3b01      	subs	r3, #1
 80245b4:	60a3      	str	r3, [r4, #8]
 80245b6:	6823      	ldr	r3, [r4, #0]
 80245b8:	1c5a      	adds	r2, r3, #1
 80245ba:	6022      	str	r2, [r4, #0]
 80245bc:	701e      	strb	r6, [r3, #0]
 80245be:	6963      	ldr	r3, [r4, #20]
 80245c0:	4283      	cmp	r3, r0
 80245c2:	d004      	beq.n	80245ce <__swbuf_r+0x62>
 80245c4:	89a3      	ldrh	r3, [r4, #12]
 80245c6:	07db      	lsls	r3, r3, #31
 80245c8:	d506      	bpl.n	80245d8 <__swbuf_r+0x6c>
 80245ca:	2e0a      	cmp	r6, #10
 80245cc:	d104      	bne.n	80245d8 <__swbuf_r+0x6c>
 80245ce:	4621      	mov	r1, r4
 80245d0:	4628      	mov	r0, r5
 80245d2:	f000 f917 	bl	8024804 <_fflush_r>
 80245d6:	b988      	cbnz	r0, 80245fc <__swbuf_r+0x90>
 80245d8:	4638      	mov	r0, r7
 80245da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80245dc:	4b0a      	ldr	r3, [pc, #40]	; (8024608 <__swbuf_r+0x9c>)
 80245de:	429c      	cmp	r4, r3
 80245e0:	d101      	bne.n	80245e6 <__swbuf_r+0x7a>
 80245e2:	68ac      	ldr	r4, [r5, #8]
 80245e4:	e7cf      	b.n	8024586 <__swbuf_r+0x1a>
 80245e6:	4b09      	ldr	r3, [pc, #36]	; (802460c <__swbuf_r+0xa0>)
 80245e8:	429c      	cmp	r4, r3
 80245ea:	bf08      	it	eq
 80245ec:	68ec      	ldreq	r4, [r5, #12]
 80245ee:	e7ca      	b.n	8024586 <__swbuf_r+0x1a>
 80245f0:	4621      	mov	r1, r4
 80245f2:	4628      	mov	r0, r5
 80245f4:	f000 f80c 	bl	8024610 <__swsetup_r>
 80245f8:	2800      	cmp	r0, #0
 80245fa:	d0cb      	beq.n	8024594 <__swbuf_r+0x28>
 80245fc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8024600:	e7ea      	b.n	80245d8 <__swbuf_r+0x6c>
 8024602:	bf00      	nop
 8024604:	08035f4c 	.word	0x08035f4c
 8024608:	08035f6c 	.word	0x08035f6c
 802460c:	08035f2c 	.word	0x08035f2c

08024610 <__swsetup_r>:
 8024610:	4b32      	ldr	r3, [pc, #200]	; (80246dc <__swsetup_r+0xcc>)
 8024612:	b570      	push	{r4, r5, r6, lr}
 8024614:	681d      	ldr	r5, [r3, #0]
 8024616:	4606      	mov	r6, r0
 8024618:	460c      	mov	r4, r1
 802461a:	b125      	cbz	r5, 8024626 <__swsetup_r+0x16>
 802461c:	69ab      	ldr	r3, [r5, #24]
 802461e:	b913      	cbnz	r3, 8024626 <__swsetup_r+0x16>
 8024620:	4628      	mov	r0, r5
 8024622:	f000 f983 	bl	802492c <__sinit>
 8024626:	4b2e      	ldr	r3, [pc, #184]	; (80246e0 <__swsetup_r+0xd0>)
 8024628:	429c      	cmp	r4, r3
 802462a:	d10f      	bne.n	802464c <__swsetup_r+0x3c>
 802462c:	686c      	ldr	r4, [r5, #4]
 802462e:	89a3      	ldrh	r3, [r4, #12]
 8024630:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8024634:	0719      	lsls	r1, r3, #28
 8024636:	d42c      	bmi.n	8024692 <__swsetup_r+0x82>
 8024638:	06dd      	lsls	r5, r3, #27
 802463a:	d411      	bmi.n	8024660 <__swsetup_r+0x50>
 802463c:	2309      	movs	r3, #9
 802463e:	6033      	str	r3, [r6, #0]
 8024640:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8024644:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8024648:	81a3      	strh	r3, [r4, #12]
 802464a:	e03e      	b.n	80246ca <__swsetup_r+0xba>
 802464c:	4b25      	ldr	r3, [pc, #148]	; (80246e4 <__swsetup_r+0xd4>)
 802464e:	429c      	cmp	r4, r3
 8024650:	d101      	bne.n	8024656 <__swsetup_r+0x46>
 8024652:	68ac      	ldr	r4, [r5, #8]
 8024654:	e7eb      	b.n	802462e <__swsetup_r+0x1e>
 8024656:	4b24      	ldr	r3, [pc, #144]	; (80246e8 <__swsetup_r+0xd8>)
 8024658:	429c      	cmp	r4, r3
 802465a:	bf08      	it	eq
 802465c:	68ec      	ldreq	r4, [r5, #12]
 802465e:	e7e6      	b.n	802462e <__swsetup_r+0x1e>
 8024660:	0758      	lsls	r0, r3, #29
 8024662:	d512      	bpl.n	802468a <__swsetup_r+0x7a>
 8024664:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8024666:	b141      	cbz	r1, 802467a <__swsetup_r+0x6a>
 8024668:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802466c:	4299      	cmp	r1, r3
 802466e:	d002      	beq.n	8024676 <__swsetup_r+0x66>
 8024670:	4630      	mov	r0, r6
 8024672:	f7ff fae3 	bl	8023c3c <_free_r>
 8024676:	2300      	movs	r3, #0
 8024678:	6363      	str	r3, [r4, #52]	; 0x34
 802467a:	89a3      	ldrh	r3, [r4, #12]
 802467c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8024680:	81a3      	strh	r3, [r4, #12]
 8024682:	2300      	movs	r3, #0
 8024684:	6063      	str	r3, [r4, #4]
 8024686:	6923      	ldr	r3, [r4, #16]
 8024688:	6023      	str	r3, [r4, #0]
 802468a:	89a3      	ldrh	r3, [r4, #12]
 802468c:	f043 0308 	orr.w	r3, r3, #8
 8024690:	81a3      	strh	r3, [r4, #12]
 8024692:	6923      	ldr	r3, [r4, #16]
 8024694:	b94b      	cbnz	r3, 80246aa <__swsetup_r+0x9a>
 8024696:	89a3      	ldrh	r3, [r4, #12]
 8024698:	f403 7320 	and.w	r3, r3, #640	; 0x280
 802469c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80246a0:	d003      	beq.n	80246aa <__swsetup_r+0x9a>
 80246a2:	4621      	mov	r1, r4
 80246a4:	4630      	mov	r0, r6
 80246a6:	f000 fa03 	bl	8024ab0 <__smakebuf_r>
 80246aa:	89a0      	ldrh	r0, [r4, #12]
 80246ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80246b0:	f010 0301 	ands.w	r3, r0, #1
 80246b4:	d00a      	beq.n	80246cc <__swsetup_r+0xbc>
 80246b6:	2300      	movs	r3, #0
 80246b8:	60a3      	str	r3, [r4, #8]
 80246ba:	6963      	ldr	r3, [r4, #20]
 80246bc:	425b      	negs	r3, r3
 80246be:	61a3      	str	r3, [r4, #24]
 80246c0:	6923      	ldr	r3, [r4, #16]
 80246c2:	b943      	cbnz	r3, 80246d6 <__swsetup_r+0xc6>
 80246c4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80246c8:	d1ba      	bne.n	8024640 <__swsetup_r+0x30>
 80246ca:	bd70      	pop	{r4, r5, r6, pc}
 80246cc:	0781      	lsls	r1, r0, #30
 80246ce:	bf58      	it	pl
 80246d0:	6963      	ldrpl	r3, [r4, #20]
 80246d2:	60a3      	str	r3, [r4, #8]
 80246d4:	e7f4      	b.n	80246c0 <__swsetup_r+0xb0>
 80246d6:	2000      	movs	r0, #0
 80246d8:	e7f7      	b.n	80246ca <__swsetup_r+0xba>
 80246da:	bf00      	nop
 80246dc:	20000658 	.word	0x20000658
 80246e0:	08035f4c 	.word	0x08035f4c
 80246e4:	08035f6c 	.word	0x08035f6c
 80246e8:	08035f2c 	.word	0x08035f2c

080246ec <abort>:
 80246ec:	2006      	movs	r0, #6
 80246ee:	b508      	push	{r3, lr}
 80246f0:	f000 fa60 	bl	8024bb4 <raise>
 80246f4:	2001      	movs	r0, #1
 80246f6:	f7f1 fb46 	bl	8015d86 <_exit>
	...

080246fc <__sflush_r>:
 80246fc:	898a      	ldrh	r2, [r1, #12]
 80246fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024702:	4605      	mov	r5, r0
 8024704:	0710      	lsls	r0, r2, #28
 8024706:	460c      	mov	r4, r1
 8024708:	d458      	bmi.n	80247bc <__sflush_r+0xc0>
 802470a:	684b      	ldr	r3, [r1, #4]
 802470c:	2b00      	cmp	r3, #0
 802470e:	dc05      	bgt.n	802471c <__sflush_r+0x20>
 8024710:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8024712:	2b00      	cmp	r3, #0
 8024714:	dc02      	bgt.n	802471c <__sflush_r+0x20>
 8024716:	2000      	movs	r0, #0
 8024718:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802471c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802471e:	2e00      	cmp	r6, #0
 8024720:	d0f9      	beq.n	8024716 <__sflush_r+0x1a>
 8024722:	2300      	movs	r3, #0
 8024724:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8024728:	682f      	ldr	r7, [r5, #0]
 802472a:	602b      	str	r3, [r5, #0]
 802472c:	d032      	beq.n	8024794 <__sflush_r+0x98>
 802472e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8024730:	89a3      	ldrh	r3, [r4, #12]
 8024732:	075a      	lsls	r2, r3, #29
 8024734:	d505      	bpl.n	8024742 <__sflush_r+0x46>
 8024736:	6863      	ldr	r3, [r4, #4]
 8024738:	1ac0      	subs	r0, r0, r3
 802473a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802473c:	b10b      	cbz	r3, 8024742 <__sflush_r+0x46>
 802473e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8024740:	1ac0      	subs	r0, r0, r3
 8024742:	2300      	movs	r3, #0
 8024744:	4602      	mov	r2, r0
 8024746:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8024748:	4628      	mov	r0, r5
 802474a:	6a21      	ldr	r1, [r4, #32]
 802474c:	47b0      	blx	r6
 802474e:	1c43      	adds	r3, r0, #1
 8024750:	89a3      	ldrh	r3, [r4, #12]
 8024752:	d106      	bne.n	8024762 <__sflush_r+0x66>
 8024754:	6829      	ldr	r1, [r5, #0]
 8024756:	291d      	cmp	r1, #29
 8024758:	d82c      	bhi.n	80247b4 <__sflush_r+0xb8>
 802475a:	4a29      	ldr	r2, [pc, #164]	; (8024800 <__sflush_r+0x104>)
 802475c:	40ca      	lsrs	r2, r1
 802475e:	07d6      	lsls	r6, r2, #31
 8024760:	d528      	bpl.n	80247b4 <__sflush_r+0xb8>
 8024762:	2200      	movs	r2, #0
 8024764:	04d9      	lsls	r1, r3, #19
 8024766:	6062      	str	r2, [r4, #4]
 8024768:	6922      	ldr	r2, [r4, #16]
 802476a:	6022      	str	r2, [r4, #0]
 802476c:	d504      	bpl.n	8024778 <__sflush_r+0x7c>
 802476e:	1c42      	adds	r2, r0, #1
 8024770:	d101      	bne.n	8024776 <__sflush_r+0x7a>
 8024772:	682b      	ldr	r3, [r5, #0]
 8024774:	b903      	cbnz	r3, 8024778 <__sflush_r+0x7c>
 8024776:	6560      	str	r0, [r4, #84]	; 0x54
 8024778:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802477a:	602f      	str	r7, [r5, #0]
 802477c:	2900      	cmp	r1, #0
 802477e:	d0ca      	beq.n	8024716 <__sflush_r+0x1a>
 8024780:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8024784:	4299      	cmp	r1, r3
 8024786:	d002      	beq.n	802478e <__sflush_r+0x92>
 8024788:	4628      	mov	r0, r5
 802478a:	f7ff fa57 	bl	8023c3c <_free_r>
 802478e:	2000      	movs	r0, #0
 8024790:	6360      	str	r0, [r4, #52]	; 0x34
 8024792:	e7c1      	b.n	8024718 <__sflush_r+0x1c>
 8024794:	6a21      	ldr	r1, [r4, #32]
 8024796:	2301      	movs	r3, #1
 8024798:	4628      	mov	r0, r5
 802479a:	47b0      	blx	r6
 802479c:	1c41      	adds	r1, r0, #1
 802479e:	d1c7      	bne.n	8024730 <__sflush_r+0x34>
 80247a0:	682b      	ldr	r3, [r5, #0]
 80247a2:	2b00      	cmp	r3, #0
 80247a4:	d0c4      	beq.n	8024730 <__sflush_r+0x34>
 80247a6:	2b1d      	cmp	r3, #29
 80247a8:	d001      	beq.n	80247ae <__sflush_r+0xb2>
 80247aa:	2b16      	cmp	r3, #22
 80247ac:	d101      	bne.n	80247b2 <__sflush_r+0xb6>
 80247ae:	602f      	str	r7, [r5, #0]
 80247b0:	e7b1      	b.n	8024716 <__sflush_r+0x1a>
 80247b2:	89a3      	ldrh	r3, [r4, #12]
 80247b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80247b8:	81a3      	strh	r3, [r4, #12]
 80247ba:	e7ad      	b.n	8024718 <__sflush_r+0x1c>
 80247bc:	690f      	ldr	r7, [r1, #16]
 80247be:	2f00      	cmp	r7, #0
 80247c0:	d0a9      	beq.n	8024716 <__sflush_r+0x1a>
 80247c2:	0793      	lsls	r3, r2, #30
 80247c4:	680e      	ldr	r6, [r1, #0]
 80247c6:	600f      	str	r7, [r1, #0]
 80247c8:	bf0c      	ite	eq
 80247ca:	694b      	ldreq	r3, [r1, #20]
 80247cc:	2300      	movne	r3, #0
 80247ce:	eba6 0807 	sub.w	r8, r6, r7
 80247d2:	608b      	str	r3, [r1, #8]
 80247d4:	f1b8 0f00 	cmp.w	r8, #0
 80247d8:	dd9d      	ble.n	8024716 <__sflush_r+0x1a>
 80247da:	4643      	mov	r3, r8
 80247dc:	463a      	mov	r2, r7
 80247de:	6a21      	ldr	r1, [r4, #32]
 80247e0:	4628      	mov	r0, r5
 80247e2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80247e4:	47b0      	blx	r6
 80247e6:	2800      	cmp	r0, #0
 80247e8:	dc06      	bgt.n	80247f8 <__sflush_r+0xfc>
 80247ea:	89a3      	ldrh	r3, [r4, #12]
 80247ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80247f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80247f4:	81a3      	strh	r3, [r4, #12]
 80247f6:	e78f      	b.n	8024718 <__sflush_r+0x1c>
 80247f8:	4407      	add	r7, r0
 80247fa:	eba8 0800 	sub.w	r8, r8, r0
 80247fe:	e7e9      	b.n	80247d4 <__sflush_r+0xd8>
 8024800:	20400001 	.word	0x20400001

08024804 <_fflush_r>:
 8024804:	b538      	push	{r3, r4, r5, lr}
 8024806:	690b      	ldr	r3, [r1, #16]
 8024808:	4605      	mov	r5, r0
 802480a:	460c      	mov	r4, r1
 802480c:	b913      	cbnz	r3, 8024814 <_fflush_r+0x10>
 802480e:	2500      	movs	r5, #0
 8024810:	4628      	mov	r0, r5
 8024812:	bd38      	pop	{r3, r4, r5, pc}
 8024814:	b118      	cbz	r0, 802481e <_fflush_r+0x1a>
 8024816:	6983      	ldr	r3, [r0, #24]
 8024818:	b90b      	cbnz	r3, 802481e <_fflush_r+0x1a>
 802481a:	f000 f887 	bl	802492c <__sinit>
 802481e:	4b14      	ldr	r3, [pc, #80]	; (8024870 <_fflush_r+0x6c>)
 8024820:	429c      	cmp	r4, r3
 8024822:	d11b      	bne.n	802485c <_fflush_r+0x58>
 8024824:	686c      	ldr	r4, [r5, #4]
 8024826:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802482a:	2b00      	cmp	r3, #0
 802482c:	d0ef      	beq.n	802480e <_fflush_r+0xa>
 802482e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8024830:	07d0      	lsls	r0, r2, #31
 8024832:	d404      	bmi.n	802483e <_fflush_r+0x3a>
 8024834:	0599      	lsls	r1, r3, #22
 8024836:	d402      	bmi.n	802483e <_fflush_r+0x3a>
 8024838:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802483a:	f7ff f9d6 	bl	8023bea <__retarget_lock_acquire_recursive>
 802483e:	4628      	mov	r0, r5
 8024840:	4621      	mov	r1, r4
 8024842:	f7ff ff5b 	bl	80246fc <__sflush_r>
 8024846:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8024848:	4605      	mov	r5, r0
 802484a:	07da      	lsls	r2, r3, #31
 802484c:	d4e0      	bmi.n	8024810 <_fflush_r+0xc>
 802484e:	89a3      	ldrh	r3, [r4, #12]
 8024850:	059b      	lsls	r3, r3, #22
 8024852:	d4dd      	bmi.n	8024810 <_fflush_r+0xc>
 8024854:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8024856:	f7ff f9c9 	bl	8023bec <__retarget_lock_release_recursive>
 802485a:	e7d9      	b.n	8024810 <_fflush_r+0xc>
 802485c:	4b05      	ldr	r3, [pc, #20]	; (8024874 <_fflush_r+0x70>)
 802485e:	429c      	cmp	r4, r3
 8024860:	d101      	bne.n	8024866 <_fflush_r+0x62>
 8024862:	68ac      	ldr	r4, [r5, #8]
 8024864:	e7df      	b.n	8024826 <_fflush_r+0x22>
 8024866:	4b04      	ldr	r3, [pc, #16]	; (8024878 <_fflush_r+0x74>)
 8024868:	429c      	cmp	r4, r3
 802486a:	bf08      	it	eq
 802486c:	68ec      	ldreq	r4, [r5, #12]
 802486e:	e7da      	b.n	8024826 <_fflush_r+0x22>
 8024870:	08035f4c 	.word	0x08035f4c
 8024874:	08035f6c 	.word	0x08035f6c
 8024878:	08035f2c 	.word	0x08035f2c

0802487c <std>:
 802487c:	2300      	movs	r3, #0
 802487e:	b510      	push	{r4, lr}
 8024880:	4604      	mov	r4, r0
 8024882:	6083      	str	r3, [r0, #8]
 8024884:	8181      	strh	r1, [r0, #12]
 8024886:	4619      	mov	r1, r3
 8024888:	6643      	str	r3, [r0, #100]	; 0x64
 802488a:	81c2      	strh	r2, [r0, #14]
 802488c:	2208      	movs	r2, #8
 802488e:	6183      	str	r3, [r0, #24]
 8024890:	e9c0 3300 	strd	r3, r3, [r0]
 8024894:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8024898:	305c      	adds	r0, #92	; 0x5c
 802489a:	f7ff f9c6 	bl	8023c2a <memset>
 802489e:	4b05      	ldr	r3, [pc, #20]	; (80248b4 <std+0x38>)
 80248a0:	6224      	str	r4, [r4, #32]
 80248a2:	6263      	str	r3, [r4, #36]	; 0x24
 80248a4:	4b04      	ldr	r3, [pc, #16]	; (80248b8 <std+0x3c>)
 80248a6:	62a3      	str	r3, [r4, #40]	; 0x28
 80248a8:	4b04      	ldr	r3, [pc, #16]	; (80248bc <std+0x40>)
 80248aa:	62e3      	str	r3, [r4, #44]	; 0x2c
 80248ac:	4b04      	ldr	r3, [pc, #16]	; (80248c0 <std+0x44>)
 80248ae:	6323      	str	r3, [r4, #48]	; 0x30
 80248b0:	bd10      	pop	{r4, pc}
 80248b2:	bf00      	nop
 80248b4:	08024bed 	.word	0x08024bed
 80248b8:	08024c0f 	.word	0x08024c0f
 80248bc:	08024c47 	.word	0x08024c47
 80248c0:	08024c6b 	.word	0x08024c6b

080248c4 <_cleanup_r>:
 80248c4:	4901      	ldr	r1, [pc, #4]	; (80248cc <_cleanup_r+0x8>)
 80248c6:	f000 b8af 	b.w	8024a28 <_fwalk_reent>
 80248ca:	bf00      	nop
 80248cc:	08024805 	.word	0x08024805

080248d0 <__sfmoreglue>:
 80248d0:	b570      	push	{r4, r5, r6, lr}
 80248d2:	2268      	movs	r2, #104	; 0x68
 80248d4:	1e4d      	subs	r5, r1, #1
 80248d6:	460e      	mov	r6, r1
 80248d8:	4355      	muls	r5, r2
 80248da:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80248de:	f7ff fa19 	bl	8023d14 <_malloc_r>
 80248e2:	4604      	mov	r4, r0
 80248e4:	b140      	cbz	r0, 80248f8 <__sfmoreglue+0x28>
 80248e6:	2100      	movs	r1, #0
 80248e8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80248ec:	e9c0 1600 	strd	r1, r6, [r0]
 80248f0:	300c      	adds	r0, #12
 80248f2:	60a0      	str	r0, [r4, #8]
 80248f4:	f7ff f999 	bl	8023c2a <memset>
 80248f8:	4620      	mov	r0, r4
 80248fa:	bd70      	pop	{r4, r5, r6, pc}

080248fc <__sfp_lock_acquire>:
 80248fc:	4801      	ldr	r0, [pc, #4]	; (8024904 <__sfp_lock_acquire+0x8>)
 80248fe:	f7ff b974 	b.w	8023bea <__retarget_lock_acquire_recursive>
 8024902:	bf00      	nop
 8024904:	2003ad01 	.word	0x2003ad01

08024908 <__sfp_lock_release>:
 8024908:	4801      	ldr	r0, [pc, #4]	; (8024910 <__sfp_lock_release+0x8>)
 802490a:	f7ff b96f 	b.w	8023bec <__retarget_lock_release_recursive>
 802490e:	bf00      	nop
 8024910:	2003ad01 	.word	0x2003ad01

08024914 <__sinit_lock_acquire>:
 8024914:	4801      	ldr	r0, [pc, #4]	; (802491c <__sinit_lock_acquire+0x8>)
 8024916:	f7ff b968 	b.w	8023bea <__retarget_lock_acquire_recursive>
 802491a:	bf00      	nop
 802491c:	2003ad02 	.word	0x2003ad02

08024920 <__sinit_lock_release>:
 8024920:	4801      	ldr	r0, [pc, #4]	; (8024928 <__sinit_lock_release+0x8>)
 8024922:	f7ff b963 	b.w	8023bec <__retarget_lock_release_recursive>
 8024926:	bf00      	nop
 8024928:	2003ad02 	.word	0x2003ad02

0802492c <__sinit>:
 802492c:	b510      	push	{r4, lr}
 802492e:	4604      	mov	r4, r0
 8024930:	f7ff fff0 	bl	8024914 <__sinit_lock_acquire>
 8024934:	69a3      	ldr	r3, [r4, #24]
 8024936:	b11b      	cbz	r3, 8024940 <__sinit+0x14>
 8024938:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802493c:	f7ff bff0 	b.w	8024920 <__sinit_lock_release>
 8024940:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8024944:	6523      	str	r3, [r4, #80]	; 0x50
 8024946:	4620      	mov	r0, r4
 8024948:	4b12      	ldr	r3, [pc, #72]	; (8024994 <__sinit+0x68>)
 802494a:	4a13      	ldr	r2, [pc, #76]	; (8024998 <__sinit+0x6c>)
 802494c:	681b      	ldr	r3, [r3, #0]
 802494e:	62a2      	str	r2, [r4, #40]	; 0x28
 8024950:	42a3      	cmp	r3, r4
 8024952:	bf04      	itt	eq
 8024954:	2301      	moveq	r3, #1
 8024956:	61a3      	streq	r3, [r4, #24]
 8024958:	f000 f820 	bl	802499c <__sfp>
 802495c:	6060      	str	r0, [r4, #4]
 802495e:	4620      	mov	r0, r4
 8024960:	f000 f81c 	bl	802499c <__sfp>
 8024964:	60a0      	str	r0, [r4, #8]
 8024966:	4620      	mov	r0, r4
 8024968:	f000 f818 	bl	802499c <__sfp>
 802496c:	2200      	movs	r2, #0
 802496e:	2104      	movs	r1, #4
 8024970:	60e0      	str	r0, [r4, #12]
 8024972:	6860      	ldr	r0, [r4, #4]
 8024974:	f7ff ff82 	bl	802487c <std>
 8024978:	2201      	movs	r2, #1
 802497a:	2109      	movs	r1, #9
 802497c:	68a0      	ldr	r0, [r4, #8]
 802497e:	f7ff ff7d 	bl	802487c <std>
 8024982:	2202      	movs	r2, #2
 8024984:	2112      	movs	r1, #18
 8024986:	68e0      	ldr	r0, [r4, #12]
 8024988:	f7ff ff78 	bl	802487c <std>
 802498c:	2301      	movs	r3, #1
 802498e:	61a3      	str	r3, [r4, #24]
 8024990:	e7d2      	b.n	8024938 <__sinit+0xc>
 8024992:	bf00      	nop
 8024994:	08035df4 	.word	0x08035df4
 8024998:	080248c5 	.word	0x080248c5

0802499c <__sfp>:
 802499c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802499e:	4607      	mov	r7, r0
 80249a0:	f7ff ffac 	bl	80248fc <__sfp_lock_acquire>
 80249a4:	4b1e      	ldr	r3, [pc, #120]	; (8024a20 <__sfp+0x84>)
 80249a6:	681e      	ldr	r6, [r3, #0]
 80249a8:	69b3      	ldr	r3, [r6, #24]
 80249aa:	b913      	cbnz	r3, 80249b2 <__sfp+0x16>
 80249ac:	4630      	mov	r0, r6
 80249ae:	f7ff ffbd 	bl	802492c <__sinit>
 80249b2:	3648      	adds	r6, #72	; 0x48
 80249b4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80249b8:	3b01      	subs	r3, #1
 80249ba:	d503      	bpl.n	80249c4 <__sfp+0x28>
 80249bc:	6833      	ldr	r3, [r6, #0]
 80249be:	b30b      	cbz	r3, 8024a04 <__sfp+0x68>
 80249c0:	6836      	ldr	r6, [r6, #0]
 80249c2:	e7f7      	b.n	80249b4 <__sfp+0x18>
 80249c4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80249c8:	b9d5      	cbnz	r5, 8024a00 <__sfp+0x64>
 80249ca:	4b16      	ldr	r3, [pc, #88]	; (8024a24 <__sfp+0x88>)
 80249cc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80249d0:	6665      	str	r5, [r4, #100]	; 0x64
 80249d2:	60e3      	str	r3, [r4, #12]
 80249d4:	f7ff f908 	bl	8023be8 <__retarget_lock_init_recursive>
 80249d8:	f7ff ff96 	bl	8024908 <__sfp_lock_release>
 80249dc:	2208      	movs	r2, #8
 80249de:	4629      	mov	r1, r5
 80249e0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80249e4:	6025      	str	r5, [r4, #0]
 80249e6:	61a5      	str	r5, [r4, #24]
 80249e8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80249ec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80249f0:	f7ff f91b 	bl	8023c2a <memset>
 80249f4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80249f8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80249fc:	4620      	mov	r0, r4
 80249fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8024a00:	3468      	adds	r4, #104	; 0x68
 8024a02:	e7d9      	b.n	80249b8 <__sfp+0x1c>
 8024a04:	2104      	movs	r1, #4
 8024a06:	4638      	mov	r0, r7
 8024a08:	f7ff ff62 	bl	80248d0 <__sfmoreglue>
 8024a0c:	4604      	mov	r4, r0
 8024a0e:	6030      	str	r0, [r6, #0]
 8024a10:	2800      	cmp	r0, #0
 8024a12:	d1d5      	bne.n	80249c0 <__sfp+0x24>
 8024a14:	f7ff ff78 	bl	8024908 <__sfp_lock_release>
 8024a18:	230c      	movs	r3, #12
 8024a1a:	603b      	str	r3, [r7, #0]
 8024a1c:	e7ee      	b.n	80249fc <__sfp+0x60>
 8024a1e:	bf00      	nop
 8024a20:	08035df4 	.word	0x08035df4
 8024a24:	ffff0001 	.word	0xffff0001

08024a28 <_fwalk_reent>:
 8024a28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8024a2c:	4606      	mov	r6, r0
 8024a2e:	4688      	mov	r8, r1
 8024a30:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8024a34:	2700      	movs	r7, #0
 8024a36:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8024a3a:	f1b9 0901 	subs.w	r9, r9, #1
 8024a3e:	d505      	bpl.n	8024a4c <_fwalk_reent+0x24>
 8024a40:	6824      	ldr	r4, [r4, #0]
 8024a42:	2c00      	cmp	r4, #0
 8024a44:	d1f7      	bne.n	8024a36 <_fwalk_reent+0xe>
 8024a46:	4638      	mov	r0, r7
 8024a48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8024a4c:	89ab      	ldrh	r3, [r5, #12]
 8024a4e:	2b01      	cmp	r3, #1
 8024a50:	d907      	bls.n	8024a62 <_fwalk_reent+0x3a>
 8024a52:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8024a56:	3301      	adds	r3, #1
 8024a58:	d003      	beq.n	8024a62 <_fwalk_reent+0x3a>
 8024a5a:	4629      	mov	r1, r5
 8024a5c:	4630      	mov	r0, r6
 8024a5e:	47c0      	blx	r8
 8024a60:	4307      	orrs	r7, r0
 8024a62:	3568      	adds	r5, #104	; 0x68
 8024a64:	e7e9      	b.n	8024a3a <_fwalk_reent+0x12>

08024a66 <__swhatbuf_r>:
 8024a66:	b570      	push	{r4, r5, r6, lr}
 8024a68:	460e      	mov	r6, r1
 8024a6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8024a6e:	b096      	sub	sp, #88	; 0x58
 8024a70:	4614      	mov	r4, r2
 8024a72:	2900      	cmp	r1, #0
 8024a74:	461d      	mov	r5, r3
 8024a76:	da08      	bge.n	8024a8a <__swhatbuf_r+0x24>
 8024a78:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8024a7c:	2200      	movs	r2, #0
 8024a7e:	602a      	str	r2, [r5, #0]
 8024a80:	061a      	lsls	r2, r3, #24
 8024a82:	d410      	bmi.n	8024aa6 <__swhatbuf_r+0x40>
 8024a84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8024a88:	e00e      	b.n	8024aa8 <__swhatbuf_r+0x42>
 8024a8a:	466a      	mov	r2, sp
 8024a8c:	f000 f914 	bl	8024cb8 <_fstat_r>
 8024a90:	2800      	cmp	r0, #0
 8024a92:	dbf1      	blt.n	8024a78 <__swhatbuf_r+0x12>
 8024a94:	9a01      	ldr	r2, [sp, #4]
 8024a96:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8024a9a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8024a9e:	425a      	negs	r2, r3
 8024aa0:	415a      	adcs	r2, r3
 8024aa2:	602a      	str	r2, [r5, #0]
 8024aa4:	e7ee      	b.n	8024a84 <__swhatbuf_r+0x1e>
 8024aa6:	2340      	movs	r3, #64	; 0x40
 8024aa8:	2000      	movs	r0, #0
 8024aaa:	6023      	str	r3, [r4, #0]
 8024aac:	b016      	add	sp, #88	; 0x58
 8024aae:	bd70      	pop	{r4, r5, r6, pc}

08024ab0 <__smakebuf_r>:
 8024ab0:	898b      	ldrh	r3, [r1, #12]
 8024ab2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8024ab4:	079d      	lsls	r5, r3, #30
 8024ab6:	4606      	mov	r6, r0
 8024ab8:	460c      	mov	r4, r1
 8024aba:	d507      	bpl.n	8024acc <__smakebuf_r+0x1c>
 8024abc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8024ac0:	6023      	str	r3, [r4, #0]
 8024ac2:	6123      	str	r3, [r4, #16]
 8024ac4:	2301      	movs	r3, #1
 8024ac6:	6163      	str	r3, [r4, #20]
 8024ac8:	b002      	add	sp, #8
 8024aca:	bd70      	pop	{r4, r5, r6, pc}
 8024acc:	ab01      	add	r3, sp, #4
 8024ace:	466a      	mov	r2, sp
 8024ad0:	f7ff ffc9 	bl	8024a66 <__swhatbuf_r>
 8024ad4:	9900      	ldr	r1, [sp, #0]
 8024ad6:	4605      	mov	r5, r0
 8024ad8:	4630      	mov	r0, r6
 8024ada:	f7ff f91b 	bl	8023d14 <_malloc_r>
 8024ade:	b948      	cbnz	r0, 8024af4 <__smakebuf_r+0x44>
 8024ae0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8024ae4:	059a      	lsls	r2, r3, #22
 8024ae6:	d4ef      	bmi.n	8024ac8 <__smakebuf_r+0x18>
 8024ae8:	f023 0303 	bic.w	r3, r3, #3
 8024aec:	f043 0302 	orr.w	r3, r3, #2
 8024af0:	81a3      	strh	r3, [r4, #12]
 8024af2:	e7e3      	b.n	8024abc <__smakebuf_r+0xc>
 8024af4:	4b0d      	ldr	r3, [pc, #52]	; (8024b2c <__smakebuf_r+0x7c>)
 8024af6:	62b3      	str	r3, [r6, #40]	; 0x28
 8024af8:	89a3      	ldrh	r3, [r4, #12]
 8024afa:	6020      	str	r0, [r4, #0]
 8024afc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8024b00:	6120      	str	r0, [r4, #16]
 8024b02:	81a3      	strh	r3, [r4, #12]
 8024b04:	9b00      	ldr	r3, [sp, #0]
 8024b06:	6163      	str	r3, [r4, #20]
 8024b08:	9b01      	ldr	r3, [sp, #4]
 8024b0a:	b15b      	cbz	r3, 8024b24 <__smakebuf_r+0x74>
 8024b0c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8024b10:	4630      	mov	r0, r6
 8024b12:	f000 f8e3 	bl	8024cdc <_isatty_r>
 8024b16:	b128      	cbz	r0, 8024b24 <__smakebuf_r+0x74>
 8024b18:	89a3      	ldrh	r3, [r4, #12]
 8024b1a:	f023 0303 	bic.w	r3, r3, #3
 8024b1e:	f043 0301 	orr.w	r3, r3, #1
 8024b22:	81a3      	strh	r3, [r4, #12]
 8024b24:	89a0      	ldrh	r0, [r4, #12]
 8024b26:	4305      	orrs	r5, r0
 8024b28:	81a5      	strh	r5, [r4, #12]
 8024b2a:	e7cd      	b.n	8024ac8 <__smakebuf_r+0x18>
 8024b2c:	080248c5 	.word	0x080248c5

08024b30 <memchr>:
 8024b30:	b2c9      	uxtb	r1, r1
 8024b32:	4402      	add	r2, r0
 8024b34:	b510      	push	{r4, lr}
 8024b36:	4290      	cmp	r0, r2
 8024b38:	4603      	mov	r3, r0
 8024b3a:	d101      	bne.n	8024b40 <memchr+0x10>
 8024b3c:	2300      	movs	r3, #0
 8024b3e:	e003      	b.n	8024b48 <memchr+0x18>
 8024b40:	781c      	ldrb	r4, [r3, #0]
 8024b42:	3001      	adds	r0, #1
 8024b44:	428c      	cmp	r4, r1
 8024b46:	d1f6      	bne.n	8024b36 <memchr+0x6>
 8024b48:	4618      	mov	r0, r3
 8024b4a:	bd10      	pop	{r4, pc}

08024b4c <__malloc_lock>:
 8024b4c:	4801      	ldr	r0, [pc, #4]	; (8024b54 <__malloc_lock+0x8>)
 8024b4e:	f7ff b84c 	b.w	8023bea <__retarget_lock_acquire_recursive>
 8024b52:	bf00      	nop
 8024b54:	2003ad00 	.word	0x2003ad00

08024b58 <__malloc_unlock>:
 8024b58:	4801      	ldr	r0, [pc, #4]	; (8024b60 <__malloc_unlock+0x8>)
 8024b5a:	f7ff b847 	b.w	8023bec <__retarget_lock_release_recursive>
 8024b5e:	bf00      	nop
 8024b60:	2003ad00 	.word	0x2003ad00

08024b64 <_raise_r>:
 8024b64:	291f      	cmp	r1, #31
 8024b66:	b538      	push	{r3, r4, r5, lr}
 8024b68:	4604      	mov	r4, r0
 8024b6a:	460d      	mov	r5, r1
 8024b6c:	d904      	bls.n	8024b78 <_raise_r+0x14>
 8024b6e:	2316      	movs	r3, #22
 8024b70:	6003      	str	r3, [r0, #0]
 8024b72:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8024b76:	bd38      	pop	{r3, r4, r5, pc}
 8024b78:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8024b7a:	b112      	cbz	r2, 8024b82 <_raise_r+0x1e>
 8024b7c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8024b80:	b94b      	cbnz	r3, 8024b96 <_raise_r+0x32>
 8024b82:	4620      	mov	r0, r4
 8024b84:	f000 f830 	bl	8024be8 <_getpid_r>
 8024b88:	462a      	mov	r2, r5
 8024b8a:	4601      	mov	r1, r0
 8024b8c:	4620      	mov	r0, r4
 8024b8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8024b92:	f000 b817 	b.w	8024bc4 <_kill_r>
 8024b96:	2b01      	cmp	r3, #1
 8024b98:	d00a      	beq.n	8024bb0 <_raise_r+0x4c>
 8024b9a:	1c59      	adds	r1, r3, #1
 8024b9c:	d103      	bne.n	8024ba6 <_raise_r+0x42>
 8024b9e:	2316      	movs	r3, #22
 8024ba0:	6003      	str	r3, [r0, #0]
 8024ba2:	2001      	movs	r0, #1
 8024ba4:	e7e7      	b.n	8024b76 <_raise_r+0x12>
 8024ba6:	2400      	movs	r4, #0
 8024ba8:	4628      	mov	r0, r5
 8024baa:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8024bae:	4798      	blx	r3
 8024bb0:	2000      	movs	r0, #0
 8024bb2:	e7e0      	b.n	8024b76 <_raise_r+0x12>

08024bb4 <raise>:
 8024bb4:	4b02      	ldr	r3, [pc, #8]	; (8024bc0 <raise+0xc>)
 8024bb6:	4601      	mov	r1, r0
 8024bb8:	6818      	ldr	r0, [r3, #0]
 8024bba:	f7ff bfd3 	b.w	8024b64 <_raise_r>
 8024bbe:	bf00      	nop
 8024bc0:	20000658 	.word	0x20000658

08024bc4 <_kill_r>:
 8024bc4:	b538      	push	{r3, r4, r5, lr}
 8024bc6:	2300      	movs	r3, #0
 8024bc8:	4d06      	ldr	r5, [pc, #24]	; (8024be4 <_kill_r+0x20>)
 8024bca:	4604      	mov	r4, r0
 8024bcc:	4608      	mov	r0, r1
 8024bce:	4611      	mov	r1, r2
 8024bd0:	602b      	str	r3, [r5, #0]
 8024bd2:	f7f1 f8c8 	bl	8015d66 <_kill>
 8024bd6:	1c43      	adds	r3, r0, #1
 8024bd8:	d102      	bne.n	8024be0 <_kill_r+0x1c>
 8024bda:	682b      	ldr	r3, [r5, #0]
 8024bdc:	b103      	cbz	r3, 8024be0 <_kill_r+0x1c>
 8024bde:	6023      	str	r3, [r4, #0]
 8024be0:	bd38      	pop	{r3, r4, r5, pc}
 8024be2:	bf00      	nop
 8024be4:	2003ad0c 	.word	0x2003ad0c

08024be8 <_getpid_r>:
 8024be8:	f7f1 b8b5 	b.w	8015d56 <_getpid>

08024bec <__sread>:
 8024bec:	b510      	push	{r4, lr}
 8024bee:	460c      	mov	r4, r1
 8024bf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8024bf4:	f000 f894 	bl	8024d20 <_read_r>
 8024bf8:	2800      	cmp	r0, #0
 8024bfa:	bfab      	itete	ge
 8024bfc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8024bfe:	89a3      	ldrhlt	r3, [r4, #12]
 8024c00:	181b      	addge	r3, r3, r0
 8024c02:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8024c06:	bfac      	ite	ge
 8024c08:	6563      	strge	r3, [r4, #84]	; 0x54
 8024c0a:	81a3      	strhlt	r3, [r4, #12]
 8024c0c:	bd10      	pop	{r4, pc}

08024c0e <__swrite>:
 8024c0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024c12:	461f      	mov	r7, r3
 8024c14:	898b      	ldrh	r3, [r1, #12]
 8024c16:	4605      	mov	r5, r0
 8024c18:	460c      	mov	r4, r1
 8024c1a:	05db      	lsls	r3, r3, #23
 8024c1c:	4616      	mov	r6, r2
 8024c1e:	d505      	bpl.n	8024c2c <__swrite+0x1e>
 8024c20:	2302      	movs	r3, #2
 8024c22:	2200      	movs	r2, #0
 8024c24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8024c28:	f000 f868 	bl	8024cfc <_lseek_r>
 8024c2c:	89a3      	ldrh	r3, [r4, #12]
 8024c2e:	4632      	mov	r2, r6
 8024c30:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8024c34:	4628      	mov	r0, r5
 8024c36:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8024c3a:	81a3      	strh	r3, [r4, #12]
 8024c3c:	463b      	mov	r3, r7
 8024c3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8024c42:	f000 b817 	b.w	8024c74 <_write_r>

08024c46 <__sseek>:
 8024c46:	b510      	push	{r4, lr}
 8024c48:	460c      	mov	r4, r1
 8024c4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8024c4e:	f000 f855 	bl	8024cfc <_lseek_r>
 8024c52:	1c43      	adds	r3, r0, #1
 8024c54:	89a3      	ldrh	r3, [r4, #12]
 8024c56:	bf15      	itete	ne
 8024c58:	6560      	strne	r0, [r4, #84]	; 0x54
 8024c5a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8024c5e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8024c62:	81a3      	strheq	r3, [r4, #12]
 8024c64:	bf18      	it	ne
 8024c66:	81a3      	strhne	r3, [r4, #12]
 8024c68:	bd10      	pop	{r4, pc}

08024c6a <__sclose>:
 8024c6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8024c6e:	f000 b813 	b.w	8024c98 <_close_r>
	...

08024c74 <_write_r>:
 8024c74:	b538      	push	{r3, r4, r5, lr}
 8024c76:	4604      	mov	r4, r0
 8024c78:	4d06      	ldr	r5, [pc, #24]	; (8024c94 <_write_r+0x20>)
 8024c7a:	4608      	mov	r0, r1
 8024c7c:	4611      	mov	r1, r2
 8024c7e:	2200      	movs	r2, #0
 8024c80:	602a      	str	r2, [r5, #0]
 8024c82:	461a      	mov	r2, r3
 8024c84:	f7f1 f8a6 	bl	8015dd4 <_write>
 8024c88:	1c43      	adds	r3, r0, #1
 8024c8a:	d102      	bne.n	8024c92 <_write_r+0x1e>
 8024c8c:	682b      	ldr	r3, [r5, #0]
 8024c8e:	b103      	cbz	r3, 8024c92 <_write_r+0x1e>
 8024c90:	6023      	str	r3, [r4, #0]
 8024c92:	bd38      	pop	{r3, r4, r5, pc}
 8024c94:	2003ad0c 	.word	0x2003ad0c

08024c98 <_close_r>:
 8024c98:	b538      	push	{r3, r4, r5, lr}
 8024c9a:	2300      	movs	r3, #0
 8024c9c:	4d05      	ldr	r5, [pc, #20]	; (8024cb4 <_close_r+0x1c>)
 8024c9e:	4604      	mov	r4, r0
 8024ca0:	4608      	mov	r0, r1
 8024ca2:	602b      	str	r3, [r5, #0]
 8024ca4:	f7f1 f8ca 	bl	8015e3c <_close>
 8024ca8:	1c43      	adds	r3, r0, #1
 8024caa:	d102      	bne.n	8024cb2 <_close_r+0x1a>
 8024cac:	682b      	ldr	r3, [r5, #0]
 8024cae:	b103      	cbz	r3, 8024cb2 <_close_r+0x1a>
 8024cb0:	6023      	str	r3, [r4, #0]
 8024cb2:	bd38      	pop	{r3, r4, r5, pc}
 8024cb4:	2003ad0c 	.word	0x2003ad0c

08024cb8 <_fstat_r>:
 8024cb8:	b538      	push	{r3, r4, r5, lr}
 8024cba:	2300      	movs	r3, #0
 8024cbc:	4d06      	ldr	r5, [pc, #24]	; (8024cd8 <_fstat_r+0x20>)
 8024cbe:	4604      	mov	r4, r0
 8024cc0:	4608      	mov	r0, r1
 8024cc2:	4611      	mov	r1, r2
 8024cc4:	602b      	str	r3, [r5, #0]
 8024cc6:	f7f1 f8c5 	bl	8015e54 <_fstat>
 8024cca:	1c43      	adds	r3, r0, #1
 8024ccc:	d102      	bne.n	8024cd4 <_fstat_r+0x1c>
 8024cce:	682b      	ldr	r3, [r5, #0]
 8024cd0:	b103      	cbz	r3, 8024cd4 <_fstat_r+0x1c>
 8024cd2:	6023      	str	r3, [r4, #0]
 8024cd4:	bd38      	pop	{r3, r4, r5, pc}
 8024cd6:	bf00      	nop
 8024cd8:	2003ad0c 	.word	0x2003ad0c

08024cdc <_isatty_r>:
 8024cdc:	b538      	push	{r3, r4, r5, lr}
 8024cde:	2300      	movs	r3, #0
 8024ce0:	4d05      	ldr	r5, [pc, #20]	; (8024cf8 <_isatty_r+0x1c>)
 8024ce2:	4604      	mov	r4, r0
 8024ce4:	4608      	mov	r0, r1
 8024ce6:	602b      	str	r3, [r5, #0]
 8024ce8:	f7f1 f8c4 	bl	8015e74 <_isatty>
 8024cec:	1c43      	adds	r3, r0, #1
 8024cee:	d102      	bne.n	8024cf6 <_isatty_r+0x1a>
 8024cf0:	682b      	ldr	r3, [r5, #0]
 8024cf2:	b103      	cbz	r3, 8024cf6 <_isatty_r+0x1a>
 8024cf4:	6023      	str	r3, [r4, #0]
 8024cf6:	bd38      	pop	{r3, r4, r5, pc}
 8024cf8:	2003ad0c 	.word	0x2003ad0c

08024cfc <_lseek_r>:
 8024cfc:	b538      	push	{r3, r4, r5, lr}
 8024cfe:	4604      	mov	r4, r0
 8024d00:	4d06      	ldr	r5, [pc, #24]	; (8024d1c <_lseek_r+0x20>)
 8024d02:	4608      	mov	r0, r1
 8024d04:	4611      	mov	r1, r2
 8024d06:	2200      	movs	r2, #0
 8024d08:	602a      	str	r2, [r5, #0]
 8024d0a:	461a      	mov	r2, r3
 8024d0c:	f7f1 f8bd 	bl	8015e8a <_lseek>
 8024d10:	1c43      	adds	r3, r0, #1
 8024d12:	d102      	bne.n	8024d1a <_lseek_r+0x1e>
 8024d14:	682b      	ldr	r3, [r5, #0]
 8024d16:	b103      	cbz	r3, 8024d1a <_lseek_r+0x1e>
 8024d18:	6023      	str	r3, [r4, #0]
 8024d1a:	bd38      	pop	{r3, r4, r5, pc}
 8024d1c:	2003ad0c 	.word	0x2003ad0c

08024d20 <_read_r>:
 8024d20:	b538      	push	{r3, r4, r5, lr}
 8024d22:	4604      	mov	r4, r0
 8024d24:	4d06      	ldr	r5, [pc, #24]	; (8024d40 <_read_r+0x20>)
 8024d26:	4608      	mov	r0, r1
 8024d28:	4611      	mov	r1, r2
 8024d2a:	2200      	movs	r2, #0
 8024d2c:	602a      	str	r2, [r5, #0]
 8024d2e:	461a      	mov	r2, r3
 8024d30:	f7f1 f833 	bl	8015d9a <_read>
 8024d34:	1c43      	adds	r3, r0, #1
 8024d36:	d102      	bne.n	8024d3e <_read_r+0x1e>
 8024d38:	682b      	ldr	r3, [r5, #0]
 8024d3a:	b103      	cbz	r3, 8024d3e <_read_r+0x1e>
 8024d3c:	6023      	str	r3, [r4, #0]
 8024d3e:	bd38      	pop	{r3, r4, r5, pc}
 8024d40:	2003ad0c 	.word	0x2003ad0c

08024d44 <tanhf>:
 8024d44:	b510      	push	{r4, lr}
 8024d46:	ee10 4a10 	vmov	r4, s0
 8024d4a:	eeb0 7a40 	vmov.f32	s14, s0
 8024d4e:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8024d52:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8024d56:	ed2d 8b02 	vpush	{d8}
 8024d5a:	db0c      	blt.n	8024d76 <tanhf+0x32>
 8024d5c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8024d60:	2c00      	cmp	r4, #0
 8024d62:	eec0 7a07 	vdiv.f32	s15, s0, s14
 8024d66:	bfac      	ite	ge
 8024d68:	ee37 0a80 	vaddge.f32	s0, s15, s0
 8024d6c:	ee37 0ac0 	vsublt.f32	s0, s15, s0
 8024d70:	ecbd 8b02 	vpop	{d8}
 8024d74:	bd10      	pop	{r4, pc}
 8024d76:	4a1b      	ldr	r2, [pc, #108]	; (8024de4 <tanhf+0xa0>)
 8024d78:	4293      	cmp	r3, r2
 8024d7a:	dc30      	bgt.n	8024dde <tanhf+0x9a>
 8024d7c:	f1b3 5f10 	cmp.w	r3, #603979776	; 0x24000000
 8024d80:	da06      	bge.n	8024d90 <tanhf+0x4c>
 8024d82:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8024d86:	ee70 7a27 	vadd.f32	s15, s0, s15
 8024d8a:	ee27 0a80 	vmul.f32	s0, s15, s0
 8024d8e:	e7ef      	b.n	8024d70 <tanhf+0x2c>
 8024d90:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8024d94:	eeb0 8a00 	vmov.f32	s16, #0	; 0x40000000  2.0
 8024d98:	db12      	blt.n	8024dc0 <tanhf+0x7c>
 8024d9a:	f000 fdad 	bl	80258f8 <fabsf>
 8024d9e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8024da2:	f000 fc91 	bl	80256c8 <expm1f>
 8024da6:	ee30 0a08 	vadd.f32	s0, s0, s16
 8024daa:	eec8 7a00 	vdiv.f32	s15, s16, s0
 8024dae:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8024db2:	ee30 0a67 	vsub.f32	s0, s0, s15
 8024db6:	2c00      	cmp	r4, #0
 8024db8:	bfb8      	it	lt
 8024dba:	eeb1 0a40 	vneglt.f32	s0, s0
 8024dbe:	e7d7      	b.n	8024d70 <tanhf+0x2c>
 8024dc0:	f000 fd9a 	bl	80258f8 <fabsf>
 8024dc4:	eef8 7a00 	vmov.f32	s15, #128	; 0xc0000000 -2.0
 8024dc8:	ee20 0a27 	vmul.f32	s0, s0, s15
 8024dcc:	f000 fc7c 	bl	80256c8 <expm1f>
 8024dd0:	eeb1 7a40 	vneg.f32	s14, s0
 8024dd4:	ee70 7a08 	vadd.f32	s15, s0, s16
 8024dd8:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8024ddc:	e7eb      	b.n	8024db6 <tanhf+0x72>
 8024dde:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8024de2:	e7e8      	b.n	8024db6 <tanhf+0x72>
 8024de4:	41afffff 	.word	0x41afffff

08024de8 <expf>:
 8024de8:	b508      	push	{r3, lr}
 8024dea:	ed2d 8b02 	vpush	{d8}
 8024dee:	eef0 8a40 	vmov.f32	s17, s0
 8024df2:	f000 f8a5 	bl	8024f40 <__ieee754_expf>
 8024df6:	eeb0 8a40 	vmov.f32	s16, s0
 8024dfa:	eeb0 0a68 	vmov.f32	s0, s17
 8024dfe:	f000 fd82 	bl	8025906 <finitef>
 8024e02:	b160      	cbz	r0, 8024e1e <expf+0x36>
 8024e04:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8024e44 <expf+0x5c>
 8024e08:	eef4 8ae7 	vcmpe.f32	s17, s15
 8024e0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024e10:	dd0a      	ble.n	8024e28 <expf+0x40>
 8024e12:	f7fe fe3f 	bl	8023a94 <__errno>
 8024e16:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 8024e48 <expf+0x60>
 8024e1a:	2322      	movs	r3, #34	; 0x22
 8024e1c:	6003      	str	r3, [r0, #0]
 8024e1e:	eeb0 0a48 	vmov.f32	s0, s16
 8024e22:	ecbd 8b02 	vpop	{d8}
 8024e26:	bd08      	pop	{r3, pc}
 8024e28:	eddf 7a08 	vldr	s15, [pc, #32]	; 8024e4c <expf+0x64>
 8024e2c:	eef4 8ae7 	vcmpe.f32	s17, s15
 8024e30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024e34:	d5f3      	bpl.n	8024e1e <expf+0x36>
 8024e36:	f7fe fe2d 	bl	8023a94 <__errno>
 8024e3a:	2322      	movs	r3, #34	; 0x22
 8024e3c:	ed9f 8a04 	vldr	s16, [pc, #16]	; 8024e50 <expf+0x68>
 8024e40:	6003      	str	r3, [r0, #0]
 8024e42:	e7ec      	b.n	8024e1e <expf+0x36>
 8024e44:	42b17180 	.word	0x42b17180
 8024e48:	7f800000 	.word	0x7f800000
 8024e4c:	c2cff1b5 	.word	0xc2cff1b5
 8024e50:	00000000 	.word	0x00000000

08024e54 <powf>:
 8024e54:	b508      	push	{r3, lr}
 8024e56:	ed2d 8b04 	vpush	{d8-d9}
 8024e5a:	eeb0 8a60 	vmov.f32	s16, s1
 8024e5e:	eeb0 9a40 	vmov.f32	s18, s0
 8024e62:	f000 f93b 	bl	80250dc <__ieee754_powf>
 8024e66:	eef0 8a40 	vmov.f32	s17, s0
 8024e6a:	eeb4 8a48 	vcmp.f32	s16, s16
 8024e6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024e72:	d63e      	bvs.n	8024ef2 <powf+0x9e>
 8024e74:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8024e78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024e7c:	d112      	bne.n	8024ea4 <powf+0x50>
 8024e7e:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8024e82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024e86:	d039      	beq.n	8024efc <powf+0xa8>
 8024e88:	eeb0 0a48 	vmov.f32	s0, s16
 8024e8c:	f000 fd3b 	bl	8025906 <finitef>
 8024e90:	b378      	cbz	r0, 8024ef2 <powf+0x9e>
 8024e92:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8024e96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024e9a:	d52a      	bpl.n	8024ef2 <powf+0x9e>
 8024e9c:	f7fe fdfa 	bl	8023a94 <__errno>
 8024ea0:	2322      	movs	r3, #34	; 0x22
 8024ea2:	e014      	b.n	8024ece <powf+0x7a>
 8024ea4:	f000 fd2f 	bl	8025906 <finitef>
 8024ea8:	b998      	cbnz	r0, 8024ed2 <powf+0x7e>
 8024eaa:	eeb0 0a49 	vmov.f32	s0, s18
 8024eae:	f000 fd2a 	bl	8025906 <finitef>
 8024eb2:	b170      	cbz	r0, 8024ed2 <powf+0x7e>
 8024eb4:	eeb0 0a48 	vmov.f32	s0, s16
 8024eb8:	f000 fd25 	bl	8025906 <finitef>
 8024ebc:	b148      	cbz	r0, 8024ed2 <powf+0x7e>
 8024ebe:	eef4 8a68 	vcmp.f32	s17, s17
 8024ec2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024ec6:	d7e9      	bvc.n	8024e9c <powf+0x48>
 8024ec8:	f7fe fde4 	bl	8023a94 <__errno>
 8024ecc:	2321      	movs	r3, #33	; 0x21
 8024ece:	6003      	str	r3, [r0, #0]
 8024ed0:	e00f      	b.n	8024ef2 <powf+0x9e>
 8024ed2:	eef5 8a40 	vcmp.f32	s17, #0.0
 8024ed6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024eda:	d10a      	bne.n	8024ef2 <powf+0x9e>
 8024edc:	eeb0 0a49 	vmov.f32	s0, s18
 8024ee0:	f000 fd11 	bl	8025906 <finitef>
 8024ee4:	b128      	cbz	r0, 8024ef2 <powf+0x9e>
 8024ee6:	eeb0 0a48 	vmov.f32	s0, s16
 8024eea:	f000 fd0c 	bl	8025906 <finitef>
 8024eee:	2800      	cmp	r0, #0
 8024ef0:	d1d4      	bne.n	8024e9c <powf+0x48>
 8024ef2:	eeb0 0a68 	vmov.f32	s0, s17
 8024ef6:	ecbd 8b04 	vpop	{d8-d9}
 8024efa:	bd08      	pop	{r3, pc}
 8024efc:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8024f00:	e7f7      	b.n	8024ef2 <powf+0x9e>
	...

08024f04 <sqrtf>:
 8024f04:	b508      	push	{r3, lr}
 8024f06:	ed2d 8b02 	vpush	{d8}
 8024f0a:	eeb0 8a40 	vmov.f32	s16, s0
 8024f0e:	f000 fbb5 	bl	802567c <__ieee754_sqrtf>
 8024f12:	eeb4 8a48 	vcmp.f32	s16, s16
 8024f16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024f1a:	d60c      	bvs.n	8024f36 <sqrtf+0x32>
 8024f1c:	eddf 8a07 	vldr	s17, [pc, #28]	; 8024f3c <sqrtf+0x38>
 8024f20:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8024f24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024f28:	d505      	bpl.n	8024f36 <sqrtf+0x32>
 8024f2a:	f7fe fdb3 	bl	8023a94 <__errno>
 8024f2e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8024f32:	2321      	movs	r3, #33	; 0x21
 8024f34:	6003      	str	r3, [r0, #0]
 8024f36:	ecbd 8b02 	vpop	{d8}
 8024f3a:	bd08      	pop	{r3, pc}
 8024f3c:	00000000 	.word	0x00000000

08024f40 <__ieee754_expf>:
 8024f40:	ee10 2a10 	vmov	r2, s0
 8024f44:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8024f48:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8024f4c:	d902      	bls.n	8024f54 <__ieee754_expf+0x14>
 8024f4e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8024f52:	4770      	bx	lr
 8024f54:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 8024f58:	d105      	bne.n	8024f66 <__ieee754_expf+0x26>
 8024f5a:	2b00      	cmp	r3, #0
 8024f5c:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8025094 <__ieee754_expf+0x154>
 8024f60:	fe00 0a27 	vseleq.f32	s0, s0, s15
 8024f64:	4770      	bx	lr
 8024f66:	484c      	ldr	r0, [pc, #304]	; (8025098 <__ieee754_expf+0x158>)
 8024f68:	4282      	cmp	r2, r0
 8024f6a:	dd02      	ble.n	8024f72 <__ieee754_expf+0x32>
 8024f6c:	2000      	movs	r0, #0
 8024f6e:	f000 bba5 	b.w	80256bc <__math_oflowf>
 8024f72:	2a00      	cmp	r2, #0
 8024f74:	da05      	bge.n	8024f82 <__ieee754_expf+0x42>
 8024f76:	4a49      	ldr	r2, [pc, #292]	; (802509c <__ieee754_expf+0x15c>)
 8024f78:	4291      	cmp	r1, r2
 8024f7a:	d902      	bls.n	8024f82 <__ieee754_expf+0x42>
 8024f7c:	2000      	movs	r0, #0
 8024f7e:	f000 bb97 	b.w	80256b0 <__math_uflowf>
 8024f82:	4a47      	ldr	r2, [pc, #284]	; (80250a0 <__ieee754_expf+0x160>)
 8024f84:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8024f88:	4291      	cmp	r1, r2
 8024f8a:	d952      	bls.n	8025032 <__ieee754_expf+0xf2>
 8024f8c:	4a45      	ldr	r2, [pc, #276]	; (80250a4 <__ieee754_expf+0x164>)
 8024f8e:	4291      	cmp	r1, r2
 8024f90:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8024f94:	d834      	bhi.n	8025000 <__ieee754_expf+0xc0>
 8024f96:	4944      	ldr	r1, [pc, #272]	; (80250a8 <__ieee754_expf+0x168>)
 8024f98:	4411      	add	r1, r2
 8024f9a:	ed91 7a00 	vldr	s14, [r1]
 8024f9e:	4943      	ldr	r1, [pc, #268]	; (80250ac <__ieee754_expf+0x16c>)
 8024fa0:	ee30 7a47 	vsub.f32	s14, s0, s14
 8024fa4:	440a      	add	r2, r1
 8024fa6:	edd2 7a00 	vldr	s15, [r2]
 8024faa:	f1c3 0201 	rsb	r2, r3, #1
 8024fae:	1ad2      	subs	r2, r2, r3
 8024fb0:	ee37 0a67 	vsub.f32	s0, s14, s15
 8024fb4:	ee20 6a00 	vmul.f32	s12, s0, s0
 8024fb8:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 80250b0 <__ieee754_expf+0x170>
 8024fbc:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80250b4 <__ieee754_expf+0x174>
 8024fc0:	eee6 6a05 	vfma.f32	s13, s12, s10
 8024fc4:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 80250b8 <__ieee754_expf+0x178>
 8024fc8:	eea6 5a86 	vfma.f32	s10, s13, s12
 8024fcc:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80250bc <__ieee754_expf+0x17c>
 8024fd0:	eee5 6a06 	vfma.f32	s13, s10, s12
 8024fd4:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 80250c0 <__ieee754_expf+0x180>
 8024fd8:	eea6 5a86 	vfma.f32	s10, s13, s12
 8024fdc:	eef0 6a40 	vmov.f32	s13, s0
 8024fe0:	eee5 6a46 	vfms.f32	s13, s10, s12
 8024fe4:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8024fe8:	ee20 5a26 	vmul.f32	s10, s0, s13
 8024fec:	bb92      	cbnz	r2, 8025054 <__ieee754_expf+0x114>
 8024fee:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8024ff2:	eec5 7a26 	vdiv.f32	s15, s10, s13
 8024ff6:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8024ffa:	ee35 0ac0 	vsub.f32	s0, s11, s0
 8024ffe:	4770      	bx	lr
 8025000:	4b30      	ldr	r3, [pc, #192]	; (80250c4 <__ieee754_expf+0x184>)
 8025002:	ed9f 7a31 	vldr	s14, [pc, #196]	; 80250c8 <__ieee754_expf+0x188>
 8025006:	4413      	add	r3, r2
 8025008:	eddf 6a30 	vldr	s13, [pc, #192]	; 80250cc <__ieee754_expf+0x18c>
 802500c:	edd3 7a00 	vldr	s15, [r3]
 8025010:	eee0 7a07 	vfma.f32	s15, s0, s14
 8025014:	eeb0 7a40 	vmov.f32	s14, s0
 8025018:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802501c:	ee17 2a90 	vmov	r2, s15
 8025020:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8025024:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8025028:	eddf 6a29 	vldr	s13, [pc, #164]	; 80250d0 <__ieee754_expf+0x190>
 802502c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8025030:	e7be      	b.n	8024fb0 <__ieee754_expf+0x70>
 8025032:	f1b1 5f50 	cmp.w	r1, #872415232	; 0x34000000
 8025036:	d20b      	bcs.n	8025050 <__ieee754_expf+0x110>
 8025038:	eddf 6a26 	vldr	s13, [pc, #152]	; 80250d4 <__ieee754_expf+0x194>
 802503c:	ee70 6a26 	vadd.f32	s13, s0, s13
 8025040:	eef4 6ae5 	vcmpe.f32	s13, s11
 8025044:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025048:	dd02      	ble.n	8025050 <__ieee754_expf+0x110>
 802504a:	ee30 0a25 	vadd.f32	s0, s0, s11
 802504e:	4770      	bx	lr
 8025050:	2200      	movs	r2, #0
 8025052:	e7af      	b.n	8024fb4 <__ieee754_expf+0x74>
 8025054:	ee76 6a66 	vsub.f32	s13, s12, s13
 8025058:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 802505c:	bfb8      	it	lt
 802505e:	3264      	addlt	r2, #100	; 0x64
 8025060:	ee85 0a26 	vdiv.f32	s0, s10, s13
 8025064:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8025068:	ee37 0ac7 	vsub.f32	s0, s15, s14
 802506c:	ee75 7ac0 	vsub.f32	s15, s11, s0
 8025070:	ee17 3a90 	vmov	r3, s15
 8025074:	bfb5      	itete	lt
 8025076:	eddf 7a18 	vldrlt	s15, [pc, #96]	; 80250d8 <__ieee754_expf+0x198>
 802507a:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 802507e:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 8025082:	ee00 3a10 	vmovge	s0, r3
 8025086:	bfbc      	itt	lt
 8025088:	ee00 3a10 	vmovlt	s0, r3
 802508c:	ee20 0a27 	vmullt.f32	s0, s0, s15
 8025090:	4770      	bx	lr
 8025092:	bf00      	nop
 8025094:	00000000 	.word	0x00000000
 8025098:	42b17217 	.word	0x42b17217
 802509c:	42cff1b5 	.word	0x42cff1b5
 80250a0:	3eb17218 	.word	0x3eb17218
 80250a4:	3f851591 	.word	0x3f851591
 80250a8:	08035f94 	.word	0x08035f94
 80250ac:	08035f9c 	.word	0x08035f9c
 80250b0:	3331bb4c 	.word	0x3331bb4c
 80250b4:	b5ddea0e 	.word	0xb5ddea0e
 80250b8:	388ab355 	.word	0x388ab355
 80250bc:	bb360b61 	.word	0xbb360b61
 80250c0:	3e2aaaab 	.word	0x3e2aaaab
 80250c4:	08035f8c 	.word	0x08035f8c
 80250c8:	3fb8aa3b 	.word	0x3fb8aa3b
 80250cc:	3f317180 	.word	0x3f317180
 80250d0:	3717f7d1 	.word	0x3717f7d1
 80250d4:	7149f2ca 	.word	0x7149f2ca
 80250d8:	0d800000 	.word	0x0d800000

080250dc <__ieee754_powf>:
 80250dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80250e0:	ee10 4a90 	vmov	r4, s1
 80250e4:	ee10 6a10 	vmov	r6, s0
 80250e8:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 80250ec:	ed2d 8b02 	vpush	{d8}
 80250f0:	eeb0 8a40 	vmov.f32	s16, s0
 80250f4:	eef0 8a60 	vmov.f32	s17, s1
 80250f8:	d10c      	bne.n	8025114 <__ieee754_powf+0x38>
 80250fa:	f486 0680 	eor.w	r6, r6, #4194304	; 0x400000
 80250fe:	0076      	lsls	r6, r6, #1
 8025100:	f516 0f00 	cmn.w	r6, #8388608	; 0x800000
 8025104:	f240 8298 	bls.w	8025638 <__ieee754_powf+0x55c>
 8025108:	ee38 0a28 	vadd.f32	s0, s16, s17
 802510c:	ecbd 8b02 	vpop	{d8}
 8025110:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8025114:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8025118:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 802511c:	dcf4      	bgt.n	8025108 <__ieee754_powf+0x2c>
 802511e:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 8025122:	dd08      	ble.n	8025136 <__ieee754_powf+0x5a>
 8025124:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 8025128:	d1ee      	bne.n	8025108 <__ieee754_powf+0x2c>
 802512a:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 802512e:	0064      	lsls	r4, r4, #1
 8025130:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 8025134:	e7e6      	b.n	8025104 <__ieee754_powf+0x28>
 8025136:	2e00      	cmp	r6, #0
 8025138:	da20      	bge.n	802517c <__ieee754_powf+0xa0>
 802513a:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 802513e:	da2c      	bge.n	802519a <__ieee754_powf+0xbe>
 8025140:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 8025144:	f2c0 8281 	blt.w	802564a <__ieee754_powf+0x56e>
 8025148:	ea4f 53e8 	mov.w	r3, r8, asr #23
 802514c:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8025150:	fa48 f703 	asr.w	r7, r8, r3
 8025154:	fa07 f303 	lsl.w	r3, r7, r3
 8025158:	4543      	cmp	r3, r8
 802515a:	f040 8276 	bne.w	802564a <__ieee754_powf+0x56e>
 802515e:	f007 0701 	and.w	r7, r7, #1
 8025162:	f1c7 0702 	rsb	r7, r7, #2
 8025166:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 802516a:	d11e      	bne.n	80251aa <__ieee754_powf+0xce>
 802516c:	2c00      	cmp	r4, #0
 802516e:	f280 8269 	bge.w	8025644 <__ieee754_powf+0x568>
 8025172:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8025176:	ee87 0a88 	vdiv.f32	s0, s15, s16
 802517a:	e7c7      	b.n	802510c <__ieee754_powf+0x30>
 802517c:	2700      	movs	r7, #0
 802517e:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 8025182:	d1f0      	bne.n	8025166 <__ieee754_powf+0x8a>
 8025184:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 8025188:	f000 8256 	beq.w	8025638 <__ieee754_powf+0x55c>
 802518c:	dd07      	ble.n	802519e <__ieee754_powf+0xc2>
 802518e:	2c00      	cmp	r4, #0
 8025190:	ed9f 0ac0 	vldr	s0, [pc, #768]	; 8025494 <__ieee754_powf+0x3b8>
 8025194:	fe28 0a80 	vselge.f32	s0, s17, s0
 8025198:	e7b8      	b.n	802510c <__ieee754_powf+0x30>
 802519a:	2702      	movs	r7, #2
 802519c:	e7ef      	b.n	802517e <__ieee754_powf+0xa2>
 802519e:	2c00      	cmp	r4, #0
 80251a0:	f280 824d 	bge.w	802563e <__ieee754_powf+0x562>
 80251a4:	eeb1 0a68 	vneg.f32	s0, s17
 80251a8:	e7b0      	b.n	802510c <__ieee754_powf+0x30>
 80251aa:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 80251ae:	d102      	bne.n	80251b6 <__ieee754_powf+0xda>
 80251b0:	ee28 0a08 	vmul.f32	s0, s16, s16
 80251b4:	e7aa      	b.n	802510c <__ieee754_powf+0x30>
 80251b6:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 80251ba:	eeb0 0a48 	vmov.f32	s0, s16
 80251be:	d107      	bne.n	80251d0 <__ieee754_powf+0xf4>
 80251c0:	2e00      	cmp	r6, #0
 80251c2:	db05      	blt.n	80251d0 <__ieee754_powf+0xf4>
 80251c4:	ecbd 8b02 	vpop	{d8}
 80251c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80251cc:	f000 ba56 	b.w	802567c <__ieee754_sqrtf>
 80251d0:	f000 fb92 	bl	80258f8 <fabsf>
 80251d4:	b125      	cbz	r5, 80251e0 <__ieee754_powf+0x104>
 80251d6:	f026 4340 	bic.w	r3, r6, #3221225472	; 0xc0000000
 80251da:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 80251de:	d116      	bne.n	802520e <__ieee754_powf+0x132>
 80251e0:	2c00      	cmp	r4, #0
 80251e2:	bfbc      	itt	lt
 80251e4:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 80251e8:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 80251ec:	2e00      	cmp	r6, #0
 80251ee:	da8d      	bge.n	802510c <__ieee754_powf+0x30>
 80251f0:	f1a5 557e 	sub.w	r5, r5, #1065353216	; 0x3f800000
 80251f4:	ea55 0307 	orrs.w	r3, r5, r7
 80251f8:	d104      	bne.n	8025204 <__ieee754_powf+0x128>
 80251fa:	ee70 7a40 	vsub.f32	s15, s0, s0
 80251fe:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8025202:	e783      	b.n	802510c <__ieee754_powf+0x30>
 8025204:	2f01      	cmp	r7, #1
 8025206:	d181      	bne.n	802510c <__ieee754_powf+0x30>
 8025208:	eeb1 0a40 	vneg.f32	s0, s0
 802520c:	e77e      	b.n	802510c <__ieee754_powf+0x30>
 802520e:	0ff0      	lsrs	r0, r6, #31
 8025210:	3801      	subs	r0, #1
 8025212:	ea57 0300 	orrs.w	r3, r7, r0
 8025216:	d104      	bne.n	8025222 <__ieee754_powf+0x146>
 8025218:	ee38 8a48 	vsub.f32	s16, s16, s16
 802521c:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8025220:	e774      	b.n	802510c <__ieee754_powf+0x30>
 8025222:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 8025226:	dd73      	ble.n	8025310 <__ieee754_powf+0x234>
 8025228:	4b9b      	ldr	r3, [pc, #620]	; (8025498 <__ieee754_powf+0x3bc>)
 802522a:	429d      	cmp	r5, r3
 802522c:	dc08      	bgt.n	8025240 <__ieee754_powf+0x164>
 802522e:	2c00      	cmp	r4, #0
 8025230:	da0b      	bge.n	802524a <__ieee754_powf+0x16e>
 8025232:	2000      	movs	r0, #0
 8025234:	ecbd 8b02 	vpop	{d8}
 8025238:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802523c:	f000 ba3e 	b.w	80256bc <__math_oflowf>
 8025240:	4b96      	ldr	r3, [pc, #600]	; (802549c <__ieee754_powf+0x3c0>)
 8025242:	429d      	cmp	r5, r3
 8025244:	dd08      	ble.n	8025258 <__ieee754_powf+0x17c>
 8025246:	2c00      	cmp	r4, #0
 8025248:	dcf3      	bgt.n	8025232 <__ieee754_powf+0x156>
 802524a:	2000      	movs	r0, #0
 802524c:	ecbd 8b02 	vpop	{d8}
 8025250:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8025254:	f000 ba2c 	b.w	80256b0 <__math_uflowf>
 8025258:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 802525c:	eddf 6a90 	vldr	s13, [pc, #576]	; 80254a0 <__ieee754_powf+0x3c4>
 8025260:	ee30 0a67 	vsub.f32	s0, s0, s15
 8025264:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8025268:	ee20 7a00 	vmul.f32	s14, s0, s0
 802526c:	eee0 6a67 	vfms.f32	s13, s0, s15
 8025270:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8025274:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8025278:	ee67 7a27 	vmul.f32	s15, s14, s15
 802527c:	ed9f 7a89 	vldr	s14, [pc, #548]	; 80254a4 <__ieee754_powf+0x3c8>
 8025280:	ee67 7a67 	vnmul.f32	s15, s14, s15
 8025284:	ed9f 7a88 	vldr	s14, [pc, #544]	; 80254a8 <__ieee754_powf+0x3cc>
 8025288:	eee0 7a07 	vfma.f32	s15, s0, s14
 802528c:	ed9f 7a87 	vldr	s14, [pc, #540]	; 80254ac <__ieee754_powf+0x3d0>
 8025290:	eef0 6a67 	vmov.f32	s13, s15
 8025294:	eee0 6a07 	vfma.f32	s13, s0, s14
 8025298:	ee16 3a90 	vmov	r3, s13
 802529c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80252a0:	f023 030f 	bic.w	r3, r3, #15
 80252a4:	ee00 3a90 	vmov	s1, r3
 80252a8:	eee0 0a47 	vfms.f32	s1, s0, s14
 80252ac:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80252b0:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 80252b4:	ee67 0aa8 	vmul.f32	s1, s15, s17
 80252b8:	ee07 3a90 	vmov	s15, r3
 80252bc:	3f01      	subs	r7, #1
 80252be:	f024 040f 	bic.w	r4, r4, #15
 80252c2:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 80252c6:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 80252ca:	ea57 0200 	orrs.w	r2, r7, r0
 80252ce:	ee07 4a10 	vmov	s14, r4
 80252d2:	ee38 7ac7 	vsub.f32	s14, s17, s14
 80252d6:	fe00 8a08 	vseleq.f32	s16, s0, s16
 80252da:	eee7 0a27 	vfma.f32	s1, s14, s15
 80252de:	ee07 4a10 	vmov	s14, r4
 80252e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80252e6:	ee30 7aa7 	vadd.f32	s14, s1, s15
 80252ea:	ee17 4a10 	vmov	r4, s14
 80252ee:	2c00      	cmp	r4, #0
 80252f0:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80252f4:	f340 8182 	ble.w	80255fc <__ieee754_powf+0x520>
 80252f8:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 80252fc:	f340 80f8 	ble.w	80254f0 <__ieee754_powf+0x414>
 8025300:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8025304:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025308:	bf4c      	ite	mi
 802530a:	2001      	movmi	r0, #1
 802530c:	2000      	movpl	r0, #0
 802530e:	e791      	b.n	8025234 <__ieee754_powf+0x158>
 8025310:	f016 4fff 	tst.w	r6, #2139095040	; 0x7f800000
 8025314:	bf05      	ittet	eq
 8025316:	eddf 7a66 	vldreq	s15, [pc, #408]	; 80254b0 <__ieee754_powf+0x3d4>
 802531a:	f06f 0217 	mvneq.w	r2, #23
 802531e:	2200      	movne	r2, #0
 8025320:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8025324:	bf08      	it	eq
 8025326:	ee17 5a90 	vmoveq	r5, s15
 802532a:	15eb      	asrs	r3, r5, #23
 802532c:	f3c5 0516 	ubfx	r5, r5, #0, #23
 8025330:	3b7f      	subs	r3, #127	; 0x7f
 8025332:	f045 517e 	orr.w	r1, r5, #1065353216	; 0x3f800000
 8025336:	4413      	add	r3, r2
 8025338:	4a5e      	ldr	r2, [pc, #376]	; (80254b4 <__ieee754_powf+0x3d8>)
 802533a:	4295      	cmp	r5, r2
 802533c:	dd06      	ble.n	802534c <__ieee754_powf+0x270>
 802533e:	4a5e      	ldr	r2, [pc, #376]	; (80254b8 <__ieee754_powf+0x3dc>)
 8025340:	4295      	cmp	r5, r2
 8025342:	f340 80a4 	ble.w	802548e <__ieee754_powf+0x3b2>
 8025346:	3301      	adds	r3, #1
 8025348:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 802534c:	2500      	movs	r5, #0
 802534e:	4a5b      	ldr	r2, [pc, #364]	; (80254bc <__ieee754_powf+0x3e0>)
 8025350:	ee07 1a90 	vmov	s15, r1
 8025354:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8025358:	1049      	asrs	r1, r1, #1
 802535a:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 802535e:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8025362:	ed92 7a00 	vldr	s14, [r2]
 8025366:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 802536a:	4a55      	ldr	r2, [pc, #340]	; (80254c0 <__ieee754_powf+0x3e4>)
 802536c:	ee37 6a27 	vadd.f32	s12, s14, s15
 8025370:	ee37 5ac7 	vsub.f32	s10, s15, s14
 8025374:	eb01 5145 	add.w	r1, r1, r5, lsl #21
 8025378:	eec5 6a86 	vdiv.f32	s13, s11, s12
 802537c:	ee06 1a10 	vmov	s12, r1
 8025380:	ee36 7a47 	vsub.f32	s14, s12, s14
 8025384:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8025388:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 80254c4 <__ieee754_powf+0x3e8>
 802538c:	ee65 4a26 	vmul.f32	s9, s10, s13
 8025390:	ee14 6a90 	vmov	r6, s9
 8025394:	4016      	ands	r6, r2
 8025396:	ee05 6a90 	vmov	s11, r6
 802539a:	eea5 5ac6 	vfms.f32	s10, s11, s12
 802539e:	eea5 5ae7 	vfms.f32	s10, s11, s15
 80253a2:	ee64 7aa4 	vmul.f32	s15, s9, s9
 80253a6:	ee25 6a26 	vmul.f32	s12, s10, s13
 80253aa:	eddf 6a47 	vldr	s13, [pc, #284]	; 80254c8 <__ieee754_powf+0x3ec>
 80253ae:	ee27 5aa7 	vmul.f32	s10, s15, s15
 80253b2:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80253b6:	eddf 6a45 	vldr	s13, [pc, #276]	; 80254cc <__ieee754_powf+0x3f0>
 80253ba:	eee7 6a27 	vfma.f32	s13, s14, s15
 80253be:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80254a0 <__ieee754_powf+0x3c4>
 80253c2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80253c6:	eddf 6a42 	vldr	s13, [pc, #264]	; 80254d0 <__ieee754_powf+0x3f4>
 80253ca:	eee7 6a27 	vfma.f32	s13, s14, s15
 80253ce:	ed9f 7a41 	vldr	s14, [pc, #260]	; 80254d4 <__ieee754_powf+0x3f8>
 80253d2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80253d6:	ee74 6aa5 	vadd.f32	s13, s9, s11
 80253da:	ee66 6a86 	vmul.f32	s13, s13, s12
 80253de:	eee5 6a07 	vfma.f32	s13, s10, s14
 80253e2:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 80253e6:	eef0 7a45 	vmov.f32	s15, s10
 80253ea:	eee5 7aa5 	vfma.f32	s15, s11, s11
 80253ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80253f2:	ee17 1a90 	vmov	r1, s15
 80253f6:	4011      	ands	r1, r2
 80253f8:	ee07 1a90 	vmov	s15, r1
 80253fc:	ee37 7ac5 	vsub.f32	s14, s15, s10
 8025400:	eea5 7ae5 	vfms.f32	s14, s11, s11
 8025404:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8025408:	ee27 7a24 	vmul.f32	s14, s14, s9
 802540c:	eea6 7a27 	vfma.f32	s14, s12, s15
 8025410:	eeb0 6a47 	vmov.f32	s12, s14
 8025414:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8025418:	ee16 1a10 	vmov	r1, s12
 802541c:	4011      	ands	r1, r2
 802541e:	ee06 1a90 	vmov	s13, r1
 8025422:	ee06 1a10 	vmov	s12, r1
 8025426:	492c      	ldr	r1, [pc, #176]	; (80254d8 <__ieee754_powf+0x3fc>)
 8025428:	eee5 6ae7 	vfms.f32	s13, s11, s15
 802542c:	eddf 7a2b 	vldr	s15, [pc, #172]	; 80254dc <__ieee754_powf+0x400>
 8025430:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 8025434:	eddf 5a2a 	vldr	s11, [pc, #168]	; 80254e0 <__ieee754_powf+0x404>
 8025438:	ee37 7a66 	vsub.f32	s14, s14, s13
 802543c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8025440:	eddf 7a28 	vldr	s15, [pc, #160]	; 80254e4 <__ieee754_powf+0x408>
 8025444:	eea6 7a27 	vfma.f32	s14, s12, s15
 8025448:	edd1 7a00 	vldr	s15, [r1]
 802544c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8025450:	ee07 3a90 	vmov	s15, r3
 8025454:	4b24      	ldr	r3, [pc, #144]	; (80254e8 <__ieee754_powf+0x40c>)
 8025456:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 802545a:	eef0 7a47 	vmov.f32	s15, s14
 802545e:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8025462:	edd5 0a00 	vldr	s1, [r5]
 8025466:	eee6 7a25 	vfma.f32	s15, s12, s11
 802546a:	ee77 7aa0 	vadd.f32	s15, s15, s1
 802546e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8025472:	ee17 3a90 	vmov	r3, s15
 8025476:	4013      	ands	r3, r2
 8025478:	ee07 3a90 	vmov	s15, r3
 802547c:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8025480:	ee76 6ae0 	vsub.f32	s13, s13, s1
 8025484:	eee6 6a65 	vfms.f32	s13, s12, s11
 8025488:	ee77 7a66 	vsub.f32	s15, s14, s13
 802548c:	e710      	b.n	80252b0 <__ieee754_powf+0x1d4>
 802548e:	2501      	movs	r5, #1
 8025490:	e75d      	b.n	802534e <__ieee754_powf+0x272>
 8025492:	bf00      	nop
 8025494:	00000000 	.word	0x00000000
 8025498:	3f7ffff3 	.word	0x3f7ffff3
 802549c:	3f800007 	.word	0x3f800007
 80254a0:	3eaaaaab 	.word	0x3eaaaaab
 80254a4:	3fb8aa3b 	.word	0x3fb8aa3b
 80254a8:	36eca570 	.word	0x36eca570
 80254ac:	3fb8aa00 	.word	0x3fb8aa00
 80254b0:	4b800000 	.word	0x4b800000
 80254b4:	001cc471 	.word	0x001cc471
 80254b8:	005db3d6 	.word	0x005db3d6
 80254bc:	08035fa4 	.word	0x08035fa4
 80254c0:	fffff000 	.word	0xfffff000
 80254c4:	3e6c3255 	.word	0x3e6c3255
 80254c8:	3e53f142 	.word	0x3e53f142
 80254cc:	3e8ba305 	.word	0x3e8ba305
 80254d0:	3edb6db7 	.word	0x3edb6db7
 80254d4:	3f19999a 	.word	0x3f19999a
 80254d8:	08035fb4 	.word	0x08035fb4
 80254dc:	3f76384f 	.word	0x3f76384f
 80254e0:	3f763800 	.word	0x3f763800
 80254e4:	369dc3a0 	.word	0x369dc3a0
 80254e8:	08035fac 	.word	0x08035fac
 80254ec:	3338aa3c 	.word	0x3338aa3c
 80254f0:	f040 8099 	bne.w	8025626 <__ieee754_powf+0x54a>
 80254f4:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 80254ec <__ieee754_powf+0x410>
 80254f8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80254fc:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8025500:	eef4 6ac7 	vcmpe.f32	s13, s14
 8025504:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025508:	f73f aefa 	bgt.w	8025300 <__ieee754_powf+0x224>
 802550c:	15db      	asrs	r3, r3, #23
 802550e:	4950      	ldr	r1, [pc, #320]	; (8025650 <__ieee754_powf+0x574>)
 8025510:	2c00      	cmp	r4, #0
 8025512:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 8025516:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 802551a:	fa43 f300 	asr.w	r3, r3, r0
 802551e:	4423      	add	r3, r4
 8025520:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8025524:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8025528:	f1a2 027f 	sub.w	r2, r2, #127	; 0x7f
 802552c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8025530:	fa41 f102 	asr.w	r1, r1, r2
 8025534:	f1c2 0217 	rsb	r2, r2, #23
 8025538:	ea23 0101 	bic.w	r1, r3, r1
 802553c:	fa40 f002 	asr.w	r0, r0, r2
 8025540:	ee07 1a10 	vmov	s14, r1
 8025544:	bfb8      	it	lt
 8025546:	4240      	neglt	r0, r0
 8025548:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802554c:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8025550:	ed9f 0a40 	vldr	s0, [pc, #256]	; 8025654 <__ieee754_powf+0x578>
 8025554:	eddf 6a40 	vldr	s13, [pc, #256]	; 8025658 <__ieee754_powf+0x57c>
 8025558:	ee17 3a10 	vmov	r3, s14
 802555c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8025560:	f023 030f 	bic.w	r3, r3, #15
 8025564:	ee07 3a10 	vmov	s14, r3
 8025568:	ee77 7a67 	vsub.f32	s15, s14, s15
 802556c:	ee27 0a00 	vmul.f32	s0, s14, s0
 8025570:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8025574:	eddf 7a39 	vldr	s15, [pc, #228]	; 802565c <__ieee754_powf+0x580>
 8025578:	eea0 0aa7 	vfma.f32	s0, s1, s15
 802557c:	eef0 7a40 	vmov.f32	s15, s0
 8025580:	eee7 7a26 	vfma.f32	s15, s14, s13
 8025584:	eeb0 6a67 	vmov.f32	s12, s15
 8025588:	eea7 6a66 	vfms.f32	s12, s14, s13
 802558c:	eddf 6a34 	vldr	s13, [pc, #208]	; 8025660 <__ieee754_powf+0x584>
 8025590:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8025594:	ee30 0a46 	vsub.f32	s0, s0, s12
 8025598:	ed9f 6a32 	vldr	s12, [pc, #200]	; 8025664 <__ieee754_powf+0x588>
 802559c:	eee7 6a06 	vfma.f32	s13, s14, s12
 80255a0:	ed9f 6a31 	vldr	s12, [pc, #196]	; 8025668 <__ieee754_powf+0x58c>
 80255a4:	eea7 0a80 	vfma.f32	s0, s15, s0
 80255a8:	eea6 6a87 	vfma.f32	s12, s13, s14
 80255ac:	eddf 6a2f 	vldr	s13, [pc, #188]	; 802566c <__ieee754_powf+0x590>
 80255b0:	eee6 6a07 	vfma.f32	s13, s12, s14
 80255b4:	ed9f 6a2e 	vldr	s12, [pc, #184]	; 8025670 <__ieee754_powf+0x594>
 80255b8:	eea6 6a87 	vfma.f32	s12, s13, s14
 80255bc:	eef0 6a67 	vmov.f32	s13, s15
 80255c0:	eee6 6a47 	vfms.f32	s13, s12, s14
 80255c4:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80255c8:	ee27 6aa6 	vmul.f32	s12, s15, s13
 80255cc:	ee76 6ac7 	vsub.f32	s13, s13, s14
 80255d0:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80255d4:	ee37 0a40 	vsub.f32	s0, s14, s0
 80255d8:	ee70 7a67 	vsub.f32	s15, s0, s15
 80255dc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80255e0:	ee30 0a67 	vsub.f32	s0, s0, s15
 80255e4:	ee10 3a10 	vmov	r3, s0
 80255e8:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 80255ec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80255f0:	da1f      	bge.n	8025632 <__ieee754_powf+0x556>
 80255f2:	f000 f995 	bl	8025920 <scalbnf>
 80255f6:	ee20 0a08 	vmul.f32	s0, s0, s16
 80255fa:	e587      	b.n	802510c <__ieee754_powf+0x30>
 80255fc:	4a1d      	ldr	r2, [pc, #116]	; (8025674 <__ieee754_powf+0x598>)
 80255fe:	4293      	cmp	r3, r2
 8025600:	dd07      	ble.n	8025612 <__ieee754_powf+0x536>
 8025602:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8025606:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802560a:	bf4c      	ite	mi
 802560c:	2001      	movmi	r0, #1
 802560e:	2000      	movpl	r0, #0
 8025610:	e61c      	b.n	802524c <__ieee754_powf+0x170>
 8025612:	d108      	bne.n	8025626 <__ieee754_powf+0x54a>
 8025614:	ee37 7a67 	vsub.f32	s14, s14, s15
 8025618:	eeb4 7ae0 	vcmpe.f32	s14, s1
 802561c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025620:	f6ff af74 	blt.w	802550c <__ieee754_powf+0x430>
 8025624:	e7ed      	b.n	8025602 <__ieee754_powf+0x526>
 8025626:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 802562a:	f73f af6f 	bgt.w	802550c <__ieee754_powf+0x430>
 802562e:	2000      	movs	r0, #0
 8025630:	e78c      	b.n	802554c <__ieee754_powf+0x470>
 8025632:	ee00 3a10 	vmov	s0, r3
 8025636:	e7de      	b.n	80255f6 <__ieee754_powf+0x51a>
 8025638:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 802563c:	e566      	b.n	802510c <__ieee754_powf+0x30>
 802563e:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8025678 <__ieee754_powf+0x59c>
 8025642:	e563      	b.n	802510c <__ieee754_powf+0x30>
 8025644:	eeb0 0a48 	vmov.f32	s0, s16
 8025648:	e560      	b.n	802510c <__ieee754_powf+0x30>
 802564a:	2700      	movs	r7, #0
 802564c:	e58b      	b.n	8025166 <__ieee754_powf+0x8a>
 802564e:	bf00      	nop
 8025650:	007fffff 	.word	0x007fffff
 8025654:	35bfbe8c 	.word	0x35bfbe8c
 8025658:	3f317200 	.word	0x3f317200
 802565c:	3f317218 	.word	0x3f317218
 8025660:	b5ddea0e 	.word	0xb5ddea0e
 8025664:	3331bb4c 	.word	0x3331bb4c
 8025668:	388ab355 	.word	0x388ab355
 802566c:	bb360b61 	.word	0xbb360b61
 8025670:	3e2aaaab 	.word	0x3e2aaaab
 8025674:	43160000 	.word	0x43160000
 8025678:	00000000 	.word	0x00000000

0802567c <__ieee754_sqrtf>:
 802567c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8025680:	4770      	bx	lr

08025682 <with_errnof>:
 8025682:	b513      	push	{r0, r1, r4, lr}
 8025684:	4604      	mov	r4, r0
 8025686:	ed8d 0a01 	vstr	s0, [sp, #4]
 802568a:	f7fe fa03 	bl	8023a94 <__errno>
 802568e:	ed9d 0a01 	vldr	s0, [sp, #4]
 8025692:	6004      	str	r4, [r0, #0]
 8025694:	b002      	add	sp, #8
 8025696:	bd10      	pop	{r4, pc}

08025698 <xflowf>:
 8025698:	b130      	cbz	r0, 80256a8 <xflowf+0x10>
 802569a:	eef1 7a40 	vneg.f32	s15, s0
 802569e:	ee27 0a80 	vmul.f32	s0, s15, s0
 80256a2:	2022      	movs	r0, #34	; 0x22
 80256a4:	f7ff bfed 	b.w	8025682 <with_errnof>
 80256a8:	eef0 7a40 	vmov.f32	s15, s0
 80256ac:	e7f7      	b.n	802569e <xflowf+0x6>
	...

080256b0 <__math_uflowf>:
 80256b0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80256b8 <__math_uflowf+0x8>
 80256b4:	f7ff bff0 	b.w	8025698 <xflowf>
 80256b8:	10000000 	.word	0x10000000

080256bc <__math_oflowf>:
 80256bc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80256c4 <__math_oflowf+0x8>
 80256c0:	f7ff bfea 	b.w	8025698 <xflowf>
 80256c4:	70000000 	.word	0x70000000

080256c8 <expm1f>:
 80256c8:	ee10 2a10 	vmov	r2, s0
 80256cc:	497b      	ldr	r1, [pc, #492]	; (80258bc <expm1f+0x1f4>)
 80256ce:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 80256d2:	428b      	cmp	r3, r1
 80256d4:	d920      	bls.n	8025718 <expm1f+0x50>
 80256d6:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80256da:	d902      	bls.n	80256e2 <expm1f+0x1a>
 80256dc:	ee30 0a00 	vadd.f32	s0, s0, s0
 80256e0:	4770      	bx	lr
 80256e2:	d105      	bne.n	80256f0 <expm1f+0x28>
 80256e4:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 80256e8:	2a00      	cmp	r2, #0
 80256ea:	fe20 0a27 	vselge.f32	s0, s0, s15
 80256ee:	4770      	bx	lr
 80256f0:	2a00      	cmp	r2, #0
 80256f2:	db05      	blt.n	8025700 <expm1f+0x38>
 80256f4:	4972      	ldr	r1, [pc, #456]	; (80258c0 <expm1f+0x1f8>)
 80256f6:	428b      	cmp	r3, r1
 80256f8:	d95c      	bls.n	80257b4 <expm1f+0xec>
 80256fa:	2000      	movs	r0, #0
 80256fc:	f7ff bfde 	b.w	80256bc <__math_oflowf>
 8025700:	eddf 7a70 	vldr	s15, [pc, #448]	; 80258c4 <expm1f+0x1fc>
 8025704:	ee70 7a27 	vadd.f32	s15, s0, s15
 8025708:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 802570c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025710:	d550      	bpl.n	80257b4 <expm1f+0xec>
 8025712:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8025716:	4770      	bx	lr
 8025718:	496b      	ldr	r1, [pc, #428]	; (80258c8 <expm1f+0x200>)
 802571a:	428b      	cmp	r3, r1
 802571c:	d966      	bls.n	80257ec <expm1f+0x124>
 802571e:	496b      	ldr	r1, [pc, #428]	; (80258cc <expm1f+0x204>)
 8025720:	428b      	cmp	r3, r1
 8025722:	d847      	bhi.n	80257b4 <expm1f+0xec>
 8025724:	2a00      	cmp	r2, #0
 8025726:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 80258d0 <expm1f+0x208>
 802572a:	bfa5      	ittet	ge
 802572c:	ee30 7a47 	vsubge.f32	s14, s0, s14
 8025730:	2301      	movge	r3, #1
 8025732:	ee30 7a07 	vaddlt.f32	s14, s0, s14
 8025736:	eddf 7a67 	vldrge	s15, [pc, #412]	; 80258d4 <expm1f+0x20c>
 802573a:	bfbc      	itt	lt
 802573c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8025740:	eddf 7a65 	vldrlt	s15, [pc, #404]	; 80258d8 <expm1f+0x210>
 8025744:	ee37 0a67 	vsub.f32	s0, s14, s15
 8025748:	ee37 7a40 	vsub.f32	s14, s14, s0
 802574c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8025750:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8025754:	ed9f 6a61 	vldr	s12, [pc, #388]	; 80258dc <expm1f+0x214>
 8025758:	eddf 6a61 	vldr	s13, [pc, #388]	; 80258e0 <expm1f+0x218>
 802575c:	eef0 4a08 	vmov.f32	s9, #8	; 0x40400000  3.0
 8025760:	ed9f 5a60 	vldr	s10, [pc, #384]	; 80258e4 <expm1f+0x21c>
 8025764:	ee20 4a25 	vmul.f32	s8, s0, s11
 8025768:	ee20 7a04 	vmul.f32	s14, s0, s8
 802576c:	eee7 6a06 	vfma.f32	s13, s14, s12
 8025770:	ed9f 6a5d 	vldr	s12, [pc, #372]	; 80258e8 <expm1f+0x220>
 8025774:	eea6 6a87 	vfma.f32	s12, s13, s14
 8025778:	eddf 6a5c 	vldr	s13, [pc, #368]	; 80258ec <expm1f+0x224>
 802577c:	eee6 6a07 	vfma.f32	s13, s12, s14
 8025780:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8025784:	eea6 5a87 	vfma.f32	s10, s13, s14
 8025788:	eef0 6a46 	vmov.f32	s13, s12
 802578c:	eee5 6a07 	vfma.f32	s13, s10, s14
 8025790:	eee4 4a66 	vfms.f32	s9, s8, s13
 8025794:	eeb1 4a08 	vmov.f32	s8, #24	; 0x40c00000  6.0
 8025798:	eea0 4a64 	vfms.f32	s8, s0, s9
 802579c:	ee36 5ae4 	vsub.f32	s10, s13, s9
 80257a0:	eec5 6a04 	vdiv.f32	s13, s10, s8
 80257a4:	ee66 6a87 	vmul.f32	s13, s13, s14
 80257a8:	bb73      	cbnz	r3, 8025808 <expm1f+0x140>
 80257aa:	eef0 7a47 	vmov.f32	s15, s14
 80257ae:	eed0 7a26 	vfnms.f32	s15, s0, s13
 80257b2:	e024      	b.n	80257fe <expm1f+0x136>
 80257b4:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 80257b8:	2a00      	cmp	r2, #0
 80257ba:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80257be:	eddf 6a44 	vldr	s13, [pc, #272]	; 80258d0 <expm1f+0x208>
 80257c2:	fe67 7a87 	vselge.f32	s15, s15, s14
 80257c6:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 80258f0 <expm1f+0x228>
 80257ca:	ee40 7a07 	vmla.f32	s15, s0, s14
 80257ce:	eeb0 7a40 	vmov.f32	s14, s0
 80257d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80257d6:	ee17 3a90 	vmov	r3, s15
 80257da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80257de:	eea7 7ae6 	vfms.f32	s14, s15, s13
 80257e2:	eddf 6a3c 	vldr	s13, [pc, #240]	; 80258d4 <expm1f+0x20c>
 80257e6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80257ea:	e7ab      	b.n	8025744 <expm1f+0x7c>
 80257ec:	f1b3 5f4c 	cmp.w	r3, #855638016	; 0x33000000
 80257f0:	d208      	bcs.n	8025804 <expm1f+0x13c>
 80257f2:	eddf 7a40 	vldr	s15, [pc, #256]	; 80258f4 <expm1f+0x22c>
 80257f6:	ee70 7a27 	vadd.f32	s15, s0, s15
 80257fa:	ee77 7ae7 	vsub.f32	s15, s15, s15
 80257fe:	ee30 0a67 	vsub.f32	s0, s0, s15
 8025802:	4770      	bx	lr
 8025804:	2300      	movs	r3, #0
 8025806:	e7a3      	b.n	8025750 <expm1f+0x88>
 8025808:	ee76 6ae7 	vsub.f32	s13, s13, s15
 802580c:	1c5a      	adds	r2, r3, #1
 802580e:	eed6 7a80 	vfnms.f32	s15, s13, s0
 8025812:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8025816:	d106      	bne.n	8025826 <expm1f+0x15e>
 8025818:	ee70 7a67 	vsub.f32	s15, s0, s15
 802581c:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 8025820:	eea7 0aa5 	vfma.f32	s0, s15, s11
 8025824:	4770      	bx	lr
 8025826:	2b01      	cmp	r3, #1
 8025828:	d118      	bne.n	802585c <expm1f+0x194>
 802582a:	eebd 7a00 	vmov.f32	s14, #208	; 0xbe800000 -0.250
 802582e:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8025832:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025836:	bf5b      	ittet	pl
 8025838:	ee70 7a67 	vsubpl.f32	s15, s0, s15
 802583c:	eeb0 7a00 	vmovpl.f32	s14, #0	; 0x40000000  2.0
 8025840:	ee30 0a25 	vaddmi.f32	s0, s0, s11
 8025844:	eea7 6a87 	vfmapl.f32	s12, s15, s14
 8025848:	bf43      	ittte	mi
 802584a:	ee77 7ac0 	vsubmi.f32	s15, s15, s0
 802584e:	eeb8 0a00 	vmovmi.f32	s0, #128	; 0xc0000000 -2.0
 8025852:	ee27 0a80 	vmulmi.f32	s0, s15, s0
 8025856:	eeb0 0a46 	vmovpl.f32	s0, s12
 802585a:	4770      	bx	lr
 802585c:	1c5a      	adds	r2, r3, #1
 802585e:	05d9      	lsls	r1, r3, #23
 8025860:	2a39      	cmp	r2, #57	; 0x39
 8025862:	d90b      	bls.n	802587c <expm1f+0x1b4>
 8025864:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8025868:	ee36 0a40 	vsub.f32	s0, s12, s0
 802586c:	ee10 3a10 	vmov	r3, s0
 8025870:	440b      	add	r3, r1
 8025872:	ee00 3a10 	vmov	s0, r3
 8025876:	ee30 0a46 	vsub.f32	s0, s0, s12
 802587a:	4770      	bx	lr
 802587c:	2b16      	cmp	r3, #22
 802587e:	dc11      	bgt.n	80258a4 <expm1f+0x1dc>
 8025880:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8025884:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8025888:	fa42 f303 	asr.w	r3, r2, r3
 802588c:	f1c3 537e 	rsb	r3, r3, #1065353216	; 0x3f800000
 8025890:	ee07 3a90 	vmov	s15, r3
 8025894:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8025898:	ee10 3a10 	vmov	r3, s0
 802589c:	440b      	add	r3, r1
 802589e:	ee00 3a10 	vmov	s0, r3
 80258a2:	4770      	bx	lr
 80258a4:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 80258a8:	05db      	lsls	r3, r3, #23
 80258aa:	ee07 3a10 	vmov	s14, r3
 80258ae:	ee77 7a87 	vadd.f32	s15, s15, s14
 80258b2:	ee70 7a67 	vsub.f32	s15, s0, s15
 80258b6:	ee37 0a86 	vadd.f32	s0, s15, s12
 80258ba:	e7ed      	b.n	8025898 <expm1f+0x1d0>
 80258bc:	4195b843 	.word	0x4195b843
 80258c0:	42b17217 	.word	0x42b17217
 80258c4:	0da24260 	.word	0x0da24260
 80258c8:	3eb17218 	.word	0x3eb17218
 80258cc:	3f851591 	.word	0x3f851591
 80258d0:	3f317180 	.word	0x3f317180
 80258d4:	3717f7d1 	.word	0x3717f7d1
 80258d8:	b717f7d1 	.word	0xb717f7d1
 80258dc:	b457edbb 	.word	0xb457edbb
 80258e0:	36867e54 	.word	0x36867e54
 80258e4:	bd088889 	.word	0xbd088889
 80258e8:	b8a670cd 	.word	0xb8a670cd
 80258ec:	3ad00d01 	.word	0x3ad00d01
 80258f0:	3fb8aa3b 	.word	0x3fb8aa3b
 80258f4:	7149f2ca 	.word	0x7149f2ca

080258f8 <fabsf>:
 80258f8:	ee10 3a10 	vmov	r3, s0
 80258fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8025900:	ee00 3a10 	vmov	s0, r3
 8025904:	4770      	bx	lr

08025906 <finitef>:
 8025906:	b082      	sub	sp, #8
 8025908:	ed8d 0a01 	vstr	s0, [sp, #4]
 802590c:	9801      	ldr	r0, [sp, #4]
 802590e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8025912:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8025916:	bfac      	ite	ge
 8025918:	2000      	movge	r0, #0
 802591a:	2001      	movlt	r0, #1
 802591c:	b002      	add	sp, #8
 802591e:	4770      	bx	lr

08025920 <scalbnf>:
 8025920:	ee10 3a10 	vmov	r3, s0
 8025924:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8025928:	d024      	beq.n	8025974 <scalbnf+0x54>
 802592a:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 802592e:	d302      	bcc.n	8025936 <scalbnf+0x16>
 8025930:	ee30 0a00 	vadd.f32	s0, s0, s0
 8025934:	4770      	bx	lr
 8025936:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 802593a:	d121      	bne.n	8025980 <scalbnf+0x60>
 802593c:	4b29      	ldr	r3, [pc, #164]	; (80259e4 <scalbnf+0xc4>)
 802593e:	eddf 7a2a 	vldr	s15, [pc, #168]	; 80259e8 <scalbnf+0xc8>
 8025942:	4298      	cmp	r0, r3
 8025944:	ee20 0a27 	vmul.f32	s0, s0, s15
 8025948:	db15      	blt.n	8025976 <scalbnf+0x56>
 802594a:	ee10 3a10 	vmov	r3, s0
 802594e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8025952:	3a19      	subs	r2, #25
 8025954:	4402      	add	r2, r0
 8025956:	2afe      	cmp	r2, #254	; 0xfe
 8025958:	dd14      	ble.n	8025984 <scalbnf+0x64>
 802595a:	ee10 3a10 	vmov	r3, s0
 802595e:	eddf 7a23 	vldr	s15, [pc, #140]	; 80259ec <scalbnf+0xcc>
 8025962:	eddf 6a23 	vldr	s13, [pc, #140]	; 80259f0 <scalbnf+0xd0>
 8025966:	2b00      	cmp	r3, #0
 8025968:	eeb0 7a67 	vmov.f32	s14, s15
 802596c:	fe67 7aa6 	vselge.f32	s15, s15, s13
 8025970:	ee27 0a27 	vmul.f32	s0, s14, s15
 8025974:	4770      	bx	lr
 8025976:	eddf 7a1f 	vldr	s15, [pc, #124]	; 80259f4 <scalbnf+0xd4>
 802597a:	ee20 0a27 	vmul.f32	s0, s0, s15
 802597e:	4770      	bx	lr
 8025980:	0dd2      	lsrs	r2, r2, #23
 8025982:	e7e7      	b.n	8025954 <scalbnf+0x34>
 8025984:	2a00      	cmp	r2, #0
 8025986:	dd06      	ble.n	8025996 <scalbnf+0x76>
 8025988:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 802598c:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8025990:	ee00 3a10 	vmov	s0, r3
 8025994:	4770      	bx	lr
 8025996:	f112 0f16 	cmn.w	r2, #22
 802599a:	da19      	bge.n	80259d0 <scalbnf+0xb0>
 802599c:	f24c 3350 	movw	r3, #50000	; 0xc350
 80259a0:	4298      	cmp	r0, r3
 80259a2:	ee10 3a10 	vmov	r3, s0
 80259a6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80259aa:	dd09      	ble.n	80259c0 <scalbnf+0xa0>
 80259ac:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 80259ec <scalbnf+0xcc>
 80259b0:	2b00      	cmp	r3, #0
 80259b2:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80259f0 <scalbnf+0xd0>
 80259b6:	eef0 7a40 	vmov.f32	s15, s0
 80259ba:	fe00 0a07 	vseleq.f32	s0, s0, s14
 80259be:	e7dc      	b.n	802597a <scalbnf+0x5a>
 80259c0:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 80259f4 <scalbnf+0xd4>
 80259c4:	2b00      	cmp	r3, #0
 80259c6:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80259f8 <scalbnf+0xd8>
 80259ca:	eef0 7a40 	vmov.f32	s15, s0
 80259ce:	e7f4      	b.n	80259ba <scalbnf+0x9a>
 80259d0:	3219      	adds	r2, #25
 80259d2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80259d6:	eddf 7a09 	vldr	s15, [pc, #36]	; 80259fc <scalbnf+0xdc>
 80259da:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 80259de:	ee07 3a10 	vmov	s14, r3
 80259e2:	e7c5      	b.n	8025970 <scalbnf+0x50>
 80259e4:	ffff3cb0 	.word	0xffff3cb0
 80259e8:	4c000000 	.word	0x4c000000
 80259ec:	7149f2ca 	.word	0x7149f2ca
 80259f0:	f149f2ca 	.word	0xf149f2ca
 80259f4:	0da24260 	.word	0x0da24260
 80259f8:	8da24260 	.word	0x8da24260
 80259fc:	33000000 	.word	0x33000000

08025a00 <_sbrk>:
 8025a00:	4a04      	ldr	r2, [pc, #16]	; (8025a14 <_sbrk+0x14>)
 8025a02:	4603      	mov	r3, r0
 8025a04:	6811      	ldr	r1, [r2, #0]
 8025a06:	b909      	cbnz	r1, 8025a0c <_sbrk+0xc>
 8025a08:	4903      	ldr	r1, [pc, #12]	; (8025a18 <_sbrk+0x18>)
 8025a0a:	6011      	str	r1, [r2, #0]
 8025a0c:	6810      	ldr	r0, [r2, #0]
 8025a0e:	4403      	add	r3, r0
 8025a10:	6013      	str	r3, [r2, #0]
 8025a12:	4770      	bx	lr
 8025a14:	2003ad10 	.word	0x2003ad10
 8025a18:	2003ad18 	.word	0x2003ad18

08025a1c <_init>:
 8025a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025a1e:	bf00      	nop
 8025a20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8025a22:	bc08      	pop	{r3}
 8025a24:	469e      	mov	lr, r3
 8025a26:	4770      	bx	lr

08025a28 <_fini>:
 8025a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025a2a:	bf00      	nop
 8025a2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8025a2e:	bc08      	pop	{r3}
 8025a30:	469e      	mov	lr, r3
 8025a32:	4770      	bx	lr
