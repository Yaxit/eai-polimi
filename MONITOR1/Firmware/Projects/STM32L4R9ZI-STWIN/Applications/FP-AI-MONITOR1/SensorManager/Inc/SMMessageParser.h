/**
 ******************************************************************************
 * @file    SMMessageParser.h
 * @author  SRA - MCD
 * @version 1.0.0
 * @date    6-Sep-2021
 *
 * @brief   Input Output and Feature report Declaration.
 *
 * This file declare the Input, Output, Feature and Internal report for
 * the application. The reports are generated by the sensors as well as
 * form the MCU (internal reports).
 *
 * Report ID list:
 * - 0x01: inputReport                (Sensor --> MCU). ISM330DHCX
 * - 0xFE: internalReport             (MCU --> MCU).    FORCE_STEP
 *
 ******************************************************************************
 * @attention
 *
 * <h2><center>&copy; Copyright (c) 2021 STMicroelectronics.
 * All rights reserved.</center></h2>
 *
 * This software component is licensed by ST under ODE SOFTWARE LICENSE AGREEMENT
 * SLA0094, the "License"; You may not use this file except in compliance with
 * the License. You may obtain a copy of the License at:
 *                             www.st.com/SLA0094
 *
 ******************************************************************************
 */

#ifndef SM_MESSAGE_PARSER_H_
#define SM_MESSAGE_PARSER_H_

#ifdef __cplusplus
extern "C" {
#endif

#include "services/syserror.h"
#include "SPIBusIF.h"
#include "I2CBusIF.h"

#define SM_MESSAGE_ID_ISM330DHCX                0x01  ///< Report coming from the ISM330DHCX sensor
#define SM_MESSAGE_ID_IIS3DWB                   0x02  ///< Report coming from the IIS3DWB sensor
#define SM_MESSAGE_ID_AI_CMD                    0x03  ///< AI command encapsulated in a HID report.
#define SM_MESSAGE_ID_SENSOR_CMD                0x04  ///< Sensor command encapsulated in a HID report.
#define SM_MESSAGE_ID_SD_CMD                    0x05  ///< SDCARD command encapsulated in a HID report.
#define SM_MESSAGE_ID_SPI_BUS_READ              0x06  ///< Command to read from the SPI bus
#define SM_MESSAGE_ID_SPI_BUS_WRITE             0x07  ///< Command to write in the SPI bus.
#define SM_MESSAGE_ID_I2C_BUS_READ              0x08  ///< Command to read from the I2C bus
#define SM_MESSAGE_ID_I2C_BUS_WRITE             0x09  ///< Command to write in the I2C bus.
#define SM_MESSAGE_ID_HTS221                    0x0A  ///< Report coming from the HTS221 sensor
#define SM_MESSAGE_ID_IMP23ABSU                 0x0C  ///< Report coming from the IMP23ABSSU sensor
#define SM_MESSAGE_ID_LPS22HH                   0x0D  ///< Report coming from the LPS22HH sensor
#define SM_MESSAGE_ID_FORCE_STEP                0xFE  ///< Special ID used by the INIT task to force the execution of ManagedTaskEx step.


  typedef union _SMMessage {
    uint8_t messageID;

    //--------------------------------------------------------------------------------
    //  SensorReport 01 (Device --> MCU) - Sensor ISM330DHCX
    //--------------------------------------------------------------------------------

    struct ism330dhcxMessage_t
    {
      uint8_t  messageId;                                 // Report ID = 0x01 (1)
      uint8_t  bDataReady : 1;                           // New sensor data ready
      uint8_t  nReserved  : 7;                           // Reserved
    } ism330dhcxMessage;

    //--------------------------------------------------------------------------------
    //  SensorReport 02 (Device --> MCU) - Sensor IIS3DWB
    //--------------------------------------------------------------------------------

    struct iis3dwbMessage_t
    {
      uint8_t  messageId;                                 // Report ID = 0x02 (2)
      uint8_t  bDataReady : 1;                           // New sensor data ready
      uint8_t  nReserved  : 7;                           // Reserved
    } iis3dwbMessage;

    //--------------------------------------------------------------------------------
    //  aiReport 03 (CLI --> MCU)
    //--------------------------------------------------------------------------------

    struct aiMessage_t
    {
      uint8_t   messageId;                                // Report ID = 0x03 (3)
      uint16_t  nCmdID;                                  // Specify the command ID
      boolean_t bSyncCmd;                                // TRUE when the command must be blocking. It is managed by AITaskPostCommand() and AITaskSendComand() API
      union {
        uint32_t nParam;                                 // generic parameter. It depends on the command ID.
        float fParam;                                    // genetic floating point parameters.
      };
    } aiMessage;

    //--------------------------------------------------------------------------------
    //  SensorReport 04 (MCU --> MCU) - Generic Sensor command
    //--------------------------------------------------------------------------------

    struct sensorMessage_t
    {
      uint8_t   messageId;                                // Report ID = 0x04 (4)
      uint8_t   nSensorId;                               // Specify the sensor ID
      uint16_t  nCmdID;                                  // Specify the command ID
      uint32_t  nParam;                                  // Specify an optional parameter.
    } sensorMessage;

    //--------------------------------------------------------------------------------
    //  SDCARD Report 05 (MCU --> MCU) - SDCARD command
    //--------------------------------------------------------------------------------

    struct sdMessage_t
    {
      uint8_t   messageId;                                // Report ID = 0x05 (5)
      uint8_t   nPadding;                                // Padding byte
      uint16_t  nCmdID;                                  // Specify the command ID
      uint32_t  nParam;                                  // Specify an optional parameter.
    } sdMessage;

    //--------------------------------------------------------------------------------
    //  SPI Read / Write command 06 07 (MCU --> MCU) - SPI Bus command
    //--------------------------------------------------------------------------------

    struct spiIOMessage_t
    {
      uint8_t   messageId;                                // Report ID = 0x06 / 0x07 (6 / 7)
      uint8_t   nRegAddr;
      uint16_t  nDataSize;
      uint8_t  *pnData;
      SPIBusIF *pxSensor;
    } spiIOMessage;

    //--------------------------------------------------------------------------------
    //  I2C Read / Write command 08 09 (MCU --> MCU) - SPI Bus command
    //--------------------------------------------------------------------------------

    struct i2cIOMessage_t
    {
      uint8_t   messageId;                                // Report ID = 0x08 / 0x09 (8 / 9)
      uint8_t   nRegAddr;
      uint16_t  nDataSize;
      uint8_t  *pnData;
      I2CBusIF *pxSensor;
    } i2cIOMessage;

    //--------------------------------------------------------------------------------
    //  SensorReport 10 (Device --> MCU) - Sensor HTS221
    //--------------------------------------------------------------------------------

    struct hts221Message_t
    {
      uint8_t  messageId;                                 // Report ID = 0x0A (10)
      uint8_t  bDataReady : 1;                           // New sensor data ready
      uint8_t  nReserved  : 7;                           // Reserved
    } hts221Message;

    //--------------------------------------------------------------------------------
    //  SensorReport 12 (Device --> MCU) - Sensor IMP23ABSU
    //--------------------------------------------------------------------------------

    struct imp23absuMessage_t
    {
      uint8_t  messageId;                                 // Report ID = 0x0C (1)
      uint8_t  half;
      uint8_t  bDataReady : 1;                           // New sensor data ready
      uint8_t  nReserved  : 7;                           // Reserved
    } imp23absuMessage;

    //--------------------------------------------------------------------------------
    //  SensorReport 13 (Device --> MCU) - Sensor LPS22HH
    //--------------------------------------------------------------------------------

    struct lps22hhMessage_t
    {
      uint8_t  messageId;                                 // Report ID = 0x0D (13)
      uint8_t  bDataReady : 1;                           // New sensor data ready
      uint8_t  nReserved  : 7;                           // Reserved
    } lps22hhMessage;

    //--------------------------------------------------------------------------------
    //  internalReport (MCU)
    //--------------------------------------------------------------------------------

    struct internalMessageFE_t
    {
      uint8_t  messageId;                                 // Report ID = 0xFE
      uint8_t  nData;                                    // reserved. It can be ignored
    } internalMessageFE;

  } SMMessage;


  /**
   * Get the size of the report with a specified ID
   *
   * @param nReportID [IN] specifies a report ID
   * @return the size of the report with the specified ID or SYS_INVALID_PARAMETER_ERROR_CODE
   */
  uint16_t SMMessageGetSize(uint8_t nReportID);


#ifdef __cplusplus
}
#endif


#endif /* SM_MESSAGE_PARSER_H_ */
